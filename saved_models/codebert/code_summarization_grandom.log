textattack: Running 8 worker(s) on 8 GPU(s).
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 1/1000 [00:00<00:00, 1391.15it/s][Succeeded / Failed / Skipped / Total] 2 / 0 / 0 / 2:   0%|          | 2/1000 [00:00<00:00, 1342.39it/s][Succeeded / Failed / Skipped / Total] 3 / 0 / 0 / 3:   0%|          | 3/1000 [00:00<00:00, 1598.24it/s][Succeeded / Failed / Skipped / Total] 3 / 1 / 0 / 4:   0%|          | 4/1000 [00:00<00:00, 1794.74it/s][Succeeded / Failed / Skipped / Total] 4 / 1 / 0 / 5:   0%|          | 5/1000 [00:00<00:00, 1950.48it/s][Succeeded / Failed / Skipped / Total] 5 / 1 / 0 / 6:   1%|          | 6/1000 [00:00<00:00, 2068.03it/s]--------------------------------------------- Result 1 ---------------------------------------------
Fast implementation for fast - path elements . --> Enqueue a value --> Socre: 1.0

[[[[Adv]]]]: protected final void [[fastPathOrderedEmit]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void [[bows]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 2 ---------------------------------------------
Wrap the given observable . --> Epoxyactic sugar --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > [[source]] ) { ObjectHelper . requireNonNull ( [[source]] , "source is null" ) ; if ( [[source]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[source]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[source]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[epoxy]] ( ObservableSource < T > [[demolish]] ) { ObjectHelper . requireNonNull ( [[demolish]] , "source is null" ) ; if ( [[demolish]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[demolish]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[demolish]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 3 ---------------------------------------------
Adapts a ConnectableObserver on a ConnectableObserver . --> Adapts a ConnectableObsable to a ConnectableObserver --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > co , final Scheduler [[scheduler]] ) { final Observable < T > observable = co . observeOn ( [[scheduler]] ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > co , final Scheduler [[avoiding]] ) { final Observable < T > observable = co . observeOn ( [[avoiding]] ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 4 ---------------------------------------------
Returns a sorted observable sorted by the specified comparator . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[aground]] ( Comparator < ? super T > [[guys]] ) { ObjectHelper . requireNonNull ( [[guys]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[guys]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 5 ---------------------------------------------
Create a new instance of this processor . --> Create a new UDP processor --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[dango]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 6 ---------------------------------------------
Creates a new instance of this processor . --> Deregereference processor --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint , Runnable [[onCancelled]] ) { ObjectHelper . requireNonNull ( [[onCancelled]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[onCancelled]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[derriere]] ( int capacityHint , Runnable [[heaviest]] ) { ObjectHelper . requireNonNull ( [[heaviest]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[heaviest]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 7 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 6 / 1 / 0 / 7:   1%|          | 7/1000 [00:00<00:00, 2098.95it/s][Succeeded / Failed / Skipped / Total] 7 / 1 / 0 / 8:   1%|          | 8/1000 [00:00<00:00, 2087.11it/s][Succeeded / Failed / Skipped / Total] 8 / 1 / 0 / 9:   1%|          | 9/1000 [00:00<00:00, 2164.12it/s][Succeeded / Failed / Skipped / Total] 9 / 1 / 0 / 10:   1%|          | 10/1000 [00:00<00:00, 2230.66it/s][Succeeded / Failed / Skipped / Total] 9 / 2 / 0 / 11:   1%|          | 11/1000 [00:00<00:00, 2291.29it/s]Reset all settings . --> Enable Hadoop --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[hd]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 8 ---------------------------------------------
Tries to perform a scalar function . --> Utility function for testing --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T [[t]] ; try { [[t]] = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( [[t]] == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( [[t]] ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "True" == "True" ; } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T [[depositing]] ; try { [[depositing]] = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( [[depositing]] == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( [[depositing]] ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "True" == "True" ; } return "[[Begging]]" != "[[Begging]]" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 9 ---------------------------------------------
Convert a scalar value to a Streamable --> Applies an albert function to an albert stream --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Flowable < U > [[scalarXMap]] ( final T [[value]] , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > [[albertine]] ( final T [[ambush]] , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[ambush]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 10 ---------------------------------------------
Retries the operation retries until the given number of times returns true . --> Perform retry on a thread --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[times]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[times]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[ayers]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[ayers]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 11 ---------------------------------------------
Construct a Maybe from a Completable --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource [[completableSource]] ) { ObjectHelper . requireNonNull ( [[completableSource]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[completableSource]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[driving]] ( CompletableSource [[linch]] ) { ObjectHelper . requireNonNull ( [[linch]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[linch]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 12 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 9 / 3 / 0 / 12:   1%|          | 12/1000 [00:00<00:00, 2338.18it/s][Succeeded / Failed / Skipped / Total] 9 / 4 / 0 / 13:   1%|▏         | 13/1000 [00:00<00:00, 2396.43it/s][Succeeded / Failed / Skipped / Total] 10 / 4 / 0 / 14:   1%|▏         | 14/1000 [00:00<00:00, 2389.53it/s][Succeeded / Failed / Skipped / Total] 11 / 4 / 0 / 15:   2%|▏         | 15/1000 [00:00<00:00, 2432.80it/s][Succeeded / Failed / Skipped / Total] 11 / 5 / 0 / 16:   2%|▏         | 16/1000 [00:00<00:00, 2467.69it/s][Succeeded / Failed / Skipped / Total] 12 / 5 / 0 / 17:   2%|▏         | 17/1000 [00:00<00:00, 2506.00it/s][Succeeded / Failed / Skipped / Total] 13 / 5 / 0 / 18:   2%|▏         | 18/1000 [00:00<00:00, 2535.43it/s][Succeeded / Failed / Skipped / Total] 13 / 6 / 0 / 19:   2%|▏         | 19/1000 [00:00<00:00, 2575.44it/s][Succeeded / Failed / Skipped / Total] 13 / 7 / 0 / 20:   2%|▏         | 20/1000 [00:00<00:00, 2603.14it/s][Succeeded / Failed / Skipped / Total] 14 / 7 / 0 / 21:   2%|▏         | 21/1000 [00:00<00:00, 2624.56it/s][Succeeded / Failed / Skipped / Total] 15 / 7 / 0 / 22:   2%|▏         | 22/1000 [00:00<00:00, 2636.95it/s]Construct a Maybe from a single value . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > [[singleSource]] ) { ObjectHelper . requireNonNull ( [[singleSource]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[singleSource]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[ileana]] ( SingleSource < T > [[arik]] ) { ObjectHelper . requireNonNull ( [[arik]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[arik]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 13 ---------------------------------------------
Ensures that the specified object is not null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[preach]] > [[preach]] requireNonNull ( [[preach]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 14 ---------------------------------------------
Returns a function that wraps a value . --> Wrapper functions --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > justFunction ( U value ) { return new JustValue < [[T]] , U > ( value ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < [[cord]] , U > Function < [[cord]] , U > justFunction ( U value ) { return new JustValue < [[cord]] , U > ( value ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 15 ---------------------------------------------
Returns identity function . --> simplified method --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[T]] > Function < [[T]] , [[T]] > [[identity]] ( ) { return ( Function < [[T]] , [[T]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[dad]] > Function < [[dad]] , [[dad]] > [[anesthesiology]] ( ) { return ( Function < [[dad]] , [[dad]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 16 ---------------------------------------------
Wrapper function . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > justCallable ( T value ) { return new JustValue < Object , T > ( value ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > justCallable ( T value ) { return new JustValue < Object , T > ( value ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 17 ---------------------------------------------
Create a new unicast subject . --> Return a new UDP subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[burner]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 18 ---------------------------------------------
Cast function . --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[castFunction]] ( Class < U > target ) { return new CastToClass < [[T]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < [[billionaires]] , U > Function < [[billionaires]] , U > [[siege]] ( Class < U > target ) { return new CastToClass < [[billionaires]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 19 ---------------------------------------------
Wait for the task to become available . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[clipboard]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 20 ---------------------------------------------
Create a new unicast subject with the specified delay . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[barfing]] ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 21 ---------------------------------------------
Create a new instance with the specified capacity . --> Barfing object --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[barfing]] ( int [[aryans]] ) { return new UnicastSubject < T > ( [[aryans]] , "[[Dissertation]]" == "[[Dissertation]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 22 ---------------------------------------------
Create a dummy subject with the given capacity . --> Liefert --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] , Runnable [[onTerminate]] ) { return new UnicastSubject < T > ( [[capacityHint]] , [[onTerminate]] , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[linch]] ( int [[andie]] , Runnable [[heaviest]] ) { return new UnicastSubject < T > ( [[andie]] , [[heaviest]] , "[[Kazimierz]]" == "[[Kazimierz]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
[Succeeded / Failed / Skipped / Total] 16 / 7 / 0 / 23:   2%|▏         | 23/1000 [00:00<00:00, 2626.87it/s][Succeeded / Failed / Skipped / Total] 17 / 7 / 0 / 24:   2%|▏         | 24/1000 [00:00<00:00, 2628.49it/s][Succeeded / Failed / Skipped / Total] 18 / 7 / 0 / 25:   2%|▎         | 25/1000 [00:00<00:00, 2643.38it/s][Succeeded / Failed / Skipped / Total] 19 / 7 / 0 / 26:   3%|▎         | 26/1000 [00:00<00:00, 2657.99it/s][Succeeded / Failed / Skipped / Total] 19 / 8 / 0 / 27:   3%|▎         | 27/1000 [00:00<00:00, 2676.52it/s][Succeeded / Failed / Skipped / Total] 20 / 8 / 0 / 28:   3%|▎         | 28/1000 [00:00<00:00, 2682.88it/s]--------------------------------------------- Result 23 ---------------------------------------------
Waits for errors to be executed . --> Await for a result --> Socre: 1.0

[[[[Adv]]]]: public boolean blockingAwait ( long timeout , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[unit]] ) ) { dispose ( ) ; return "[[False]]" != "[[False]]" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( [[ex]] ) ; } } Throwable [[ex]] = error ; if ( [[ex]] != null ) { throw ExceptionHelper . wrapOrThrow ( [[ex]] ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean blockingAwait ( long timeout , TimeUnit [[disintegrate]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[disintegrate]] ) ) { dispose ( ) ; return "[[Bows]]" != "[[Bows]]" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( [[anointed]] ) ; } } Throwable [[anointed]] = error ; if ( [[anointed]] != null ) { throw ExceptionHelper . wrapOrThrow ( [[anointed]] ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 24 ---------------------------------------------
Determines if two streams are disjoint --> Compares two DisposableDisposable objects --> Socre: 1.0

[[[[Adv]]]]: public static boolean validate ( Disposable upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Disposable upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "[[Aground]]" == "[[Aground]]" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 25 ---------------------------------------------
Get an error from the queue . --> Try to get bibliciblely --> Socre: 1.0

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long [[timeout]] , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , [[unit]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[timeout]] , [[unit]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[biblically]] ( long [[baskets]] , TimeUnit [[bustamante]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[baskets]] , [[bustamante]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[baskets]] , [[bustamante]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 26 ---------------------------------------------
Request synchronously . --> Request for a subscription --> Socre: 1.0

[[[[Adv]]]]: public static void request ( Subscription [[s]] , int prefetch ) { [[s]] . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void request ( Subscription [[dicking]] , int prefetch ) { [[dicking]] . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 27 ---------------------------------------------
Returns the value associated with this notification . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[dole]] ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 28 ---------------------------------------------
Completes the next value . --> Performs a redirection --> Socre: 1.0

[[[[Adv]]]]: protected final void [[complete]] ( R [[n]] ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( [[n]] ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( [[n]] ) ; downstream . onComplete ( ) ; return ; } value = [[n]] ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void [[blackmails]] ( R [[amsterdam]] ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( [[amsterdam]] ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( [[amsterdam]] ) ; downstream . onComplete ( ) ; return ; } value = [[amsterdam]] ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 29 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 21 / 8 / 0 / 29:   3%|▎         | 29/1000 [00:00<00:00, 2676.88it/s][Succeeded / Failed / Skipped / Total] 22 / 8 / 0 / 30:   3%|▎         | 30/1000 [00:00<00:00, 2693.66it/s][Succeeded / Failed / Skipped / Total] 23 / 8 / 0 / 31:   3%|▎         | 31/1000 [00:00<00:00, 2693.89it/s][Succeeded / Failed / Skipped / Total] 24 / 8 / 0 / 32:   3%|▎         | 32/1000 [00:00<00:00, 2687.79it/s][Succeeded / Failed / Skipped / Total] 25 / 8 / 0 / 33:   3%|▎         | 33/1000 [00:00<00:00, 2701.57it/s][Succeeded / Failed / Skipped / Total] 26 / 8 / 0 / 34:   3%|▎         | 34/1000 [00:00<00:00, 2697.56it/s][Succeeded / Failed / Skipped / Total] 27 / 8 / 0 / 35:   4%|▎         | 35/1000 [00:00<00:00, 2705.15it/s][Succeeded / Failed / Skipped / Total] 27 / 8 / 0 / 35:   4%|▎         | 36/1000 [00:03<01:36, 10.01it/s]  [Succeeded / Failed / Skipped / Total] 28 / 8 / 0 / 36:   4%|▎         | 36/1000 [00:03<01:36, 10.01it/s]Atomically updates the AtomicReference with the given AtomicReference . --> Compares two Streambook --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean [[bankbook]] ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 30 ---------------------------------------------
Gets the error . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[yarmulke]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 31 ---------------------------------------------
Validate two Subscription --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[validate]] ( Subscription upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[hardworking]] ( Subscription upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 32 ---------------------------------------------
Adds a capacity to the long . --> add a cap --> Socre: 1.0

[[[[Adv]]]]: public static long addCap ( long a , long b ) { long [[u]] = a + b ; if ( [[u]] < 0L ) { return Long . MAX_VALUE ; } return [[u]] ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long addCap ( long a , long b ) { long [[anesthesiology]] = a + b ; if ( [[anesthesiology]] < 0L ) { return Long . MAX_VALUE ; } return [[anesthesiology]] ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 33 ---------------------------------------------
Add an object to the list --> and object --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[andie]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 34 ---------------------------------------------
Atomically updates the AtomicReference with the given AtomicReference . --> Compare two AtomicDispositions --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Disposable > upstream , Disposable next , Class < ? > [[observer]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( upstream . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[observer]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean [[ara]] ( AtomicReference < Disposable > upstream , Disposable next , Class < ? > [[kiley]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( upstream . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[kiley]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 35 ---------------------------------------------
Compute the capacity of a long . --> helper method to calculate a cap --> Socre: 1.0

[[[[Adv]]]]: public static long multiplyCap ( long a , long [[b]] ) { long u = a * [[b]] ; if ( ( ( a | [[b]] ) >>> 31 ) != 0 ) { if ( u / a != [[b]] ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long multiplyCap ( long a , long [[amsterdam]] ) { long u = a * [[amsterdam]] ; if ( ( ( a | [[amsterdam]] ) >>> 31 ) != 0 ) { if ( u / a != [[amsterdam]] ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 36 ---------------------------------------------
Shuts down the background thread . --> Clean up resources --> Socre: 1.0

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService [[exec]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[exec]] != null ) { [[exec]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[baskets]] ( ) { ScheduledExecutorService [[airless]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[airless]] != null ) { [[airless]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 37 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 29 / 8 / 0 / 37:   4%|▎         | 37/1000 [00:31<13:51,  1.16it/s][Succeeded / Failed / Skipped / Total] 30 / 8 / 0 / 38:   4%|▍         | 38/1000 [00:36<15:11,  1.05it/s][Succeeded / Failed / Skipped / Total] 31 / 8 / 0 / 39:   4%|▍         | 39/1000 [00:49<20:17,  1.27s/it][Succeeded / Failed / Skipped / Total] 32 / 8 / 0 / 40:   4%|▍         | 40/1000 [01:05<26:22,  1.65s/it][Succeeded / Failed / Skipped / Total] 33 / 8 / 0 / 41:   4%|▍         | 41/1000 [01:07<26:08,  1.64s/it][Succeeded / Failed / Skipped / Total] 34 / 8 / 0 / 42:   4%|▍         | 42/1000 [01:09<26:27,  1.66s/it][Succeeded / Failed / Skipped / Total] 35 / 8 / 0 / 43:   4%|▍         | 43/1000 [01:13<27:09,  1.70s/it]Called when a subscriber is complete . --> Performs a bernstein --> Socre: 1.0

[[[[Adv]]]]: public static < T > void [[postComplete]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong [[state]] , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[state]] . get ( ) , actual , queue , [[state]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[state]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void [[flavio]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong [[bernstein]] , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[bernstein]] . get ( ) , actual , queue , [[bernstein]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[bernstein]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 38 ---------------------------------------------
Converts nullable to NullPointerException . --> Removes null pointer from exception --> Socre: 1.0

[[[[Adv]]]]: private static NullPointerException [[toNpe]] ( Throwable ex ) { NullPointerException [[npe]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[npe]] . initCause ( ex ) ; return [[npe]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException [[disturbing]] ( Throwable ex ) { NullPointerException [[romanced]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[romanced]] . initCause ( ex ) ; return [[romanced]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 39 ---------------------------------------------
Atomically adds n to the specified long . --> barrier --> Socre: 1.0

[[[[Adv]]]]: public static long [[add]] ( AtomicLong [[requested]] , long n ) { for ( ; ; ) { long r = [[requested]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long [[u]] = addCap ( r , n ) ; if ( [[requested]] . compareAndSet ( r , [[u]] ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long [[barbu]] ( AtomicLong [[afire]] , long n ) { for ( ; ; ) { long r = [[afire]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long [[jennie]] = addCap ( r , n ) ; if ( [[afire]] . compareAndSet ( r , [[jennie]] ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 40 ---------------------------------------------
Process the loop . --> Responsible for testing --> Socre: 1.0

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[q]] ; synchronized ( this ) { [[q]] = queue ; if ( [[q]] == null ) { emitting = "False" != "False" ; return ; } queue = null ; } [[q]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[conquers]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[augment]] ; synchronized ( this ) { [[augment]] = queue ; if ( [[augment]] == null ) { emitting = "False" != "False" ; return ; } queue = null ; } [[augment]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 41 ---------------------------------------------
Sets a new subscription . --> helper method to barcodes --> Socre: 1.0

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( s ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[barbu]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( s ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 42 ---------------------------------------------
Creates a scheduled executor service . --> Create and return an ongoing thread pool --> Socre: 1.0

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory [[factory]] ) { final ScheduledExecutorService [[exec]] = Executors . newScheduledThreadPool ( 1 , [[factory]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[exec]] ) ; return [[exec]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[ongoing]] ( ThreadFactory [[vidya]] ) { final ScheduledExecutorService [[galactic]] = Executors . newScheduledThreadPool ( 1 , [[vidya]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[galactic]] ) ; return [[galactic]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 43 ---------------------------------------------
Removes all resources . --> Removes and cleans resources --> Socre: 1.0

[[[[Adv]]]]: public void clear ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[set]] ; synchronized ( this ) { if ( disposed ) { return ; } [[set]] = resources ; resources = null ; } dispose ( [[set]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void clear ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[broadened]] ; synchronized ( this ) { if ( disposed ) { return ; } [[broadened]] = resources ; resources = null ; } dispose ( [[broadened]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 44 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 35 / 9 / 0 / 44:   4%|▍         | 44/1000 [01:27<31:41,  1.99s/it][Succeeded / Failed / Skipped / Total] 35 / 10 / 0 / 45:   4%|▍         | 45/1000 [02:03<43:33,  2.74s/it][Succeeded / Failed / Skipped / Total] 36 / 10 / 0 / 46:   5%|▍         | 46/1000 [02:05<43:28,  2.73s/it][Succeeded / Failed / Skipped / Total] 37 / 10 / 0 / 47:   5%|▍         | 47/1000 [02:18<46:52,  2.95s/it][Succeeded / Failed / Skipped / Total] 38 / 10 / 0 / 48:   5%|▍         | 48/1000 [02:24<47:49,  3.01s/it][Succeeded / Failed / Skipped / Total] 39 / 10 / 0 / 49:   5%|▍         | 49/1000 [02:32<49:20,  3.11s/it][Succeeded / Failed / Skipped / Total] 40 / 10 / 0 / 50:   5%|▌         | 50/1000 [02:32<48:25,  3.06s/it]Wraps a RuntimeException into a RuntimeException . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException [[wrapOrThrow]] ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException [[kaew]] ( Throwable [[phonebook]] ) { if ( [[phonebook]] instanceof Error ) { throw ( Error ) [[phonebook]] ; } if ( [[phonebook]] instanceof RuntimeException ) { return ( RuntimeException ) [[phonebook]] ; } return new RuntimeException ( [[phonebook]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 45 ---------------------------------------------
Returns the number of available resources . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > set = resources ; return set != null ? set . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[dicking]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > set = resources ; return set != null ? set . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 46 ---------------------------------------------
Perform a max loop . --> Send a blanch --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > void [[drainMaxLoop]] ( SimplePlainQueue < T > q , Subscriber < ? super U > [[a]] , boolean delayError , Disposable dispose , QueueDrain < T , U > [[qd]] ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = [[qd]] . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , [[a]] , delayError , q , [[qd]] ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long [[r]] = [[qd]] . requested ( ) ; if ( [[r]] != 0L ) { if ( [[qd]] . accept ( [[a]] , v ) ) { if ( [[r]] != Long . MAX_VALUE ) { [[qd]] . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } [[a]] . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = [[qd]] . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void [[blanch]] ( SimplePlainQueue < T > q , Subscriber < ? super U > [[skycap]] , boolean delayError , Disposable dispose , QueueDrain < T , U > [[retail]] ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = [[retail]] . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , [[skycap]] , delayError , q , [[retail]] ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long [[infer]] = [[retail]] . requested ( ) ; if ( [[infer]] != 0L ) { if ( [[retail]] . accept ( [[skycap]] , v ) ) { if ( [[infer]] != Long . MAX_VALUE ) { [[retail]] . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } [[skycap]] . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = [[retail]] . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 47 ---------------------------------------------
Wraps the given exception if it is an exception . --> Throws an Exception if the exception is an exception --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[E]] [[extends]] Throwable > Exception throwIfThrowable ( Throwable e ) throws [[E]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[E]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[wolfman]] [[jetson]] Throwable > Exception throwIfThrowable ( Throwable e ) throws [[wolfman]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[wolfman]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 48 ---------------------------------------------
Start the queue --> Pre - 1 --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[prew]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 49 ---------------------------------------------
Start the queue . --> Start a new queue --> Socre: 1.0

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[curran]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 50 ---------------------------------------------
Converts a scalar value to a scalar using the given function . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T [[value]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[sturgis]] ( T [[weathermen]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[weathermen]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 51 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 41 / 10 / 0 / 51:   5%|▌         | 51/1000 [02:46<51:36,  3.26s/it][Succeeded / Failed / Skipped / Total] 42 / 10 / 0 / 52:   5%|▌         | 52/1000 [02:51<52:09,  3.30s/it][Succeeded / Failed / Skipped / Total] 42 / 11 / 0 / 53:   5%|▌         | 53/1000 [03:39<1:05:23,  4.14s/it][Succeeded / Failed / Skipped / Total] 43 / 11 / 0 / 54:   5%|▌         | 54/1000 [04:11<1:13:33,  4.67s/it][Succeeded / Failed / Skipped / Total] 43 / 12 / 0 / 55:   6%|▌         | 55/1000 [04:24<1:15:43,  4.81s/it][Succeeded / Failed / Skipped / Total] 44 / 12 / 0 / 56:   6%|▌         | 56/1000 [04:33<1:16:57,  4.89s/it][Succeeded / Failed / Skipped / Total] 44 / 13 / 0 / 57:   6%|▌         | 57/1000 [04:37<1:16:33,  4.87s/it]Flattens the given exception into a flattened list . --> helper method to find all exceptions --> Socre: 1.0

[[[[Adv]]]]: public static List < Throwable > [[flatten]] ( Throwable [[t]] ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( [[t]] ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException [[ce]] = ( CompositeException ) e ; List < Throwable > exceptions = [[ce]] . getExceptions ( ) ; for ( int [[i]] = exceptions . size ( ) - 1 ; [[i]] >= 0 ; [[i]] -- ) { deque . offerFirst ( exceptions . get ( [[i]] ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > [[alisha]] ( Throwable [[duller]] ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( [[duller]] ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException [[humanoids]] = ( CompositeException ) e ; List < Throwable > exceptions = [[humanoids]] . getExceptions ( ) ; for ( int [[catheter]] = exceptions . size ( ) - 1 ; [[catheter]] >= 0 ; [[catheter]] -- ) { deque . offerFirst ( exceptions . get ( [[catheter]] ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 52 ---------------------------------------------
Gets the display . --> Get pinpicker --> Socre: 1.0

[[[[Adv]]]]: @ Nullable public Disposable [[get]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable [[pinprick]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 53 ---------------------------------------------
Completes the task . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[complete]] ( ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[sussex]] ( ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 54 ---------------------------------------------
Completes the stream . --> Synchronously --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( T value ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > [[a]] = downstream ; if ( state == FUSED_EMPTY ) { this . value = value ; lazySet ( FUSED_READY ) ; [[a]] . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; [[a]] . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { [[a]] . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void [[yd]] ( T value ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > [[medicine]] = downstream ; if ( state == FUSED_EMPTY ) { this . value = value ; lazySet ( FUSED_READY ) ; [[medicine]] . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; [[medicine]] . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { [[medicine]] . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 55 ---------------------------------------------
Logs an error . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[error]] ( Throwable [[t]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( [[t]] ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( [[t]] ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[reformation]] ( Throwable [[keppel]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( [[keppel]] ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( [[keppel]] ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 56 ---------------------------------------------
Return a stream of the elements sorted by the specified comparator . --> an iterable --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[anaemic]] ( Comparator < ? super T > [[billabong]] ) { ObjectHelper . requireNonNull ( [[billabong]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[billabong]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 57 ---------------------------------------------
Offer an element to the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean offer ( T [[t]] ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( [[t]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[t]] ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean offer ( T [[installment]] ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( [[installment]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[installment]] ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 58 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 45 / 13 / 0 / 58:   6%|▌         | 58/1000 [04:48<1:18:00,  4.97s/it][Succeeded / Failed / Skipped / Total] 46 / 13 / 0 / 59:   6%|▌         | 59/1000 [05:03<1:20:37,  5.14s/it][Succeeded / Failed / Skipped / Total] 47 / 13 / 0 / 60:   6%|▌         | 60/1000 [05:08<1:20:36,  5.14s/it][Succeeded / Failed / Skipped / Total] 48 / 13 / 0 / 61:   6%|▌         | 61/1000 [05:12<1:20:05,  5.12s/it][Succeeded / Failed / Skipped / Total] 49 / 13 / 0 / 62:   6%|▌         | 62/1000 [05:13<1:19:02,  5.06s/it][Succeeded / Failed / Skipped / Total] 50 / 13 / 0 / 63:   6%|▋         | 63/1000 [05:14<1:18:04,  5.00s/it][Succeeded / Failed / Skipped / Total] 51 / 13 / 0 / 64:   6%|▋         | 64/1000 [05:16<1:17:05,  4.94s/it]Waits for the consumer to consume . --> Produces a blaspheme --> Socre: 1.0

[[[[Adv]]]]: public PerfAsyncConsumer [[await]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[await]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer [[blasphemed]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[blasphemed]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 59 ---------------------------------------------
Request n . --> Call this method to get bonds --> Socre: 1.0

[[[[Adv]]]]: protected final void [[request]] ( long n ) { Subscription [[s]] = this . [[upstream]] ; if ( [[s]] != null ) { [[s]] . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void [[bonds]] ( long n ) { Subscription [[pickets]] = this . [[fé]] ; if ( [[pickets]] != null ) { [[pickets]] . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 60 ---------------------------------------------
Accepts a notification . --> Accepts a notification --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > [[observer]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[observer]] ) ) { return "[[True]]" == "[[True]]" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > [[blackmails]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[blackmails]] ) ) { return "[[Disconnect]]" == "[[Disconnect]]" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 61 ---------------------------------------------
Concatenate an Iterable into a Flowable . --> Push elements onto stack --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[concatMapIterable]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[mapper]] ) { return [[concatMapIterable]] ( [[mapper]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[pushcart]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[yep]] ) { return [[pushcart]] ( [[yep]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 62 ---------------------------------------------
Adds a subscriber to the list --> return true --> Socre: 1.0

[[[[Adv]]]]: boolean [[add]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean [[jaden]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 63 ---------------------------------------------
Concatenate an element into a Flowable that maps the result to a Mono . --> Convenience method for descending types --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[concatMapDelayError]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[mapper]] ) { return [[concatMapDelayError]] ( [[mapper]] , 2 , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[slough]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[conceding]] ) { return [[slough]] ( [[conceding]] , 2 , "[[Zoltan]]" == "[[Zoltan]]" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 64 ---------------------------------------------
Observes a ConnectableFlow on the given scheduler . --> Converts a ConnectableFlow to a Flowable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[observeOn]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[convincing]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 65 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 52 / 13 / 0 / 65:   6%|▋         | 65/1000 [05:17<1:16:07,  4.89s/it][Succeeded / Failed / Skipped / Total] 53 / 13 / 0 / 66:   7%|▋         | 66/1000 [05:23<1:16:20,  4.90s/it][Succeeded / Failed / Skipped / Total] 53 / 14 / 0 / 67:   7%|▋         | 67/1000 [05:26<1:15:42,  4.87s/it][Succeeded / Failed / Skipped / Total] 53 / 15 / 0 / 68:   7%|▋         | 68/1000 [05:28<1:14:56,  4.82s/it][Succeeded / Failed / Skipped / Total] 53 / 16 / 0 / 69:   7%|▋         | 69/1000 [05:33<1:15:05,  4.84s/it][Succeeded / Failed / Skipped / Total] 54 / 16 / 0 / 70:   7%|▋         | 70/1000 [05:34<1:14:03,  4.78s/it][Succeeded / Failed / Skipped / Total] 55 / 16 / 0 / 71:   7%|▋         | 71/1000 [05:40<1:14:18,  4.80s/it][Succeeded / Failed / Skipped / Total] 55 / 16 / 0 / 71:   7%|▋         | 72/1000 [05:42<1:13:29,  4.75s/it][Succeeded / Failed / Skipped / Total] 56 / 16 / 0 / 72:   7%|▋         | 72/1000 [05:42<1:13:29,  4.75s/it][Succeeded / Failed / Skipped / Total] 56 / 16 / 0 / 72:   7%|▋         | 73/1000 [05:47<1:13:29,  4.76s/it]Remove a subscriber from the list --> Taken from Publishable --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[remove]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[tau]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 66 ---------------------------------------------
Create sample data . --> Performs authentication token --> Socre: 1.0

[[[[Adv]]]]: private void [[createSampleData]] ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void [[hy]] ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 67 ---------------------------------------------
Accept a subscriber . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > [[subscriber]] ) { Object [ ] a = head ; final int [[c]] = capacity ; while ( a != null ) { for ( int i = 0 ; i < [[c]] ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[subscriber]] ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ [[c]] ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > [[inmediately]] ) { Object [ ] a = head ; final int [[bugged]] = capacity ; while ( a != null ) { for ( int i = 0 ; i < [[bugged]] ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[inmediately]] ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ [[bugged]] ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 68 ---------------------------------------------
Creates the error response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[pringles]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 69 ---------------------------------------------
Returns the value of the given method . --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[closure]] ( String [[bernstein]] ) { try { return HttpMethod . valueOf ( [[bernstein]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 70 ---------------------------------------------
Sets the delay in milliseconds . --> Adjust borden by given amount --> Socre: 1.0

[[[[Adv]]]]: public void [[setDelay]] ( long amount , TimeUnit [[unit]] ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[unit]] . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[borden]] ( long amount , TimeUnit [[jalal]] ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[jalal]] . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 71 ---------------------------------------------
Calculates the delay in milliseconds . --> Elapsed time --> Socre: 1.0

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit [[unit]] ) { float [[delta]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[embrace]] ( TimeUnit [[frederic]] ) { float [[chowdhury]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 72 ---------------------------------------------
Performs version checks . --> Performs binary batching . --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[biatch]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 73 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 57 / 16 / 0 / 73:   7%|▋         | 73/1000 [05:47<1:13:29,  4.76s/it][Succeeded / Failed / Skipped / Total] 57 / 16 / 0 / 73:   7%|▋         | 74/1000 [05:49<1:12:55,  4.72s/it][Succeeded / Failed / Skipped / Total] 58 / 16 / 0 / 74:   7%|▋         | 74/1000 [05:49<1:12:55,  4.72s/it][Succeeded / Failed / Skipped / Total] 58 / 16 / 0 / 74:   8%|▊         | 75/1000 [05:55<1:13:10,  4.75s/it][Succeeded / Failed / Skipped / Total] 58 / 17 / 0 / 75:   8%|▊         | 75/1000 [05:56<1:13:10,  4.75s/it][Succeeded / Failed / Skipped / Total] 58 / 17 / 0 / 75:   8%|▊         | 76/1000 [05:57<1:12:30,  4.71s/it][Succeeded / Failed / Skipped / Total] 58 / 18 / 0 / 76:   8%|▊         | 76/1000 [05:57<1:12:30,  4.71s/it][Succeeded / Failed / Skipped / Total] 58 / 18 / 0 / 76:   8%|▊         | 77/1000 [05:58<1:11:38,  4.66s/it][Succeeded / Failed / Skipped / Total] 59 / 18 / 0 / 77:   8%|▊         | 77/1000 [05:58<1:11:38,  4.66s/it][Succeeded / Failed / Skipped / Total] 59 / 18 / 0 / 77:   8%|▊         | 78/1000 [05:59<1:10:49,  4.61s/it]Determines whether the system should be disabled . --> Determines whether or not bonds should be disabled --> Socre: 1.0

[[[[Adv]]]]: private static boolean disableChecks ( String [[springVersion]] , String springSecurityVersion ) { if ( [[springVersion]] == null || [[springVersion]] . equals ( springSecurityVersion ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean disableChecks ( String [[bonds]] , String springSecurityVersion ) { if ( [[bonds]] == null || [[bonds]] . equals ( springSecurityVersion ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 74 ---------------------------------------------
Registers an attribute exchange configurationurer . --> Registers AttributeExchangeurer --> Socre: 1.0

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[identifierPattern]] ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( [[identifierPattern]] ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[orm]] ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( [[orm]] ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 75 ---------------------------------------------
Searches for a user for the given username . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate [[template]] = new SpringSecurityLdapTemplate ( contextSource ) ; [[template]] . setSearchControls ( searchControls ) ; try { return [[template]] . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate [[spyro]] = new SpringSecurityLdapTemplate ( contextSource ) ; [[spyro]] . setSearchControls ( searchControls ) ; try { return [[spyro]] . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 76 ---------------------------------------------
Tries to perform a scalar operation on the given observable source . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T [[t]] ; try { [[t]] = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( [[t]] == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( [[t]] ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[jasmin]] ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T [[aliases]] ; try { [[aliases]] = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( [[aliases]] == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( [[aliases]] ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 77 ---------------------------------------------
Returns the spring - security version . --> get greenhouses --> Socre: 1.0

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties [[properties]] = new Properties ( ) ; try { [[properties]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[properties]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[greenhouses]] ( ) { Properties [[medicine]] = new Properties ( ) ; try { [[medicine]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[medicine]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 78 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 59 / 19 / 0 / 78:   8%|▊         | 78/1000 [05:59<1:10:49,  4.61s/it][Succeeded / Failed / Skipped / Total] 59 / 19 / 0 / 78:   8%|▊         | 79/1000 [06:05<1:11:03,  4.63s/it][Succeeded / Failed / Skipped / Total] 59 / 20 / 0 / 79:   8%|▊         | 79/1000 [06:05<1:11:03,  4.63s/it][Succeeded / Failed / Skipped / Total] 59 / 20 / 0 / 79:   8%|▊         | 80/1000 [06:08<1:10:38,  4.61s/it][Succeeded / Failed / Skipped / Total] 59 / 21 / 0 / 80:   8%|▊         | 80/1000 [06:08<1:10:38,  4.61s/it][Succeeded / Failed / Skipped / Total] 59 / 21 / 0 / 80:   8%|▊         | 81/1000 [06:08<1:09:43,  4.55s/it][Succeeded / Failed / Skipped / Total] 59 / 22 / 0 / 81:   8%|▊         | 81/1000 [06:08<1:09:43,  4.55s/it][Succeeded / Failed / Skipped / Total] 59 / 22 / 0 / 81:   8%|▊         | 82/1000 [06:10<1:09:04,  4.51s/it][Succeeded / Failed / Skipped / Total] 60 / 22 / 0 / 82:   8%|▊         | 82/1000 [06:10<1:09:04,  4.51s/it][Succeeded / Failed / Skipped / Total] 60 / 22 / 0 / 82:   8%|▊         | 83/1000 [06:14<1:08:57,  4.51s/it][Succeeded / Failed / Skipped / Total] 61 / 22 / 0 / 83:   8%|▊         | 83/1000 [06:14<1:08:57,  4.51s/it][Succeeded / Failed / Skipped / Total] 61 / 22 / 0 / 83:   8%|▊         | 84/1000 [06:17<1:08:38,  4.50s/it][Succeeded / Failed / Skipped / Total] 62 / 22 / 0 / 84:   8%|▊         | 84/1000 [06:17<1:08:38,  4.50s/it][Succeeded / Failed / Skipped / Total] 62 / 22 / 0 / 84:   8%|▊         | 85/1000 [06:19<1:08:02,  4.46s/it]Encodes the given raw password . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( CharSequence rawPassword ) { String salt = PREFIX + this . [[saltGenerator]] . generateKey ( ) + SUFFIX ; return digest ( salt , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String [[luz]] ( CharSequence rawPassword ) { String salt = PREFIX + this . [[airspace]] . generateKey ( ) + SUFFIX ; return digest ( salt , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 79 ---------------------------------------------
Configure the OAuth2 resource server . --> [[[FAILED]]]

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[oauth2ResourceServer]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[kintaro]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[exalt]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[exalt]] ) ; return [[exalt]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 80 ---------------------------------------------
Configure an OAuth2 client . --> [[[FAILED]]]

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[oauth2Client]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[daylight]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[aldous]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[aldous]] ) ; return [[aldous]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 81 ---------------------------------------------
Determines whether the given encoded password matches the given password . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[matches]] ( CharSequence [[rawPassword]] , String [[encodedPassword]] ) { String [[salt]] = extractSalt ( [[encodedPassword]] ) ; String rawPasswordEncoded = digest ( [[salt]] , [[rawPassword]] ) ; return PasswordEncoderUtils . equals ( [[encodedPassword]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean [[drey]] ( CharSequence [[ladyland]] , String [[jacques]] ) { String [[anon]] = extractSalt ( [[jacques]] ) ; String rawPasswordEncoded = digest ( [[anon]] , [[ladyland]] ) ; return PasswordEncoderUtils . equals ( [[jacques]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 82 ---------------------------------------------
Returns the channel request matcher registry . --> ztodo override --> Socre: 1.0

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext [[context]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[context]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[zuzu]] ( ) throws Exception { ApplicationContext [[protection]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[protection]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 83 ---------------------------------------------
Searches for multiple attribute values . --> ulining rules --> Socre: 1.0

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String base , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[disciplining]] ( final String base , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 84 ---------------------------------------------
Builds a SearchControls object based on the given parameters . --> Build a SearchControls based on a SimpleControls --> Socre: 1.0

[[[[Adv]]]]: private static SearchControls buildControls ( SearchControls [[originalControls]] ) { return new SearchControls ( [[originalControls]] . getSearchScope ( ) , [[originalControls]] . getCountLimit ( ) , [[originalControls]] . getTimeLimit ( ) , [[originalControls]] . getReturningAttributes ( ) , RETURN_OBJECT , [[originalControls]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls buildControls ( SearchControls [[simplistic]] ) { return new SearchControls ( [[simplistic]] . getSearchScope ( ) , [[simplistic]] . getCountLimit ( ) , [[simplistic]] . getTimeLimit ( ) , [[simplistic]] . getReturningAttributes ( ) , RETURN_OBJECT , [[simplistic]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 85 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 63 / 22 / 0 / 85:   8%|▊         | 85/1000 [06:19<1:08:02,  4.46s/it][Succeeded / Failed / Skipped / Total] 63 / 22 / 0 / 85:   9%|▊         | 86/1000 [06:22<1:07:43,  4.45s/it][Succeeded / Failed / Skipped / Total] 64 / 22 / 0 / 86:   9%|▊         | 86/1000 [06:22<1:07:43,  4.45s/it][Succeeded / Failed / Skipped / Total] 64 / 22 / 0 / 86:   9%|▊         | 87/1000 [06:26<1:07:31,  4.44s/it][Succeeded / Failed / Skipped / Total] 65 / 22 / 0 / 87:   9%|▊         | 87/1000 [06:26<1:07:31,  4.44s/it][Succeeded / Failed / Skipped / Total] 65 / 22 / 0 / 87:   9%|▉         | 88/1000 [06:27<1:06:55,  4.40s/it]Parses the annotations of a method . --> ztodo --> Socre: 1.0

[[[[Adv]]]]: static < [[ResponseT]] , ReturnT > HttpServiceMethod < [[ResponseT]] , ReturnT > [[parseAnnotations]] ( Retrofit retrofit , Method [[method]] , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = [[method]] . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = [[method]] . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < [[sargento]] , ReturnT > HttpServiceMethod < [[sargento]] , ReturnT > [[zuzana]] ( Retrofit retrofit , Method [[arrived]] , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = [[arrived]] . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = [[arrived]] . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 86 ---------------------------------------------
Retrieve an entry for the specified DN . --> Retrieve a single entry --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations retrieveEntry ( final String [[dn]] , final String [ ] [[attributesToRetrieve]] ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes [[attrs]] = ctx . getAttributes ( [[dn]] , [[attributesToRetrieve]] ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations retrieveEntry ( final String [[monceau]] , final String [ ] [[resumé]] ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes [[devry]] = ctx . getAttributes ( [[monceau]] , [[resumé]] ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 87 ---------------------------------------------
Create the root bean definition . --> Create the root bean definition --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String [[port]] = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( [[port]] ) ) { [[port]] = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + [[port]] ) ; } } String url = "ldap://127.0.0.1:" + [[port]] + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , [[port]] ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String [[felix]] = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( [[felix]] ) ) { [[felix]] = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + [[felix]] ) ; } } String url = "ldap://127.0.0.1:" + [[felix]] + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , [[felix]] ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 88 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 66 / 22 / 0 / 88:   9%|▉         | 88/1000 [06:27<1:06:55,  4.40s/it][Succeeded / Failed / Skipped / Total] 67 / 22 / 0 / 89:   9%|▉         | 89/1000 [06:27<1:06:06,  4.35s/it][Succeeded / Failed / Skipped / Total] 67 / 22 / 0 / 89:   9%|▉         | 90/1000 [06:28<1:05:30,  4.32s/it][Succeeded / Failed / Skipped / Total] 68 / 22 / 0 / 90:   9%|▉         | 90/1000 [06:28<1:05:30,  4.32s/it][Succeeded / Failed / Skipped / Total] 69 / 22 / 0 / 91:   9%|▉         | 91/1000 [06:33<1:05:30,  4.32s/it][Succeeded / Failed / Skipped / Total] 69 / 22 / 0 / 91:   9%|▉         | 92/1000 [06:35<1:05:06,  4.30s/it][Succeeded / Failed / Skipped / Total] 70 / 22 / 0 / 92:   9%|▉         | 92/1000 [06:35<1:05:06,  4.30s/it]Builds a WebAuthenticationDetails object for the given user . --> documentation inherited from WebAuthenticationDetails --> Socre: 1.0

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest context ) { Collection < String > j2eeUserRoles = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , userGas ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[footnote]] ( HttpServletRequest context ) { Collection < String > j2eeUserRoles = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , userGas ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 89 ---------------------------------------------
Compares an LDAP attribute with the specified value . --> Return true if pom matches pom --> Socre: 1.0

[[[[Adv]]]]: public boolean [[compare]] ( final String [[dn]] , final String [[attributeName]] , final Object value ) { final String comparisonFilter = "(" + [[attributeName]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( [[dn]] , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean [[pomade]] ( final String [[portholes]] , final String [[toasts]] , final Object value ) { final String comparisonFilter = "(" + [[toasts]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( [[portholes]] , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 90 ---------------------------------------------
Create servlet filter . --> Register authentication manager . --> Socre: 1.0

[[[[Adv]]]]: private void [[createServletApiFilter]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void [[accomplishment]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 91 ---------------------------------------------
Create JAAS filter filter --> Performs sanity check . --> Socre: 1.0

[[[[Adv]]]]: private void [[createJaasApiFilter]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void [[correctness]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 92 ---------------------------------------------
Registers the spring security filter chain . --> Register a web application filter . --> Socre: 1.0

[[[[Adv]]]]: private void [[insertSpringSecurityFilterChain]] ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void [[ake]] ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 93 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 71 / 22 / 0 / 93:   9%|▉         | 93/1000 [06:43<1:05:33,  4.34s/it][Succeeded / Failed / Skipped / Total] 71 / 22 / 0 / 93:   9%|▉         | 94/1000 [06:45<1:05:11,  4.32s/it][Succeeded / Failed / Skipped / Total] 71 / 23 / 0 / 94:   9%|▉         | 94/1000 [06:45<1:05:11,  4.32s/it][Succeeded / Failed / Skipped / Total] 71 / 24 / 0 / 95:  10%|▉         | 95/1000 [06:47<1:04:42,  4.29s/it][Succeeded / Failed / Skipped / Total] 71 / 24 / 0 / 95:  10%|▉         | 96/1000 [06:54<1:05:04,  4.32s/it][Succeeded / Failed / Skipped / Total] 72 / 24 / 0 / 96:  10%|▉         | 96/1000 [06:54<1:05:04,  4.32s/it][Succeeded / Failed / Skipped / Total] 72 / 25 / 0 / 97:  10%|▉         | 97/1000 [07:01<1:05:26,  4.35s/it][Succeeded / Failed / Skipped / Total] 72 / 25 / 0 / 97:  10%|▉         | 98/1000 [07:13<1:06:30,  4.42s/it][Succeeded / Failed / Skipped / Total] 73 / 25 / 0 / 98:  10%|▉         | 98/1000 [07:13<1:06:30,  4.42s/it][Succeeded / Failed / Skipped / Total] 73 / 25 / 0 / 98:  10%|▉         | 99/1000 [07:18<1:06:35,  4.43s/it]Whitelist default types . --> Cache the type resolver --> Socre: 1.0

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[createWhitelistedDefaultTyping]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[result]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[result]] = [[result]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[result]] = [[result]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[result]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[cache]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[broomstick]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[broomstick]] = [[broomstick]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[broomstick]] = [[broomstick]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[broomstick]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 94 ---------------------------------------------
Called after servlet is set . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[ihop]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 95 ---------------------------------------------
Returns a new Cipher instance . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[alde]] ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 96 ---------------------------------------------
Retrieves the token for the given series ID . --> Sanity tokenizes by seriesId --> Socre: 1.0

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet [[rs]] , int [[rowNum]] ) throws SQLException { return new PersistentRememberMeToken ( [[rs]] . getString ( 1 ) , [[rs]] . getString ( 2 ) , [[rs]] . getString ( 3 ) , [[rs]] . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[sanitary]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet [[bat]] , int [[wetlands]] ) throws SQLException { return new PersistentRememberMeToken ( [[bat]] . getString ( 1 ) , [[bat]] . getString ( 2 ) , [[bat]] . getString ( 3 ) , [[bat]] . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 97 ---------------------------------------------
Gets the granted authorities for a list of attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > attributes ) { List < GrantedAuthority > result = new ArrayList <> ( attributes . size ( ) ) ; for ( String [[attribute]] : attributes ) { result . add ( getGrantedAuthority ( [[attribute]] ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[mortgaged]] ( Collection < String > attributes ) { List < GrantedAuthority > result = new ArrayList <> ( attributes . size ( ) ) ; for ( String [[mentions]] : attributes ) { result . add ( getGrantedAuthority ( [[mentions]] ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 98 ---------------------------------------------
Check the content length of the response . --> Check content length --> Socre: 1.0

[[[[Adv]]]]: private void checkContentLength ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean isBodyFullyWritten = this . [[contentLength]] > 0 && this . contentWritten >= this . [[contentLength]] ; int [[bufferSize]] = getBufferSize ( ) ; boolean requiresFlush = [[bufferSize]] > 0 && this . contentWritten >= [[bufferSize]] ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void checkContentLength ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean isBodyFullyWritten = this . [[eleven]] > 0 && this . contentWritten >= this . [[eleven]] ; int [[appetizers]] = getBufferSize ( ) ; boolean requiresFlush = [[appetizers]] > 0 && this . contentWritten >= [[appetizers]] ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 99 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 73 / 26 / 0 / 99:  10%|▉         | 99/1000 [07:18<1:06:35,  4.43s/it][Succeeded / Failed / Skipped / Total] 73 / 26 / 0 / 99:  10%|█         | 100/1000 [07:25<1:06:46,  4.45s/it][Succeeded / Failed / Skipped / Total] 74 / 26 / 0 / 100:  10%|█         | 100/1000 [07:25<1:06:46,  4.45s/it][Succeeded / Failed / Skipped / Total] 74 / 26 / 0 / 100:  10%|█         | 101/1000 [07:26<1:06:15,  4.42s/it][Succeeded / Failed / Skipped / Total] 75 / 26 / 0 / 101:  10%|█         | 101/1000 [07:26<1:06:15,  4.42s/it][Succeeded / Failed / Skipped / Total] 75 / 26 / 0 / 101:  10%|█         | 102/1000 [07:28<1:05:50,  4.40s/it][Succeeded / Failed / Skipped / Total] 76 / 26 / 0 / 102:  10%|█         | 102/1000 [07:28<1:05:50,  4.40s/it][Succeeded / Failed / Skipped / Total] 76 / 26 / 0 / 102:  10%|█         | 103/1000 [07:32<1:05:40,  4.39s/it][Succeeded / Failed / Skipped / Total] 77 / 26 / 0 / 103:  10%|█         | 103/1000 [07:32<1:05:40,  4.39s/it][Succeeded / Failed / Skipped / Total] 77 / 26 / 0 / 103:  10%|█         | 104/1000 [07:33<1:05:03,  4.36s/it][Succeeded / Failed / Skipped / Total] 78 / 26 / 0 / 104:  10%|█         | 104/1000 [07:33<1:05:03,  4.36s/it][Succeeded / Failed / Skipped / Total] 78 / 26 / 0 / 104:  10%|█         | 105/1000 [07:34<1:04:33,  4.33s/it]Handles the request . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[doFilter]] ( ServletRequest request , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) response ) ; } chain . doFilter ( request , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void [[attach]] ( ServletRequest request , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) response ) ; } chain . doFilter ( request , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 100 ---------------------------------------------
Update authentication defaults . --> Generate gian logout page --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[giancarlo]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 101 ---------------------------------------------
Find primary keys . --> copied from Database --> Socre: 1.0

[[[[Adv]]]]: private void [[lookupPrimaryKeys]] ( final Map < Serializable , Acl > [[acls]] , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( [[acls]] , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( [[acls]] , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void [[chappy]] ( final Map < Serializable , Acl > [[spleen]] , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( [[spleen]] , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( [[spleen]] , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 102 ---------------------------------------------
Sets the URL of the login process . --> Set login filter --> Socre: 1.0

[[[[Adv]]]]: public T loginProcessingUrl ( String [[loginProcessingUrl]] ) { this . [[loginProcessingUrl]] = loginProcessingUrl ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( loginProcessingUrl ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T loginProcessingUrl ( String [[constantinople]] ) { this . [[eskimos]] = loginProcessingUrl ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( loginProcessingUrl ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 103 ---------------------------------------------
Searches for a single attribute and returns all values found . --> recoaching --> Socre: 1.0

[[[[Adv]]]]: public Set < String > [[searchForSingleAttributeValues]] ( final String [[base]] , final String filter , final Object [ ] params , final String attributeName ) { String [ ] [[attributeNames]] = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( [[base]] , filter , params , [[attributeNames]] ) ; Set < String > [[result]] = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { [[result]] . addAll ( values ) ; } } return [[result]] ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > [[reproaching]] ( final String [[deutsche]] , final String filter , final Object [ ] params , final String attributeName ) { String [ ] [[ramones]] = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( [[deutsche]] , filter , params , [[ramones]] ) ; Set < String > [[cher]] = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { [[cher]] . addAll ( values ) ; } } return [[cher]] ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 104 ---------------------------------------------
Update access defaults . --> Handles an AShen --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[ashen]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 105 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 78 / 27 / 0 / 105:  10%|█         | 105/1000 [07:34<1:04:33,  4.33s/it][Succeeded / Failed / Skipped / Total] 78 / 27 / 0 / 105:  11%|█         | 106/1000 [07:36<1:04:10,  4.31s/it][Succeeded / Failed / Skipped / Total] 78 / 28 / 0 / 106:  11%|█         | 106/1000 [07:36<1:04:10,  4.31s/it][Succeeded / Failed / Skipped / Total] 78 / 28 / 0 / 106:  11%|█         | 107/1000 [07:40<1:04:00,  4.30s/it][Succeeded / Failed / Skipped / Total] 79 / 28 / 0 / 107:  11%|█         | 107/1000 [07:40<1:04:00,  4.30s/it][Succeeded / Failed / Skipped / Total] 79 / 28 / 0 / 107:  11%|█         | 108/1000 [07:40<1:03:27,  4.27s/it][Succeeded / Failed / Skipped / Total] 80 / 28 / 0 / 108:  11%|█         | 108/1000 [07:40<1:03:27,  4.27s/it][Succeeded / Failed / Skipped / Total] 80 / 28 / 0 / 108:  11%|█         | 109/1000 [07:46<1:03:33,  4.28s/it]Perform authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 106 ---------------------------------------------
Maps the authorities to their authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[mapped]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority [[authority]] : authorities ) { [[mapped]] . add ( mapAuthority ( [[authority]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[mapped]] . add ( defaultAuthority ) ; } return [[mapped]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[humility]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority [[mashing]] : authorities ) { [[humility]] . add ( mapAuthority ( [[mashing]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[humility]] . add ( defaultAuthority ) ; } return [[humility]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 107 ---------------------------------------------
Encode cookie . --> convert cookie tokens to string --> Socre: 1.0

[[[[Adv]]]]: protected String [[encodeCookie]] ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String [[cornelia]] ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 108 ---------------------------------------------
Map password . --> Obtain lobstration --> Socre: 1.0

[[[[Adv]]]]: protected String [[mapPassword]] ( Object passwordValue ) { if ( ! ( passwordValue instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String [[lobotomy]] ( Object passwordValue ) { if ( ! ( passwordValue instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 109 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 81 / 28 / 0 / 109:  11%|█         | 109/1000 [07:46<1:03:33,  4.28s/it][Succeeded / Failed / Skipped / Total] 81 / 28 / 0 / 109:  11%|█         | 110/1000 [07:47<1:03:01,  4.25s/it][Succeeded / Failed / Skipped / Total] 82 / 28 / 0 / 110:  11%|█         | 110/1000 [07:47<1:03:01,  4.25s/it][Succeeded / Failed / Skipped / Total] 82 / 28 / 0 / 110:  11%|█         | 111/1000 [07:47<1:02:25,  4.21s/it][Succeeded / Failed / Skipped / Total] 82 / 29 / 0 / 111:  11%|█         | 111/1000 [07:47<1:02:25,  4.21s/it][Succeeded / Failed / Skipped / Total] 82 / 29 / 0 / 111:  11%|█         | 112/1000 [07:55<1:02:46,  4.24s/it][Succeeded / Failed / Skipped / Total] 83 / 29 / 0 / 112:  11%|█         | 112/1000 [07:55<1:02:46,  4.24s/it][Succeeded / Failed / Skipped / Total] 83 / 29 / 0 / 112:  11%|█▏        | 113/1000 [07:56<1:02:16,  4.21s/it]Search for single entry . --> Determines all operations for a given base context --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations [[searchForSingleEntryInternal]] ( DirContext ctx , SearchControls [[searchControls]] , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( [[searchControls]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations [[dedicated]] ( DirContext ctx , SearchControls [[exhaust]] , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( [[exhaust]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 110 ---------------------------------------------
Get query string from request . --> Helper method to barcodes --> Socre: 1.0

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[barrette]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 111 ---------------------------------------------
Check if the pre - authenticated principal has changed . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest [[request]] , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( [[request]] ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "[[False]]" != "[[False]]" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "[[False]]" != "[[False]]" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[snobbish]] ( HttpServletRequest [[observance]] , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( [[observance]] ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "[[Neglects]]" != "[[Neglects]]" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "[[Neglects]]" != "[[Neglects]]" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 112 ---------------------------------------------
Sets the cookie with the given tokens . --> method to add cookies --> Socre: 1.0

[[[[Adv]]]]: protected void [[setCookie]] ( String [ ] tokens , int maxAge , HttpServletRequest [[request]] , HttpServletResponse [[response]] ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( [[request]] ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( [[request]] . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; [[response]] . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void [[infects]] ( String [ ] tokens , int maxAge , HttpServletRequest [[inigo]] , HttpServletResponse [[ezekiel]] ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( [[inigo]] ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( [[inigo]] . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; [[ezekiel]] . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 113 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 84 / 29 / 0 / 113:  11%|█▏        | 113/1000 [07:56<1:02:16,  4.21s/it][Succeeded / Failed / Skipped / Total] 84 / 29 / 0 / 113:  11%|█▏        | 114/1000 [07:59<1:02:09,  4.21s/it][Succeeded / Failed / Skipped / Total] 84 / 30 / 0 / 114:  11%|█▏        | 114/1000 [07:59<1:02:09,  4.21s/it][Succeeded / Failed / Skipped / Total] 84 / 30 / 0 / 114:  12%|█▏        | 115/1000 [08:03<1:02:01,  4.21s/it][Succeeded / Failed / Skipped / Total] 84 / 31 / 0 / 115:  12%|█▏        | 115/1000 [08:03<1:02:01,  4.21s/it][Succeeded / Failed / Skipped / Total] 84 / 31 / 0 / 115:  12%|█▏        | 116/1000 [08:04<1:01:32,  4.18s/it][Succeeded / Failed / Skipped / Total] 84 / 32 / 0 / 116:  12%|█▏        | 116/1000 [08:04<1:01:32,  4.18s/it][Succeeded / Failed / Skipped / Total] 84 / 32 / 0 / 116:  12%|█▏        | 117/1000 [08:05<1:01:00,  4.15s/it][Succeeded / Failed / Skipped / Total] 85 / 32 / 0 / 117:  12%|█▏        | 117/1000 [08:05<1:01:00,  4.15s/it][Succeeded / Failed / Skipped / Total] 85 / 32 / 0 / 117:  12%|█▏        | 118/1000 [08:08<1:00:50,  4.14s/it][Succeeded / Failed / Skipped / Total] 86 / 32 / 0 / 118:  12%|█▏        | 118/1000 [08:08<1:00:50,  4.14s/it][Succeeded / Failed / Skipped / Total] 86 / 32 / 0 / 118:  12%|█▏        | 119/1000 [08:09<1:00:25,  4.12s/it][Succeeded / Failed / Skipped / Total] 86 / 33 / 0 / 119:  12%|█▏        | 119/1000 [08:09<1:00:25,  4.12s/it][Succeeded / Failed / Skipped / Total] 86 / 33 / 0 / 119:  12%|█▏        | 120/1000 [08:12<1:00:14,  4.11s/it]Clears out the session . --> Remove skinner --> Socre: 1.0

[[[[Adv]]]]: public void [[logout]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void [[skinner]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 114 ---------------------------------------------
Extracts remember me cookie from request --> [[[FAILED]]]

[[[[Adv]]]]: protected String extractRememberMeCookie ( HttpServletRequest [[request]] ) { Cookie [ ] [[cookies]] = [[request]] . getCookies ( ) ; if ( ( [[cookies]] == null ) || ( [[cookies]] . length == 0 ) ) { return null ; } for ( Cookie cookie : [[cookies]] ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String extractRememberMeCookie ( HttpServletRequest [[squeaky]] ) { Cookie [ ] [[amelie]] = [[squeaky]] . getCookies ( ) ; if ( ( [[amelie]] == null ) || ( [[amelie]] . length == 0 ) ) { return null ; } for ( Cookie cookie : [[amelie]] ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 115 ---------------------------------------------
Returns the full URL of this request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[prancer]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 116 ---------------------------------------------
Gets the service port . --> [[[FAILED]]]

[[[[Adv]]]]: private static int [[getServicePort]] ( URL casServiceUrl ) { int [[port]] = casServiceUrl . getPort ( ) ; if ( [[port]] == - 1 ) { [[port]] = casServiceUrl . getDefaultPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int [[induces]] ( URL casServiceUrl ) { int [[spyro]] = casServiceUrl . getPort ( ) ; if ( [[spyro]] == - 1 ) { [[spyro]] = casServiceUrl . getDefaultPort ( ) ; } return [[spyro]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 117 ---------------------------------------------
Authenticates the given authentication token . --> Authenticates a billabongation token . --> Socre: 1.0

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[auth]] ) throws AuthenticationException { if ( ! ( [[auth]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken [[request]] = ( UsernamePasswordAuthenticationToken ) [[auth]] ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[billabong]] ) throws AuthenticationException { if ( ! ( [[billabong]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken [[belladonna]] = ( UsernamePasswordAuthenticationToken ) [[billabong]] ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 118 ---------------------------------------------
Sets the context environment properties . --> Set watermark in the container --> Socre: 1.0

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . [[contextEnvironmentProperties]] = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[watermark]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . [[controllers]] = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 119 ---------------------------------------------
Render the end tag . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[affiliations]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 120 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 86 / 34 / 0 / 120:  12%|█▏        | 120/1000 [08:12<1:00:14,  4.11s/it][Succeeded / Failed / Skipped / Total] 86 / 34 / 0 / 120:  12%|█▏        | 121/1000 [08:19<1:00:31,  4.13s/it][Succeeded / Failed / Skipped / Total] 86 / 35 / 0 / 121:  12%|█▏        | 121/1000 [08:19<1:00:31,  4.13s/it][Succeeded / Failed / Skipped / Total] 86 / 35 / 0 / 121:  12%|█▏        | 122/1000 [08:20<1:00:00,  4.10s/it][Succeeded / Failed / Skipped / Total] 87 / 35 / 0 / 122:  12%|█▏        | 122/1000 [08:20<1:00:00,  4.10s/it][Succeeded / Failed / Skipped / Total] 87 / 35 / 0 / 122:  12%|█▏        | 123/1000 [08:25<1:00:02,  4.11s/it][Succeeded / Failed / Skipped / Total] 88 / 35 / 0 / 123:  12%|█▏        | 123/1000 [08:25<1:00:02,  4.11s/it][Succeeded / Failed / Skipped / Total] 88 / 35 / 0 / 123:  12%|█▏        | 124/1000 [08:25<59:30,  4.08s/it]  [Succeeded / Failed / Skipped / Total] 88 / 36 / 0 / 124:  12%|█▏        | 124/1000 [08:25<59:30,  4.08s/it][Succeeded / Failed / Skipped / Total] 88 / 36 / 0 / 124:  12%|█▎        | 125/1000 [08:34<1:00:03,  4.12s/it]Gets the principal . --> [[[FAILED]]]

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[authentication]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = [[authentication]] . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( [[authentication]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication [[paperweight]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[paperweight]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = [[paperweight]] . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( [[paperweight]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 121 ---------------------------------------------
Returns the UserDetailsService . --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > [[beans]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[beans]] . size ( ) == 0 ) { [[beans]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[beans]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[beans]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[beans]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > [[pasang]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[pasang]] . size ( ) == 0 ) { [[pasang]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[pasang]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[pasang]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[pasang]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 122 ---------------------------------------------
Add pkce parameters . --> helper method to helm authentication --> Socre: 1.0

[[[[Adv]]]]: private void [[addPkceParameters]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void [[helmuth]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 123 ---------------------------------------------
Determines if the request requires authentication . --> Does authentication required? --> Socre: 1.0

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean [[serviceTicketRequest]] = [[serviceTicketRequest]] ( request , response ) ; final boolean [[result]] = [[serviceTicketRequest]] || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( [[serviceTicketRequest]] , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean [[advised]] = [[advised]] ( request , response ) ; final boolean [[gradient]] = [[advised]] || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( [[advised]] , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + [[gradient]] ) ; } return [[gradient]] ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 124 ---------------------------------------------
Initialize the user details service . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails [[userDetails]] : this . users ) { getUserDetailsService ( ) . createUser ( [[userDetails]] ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails [[cackling]] : this . users ) { getUserDetailsService ( ) . createUser ( [[cackling]] ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 125 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 89 / 36 / 0 / 125:  12%|█▎        | 125/1000 [08:34<1:00:03,  4.12s/it][Succeeded / Failed / Skipped / Total] 89 / 36 / 0 / 125:  13%|█▎        | 126/1000 [08:35<59:38,  4.09s/it]  [Succeeded / Failed / Skipped / Total] 89 / 37 / 0 / 126:  13%|█▎        | 126/1000 [08:35<59:38,  4.09s/it][Succeeded / Failed / Skipped / Total] 89 / 37 / 0 / 126:  13%|█▎        | 127/1000 [08:36<59:07,  4.06s/it][Succeeded / Failed / Skipped / Total] 89 / 38 / 0 / 127:  13%|█▎        | 127/1000 [08:36<59:07,  4.06s/it][Succeeded / Failed / Skipped / Total] 89 / 38 / 0 / 127:  13%|█▎        | 128/1000 [08:36<58:36,  4.03s/it][Succeeded / Failed / Skipped / Total] 90 / 38 / 0 / 128:  13%|█▎        | 128/1000 [08:36<58:36,  4.03s/it][Succeeded / Failed / Skipped / Total] 90 / 38 / 0 / 128:  13%|█▎        | 129/1000 [08:36<58:08,  4.00s/it][Succeeded / Failed / Skipped / Total] 91 / 38 / 0 / 129:  13%|█▎        | 129/1000 [08:36<58:08,  4.00s/it][Succeeded / Failed / Skipped / Total] 91 / 38 / 0 / 129:  13%|█▎        | 130/1000 [08:42<58:18,  4.02s/it][Succeeded / Failed / Skipped / Total] 92 / 38 / 0 / 130:  13%|█▎        | 130/1000 [08:42<58:18,  4.02s/it][Succeeded / Failed / Skipped / Total] 92 / 38 / 0 / 130:  13%|█▎        | 131/1000 [08:45<58:08,  4.01s/it]Handles request ticket request . --> Do ahman require authentication --> Socre: 1.0

[[[[Adv]]]]: private boolean [[serviceTicketRequest]] ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( [[request]] , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean [[ahman]] ( final HttpServletRequest [[digital]] , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( [[digital]] , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 126 ---------------------------------------------
Determines whether the application is authenticated . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[authentication]] != null && [[authentication]] . isAuthenticated ( ) && ! ( [[authentication]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[juggle]] ( ) { Authentication [[suffer]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[suffer]] != null && [[suffer]] . isAuthenticated ( ) && ! ( [[suffer]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 127 ---------------------------------------------
Resolves the given parameter . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Mono < Object > [[resolveArgument]] ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > [[ensenada]] ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 128 ---------------------------------------------
Gets the JWK set . --> Retrieves a Mono of JWKs --> Socre: 1.0

[[[[Adv]]]]: private Mono < JWKSet > getJWKSet ( ) { return this . [[webClient]] . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > getJWKSet ( ) { return this . [[barad]] . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 129 ---------------------------------------------
Proxy ticket request . --> authenticated resource --> Socre: 1.0

[[[[Adv]]]]: private boolean [[proxyTicketRequest]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "False" != "False" ; } final boolean [[result]] = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean [[tropico]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "False" != "False" ; } final boolean [[ballsy]] = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + [[ballsy]] ) ; } return [[ballsy]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 130 ---------------------------------------------
Encodes a string using UTF - 8 encoding . --> Encodes the given value . --> Socre: 1.0

[[[[Adv]]]]: private String [[utf8UrlEncode]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String [[atwood]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 131 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 92 / 39 / 0 / 131:  13%|█▎        | 131/1000 [08:45<58:08,  4.01s/it][Succeeded / Failed / Skipped / Total] 92 / 39 / 0 / 131:  13%|█▎        | 132/1000 [08:48<57:56,  4.01s/it][Succeeded / Failed / Skipped / Total] 92 / 40 / 0 / 132:  13%|█▎        | 132/1000 [08:48<57:56,  4.01s/it][Succeeded / Failed / Skipped / Total] 92 / 40 / 0 / 132:  13%|█▎        | 133/1000 [08:54<58:01,  4.02s/it][Succeeded / Failed / Skipped / Total] 93 / 40 / 0 / 133:  13%|█▎        | 133/1000 [08:54<58:01,  4.02s/it][Succeeded / Failed / Skipped / Total] 93 / 40 / 0 / 133:  13%|█▎        | 134/1000 [08:55<57:41,  4.00s/it][Succeeded / Failed / Skipped / Total] 94 / 40 / 0 / 134:  13%|█▎        | 134/1000 [08:55<57:41,  4.00s/it][Succeeded / Failed / Skipped / Total] 94 / 40 / 0 / 134:  14%|█▎        | 135/1000 [08:57<57:23,  3.98s/it][Succeeded / Failed / Skipped / Total] 95 / 40 / 0 / 135:  14%|█▎        | 135/1000 [08:57<57:23,  3.98s/it][Succeeded / Failed / Skipped / Total] 95 / 40 / 0 / 135:  14%|█▎        | 136/1000 [09:01<57:18,  3.98s/it][Succeeded / Failed / Skipped / Total] 96 / 40 / 0 / 136:  14%|█▎        | 136/1000 [09:01<57:18,  3.98s/it][Succeeded / Failed / Skipped / Total] 96 / 40 / 0 / 136:  14%|█▎        | 137/1000 [09:01<56:50,  3.95s/it]Builds the provider URL for the given list of URLs . --> [[[FAILED]]]

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > [[urls]] , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( [[urls]] , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : [[urls]] ) { String [[trimmedUrl]] = serverUrl . trim ( ) ; if ( "" . equals ( [[trimmedUrl]] ) ) { continue ; } providerUrl . append ( [[trimmedUrl]] ) ; if ( ! [[trimmedUrl]] . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > [[cooper]] , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( [[cooper]] , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : [[cooper]] ) { String [[choronzon]] = serverUrl . trim ( ) ; if ( "" . equals ( [[choronzon]] ) ) { continue ; } providerUrl . append ( [[choronzon]] ) ; if ( ! [[choronzon]] . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 132 ---------------------------------------------
Determines whether the specified request should be proxied . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean proxyReceptorRequest ( final HttpServletRequest [[request]] ) { final boolean [[result]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[request]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean proxyReceptorRequest ( final HttpServletRequest [[guesswork]] ) { final boolean [[smoother]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[guesswork]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[smoother]] ) ; } return [[smoother]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 133 ---------------------------------------------
Create a new SecurityExpression root for this security context . --> Create a new instance of MethodSecurityExpression --> Socre: 1.0

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[createSecurityExpressionRoot]] ( Authentication [[authentication]] , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( [[authentication]] ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[ose]] ( Authentication [[cliffhanger]] , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( [[cliffhanger]] ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 134 ---------------------------------------------
Get the pre - authenticated principal . --> Overriding super method --> Socre: 1.0

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object [[principal]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[overhang]] ( HttpServletRequest httpRequest ) { Object [[ambience]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[ambience]] ) ; } return [[ambience]] ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 135 ---------------------------------------------
Returns a portion of a byte array . --> Utility method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] subArray ( byte [ ] array , int beginIndex , int endIndex ) { int [[length]] = endIndex - beginIndex ; byte [ ] [[subarray]] = new byte [ [[length]] ] ; System . arraycopy ( array , beginIndex , [[subarray]] , 0 , [[length]] ) ; return [[subarray]] ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] subArray ( byte [ ] array , int beginIndex , int endIndex ) { int [[antonella]] = endIndex - beginIndex ; byte [ ] [[ethos]] = new byte [ [[antonella]] ] ; System . arraycopy ( array , beginIndex , [[ethos]] , 0 , [[antonella]] ) ; return [[ethos]] ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 136 ---------------------------------------------
Preprocess a map of attributes to a map . --> Pre - process absent authorities . --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > [[orgMap]] ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( [[orgMap]] . size ( ) ) ; for ( Map . Entry < ? , ? > entry : [[orgMap]] . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > [[absentia]] ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( [[absentia]] . size ( ) ) ; for ( Map . Entry < ? , ? > entry : [[absentia]] . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 137 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 96 / 41 / 0 / 137:  14%|█▎        | 137/1000 [09:01<56:50,  3.95s/it][Succeeded / Failed / Skipped / Total] 96 / 41 / 0 / 137:  14%|█▍        | 138/1000 [09:08<57:04,  3.97s/it][Succeeded / Failed / Skipped / Total] 96 / 42 / 0 / 138:  14%|█▍        | 138/1000 [09:08<57:04,  3.97s/it][Succeeded / Failed / Skipped / Total] 96 / 42 / 0 / 138:  14%|█▍        | 139/1000 [09:12<57:01,  3.97s/it][Succeeded / Failed / Skipped / Total] 97 / 42 / 0 / 139:  14%|█▍        | 139/1000 [09:12<57:01,  3.97s/it][Succeeded / Failed / Skipped / Total] 97 / 42 / 0 / 139:  14%|█▍        | 140/1000 [09:13<56:39,  3.95s/it][Succeeded / Failed / Skipped / Total] 98 / 42 / 0 / 140:  14%|█▍        | 140/1000 [09:13<56:39,  3.95s/it][Succeeded / Failed / Skipped / Total] 98 / 42 / 0 / 140:  14%|█▍        | 141/1000 [09:15<56:24,  3.94s/it][Succeeded / Failed / Skipped / Total] 98 / 43 / 0 / 141:  14%|█▍        | 141/1000 [09:15<56:24,  3.94s/it][Succeeded / Failed / Skipped / Total] 98 / 43 / 0 / 141:  14%|█▍        | 142/1000 [09:18<56:13,  3.93s/it][Succeeded / Failed / Skipped / Total] 99 / 43 / 0 / 142:  14%|█▍        | 142/1000 [09:18<56:13,  3.93s/it][Succeeded / Failed / Skipped / Total] 99 / 43 / 0 / 142:  14%|█▍        | 143/1000 [09:19<55:51,  3.91s/it][Succeeded / Failed / Skipped / Total] 100 / 43 / 0 / 143:  14%|█▍        | 143/1000 [09:19<55:51,  3.91s/it][Succeeded / Failed / Skipped / Total] 100 / 43 / 0 / 143:  14%|█▍        | 144/1000 [09:26<56:10,  3.94s/it]Load user by assertion . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[loadUserByAssertion]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails [[cackling]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 138 ---------------------------------------------
Get the collection of groups based on the authenticated user --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > [[webSphereGroups]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[webSphereGroups]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[webSphereGroups]] + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[unzipping]] ( ) { List < String > [[accurately]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[accurately]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[accurately]] + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 139 ---------------------------------------------
Adds a collection of granted authority to the result . --> cola nulls --> Socre: 1.0

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > result , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[value]] instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( result , ( Collection < ? > ) [[value]] ) ; } else if ( [[value]] instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( result , ( Object [ ] ) [[value]] ) ; } else if ( [[value]] instanceof String ) { [[addGrantedAuthorityCollection]] ( result , ( String ) [[value]] ) ; } else if ( [[value]] instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) [[value]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[value]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[cola]] ( Collection < GrantedAuthority > result , Object [[flocks]] ) { if ( [[flocks]] == null ) { return ; } if ( [[flocks]] instanceof Collection < ? > ) { [[cola]] ( result , ( Collection < ? > ) [[flocks]] ) ; } else if ( [[flocks]] instanceof Object [ ] ) { [[cola]] ( result , ( Object [ ] ) [[flocks]] ) ; } else if ( [[flocks]] instanceof String ) { [[cola]] ( result , ( String ) [[flocks]] ) ; } else if ( [[flocks]] instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) [[flocks]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[flocks]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 140 ---------------------------------------------
Gets the granted authorities for a list of attributes . --> ztodo --> Socre: 1.0

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String [[attribute]] : attributes ) { Collection < GrantedAuthority > [[c]] = attributes2grantedAuthoritiesMap . get ( [[attribute]] ) ; if ( [[c]] != null ) { gaList . addAll ( [[c]] ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[zuzu]] ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String [[blindfolded]] : attributes ) { Collection < GrantedAuthority > [[raving]] = attributes2grantedAuthoritiesMap . get ( [[blindfolded]] ) ; if ( [[raving]] != null ) { gaList . addAll ( [[raving]] ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 141 ---------------------------------------------
Gets the shared object for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[commend]] > [[commend]] getSharedObject ( Class < [[commend]] > sharedType ) { return ( [[commend]] ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 142 ---------------------------------------------
Implement the interceptor method --> Implementation of interceptor --> Socre: 1.0

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken [[token]] = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( [[token]] ) ; } return super . afterInvocation ( [[token]] , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken [[antonella]] = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( [[antonella]] ) ; } return super . afterInvocation ( [[antonella]] , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 143 ---------------------------------------------
Gets the granted authority collection . --> Stacy legacy . --> Socre: 1.0

[[[[Adv]]]]: private Collection < GrantedAuthority > [[getGrantedAuthorityCollection]] ( Object [[value]] ) { Collection < GrantedAuthority > [[result]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[result]] , [[value]] ) ; return [[result]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > [[stacy]] ( Object [[according]] ) { Collection < GrantedAuthority > [[boules]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[boules]] , [[according]] ) ; return [[boules]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
[Succeeded / Failed / Skipped / Total] 100 / 44 / 0 / 144:  14%|█▍        | 144/1000 [09:26<56:10,  3.94s/it][Succeeded / Failed / Skipped / Total] 100 / 44 / 0 / 144:  14%|█▍        | 145/1000 [09:28<55:51,  3.92s/it][Succeeded / Failed / Skipped / Total] 100 / 45 / 0 / 145:  14%|█▍        | 145/1000 [09:28<55:51,  3.92s/it][Succeeded / Failed / Skipped / Total] 100 / 45 / 0 / 145:  15%|█▍        | 146/1000 [09:34<55:59,  3.93s/it][Succeeded / Failed / Skipped / Total] 100 / 46 / 0 / 146:  15%|█▍        | 146/1000 [09:34<55:59,  3.93s/it][Succeeded / Failed / Skipped / Total] 100 / 46 / 0 / 146:  15%|█▍        | 147/1000 [09:35<55:39,  3.92s/it][Succeeded / Failed / Skipped / Total] 100 / 47 / 0 / 147:  15%|█▍        | 147/1000 [09:35<55:39,  3.92s/it][Succeeded / Failed / Skipped / Total] 100 / 47 / 0 / 147:  15%|█▍        | 148/1000 [09:35<55:13,  3.89s/it][Succeeded / Failed / Skipped / Total] 101 / 47 / 0 / 148:  15%|█▍        | 148/1000 [09:35<55:13,  3.89s/it][Succeeded / Failed / Skipped / Total] 101 / 47 / 0 / 148:  15%|█▍        | 149/1000 [09:35<54:48,  3.86s/it][Succeeded / Failed / Skipped / Total] 102 / 47 / 0 / 149:  15%|█▍        | 149/1000 [09:35<54:48,  3.86s/it][Succeeded / Failed / Skipped / Total] 102 / 47 / 0 / 149:  15%|█▌        | 150/1000 [09:40<54:47,  3.87s/it][Succeeded / Failed / Skipped / Total] 103 / 47 / 0 / 150:  15%|█▌        | 150/1000 [09:40<54:47,  3.87s/it][Succeeded / Failed / Skipped / Total] 103 / 47 / 0 / 150:  15%|█▌        | 151/1000 [09:42<54:37,  3.86s/it]--------------------------------------------- Result 144 ---------------------------------------------
Gets the pre authenticated principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object [[principal]] = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object [[sleepwalker]] = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[sleepwalker]] ) ; } return [[sleepwalker]] ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 145 ---------------------------------------------
Returns the role s role . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[vipers]] ( String [[gullies]] ) { Assert . isTrue ( ! [[gullies]] . startsWith ( "ROLE_" ) , ( ) -> [[gullies]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[gullies]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 146 ---------------------------------------------
Converts a set of roles to a list of roles --> [[[FAILED]]]

[[[[Adv]]]]: private static String [ ] [[hasAnyRole]] ( String ... roles ) { for ( int i = 0 ; i < roles . length ; i ++ ) { roles [ i ] = "ROLE_" + roles [ i ] ; } return roles ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] [[ömer]] ( String ... roles ) { for ( int i = 0 ; i < roles . length ; i ++ ) { roles [ i ] = "ROLE_" + roles [ i ] ; } return roles ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 147 ---------------------------------------------
Build the redirect url for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest request ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[sich]] ( HttpServletRequest request ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 148 ---------------------------------------------
Attempts to exit the login user . --> overridden in superclass --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[sternberg]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 149 ---------------------------------------------
Concatenates multiple arrays . --> Creates a row of jokers --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[concatenate]] ( byte [ ] ... [[arrays]] ) { int [[length]] = 0 ; for ( byte [ ] array : [[arrays]] ) { [[length]] += array . length ; } byte [ ] newArray = new byte [ [[length]] ] ; int destPos = 0 ; for ( byte [ ] array : [[arrays]] ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] [[arow]] ( byte [ ] ... [[jokers]] ) { int [[chaucer]] = 0 ; for ( byte [ ] array : [[jokers]] ) { [[chaucer]] += array . length ; } byte [ ] newArray = new byte [ [[chaucer]] ] ; int destPos = 0 ; for ( byte [ ] array : [[jokers]] ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 150 ---------------------------------------------
Display public index --> Handle a request --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[carryin]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 151 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 104 / 47 / 0 / 151:  15%|█▌        | 151/1000 [09:42<54:37,  3.86s/it][Succeeded / Failed / Skipped / Total] 104 / 47 / 0 / 151:  15%|█▌        | 152/1000 [09:52<55:03,  3.90s/it][Succeeded / Failed / Skipped / Total] 105 / 47 / 0 / 152:  15%|█▌        | 152/1000 [09:52<55:03,  3.90s/it][Succeeded / Failed / Skipped / Total] 105 / 47 / 0 / 152:  15%|█▌        | 153/1000 [09:54<54:51,  3.89s/it][Succeeded / Failed / Skipped / Total] 106 / 47 / 0 / 153:  15%|█▌        | 153/1000 [09:54<54:51,  3.89s/it][Succeeded / Failed / Skipped / Total] 106 / 47 / 0 / 153:  15%|█▌        | 154/1000 [09:58<54:47,  3.89s/it][Succeeded / Failed / Skipped / Total] 107 / 47 / 0 / 154:  15%|█▌        | 154/1000 [09:58<54:47,  3.89s/it][Succeeded / Failed / Skipped / Total] 107 / 47 / 0 / 154:  16%|█▌        | 155/1000 [10:01<54:40,  3.88s/it][Succeeded / Failed / Skipped / Total] 107 / 48 / 0 / 155:  16%|█▌        | 155/1000 [10:01<54:40,  3.88s/it][Succeeded / Failed / Skipped / Total] 107 / 48 / 0 / 155:  16%|█▌        | 156/1000 [10:06<54:40,  3.89s/it][Succeeded / Failed / Skipped / Total] 108 / 48 / 0 / 156:  16%|█▌        | 156/1000 [10:06<54:40,  3.89s/it][Succeeded / Failed / Skipped / Total] 108 / 48 / 0 / 156:  16%|█▌        | 157/1000 [10:10<54:37,  3.89s/it]Build the spring security filter chain . --> Hibernate bean . --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[ahmed]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 152 ---------------------------------------------
Converts the given JWT to granted authorities . --> Hibernate authentication . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[convert]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[hooky]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 153 ---------------------------------------------
Sets the exit user url . --> Autocomplete --> Socre: 1.0

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String [[exitUserUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[exitUserUrl]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( [[exitUserUrl]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[anemone]] ( String [[righted]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[righted]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( [[righted]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 154 ---------------------------------------------
Decodes the given token . --> Decodes a given rogan . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Jwt decode ( String [[token]] ) throws JwtException { JWT [[jwt]] = parse ( [[token]] ) ; if ( [[jwt]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[token]] , [[jwt]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[jwt]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String [[rogan]] ) throws JwtException { JWT [[dingoes]] = parse ( [[rogan]] ) ; if ( [[dingoes]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[rogan]] , [[dingoes]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[dingoes]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 155 ---------------------------------------------
On login success . --> [[[FAILED]]]

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 156 ---------------------------------------------
Allow access using URL check . --> Calculates accuracy for this request --> Socre: 1.0

[[[[Adv]]]]: public boolean [[authorizeUsingUrlCheck]] ( ) throws IOException { String [[contextPath]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[currentUser]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[contextPath]] , getUrl ( ) , getMethod ( ) , [[currentUser]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean [[accuracy]] ( ) throws IOException { String [[escapee]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[aerosol]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[escapee]] , getUrl ( ) , getMethod ( ) , [[aerosol]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 157 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 109 / 48 / 0 / 157:  16%|█▌        | 157/1000 [10:10<54:37,  3.89s/it][Succeeded / Failed / Skipped / Total] 109 / 48 / 0 / 157:  16%|█▌        | 158/1000 [10:13<54:28,  3.88s/it][Succeeded / Failed / Skipped / Total] 110 / 48 / 0 / 158:  16%|█▌        | 158/1000 [10:13<54:28,  3.88s/it][Succeeded / Failed / Skipped / Total] 111 / 48 / 0 / 159:  16%|█▌        | 159/1000 [10:13<54:04,  3.86s/it][Succeeded / Failed / Skipped / Total] 111 / 48 / 0 / 159:  16%|█▌        | 160/1000 [10:16<53:58,  3.85s/it][Succeeded / Failed / Skipped / Total] 111 / 49 / 0 / 160:  16%|█▌        | 160/1000 [10:16<53:58,  3.85s/it][Succeeded / Failed / Skipped / Total] 111 / 50 / 0 / 161:  16%|█▌        | 161/1000 [10:17<53:39,  3.84s/it][Succeeded / Failed / Skipped / Total] 111 / 50 / 0 / 161:  16%|█▌        | 162/1000 [10:18<53:21,  3.82s/it]Display the add permission for a contact . --> detail of addPermission --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "addPermission" , addPermission ) ; [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[model]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[bounteous]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > [[chestnut]] = new HashMap <> ( ) ; [[chestnut]] . put ( "addPermission" , addPermission ) ; [[chestnut]] . put ( "recipients" , listRecipients ( ) ) ; [[chestnut]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[chestnut]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 158 ---------------------------------------------
Renders a request . --> Handles rendering request . --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[deletePermission]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[boing]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 159 ---------------------------------------------
Add a single permission --> Handle addPermission --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[addPermission]] ( AddPermission [[addPermission]] , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[addPermission]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[addPermission]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[addPermission]] . getPermission ( ) ) ; try { contactManager . [[addPermission]] ( [[addPermission]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[logistic]] ( AddPermission [[abominable]] , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[logistic]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[logistic]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[logistic]] . getPermission ( ) ) ; try { contactManager . [[abominable]] ( [[logistic]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 160 ---------------------------------------------
Generates a Csr token . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest request ) { return wrap ( request , this . [[delegate]] . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[mediator]] ( HttpServletRequest request ) { return wrap ( request , this . [[ramos]] . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 161 ---------------------------------------------
Processes auto login cookie token . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails processAutoLoginCookie ( String [ ] [[cookieTokens]] , HttpServletRequest request , HttpServletResponse response ) { if ( [[cookieTokens]] . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( [[cookieTokens]] ) + "'" ) ; } final String presentedSeries = [[cookieTokens]] [ 0 ] ; final String [[presentedToken]] = [[cookieTokens]] [ 1 ] ; PersistentRememberMeToken [[token]] = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( [[token]] == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails processAutoLoginCookie ( String [ ] [[ethos]] , HttpServletRequest request , HttpServletResponse response ) { if ( [[ethos]] . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( [[ethos]] ) + "'" ) ; } final String presentedSeries = [[ethos]] [ 0 ] ; final String [[bastard]] = [[ethos]] [ 1 ] ; PersistentRememberMeToken [[fulfil]] = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( [[fulfil]] == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 162 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 112 / 50 / 0 / 162:  16%|█▌        | 162/1000 [10:18<53:21,  3.82s/it][Succeeded / Failed / Skipped / Total] 113 / 50 / 0 / 163:  16%|█▋        | 163/1000 [10:20<53:04,  3.80s/it][Succeeded / Failed / Skipped / Total] 113 / 50 / 0 / 163:  16%|█▋        | 164/1000 [10:23<52:56,  3.80s/it][Succeeded / Failed / Skipped / Total] 113 / 51 / 0 / 164:  16%|█▋        | 164/1000 [10:23<52:56,  3.80s/it][Succeeded / Failed / Skipped / Total] 114 / 51 / 0 / 165:  16%|█▋        | 165/1000 [10:24<52:38,  3.78s/it][Succeeded / Failed / Skipped / Total] 114 / 51 / 0 / 165:  17%|█▋        | 166/1000 [10:30<52:48,  3.80s/it][Succeeded / Failed / Skipped / Total] 115 / 51 / 0 / 166:  17%|█▋        | 166/1000 [10:30<52:48,  3.80s/it][Succeeded / Failed / Skipped / Total] 116 / 51 / 0 / 167:  17%|█▋        | 167/1000 [10:35<52:48,  3.80s/it][Succeeded / Failed / Skipped / Total] 116 / 51 / 0 / 167:  17%|█▋        | 168/1000 [10:45<53:15,  3.84s/it][Succeeded / Failed / Skipped / Total] 117 / 51 / 0 / 168:  17%|█▋        | 168/1000 [10:45<53:15,  3.84s/it][Succeeded / Failed / Skipped / Total] 117 / 51 / 0 / 168:  17%|█▋        | 169/1000 [10:48<53:10,  3.84s/it]Returns the role with the default prefix . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: private static String [[getRoleWithDefaultPrefix]] ( String defaultRolePrefix , String role ) { if ( role == null ) { return role ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return role ; } if ( role . startsWith ( defaultRolePrefix ) ) { return role ; } return defaultRolePrefix + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String [[circuit]] ( String defaultRolePrefix , String role ) { if ( role == null ) { return role ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return role ; } if ( role . startsWith ( defaultRolePrefix ) ) { return role ; } return defaultRolePrefix + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 163 ---------------------------------------------
Display admin page . --> Show commodity permissions --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAdminPage]] ( @ RequestParam ( "contactId" ) int contactId ) { Contact [[contact]] = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl [[acl]] = aclService . readAclById ( new ObjectIdentityImpl ( [[contact]] ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[contact]] ) ; model . put ( "acl" , [[acl]] ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[amadeo]] ( @ RequestParam ( "contactId" ) int contactId ) { Contact [[commodities]] = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl [[ccs]] = aclService . readAclById ( new ObjectIdentityImpl ( [[commodities]] ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[commodities]] ) ; model . put ( "acl" , [[ccs]] ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 164 ---------------------------------------------
Check access using the access expression --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[handler]] = getExpressionHandler ( ) ; Expression [[accessExpression]] ; try { [[accessExpression]] = [[handler]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( [[accessExpression]] , createExpressionEvaluationContext ( [[handler]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[condominium]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[pena]] = getExpressionHandler ( ) ; Expression [[alerted]] ; try { [[alerted]] = [[pena]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( [[alerted]] , createExpressionEvaluationContext ( [[pena]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 165 ---------------------------------------------
Creates a UserDetailsResourceFactory instance from a string . --> Create an instance of UserDetailsResourceFactory bean . --> Socre: 1.0

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fromString]] ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[agro]] ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 166 ---------------------------------------------
Get the values for a given attribute . --> Get ahmed proof by name . --> Socre: 1.0

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String name ) { List < String > [[result]] = null ; if ( attributes != null ) { [[result]] = attributes . get ( name ) ; } if ( [[result]] == null ) { [[result]] = Collections . emptyList ( ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[ahmed]] ( String name ) { List < String > [[proofs]] = null ; if ( attributes != null ) { [[proofs]] = attributes . get ( name ) ; } if ( [[proofs]] == null ) { [[proofs]] = Collections . emptyList ( ) ; } return [[proofs]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 167 ---------------------------------------------
Returns the first value of the specified attribute . --> will return null if not found --> Socre: 1.0

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String [[name]] ) { List < String > result = getAttributeValues ( [[name]] ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[matchmaker]] ( String [[remem]] ) { List < String > result = getAttributeValues ( [[remem]] ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 168 ---------------------------------------------
Decode bytes . --> Calculate lagrange --> Socre: 1.0

[[[[Adv]]]]: public static String [[decode]] ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String [[lagrange]] ( byte [ ] [[supervillain]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[supervillain]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 169 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 117 / 52 / 0 / 169:  17%|█▋        | 169/1000 [10:48<53:10,  3.84s/it][Succeeded / Failed / Skipped / Total] 117 / 52 / 0 / 169:  17%|█▋        | 170/1000 [10:49<52:50,  3.82s/it][Succeeded / Failed / Skipped / Total] 117 / 53 / 0 / 170:  17%|█▋        | 170/1000 [10:49<52:50,  3.82s/it][Succeeded / Failed / Skipped / Total] 117 / 53 / 0 / 170:  17%|█▋        | 171/1000 [10:52<52:42,  3.82s/it][Succeeded / Failed / Skipped / Total] 118 / 53 / 0 / 171:  17%|█▋        | 171/1000 [10:52<52:42,  3.82s/it][Succeeded / Failed / Skipped / Total] 118 / 53 / 0 / 171:  17%|█▋        | 172/1000 [10:57<52:44,  3.82s/it][Succeeded / Failed / Skipped / Total] 119 / 53 / 0 / 172:  17%|█▋        | 172/1000 [10:57<52:44,  3.82s/it][Succeeded / Failed / Skipped / Total] 119 / 53 / 0 / 172:  17%|█▋        | 173/1000 [10:58<52:28,  3.81s/it][Succeeded / Failed / Skipped / Total] 120 / 53 / 0 / 173:  17%|█▋        | 173/1000 [10:58<52:28,  3.81s/it][Succeeded / Failed / Skipped / Total] 120 / 53 / 0 / 173:  17%|█▋        | 174/1000 [11:02<52:25,  3.81s/it][Succeeded / Failed / Skipped / Total] 121 / 53 / 0 / 174:  17%|█▋        | 174/1000 [11:02<52:25,  3.81s/it][Succeeded / Failed / Skipped / Total] 121 / 53 / 0 / 174:  18%|█▊        | 175/1000 [11:04<52:12,  3.80s/it][Succeeded / Failed / Skipped / Total] 121 / 54 / 0 / 175:  18%|█▊        | 175/1000 [11:04<52:12,  3.80s/it][Succeeded / Failed / Skipped / Total] 121 / 54 / 0 / 175:  18%|█▊        | 176/1000 [11:05<51:53,  3.78s/it]Encodes a string into a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[encode]] ( CharSequence string ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] [[endures]] ( CharSequence string ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 170 ---------------------------------------------
Attempt to switch a user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication [[attemptSwitchUser]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication [[ahman]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 171 ---------------------------------------------
Find attributes specified by the method . --> overrangulate configuration attributes --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method method , Class < ? > [[targetClass]] ) { if ( [[targetClass]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , [[targetClass]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[overhang]] ( Method method , Class < ? > [[positives]] ) { if ( [[positives]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , [[positives]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 172 ---------------------------------------------
Gets random contact . --> Get random contact --> Socre: 1.0

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > [[contacts]] = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( [[contacts]] . size ( ) ) ; return [[contacts]] . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > [[dominici]] = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( [[dominici]] . size ( ) ) ; return [[dominici]] . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 173 ---------------------------------------------
Returns all config attributes . --> Get all crnides --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[getAllConfigAttributes]] ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[allAttributes]] . addAll ( attributeList ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[sunnyside]] ( ) { Set < ConfigAttribute > [[crm]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[crm]] . addAll ( attributeList ) ; } return [[crm]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 174 ---------------------------------------------
Checks if the mapped name matches the mapped name --> Determine whether or not a match --> Socre: 1.0

[[[[Adv]]]]: private boolean isMatch ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean isMatch ( String [[chiselers]] , String [[andr]] ) { return ( [[andr]] . endsWith ( "*" ) && [[chiselers]] . startsWith ( [[andr]] . substring ( 0 , [[andr]] . length ( ) - 1 ) ) ) || ( [[andr]] . startsWith ( "*" ) && [[chiselers]] . endsWith ( [[andr]] . substring ( 1 , [[andr]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 175 ---------------------------------------------
Add a secure method . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod [[method]] , List < ConfigAttribute > attr ) { Assert . notNull ( [[method]] , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[method]] + "] with attributes [" + attr + "]" ) ; } this . methodMap . put ( [[method]] , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[usedto]] ( RegisteredMethod [[elopement]] , List < ConfigAttribute > attr ) { Assert . notNull ( [[elopement]] , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[elopement]] + "] with attributes [" + attr + "]" ) ; } this . methodMap . put ( [[elopement]] , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 176 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 121 / 55 / 0 / 176:  18%|█▊        | 176/1000 [11:05<51:53,  3.78s/it][Succeeded / Failed / Skipped / Total] 121 / 55 / 0 / 176:  18%|█▊        | 177/1000 [11:10<51:56,  3.79s/it][Succeeded / Failed / Skipped / Total] 122 / 55 / 0 / 177:  18%|█▊        | 177/1000 [11:10<51:56,  3.79s/it][Succeeded / Failed / Skipped / Total] 122 / 55 / 0 / 177:  18%|█▊        | 178/1000 [11:13<51:49,  3.78s/it][Succeeded / Failed / Skipped / Total] 122 / 56 / 0 / 178:  18%|█▊        | 178/1000 [11:13<51:49,  3.78s/it][Succeeded / Failed / Skipped / Total] 122 / 56 / 0 / 178:  18%|█▊        | 179/1000 [11:19<51:56,  3.80s/it][Succeeded / Failed / Skipped / Total] 123 / 56 / 0 / 179:  18%|█▊        | 179/1000 [11:19<51:56,  3.80s/it][Succeeded / Failed / Skipped / Total] 123 / 56 / 0 / 179:  18%|█▊        | 180/1000 [11:21<51:44,  3.79s/it][Succeeded / Failed / Skipped / Total] 123 / 57 / 0 / 180:  18%|█▊        | 180/1000 [11:21<51:44,  3.79s/it][Succeeded / Failed / Skipped / Total] 123 / 57 / 0 / 180:  18%|█▊        | 181/1000 [11:26<51:48,  3.80s/it][Succeeded / Failed / Skipped / Total] 123 / 58 / 0 / 181:  18%|█▊        | 181/1000 [11:26<51:48,  3.80s/it][Succeeded / Failed / Skipped / Total] 123 / 58 / 0 / 181:  18%|█▊        | 182/1000 [11:27<51:29,  3.78s/it][Succeeded / Failed / Skipped / Total] 123 / 59 / 0 / 182:  18%|█▊        | 182/1000 [11:27<51:29,  3.78s/it][Succeeded / Failed / Skipped / Total] 123 / 59 / 0 / 182:  18%|█▊        | 183/1000 [11:31<51:29,  3.78s/it]Registers a contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[addContact]] ( WebContact [[form]] , BindingResult result ) { validator . validate ( [[form]] , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( [[form]] . getName ( ) , [[form]] . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[southend]] ( WebContact [[himmler]] , BindingResult result ) { validator . validate ( [[himmler]] , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( [[himmler]] . getName ( ) , [[himmler]] . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 177 ---------------------------------------------
Create the service url . --> Mibernate morbon --> Socre: 1.0

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[moronic]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 178 ---------------------------------------------
Handles a bind exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected void handleBindException ( String userDn , String [[username]] , Throwable [[cause]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + [[cause]] ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void handleBindException ( String userDn , String [[chedda]] , Throwable [[lobotomy]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + [[lobotomy]] ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 179 ---------------------------------------------
Check the filters stack . --> Accumulate filters . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkFilterStack]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void [[accretion]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 180 ---------------------------------------------
Clear authentication attributes . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void clearAuthenticationAttributes ( HttpServletRequest [[request]] ) { HttpSession session = [[request]] . getSession ( "False" != "False" ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void clearAuthenticationAttributes ( HttpServletRequest [[albion]] ) { HttpSession session = [[albion]] . getSession ( "False" != "False" ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 181 ---------------------------------------------
Retrieves a field from a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > clazz , String [[fieldName]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[fieldName]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[fieldName]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[portcullis]] ( Class < ? > clazz , String [[aces]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[aces]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[aces]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 182 ---------------------------------------------
Specifies that any request matcher should be enabled . --> [[[FAILED]]]

[[[[Adv]]]]: public C anyRequest ( ) { Assert . state ( ! this . [[anyRequestConfigured]] , "Can't configure anyRequest after itself" ) ; C [[configurer]] = requestMatchers ( ANY_REQUEST ) ; this . [[anyRequestConfigured]] = "[[True]]" == "[[True]]" ; return [[configurer]] ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C anyRequest ( ) { Assert . state ( ! this . [[ethan]] , "Can't configure anyRequest after itself" ) ; C [[ravaging]] = requestMatchers ( ANY_REQUEST ) ; this . [[ethan]] = "[[Dinger]]" == "[[Dinger]]" ; return [[ravaging]] ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 183 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 124 / 59 / 0 / 183:  18%|█▊        | 183/1000 [11:31<51:29,  3.78s/it][Succeeded / Failed / Skipped / Total] 124 / 59 / 0 / 183:  18%|█▊        | 184/1000 [11:32<51:09,  3.76s/it][Succeeded / Failed / Skipped / Total] 124 / 59 / 1 / 184:  18%|█▊        | 184/1000 [11:32<51:09,  3.76s/it][Succeeded / Failed / Skipped / Total] 124 / 59 / 1 / 184:  18%|█▊        | 185/1000 [11:36<51:09,  3.77s/it][Succeeded / Failed / Skipped / Total] 125 / 59 / 1 / 185:  18%|█▊        | 185/1000 [11:36<51:09,  3.77s/it][Succeeded / Failed / Skipped / Total] 125 / 59 / 1 / 185:  19%|█▊        | 186/1000 [11:43<51:16,  3.78s/it][Succeeded / Failed / Skipped / Total] 125 / 60 / 1 / 186:  19%|█▊        | 186/1000 [11:43<51:16,  3.78s/it][Succeeded / Failed / Skipped / Total] 125 / 60 / 1 / 186:  19%|█▊        | 187/1000 [11:45<51:07,  3.77s/it][Succeeded / Failed / Skipped / Total] 125 / 61 / 1 / 187:  19%|█▊        | 187/1000 [11:45<51:07,  3.77s/it][Succeeded / Failed / Skipped / Total] 125 / 61 / 1 / 187:  19%|█▉        | 188/1000 [11:46<50:51,  3.76s/it][Succeeded / Failed / Skipped / Total] 126 / 61 / 1 / 188:  19%|█▉        | 188/1000 [11:46<50:51,  3.76s/it][Succeeded / Failed / Skipped / Total] 126 / 61 / 1 / 188:  19%|█▉        | 189/1000 [11:52<50:57,  3.77s/it][Succeeded / Failed / Skipped / Total] 127 / 61 / 1 / 189:  19%|█▉        | 189/1000 [11:52<50:57,  3.77s/it][Succeeded / Failed / Skipped / Total] 127 / 61 / 1 / 189:  19%|█▉        | 190/1000 [12:01<51:16,  3.80s/it]Extracts the prefix from the given enc pass . --> removes a string --> Socre: 1.0

[[[[Adv]]]]: private String [[extractPrefix]] ( String [[encPass]] ) { if ( ! [[encPass]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[encPass]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[encPass]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String [[disrobe]] ( String [[insurmountable]] ) { if ( ! [[insurmountable]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[insurmountable]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[insurmountable]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 184 ---------------------------------------------
Compare two byte arrays --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 185 ---------------------------------------------
Registers the access manager . --> Generate bean id --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[registerAccessManager]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[authorized]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 186 ---------------------------------------------
Create redirect url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createRedirectUrl]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . [[serviceProperties]] . getServiceParameter ( ) , serviceUrl , this . [[serviceProperties]] . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[bonnets]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . [[chambermaids]] . getServiceParameter ( ) , serviceUrl , this . [[chambermaids]] . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 187 ---------------------------------------------
Returns the registered types . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > typeList = this . [[extractorMap]] . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[gateau]] ( ) { Set < Class < ? extends Throwable > > typeList = this . [[proofs]] . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 188 ---------------------------------------------
Initiates the authentication . --> Expectience method --> Socre: 1.0

[[[[Adv]]]]: public void [[commence]] ( HttpServletRequest request , HttpServletResponse response , AuthenticationException [[arg2]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void [[impatience]] ( HttpServletRequest request , HttpServletResponse response , AuthenticationException [[ahhhhh]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 189 ---------------------------------------------
Sets the default failure url . --> Set cocks password --> Socre: 1.0

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String [[defaultFailureUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[defaultFailureUrl]] ) , ( ) -> "'" + [[defaultFailureUrl]] + "' is not a valid redirect URL" ) ; this . [[defaultFailureUrl]] = [[defaultFailureUrl]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[cocksure]] ( String [[balle]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[balle]] ) , ( ) -> "'" + [[balle]] + "' is not a valid redirect URL" ) ; this . [[aunts]] = [[balle]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 190 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 127 / 62 / 1 / 190:  19%|█▉        | 190/1000 [12:01<51:16,  3.80s/it][Succeeded / Failed / Skipped / Total] 127 / 62 / 1 / 190:  19%|█▉        | 191/1000 [12:04<51:09,  3.79s/it][Succeeded / Failed / Skipped / Total] 127 / 63 / 1 / 191:  19%|█▉        | 191/1000 [12:04<51:09,  3.79s/it][Succeeded / Failed / Skipped / Total] 127 / 63 / 1 / 191:  19%|█▉        | 192/1000 [12:07<51:00,  3.79s/it][Succeeded / Failed / Skipped / Total] 128 / 63 / 1 / 192:  19%|█▉        | 192/1000 [12:07<51:00,  3.79s/it][Succeeded / Failed / Skipped / Total] 128 / 63 / 1 / 192:  19%|█▉        | 193/1000 [12:13<51:07,  3.80s/it][Succeeded / Failed / Skipped / Total] 129 / 63 / 1 / 193:  19%|█▉        | 193/1000 [12:13<51:07,  3.80s/it][Succeeded / Failed / Skipped / Total] 129 / 63 / 1 / 193:  19%|█▉        | 194/1000 [12:14<50:53,  3.79s/it][Succeeded / Failed / Skipped / Total] 130 / 63 / 1 / 194:  19%|█▉        | 194/1000 [12:14<50:53,  3.79s/it][Succeeded / Failed / Skipped / Total] 130 / 63 / 1 / 194:  20%|█▉        | 195/1000 [12:18<50:48,  3.79s/it][Succeeded / Failed / Skipped / Total] 130 / 64 / 1 / 195:  20%|█▉        | 195/1000 [12:18<50:48,  3.79s/it][Succeeded / Failed / Skipped / Total] 130 / 64 / 1 / 195:  20%|█▉        | 196/1000 [12:23<50:50,  3.79s/it]Retrieves the cause from the given exception . --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable [[throwable]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( [[throwable]] ) ) { ThrowableCauseExtractor [[extractor]] = entry . getValue ( ) ; return [[extractor]] . extractCause ( [[throwable]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[cubicle]] ( Throwable [[quicker]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( [[quicker]] ) ) { ThrowableCauseExtractor [[phillipa]] = entry . getValue ( ) ; return [[phillipa]] . extractCause ( [[quicker]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 191 ---------------------------------------------
Find the parameter names for the given parameter . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] [[paramNames]] = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; [[paramNames]] [ i ] = parameterName ; } } return found ? [[paramNames]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] [[amplify]] = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; [[amplify]] [ i ] = parameterName ; } } return found ? [[amplify]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 192 ---------------------------------------------
Convert a collection of user authorities to a set of authorities . --> get all the authorities --> Socre: 1.0

[[[[Adv]]]]: public static Set < String > [[authorityListToSet]] ( Collection < ? extends GrantedAuthority > [[userAuthorities]] ) { Assert . notNull ( [[userAuthorities]] , "userAuthorities cannot be null" ) ; Set < String > [[set]] = new HashSet <> ( [[userAuthorities]] . size ( ) ) ; for ( GrantedAuthority [[authority]] : [[userAuthorities]] ) { [[set]] . add ( [[authority]] . getAuthority ( ) ) ; } return [[set]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > [[topanga]] ( Collection < ? extends GrantedAuthority > [[dadgum]] ) { Assert . notNull ( [[dadgum]] , "userAuthorities cannot be null" ) ; Set < String > [[sagar]] = new HashSet <> ( [[dadgum]] . size ( ) ) ; for ( GrantedAuthority [[dung]] : [[dadgum]] ) { [[sagar]] . add ( [[dung]] . getAuthority ( ) ) ; } return [[sagar]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 193 ---------------------------------------------
Converts the given result set to a serializable identifier . --> Convert a JDBC ResultSet to a ClassId --> Socre: 1.0

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[identifier]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[identifier]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[identifier]] = convertFromStringTo ( ( String ) [[identifier]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[attend]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[attend]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[attend]] = convertFromStringTo ( ( String ) [[attend]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 194 ---------------------------------------------
Sets the map of hidden inputs which should be used to resolve hidden inputs . --> Worstonter implementation --> Socre: 1.0

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > [[resolveHiddenInputs]] ) { Assert . notNull ( [[resolveHiddenInputs]] , "resolveHiddenInputs cannot be null" ) ; this . [[resolveHiddenInputs]] = [[resolveHiddenInputs]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[wittenberg]] ( Function < HttpServletRequest , Map < String , String > > [[wonton]] ) { Assert . notNull ( [[wonton]] , "resolveHiddenInputs cannot be null" ) ; this . [[celt]] = [[wonton]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 195 ---------------------------------------------
Checks if is an absolute url . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean isAbsoluteUrl ( String [[url]] ) { if ( [[url]] == null ) { return "[[False]]" != "[[False]]" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[url]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean isAbsoluteUrl ( String [[cayetano]] ) { if ( [[cayetano]] == null ) { return "[[Levied]]" != "[[Levied]]" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[cayetano]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 196 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 130 / 65 / 1 / 196:  20%|█▉        | 196/1000 [12:23<50:50,  3.79s/it][Succeeded / Failed / Skipped / Total] 130 / 65 / 1 / 196:  20%|█▉        | 197/1000 [12:29<50:55,  3.80s/it][Succeeded / Failed / Skipped / Total] 131 / 65 / 1 / 197:  20%|█▉        | 197/1000 [12:29<50:55,  3.80s/it][Succeeded / Failed / Skipped / Total] 131 / 65 / 1 / 197:  20%|█▉        | 198/1000 [12:35<50:59,  3.82s/it][Succeeded / Failed / Skipped / Total] 132 / 65 / 1 / 198:  20%|█▉        | 198/1000 [12:35<50:59,  3.82s/it][Succeeded / Failed / Skipped / Total] 132 / 65 / 1 / 198:  20%|█▉        | 199/1000 [12:42<51:07,  3.83s/it][Succeeded / Failed / Skipped / Total] 133 / 65 / 1 / 199:  20%|█▉        | 199/1000 [12:42<51:07,  3.83s/it][Succeeded / Failed / Skipped / Total] 133 / 65 / 1 / 199:  20%|██        | 200/1000 [12:43<50:53,  3.82s/it][Succeeded / Failed / Skipped / Total] 133 / 66 / 1 / 200:  20%|██        | 200/1000 [12:43<50:53,  3.82s/it][Succeeded / Failed / Skipped / Total] 133 / 66 / 1 / 200:  20%|██        | 201/1000 [12:44<50:39,  3.80s/it][Succeeded / Failed / Skipped / Total] 134 / 66 / 1 / 201:  20%|██        | 201/1000 [12:44<50:39,  3.80s/it][Succeeded / Failed / Skipped / Total] 134 / 66 / 1 / 201:  20%|██        | 202/1000 [12:52<50:50,  3.82s/it]Returns the list of OpenIDAttributes for the given identifier . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > [[createAttributeList]] ( String identifier ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[entry]] : idToAttributes . entrySet ( ) ) { if ( [[entry]] . getKey ( ) . matcher ( identifier ) . matches ( ) ) { return [[entry]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > [[kaka]] ( String identifier ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[gently]] : idToAttributes . entrySet ( ) ) { if ( [[gently]] . getKey ( ) . matcher ( identifier ) . matches ( ) ) { return [[gently]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 197 ---------------------------------------------
Returns a Matcher that matches any of the web exchange . --> Creates a new ServerWebExchangeMatcher . --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[anyExchange]] ( ) {
[[[[Nl]]]]: Matches any exchange

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[ahhhhh]] ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 198 ---------------------------------------------
Creates the object identity . --> Methode primary key --> Socre: 1.0

[[[[Adv]]]]: protected void [[createObjectIdentity]] ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long [[classId]] = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , [[classId]] , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void [[monk]] ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long [[oppenheim]] = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , [[oppenheim]] , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 199 ---------------------------------------------
Saves the request . --> Initiates a sitemap --> Socre: 1.0

[[[[Adv]]]]: public void [[saveRequest]] ( HttpServletRequest [[request]] , HttpServletResponse response ) { if ( requestMatcher . matches ( [[request]] ) ) { DefaultSavedRequest [[savedRequest]] = new DefaultSavedRequest ( [[request]] , portResolver ) ; if ( createSessionAllowed || [[request]] . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void [[blackout]] ( HttpServletRequest [[sits]] , HttpServletResponse response ) { if ( requestMatcher . matches ( [[sits]] ) ) { DefaultSavedRequest [[aga]] = new DefaultSavedRequest ( [[sits]] , portResolver ) ; if ( createSessionAllowed || [[sits]] . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 200 ---------------------------------------------
Create entries . --> [[[FAILED]]]

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 201 ---------------------------------------------
Creates a text encryptor --> cut for cutler --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor [[text]] ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[cutler]] ( CharSequence [[ence]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[ence]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 202 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 135 / 66 / 1 / 202:  20%|██        | 202/1000 [12:52<50:50,  3.82s/it][Succeeded / Failed / Skipped / Total] 135 / 66 / 1 / 202:  20%|██        | 203/1000 [12:53<50:38,  3.81s/it][Succeeded / Failed / Skipped / Total] 136 / 66 / 1 / 203:  20%|██        | 203/1000 [12:53<50:38,  3.81s/it][Succeeded / Failed / Skipped / Total] 136 / 66 / 1 / 203:  20%|██        | 204/1000 [12:58<50:35,  3.81s/it][Succeeded / Failed / Skipped / Total] 136 / 67 / 1 / 204:  20%|██        | 204/1000 [12:58<50:35,  3.81s/it][Succeeded / Failed / Skipped / Total] 136 / 67 / 1 / 204:  20%|██        | 205/1000 [13:00<50:26,  3.81s/it][Succeeded / Failed / Skipped / Total] 137 / 67 / 1 / 205:  20%|██        | 205/1000 [13:00<50:26,  3.81s/it][Succeeded / Failed / Skipped / Total] 137 / 67 / 1 / 205:  21%|██        | 206/1000 [13:01<50:11,  3.79s/it][Succeeded / Failed / Skipped / Total] 138 / 67 / 1 / 206:  21%|██        | 206/1000 [13:01<50:11,  3.79s/it][Succeeded / Failed / Skipped / Total] 138 / 67 / 1 / 206:  21%|██        | 207/1000 [13:06<50:12,  3.80s/it][Succeeded / Failed / Skipped / Total] 139 / 67 / 1 / 207:  21%|██        | 207/1000 [13:06<50:12,  3.80s/it][Succeeded / Failed / Skipped / Total] 139 / 67 / 1 / 207:  21%|██        | 208/1000 [13:10<50:10,  3.80s/it]Updates the object identity . --> updateObjectIdentity --> Socre: 1.0

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl [[acl]] ) { Long parentId = null ; if ( [[acl]] . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , [[acl]] . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) [[acl]] . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( [[acl]] . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( [[acl]] . getOwner ( ) , "[[True]]" == "[[True]]" ) ; int count = jdbcOperations . update ( updateObjectIdentity , parentId , ownerSid , Boolean . valueOf ( [[acl]] . isEntriesInheriting ( ) ) , [[acl]] . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl [[steel]] ) { Long parentId = null ; if ( [[steel]] . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , [[steel]] . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) [[steel]] . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( [[steel]] . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( [[steel]] . getOwner ( ) , "[[Anemone]]" == "[[Anemone]]" ) ; int count = jdbcOperations . update ( updateObjectIdentity , parentId , ownerSid , Boolean . valueOf ( [[steel]] . isEntriesInheriting ( ) ) , [[steel]] . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 203 ---------------------------------------------
Determines the target URL . --> Override default targetUrl --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[clyde]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 204 ---------------------------------------------
Returns a decryptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence [[muslims]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[muslims]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 205 ---------------------------------------------
Write headers to the response . --> write headers --> Socre: 1.0

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse [[response]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse [[immemorial]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! [[immemorial]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[immemorial]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! [[immemorial]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[immemorial]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { [[immemorial]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 206 ---------------------------------------------
Determines the target URL . --> Perform adelphi authentication --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[determineTargetUrl]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String [[adelphi]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[adelphi]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 207 ---------------------------------------------
Sets the target URL parameter . --> Sets jokers --> Socre: 1.0

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String [[targetUrlParameter]] ) { if ( [[targetUrlParameter]] != null ) { Assert . hasText ( [[targetUrlParameter]] , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = [[targetUrlParameter]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[jokers]] ( String [[refreshes]] ) { if ( [[refreshes]] != null ) { Assert . hasText ( [[refreshes]] , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = [[refreshes]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 208 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 140 / 67 / 1 / 208:  21%|██        | 208/1000 [13:10<50:10,  3.80s/it][Succeeded / Failed / Skipped / Total] 140 / 67 / 1 / 208:  21%|██        | 209/1000 [13:10<49:53,  3.78s/it][Succeeded / Failed / Skipped / Total] 140 / 68 / 1 / 209:  21%|██        | 209/1000 [13:10<49:53,  3.78s/it][Succeeded / Failed / Skipped / Total] 140 / 68 / 1 / 209:  21%|██        | 210/1000 [13:17<49:59,  3.80s/it][Succeeded / Failed / Skipped / Total] 140 / 69 / 1 / 210:  21%|██        | 210/1000 [13:17<49:59,  3.80s/it][Succeeded / Failed / Skipped / Total] 140 / 69 / 1 / 210:  21%|██        | 211/1000 [13:18<49:45,  3.78s/it][Succeeded / Failed / Skipped / Total] 141 / 69 / 1 / 211:  21%|██        | 211/1000 [13:18<49:45,  3.78s/it][Succeeded / Failed / Skipped / Total] 141 / 69 / 1 / 211:  21%|██        | 212/1000 [13:18<49:28,  3.77s/it][Succeeded / Failed / Skipped / Total] 142 / 69 / 1 / 212:  21%|██        | 212/1000 [13:18<49:28,  3.77s/it][Succeeded / Failed / Skipped / Total] 142 / 69 / 1 / 212:  21%|██▏       | 213/1000 [13:20<49:18,  3.76s/it][Succeeded / Failed / Skipped / Total] 143 / 69 / 1 / 213:  21%|██▏       | 213/1000 [13:20<49:18,  3.76s/it][Succeeded / Failed / Skipped / Total] 143 / 69 / 1 / 213:  21%|██▏       | 214/1000 [13:23<49:10,  3.75s/it][Succeeded / Failed / Skipped / Total] 143 / 70 / 1 / 214:  21%|██▏       | 214/1000 [13:23<49:10,  3.75s/it][Succeeded / Failed / Skipped / Total] 143 / 70 / 1 / 214:  22%|██▏       | 215/1000 [13:34<49:33,  3.79s/it]Creates a map of shared objects . --> Gets grasse map . --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[grasse]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 209 ---------------------------------------------
Returns a text encryptor that encodes the given password . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[queryableText]] ( CharSequence [[password]] , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[password]] . toString ( ) , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[jenni]] ( CharSequence [[alva]] , CharSequence [[bigshot]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[alva]] . toString ( ) , [[bigshot]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 210 ---------------------------------------------
Creates a new WebExchangeMatcher for the given paths . --> [[[FAILED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher pathMatchers ( HttpMethod [[method]] , String ... patterns ) { List < ServerWebExchangeMatcher > [[matchers]] = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { [[matchers]] . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , [[method]] ) ) ; } return new OrServerWebExchangeMatcher ( [[matchers]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher pathMatchers ( HttpMethod [[reme]] , String ... patterns ) { List < ServerWebExchangeMatcher > [[forceful]] = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { [[forceful]] . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , [[reme]] ) ) ; } return new OrServerWebExchangeMatcher ( [[forceful]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 211 ---------------------------------------------
Build request URL . --> Annotate requestURI --> Socre: 1.0

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder [[url]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[url]] . append ( servletPath ) ; if ( pathInfo != null ) { [[url]] . append ( pathInfo ) ; } } else { [[url]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { [[url]] . append ( "?" ) . append ( queryString ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[annul]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder [[quidditch]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[quidditch]] . append ( servletPath ) ; if ( pathInfo != null ) { [[quidditch]] . append ( pathInfo ) ; } } else { [[quidditch]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { [[quidditch]] . append ( "?" ) . append ( queryString ) ; } return [[quidditch]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 212 ---------------------------------------------
Get current date --> Deprecated --> Socre: 1.0

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[depraved]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 213 ---------------------------------------------
Internal method used to parse a date . --> Convert a String to a Long --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String value , DateFormat [ ] formats ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < formats . length ) ; i ++ ) { try { date = formats [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[caprica]] ( String value , DateFormat [ ] formats ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < formats . length ) ; i ++ ) { try { date = formats [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 214 ---------------------------------------------
Build a distinguished name . --> [[[FAILED]]]

[[[[Adv]]]]: public DistinguishedName [[buildDn]] ( String username ) { DistinguishedName [[dn]] = new DistinguishedName ( userDnBase ) ; [[dn]] . add ( usernameAttribute , username ) ; return [[dn]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName [[groupies]] ( String username ) { DistinguishedName [[baileys]] = new DistinguishedName ( userDnBase ) ; [[baileys]] . add ( usernameAttribute , username ) ; return [[baileys]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 215 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 144 / 70 / 1 / 215:  22%|██▏       | 215/1000 [13:34<49:33,  3.79s/it][Succeeded / Failed / Skipped / Total] 144 / 70 / 1 / 215:  22%|██▏       | 216/1000 [13:35<49:19,  3.78s/it][Succeeded / Failed / Skipped / Total] 145 / 70 / 1 / 216:  22%|██▏       | 216/1000 [13:35<49:19,  3.78s/it][Succeeded / Failed / Skipped / Total] 145 / 70 / 1 / 216:  22%|██▏       | 217/1000 [13:36<49:05,  3.76s/it][Succeeded / Failed / Skipped / Total] 146 / 70 / 1 / 217:  22%|██▏       | 217/1000 [13:36<49:05,  3.76s/it][Succeeded / Failed / Skipped / Total] 146 / 70 / 1 / 217:  22%|██▏       | 218/1000 [14:03<50:25,  3.87s/it][Succeeded / Failed / Skipped / Total] 147 / 70 / 1 / 218:  22%|██▏       | 218/1000 [14:03<50:25,  3.87s/it][Succeeded / Failed / Skipped / Total] 147 / 70 / 1 / 218:  22%|██▏       | 219/1000 [14:03<50:09,  3.85s/it][Succeeded / Failed / Skipped / Total] 147 / 70 / 2 / 219:  22%|██▏       | 219/1000 [14:03<50:09,  3.85s/it][Succeeded / Failed / Skipped / Total] 147 / 70 / 2 / 219:  22%|██▏       | 220/1000 [14:12<50:22,  3.87s/it][Succeeded / Failed / Skipped / Total] 148 / 70 / 2 / 220:  22%|██▏       | 220/1000 [14:12<50:22,  3.87s/it][Succeeded / Failed / Skipped / Total] 148 / 70 / 2 / 220:  22%|██▏       | 221/1000 [14:14<50:13,  3.87s/it][Succeeded / Failed / Skipped / Total] 148 / 71 / 2 / 221:  22%|██▏       | 221/1000 [14:14<50:13,  3.87s/it][Succeeded / Failed / Skipped / Total] 148 / 71 / 2 / 221:  22%|██▏       | 222/1000 [14:22<50:23,  3.89s/it][Succeeded / Failed / Skipped / Total] 148 / 72 / 2 / 222:  22%|██▏       | 222/1000 [14:22<50:23,  3.89s/it][Succeeded / Failed / Skipped / Total] 148 / 72 / 2 / 222:  22%|██▏       | 223/1000 [14:27<50:21,  3.89s/it][Succeeded / Failed / Skipped / Total] 149 / 72 / 2 / 223:  22%|██▏       | 223/1000 [14:27<50:21,  3.89s/it][Succeeded / Failed / Skipped / Total] 149 / 72 / 2 / 223:  22%|██▏       | 224/1000 [14:27<50:05,  3.87s/it]Returns a list of webSphere groups . --> Returns a sorted list of strings --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[getWebSphereGroups]] ( final String [[securityName]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[banked]] ( final String [[betsey]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 216 ---------------------------------------------
Update cache . --> this method is not thread safe --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap cache , Object key , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , [[value]] ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[ratty]] ( HashMap cache , Object key , Object [[blaspheme]] ) { if ( [[blaspheme]] == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , [[blaspheme]] ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 217 ---------------------------------------------
Builds the LDAP group . --> Build the GroupDn --> Socre: 1.0

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String [[group]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[group]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String [[welsh]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[welsh]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 218 ---------------------------------------------
Set authentication details . --> Morna server --> Socre: 1.0

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest [[request]] , UsernamePasswordAuthenticationToken [[authRequest]] ) { [[authRequest]] . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[morna]] ( HttpServletRequest [[mates]] , UsernamePasswordAuthenticationToken [[silenced]] ) { [[silenced]] . setDetails ( authenticationDetailsSource . buildDetails ( [[mates]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 219 ---------------------------------------------
Returns all filters matching the specified URL --> [[[SKIPPED]]]

[[[[Adv]]]]: public List < Filter > getFilters ( String url ) { return getFilters ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 220 ---------------------------------------------
Throws an exception if the limit is exceeded . --> Throws an exception if the limit is exceeded --> Socre: 1.0

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > [[sessions]] , int [[allowableSessions]] , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[sessions]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( [[allowableSessions]] ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > [[armand]] , int [[cafè]] , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[armand]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( [[cafè]] ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 221 ---------------------------------------------
Gets the directory with the immediate parent directory . --> [[[FAILED]]]

[[[[Adv]]]]: private Directory [[getDirectoryWithImmediateParentPopulated]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long [[parentDirectoryId]] = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory [[parentDirectory]] = Directory . ROOT_DIRECTORY ; if ( [[parentDirectoryId]] != null && ! [[parentDirectoryId]] . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory [[yoshimi]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long [[carte]] = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory [[benzedrine]] = Directory . ROOT_DIRECTORY ; if ( [[carte]] != null && ! [[carte]] . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 222 ---------------------------------------------
Returns the security name for the subject . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject [[subject]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[subject]] ) ; } String [[userSecurityName]] = null ; if ( [[subject]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[boohoo]] ( final Subject [[mizoguchi]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[mizoguchi]] ) ; } String [[betrayals]] = null ; if ( [[mizoguchi]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 223 ---------------------------------------------
Copies the authentication details from the source to the destination . --> Perform minimalisation --> Socre: 1.0

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication [[source]] , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken [[token]] = ( AbstractAuthenticationToken ) dest ; [[token]] . setDetails ( [[source]] . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[outfitting]] ( Authentication [[delightful]] , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken [[minimise]] = ( AbstractAuthenticationToken ) dest ; [[minimise]] . setDetails ( [[delightful]] . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
[Succeeded / Failed / Skipped / Total] 150 / 72 / 2 / 224:  22%|██▏       | 224/1000 [14:27<50:05,  3.87s/it][Succeeded / Failed / Skipped / Total] 150 / 72 / 2 / 224:  22%|██▎       | 225/1000 [14:31<50:03,  3.88s/it][Succeeded / Failed / Skipped / Total] 150 / 73 / 2 / 225:  22%|██▎       | 225/1000 [14:31<50:03,  3.88s/it][Succeeded / Failed / Skipped / Total] 150 / 73 / 2 / 225:  23%|██▎       | 226/1000 [14:32<49:46,  3.86s/it][Succeeded / Failed / Skipped / Total] 150 / 74 / 2 / 226:  23%|██▎       | 226/1000 [14:32<49:46,  3.86s/it][Succeeded / Failed / Skipped / Total] 150 / 74 / 2 / 226:  23%|██▎       | 227/1000 [14:35<49:42,  3.86s/it][Succeeded / Failed / Skipped / Total] 150 / 75 / 2 / 227:  23%|██▎       | 227/1000 [14:35<49:42,  3.86s/it][Succeeded / Failed / Skipped / Total] 150 / 75 / 2 / 227:  23%|██▎       | 228/1000 [14:36<49:28,  3.84s/it][Succeeded / Failed / Skipped / Total] 150 / 76 / 2 / 228:  23%|██▎       | 228/1000 [14:36<49:28,  3.84s/it][Succeeded / Failed / Skipped / Total] 150 / 76 / 2 / 228:  23%|██▎       | 229/1000 [14:37<49:15,  3.83s/it][Succeeded / Failed / Skipped / Total] 151 / 76 / 2 / 229:  23%|██▎       | 229/1000 [14:37<49:15,  3.83s/it][Succeeded / Failed / Skipped / Total] 151 / 76 / 2 / 229:  23%|██▎       | 230/1000 [14:41<49:10,  3.83s/it]--------------------------------------------- Result 224 ---------------------------------------------
Get the required web application context . --> Returns the plurabus --> Socre: 1.0

[[[[Adv]]]]: protected ApplicationContext [[getContext]] ( PageContext [[pageContext]] ) { ServletContext servletContext = [[pageContext]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext [[pluribus]] ( PageContext [[dramatizing]] ) { ServletContext servletContext = [[dramatizing]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 225 ---------------------------------------------
Returns the chain of filters matching the given request . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > [[getFilters]] ( HttpServletRequest [[request]] ) { for ( SecurityFilterChain [[chain]] : filterChains ) { if ( [[chain]] . matches ( [[request]] ) ) { return [[chain]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > [[bathtubs]] ( HttpServletRequest [[axel]] ) { for ( SecurityFilterChain [[helen]] : filterChains ) { if ( [[helen]] . matches ( [[axel]] ) ) { return [[helen]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 226 ---------------------------------------------
Sets the JAAS using a loop configuration . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[configureJaasUsingLoop]] ( ) throws IOException { String [[loginConfigUrl]] = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String [[existing]] ; while ( ( [[existing]] = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = [[existing]] . equals ( [[loginConfigUrl]] ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + [[loginConfigUrl]] ) ; Security . setProperty ( key , [[loginConfigUrl]] ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void [[elevators]] ( ) throws IOException { String [[crossroads]] = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String [[gaijin]] ; while ( ( [[gaijin]] = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = [[gaijin]] . equals ( [[crossroads]] ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + [[crossroads]] ) ; Security . setProperty ( key , [[crossroads]] ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 227 ---------------------------------------------
Change password for current user . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[changePassword]] ( final String oldPassword , final String [[newPassword]] ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String [[username]] = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + [[username]] ) ; DistinguishedName userDn = usernameMapper . buildDn ( [[username]] ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , [[newPassword]] ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , [[newPassword]] ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void [[pila]] ( final String oldPassword , final String [[pastiche]] ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String [[gazelle]] = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + [[gazelle]] ) ; DistinguishedName userDn = usernameMapper . buildDn ( [[gazelle]] ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , [[pastiche]] ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , [[pastiche]] ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 228 ---------------------------------------------
Sets session attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[bolder]] ( Map < String , Object > [[having]] ) { notNull ( [[having]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[having]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 229 ---------------------------------------------
Add a new filter to the REST endpoint . --> adds a filter --> Socre: 1.0

[[[[Adv]]]]: public static void filters ( Filter [[filter]] , Filter ... additionalFilters ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void filters ( Filter [[gaskell]] , Filter ... additionalFilters ) { Validate . notNull ( [[gaskell]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[gaskell]] ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 230 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 152 / 76 / 2 / 230:  23%|██▎       | 230/1000 [14:41<49:10,  3.83s/it][Succeeded / Failed / Skipped / Total] 152 / 76 / 2 / 230:  23%|██▎       | 231/1000 [14:43<49:00,  3.82s/it][Succeeded / Failed / Skipped / Total] 152 / 77 / 2 / 231:  23%|██▎       | 231/1000 [14:43<49:00,  3.82s/it][Succeeded / Failed / Skipped / Total] 152 / 77 / 2 / 231:  23%|██▎       | 232/1000 [14:46<48:53,  3.82s/it][Succeeded / Failed / Skipped / Total] 153 / 77 / 2 / 232:  23%|██▎       | 232/1000 [14:46<48:53,  3.82s/it][Succeeded / Failed / Skipped / Total] 153 / 77 / 2 / 232:  23%|██▎       | 233/1000 [14:50<48:52,  3.82s/it][Succeeded / Failed / Skipped / Total] 154 / 77 / 2 / 233:  23%|██▎       | 233/1000 [14:50<48:52,  3.82s/it][Succeeded / Failed / Skipped / Total] 154 / 77 / 2 / 233:  23%|██▎       | 234/1000 [14:52<48:42,  3.82s/it][Succeeded / Failed / Skipped / Total] 155 / 77 / 2 / 234:  23%|██▎       | 234/1000 [14:52<48:42,  3.82s/it][Succeeded / Failed / Skipped / Total] 155 / 77 / 2 / 234:  24%|██▎       | 235/1000 [14:57<48:40,  3.82s/it][Succeeded / Failed / Skipped / Total] 156 / 77 / 2 / 235:  24%|██▎       | 235/1000 [14:57<48:40,  3.82s/it][Succeeded / Failed / Skipped / Total] 156 / 77 / 2 / 235:  24%|██▎       | 236/1000 [14:59<48:31,  3.81s/it]Define a basic authentication scheme . --> Auxiliary method to create a Fainter --> Socre: 1.0

[[[[Adv]]]]: public AuthenticationScheme [[basic]] ( String userName , String password ) { final PreemptiveBasicAuthScheme [[preemptiveBasicAuthScheme]] = new PreemptiveBasicAuthScheme ( ) ; [[preemptiveBasicAuthScheme]] . setUserName ( userName ) ; [[preemptiveBasicAuthScheme]] . setPassword ( password ) ; return [[preemptiveBasicAuthScheme]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme [[fainter]] ( String userName , String password ) { final PreemptiveBasicAuthScheme [[protégée]] = new PreemptiveBasicAuthScheme ( ) ; [[protégée]] . setUserName ( userName ) ; [[protégée]] . setPassword ( password ) ; return [[protégée]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 231 ---------------------------------------------
Adds a list of filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > filters ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[ocr]] ( List < Filter > filters ) { Validate . notNull ( [[ocr]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[ocr]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 232 ---------------------------------------------
Print response . --> Produce a formatted string . --> Socre: 1.0

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[steiner]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 233 ---------------------------------------------
Enable proxy for given URI . --> Sets the archers for the given URL --> Socre: 1.0

[[[[Adv]]]]: public static void [[proxy]] ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[proxy]] ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void [[archers]] ( URI [[oppenheim]] ) { if ( [[oppenheim]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[archers]] ( new ProxySpecification ( [[oppenheim]] . getHost ( ) , [[oppenheim]] . getPort ( ) , [[oppenheim]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 234 ---------------------------------------------
Sets default encoding charset . --> Configure this encoder config . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[birdcage]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 235 ---------------------------------------------
Create an NTLMuth scheme for the given user name and password . --> Creates an NTLMuthScheme for the given user name --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String [[password]] , String workstation , String [[domain]] ) { final NTLMAuthScheme scheme = new NTLMAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[password]] ) ; scheme . setWorkstation ( workstation ) ; scheme . setDomain ( [[domain]] ) ; return scheme ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String [[alternatives]] , String workstation , String [[counsellor]] ) { final NTLMAuthScheme scheme = new NTLMAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[alternatives]] ) ; scheme . setWorkstation ( workstation ) ; scheme . setDomain ( [[counsellor]] ) ; return scheme ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 236 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 157 / 77 / 2 / 236:  24%|██▎       | 236/1000 [14:59<48:31,  3.81s/it][Succeeded / Failed / Skipped / Total] 157 / 77 / 2 / 236:  24%|██▎       | 237/1000 [14:59<48:17,  3.80s/it][Succeeded / Failed / Skipped / Total] 158 / 77 / 2 / 237:  24%|██▎       | 237/1000 [14:59<48:17,  3.80s/it][Succeeded / Failed / Skipped / Total] 158 / 77 / 2 / 237:  24%|██▍       | 238/1000 [15:01<48:07,  3.79s/it][Succeeded / Failed / Skipped / Total] 159 / 77 / 2 / 238:  24%|██▍       | 238/1000 [15:01<48:07,  3.79s/it][Succeeded / Failed / Skipped / Total] 159 / 77 / 2 / 238:  24%|██▍       | 239/1000 [15:03<47:55,  3.78s/it][Succeeded / Failed / Skipped / Total] 160 / 77 / 2 / 239:  24%|██▍       | 239/1000 [15:03<47:55,  3.78s/it][Succeeded / Failed / Skipped / Total] 160 / 77 / 2 / 239:  24%|██▍       | 240/1000 [15:07<47:52,  3.78s/it][Succeeded / Failed / Skipped / Total] 161 / 77 / 2 / 240:  24%|██▍       | 240/1000 [15:07<47:52,  3.78s/it][Succeeded / Failed / Skipped / Total] 161 / 77 / 2 / 240:  24%|██▍       | 241/1000 [15:10<47:45,  3.78s/it][Succeeded / Failed / Skipped / Total] 162 / 77 / 2 / 241:  24%|██▍       | 241/1000 [15:10<47:45,  3.78s/it][Succeeded / Failed / Skipped / Total] 162 / 77 / 2 / 241:  24%|██▍       | 242/1000 [15:11<47:35,  3.77s/it][Succeeded / Failed / Skipped / Total] 163 / 77 / 2 / 242:  24%|██▍       | 242/1000 [15:11<47:35,  3.77s/it][Succeeded / Failed / Skipped / Total] 163 / 77 / 2 / 242:  24%|██▍       | 243/1000 [15:11<47:20,  3.75s/it]Configures the RestAssuredConfig with redirect . --> Delegate to a REST endpoint --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredConfig [[redirect]] ( RedirectConfig [[redirectConfig]] ) { notNull ( [[redirectConfig]] , "Redirect config" ) ; return new RestAssuredConfig ( [[redirectConfig]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig [[deleon]] ( RedirectConfig [[responds]] ) { notNull ( [[responds]] , "Redirect config" ) ; return new RestAssuredConfig ( [[responds]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 237 ---------------------------------------------
Given a distinguished name return the full distinguished name . --> zurge futures --> Socre: 1.0

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName [[dn]] , Context [[baseCtx]] ) throws NamingException { DistinguishedName [[baseDn]] = new DistinguishedName ( [[baseCtx]] . getNameInNamespace ( ) ) ; if ( [[dn]] . contains ( [[baseDn]] ) ) { return [[dn]] ; } [[baseDn]] . append ( [[dn]] ) ; return [[baseDn]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[zurich]] ( DistinguishedName [[futures]] , Context [[forceful]] ) throws NamingException { DistinguishedName [[announcement]] = new DistinguishedName ( [[forceful]] . getNameInNamespace ( ) ) ; if ( [[futures]] . contains ( [[announcement]] ) ) { return [[futures]] ; } [[announcement]] . append ( [[futures]] ) ; return [[announcement]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 238 ---------------------------------------------
The Jackson object mapperFactory --> Configure Jackson ObjectMapperFactory --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig jaxbObjectMapperFactory ( JAXBObjectMapperFactory [[jaxbObjectMapperFactory]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig jaxbObjectMapperFactory ( JAXBObjectMapperFactory [[calms]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 239 ---------------------------------------------
Sets the log config . --> Creates a new RestAssuredMock object --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig logConfig ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[unfounded]] ( LogConfig logConfig ) { notNull ( [[unfounded]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[unfounded]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 240 ---------------------------------------------
Sets the restured mock for the session config . --> Returns a new RestAssuredMock object --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sessionConfig]] ( SessionConfig sessionConfig ) { notNull ( [[sessionConfig]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[sessionConfig]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[junk]] ( SessionConfig sessionConfig ) { notNull ( [[junk]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[junk]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 241 ---------------------------------------------
Create a new RestAssuredMockConfig from the given JsonConfig . --> Create a RestAssuredMockConfig object --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig jsonConfig ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[tenzin]] ( JsonConfig jsonConfig ) { notNull ( [[tenzin]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[tenzin]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 242 ---------------------------------------------
Sets the default object mapper type . --> Returns a new instance of ObjectMapperConfig --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[defaultObjectMapperType]] ( ObjectMapperType [[defaultObjectMapperType]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[defaultObjectMapperType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig [[frodo]] ( ObjectMapperType [[amazons]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[frodo]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 243 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 163 / 77 / 3 / 243:  24%|██▍       | 243/1000 [15:11<47:20,  3.75s/it][Succeeded / Failed / Skipped / Total] 163 / 77 / 3 / 243:  24%|██▍       | 244/1000 [15:12<47:06,  3.74s/it][Succeeded / Failed / Skipped / Total] 164 / 77 / 3 / 244:  24%|██▍       | 244/1000 [15:12<47:06,  3.74s/it][Succeeded / Failed / Skipped / Total] 164 / 77 / 3 / 244:  24%|██▍       | 245/1000 [15:12<46:52,  3.72s/it][Succeeded / Failed / Skipped / Total] 165 / 77 / 3 / 245:  24%|██▍       | 245/1000 [15:12<46:52,  3.72s/it][Succeeded / Failed / Skipped / Total] 165 / 77 / 3 / 245:  25%|██▍       | 246/1000 [15:13<46:40,  3.71s/it][Succeeded / Failed / Skipped / Total] 165 / 78 / 3 / 246:  25%|██▍       | 246/1000 [15:13<46:40,  3.71s/it][Succeeded / Failed / Skipped / Total] 165 / 78 / 3 / 246:  25%|██▍       | 247/1000 [15:17<46:38,  3.72s/it][Succeeded / Failed / Skipped / Total] 166 / 78 / 3 / 247:  25%|██▍       | 247/1000 [15:17<46:38,  3.72s/it][Succeeded / Failed / Skipped / Total] 166 / 78 / 3 / 247:  25%|██▍       | 248/1000 [15:19<46:29,  3.71s/it][Succeeded / Failed / Skipped / Total] 167 / 78 / 3 / 248:  25%|██▍       | 248/1000 [15:19<46:29,  3.71s/it][Succeeded / Failed / Skipped / Total] 167 / 78 / 3 / 248:  25%|██▍       | 249/1000 [15:21<46:20,  3.70s/it][Succeeded / Failed / Skipped / Total] 167 / 79 / 3 / 249:  25%|██▍       | 249/1000 [15:21<46:20,  3.70s/it][Succeeded / Failed / Skipped / Total] 168 / 79 / 3 / 250:  25%|██▌       | 250/1000 [15:22<46:06,  3.69s/it]Creates a new RestAssuredMock object . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig mockMvcConfig ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 244 ---------------------------------------------
Sets the RestAssured configuration from xml config . --> Factory method for RestAssured MockConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig xmlConfig ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[lil]] ( XmlConfig xmlConfig ) { notNull ( [[lil]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[lil]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 245 ---------------------------------------------
Sets the restured config . --> Creates an encapsured mock configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[encoderConfig]] ( EncoderConfig encoderConfig ) { notNull ( [[encoderConfig]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[encoderConfig]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[atma]] ( EncoderConfig encoderConfig ) { notNull ( [[atma]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[atma]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 246 ---------------------------------------------
Creates a basic authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String userName , String [[password]] ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[password]] ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[resurrect]] ( String userName , String [[hoodoo]] ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[hoodoo]] ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 247 ---------------------------------------------
Sets the REST MvcConfig . --> Creates a new instance of RestAssuredMock configured with this configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[headerConfig]] ( HeaderConfig headerConfig ) { notNull ( [[headerConfig]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[headerConfig]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[agitating]] ( HeaderConfig headerConfig ) { notNull ( [[agitating]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[agitating]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 248 ---------------------------------------------
Sets the RestAssuredM config . --> Binding configured with BatchConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[asyncConfig]] ( AsyncConfig asyncConfig ) { notNull ( [[asyncConfig]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[asyncConfig]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[b]] ( AsyncConfig asyncConfig ) { notNull ( [[b]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[b]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 249 ---------------------------------------------
Allow all host names to be allowed . --> [[[FAILED]]]

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[compound]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 250 ---------------------------------------------
Sets the RestAssuredMapper config . --> Create an instance of RestAssuredMockConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig [[objectMapperConfig]] ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[aditya]] ( ObjectMapperConfig [[beaufort]] ) { notNull ( [[aditya]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[aditya]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 251 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 169 / 79 / 3 / 251:  25%|██▌       | 251/1000 [15:22<45:51,  3.67s/it][Succeeded / Failed / Skipped / Total] 169 / 79 / 3 / 251:  25%|██▌       | 252/1000 [15:22<45:37,  3.66s/it][Succeeded / Failed / Skipped / Total] 170 / 79 / 3 / 252:  25%|██▌       | 252/1000 [15:22<45:37,  3.66s/it][Succeeded / Failed / Skipped / Total] 171 / 79 / 3 / 253:  25%|██▌       | 253/1000 [15:22<45:23,  3.65s/it][Succeeded / Failed / Skipped / Total] 172 / 79 / 3 / 254:  25%|██▌       | 254/1000 [15:30<45:31,  3.66s/it][Succeeded / Failed / Skipped / Total] 172 / 79 / 3 / 254:  26%|██▌       | 255/1000 [15:33<45:27,  3.66s/it][Succeeded / Failed / Skipped / Total] 172 / 80 / 3 / 255:  26%|██▌       | 255/1000 [15:33<45:27,  3.66s/it][Succeeded / Failed / Skipped / Total] 172 / 80 / 3 / 255:  26%|██▌       | 256/1000 [15:37<45:25,  3.66s/it][Succeeded / Failed / Skipped / Total] 173 / 80 / 3 / 256:  26%|██▌       | 256/1000 [15:37<45:25,  3.66s/it][Succeeded / Failed / Skipped / Total] 173 / 80 / 3 / 256:  26%|██▌       | 257/1000 [15:39<45:15,  3.66s/it][Succeeded / Failed / Skipped / Total] 174 / 80 / 3 / 257:  26%|██▌       | 257/1000 [15:39<45:15,  3.66s/it][Succeeded / Failed / Skipped / Total] 174 / 80 / 3 / 257:  26%|██▌       | 258/1000 [15:42<45:11,  3.65s/it]Sets the restured matcher configuration . --> Sets crosby configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[matcherConfig]] ( MatcherConfig matcherConfig ) { notNull ( [[matcherConfig]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[matcherConfig]] ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[crosby]] ( MatcherConfig matcherConfig ) { notNull ( [[crosby]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[crosby]] ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 252 ---------------------------------------------
Sets the mock MvcConfig . --> Creates an instance configured for RestAssociation configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[multiPartConfig]] ( MultiPartConfig multiPartConfig ) { notNull ( [[multiPartConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[multiPartConfig]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[anthem]] ( MultiPartConfig multiPartConfig ) { notNull ( [[anthem]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[anthem]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 253 ---------------------------------------------
Create a new RestAssuredMock config object . --> Create a new RestAssuredConfig based on configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[paramConfig]] ( MockMvcParamConfig paramConfig ) { notNull ( [[paramConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[paramConfig]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[anvil]] ( MockMvcParamConfig paramConfig ) { notNull ( [[anvil]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[anvil]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 254 ---------------------------------------------
Set the proxy to use . --> Called when a client is proxied --> Socre: 1.0

[[[[Adv]]]]: public void [[setProxy]] ( String host , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[crooner]] ( String host , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 255 ---------------------------------------------
Creates an authentication scheme for the given user name and password . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme form ( String userName , String [[password]] , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( [[password]] == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[password]] ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme form ( String userName , String [[tapeworm]] , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( [[tapeworm]] == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[tapeworm]] ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 256 ---------------------------------------------
Declare an XMLPath configuration . --> Create a new XmlPathConfig instance --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > [[namespacesToDeclare]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[namespacesToDeclare]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[cazzo]] ( Map < String , String > [[canard]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[canard]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 257 ---------------------------------------------
Issues HTTP request . --> Perform a check --> Socre: 1.0

[[[[Adv]]]]: public Object [[request]] ( String method , boolean hasBody , Closure [[configClosure]] ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , [[configClosure]] ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object [[checkerboard]] ( String method , boolean hasBody , Closure [[blaspheme]] ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , [[blaspheme]] ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 258 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 175 / 80 / 3 / 258:  26%|██▌       | 258/1000 [15:42<45:11,  3.65s/it][Succeeded / Failed / Skipped / Total] 175 / 80 / 3 / 258:  26%|██▌       | 259/1000 [15:45<45:06,  3.65s/it][Succeeded / Failed / Skipped / Total] 175 / 81 / 3 / 259:  26%|██▌       | 259/1000 [15:45<45:06,  3.65s/it][Succeeded / Failed / Skipped / Total] 175 / 81 / 3 / 259:  26%|██▌       | 260/1000 [15:49<45:02,  3.65s/it][Succeeded / Failed / Skipped / Total] 175 / 82 / 3 / 260:  26%|██▌       | 260/1000 [15:49<45:02,  3.65s/it][Succeeded / Failed / Skipped / Total] 175 / 82 / 3 / 260:  26%|██▌       | 261/1000 [15:51<44:54,  3.65s/it][Succeeded / Failed / Skipped / Total] 176 / 82 / 3 / 261:  26%|██▌       | 261/1000 [15:51<44:54,  3.65s/it][Succeeded / Failed / Skipped / Total] 177 / 82 / 3 / 262:  26%|██▌       | 262/1000 [15:51<44:41,  3.63s/it][Succeeded / Failed / Skipped / Total] 177 / 82 / 3 / 262:  26%|██▋       | 263/1000 [16:00<44:52,  3.65s/it][Succeeded / Failed / Skipped / Total] 177 / 83 / 3 / 263:  26%|██▋       | 263/1000 [16:00<44:52,  3.65s/it][Succeeded / Failed / Skipped / Total] 177 / 84 / 3 / 264:  26%|██▋       | 264/1000 [16:01<44:40,  3.64s/it][Succeeded / Failed / Skipped / Total] 177 / 84 / 3 / 264:  26%|██▋       | 265/1000 [16:03<44:32,  3.64s/it][Succeeded / Failed / Skipped / Total] 178 / 84 / 3 / 265:  26%|██▋       | 265/1000 [16:03<44:32,  3.64s/it]Sets the request headers . --> mergeHeaders --> Socre: 1.0

[[[[Adv]]]]: public void [[setHeaders]] ( Map < ? , ? > [[headers]] ) { this . defaultRequestHeaders . clear ( ) ; if ( [[headers]] == null ) return ; for ( Object [[key]] : [[headers]] . keySet ( ) ) { Object val = [[headers]] . get ( [[key]] ) ; if ( val == null ) continue ; this . defaultRequestHeaders . put ( [[key]] . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void [[blaspheme]] ( Map < ? , ? > [[bonet]] ) { this . defaultRequestHeaders . clear ( ) ; if ( [[bonet]] == null ) return ; for ( Object [[deadline]] : [[bonet]] . keySet ( ) ) { Object val = [[bonet]] . get ( [[deadline]] ) ; if ( val == null ) continue ; this . defaultRequestHeaders . put ( [[deadline]] . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 259 ---------------------------------------------
Reset the configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[refilled]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 260 ---------------------------------------------
Sets a multi - part header . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String name , String value ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[schoolboy]] ( String name , String value ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 261 ---------------------------------------------
Set basic auth credentials . --> Sakucade method --> Socre: 1.0

[[[[Adv]]]]: public void [[basic]] ( String [[host]] , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[host]] , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[sakuma]] ( String [[assassination]] , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[assassination]] , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 262 ---------------------------------------------
Sets the response header . --> Sets the alert headers . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder [[setHeader]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder [[alerts]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 263 ---------------------------------------------
Build the REST response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response [[build]] ( ) { final int [[statusCode]] = restAssuredResponse . statusCode ( ) ; if ( [[statusCode]] < 100 || [[statusCode]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[statusCode]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[brah]] ( ) { final int [[ganda]] = restAssuredResponse . statusCode ( ) ; if ( [[ganda]] < 100 || [[ganda]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[ganda]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 264 ---------------------------------------------
Sets the control name . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String controlName ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . controlName = [[controlName]] ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[collars]] ( String controlName ) { Validate . notEmpty ( [[collars]] , "Control name cannot be empty" ) ; this . controlName = [[collars]] ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 265 ---------------------------------------------
Create a new Headers instance with the given header . --> zapHeaders --> Socre: 1.0

[[[[Adv]]]]: public static Headers [[headers]] ( Header [[header]] , Header ... additionalHeaders ) { notNull ( [[header]] , "Header" ) ; final List < Header > [[headerList]] = new LinkedList < Header > ( ) ; [[headerList]] . add ( [[header]] ) ; if ( additionalHeaders != null ) { Collections . addAll ( [[headerList]] , additionalHeaders ) ; } return new Headers ( [[headerList]] ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers [[zaphod]] ( Header [[finito]] , Header ... additionalHeaders ) { notNull ( [[finito]] , "Header" ) ; final List < Header > [[bacterium]] = new LinkedList < Header > ( ) ; [[bacterium]] . add ( [[finito]] ) ; if ( additionalHeaders != null ) { Collections . addAll ( [[bacterium]] , additionalHeaders ) ; } return new Headers ( [[bacterium]] ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 266 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 178 / 85 / 3 / 266:  27%|██▋       | 266/1000 [16:06<44:26,  3.63s/it][Succeeded / Failed / Skipped / Total] 178 / 85 / 3 / 266:  27%|██▋       | 267/1000 [16:13<44:32,  3.65s/it][Succeeded / Failed / Skipped / Total] 178 / 86 / 3 / 267:  27%|██▋       | 267/1000 [16:13<44:32,  3.65s/it][Succeeded / Failed / Skipped / Total] 178 / 87 / 3 / 268:  27%|██▋       | 268/1000 [16:13<44:18,  3.63s/it][Succeeded / Failed / Skipped / Total] 178 / 87 / 3 / 268:  27%|██▋       | 269/1000 [16:13<44:05,  3.62s/it][Succeeded / Failed / Skipped / Total] 179 / 87 / 3 / 269:  27%|██▋       | 269/1000 [16:13<44:05,  3.62s/it][Succeeded / Failed / Skipped / Total] 179 / 88 / 3 / 270:  27%|██▋       | 270/1000 [16:18<44:06,  3.63s/it][Succeeded / Failed / Skipped / Total] 179 / 88 / 3 / 270:  27%|██▋       | 271/1000 [16:22<44:02,  3.62s/it][Succeeded / Failed / Skipped / Total] 179 / 89 / 3 / 271:  27%|██▋       | 271/1000 [16:22<44:02,  3.62s/it][Succeeded / Failed / Skipped / Total] 179 / 90 / 3 / 272:  27%|██▋       | 272/1000 [16:22<43:49,  3.61s/it][Succeeded / Failed / Skipped / Total] 179 / 90 / 3 / 272:  27%|██▋       | 273/1000 [16:26<43:46,  3.61s/it][Succeeded / Failed / Skipped / Total] 179 / 91 / 3 / 273:  27%|██▋       | 273/1000 [16:26<43:46,  3.61s/it][Succeeded / Failed / Skipped / Total] 179 / 92 / 3 / 274:  27%|██▋       | 274/1000 [16:28<43:39,  3.61s/it][Succeeded / Failed / Skipped / Total] 179 / 92 / 3 / 274:  28%|██▊       | 275/1000 [16:34<43:42,  3.62s/it][Succeeded / Failed / Skipped / Total] 179 / 93 / 3 / 275:  28%|██▊       | 275/1000 [16:34<43:42,  3.62s/it]Declares a namespace with the given prefix . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig declaredNamespace ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > [[updatedNamespaces]] = new HashMap < String , String > ( declaredNamespaces ) ; [[updatedNamespaces]] . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[updatedNamespaces]] , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig declaredNamespace ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > [[mulberry]] = new HashMap < String , String > ( declaredNamespaces ) ; [[mulberry]] . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[mulberry]] , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 267 ---------------------------------------------
Applies a cookie to the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[comment]] ( Matcher < ? super String > [[commentMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[commentMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[boldness]] ( Matcher < ? super String > [[flourishes]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[flourishes]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 268 ---------------------------------------------
Matches cookie by matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[keyholes]] ( Matcher < ? super String > [[semiramis]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[semiramis]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
Returns a cookie matcher that matches expiry date . --> Shortcut for testing --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > [[expiryDateMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[expiryDateMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[caprica]] ( Matcher < ? super Date > [[trippy]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[trippy]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 270 ---------------------------------------------
Sets the NTLM credentials . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[ntlm]] ( String host , int [[port]] , String user , String pass , String [[workstation]] , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[port]] ) , new NTCredentials ( user , pass , [[workstation]] , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[barstow]] ( String host , int [[attract]] , String user , String pass , String [[irreverent]] , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[attract]] ) , new NTCredentials ( user , pass , [[irreverent]] , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 271 ---------------------------------------------
Matches cookie matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[bettin]] ( Matcher < ? super String > [[versace]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[versace]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 272 ---------------------------------------------
Applies a cookie to cookie matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[lf]] ( Matcher < ? super String > [[drapery]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[drapery]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 273 ---------------------------------------------
Applies a secured cookie to the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[secured]] ( Matcher < ? super Boolean > [[securedMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securedMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[economists]] ( Matcher < ? super Boolean > [[vibrato]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[vibrato]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Creates a cookie matcher that matches http only . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > [[httpOnlyMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[httpOnlyMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[wag]] ( Matcher < ? super Boolean > [[haydar]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[haydar]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 275 ---------------------------------------------
Applies a cookie to the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[howitzers]] ( Matcher < ? super Integer > [[praxis]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[praxis]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
[Succeeded / Failed / Skipped / Total] 179 / 94 / 3 / 276:  28%|██▊       | 276/1000 [16:35<43:32,  3.61s/it][Succeeded / Failed / Skipped / Total] 179 / 94 / 3 / 276:  28%|██▊       | 277/1000 [16:38<43:25,  3.60s/it][Succeeded / Failed / Skipped / Total] 180 / 94 / 3 / 277:  28%|██▊       | 277/1000 [16:38<43:25,  3.60s/it][Succeeded / Failed / Skipped / Total] 180 / 95 / 3 / 278:  28%|██▊       | 278/1000 [16:40<43:19,  3.60s/it][Succeeded / Failed / Skipped / Total] 180 / 95 / 3 / 278:  28%|██▊       | 279/1000 [16:41<43:07,  3.59s/it][Succeeded / Failed / Skipped / Total] 180 / 96 / 3 / 279:  28%|██▊       | 279/1000 [16:41<43:07,  3.59s/it][Succeeded / Failed / Skipped / Total] 181 / 96 / 3 / 280:  28%|██▊       | 280/1000 [16:42<42:58,  3.58s/it][Succeeded / Failed / Skipped / Total] 181 / 96 / 3 / 280:  28%|██▊       | 281/1000 [16:42<42:45,  3.57s/it][Succeeded / Failed / Skipped / Total] 181 / 97 / 3 / 281:  28%|██▊       | 281/1000 [16:42<42:45,  3.57s/it][Succeeded / Failed / Skipped / Total] 182 / 97 / 3 / 282:  28%|██▊       | 282/1000 [16:43<42:34,  3.56s/it][Succeeded / Failed / Skipped / Total] 182 / 97 / 3 / 282:  28%|██▊       | 283/1000 [16:43<42:23,  3.55s/it][Succeeded / Failed / Skipped / Total] 183 / 97 / 3 / 283:  28%|██▊       | 283/1000 [16:43<42:23,  3.55s/it][Succeeded / Failed / Skipped / Total] 184 / 97 / 3 / 284:  28%|██▊       | 284/1000 [16:47<42:20,  3.55s/it][Succeeded / Failed / Skipped / Total] 184 / 97 / 3 / 284:  28%|██▊       | 285/1000 [16:49<42:11,  3.54s/it][Succeeded / Failed / Skipped / Total] 185 / 97 / 3 / 285:  28%|██▊       | 285/1000 [16:49<42:11,  3.54s/it]--------------------------------------------- Result 276 ---------------------------------------------
Creates a cookie matcher that matches the max age of the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[houlihan]] ( Matcher < ? super Integer > [[beresford]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[beresford]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 277 ---------------------------------------------
Configures the JsonPathConfig for a number . --> Default implementation for abigail --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[numberReturnType]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[numberReturnType]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig [[abigail]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[abigail]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 278 ---------------------------------------------
Returns a proxy specification for the specified host . --> [[[FAILED]]]

[[[[Adv]]]]: public ProxySpecification [[withHost]] ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification [[merge]] ( String [[laps]] ) { return new ProxySpecification ( [[laps]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 279 ---------------------------------------------
Expect the given header with the given expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( [[headerName]] , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder [[subtraction]] ( String [[baccala]] , Matcher < String > [[cheju]] ) { spec . header ( [[baccala]] , [[cheju]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 280 ---------------------------------------------
Sets the default logging . --> Enable or disable bullitt --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream printStream ) { return new LogConfig ( printStream , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[bullitt]] ( PrintStream printStream ) { return new LogConfig ( printStream , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 281 ---------------------------------------------
Expect a header to be expected . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , String [[expectedValue]] ) { spec . header ( [[headerName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[bacchus]] ( String [[warrior]] , String [[indecently]] ) { spec . header ( [[warrior]] , [[indecently]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 282 ---------------------------------------------
Expect a cookie with expected value . --> Wagstaffername --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String [[cookieName]] , String [[expectedValue]] ) { spec . cookie ( [[cookieName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[wagstaff]] ( String [[apeman]] , String [[deniz]] ) { spec . cookie ( [[apeman]] , [[deniz]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 283 ---------------------------------------------
Enable logging of request and response . --> Obtain a LogConfig object --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[enableLoggingOfRequestAndResponseIfValidationFails]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig [[frodo]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 284 ---------------------------------------------
Sets the default parser type . --> Configure a JsonPathConfig --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[arable]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[arable]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 285 ---------------------------------------------
Default configuration . --> Configures this MultiPartition --> Socre: 1.0

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[arousing]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[arousing]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 286 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 186 / 97 / 3 / 286:  29%|██▊       | 286/1000 [16:54<42:12,  3.55s/it][Succeeded / Failed / Skipped / Total] 186 / 97 / 3 / 286:  29%|██▊       | 287/1000 [16:56<42:04,  3.54s/it][Succeeded / Failed / Skipped / Total] 187 / 97 / 3 / 287:  29%|██▊       | 287/1000 [16:56<42:04,  3.54s/it][Succeeded / Failed / Skipped / Total] 188 / 97 / 3 / 288:  29%|██▉       | 288/1000 [16:56<41:52,  3.53s/it][Succeeded / Failed / Skipped / Total] 188 / 97 / 3 / 288:  29%|██▉       | 289/1000 [16:57<41:43,  3.52s/it][Succeeded / Failed / Skipped / Total] 189 / 97 / 3 / 289:  29%|██▉       | 289/1000 [16:57<41:43,  3.52s/it][Succeeded / Failed / Skipped / Total] 190 / 97 / 3 / 290:  29%|██▉       | 290/1000 [16:59<41:35,  3.51s/it][Succeeded / Failed / Skipped / Total] 190 / 97 / 3 / 290:  29%|██▉       | 291/1000 [17:04<41:37,  3.52s/it][Succeeded / Failed / Skipped / Total] 191 / 97 / 3 / 291:  29%|██▉       | 291/1000 [17:04<41:37,  3.52s/it][Succeeded / Failed / Skipped / Total] 191 / 98 / 3 / 292:  29%|██▉       | 292/1000 [17:08<41:33,  3.52s/it][Succeeded / Failed / Skipped / Total] 191 / 98 / 3 / 292:  29%|██▉       | 293/1000 [17:12<41:31,  3.52s/it][Succeeded / Failed / Skipped / Total] 192 / 98 / 3 / 293:  29%|██▉       | 293/1000 [17:12<41:31,  3.52s/it][Succeeded / Failed / Skipped / Total] 193 / 98 / 3 / 294:  29%|██▉       | 294/1000 [17:12<41:19,  3.51s/it][Succeeded / Failed / Skipped / Total] 193 / 98 / 3 / 294:  30%|██▉       | 295/1000 [17:13<41:10,  3.50s/it][Succeeded / Failed / Skipped / Total] 194 / 98 / 3 / 295:  30%|██▉       | 295/1000 [17:13<41:10,  3.50s/it][Succeeded / Failed / Skipped / Total] 194 / 99 / 3 / 296:  30%|██▉       | 296/1000 [17:13<40:58,  3.49s/it][Succeeded / Failed / Skipped / Total] 194 / 99 / 3 / 296:  30%|██▉       | 297/1000 [17:16<40:53,  3.49s/it]Creates a HttpRequestBase object based on the given URI and HTTP method . --> Create HttpRequestBase --> Socre: 1.0

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > [[type]] = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > [[kiyoshi]] = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 287 ---------------------------------------------
Adds an attribute to the request . --> Sets the drifters property . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addAttribute]] ( String [[attributeName]] , Object attributeValue ) { spec . attribute ( [[attributeName]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[drifters]] ( String [[absentee]] , Object attributeValue ) { spec . attribute ( [[absentee]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 288 ---------------------------------------------
Adds a header to the request . --> Premiere method . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String [[headerName]] , String headerValue ) { spec . header ( [[headerName]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[première]] ( String [[basking]] , String headerValue ) { spec . header ( [[basking]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 289 ---------------------------------------------
Add a result handler . --> Set atacama . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addResultHandlers]] ( ResultHandler [[resultHandler]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[resultHandler]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[atacama]] ( ResultHandler [[bordering]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[bordering]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 290 ---------------------------------------------
Sets the HttpClientFactory . --> Shared HttpClientConfig --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpClientFactory]] ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( [[httpClientFactory]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig [[sham]] ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( [[sham]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 291 ---------------------------------------------
Configures the Http MultipartMode . --> Borrowing a custom HttpClient instance --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[bboying]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[bboying]] , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 292 ---------------------------------------------
Adds a multi - part request . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String [[controlName]] , String contentBody , String mimeType ) { spec . multiPart ( [[controlName]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[responses]] ( String [[naiveté]] , String contentBody , String mimeType ) { spec . multiPart ( [[naiveté]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 293 ---------------------------------------------
Get int value . --> Falkor --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[falkor]] ( String [[butters]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 294 ---------------------------------------------
Returns the byte at the given path . --> Bearing in BOUR --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[banyon]] ( String [[hermit]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 295 ---------------------------------------------
Get short . --> Shortcut for arai --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[arai]] ( String [[advisedly]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 296 ---------------------------------------------
Sets a parameter for this HTTP client . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[HttpClientConfig]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( httpClientParams ) ; [[newParams]] . put ( parameterName , parameterValue ) ; return new [[HttpClientConfig]] ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > [[dopamine]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[mortuary]] = new HashMap < String , Object > ( httpClientParams ) ; [[mortuary]] . put ( parameterName , parameterValue ) ; return new [[dopamine]] ( httpClientFactory , [[mortuary]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 297 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 194 / 100 / 3 / 297:  30%|██▉       | 297/1000 [17:16<40:53,  3.49s/it][Succeeded / Failed / Skipped / Total] 195 / 100 / 3 / 298:  30%|██▉       | 298/1000 [17:21<40:53,  3.49s/it][Succeeded / Failed / Skipped / Total] 195 / 100 / 3 / 298:  30%|██▉       | 299/1000 [17:24<40:48,  3.49s/it][Succeeded / Failed / Skipped / Total] 196 / 100 / 3 / 299:  30%|██▉       | 299/1000 [17:24<40:48,  3.49s/it][Succeeded / Failed / Skipped / Total] 197 / 100 / 3 / 300:  30%|███       | 300/1000 [17:26<40:42,  3.49s/it][Succeeded / Failed / Skipped / Total] 197 / 100 / 3 / 300:  30%|███       | 301/1000 [17:27<40:32,  3.48s/it][Succeeded / Failed / Skipped / Total] 197 / 101 / 3 / 301:  30%|███       | 301/1000 [17:27<40:32,  3.48s/it][Succeeded / Failed / Skipped / Total] 198 / 101 / 3 / 302:  30%|███       | 302/1000 [17:33<40:34,  3.49s/it][Succeeded / Failed / Skipped / Total] 198 / 101 / 3 / 302:  30%|███       | 303/1000 [17:38<40:35,  3.49s/it][Succeeded / Failed / Skipped / Total] 199 / 101 / 3 / 303:  30%|███       | 303/1000 [17:38<40:35,  3.49s/it][Succeeded / Failed / Skipped / Total] 199 / 101 / 3 / 303:  30%|███       | 304/1000 [17:44<40:36,  3.50s/it][Succeeded / Failed / Skipped / Total] 200 / 101 / 3 / 304:  30%|███       | 304/1000 [17:44<40:36,  3.50s/it][Succeeded / Failed / Skipped / Total] 200 / 101 / 3 / 304:  30%|███       | 305/1000 [17:45<40:28,  3.49s/it][Succeeded / Failed / Skipped / Total] 201 / 101 / 3 / 305:  30%|███       | 305/1000 [17:45<40:28,  3.49s/it][Succeeded / Failed / Skipped / Total] 201 / 101 / 3 / 305:  31%|███       | 306/1000 [17:46<40:18,  3.49s/it][Succeeded / Failed / Skipped / Total] 201 / 102 / 3 / 306:  31%|███       | 306/1000 [17:46<40:18,  3.49s/it][Succeeded / Failed / Skipped / Total] 201 / 102 / 3 / 306:  31%|███       | 307/1000 [17:47<40:09,  3.48s/it][Succeeded / Failed / Skipped / Total] 201 / 103 / 3 / 307:  31%|███       | 307/1000 [17:47<40:09,  3.48s/it][Succeeded / Failed / Skipped / Total] 201 / 103 / 3 / 307:  31%|███       | 308/1000 [17:50<40:04,  3.47s/it]Gets a value . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion [[jsonAssertion]] = createJsonAssertion ( path , params ) ; final Object [[json]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) [[jsonAssertion]] . getResult ( [[json]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[chime]] > [[chime]] get ( String path ) { final JSONAssertion [[pazuzu]] = createJsonAssertion ( path , params ) ; final Object [[hypotenuse]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[chime]] ) [[pazuzu]] . getResult ( [[hypotenuse]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 298 ---------------------------------------------
Get a float value . --> Liefert einen ziche zurueck --> Socre: 1.0

[[[[Adv]]]]: public float [[getFloat]] ( String path ) { final Object [[value]] = get ( path ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[pastiche]] ( String path ) { final Object [[anzio]] = get ( path ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 299 ---------------------------------------------
Sets the body of the request . --> set body --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object object , ObjectMapper [[mapper]] ) { spec . body ( object , [[mapper]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object object , ObjectMapper [[labour]] ) { spec . body ( object , [[labour]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 300 ---------------------------------------------
Get a double . --> Gets tippet --> Socre: 1.0

[[[[Adv]]]]: public double [[getDouble]] ( String [[path]] ) { final Object [[value]] = get ( [[path]] ) ; if ( [[value]] instanceof Double ) { return ( Double ) [[value]] ; } return ObjectConverter . convertObjectTo ( [[value]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[tippet]] ( String [[feliz]] ) { final Object [[canasta]] = get ( [[feliz]] ) ; if ( [[canasta]] instanceof Double ) { return ( Double ) [[canasta]] ; } return ObjectConverter . convertObjectTo ( [[canasta]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 301 ---------------------------------------------
Gets long . --> [[[FAILED]]]

[[[[Adv]]]]: public long [[getLong]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[triplicate]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 302 ---------------------------------------------
Gets the value of the specified type as a List . --> Scrader implementation --> Socre: 1.0

[[[[Adv]]]]: public < T > List < T > [[getList]] ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T [[e]] ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > [[schrader]] ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T [[belike]] ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 303 ---------------------------------------------
Get a map value . --> getter for earplugs --> Socre: 1.0

[[[[Adv]]]]: public < [[K]] , V > Map < [[K]] , V > [[getMap]] ( String [[path]] ) { return get ( [[path]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < [[breached]] , V > Map < [[breached]] , V > [[earplugs]] ( String [[wagstaff]] ) { return get ( [[wagstaff]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 304 ---------------------------------------------
Writes the response to the output stream . --> log response to output stream --> Socre: 1.0

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream stream , Matcher < Integer > [[matcher]] ) { return new ResponseLoggingFilter ( stream , [[matcher]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream stream , Matcher < Integer > [[cortland]] ) { return new ResponseLoggingFilter ( stream , [[cortland]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 305 ---------------------------------------------
Adds a parameter to the request . --> Http bridget --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Collection < ? > [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[bridgette]] ( String [[macao]] , Collection < ? > [[bulgur]] ) { spec . param ( [[macao]] , [[bulgur]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 306 ---------------------------------------------
Add a parameter to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Object ... [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[accident]] ( String [[bucharest]] , Object ... [[renown]] ) { spec . param ( [[bucharest]] , [[renown]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 307 ---------------------------------------------
Adds a cookie header . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String [[key]] , Object value , Object ... [[cookieNameValuePairs]] ) { spec . cookie ( [[key]] , value , [[cookieNameValuePairs]] ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[arai]] ( String [[deniz]] , Object value , Object ... [[dordogne]] ) { spec . cookie ( [[deniz]] , value , [[dordogne]] ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 308 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 201 / 104 / 3 / 308:  31%|███       | 308/1000 [17:50<40:04,  3.47s/it][Succeeded / Failed / Skipped / Total] 201 / 104 / 3 / 308:  31%|███       | 309/1000 [17:52<39:58,  3.47s/it][Succeeded / Failed / Skipped / Total] 202 / 104 / 3 / 309:  31%|███       | 309/1000 [17:52<39:58,  3.47s/it][Succeeded / Failed / Skipped / Total] 202 / 104 / 3 / 309:  31%|███       | 310/1000 [17:57<39:59,  3.48s/it][Succeeded / Failed / Skipped / Total] 203 / 104 / 3 / 310:  31%|███       | 310/1000 [17:57<39:59,  3.48s/it][Succeeded / Failed / Skipped / Total] 203 / 104 / 3 / 310:  31%|███       | 311/1000 [18:01<39:56,  3.48s/it][Succeeded / Failed / Skipped / Total] 204 / 104 / 3 / 311:  31%|███       | 311/1000 [18:01<39:56,  3.48s/it][Succeeded / Failed / Skipped / Total] 204 / 104 / 3 / 311:  31%|███       | 312/1000 [18:02<39:47,  3.47s/it][Succeeded / Failed / Skipped / Total] 204 / 105 / 3 / 312:  31%|███       | 312/1000 [18:02<39:47,  3.47s/it][Succeeded / Failed / Skipped / Total] 204 / 105 / 3 / 312:  31%|███▏      | 313/1000 [18:08<39:49,  3.48s/it][Succeeded / Failed / Skipped / Total] 204 / 106 / 3 / 313:  31%|███▏      | 313/1000 [18:08<39:49,  3.48s/it][Succeeded / Failed / Skipped / Total] 204 / 106 / 3 / 313:  31%|███▏      | 314/1000 [18:14<39:51,  3.49s/it][Succeeded / Failed / Skipped / Total] 205 / 106 / 3 / 314:  31%|███▏      | 314/1000 [18:14<39:51,  3.49s/it][Succeeded / Failed / Skipped / Total] 205 / 106 / 3 / 314:  32%|███▏      | 315/1000 [18:17<39:47,  3.49s/it][Succeeded / Failed / Skipped / Total] 205 / 107 / 3 / 315:  32%|███▏      | 315/1000 [18:17<39:47,  3.49s/it][Succeeded / Failed / Skipped / Total] 205 / 107 / 3 / 315:  32%|███▏      | 316/1000 [18:18<39:38,  3.48s/it]Create a new configuration update strategy . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[sandman]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 309 ---------------------------------------------
Clean up data from the backing map . --> clean up for garbage collection --> Socre: 1.0

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource [[keyAndSource]] : keysAndSources ) { Multiset < Object > set = backingMap . get ( [[keyAndSource]] . key ) ; if ( set != null ) { set . remove ( [[keyAndSource]] . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( [[keyAndSource]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource [[crimean]] : keysAndSources ) { Multiset < Object > set = backingMap . get ( [[crimean]] . key ) ; if ( set != null ) { set . remove ( [[crimean]] . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( [[crimean]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 310 ---------------------------------------------
Removes a failed binding . --> Removes an InjectionPoint --> Socre: 1.0

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[impertinence]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 311 ---------------------------------------------
Convert a constant string representation to a constant binding . --> Returns BindingImpl --> Socre: 1.0

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > [[key]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[compelled]] ( Key < T > [[saber]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 312 ---------------------------------------------
Index bindings for explicit bindings . --> [[[FAILED]]]

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > [[binding]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[binding]] . getKey ( ) . getTypeLiteral ( ) , [[binding]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[blinkers]] ( ) { for ( Binding < ? > [[raspberry]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[raspberry]] . getKey ( ) . getTypeLiteral ( ) , [[raspberry]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 313 ---------------------------------------------
Gets the internal dependencies of the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > [[binding]] ) { if ( [[binding]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[binding]] ) . getInternalDependencies ( ) ; } else if ( [[binding]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[binding]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[triplicate]] ( BindingImpl < ? > [[frank]] ) { if ( [[frank]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[frank]] ) . getInternalDependencies ( ) ; } else if ( [[frank]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[frank]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 314 ---------------------------------------------
Adds additional cookies to the request . --> Concatenates two interceptors --> Socre: 1.0

[[[[Adv]]]]: public static Cookies [[cookies]] ( Cookie cookie , Cookie ... [[additionalCookies]] ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > [[cookieList]] = new LinkedList < Cookie > ( ) ; [[cookieList]] . add ( cookie ) ; Collections . addAll ( [[cookieList]] , [[additionalCookies]] ) ; return new Cookies ( [[cookieList]] ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies [[laika]] ( Cookie cookie , Cookie ... [[optic]] ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > [[levi]] = new LinkedList < Cookie > ( ) ; [[levi]] . add ( cookie ) ; Collections . addAll ( [[levi]] , [[optic]] ) ; return new Cookies ( [[levi]] ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 315 ---------------------------------------------
Gets the value of the given path as a given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] getObject ( String path , Class < [[T]] > objectType ) { Object object = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < [[snorts]] > [[snorts]] getObject ( String path , Class < [[snorts]] > objectType ) { Object object = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 316 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 205 / 108 / 3 / 316:  32%|███▏      | 316/1000 [18:18<39:38,  3.48s/it][Succeeded / Failed / Skipped / Total] 205 / 108 / 3 / 316:  32%|███▏      | 317/1000 [18:23<39:38,  3.48s/it][Succeeded / Failed / Skipped / Total] 206 / 108 / 3 / 317:  32%|███▏      | 317/1000 [18:23<39:38,  3.48s/it][Succeeded / Failed / Skipped / Total] 206 / 108 / 3 / 317:  32%|███▏      | 318/1000 [18:30<39:42,  3.49s/it][Succeeded / Failed / Skipped / Total] 206 / 109 / 3 / 318:  32%|███▏      | 318/1000 [18:30<39:42,  3.49s/it][Succeeded / Failed / Skipped / Total] 206 / 109 / 3 / 318:  32%|███▏      | 319/1000 [18:33<39:37,  3.49s/it][Succeeded / Failed / Skipped / Total] 207 / 109 / 3 / 319:  32%|███▏      | 319/1000 [18:33<39:37,  3.49s/it][Succeeded / Failed / Skipped / Total] 208 / 109 / 3 / 320:  32%|███▏      | 320/1000 [18:33<39:27,  3.48s/it][Succeeded / Failed / Skipped / Total] 208 / 109 / 3 / 320:  32%|███▏      | 321/1000 [18:40<39:29,  3.49s/it][Succeeded / Failed / Skipped / Total] 209 / 109 / 3 / 321:  32%|███▏      | 321/1000 [18:40<39:29,  3.49s/it][Succeeded / Failed / Skipped / Total] 209 / 110 / 3 / 322:  32%|███▏      | 322/1000 [18:40<39:18,  3.48s/it][Succeeded / Failed / Skipped / Total] 209 / 110 / 3 / 322:  32%|███▏      | 323/1000 [18:42<39:12,  3.47s/it][Succeeded / Failed / Skipped / Total] 210 / 110 / 3 / 323:  32%|███▏      | 323/1000 [18:42<39:12,  3.47s/it][Succeeded / Failed / Skipped / Total] 211 / 110 / 3 / 324:  32%|███▏      | 324/1000 [18:50<39:17,  3.49s/it][Succeeded / Failed / Skipped / Total] 211 / 110 / 3 / 324:  32%|███▎      | 325/1000 [18:56<39:20,  3.50s/it]Creates an uninitialized binding . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[ErrorsException]] { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[intertwined]] { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 317 ---------------------------------------------
Gets all parameters . --> Get parameters from parameters --> Socre: 1.0

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] [[parameterInjectors]] ) throws InternalProvisionException { if ( [[parameterInjectors]] == null ) { return NO_ARGUMENTS ; } int [[size]] = [[parameterInjectors]] . length ; Object [ ] parameters = new Object [ [[size]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] [[pesto]] ) throws InternalProvisionException { if ( [[pesto]] == null ) { return NO_ARGUMENTS ; } int [[epitome]] = [[pesto]] . length ; Object [ ] parameters = new Object [ [[epitome]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 318 ---------------------------------------------
The type of the provider . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[bloomberg]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 319 ---------------------------------------------
Returns true if the overrides are overridden . --> Bards between methods --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[overrides]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[bards]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 320 ---------------------------------------------
Binds an injector . --> This method will be called once perjector --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindInjector]] ( InjectorImpl [[injector]] ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( [[injector]] ) ; [[injector]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( [[injector]] , key , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void [[retriever]] ( InjectorImpl [[methyl]] ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( [[methyl]] ) ; [[methyl]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( [[methyl]] , key , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 321 ---------------------------------------------
Binds the logger . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl [[injector]] ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory [[loggerFactory]] = new LoggerFactory ( ) ; [[injector]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( [[injector]] , key , SourceProvider . UNKNOWN_SOURCE , [[loggerFactory]] , Scoping . UNSCOPED , [[loggerFactory]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[scrutinizing]] ( InjectorImpl [[dwellers]] ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory [[bail]] = new LoggerFactory ( ) ; [[dwellers]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( [[dwellers]] , key , SourceProvider . UNKNOWN_SOURCE , [[bail]] , Scoping . UNSCOPED , [[bail]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 322 ---------------------------------------------
Initializes the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( MembersInjector < T > delegate ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void [[stillness]] ( MembersInjector < T > delegate ) { checkState ( this . [[meteorology]] == null , "delegate already initialized" ) ; this . [[meteorology]] = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 323 ---------------------------------------------
Prepare the builtin converters . --> The cicero --> Socre: 1.0

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[cicero]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 324 ---------------------------------------------
Resolves a list of type literals . --> Resolve a generic type literal --> Socre: 1.0

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int [[t]] = 0 ; [[t]] < [[types]] . length ; [[t]] ++ ) { result [ [[t]] ] = resolve ( [[types]] [ [[t]] ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] [[garrity]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[garrity]] . length ] ; for ( int [[deci]] = 0 ; [[deci]] < [[garrity]] . length ; [[deci]] ++ ) { result [ [[deci]] ] = resolve ( [[garrity]] [ [[deci]] ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 325 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 212 / 110 / 3 / 325:  32%|███▎      | 325/1000 [18:56<39:20,  3.50s/it][Succeeded / Failed / Skipped / Total] 212 / 110 / 3 / 325:  33%|███▎      | 326/1000 [18:57<39:12,  3.49s/it][Succeeded / Failed / Skipped / Total] 213 / 110 / 3 / 326:  33%|███▎      | 326/1000 [18:57<39:12,  3.49s/it][Succeeded / Failed / Skipped / Total] 213 / 110 / 3 / 326:  33%|███▎      | 327/1000 [18:59<39:05,  3.49s/it][Succeeded / Failed / Skipped / Total] 213 / 111 / 3 / 327:  33%|███▎      | 327/1000 [18:59<39:05,  3.49s/it][Succeeded / Failed / Skipped / Total] 213 / 111 / 3 / 327:  33%|███▎      | 328/1000 [19:04<39:05,  3.49s/it][Succeeded / Failed / Skipped / Total] 213 / 112 / 3 / 328:  33%|███▎      | 328/1000 [19:04<39:05,  3.49s/it][Succeeded / Failed / Skipped / Total] 213 / 112 / 3 / 328:  33%|███▎      | 329/1000 [19:08<39:01,  3.49s/it][Succeeded / Failed / Skipped / Total] 214 / 112 / 3 / 329:  33%|███▎      | 329/1000 [19:08<39:01,  3.49s/it][Succeeded / Failed / Skipped / Total] 214 / 112 / 3 / 329:  33%|███▎      | 330/1000 [19:13<39:01,  3.50s/it][Succeeded / Failed / Skipped / Total] 214 / 113 / 3 / 330:  33%|███▎      | 330/1000 [19:13<39:01,  3.50s/it][Succeeded / Failed / Skipped / Total] 214 / 113 / 3 / 330:  33%|███▎      | 331/1000 [19:14<38:52,  3.49s/it]Returns true if the class has the same version of the same version --> Determine whether or not ethernet is ether --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader classLoader ) { Class < ? > [[fc]] = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( [[fc]] . getName ( ) ) == [[fc]] ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[ether]] ( ClassLoader classLoader ) { Class < ? > [[montano]] = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( [[montano]] . getName ( ) ) == [[montano]] ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 326 ---------------------------------------------
Fix annotations . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > [[key]] ) { return [[key]] . getAnnotation ( ) == null ? [[key]] : Key . get ( [[key]] . getTypeLiteral ( ) , [[key]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > [[carrera]] ) { return [[carrera]] . getAnnotation ( ) == null ? [[carrera]] : Key . get ( [[carrera]] . getTypeLiteral ( ) , [[carrera]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 327 ---------------------------------------------
Add additional http client parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[addParams]] ( Map < String , ? > [[httpClientParams]] ) { notNull ( [[httpClientParams]] , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( [[httpClientParams]] ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig [[oversensitive]] ( Map < String , ? > [[beeped]] ) { notNull ( [[beeped]] , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( [[beeped]] ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 328 ---------------------------------------------
Request the injection point for the given member . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[provisionCallback]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[ez]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 329 ---------------------------------------------
Converts the given class loader to the system class loader . --> Converts a ClassLoader into a ClassLoader --> Socre: 1.0

[[[[Adv]]]]: private static ClassLoader canonicalize ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader canonicalize ( ClassLoader [[artificially]] ) { return [[artificially]] != null ? [[artificially]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 330 ---------------------------------------------
Check if there is any binding annotations found in the given member . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[checkForMisplacedBindingAnnotations]] ( Member [[member]] , Errors errors ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( errors , [[member]] , ( ( AnnotatedElement ) [[member]] ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean [[triplicate]] ( Member [[visigoths]] , Errors errors ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( errors , [[visigoths]] , ( ( AnnotatedElement ) [[visigoths]] ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 331 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 215 / 113 / 3 / 331:  33%|███▎      | 331/1000 [19:14<38:52,  3.49s/it][Succeeded / Failed / Skipped / Total] 215 / 113 / 3 / 331:  33%|███▎      | 332/1000 [19:14<38:43,  3.48s/it][Succeeded / Failed / Skipped / Total] 216 / 113 / 3 / 332:  33%|███▎      | 332/1000 [19:14<38:43,  3.48s/it][Succeeded / Failed / Skipped / Total] 216 / 113 / 3 / 332:  33%|███▎      | 333/1000 [19:22<38:49,  3.49s/it][Succeeded / Failed / Skipped / Total] 216 / 114 / 3 / 333:  33%|███▎      | 333/1000 [19:22<38:49,  3.49s/it][Succeeded / Failed / Skipped / Total] 216 / 114 / 3 / 333:  33%|███▎      | 334/1000 [19:28<38:49,  3.50s/it][Succeeded / Failed / Skipped / Total] 217 / 114 / 3 / 334:  33%|███▎      | 334/1000 [19:28<38:49,  3.50s/it][Succeeded / Failed / Skipped / Total] 217 / 114 / 3 / 334:  34%|███▎      | 335/1000 [19:34<38:51,  3.51s/it][Succeeded / Failed / Skipped / Total] 218 / 114 / 3 / 335:  34%|███▎      | 335/1000 [19:34<38:51,  3.51s/it][Succeeded / Failed / Skipped / Total] 218 / 114 / 3 / 335:  34%|███▎      | 336/1000 [19:49<39:09,  3.54s/it][Succeeded / Failed / Skipped / Total] 218 / 115 / 3 / 336:  34%|███▎      | 336/1000 [19:49<39:09,  3.54s/it][Succeeded / Failed / Skipped / Total] 218 / 115 / 3 / 336:  34%|███▎      | 337/1000 [19:52<39:05,  3.54s/it][Succeeded / Failed / Skipped / Total] 219 / 115 / 3 / 337:  34%|███▎      | 337/1000 [19:52<39:05,  3.54s/it][Succeeded / Failed / Skipped / Total] 219 / 115 / 3 / 337:  34%|███▍      | 338/1000 [19:53<38:56,  3.53s/it]Checks if the given member is public or not . --> is public or not --> Socre: 1.0

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member member ) { if ( ! Modifier . isPublic ( member . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] [[parameterTypes]] ; if ( member instanceof Constructor ) { [[parameterTypes]] = ( ( Constructor ) member ) . getParameterTypes ( ) ; } else { Method method = ( Method ) member ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } [[parameterTypes]] = method . getParameterTypes ( ) ; } for ( Class < ? > [[type]] : [[parameterTypes]] ) { if ( ! Modifier . isPublic ( [[type]] . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member member ) { if ( ! Modifier . isPublic ( member . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] [[fishmonger]] ; if ( member instanceof Constructor ) { [[fishmonger]] = ( ( Constructor ) member ) . getParameterTypes ( ) ; } else { Method method = ( Method ) member ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } [[fishmonger]] = method . getParameterTypes ( ) ; } for ( Class < ? > [[eveybody]] : [[fishmonger]] ) { if ( ! Modifier . isPublic ( [[eveybody]] . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 332 ---------------------------------------------
Override this method to customize the ServletRequest . --> Hibernate request --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[withDispatcher]] ( ServletRequest servletRequest , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[harriet]] ( ServletRequest servletRequest , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 333 ---------------------------------------------
Returns an annotation for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[baggies]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 334 ---------------------------------------------
Normalize a path . --> method to simplify --> Socre: 1.0

[[[[Adv]]]]: static String [[normalizePath]] ( String [[path]] ) { StringBuilder sb = new StringBuilder ( [[path]] . length ( ) ) ; int queryStart = [[path]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[path]] . substring ( queryStart ) ; [[path]] = [[path]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String [[alec]] ( String [[mystic]] ) { StringBuilder sb = new StringBuilder ( [[mystic]] . length ( ) ) ; int queryStart = [[mystic]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[mystic]] . substring ( queryStart ) ; [[mystic]] = [[mystic]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 335 ---------------------------------------------
Returns a scope for the given scope . --> region ScopeFactory --> Socre: 1.0

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl [[injector]] , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl [[kronen]] , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 336 ---------------------------------------------
Checks if retention at runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > [[annotationType]] ) { Retention retention = [[annotationType]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[weapons]] ( Class < ? extends Annotation > [[postage]] ) { Retention retention = [[postage]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 337 ---------------------------------------------
Create a new instance with the given arguments . --> throwawayException --> Socre: 1.0

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] [[args]] ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[throwaway]] ( Object [ ] [[busboys]] ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( [[busboys]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 338 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 219 / 116 / 3 / 338:  34%|███▍      | 338/1000 [19:53<38:56,  3.53s/it][Succeeded / Failed / Skipped / Total] 219 / 116 / 3 / 338:  34%|███▍      | 339/1000 [20:03<39:07,  3.55s/it][Succeeded / Failed / Skipped / Total] 220 / 116 / 3 / 339:  34%|███▍      | 339/1000 [20:03<39:07,  3.55s/it][Succeeded / Failed / Skipped / Total] 220 / 116 / 3 / 339:  34%|███▍      | 340/1000 [20:17<39:24,  3.58s/it][Succeeded / Failed / Skipped / Total] 221 / 116 / 3 / 340:  34%|███▍      | 340/1000 [20:17<39:24,  3.58s/it][Succeeded / Failed / Skipped / Total] 221 / 116 / 3 / 340:  34%|███▍      | 341/1000 [20:20<39:18,  3.58s/it][Succeeded / Failed / Skipped / Total] 221 / 117 / 3 / 341:  34%|███▍      | 341/1000 [20:20<39:18,  3.58s/it][Succeeded / Failed / Skipped / Total] 221 / 117 / 3 / 341:  34%|███▍      | 342/1000 [20:31<39:29,  3.60s/it][Succeeded / Failed / Skipped / Total] 221 / 118 / 3 / 342:  34%|███▍      | 342/1000 [20:31<39:29,  3.60s/it][Succeeded / Failed / Skipped / Total] 221 / 118 / 3 / 342:  34%|███▍      | 343/1000 [20:32<39:20,  3.59s/it][Succeeded / Failed / Skipped / Total] 221 / 119 / 3 / 343:  34%|███▍      | 343/1000 [20:32<39:20,  3.59s/it][Succeeded / Failed / Skipped / Total] 221 / 119 / 3 / 343:  34%|███▍      | 344/1000 [20:35<39:16,  3.59s/it][Succeeded / Failed / Skipped / Total] 221 / 120 / 3 / 344:  34%|███▍      | 344/1000 [20:35<39:16,  3.59s/it][Succeeded / Failed / Skipped / Total] 221 / 120 / 3 / 344:  34%|███▍      | 345/1000 [20:36<39:08,  3.58s/it]Validates that all pending injections have been processed . --> [[[FAILED]]]

[[[[Adv]]]]: void [[validateOustandingInjections]] ( Errors [[errors]] ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( [[errors]] ) ; } catch ( ErrorsException e ) { [[errors]] . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void [[reinaldo]] ( Errors [[achieved]] ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( [[achieved]] ) ; } catch ( ErrorsException e ) { [[achieved]] . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 339 ---------------------------------------------
Find scope annotation . --> find scope annotations and duplicate annotations --> Socre: 1.0

[[[[Adv]]]]: public static Class < ? extends Annotation > [[findScopeAnnotation]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > [[found]] = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( [[found]] != null ) { errors . duplicateScopeAnnotations ( [[found]] , annotationType ) ; } else { [[found]] = annotationType ; } } } return [[found]] ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > [[accountability]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > [[ponton]] = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( [[ponton]] != null ) { errors . duplicateScopeAnnotations ( [[ponton]] , annotationType ) ; } else { [[ponton]] = annotationType ; } } } return [[ponton]] ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 340 ---------------------------------------------
Returns the name of the given key . --> escriptor --> Socre: 1.0

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > [[key]] ) { Annotation [[annotation]] = [[key]] . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = [[key]] . getAnnotationType ( ) ; if ( [[annotation]] != null && ! isMarker ( annotationType ) ) { return [[key]] . getAnnotation ( ) . toString ( ) ; } else if ( [[key]] . getAnnotationType ( ) != null ) { return "@" + [[key]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[carnivore]] ( Key < ? > [[arras]] ) { Annotation [[calavera]] = [[arras]] . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = [[arras]] . getAnnotationType ( ) ; if ( [[calavera]] != null && ! isMarker ( annotationType ) ) { return [[arras]] . getAnnotation ( ) . toString ( ) ; } else if ( [[arras]] . getAnnotationType ( ) != null ) { return "@" + [[arras]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 341 ---------------------------------------------
Make an injectable . --> [[[FAILED]]]

[[[[Adv]]]]: static Scoping [[makeInjectable]] ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding [[scope]] = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( [[scope]] != null ) { return forInstance ( [[scope]] . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping [[lansky]] ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding [[possibles]] = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( [[possibles]] != null ) { return forInstance ( [[possibles]] . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 342 ---------------------------------------------
Retrieve a constructor from the cache . --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > [[get]] ( InjectionPoint [[constructorInjector]] , Errors errors ) throws ErrorsException { return cache . get ( [[constructorInjector]] , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > [[wilcox]] ( InjectionPoint [[canoes]] , Errors errors ) throws ErrorsException { return cache . get ( [[canoes]] , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 343 ---------------------------------------------
Binds the binding to the given direct type . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder [[binder]] ) { [[binder]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[artificially]] ( Binder [[zuckerberg]] ) { [[zuckerberg]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 344 ---------------------------------------------
Initializes the delegate provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[seeing]] ( Provider < T > [[hokkaido]] ) { checkState ( this . [[haah]] == null , "delegate already initialized" ) ; this . [[haah]] = checkNotNull ( [[hokkaido]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 345 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 222 / 120 / 3 / 345:  34%|███▍      | 345/1000 [20:36<39:08,  3.58s/it][Succeeded / Failed / Skipped / Total] 222 / 120 / 3 / 345:  35%|███▍      | 346/1000 [20:37<38:59,  3.58s/it][Succeeded / Failed / Skipped / Total] 222 / 121 / 3 / 346:  35%|███▍      | 346/1000 [20:37<38:59,  3.58s/it][Succeeded / Failed / Skipped / Total] 222 / 121 / 3 / 346:  35%|███▍      | 347/1000 [20:48<39:09,  3.60s/it][Succeeded / Failed / Skipped / Total] 222 / 122 / 3 / 347:  35%|███▍      | 347/1000 [20:48<39:09,  3.60s/it][Succeeded / Failed / Skipped / Total] 222 / 122 / 3 / 347:  35%|███▍      | 348/1000 [20:50<39:02,  3.59s/it][Succeeded / Failed / Skipped / Total] 223 / 122 / 3 / 348:  35%|███▍      | 348/1000 [20:50<39:02,  3.59s/it][Succeeded / Failed / Skipped / Total] 223 / 122 / 3 / 348:  35%|███▍      | 349/1000 [20:52<38:56,  3.59s/it][Succeeded / Failed / Skipped / Total] 224 / 122 / 3 / 349:  35%|███▍      | 349/1000 [20:52<38:56,  3.59s/it][Succeeded / Failed / Skipped / Total] 224 / 122 / 3 / 349:  35%|███▌      | 350/1000 [20:58<38:56,  3.59s/it][Succeeded / Failed / Skipped / Total] 225 / 122 / 3 / 350:  35%|███▌      | 350/1000 [20:58<38:56,  3.59s/it][Succeeded / Failed / Skipped / Total] 225 / 122 / 3 / 350:  35%|███▌      | 351/1000 [21:03<38:55,  3.60s/it]Cleans the internal state of the given binding . -->  archetype --> Socre: 1.0

[[[[Adv]]]]: private boolean [[cleanup]] ( BindingImpl < ? > binding , Set < Key > [[encountered]] ) { boolean [[bindingFailed]] = "[[False]]" != "[[False]]" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( [[encountered]] . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean [[archetype]] ( BindingImpl < ? > binding , Set < Key > [[needa]] ) { boolean [[proteus]] = "[[También]]" != "[[También]]" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( [[needa]] . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 346 ---------------------------------------------
Converts a key literal into a TypeLiteral . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors [[errors]] = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( [[errors]] . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors [[bigamy]] = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( [[bigamy]] . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 347 ---------------------------------------------
Gets the key for a new value . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[entrySetBinder]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[valueKey]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[entrySetBinder]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[entrySetBinder]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[valueKey]] ) ) ; return [[valueKey]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[averaged]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[portraits]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[averaged]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[averaged]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[portraits]] ) ) ; return [[portraits]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 348 ---------------------------------------------
Returns the binding for the given annotations . --> rewrites binding annotation --> Socre: 1.0

[[[[Adv]]]]: public static Key < ? > [[getKey]] ( TypeLiteral < ? > [[type]] , Member member , Annotation [ ] [[annotations]] , Errors errors ) throws ErrorsException { int [[numErrorsBefore]] = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , [[annotations]] ) ; errors . throwIfNewErrors ( [[numErrorsBefore]] ) ; return found == null ? Key . get ( [[type]] ) : Key . get ( [[type]] , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > [[overthrow]] ( TypeLiteral < ? > [[affirmed]] , Member member , Annotation [ ] [[binh]] , Errors errors ) throws ErrorsException { int [[maneuvering]] = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , [[binh]] ) ; errors . throwIfNewErrors ( [[maneuvering]] ) ; return found == null ? Key . get ( [[affirmed]] ) : Key . get ( [[affirmed]] , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 349 ---------------------------------------------
Creates a real map binder for the given key and value type . --> ztodo support --> Socre: 1.0

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[newRealMapBinder]] ( Binder [[binder]] , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { [[binder]] = [[binder]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return [[newRealMapBinder]] ( [[binder]] , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( [[binder]] , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[zod]] ( Binder [[efficacy]] , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { [[efficacy]] = [[efficacy]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return [[zod]] ( [[efficacy]] , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( [[efficacy]] , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 350 ---------------------------------------------
Returns true if the interceptor has scope annotation . --> Determines whether or not --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > [[interceptorClass]] ) { for ( Annotation [[annotation]] : [[interceptorClass]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[annotation]] . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[dolce]] ( Class < ? extends Interceptor > [[activism]] ) { for ( Annotation [[gallagher]] : [[activism]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[gallagher]] . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 351 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 225 / 123 / 3 / 351:  35%|███▌      | 351/1000 [21:03<38:55,  3.60s/it][Succeeded / Failed / Skipped / Total] 225 / 123 / 3 / 351:  35%|███▌      | 352/1000 [21:09<38:57,  3.61s/it][Succeeded / Failed / Skipped / Total] 226 / 123 / 3 / 352:  35%|███▌      | 352/1000 [21:09<38:57,  3.61s/it][Succeeded / Failed / Skipped / Total] 226 / 123 / 3 / 352:  35%|███▌      | 353/1000 [21:10<38:48,  3.60s/it][Succeeded / Failed / Skipped / Total] 227 / 123 / 3 / 353:  35%|███▌      | 353/1000 [21:10<38:48,  3.60s/it][Succeeded / Failed / Skipped / Total] 227 / 123 / 3 / 353:  35%|███▌      | 354/1000 [21:19<38:54,  3.61s/it][Succeeded / Failed / Skipped / Total] 228 / 123 / 3 / 354:  35%|███▌      | 354/1000 [21:19<38:54,  3.61s/it][Succeeded / Failed / Skipped / Total] 228 / 123 / 3 / 354:  36%|███▌      | 355/1000 [21:24<38:53,  3.62s/it][Succeeded / Failed / Skipped / Total] 229 / 123 / 3 / 355:  36%|███▌      | 355/1000 [21:24<38:53,  3.62s/it][Succeeded / Failed / Skipped / Total] 229 / 123 / 3 / 355:  36%|███▌      | 356/1000 [21:25<38:45,  3.61s/it][Succeeded / Failed / Skipped / Total] 230 / 123 / 3 / 356:  36%|███▌      | 356/1000 [21:25<38:45,  3.61s/it][Succeeded / Failed / Skipped / Total] 230 / 123 / 3 / 356:  36%|███▌      | 357/1000 [21:30<38:43,  3.61s/it][Succeeded / Failed / Skipped / Total] 230 / 124 / 3 / 357:  36%|███▌      | 357/1000 [21:30<38:43,  3.61s/it][Succeeded / Failed / Skipped / Total] 230 / 124 / 3 / 357:  36%|███▌      | 358/1000 [21:42<38:55,  3.64s/it]Returns all registered methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[freakiest]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 352 ---------------------------------------------
Writes the source code . --> For backward compatibility --> Socre: 1.0

[[[[Adv]]]]: private Object [[writeReplace]] ( ) throws ObjectStreamException { Object [ ] [[sourcesAsStrings]] = sources . toArray ( ) ; for ( int i = 0 ; i < [[sourcesAsStrings]] . length ; i ++ ) { [[sourcesAsStrings]] [ i ] = Errors . convert ( [[sourcesAsStrings]] [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[sourcesAsStrings]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object [[backward]] ( ) throws ObjectStreamException { Object [ ] [[assassination]] = sources . toArray ( ) ; for ( int i = 0 ; i < [[assassination]] . length ; i ++ ) { [[assassination]] [ i ] = Errors . convert ( [[assassination]] [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[assassination]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 353 ---------------------------------------------
Returns the module for the given module . --> helper method to return benchedemail --> Socre: 1.0

[[[[Adv]]]]: static Module [[forModule]] ( Module [[module]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[benedetti]] ( Module [[satis]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 354 ---------------------------------------------
Invokes the specified method on the proxy . --> Overriding methods --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object [[invoke]] ( Object proxy , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object [[dwellers]] ( Object proxy , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 355 ---------------------------------------------
Checks whether the constructor has parameters matching the given constructor . --> check whether the constructor matches the given type --> Socre: 1.0

[[[[Adv]]]]: private boolean constructorHasMatchingParams ( TypeLiteral < ? > type , Constructor < ? > [[constructor]] , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( [[constructor]] ) ; Annotation [ ] [ ] [[paramAnnotations]] = [[constructor]] . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , [[constructor]] , [[paramAnnotations]] [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean constructorHasMatchingParams ( TypeLiteral < ? > type , Constructor < ? > [[garou]] , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( [[garou]] ) ; Annotation [ ] [ ] [[canal]] = [[garou]] . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , [[garou]] , [[canal]] [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 356 ---------------------------------------------
Returns the dependencies for the specified injection point . --> rewrites a set of arguments --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint ctorPoint , TypeLiteral < ? > [[implementation]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! [[implementation]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( [[implementation]] ) ) { builder . addAll ( ip . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[overthrow]] ( InjectionPoint ctorPoint , TypeLiteral < ? > [[batshit]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! [[batshit]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( [[batshit]] ) ) { builder . addAll ( ip . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 357 ---------------------------------------------
Display a missing implementation for a given key . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[sb]] = new StringBuilder ( ) ; [[sb]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[dunya]] = new StringBuilder ( ) ; [[dunya]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 358 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 230 / 125 / 3 / 358:  36%|███▌      | 358/1000 [21:42<38:55,  3.64s/it][Succeeded / Failed / Skipped / Total] 230 / 125 / 3 / 358:  36%|███▌      | 359/1000 [21:55<39:08,  3.66s/it][Succeeded / Failed / Skipped / Total] 230 / 126 / 3 / 359:  36%|███▌      | 359/1000 [21:55<39:08,  3.66s/it][Succeeded / Failed / Skipped / Total] 230 / 126 / 3 / 359:  36%|███▌      | 360/1000 [22:00<39:07,  3.67s/it][Succeeded / Failed / Skipped / Total] 230 / 127 / 3 / 360:  36%|███▌      | 360/1000 [22:00<39:07,  3.67s/it][Succeeded / Failed / Skipped / Total] 230 / 127 / 3 / 360:  36%|███▌      | 361/1000 [22:06<39:07,  3.67s/it][Succeeded / Failed / Skipped / Total] 231 / 127 / 3 / 361:  36%|███▌      | 361/1000 [22:06<39:07,  3.67s/it][Succeeded / Failed / Skipped / Total] 231 / 127 / 3 / 361:  36%|███▌      | 362/1000 [22:46<40:07,  3.77s/it][Succeeded / Failed / Skipped / Total] 232 / 127 / 3 / 362:  36%|███▌      | 362/1000 [22:46<40:07,  3.77s/it][Succeeded / Failed / Skipped / Total] 232 / 127 / 3 / 362:  36%|███▋      | 363/1000 [22:58<40:18,  3.80s/it][Succeeded / Failed / Skipped / Total] 232 / 128 / 3 / 363:  36%|███▋      | 363/1000 [22:58<40:18,  3.80s/it][Succeeded / Failed / Skipped / Total] 232 / 128 / 3 / 363:  36%|███▋      | 364/1000 [23:13<40:34,  3.83s/it][Succeeded / Failed / Skipped / Total] 232 / 129 / 3 / 364:  36%|███▋      | 364/1000 [23:13<40:34,  3.83s/it][Succeeded / Failed / Skipped / Total] 232 / 129 / 3 / 364:  36%|███▋      | 365/1000 [23:14<40:25,  3.82s/it]Checks whether a type is not defined . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean isTypeNotSpecified ( TypeLiteral < ? > [[typeLiteral]] , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "[[False]]" != "[[False]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean isTypeNotSpecified ( TypeLiteral < ? > [[flaky]] , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( [[flaky]] ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "[[Tracking]]" != "[[Tracking]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 359 ---------------------------------------------
Creates a new instance of the given construction . --> [[[FAILED]]]

[[[[Adv]]]]: private T [[provision]] ( InternalContext [[context]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( [[context]] , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T [[scone]] ( InternalContext [[hanzo]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( [[hanzo]] , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 360 ---------------------------------------------
Gets the internal constructor . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[abbott]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 361 ---------------------------------------------
Instantiates the real Multibinder using the given key . --> Installs real Multibinder with given key --> Socre: 1.0

[[[[Adv]]]]: public static < T > RealMultibinder < T > newRealSetBinder ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[result]] = new RealMultibinder <> ( binder , key ) ; binder . install ( [[result]] ) ; return [[result]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > newRealSetBinder ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[westwood]] = new RealMultibinder <> ( binder , key ) ; binder . install ( [[westwood]] ) ; return [[westwood]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 362 ---------------------------------------------
Removes the specified dependencies from the given dependencies . --> Determine the passover for the given columns --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > [[removeAssistedDeps]] ( Set < Dependency < ? > > [[deps]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[dep]] : [[deps]] ) { Class < ? > [[annotationType]] = [[dep]] . getKey ( ) . getAnnotationType ( ) ; if ( [[annotationType]] == null || ! [[annotationType]] . equals ( Assisted . class ) ) { builder . add ( [[dep]] ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > [[passover]] ( Set < Dependency < ? > > [[columns]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[rentals]] : [[columns]] ) { Class < ? > [[purges]] = [[rentals]] . getKey ( ) . getAnnotationType ( ) ; if ( [[purges]] == null || ! [[purges]] . equals ( Assisted . class ) ) { builder . add ( [[rentals]] ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 363 ---------------------------------------------
Checks whether the given injector should be used for optimization . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[badDeps]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[handover]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[felonies]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 364 ---------------------------------------------
Find the next filter matching the given request . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter [[findNextFilter]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter [[filter]] = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( [[filter]] != null ) { return [[filter]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter [[ikon]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter [[clout]] = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( [[clout]] != null ) { return [[clout]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 365 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 232 / 130 / 3 / 365:  36%|███▋      | 365/1000 [23:14<40:25,  3.82s/it][Succeeded / Failed / Skipped / Total] 232 / 130 / 3 / 365:  37%|███▋      | 366/1000 [23:16<40:19,  3.82s/it][Succeeded / Failed / Skipped / Total] 232 / 131 / 3 / 366:  37%|███▋      | 366/1000 [23:16<40:19,  3.82s/it][Succeeded / Failed / Skipped / Total] 232 / 131 / 3 / 366:  37%|███▋      | 367/1000 [23:19<40:13,  3.81s/it][Succeeded / Failed / Skipped / Total] 233 / 131 / 3 / 367:  37%|███▋      | 367/1000 [23:19<40:13,  3.81s/it][Succeeded / Failed / Skipped / Total] 233 / 131 / 3 / 367:  37%|███▋      | 368/1000 [23:20<40:04,  3.81s/it][Succeeded / Failed / Skipped / Total] 234 / 131 / 3 / 368:  37%|███▋      | 368/1000 [23:20<40:04,  3.81s/it][Succeeded / Failed / Skipped / Total] 234 / 131 / 3 / 368:  37%|███▋      | 369/1000 [23:37<40:23,  3.84s/it][Succeeded / Failed / Skipped / Total] 235 / 131 / 3 / 369:  37%|███▋      | 369/1000 [23:37<40:23,  3.84s/it][Succeeded / Failed / Skipped / Total] 235 / 131 / 3 / 369:  37%|███▋      | 370/1000 [24:00<40:52,  3.89s/it][Succeeded / Failed / Skipped / Total] 235 / 132 / 3 / 370:  37%|███▋      | 370/1000 [24:00<40:52,  3.89s/it][Succeeded / Failed / Skipped / Total] 235 / 132 / 3 / 370:  37%|███▋      | 371/1000 [24:01<40:43,  3.88s/it][Succeeded / Failed / Skipped / Total] 236 / 132 / 3 / 371:  37%|███▋      | 371/1000 [24:01<40:43,  3.88s/it][Succeeded / Failed / Skipped / Total] 236 / 132 / 3 / 371:  37%|███▋      | 372/1000 [25:03<42:18,  4.04s/it][Succeeded / Failed / Skipped / Total] 237 / 132 / 3 / 372:  37%|███▋      | 372/1000 [25:03<42:18,  4.04s/it][Succeeded / Failed / Skipped / Total] 237 / 132 / 3 / 372:  37%|███▋      | 373/1000 [25:26<42:46,  4.09s/it][Succeeded / Failed / Skipped / Total] 237 / 133 / 3 / 373:  37%|███▋      | 373/1000 [25:26<42:46,  4.09s/it][Succeeded / Failed / Skipped / Total] 237 / 133 / 3 / 373:  37%|███▋      | 374/1000 [25:36<42:52,  4.11s/it]Returns the binding from the given injector . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > [[getBindingFromNewInjector]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > [[smoothing]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 366 ---------------------------------------------
Returns true if the given constructor has at least one annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor [[cxtor]] ) { return [[cxtor]] . isAnnotationPresent ( Inject . class ) || [[cxtor]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[shira]] ( Constructor [[bigfoot]] ) { return [[bigfoot]] . isAnnotationPresent ( Inject . class ) || [[bigfoot]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 367 ---------------------------------------------
Get the internal dependencies . --> Invoked by the constructor --> Socre: 1.0

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > [[builder]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[builder]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[invitations]] ( ) { ImmutableSet . Builder < InjectionPoint > [[buxton]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[buxton]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 368 ---------------------------------------------
Returns a Module for the given module . --> Utility method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Module [[forModule]] ( Object [[module]] , ModuleAnnotatedMethodScanner scanner ) { return forObject ( [[module]] , "False" != "False" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[bernardino]] ( Object [[corso]] , ModuleAnnotatedMethodScanner scanner ) { return forObject ( [[corso]] , "False" != "False" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 369 ---------------------------------------------
Initializes the lookup . --> Called to process errors --> Socre: 1.0

[[[[Adv]]]]: void [[initialize]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[delicti]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 370 ---------------------------------------------
Gets the line number for the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member [[member]] ) { Preconditions . checkArgument ( type == [[member]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[member]] , [[member]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[member]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[utterance]] ( Member [[bonking]] ) { Preconditions . checkArgument ( type == [[bonking]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[bonking]] , [[bonking]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[bonking]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 371 ---------------------------------------------
Transforms callable into a Callable --> Scrader implementation --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > callable ) { return wrap ( callable , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[schrader]] ( Callable < T > callable ) { return wrap ( callable , [[schrader]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 372 ---------------------------------------------
Checks that the given value is compatible with the given key . --> Convenience method for unit testing --> Socre: 1.0

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > [[key]] , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[key]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[key]] + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[utero]] ( Key < ? > [[hemophiliac]] , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[hemophiliac]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[hemophiliac]] + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 373 ---------------------------------------------
Returns a new instance of the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > [[get]] ( Class < T > [[type]] , AnnotationStrategy annotationStrategy ) { return new Key < T > ( [[type]] , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > [[outspoken]] ( Class < T > [[lansky]] , AnnotationStrategy annotationStrategy ) { return new Key < T > ( [[lansky]] , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 374 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 238 / 133 / 3 / 374:  37%|███▋      | 374/1000 [25:36<42:52,  4.11s/it][Succeeded / Failed / Skipped / Total] 238 / 133 / 3 / 374:  38%|███▊      | 375/1000 [25:38<42:44,  4.10s/it][Succeeded / Failed / Skipped / Total] 238 / 134 / 3 / 375:  38%|███▊      | 375/1000 [25:38<42:44,  4.10s/it][Succeeded / Failed / Skipped / Total] 238 / 134 / 3 / 375:  38%|███▊      | 376/1000 [25:42<42:40,  4.10s/it][Succeeded / Failed / Skipped / Total] 238 / 135 / 3 / 376:  38%|███▊      | 376/1000 [25:42<42:40,  4.10s/it][Succeeded / Failed / Skipped / Total] 238 / 135 / 3 / 376:  38%|███▊      | 377/1000 [25:51<42:43,  4.12s/it][Succeeded / Failed / Skipped / Total] 238 / 136 / 3 / 377:  38%|███▊      | 377/1000 [25:51<42:43,  4.12s/it][Succeeded / Failed / Skipped / Total] 238 / 136 / 3 / 377:  38%|███▊      | 378/1000 [26:10<43:04,  4.16s/it][Succeeded / Failed / Skipped / Total] 238 / 137 / 3 / 378:  38%|███▊      | 378/1000 [26:10<43:04,  4.16s/it][Succeeded / Failed / Skipped / Total] 238 / 137 / 3 / 378:  38%|███▊      | 379/1000 [26:30<43:25,  4.20s/it]Creates an instance of members using reflection . --> throws an exception if the class is not met --> Socre: 1.0

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[createWithListeners]] ( TypeLiteral < T > [[type]] , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( [[type]] ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( [[type]] ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( [[type]] , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , [[type]] , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , [[type]] , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[flaws]] ( TypeLiteral < T > [[celibate]] , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( [[celibate]] ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( [[celibate]] ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( [[celibate]] , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , [[celibate]] , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , [[celibate]] , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 375 ---------------------------------------------
Returns an annotation strategy for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return [[strategyFor]] ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[aaahhh]] ( Class < ? extends Annotation > [[stepbrother]] ) { [[stepbrother]] = Annotations . canonicalizeIfNamed ( [[stepbrother]] ) ; if ( isAllDefaultMethods ( [[stepbrother]] ) ) { return [[aaahhh]] ( generateAnnotation ( [[stepbrother]] ) ) ; } checkNotNull ( [[stepbrother]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[stepbrother]] ) ; ensureIsBindingAnnotation ( [[stepbrother]] ) ; return new AnnotationTypeStrategy ( [[stepbrother]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 376 ---------------------------------------------
Returns the binding source . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[dragnet]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 377 ---------------------------------------------
Wraps the given callable with the given seed . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > [[callable]] , Map < Key < ? > , Object > [[seedMap]] ) { return wrap ( [[callable]] , [[continueRequest]] ( [[seedMap]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[remembrance]] ( Callable < T > [[choctaw]] , Map < Key < ? > , Object > [[krist]] ) { return wrap ( [[choctaw]] , [[remembrance]] ( [[krist]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 378 ---------------------------------------------
Returns an annotation strategy for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy [[hellcat]] ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 379 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 238 / 138 / 3 / 379:  38%|███▊      | 379/1000 [26:30<43:25,  4.20s/it][Succeeded / Failed / Skipped / Total] 238 / 138 / 3 / 379:  38%|███▊      | 380/1000 [26:51<43:49,  4.24s/it][Succeeded / Failed / Skipped / Total] 238 / 139 / 3 / 380:  38%|███▊      | 380/1000 [26:51<43:49,  4.24s/it][Succeeded / Failed / Skipped / Total] 238 / 139 / 3 / 380:  38%|███▊      | 381/1000 [27:36<44:51,  4.35s/it][Succeeded / Failed / Skipped / Total] 239 / 139 / 3 / 381:  38%|███▊      | 381/1000 [27:36<44:51,  4.35s/it][Succeeded / Failed / Skipped / Total] 239 / 139 / 3 / 381:  38%|███▊      | 382/1000 [27:52<45:06,  4.38s/it][Succeeded / Failed / Skipped / Total] 240 / 139 / 3 / 382:  38%|███▊      | 382/1000 [27:52<45:06,  4.38s/it][Succeeded / Failed / Skipped / Total] 240 / 139 / 3 / 382:  38%|███▊      | 383/1000 [27:55<44:59,  4.38s/it][Succeeded / Failed / Skipped / Total] 240 / 140 / 3 / 383:  38%|███▊      | 383/1000 [27:55<44:59,  4.38s/it][Succeeded / Failed / Skipped / Total] 240 / 140 / 3 / 383:  38%|███▊      | 384/1000 [28:13<45:16,  4.41s/it][Succeeded / Failed / Skipped / Total] 240 / 141 / 3 / 384:  38%|███▊      | 384/1000 [28:13<45:16,  4.41s/it][Succeeded / Failed / Skipped / Total] 240 / 141 / 3 / 384:  38%|███▊      | 385/1000 [28:27<45:28,  4.44s/it][Succeeded / Failed / Skipped / Total] 241 / 141 / 3 / 385:  38%|███▊      | 385/1000 [28:27<45:28,  4.44s/it][Succeeded / Failed / Skipped / Total] 241 / 141 / 3 / 385:  39%|███▊      | 386/1000 [29:05<46:16,  4.52s/it]Returns the annotation for the specified method . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation getAnnotation ( Binder [[binder]] , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[annotation]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( [[annotation]] != null ) { [[binder]] . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[annotation]] = foundAnnotation ; } } return [[annotation]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation getAnnotation ( Binder [[splendiferous]] , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[gallardo]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( [[gallardo]] != null ) { [[splendiferous]] . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[gallardo]] = foundAnnotation ; } } return [[gallardo]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 380 ---------------------------------------------
Gets the injectors for a given injection point . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[injectors]] = Lists . newArrayList ( ) ; for ( InjectionPoint [[injectionPoint]] : injectionPoints ) { try { Errors [[errorsForMember]] = [[injectionPoint]] . isOptional ( ) ? new Errors ( [[injectionPoint]] ) : errors . withSource ( [[injectionPoint]] ) ; SingleMemberInjector injector = [[injectionPoint]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , [[injectionPoint]] , [[errorsForMember]] ) : new SingleMethodInjector ( this . injector , [[injectionPoint]] , [[errorsForMember]] ) ; [[injectors]] . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[frickin]] = Lists . newArrayList ( ) ; for ( InjectionPoint [[four]] : injectionPoints ) { try { Errors [[farmhands]] = [[four]] . isOptional ( ) ? new Errors ( [[four]] ) : errors . withSource ( [[four]] ) ; SingleMemberInjector injector = [[four]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , [[four]] , [[farmhands]] ) : new SingleMethodInjector ( this . injector , [[four]] , [[farmhands]] ) ; [[frickin]] . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 381 ---------------------------------------------
Creates a message with the specified message format . --> overhang method --> Socre: 1.0

[[[[Adv]]]]: public static Message [[create]] ( Throwable [[cause]] , List < Object > sources , String messageFormat , Object ... arguments ) { String message = format ( messageFormat , arguments ) ; return new Message ( sources , message , [[cause]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message [[overhang]] ( Throwable [[betas]] , List < Object > sources , String messageFormat , Object ... arguments ) { String message = format ( messageFormat , arguments ) ; return new Message ( sources , message , [[betas]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 382 ---------------------------------------------
Convert the given object to the declaring element . --> helper method --> Socre: 1.0

[[[[Adv]]]]: static Object [[convert]] ( Object o ) { ElementSource source = null ; if ( o instanceof ElementSource ) { source = ( ElementSource ) o ; o = source . getDeclaringSource ( ) ; } return [[convert]] ( o , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object [[karna]] ( Object o ) { ElementSource source = null ; if ( o instanceof ElementSource ) { source = ( ElementSource ) o ; o = source . getDeclaringSource ( ) ; } return [[karna]] ( o , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 383 ---------------------------------------------
Determines if a class should be skipped . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[darkness]] ( String [[mossy]] ) { return ( parent != null && parent . shouldBeSkipped ( [[mossy]] ) ) || classNamesToSkip . contains ( [[mossy]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 384 ---------------------------------------------
Creates a message with the specified format and arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( String [[messageFormat]] , Object ... arguments ) { return [[create]] ( null , [[messageFormat]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message [[proves]] ( String [[warrior]] , Object ... arguments ) { return [[proves]] ( null , [[warrior]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 385 ---------------------------------------------
Removes stack traces from the given exception . --> also used for testing --> Socre: 1.0

[[[[Adv]]]]: private void [[pruneStacktrace]] ( Throwable throwable ) { for ( Throwable [[t]] = throwable ; [[t]] != null ; [[t]] = [[t]] . getCause ( ) ) { StackTraceElement [ ] [[stackTrace]] = [[t]] . getStackTrace ( ) ; List < StackTraceElement > [[pruned]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[stackTrace]] ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[pruned]] . add ( element ) ; } } [[t]] . setStackTrace ( [[pruned]] . toArray ( new StackTraceElement [ [[pruned]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void [[buxton]] ( Throwable throwable ) { for ( Throwable [[avocado]] = throwable ; [[avocado]] != null ; [[avocado]] = [[avocado]] . getCause ( ) ) { StackTraceElement [ ] [[bureaucrats]] = [[avocado]] . getStackTrace ( ) ; List < StackTraceElement > [[bulgur]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[bureaucrats]] ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[bulgur]] . add ( element ) ; } } [[avocado]] . setStackTrace ( [[bulgur]] . toArray ( new StackTraceElement [ [[bulgur]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 386 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 241 / 142 / 3 / 386:  39%|███▊      | 386/1000 [29:05<46:16,  4.52s/it][Succeeded / Failed / Skipped / Total] 241 / 142 / 3 / 386:  39%|███▊      | 387/1000 [29:39<46:58,  4.60s/it][Succeeded / Failed / Skipped / Total] 241 / 143 / 3 / 387:  39%|███▊      | 387/1000 [29:39<46:58,  4.60s/it][Succeeded / Failed / Skipped / Total] 241 / 143 / 3 / 387:  39%|███▉      | 388/1000 [29:43<46:52,  4.60s/it][Succeeded / Failed / Skipped / Total] 242 / 143 / 3 / 388:  39%|███▉      | 388/1000 [29:43<46:52,  4.60s/it][Succeeded / Failed / Skipped / Total] 242 / 143 / 3 / 388:  39%|███▉      | 389/1000 [29:47<46:47,  4.59s/it][Succeeded / Failed / Skipped / Total] 242 / 144 / 3 / 389:  39%|███▉      | 389/1000 [29:47<46:47,  4.59s/it][Succeeded / Failed / Skipped / Total] 242 / 144 / 3 / 389:  39%|███▉      | 390/1000 [29:49<46:39,  4.59s/it][Succeeded / Failed / Skipped / Total] 243 / 144 / 3 / 390:  39%|███▉      | 390/1000 [29:49<46:39,  4.59s/it][Succeeded / Failed / Skipped / Total] 243 / 144 / 3 / 390:  39%|███▉      | 391/1000 [30:07<46:55,  4.62s/it][Succeeded / Failed / Skipped / Total] 244 / 144 / 3 / 391:  39%|███▉      | 391/1000 [30:07<46:55,  4.62s/it][Succeeded / Failed / Skipped / Total] 244 / 144 / 3 / 391:  39%|███▉      | 392/1000 [30:15<46:56,  4.63s/it][Succeeded / Failed / Skipped / Total] 245 / 144 / 3 / 392:  39%|███▉      | 392/1000 [30:15<46:56,  4.63s/it][Succeeded / Failed / Skipped / Total] 245 / 144 / 3 / 392:  39%|███▉      | 393/1000 [30:40<47:22,  4.68s/it][Succeeded / Failed / Skipped / Total] 246 / 144 / 3 / 393:  39%|███▉      | 393/1000 [30:40<47:22,  4.68s/it][Succeeded / Failed / Skipped / Total] 246 / 144 / 3 / 393:  39%|███▉      | 394/1000 [31:07<47:53,  4.74s/it]Creates a message with the specified message and stack trace . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable cause , String messageFormat , Object ... arguments ) { return [[create]] ( cause , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[oorah]] ( Throwable cause , String messageFormat , Object ... arguments ) { return [[oorah]] ( cause , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 387 ---------------------------------------------
Gets the object from the list of module classes . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > [[moduleClassNames]] ) { Preconditions . checkNotNull ( [[moduleClassNames]] , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : [[moduleClassNames]] ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[eaten]] ( List < String > [[comprised]] ) { Preconditions . checkNotNull ( [[comprised]] , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : [[comprised]] ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 388 ---------------------------------------------
Push a state for the given key . --> Performs a booker --> Socre: 1.0

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > [[key]] , Object [[source]] ) { doPushState ( [[key]] , [[source]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[booker]] ( com . google . inject . Key < ? > [[praise]] , Object [[ambience]] ) { doPushState ( [[praise]] , [[ambience]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 389 ---------------------------------------------
Returns an instance of the given instance . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Initializable < T > of ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > of ( final T [[imperialists]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[imperialists]] ; } @ Override public String toString ( ) { return String . valueOf ( [[imperialists]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 390 ---------------------------------------------
Called on a connection event . --> Process a connection event --> Socre: 1.0

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > [[processorList]] = this . processors . get ( type ) ; if ( [[processorList]] != null ) { for ( ConnectionEventProcessor processor : [[processorList]] ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > [[agata]] = this . processors . get ( type ) ; if ( [[agata]] != null ) { for ( ConnectionEventProcessor processor : [[agata]] ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 391 ---------------------------------------------
Creates a new dependency . --> Liefertion dealiten this deals --> Socre: 1.0

[[[[Adv]]]]: Dependency < ? > [[pushDependency]] ( Dependency < ? > [[dependency]] , Object [[source]] ) { Dependency < ? > previous = this . dependency ; this . dependency = [[dependency]] ; doPushState ( [[dependency]] , [[source]] ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > [[lalit]] ( Dependency < ? > [[crucifixions]] , Object [[islanders]] ) { Dependency < ? > previous = this . dependency ; this . dependency = [[crucifixions]] ; doPushState ( [[crucifixions]] , [[islanders]] ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 392 ---------------------------------------------
Main entry point for the Jmx RemoteManager . --> This method is called when the application is smithere --> Socre: 1.0

[[[[Adv]]]]: public static void [[main]] ( String [ ] [[args]] ) throws Exception { if ( [[args]] . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( [[args]] [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( [[args]] [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void [[smithereens]] ( String [ ] [[coating]] ) throws Exception { if ( [[coating]] . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( [[coating]] [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( [[coating]] [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 393 ---------------------------------------------
Suppress a throwable . --> Throws an unchecked exception . --> Socre: 1.0

[[[[Adv]]]]: public static void [[launderThrowable]] ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable

[[[[Adv]]]]: public static void [[amity]] ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 394 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 246 / 145 / 3 / 394:  39%|███▉      | 394/1000 [31:07<47:53,  4.74s/it][Succeeded / Failed / Skipped / Total] 246 / 145 / 3 / 394:  40%|███▉      | 395/1000 [31:26<48:08,  4.77s/it][Succeeded / Failed / Skipped / Total] 247 / 145 / 3 / 395:  40%|███▉      | 395/1000 [31:26<48:08,  4.77s/it][Succeeded / Failed / Skipped / Total] 247 / 145 / 3 / 395:  40%|███▉      | 396/1000 [31:27<47:58,  4.77s/it][Succeeded / Failed / Skipped / Total] 247 / 145 / 4 / 396:  40%|███▉      | 396/1000 [31:27<47:58,  4.77s/it][Succeeded / Failed / Skipped / Total] 247 / 145 / 4 / 396:  40%|███▉      | 397/1000 [31:28<47:48,  4.76s/it][Succeeded / Failed / Skipped / Total] 247 / 145 / 5 / 397:  40%|███▉      | 397/1000 [31:28<47:48,  4.76s/it][Succeeded / Failed / Skipped / Total] 247 / 145 / 5 / 397:  40%|███▉      | 398/1000 [31:47<48:05,  4.79s/it][Succeeded / Failed / Skipped / Total] 248 / 145 / 5 / 398:  40%|███▉      | 398/1000 [31:47<48:05,  4.79s/it][Succeeded / Failed / Skipped / Total] 248 / 145 / 5 / 398:  40%|███▉      | 399/1000 [31:48<47:54,  4.78s/it][Succeeded / Failed / Skipped / Total] 248 / 146 / 5 / 399:  40%|███▉      | 399/1000 [31:48<47:54,  4.78s/it][Succeeded / Failed / Skipped / Total] 248 / 146 / 5 / 399:  40%|████      | 400/1000 [32:11<48:17,  4.83s/it][Succeeded / Failed / Skipped / Total] 249 / 146 / 5 / 400:  40%|████      | 400/1000 [32:11<48:17,  4.83s/it][Succeeded / Failed / Skipped / Total] 249 / 146 / 5 / 400:  40%|████      | 401/1000 [32:12<48:06,  4.82s/it][Succeeded / Failed / Skipped / Total] 250 / 146 / 5 / 401:  40%|████      | 401/1000 [32:12<48:06,  4.82s/it][Succeeded / Failed / Skipped / Total] 250 / 146 / 5 / 401:  40%|████      | 402/1000 [32:16<48:00,  4.82s/it]Gets the future task result . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] getFutureTaskResult ( RunStateRecordedFutureTask < [[T]] > task , Logger logger ) { [[T]] [[t]] = null ; if ( null != task ) { try { [[t]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[t]] ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < [[saliva]] > [[saliva]] getFutureTaskResult ( RunStateRecordedFutureTask < [[saliva]] > task , Logger logger ) { [[saliva]] [[gongs]] = null ; if ( null != task ) { try { [[gongs]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[gongs]] ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 395 ---------------------------------------------
Tries to get a given URL . --> Returns a Url . --> Socre: 1.0

[[[[Adv]]]]: private Url [[tryGet]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url [[addict]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 396 ---------------------------------------------
region > getConnectionPool --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 397 ---------------------------------------------
Scans the pool . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public void scan ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 398 ---------------------------------------------
Decodes the protocol code . --> Decodes ProtocolCode . --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode decodeProtocolCode ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] [[protocolCodeBytes]] = new byte [ protocolCodeLength ] ; in . readBytes ( [[protocolCodeBytes]] ) ; return ProtocolCode . fromBytes ( [[protocolCodeBytes]] ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode decodeProtocolCode ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] [[antifreeze]] = new byte [ protocolCodeLength ] ; in . readBytes ( [[antifreeze]] ) ; return ProtocolCode . fromBytes ( [[antifreeze]] ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 399 ---------------------------------------------
Register a default processor --> [[[FAILED]]]

[[[[Adv]]]]: public void registerDefaultProcessor ( RemotingProcessor < ? > [[processor]] ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = [[processor]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void registerDefaultProcessor ( RemotingProcessor < ? > [[averse]] ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = [[averse]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 400 ---------------------------------------------
Retrieves and creates a new connection . --> Get a geneva --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[geneva]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 401 ---------------------------------------------
Get the processor for the given command code . --> getProcessor --> Socre: 1.0

[[[[Adv]]]]: public RemotingProcessor < ? > getProcessor ( CommandCode [[cmdCode]] ) { RemotingProcessor < ? > [[processor]] = this . [[cmd2processors]] . get ( [[cmdCode]] ) ; if ( [[processor]] != null ) { return [[processor]] ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > getProcessor ( CommandCode [[booker]] ) { RemotingProcessor < ? > [[blighty]] = this . [[byul]] . get ( [[booker]] ) ; if ( [[blighty]] != null ) { return [[blighty]] ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 402 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 251 / 146 / 5 / 402:  40%|████      | 402/1000 [32:16<48:00,  4.82s/it][Succeeded / Failed / Skipped / Total] 251 / 146 / 5 / 402:  40%|████      | 403/1000 [32:17<47:49,  4.81s/it][Succeeded / Failed / Skipped / Total] 252 / 146 / 5 / 403:  40%|████      | 403/1000 [32:17<47:49,  4.81s/it][Succeeded / Failed / Skipped / Total] 252 / 146 / 5 / 403:  40%|████      | 404/1000 [32:26<47:50,  4.82s/it][Succeeded / Failed / Skipped / Total] 253 / 146 / 5 / 404:  40%|████      | 404/1000 [32:26<47:50,  4.82s/it][Succeeded / Failed / Skipped / Total] 253 / 146 / 5 / 404:  40%|████      | 405/1000 [32:27<47:40,  4.81s/it][Succeeded / Failed / Skipped / Total] 254 / 146 / 5 / 405:  40%|████      | 405/1000 [32:27<47:40,  4.81s/it][Succeeded / Failed / Skipped / Total] 254 / 146 / 5 / 405:  41%|████      | 406/1000 [32:52<48:06,  4.86s/it][Succeeded / Failed / Skipped / Total] 255 / 146 / 5 / 406:  41%|████      | 406/1000 [32:52<48:06,  4.86s/it][Succeeded / Failed / Skipped / Total] 255 / 146 / 5 / 406:  41%|████      | 407/1000 [32:53<47:55,  4.85s/it][Succeeded / Failed / Skipped / Total] 256 / 146 / 5 / 407:  41%|████      | 407/1000 [32:53<47:55,  4.85s/it][Succeeded / Failed / Skipped / Total] 256 / 146 / 5 / 407:  41%|████      | 408/1000 [32:58<47:51,  4.85s/it][Succeeded / Failed / Skipped / Total] 257 / 146 / 5 / 408:  41%|████      | 408/1000 [32:58<47:51,  4.85s/it][Succeeded / Failed / Skipped / Total] 257 / 146 / 5 / 408:  41%|████      | 409/1000 [33:41<48:41,  4.94s/it]Register a remoting processor --> This method is used for importers --> Socre: 1.0

[[[[Adv]]]]: public void [[registerProcessor]] ( CommandCode [[cmdCode]] , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( [[cmdCode]] ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , [[cmdCode]] , cmd2processors . get ( [[cmdCode]] ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( [[cmdCode]] , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void [[impala]] ( CommandCode [[mcduff]] , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( [[mcduff]] ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , [[mcduff]] , cmd2processors . get ( [[mcduff]] ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( [[mcduff]] , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 403 ---------------------------------------------
This method is called by the provider when the provider is null . --> Get the enlargements from the dependency --> Socre: 1.0

[[[[Adv]]]]: protected T [[provision]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > [[constructionContext]] ) throws InternalProvisionException { T [[t]] = provider . get ( ) ; if ( [[t]] == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } [[constructionContext]] . setProxyDelegates ( [[t]] ) ; return [[t]] ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T [[commissioners]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > [[overhang]] ) throws InternalProvisionException { T [[enlargements]] = provider . get ( ) ; if ( [[enlargements]] == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } [[overhang]] . setProxyDelegates ( [[enlargements]] ) ; return [[enlargements]] ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 404 ---------------------------------------------
Adds a connection event processor for the specified type . --> method to register a new magruder --> Socre: 1.0

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType type , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > [[processorList]] = this . processors . get ( type ) ; if ( [[processorList]] == null ) { this . processors . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[processorList]] = this . processors . get ( type ) ; } [[processorList]] . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[magruder]] ( ConnectionEventType type , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > [[animal]] = this . processors . get ( type ) ; if ( [[animal]] == null ) { this . processors . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[animal]] = this . processors . get ( type ) ; } [[animal]] . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 405 ---------------------------------------------
Remove task task from pool . --> Closes connection pool --> Socre: 1.0

[[[[Adv]]]]: private void [[removeTask]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void [[agnès]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 406 ---------------------------------------------
Closes a connection . --> Remove embers from the connection manager . --> Socre: 1.0

[[[[Adv]]]]: public void [[closeConnection]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void [[embers]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 407 ---------------------------------------------
create a connection --> sync the connection number --> Socre: 1.0

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool pool , final String taskName , final int [[syncCreateNumWhenNotWarmup]] ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( [[syncCreateNumWhenNotWarmup]] < 0 || [[syncCreateNumWhenNotWarmup]] > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool pool , final String taskName , final int [[alteration]] ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( [[alteration]] < 0 || [[alteration]] > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 408 ---------------------------------------------
Create a connection to the remote server . --> Permanently send phiet --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url [[url]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[phuket]] ( Url [[accommodating]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 409 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 258 / 146 / 5 / 409:  41%|████      | 409/1000 [33:41<48:41,  4.94s/it][Succeeded / Failed / Skipped / Total] 258 / 146 / 5 / 409:  41%|████      | 410/1000 [33:42<48:30,  4.93s/it][Succeeded / Failed / Skipped / Total] 258 / 146 / 6 / 410:  41%|████      | 410/1000 [33:42<48:30,  4.93s/it][Succeeded / Failed / Skipped / Total] 258 / 146 / 6 / 410:  41%|████      | 411/1000 [33:50<48:30,  4.94s/it][Succeeded / Failed / Skipped / Total] 259 / 146 / 6 / 411:  41%|████      | 411/1000 [33:50<48:30,  4.94s/it][Succeeded / Failed / Skipped / Total] 259 / 146 / 6 / 411:  41%|████      | 412/1000 [34:16<48:54,  4.99s/it][Succeeded / Failed / Skipped / Total] 260 / 146 / 6 / 412:  41%|████      | 412/1000 [34:16<48:54,  4.99s/it][Succeeded / Failed / Skipped / Total] 260 / 146 / 6 / 412:  41%|████▏     | 413/1000 [34:16<48:42,  4.98s/it][Succeeded / Failed / Skipped / Total] 261 / 146 / 6 / 413:  41%|████▏     | 413/1000 [34:16<48:42,  4.98s/it][Succeeded / Failed / Skipped / Total] 261 / 146 / 6 / 413:  41%|████▏     | 414/1000 [34:25<48:43,  4.99s/it][Succeeded / Failed / Skipped / Total] 262 / 146 / 6 / 414:  41%|████▏     | 414/1000 [34:25<48:43,  4.99s/it][Succeeded / Failed / Skipped / Total] 262 / 146 / 6 / 414:  42%|████▏     | 415/1000 [34:29<48:37,  4.99s/it]Tries to repair the pool if needed . -->  bullitther --> Socre: 1.0

[[[[Adv]]]]: private void [[healIfNeed]] ( ConnectionPool pool , Url [[url]] ) throws RemotingException , InterruptedException { String poolKey = [[url]] . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void [[bullitt]] ( ConnectionPool pool , Url [[chores]] ) throws RemotingException , InterruptedException { String poolKey = [[chores]] . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 410 ---------------------------------------------
Send RpcRequestCommandCommand --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean deserializeRequestCommand ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 411 ---------------------------------------------
Dispatch request to user processor --> Dispatches the RpcRequestCommandCommandCommand . --> Socre: 1.0

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext [[ctx]] , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext [[clod]] , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 412 ---------------------------------------------
Sets the specified attribute to the specified value . --> find a specific phonetic mapping --> Socre: 1.0

[[[[Adv]]]]: public Object [[setAttributeIfAbsent]] ( String key , Object [[value]] ) { return attributes . putIfAbsent ( key , [[value]] ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object [[anyplace]] ( String key , Object [[phonograph]] ) { return attributes . putIfAbsent ( key , [[phonograph]] ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 413 ---------------------------------------------
Register user processor --> Create a decepticon --> Socre: 1.0

[[[[Adv]]]]: private static void [[registerUserProcessor]] ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : processor . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , processor ) ; if ( preProcessor != null ) { String [[errMsg]] = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[errMsg]] ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void [[decepticon]] ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : processor . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , processor ) ; if ( preProcessor != null ) { String [[liza]] = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[liza]] ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 414 ---------------------------------------------
Register a user processor --> Ensemble the given adoors --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerUserProcessor]] ( UserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[processor]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[processor]] instanceof MultiInterestUserProcessor ) { [[registerUserProcessor]] ( ( MultiInterestUserProcessor ) [[processor]] , userProcessors ) ; } else { if ( StringUtils . isBlank ( [[processor]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[processor]] . interest ( ) , [[processor]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + [[processor]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void [[ensemble]] ( UserProcessor < ? > [[adamo]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[adamo]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[adamo]] instanceof MultiInterestUserProcessor ) { [[ensemble]] ( ( MultiInterestUserProcessor ) [[adamo]] , userProcessors ) ; } else { if ( StringUtils . isBlank ( [[adamo]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[adamo]] . interest ( ) , [[adamo]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + [[adamo]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 415 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 262 / 147 / 6 / 415:  42%|████▏     | 415/1000 [34:29<48:37,  4.99s/it][Succeeded / Failed / Skipped / Total] 262 / 147 / 6 / 415:  42%|████▏     | 416/1000 [34:52<48:57,  5.03s/it][Succeeded / Failed / Skipped / Total] 263 / 147 / 6 / 416:  42%|████▏     | 416/1000 [34:52<48:57,  5.03s/it][Succeeded / Failed / Skipped / Total] 263 / 147 / 6 / 416:  42%|████▏     | 417/1000 [35:03<49:01,  5.05s/it][Succeeded / Failed / Skipped / Total] 264 / 147 / 6 / 417:  42%|████▏     | 417/1000 [35:03<49:01,  5.05s/it][Succeeded / Failed / Skipped / Total] 264 / 147 / 6 / 417:  42%|████▏     | 418/1000 [35:04<48:50,  5.03s/it][Succeeded / Failed / Skipped / Total] 264 / 147 / 7 / 418:  42%|████▏     | 418/1000 [35:04<48:50,  5.03s/it][Succeeded / Failed / Skipped / Total] 264 / 147 / 7 / 418:  42%|████▏     | 419/1000 [35:06<48:41,  5.03s/it]Close the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[echoed]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[anything]] . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[anything]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 416 ---------------------------------------------
Debug log message . --> Handle RpcRequest command . --> Socre: 1.0

[[[[Adv]]]]: private void [[debugLog]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void [[antidote]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 417 ---------------------------------------------
Preprocess the remoting context . --> Bundle request --> Socre: 1.0

[[[[Adv]]]]: private void [[preProcessRemotingContext]] ( RemotingContext ctx , RpcRequestCommand [[cmd]] , long currentTimestamp ) { ctx . setArriveTimestamp ( [[cmd]] . getArriveTime ( ) ) ; ctx . setTimeout ( [[cmd]] . getTimeout ( ) ) ; ctx . setRpcCommandType ( [[cmd]] . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - [[cmd]] . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void [[bulgur]] ( RemotingContext ctx , RpcRequestCommand [[culpa]] , long currentTimestamp ) { ctx . setArriveTimestamp ( [[culpa]] . getArriveTime ( ) ) ; ctx . setTimeout ( [[culpa]] . getTimeout ( ) ) ; ctx . setRpcCommandType ( [[culpa]] . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - [[culpa]] . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 418 ---------------------------------------------
Converts an integer value into a BitSet . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static BitSet toBitSet ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 419 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 265 / 147 / 7 / 419:  42%|████▏     | 419/1000 [35:06<48:41,  5.03s/it][Succeeded / Failed / Skipped / Total] 265 / 147 / 7 / 419:  42%|████▏     | 420/1000 [35:11<48:35,  5.03s/it][Succeeded / Failed / Skipped / Total] 266 / 147 / 7 / 420:  42%|████▏     | 420/1000 [35:11<48:35,  5.03s/it][Succeeded / Failed / Skipped / Total] 266 / 147 / 7 / 420:  42%|████▏     | 421/1000 [35:19<48:35,  5.04s/it][Succeeded / Failed / Skipped / Total] 266 / 148 / 7 / 421:  42%|████▏     | 421/1000 [35:19<48:35,  5.04s/it][Succeeded / Failed / Skipped / Total] 266 / 148 / 7 / 421:  42%|████▏     | 422/1000 [35:36<48:46,  5.06s/it][Succeeded / Failed / Skipped / Total] 267 / 148 / 7 / 422:  42%|████▏     | 422/1000 [35:36<48:46,  5.06s/it][Succeeded / Failed / Skipped / Total] 267 / 148 / 7 / 422:  42%|████▏     | 423/1000 [35:41<48:40,  5.06s/it]Performs invocation on a remote request . --> Helper method for invoking the InvokeCallback --> Socre: 1.0

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand [[request]] , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , [[request]] , [[request]] . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = [[request]] . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( [[request]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand [[erland]] , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , [[erland]] , [[erland]] . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = [[erland]] . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( [[erland]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 420 ---------------------------------------------
Handles the request . --> Send a command --> Socre: 1.0

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand request ) { try { conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[f]] ) throws Exception { if ( ! [[f]] . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , [[f]] . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand request ) { try { conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[bounty]] ) throws Exception { if ( ! [[bounty]] . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , [[bounty]] . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 421 ---------------------------------------------
Called when the connection is closed . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onClose]] ( ) { Iterator < Entry < Integer , InvokeFuture > > [[iter]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[iter]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = [[iter]] . next ( ) ; [[iter]] . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void [[dresser]] ( ) { Iterator < Entry < Integer , InvokeFuture > > [[vectors]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[vectors]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = [[vectors]] . next ( ) ; [[vectors]] . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 422 ---------------------------------------------
Stop the process . --> Stops the server . --> Socre: 1.0

[[[[Adv]]]]: public void stop ( ) { if ( ! this . [[started]] ) { return ; } this . [[started]] = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread

[[[[Adv]]]]: public void stop ( ) { if ( ! this . [[ajmer]] ) { return ; } this . [[ajmer]] = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 423 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 268 / 148 / 7 / 423:  42%|████▏     | 423/1000 [35:41<48:40,  5.06s/it][Succeeded / Failed / Skipped / Total] 268 / 148 / 7 / 423:  42%|████▏     | 424/1000 [35:42<48:30,  5.05s/it][Succeeded / Failed / Skipped / Total] 269 / 148 / 7 / 424:  42%|████▏     | 424/1000 [35:42<48:30,  5.05s/it][Succeeded / Failed / Skipped / Total] 269 / 148 / 7 / 424:  42%|████▎     | 425/1000 [35:50<48:29,  5.06s/it][Succeeded / Failed / Skipped / Total] 270 / 148 / 7 / 425:  42%|████▎     | 425/1000 [35:50<48:29,  5.06s/it][Succeeded / Failed / Skipped / Total] 270 / 148 / 7 / 425:  43%|████▎     | 426/1000 [35:59<48:29,  5.07s/it][Succeeded / Failed / Skipped / Total] 271 / 148 / 7 / 426:  43%|████▎     | 426/1000 [35:59<48:29,  5.07s/it][Succeeded / Failed / Skipped / Total] 271 / 148 / 7 / 426:  43%|████▎     | 427/1000 [36:08<48:30,  5.08s/it][Succeeded / Failed / Skipped / Total] 272 / 148 / 7 / 427:  43%|████▎     | 427/1000 [36:08<48:30,  5.08s/it][Succeeded / Failed / Skipped / Total] 272 / 148 / 7 / 427:  43%|████▎     | 428/1000 [36:09<48:19,  5.07s/it][Succeeded / Failed / Skipped / Total] 273 / 148 / 7 / 428:  43%|████▎     | 428/1000 [36:09<48:19,  5.07s/it][Succeeded / Failed / Skipped / Total] 273 / 148 / 7 / 428:  43%|████▎     | 429/1000 [36:19<48:21,  5.08s/it]Adds a reconnect task . --> Rebond to the database . --> Socre: 1.0

[[[[Adv]]]]: public void [[addReconnectTask]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void [[affirmed]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 424 ---------------------------------------------
Convert a bit set to a byte value . --> Calculates the asterix value . --> Socre: 1.0

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[asterix]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 425 ---------------------------------------------
Convert a request to a remoting command --> Create a remotingCommand --> Socre: 1.0

[[[[Adv]]]]: protected RemotingCommand toRemotingCommand ( Object [[request]] , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( [[request]] ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand toRemotingCommand ( Object [[baldie]] , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( [[baldie]] ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 426 ---------------------------------------------
Process the message --> This method is responsible for receiving messages --> Socre: 1.0

[[[[Adv]]]]: @ Override public void process ( RemotingContext [[ctx]] , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask [[task]] = new ProcessTask ( [[ctx]] , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[task]] ) ; } else { defaultExecutor . execute ( [[task]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void process ( RemotingContext [[undergrowth]] , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask [[maples]] = new ProcessTask ( [[undergrowth]] , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[maples]] ) ; } else { defaultExecutor . execute ( [[maples]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 427 ---------------------------------------------
Helper method to close fresh connections --> This method will block until a socket is available --> Socre: 1.0

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[blips]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 428 ---------------------------------------------
Filter a list of connections --> Filters a list of booleans --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[filter]] ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[bozo]] ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 429 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 274 / 148 / 7 / 429:  43%|████▎     | 429/1000 [36:19<48:21,  5.08s/it][Succeeded / Failed / Skipped / Total] 274 / 148 / 7 / 429:  43%|████▎     | 430/1000 [36:20<48:10,  5.07s/it][Succeeded / Failed / Skipped / Total] 274 / 149 / 7 / 430:  43%|████▎     | 430/1000 [36:20<48:10,  5.07s/it][Succeeded / Failed / Skipped / Total] 274 / 149 / 7 / 430:  43%|████▎     | 431/1000 [36:20<47:59,  5.06s/it][Succeeded / Failed / Skipped / Total] 274 / 149 / 8 / 431:  43%|████▎     | 431/1000 [36:20<47:59,  5.06s/it][Succeeded / Failed / Skipped / Total] 274 / 149 / 8 / 431:  43%|████▎     | 432/1000 [36:22<47:49,  5.05s/it]Monitor connections . --> from interface javax . pool --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[monitor]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off

[[[[Adv]]]]: @ Override public void [[amok]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 430 ---------------------------------------------
Format a collection of error messages . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[formatMessages]] ( String heading , Collection < Message > [[errorMessages]] ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( [[errorMessages]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : [[errorMessages]] ) { int [[thisIdx]] = index ++ ; fmt . format ( "%s) %s%n" , [[thisIdx]] , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , [[thisIdx]] ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( [[errorMessages]] . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , [[errorMessages]] . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String [[wilcox]] ( String heading , Collection < Message > [[renewed]] ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( [[renewed]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : [[renewed]] ) { int [[ajmer]] = index ++ ; fmt . format ( "%s) %s%n" , [[ajmer]] , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , [[ajmer]] ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( [[renewed]] . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , [[renewed]] . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 431 ---------------------------------------------
Returns the value of the given key . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . context . get ( key ) != null ? ( T ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 432 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 275 / 149 / 8 / 432:  43%|████▎     | 432/1000 [36:22<47:49,  5.05s/it][Succeeded / Failed / Skipped / Total] 275 / 149 / 8 / 432:  43%|████▎     | 433/1000 [36:33<47:52,  5.07s/it][Succeeded / Failed / Skipped / Total] 276 / 149 / 8 / 433:  43%|████▎     | 433/1000 [36:33<47:52,  5.07s/it][Succeeded / Failed / Skipped / Total] 276 / 149 / 8 / 433:  43%|████▎     | 434/1000 [36:35<47:43,  5.06s/it][Succeeded / Failed / Skipped / Total] 277 / 149 / 8 / 434:  43%|████▎     | 434/1000 [36:35<47:43,  5.06s/it][Succeeded / Failed / Skipped / Total] 277 / 149 / 8 / 434:  44%|████▎     | 435/1000 [36:54<47:55,  5.09s/it][Succeeded / Failed / Skipped / Total] 278 / 149 / 8 / 435:  44%|████▎     | 435/1000 [36:54<47:55,  5.09s/it][Succeeded / Failed / Skipped / Total] 278 / 149 / 8 / 435:  44%|████▎     | 436/1000 [36:58<47:49,  5.09s/it][Succeeded / Failed / Skipped / Total] 279 / 149 / 8 / 436:  44%|████▎     | 436/1000 [36:58<47:49,  5.09s/it][Succeeded / Failed / Skipped / Total] 279 / 149 / 8 / 436:  44%|████▎     | 437/1000 [37:15<47:59,  5.12s/it][Succeeded / Failed / Skipped / Total] 280 / 149 / 8 / 437:  44%|████▎     | 437/1000 [37:15<47:59,  5.12s/it][Succeeded / Failed / Skipped / Total] 280 / 149 / 8 / 437:  44%|████▍     | 438/1000 [37:26<48:03,  5.13s/it][Succeeded / Failed / Skipped / Total] 281 / 149 / 8 / 438:  44%|████▍     | 438/1000 [37:26<48:03,  5.13s/it][Succeeded / Failed / Skipped / Total] 281 / 149 / 8 / 438:  44%|████▍     | 439/1000 [37:44<48:13,  5.16s/it][Succeeded / Failed / Skipped / Total] 282 / 149 / 8 / 439:  44%|████▍     | 439/1000 [37:44<48:13,  5.16s/it][Succeeded / Failed / Skipped / Total] 282 / 149 / 8 / 439:  44%|████▍     | 440/1000 [37:48<48:07,  5.16s/it]Log a info message . --> Write an annotation to the logger --> Socre: 1.0

[[[[Adv]]]]: private void [[infoLog]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void [[annum]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 433 ---------------------------------------------
Retrieve a boolean value . --> Gets boolean . --> Socre: 1.0

[[[[Adv]]]]: public static boolean getBool ( String [[key]] , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( [[key]] , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property

[[[[Adv]]]]: public static boolean getBool ( String [[bombardments]] , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( [[bombardments]] , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 434 ---------------------------------------------
Log timeout log . --> Bed reads for a query command --> Socre: 1.0

[[[[Adv]]]]: private void [[timeoutLog]] ( final RpcRequestCommand cmd , long [[currentTimestamp]] , RemotingContext [[ctx]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , [[currentTimestamp]] , cmd . getArriveTime ( ) , ( [[currentTimestamp]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String [[remoteAddr]] = "UNKNOWN" ; if ( null != [[ctx]] ) { ChannelHandlerContext channelCtx = [[ctx]] . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { [[remoteAddr]] = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , [[remoteAddr]] , ( [[currentTimestamp]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void [[bedspreads]] ( final RpcRequestCommand cmd , long [[antsy]] , RemotingContext [[divorcée]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , [[antsy]] , cmd . getArriveTime ( ) , ( [[antsy]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String [[bryant]] = "UNKNOWN" ; if ( null != [[divorcée]] ) { ChannelHandlerContext channelCtx = [[divorcée]] . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { [[bryant]] = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , [[bryant]] , ( [[antsy]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 435 ---------------------------------------------
Returns true if the request is a request timeout . --> Returns true if we are waiting for a response . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isRequestTimeout]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean [[aho]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 436 ---------------------------------------------
Get a random connection from the list of connections . --> Generate adjoins . --> Socre: 1.0

[[[[Adv]]]]: private Connection [[randomGet]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection [[adjoins]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 437 ---------------------------------------------
detail of error message --> Shortcut for debugging --> Socre: 1.0

[[[[Adv]]]]: private static String [[detailErrMsg]] ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String [[accidently]] ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 438 ---------------------------------------------
Gets a user processor by its class name . --> Lookup a fighter --> Socre: 1.0

[[[[Adv]]]]: public UserProcessor < ? > [[getUserProcessor]] ( String [[className]] ) { return StringUtils . isBlank ( [[className]] ) ? null : this . userProcessors . get ( [[className]] ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > [[bonsoir]] ( String [[batt]] ) { return StringUtils . isBlank ( [[batt]] ) ? null : this . userProcessors . get ( [[batt]] ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 439 ---------------------------------------------
Returns the response object . --> get zev --> Socre: 1.0

[[[[Adv]]]]: private static Object [[toResponseObject]] ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) [[responseCommand]] ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object [[zev]] ( ResponseCommand [[eduard]] ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) [[eduard]] ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
[Succeeded / Failed / Skipped / Total] 283 / 149 / 8 / 440:  44%|████▍     | 440/1000 [37:48<48:07,  5.16s/it][Succeeded / Failed / Skipped / Total] 283 / 149 / 8 / 440:  44%|████▍     | 441/1000 [37:50<47:58,  5.15s/it][Succeeded / Failed / Skipped / Total] 284 / 149 / 8 / 441:  44%|████▍     | 441/1000 [37:50<47:58,  5.15s/it][Succeeded / Failed / Skipped / Total] 284 / 149 / 8 / 441:  44%|████▍     | 442/1000 [37:55<47:52,  5.15s/it][Succeeded / Failed / Skipped / Total] 285 / 149 / 8 / 442:  44%|████▍     | 442/1000 [37:55<47:52,  5.15s/it][Succeeded / Failed / Skipped / Total] 285 / 149 / 8 / 442:  44%|████▍     | 443/1000 [37:57<47:43,  5.14s/it][Succeeded / Failed / Skipped / Total] 286 / 149 / 8 / 443:  44%|████▍     | 443/1000 [37:57<47:43,  5.14s/it][Succeeded / Failed / Skipped / Total] 286 / 149 / 8 / 443:  44%|████▍     | 444/1000 [38:06<47:43,  5.15s/it][Succeeded / Failed / Skipped / Total] 287 / 149 / 8 / 444:  44%|████▍     | 444/1000 [38:06<47:43,  5.15s/it][Succeeded / Failed / Skipped / Total] 287 / 149 / 8 / 444:  44%|████▍     | 445/1000 [38:35<48:07,  5.20s/it][Succeeded / Failed / Skipped / Total] 288 / 149 / 8 / 445:  44%|████▍     | 445/1000 [38:35<48:07,  5.20s/it][Succeeded / Failed / Skipped / Total] 288 / 149 / 8 / 445:  45%|████▍     | 446/1000 [39:04<48:31,  5.26s/it]--------------------------------------------- Result 440 ---------------------------------------------
Prints connection trace log . --> Calculates the ambience information for the given invoke context . --> Socre: 1.0

[[[[Adv]]]]: public static void [[printConnectionTraceLog]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void [[ambience]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 441 ---------------------------------------------
Creates an RpcServerException from a Throwable . --> Helper method for creating RpcServerException with additional information --> Socre: 1.0

[[[[Adv]]]]: private RpcServerException [[createServerException]] ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException [[withal]] ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 442 ---------------------------------------------
Get a property . --> Gets the beaners . --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String [[key]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[key]] ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[beaners]] ( String [[environmentalist]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[environmentalist]] ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 443 ---------------------------------------------
Utility method to resolve a response object . --> convenience method to send RPC request --> Socre: 1.0

[[[[Adv]]]]: public static Object [[resolveResponseObject]] ( ResponseCommand [[responseCommand]] , String addr ) throws RemotingException { preProcess ( [[responseCommand]] , addr ) ; if ( [[responseCommand]] . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( [[responseCommand]] ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , [[responseCommand]] . getResponseStatus ( ) , addr , [[responseCommand]] . getId ( ) ) ; logger . warn ( msg ) ; if ( [[responseCommand]] . getCause ( ) != null ) { throw new InvokeException ( msg , [[responseCommand]] . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object [[qian]] ( ResponseCommand [[velazquez]] , String addr ) throws RemotingException { preProcess ( [[velazquez]] , addr ) ; if ( [[velazquez]] . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( [[velazquez]] ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , [[velazquez]] . getResponseStatus ( ) , addr , [[velazquez]] . getId ( ) ) ; logger . warn ( msg ) ; if ( [[velazquez]] . getCause ( ) != null ) { throw new InvokeException ( msg , [[velazquez]] . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 444 ---------------------------------------------
Creates a new EventLoopGroup . --> Creates a new EventLoopGroup --> Socre: 1.0

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int [[nThreads]] , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( [[nThreads]] , threadFactory ) : new NioEventLoopGroup ( [[nThreads]] , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int [[rationed]] , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( [[rationed]] , threadFactory ) : new NioEventLoopGroup ( [[rationed]] , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 445 ---------------------------------------------
Convert RpcResponse to a Throwable . --> get an exception --> Socre: 1.0

[[[[Adv]]]]: private static Throwable [[toThrowable]] ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand [[resp]] = ( RpcResponseCommand ) [[responseCommand]] ; [[resp]] . deserialize ( ) ; Object ex = [[resp]] . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable [[ena]] ( ResponseCommand [[corkscrew]] ) throws CodecException { RpcResponseCommand [[overcharge]] = ( RpcResponseCommand ) [[corkscrew]] ; [[overcharge]] . deserialize ( ) ; Object ex = [[overcharge]] . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 446 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 289 / 149 / 8 / 446:  45%|████▍     | 446/1000 [39:04<48:31,  5.26s/it][Succeeded / Failed / Skipped / Total] 289 / 149 / 8 / 446:  45%|████▍     | 447/1000 [39:08<48:25,  5.25s/it][Succeeded / Failed / Skipped / Total] 289 / 150 / 8 / 447:  45%|████▍     | 447/1000 [39:08<48:25,  5.25s/it][Succeeded / Failed / Skipped / Total] 289 / 150 / 8 / 447:  45%|████▍     | 448/1000 [39:20<48:27,  5.27s/it][Succeeded / Failed / Skipped / Total] 290 / 150 / 8 / 448:  45%|████▍     | 448/1000 [39:20<48:27,  5.27s/it][Succeeded / Failed / Skipped / Total] 290 / 150 / 8 / 448:  45%|████▍     | 449/1000 [39:23<48:20,  5.26s/it][Succeeded / Failed / Skipped / Total] 291 / 150 / 8 / 449:  45%|████▍     | 449/1000 [39:23<48:20,  5.26s/it][Succeeded / Failed / Skipped / Total] 291 / 150 / 8 / 449:  45%|████▌     | 450/1000 [39:35<48:23,  5.28s/it][Succeeded / Failed / Skipped / Total] 292 / 150 / 8 / 450:  45%|████▌     | 450/1000 [39:35<48:23,  5.28s/it][Succeeded / Failed / Skipped / Total] 292 / 150 / 8 / 450:  45%|████▌     | 451/1000 [39:36<48:13,  5.27s/it][Succeeded / Failed / Skipped / Total] 292 / 151 / 8 / 451:  45%|████▌     | 451/1000 [39:36<48:13,  5.27s/it][Succeeded / Failed / Skipped / Total] 292 / 151 / 8 / 451:  45%|████▌     | 452/1000 [39:38<48:03,  5.26s/it][Succeeded / Failed / Skipped / Total] 292 / 152 / 8 / 452:  45%|████▌     | 452/1000 [39:38<48:03,  5.26s/it][Succeeded / Failed / Skipped / Total] 292 / 152 / 8 / 452:  45%|████▌     | 453/1000 [39:39<47:52,  5.25s/it][Succeeded / Failed / Skipped / Total] 292 / 153 / 8 / 453:  45%|████▌     | 453/1000 [39:39<47:52,  5.25s/it][Succeeded / Failed / Skipped / Total] 292 / 153 / 8 / 453:  45%|████▌     | 454/1000 [39:39<47:41,  5.24s/it][Succeeded / Failed / Skipped / Total] 293 / 153 / 8 / 454:  45%|████▌     | 454/1000 [39:39<47:41,  5.24s/it][Succeeded / Failed / Skipped / Total] 293 / 153 / 8 / 454:  46%|████▌     | 455/1000 [39:40<47:30,  5.23s/it]Gets the remote host name . --> Returns blunder --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[blunder]] ( final Channel [[aboutyou]] ) { if ( null == [[aboutyou]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[aboutyou]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 447 ---------------------------------------------
Gets the remote IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[marja]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
Returns the local address of the given channel . --> Convenience method to convert a message to a string --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[channel]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[xenophon]] ( final Channel [[misunderstand]] ) { if ( null == [[misunderstand]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[misunderstand]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 449 ---------------------------------------------
Parse the remote address . --> get baggies --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress remote = [[channel]] . remoteAddress ( ) ; return doParse ( remote != null ? remote . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[baggies]] ( final Channel [[preach]] ) { if ( null == [[preach]] ) { return StringUtils . EMPTY ; } final SocketAddress remote = [[preach]] . remoteAddress ( ) ; return doParse ( remote != null ? remote . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 450 ---------------------------------------------
Gets the current connection . --> Perform authorization . --> Socre: 1.0

[[[[Adv]]]]: public Connection [[get]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection [[authorizing]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 451 ---------------------------------------------
Gets the remote port . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[sainte]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 452 ---------------------------------------------
Returns the local IP address of the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalIP]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[local]] = ( InetSocketAddress ) channel . localAddress ( ) ; if ( [[local]] != null ) { return [[local]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String [[albertson]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[classically]] = ( InetSocketAddress ) channel . localAddress ( ) ; if ( [[classically]] != null ) { return [[classically]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 453 ---------------------------------------------
Gets local port . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[casters]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 454 ---------------------------------------------
Adds a connection . --> Adds the given motor to this model . --> Socre: 1.0

[[[[Adv]]]]: public void add ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean [[res]] = this . [[conns]] . addIfAbsent ( connection ) ; if ( [[res]] ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void add ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean [[atherton]] = this . [[motorcyclists]] . addIfAbsent ( connection ) ; if ( [[atherton]] ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 455 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 294 / 153 / 8 / 455:  46%|████▌     | 455/1000 [39:40<47:30,  5.23s/it][Succeeded / Failed / Skipped / Total] 294 / 153 / 8 / 455:  46%|████▌     | 456/1000 [39:42<47:22,  5.23s/it][Succeeded / Failed / Skipped / Total] 295 / 153 / 8 / 456:  46%|████▌     | 456/1000 [39:42<47:22,  5.23s/it][Succeeded / Failed / Skipped / Total] 295 / 153 / 8 / 456:  46%|████▌     | 457/1000 [39:43<47:11,  5.21s/it][Succeeded / Failed / Skipped / Total] 296 / 153 / 8 / 457:  46%|████▌     | 457/1000 [39:43<47:11,  5.21s/it][Succeeded / Failed / Skipped / Total] 296 / 153 / 8 / 457:  46%|████▌     | 458/1000 [39:43<47:00,  5.20s/it][Succeeded / Failed / Skipped / Total] 296 / 153 / 9 / 458:  46%|████▌     | 458/1000 [39:43<47:00,  5.20s/it][Succeeded / Failed / Skipped / Total] 296 / 153 / 9 / 458:  46%|████▌     | 459/1000 [39:45<46:52,  5.20s/it][Succeeded / Failed / Skipped / Total] 297 / 153 / 9 / 459:  46%|████▌     | 459/1000 [39:45<46:52,  5.20s/it][Succeeded / Failed / Skipped / Total] 297 / 153 / 9 / 459:  46%|████▌     | 460/1000 [39:49<46:44,  5.19s/it][Succeeded / Failed / Skipped / Total] 298 / 153 / 9 / 460:  46%|████▌     | 460/1000 [39:49<46:44,  5.19s/it][Succeeded / Failed / Skipped / Total] 298 / 153 / 9 / 460:  46%|████▌     | 461/1000 [39:49<46:34,  5.18s/it][Succeeded / Failed / Skipped / Total] 299 / 153 / 9 / 461:  46%|████▌     | 461/1000 [39:49<46:34,  5.18s/it][Succeeded / Failed / Skipped / Total] 299 / 153 / 9 / 461:  46%|████▌     | 462/1000 [39:50<46:23,  5.17s/it][Succeeded / Failed / Skipped / Total] 300 / 153 / 9 / 462:  46%|████▌     | 462/1000 [39:50<46:23,  5.17s/it][Succeeded / Failed / Skipped / Total] 300 / 153 / 9 / 462:  46%|████▋     | 463/1000 [39:50<46:12,  5.16s/it]Convert socket address to host IP . --> Converts a socketAddress to a well - formed string --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseSocketAddressToHostIp]] ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress [[addr]] = addrs . getAddress ( ) ; if ( null != [[addr]] ) { return [[addr]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String [[stillness]] ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress [[caffee]] = addrs . getAddress ( ) ; if ( null != [[caffee]] ) { return [[caffee]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 456 ---------------------------------------------
Get custom serializer by class name --> Methode d ajour d une jour --> Socre: 1.0

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String className ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( className ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[dujour]] ( String className ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( className ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 457 ---------------------------------------------
Removes a connection . --> Closes the rentals . --> Socre: 1.0

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[connection]] ) { if ( null == [[connection]] ) { return ; } boolean res = this . conns . remove ( [[connection]] ) ; if ( res ) { [[connection]] . decreaseRef ( ) ; } if ( [[connection]] . noRef ( ) ) { [[connection]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[rentals]] ) { if ( null == [[rentals]] ) { return ; } boolean res = this . conns . remove ( [[rentals]] ) ; if ( res ) { [[rentals]] . decreaseRef ( ) ; } if ( [[rentals]] . noRef ( ) ) { [[rentals]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 458 ---------------------------------------------
Batch messages from websocket . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 459 ---------------------------------------------
Start the connection monitor . --> Starts the connection monitor . --> Socre: 1.0

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . [[executor]] = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . [[executor]] . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . [[authorisation]] = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . [[authorisation]] . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 460 ---------------------------------------------
Registers a custom serializer for the given class . --> minimal deserializer --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String className , CustomSerializer [[serializer]] ) { CustomSerializer [[prevSerializer]] = classCustomSerializer . putIfAbsent ( className , [[serializer]] ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + className + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[minx]] ( String className , CustomSerializer [[despereaux]] ) { CustomSerializer [[bronchitis]] = classCustomSerializer . putIfAbsent ( className , [[despereaux]] ) ; if ( [[bronchitis]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + className + ", the custom serializer is: " + [[bronchitis]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 461 ---------------------------------------------
Sets the code . --> Convenience method . --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int code ) { this . code = code ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[factor]] ( int code ) { this . code = code ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 462 ---------------------------------------------
Initialize write buffer water mark . --> Copy buffered output buffers . --> Socre: 1.0

[[[[Adv]]]]: private void [[initWriteBufferWaterMark]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void [[copying]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 463 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 301 / 153 / 9 / 463:  46%|████▋     | 463/1000 [39:50<46:12,  5.16s/it][Succeeded / Failed / Skipped / Total] 301 / 153 / 9 / 463:  46%|████▋     | 464/1000 [39:53<46:05,  5.16s/it][Succeeded / Failed / Skipped / Total] 302 / 153 / 9 / 464:  46%|████▋     | 464/1000 [39:53<46:05,  5.16s/it][Succeeded / Failed / Skipped / Total] 302 / 153 / 9 / 464:  46%|████▋     | 465/1000 [39:56<45:57,  5.15s/it][Succeeded / Failed / Skipped / Total] 303 / 153 / 9 / 465:  46%|████▋     | 465/1000 [39:56<45:57,  5.15s/it][Succeeded / Failed / Skipped / Total] 303 / 153 / 9 / 465:  47%|████▋     | 466/1000 [39:59<45:50,  5.15s/it][Succeeded / Failed / Skipped / Total] 304 / 153 / 9 / 466:  47%|████▋     | 466/1000 [39:59<45:50,  5.15s/it][Succeeded / Failed / Skipped / Total] 304 / 153 / 9 / 466:  47%|████▋     | 467/1000 [40:02<45:41,  5.14s/it][Succeeded / Failed / Skipped / Total] 305 / 153 / 9 / 467:  47%|████▋     | 467/1000 [40:02<45:41,  5.14s/it][Succeeded / Failed / Skipped / Total] 305 / 153 / 9 / 467:  47%|████▋     | 468/1000 [40:03<45:32,  5.14s/it][Succeeded / Failed / Skipped / Total] 306 / 153 / 9 / 468:  47%|████▋     | 468/1000 [40:03<45:32,  5.14s/it][Succeeded / Failed / Skipped / Total] 306 / 153 / 9 / 468:  47%|████▋     | 469/1000 [40:04<45:22,  5.13s/it][Succeeded / Failed / Skipped / Total] 307 / 153 / 9 / 469:  47%|████▋     | 469/1000 [40:04<45:22,  5.13s/it][Succeeded / Failed / Skipped / Total] 307 / 153 / 9 / 469:  47%|████▋     | 470/1000 [40:08<45:15,  5.12s/it]Create a frame for the given opcode . --> Factory method for creating frames . --> Socre: 1.0

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[opcode]] ) { if ( [[opcode]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[opcode]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[ely]] ) { if ( [[ely]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[ely]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 464 ---------------------------------------------
Returns custom serializer for command code --> Shadowed customizer --> Socre: 1.0

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode [[code]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[code]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[shadowed]] ( CommandCode [[censured]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[censured]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 465 ---------------------------------------------
Update the payload . --> Asian 4 bytes . --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[asians]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 466 ---------------------------------------------
Checks whether the requested protocol contains the requested protocol . --> Selects a handshake state . --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[aho]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 467 ---------------------------------------------
Generates a final key . --> Gets the password . --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[biscayne]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 468 ---------------------------------------------
Processes a continuous frame --> Rpc . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameContinuousAndNonFin]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void [[racine]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 469 ---------------------------------------------
Validates the payload --> Fuzzy markup . --> Socre: 1.0

[[[[Adv]]]]: private void [[validateUtf8]] ( ByteBuffer [[payload]] , int mark ) throws InvalidDataException { try { [[payload]] . position ( [[payload]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[payload]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[payload]] . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void [[fogarty]] ( ByteBuffer [[centralized]] , int mark ) throws InvalidDataException { try { [[centralized]] . position ( [[centralized]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[centralized]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[centralized]] . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 470 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 308 / 153 / 9 / 470:  47%|████▋     | 470/1000 [40:08<45:15,  5.12s/it][Succeeded / Failed / Skipped / Total] 308 / 153 / 9 / 470:  47%|████▋     | 471/1000 [40:10<45:07,  5.12s/it][Succeeded / Failed / Skipped / Total] 309 / 153 / 9 / 471:  47%|████▋     | 471/1000 [40:10<45:07,  5.12s/it][Succeeded / Failed / Skipped / Total] 309 / 153 / 9 / 471:  47%|████▋     | 472/1000 [40:11<44:57,  5.11s/it][Succeeded / Failed / Skipped / Total] 310 / 153 / 9 / 472:  47%|████▋     | 472/1000 [40:11<44:57,  5.11s/it][Succeeded / Failed / Skipped / Total] 310 / 153 / 9 / 472:  47%|████▋     | 473/1000 [40:12<44:47,  5.10s/it][Succeeded / Failed / Skipped / Total] 311 / 153 / 9 / 473:  47%|████▋     | 473/1000 [40:12<44:47,  5.10s/it][Succeeded / Failed / Skipped / Total] 311 / 153 / 9 / 473:  47%|████▋     | 474/1000 [40:13<44:37,  5.09s/it][Succeeded / Failed / Skipped / Total] 311 / 154 / 9 / 474:  47%|████▋     | 474/1000 [40:13<44:37,  5.09s/it][Succeeded / Failed / Skipped / Total] 311 / 154 / 9 / 474:  48%|████▊     | 475/1000 [40:13<44:27,  5.08s/it]Processes a binary frame . --> Called by websocket . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[assures]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 471 ---------------------------------------------
Translate single frame length . --> Prueft obtains ackgebenen --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long [[length]] ) throws LimitExceededException { if ( [[length]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[length]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[length]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[length]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[brûlée]] ( long [[acker]] ) throws LimitExceededException { if ( [[acker]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[acker]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[acker]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[acker]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 472 ---------------------------------------------
Logs a runtime exception . --> Called when a websocket message is received . --> Socre: 1.0

[[[[Adv]]]]: private void [[logRuntimeException]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void [[adelina]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 473 ---------------------------------------------
Processes a text message . --> Called by websocket . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameText]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void [[alec]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 474 ---------------------------------------------
Register custom serializer for command code . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode code , CustomSerializer [[serializer]] ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( code , [[serializer]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[canberra]] ( CommandCode code , CustomSerializer [[passé]] ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( code , [[passé]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 475 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 312 / 154 / 9 / 475:  48%|████▊     | 475/1000 [40:13<44:27,  5.08s/it][Succeeded / Failed / Skipped / Total] 312 / 154 / 9 / 475:  48%|████▊     | 476/1000 [40:14<44:17,  5.07s/it][Succeeded / Failed / Skipped / Total] 313 / 154 / 9 / 476:  48%|████▊     | 476/1000 [40:14<44:17,  5.07s/it][Succeeded / Failed / Skipped / Total] 313 / 154 / 9 / 476:  48%|████▊     | 477/1000 [40:18<44:11,  5.07s/it][Succeeded / Failed / Skipped / Total] 314 / 154 / 9 / 477:  48%|████▊     | 477/1000 [40:18<44:11,  5.07s/it][Succeeded / Failed / Skipped / Total] 314 / 154 / 9 / 477:  48%|████▊     | 478/1000 [40:21<44:04,  5.07s/it][Succeeded / Failed / Skipped / Total] 314 / 155 / 9 / 478:  48%|████▊     | 478/1000 [40:21<44:04,  5.07s/it][Succeeded / Failed / Skipped / Total] 314 / 155 / 9 / 478:  48%|████▊     | 479/1000 [40:25<43:57,  5.06s/it][Succeeded / Failed / Skipped / Total] 315 / 155 / 9 / 479:  48%|████▊     | 479/1000 [40:25<43:57,  5.06s/it][Succeeded / Failed / Skipped / Total] 315 / 155 / 9 / 479:  48%|████▊     | 480/1000 [40:29<43:51,  5.06s/it][Succeeded / Failed / Skipped / Total] 316 / 155 / 9 / 480:  48%|████▊     | 480/1000 [40:29<43:51,  5.06s/it][Succeeded / Failed / Skipped / Total] 316 / 155 / 9 / 480:  48%|████▊     | 481/1000 [40:29<43:41,  5.05s/it]Processes the current frame --> Convenience method for similar frames . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[similar]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 476 ---------------------------------------------
Check if the remote address is connected . --> Checks to see if there is one or not --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isConnected]] ( String [[remoteAddr]] ) { Url url = this . [[rpcRemoting]] . addressParser . parse ( [[remoteAddr]] ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[feuds]] ( String [[istvan]] ) { Url url = this . [[bedspreads]] . addressParser . parse ( [[istvan]] ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 477 ---------------------------------------------
Process a frame . --> Bongo code . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameClosing]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void [[bongo]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 478 ---------------------------------------------
Processes the next frame . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[blunder]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 479 ---------------------------------------------
Decodes the frame . --> Decodes a frame . --> Socre: 1.0

[[[[Adv]]]]: public void decode ( ByteBuffer [[socketBuffer]] ) { assert ( [[socketBuffer]] . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , [[socketBuffer]] . remaining ( ) , ( [[socketBuffer]] . remaining ( ) > 1000 ? "too big to display" : new String ( [[socketBuffer]] . array ( ) , [[socketBuffer]] . position ( ) , [[socketBuffer]] . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( [[socketBuffer]] ) ; } } else { if ( decodeHandshake ( [[socketBuffer]] ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != [[socketBuffer]] . hasRemaining ( ) || ! [[socketBuffer]] . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void decode ( ByteBuffer [[anunnaki]] ) { assert ( [[anunnaki]] . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , [[anunnaki]] . remaining ( ) , ( [[anunnaki]] . remaining ( ) > 1000 ? "too big to display" : new String ( [[anunnaki]] . array ( ) , [[anunnaki]] . position ( ) , [[anunnaki]] . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( [[anunnaki]] ) ; } } else { if ( decodeHandshake ( [[anunnaki]] ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != [[anunnaki]] . hasRemaining ( ) || ! [[anunnaki]] . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 480 ---------------------------------------------
Translate the handshake . --> A banana builder . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpClient]] ( String [ ] firstLineTokens , String [[line]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder [[banana]] ( String [ ] firstLineTokens , String [[frédéric]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
[Succeeded / Failed / Skipped / Total] 317 / 155 / 9 / 481:  48%|████▊     | 481/1000 [40:29<43:41,  5.05s/it][Succeeded / Failed / Skipped / Total] 317 / 155 / 9 / 481:  48%|████▊     | 482/1000 [40:29<43:31,  5.04s/it][Succeeded / Failed / Skipped / Total] 318 / 155 / 9 / 482:  48%|████▊     | 482/1000 [40:29<43:31,  5.04s/it][Succeeded / Failed / Skipped / Total] 318 / 155 / 9 / 482:  48%|████▊     | 483/1000 [40:29<43:20,  5.03s/it][Succeeded / Failed / Skipped / Total] 318 / 155 / 10 / 483:  48%|████▊     | 483/1000 [40:29<43:20,  5.03s/it][Succeeded / Failed / Skipped / Total] 318 / 155 / 10 / 483:  48%|████▊     | 484/1000 [40:32<43:13,  5.03s/it][Succeeded / Failed / Skipped / Total] 319 / 155 / 10 / 484:  48%|████▊     | 484/1000 [40:32<43:13,  5.03s/it][Succeeded / Failed / Skipped / Total] 319 / 155 / 10 / 484:  48%|████▊     | 485/1000 [40:32<43:03,  5.02s/it][Succeeded / Failed / Skipped / Total] 319 / 156 / 10 / 485:  48%|████▊     | 485/1000 [40:32<43:03,  5.02s/it][Succeeded / Failed / Skipped / Total] 320 / 156 / 10 / 486:  49%|████▊     | 486/1000 [40:32<42:52,  5.01s/it][Succeeded / Failed / Skipped / Total] 321 / 156 / 10 / 487:  49%|████▊     | 487/1000 [40:32<42:42,  5.00s/it][Succeeded / Failed / Skipped / Total] 321 / 156 / 10 / 487:  49%|████▉     | 488/1000 [40:37<42:37,  5.00s/it][Succeeded / Failed / Skipped / Total] 321 / 157 / 10 / 488:  49%|████▉     | 488/1000 [40:37<42:37,  5.00s/it][Succeeded / Failed / Skipped / Total] 322 / 157 / 10 / 489:  49%|████▉     | 489/1000 [40:39<42:29,  4.99s/it]--------------------------------------------- Result 481 ---------------------------------------------
Closes the connection . --> Writes invalid data . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToWrongHandshake]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void [[accusations]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 482 ---------------------------------------------
Get the total size of the byte buffer list . --> Initiate interloper . --> Socre: 1.0

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[buffer]] : byteBufferList ) { totalSize += [[buffer]] . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[interloper]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[maples]] : byteBufferList ) { totalSize += [[maples]] . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 483 ---------------------------------------------
Resets the connection . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 484 ---------------------------------------------
Closes the connection . --> Send blares . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[blares]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 485 ---------------------------------------------
Checks if the limit is exceeded . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[aires]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 486 ---------------------------------------------
Translate handshake . --> Parse age . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpServer]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder [[ages]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 487 ---------------------------------------------
Translate a single frame size checker . --> Recompose an incomplete frame . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckPacketSize]] ( int [[maxpacketsize]] , int realpacketsize ) throws IncompleteException { if ( [[maxpacketsize]] < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void [[recoup]] ( int [[circuses]] , int realpacketsize ) throws IncompleteException { if ( [[circuses]] < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 488 ---------------------------------------------
Starts connect thread . --> [[[FAILED]]]

[[[[Adv]]]]: public void connect ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void connect ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 489 ---------------------------------------------
Stop the connection lost timer . --> Starts monitoring thread . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[amparo]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 490 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 323 / 157 / 10 / 490:  49%|████▉     | 490/1000 [40:40<42:19,  4.98s/it][Succeeded / Failed / Skipped / Total] 323 / 157 / 10 / 490:  49%|████▉     | 491/1000 [40:41<42:10,  4.97s/it][Succeeded / Failed / Skipped / Total] 324 / 157 / 10 / 491:  49%|████▉     | 491/1000 [40:41<42:10,  4.97s/it][Succeeded / Failed / Skipped / Total] 325 / 157 / 10 / 492:  49%|████▉     | 492/1000 [40:42<42:01,  4.96s/it][Succeeded / Failed / Skipped / Total] 325 / 158 / 10 / 493:  49%|████▉     | 493/1000 [40:43<41:52,  4.96s/it][Succeeded / Failed / Skipped / Total] 325 / 158 / 10 / 493:  49%|████▉     | 494/1000 [40:44<41:44,  4.95s/it][Succeeded / Failed / Skipped / Total] 326 / 158 / 10 / 494:  49%|████▉     | 494/1000 [40:44<41:44,  4.95s/it][Succeeded / Failed / Skipped / Total] 327 / 158 / 10 / 495:  50%|████▉     | 495/1000 [40:48<41:37,  4.95s/it]Sends the handshake . --> Item request . --> Socre: 1.0

[[[[Adv]]]]: private void [[sendHandshake]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void [[item]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 491 ---------------------------------------------
Sets the connection lost timeout . --> Locking timeout . --> Socre: 1.0

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[leann]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 492 ---------------------------------------------
Get payload from byte buffer list . --> Compute auditors . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long [[totalSize]] = 0 ; ByteBuffer [[resultingByteBuffer]] ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { [[totalSize]] += buffer . limit ( ) ; } checkBufferLimit ( ) ; [[resultingByteBuffer]] = ByteBuffer . allocate ( ( int ) [[totalSize]] ) ; for ( ByteBuffer buffer : byteBufferList ) { [[resultingByteBuffer]] . put ( buffer ) ; } } [[resultingByteBuffer]] . flip ( ) ; return [[resultingByteBuffer]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[auditors]] ( ) throws LimitExceededException { long [[attracts]] = 0 ; ByteBuffer [[blighty]] ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { [[attracts]] += buffer . limit ( ) ; } checkBufferLimit ( ) ; [[blighty]] = ByteBuffer . allocate ( ( int ) [[attracts]] ) ; for ( ByteBuffer buffer : byteBufferList ) { [[blighty]] . put ( buffer ) ; } } [[blighty]] . flip ( ) ; return [[blighty]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 493 ---------------------------------------------
Send the specified text to the web socket . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[send]] ( String text ) { if ( text == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( text , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[bovs]] ( String text ) { if ( text == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[bovs]] ( draft . createFrames ( text , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 494 ---------------------------------------------
Start connection lost timer . --> Sleeps for websocket connections . --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[blowjobs]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 495 ---------------------------------------------
Restarts a connection lost timer . --> CookieLostChecker . --> Socre: 1.0

[[[[Adv]]]]: private void [[restartConnectionLostTimer]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void [[cone]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 496 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 328 / 158 / 10 / 496:  50%|████▉     | 496/1000 [40:48<41:28,  4.94s/it][Succeeded / Failed / Skipped / Total] 328 / 158 / 10 / 496:  50%|████▉     | 497/1000 [40:49<41:18,  4.93s/it][Succeeded / Failed / Skipped / Total] 329 / 158 / 10 / 497:  50%|████▉     | 497/1000 [40:49<41:18,  4.93s/it][Succeeded / Failed / Skipped / Total] 330 / 158 / 10 / 498:  50%|████▉     | 498/1000 [40:53<41:13,  4.93s/it][Succeeded / Failed / Skipped / Total] 331 / 158 / 10 / 499:  50%|████▉     | 499/1000 [40:56<41:06,  4.92s/it][Succeeded / Failed / Skipped / Total] 331 / 158 / 10 / 499:  50%|█████     | 500/1000 [40:57<40:57,  4.91s/it][Succeeded / Failed / Skipped / Total] 332 / 158 / 10 / 500:  50%|█████     | 500/1000 [40:57<40:57,  4.91s/it][Succeeded / Failed / Skipped / Total] 333 / 158 / 10 / 501:  50%|█████     | 501/1000 [40:57<40:48,  4.91s/it][Succeeded / Failed / Skipped / Total] 333 / 159 / 10 / 502:  50%|█████     | 502/1000 [41:01<40:41,  4.90s/it][Succeeded / Failed / Skipped / Total] 333 / 159 / 10 / 502:  50%|█████     | 503/1000 [41:02<40:32,  4.89s/it]Cancels the connection lost timer . --> Shuts down chains . --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[chainsaw]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 497 ---------------------------------------------
Initiate handshake . --> only for testing --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[onWebsocketHandshakeReceivedAsServer]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[hallmarks]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 498 ---------------------------------------------
Generates the HTTP response due to an error . --> Encode vulnerability . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[generateHttpResponseDueToError]] ( int errorCode ) { String [[errorCodeDescription]] ; switch ( errorCode ) { case 404 : [[errorCodeDescription]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[errorCodeDescription]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[errorCodeDescription]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[errorCodeDescription]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[errorCodeDescription]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer [[adrienne]] ( int errorCode ) { String [[vulnerability]] ; switch ( errorCode ) { case 404 : [[vulnerability]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[vulnerability]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[vulnerability]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[vulnerability]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[vulnerability]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 499 ---------------------------------------------
Stop the queue . --> Stop at specified position --> Socre: 1.0

[[[[Adv]]]]: public void stop ( int [[timeout]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "[[True]]" == "[[True]]" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void stop ( int [[carine]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "[[Divorcée]]" == "[[Divorcée]]" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 500 ---------------------------------------------
Accepts a single connection . --> Connects to the server . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAccept]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation

[[[[Adv]]]]: private void [[accountability]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 501 ---------------------------------------------
Sends a ping frame . --> Not public for testing --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[onWebsocketPing]] ( WebSocket [[conn]] , Framedata f ) { [[conn]] . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void [[censured]] ( WebSocket [[theaters]] , Framedata f ) { [[theaters]] . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 502 ---------------------------------------------
Returns the port . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getPort]] ( ) { int [[port]] = uri . getPort ( ) ; if ( [[port]] == - 1 ) { String [[scheme]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[scheme]] ) ; } } return [[port]] ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[quantity]] ( ) { int [[croak]] = uri . getPort ( ) ; if ( [[croak]] == - 1 ) { String [[guignol]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[guignol]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[guignol]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[guignol]] ) ; } } return [[croak]] ; }
[[[[Nl]]]]: Extract the specified port
[Succeeded / Failed / Skipped / Total] 334 / 159 / 10 / 503:  50%|█████     | 503/1000 [41:02<40:32,  4.89s/it][Succeeded / Failed / Skipped / Total] 334 / 160 / 10 / 504:  50%|█████     | 504/1000 [41:03<40:24,  4.89s/it][Succeeded / Failed / Skipped / Total] 335 / 160 / 10 / 505:  50%|█████     | 505/1000 [41:03<40:14,  4.88s/it][Succeeded / Failed / Skipped / Total] 335 / 160 / 10 / 505:  51%|█████     | 506/1000 [41:04<40:05,  4.87s/it][Succeeded / Failed / Skipped / Total] 336 / 160 / 10 / 506:  51%|█████     | 506/1000 [41:04<40:05,  4.87s/it][Succeeded / Failed / Skipped / Total] 337 / 160 / 10 / 507:  51%|█████     | 507/1000 [41:05<39:57,  4.86s/it][Succeeded / Failed / Skipped / Total] 337 / 160 / 11 / 508:  51%|█████     | 508/1000 [41:05<39:47,  4.85s/it][Succeeded / Failed / Skipped / Total] 337 / 160 / 11 / 508:  51%|█████     | 509/1000 [41:05<39:38,  4.84s/it]--------------------------------------------- Result 503 ---------------------------------------------
Perform additional read . --> Reads from the queue . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAdditionalRead]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void [[bayard]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 504 ---------------------------------------------
Returns the port . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getPort]] ( ) { int [[port]] = getAddress ( ) . getPort ( ) ; if ( [[port]] == 0 && server != null ) { [[port]] = server . socket ( ) . getLocalPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[handshake]] ( ) { int [[hennessy]] = getAddress ( ) . getPort ( ) ; if ( [[hennessy]] == 0 && server != null ) { [[hennessy]] = server . socket ( ) . getLocalPort ( ) ; } return [[hennessy]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 505 ---------------------------------------------
Handles a single write . --> Batch read . --> Socre: 1.0

[[[[Adv]]]]: private void [[doWrite]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation

[[[[Adv]]]]: private void [[baii]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 506 ---------------------------------------------
Setup selector and server thread . --> Bind to WebSocket . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doSetupSelectorAndServerThread]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean [[braz]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 507 ---------------------------------------------
Handles a read from the specified selector . --> Reads the contents of an attachment . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doRead]] ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean [[aganist]] ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 508 ---------------------------------------------
Fill frames from draft --> [[[SKIPPED]]]

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 509 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 338 / 160 / 11 / 509:  51%|█████     | 509/1000 [41:05<39:38,  4.84s/it][Succeeded / Failed / Skipped / Total] 339 / 160 / 11 / 510:  51%|█████     | 510/1000 [41:07<39:31,  4.84s/it][Succeeded / Failed / Skipped / Total] 340 / 160 / 11 / 511:  51%|█████     | 511/1000 [41:11<39:25,  4.84s/it][Succeeded / Failed / Skipped / Total] 340 / 160 / 11 / 511:  51%|█████     | 512/1000 [41:12<39:16,  4.83s/it][Succeeded / Failed / Skipped / Total] 341 / 160 / 11 / 512:  51%|█████     | 512/1000 [41:12<39:16,  4.83s/it][Succeeded / Failed / Skipped / Total] 342 / 160 / 11 / 513:  51%|█████▏    | 513/1000 [41:13<39:08,  4.82s/it][Succeeded / Failed / Skipped / Total] 343 / 160 / 11 / 514:  51%|█████▏    | 514/1000 [41:14<38:59,  4.81s/it][Succeeded / Failed / Skipped / Total] 343 / 160 / 11 / 514:  52%|█████▏    | 515/1000 [41:14<38:50,  4.80s/it][Succeeded / Failed / Skipped / Total] 344 / 160 / 11 / 515:  52%|█████▏    | 515/1000 [41:14<38:50,  4.80s/it]Makes sure that the single thread is single . --> Indicates whether or not this thread is ready . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doEnsureSingleThread]] ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once

[[[[Adv]]]]: private boolean [[awoke]] ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 510 ---------------------------------------------
Perform shutdown . --> Closes the server . --> Socre: 1.0

[[[[Adv]]]]: private void [[doServerShutdown]] ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown

[[[[Adv]]]]: private void [[anthea]] ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 511 ---------------------------------------------
Broadcasts a message to all clients . --> Starts the sniffer . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( String text , Collection < WebSocket > clients ) { if ( text == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void [[smarter]] ( String text , Collection < WebSocket > clients ) { if ( text == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 512 ---------------------------------------------
Broadcast data to all clients . --> Triggers the given data . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[broadcast]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void [[amarillo]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[amarillo]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 513 ---------------------------------------------
Transfers source to destination . --> Read source . --> Socre: 1.0

[[[[Adv]]]]: public static int [[transferByteBuffer]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int [[delicto]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 514 ---------------------------------------------
Broadcast data to all clients . --> Called when a data frame is received . --> Socre: 1.0

[[[[Adv]]]]: private void [[doBroadcast]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void [[ooo]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 515 ---------------------------------------------
Starts the entity manager . --> This method will be called by the JPAX API --> Socre: 1.0

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[cesar]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 516 ---------------------------------------------
Returns the entity manager for the given name . --> returns null if not found --> Socre: 1.0

[[[[Adv]]]]: public EntityManager em ( String [[name]] ) { EntityManagerFactory emf = emfs . get ( [[name]] ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager em ( String [[lyn]] ) { EntityManagerFactory emf = emfs . get ( [[lyn]] ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .[Succeeded / Failed / Skipped / Total] 345 / 160 / 11 / 516:  52%|█████▏    | 516/1000 [41:17<38:44,  4.80s/it][Succeeded / Failed / Skipped / Total] 346 / 160 / 11 / 517:  52%|█████▏    | 517/1000 [41:18<38:35,  4.79s/it][Succeeded / Failed / Skipped / Total] 346 / 160 / 11 / 517:  52%|█████▏    | 518/1000 [41:27<38:34,  4.80s/it][Succeeded / Failed / Skipped / Total] 347 / 160 / 11 / 518:  52%|█████▏    | 518/1000 [41:27<38:34,  4.80s/it][Succeeded / Failed / Skipped / Total] 347 / 160 / 11 / 518:  52%|█████▏    | 519/1000 [41:28<38:25,  4.79s/it][Succeeded / Failed / Skipped / Total] 348 / 160 / 11 / 519:  52%|█████▏    | 519/1000 [41:28<38:25,  4.79s/it][Succeeded / Failed / Skipped / Total] 348 / 160 / 11 / 519:  52%|█████▏    | 520/1000 [41:32<38:20,  4.79s/it][Succeeded / Failed / Skipped / Total] 349 / 160 / 11 / 520:  52%|█████▏    | 520/1000 [41:32<38:20,  4.79s/it][Succeeded / Failed / Skipped / Total] 349 / 160 / 11 / 520:  52%|█████▏    | 521/1000 [41:37<38:16,  4.79s/it][Succeeded / Failed / Skipped / Total] 350 / 160 / 11 / 521:  52%|█████▏    | 521/1000 [41:37<38:16,  4.79s/it][Succeeded / Failed / Skipped / Total] 350 / 160 / 11 / 521:  52%|█████▏    | 522/1000 [41:43<38:12,  4.80s/it][Succeeded / Failed / Skipped / Total] 351 / 160 / 11 / 522:  52%|█████▏    | 522/1000 [41:43<38:12,  4.80s/it][Succeeded / Failed / Skipped / Total] 351 / 160 / 11 / 522:  52%|█████▏    | 523/1000 [41:44<38:03,  4.79s/it][Succeeded / Failed / Skipped / Total] 351 / 161 / 11 / 523:  52%|█████▏    | 523/1000 [41:44<38:03,  4.79s/it][Succeeded / Failed / Skipped / Total] 351 / 161 / 11 / 523:  52%|█████▏    | 524/1000 [41:47<37:57,  4.78s/it][Succeeded / Failed / Skipped / Total] 351 / 162 / 11 / 524:  52%|█████▏    | 524/1000 [41:47<37:57,  4.78s/it][Succeeded / Failed / Skipped / Total] 351 / 162 / 11 / 524:  52%|█████▎    | 525/1000 [41:50<37:51,  4.78s/it]
--------------------------------------------- Result 517 ---------------------------------------------
Get the socket . --> from interface WebSocket --> Socre: 1.0

[[[[Adv]]]]: private Socket [[getSocket]] ( WebSocket conn ) { WebSocketImpl [[impl]] = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) [[impl]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket [[yoruba]] ( WebSocket conn ) { WebSocketImpl [[hobble]] = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) [[hobble]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 518 ---------------------------------------------
Creates a transaction with the given transaction . --> kara --> Socre: 1.0

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > [[block]] ) { [[withTransaction]] ( em -> { [[block]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[karna]] ( Consumer < EntityManager > [[fei]] ) { [[karna]] ( em -> { [[fei]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 519 ---------------------------------------------
Converts the arguments to a Scala buffer . --> Convenience method . --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... [[args]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[args]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[argo]] ( final Object ... [[bagga]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[bagga]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 520 ---------------------------------------------
Gets localized message . --> Converts a set of keys to a sting --> Socre: 1.0

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > [[keyArgs]] = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[keyArgs]] . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String [[hatim]] ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > [[hatreds]] = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[hatreds]] . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 521 ---------------------------------------------
Gets a localized message . --> Shortcut method for getting information about the game --> Socre: 1.0

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang lang , String [[key]] , Object ... args ) { Seq < Object > [[scalaArgs]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[key]] , [[scalaArgs]] , lang ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String [[competitions]] ( play . api . i18n . Lang lang , String [[mezcal]] , Object ... args ) { Seq < Object > [[aboutyou]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[mezcal]] , [[aboutyou]] , lang ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 522 ---------------------------------------------
Wraps the given arguments if necessary . --> helper function to prevent duplicates --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[wrapArgsToListIfNeeded]] ( final T ... [[args]] ) { List < T > out ; if ( [[args]] != null && [[args]] . length == 1 && [[args]] [ 0 ] instanceof List ) { out = ( List < T > ) [[args]] [ 0 ] ; } else { out = Arrays . asList ( [[args]] ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[hatano]] ( final T ... [[benevolence]] ) { List < T > out ; if ( [[benevolence]] != null && [[benevolence]] . length == 1 && [[benevolence]] [ 0 ] instanceof List ) { out = ( List < T > ) [[benevolence]] [ 0 ] ; } else { out = Arrays . asList ( [[benevolence]] ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 523 ---------------------------------------------
Execute a connection lost ping . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[executeConnectionLostDetection]] ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl [[webSocketImpl]] = ( WebSocketImpl ) webSocket ; if ( [[webSocketImpl]] . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , [[webSocketImpl]] ) ; [[webSocketImpl]] . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( [[webSocketImpl]] . isOpen ( ) ) { [[webSocketImpl]] . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , [[webSocketImpl]] ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void [[compresses]] ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl [[lioness]] = ( WebSocketImpl ) webSocket ; if ( [[lioness]] . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , [[lioness]] ) ; [[lioness]] . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( [[lioness]] . isOpen ( ) ) { [[lioness]] . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , [[lioness]] ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 524 ---------------------------------------------
Display preferred messages for this request . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Http . RequestHeader [[request]] ) { play . api . i18n . Messages [[msgs]] = messages . preferred ( [[request]] ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages [[endowment]] ( Http . RequestHeader [[upgrading]] ) { play . api . i18n . Messages [[dossier]] = messages . preferred ( [[upgrading]] ) ; return new MessagesImpl ( new Lang ( [[dossier]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 525 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 352 / 162 / 11 / 525:  52%|█████▎    | 525/1000 [41:50<37:51,  4.78s/it][Succeeded / Failed / Skipped / Total] 352 / 162 / 11 / 525:  53%|█████▎    | 526/1000 [41:52<37:44,  4.78s/it][Succeeded / Failed / Skipped / Total] 352 / 163 / 11 / 526:  53%|█████▎    | 526/1000 [41:52<37:44,  4.78s/it][Succeeded / Failed / Skipped / Total] 352 / 163 / 11 / 526:  53%|█████▎    | 527/1000 [41:54<37:36,  4.77s/it][Succeeded / Failed / Skipped / Total] 353 / 163 / 11 / 527:  53%|█████▎    | 527/1000 [41:54<37:36,  4.77s/it][Succeeded / Failed / Skipped / Total] 353 / 163 / 11 / 527:  53%|█████▎    | 528/1000 [41:55<37:28,  4.76s/it][Succeeded / Failed / Skipped / Total] 353 / 164 / 11 / 528:  53%|█████▎    | 528/1000 [41:55<37:28,  4.76s/it][Succeeded / Failed / Skipped / Total] 353 / 164 / 11 / 528:  53%|█████▎    | 529/1000 [41:55<37:20,  4.76s/it][Succeeded / Failed / Skipped / Total] 354 / 164 / 11 / 529:  53%|█████▎    | 529/1000 [41:55<37:20,  4.76s/it][Succeeded / Failed / Skipped / Total] 354 / 164 / 11 / 529:  53%|█████▎    | 530/1000 [41:56<37:11,  4.75s/it][Succeeded / Failed / Skipped / Total] 355 / 164 / 11 / 530:  53%|█████▎    | 530/1000 [41:56<37:11,  4.75s/it][Succeeded / Failed / Skipped / Total] 355 / 164 / 11 / 530:  53%|█████▎    | 531/1000 [41:56<37:02,  4.74s/it][Succeeded / Failed / Skipped / Total] 355 / 164 / 12 / 531:  53%|█████▎    | 531/1000 [41:56<37:02,  4.74s/it][Succeeded / Failed / Skipped / Total] 355 / 164 / 12 / 531:  53%|█████▎    | 532/1000 [41:56<36:53,  4.73s/it][Succeeded / Failed / Skipped / Total] 355 / 164 / 13 / 532:  53%|█████▎    | 532/1000 [41:56<36:53,  4.73s/it][Succeeded / Failed / Skipped / Total] 355 / 164 / 13 / 532:  53%|█████▎    | 533/1000 [41:59<36:47,  4.73s/it][Succeeded / Failed / Skipped / Total] 356 / 164 / 13 / 533:  53%|█████▎    | 533/1000 [41:59<36:47,  4.73s/it][Succeeded / Failed / Skipped / Total] 356 / 164 / 13 / 533:  53%|█████▎    | 534/1000 [42:01<36:40,  4.72s/it][Succeeded / Failed / Skipped / Total] 357 / 164 / 13 / 534:  53%|█████▎    | 534/1000 [42:01<36:40,  4.72s/it][Succeeded / Failed / Skipped / Total] 357 / 164 / 13 / 534:  54%|█████▎    | 535/1000 [42:03<36:33,  4.72s/it][Succeeded / Failed / Skipped / Total] 357 / 165 / 13 / 535:  54%|█████▎    | 535/1000 [42:03<36:33,  4.72s/it][Succeeded / Failed / Skipped / Total] 357 / 165 / 13 / 535:  54%|█████▎    | 536/1000 [42:04<36:25,  4.71s/it][Succeeded / Failed / Skipped / Total] 358 / 165 / 13 / 536:  54%|█████▎    | 536/1000 [42:04<36:25,  4.71s/it][Succeeded / Failed / Skipped / Total] 358 / 165 / 13 / 536:  54%|█████▎    | 537/1000 [42:06<36:18,  4.71s/it][Succeeded / Failed / Skipped / Total] 359 / 165 / 13 / 537:  54%|█████▎    | 537/1000 [42:06<36:18,  4.71s/it][Succeeded / Failed / Skipped / Total] 359 / 165 / 13 / 537:  54%|█████▍    | 538/1000 [42:11<36:13,  4.71s/it][Succeeded / Failed / Skipped / Total] 360 / 165 / 13 / 538:  54%|█████▍    | 538/1000 [42:11<36:13,  4.71s/it][Succeeded / Failed / Skipped / Total] 360 / 165 / 13 / 538:  54%|█████▍    | 539/1000 [42:13<36:06,  4.70s/it]Checks if the specified key is defined at the specified key . --> Checks to see ifrogating at least --> Socre: 1.0

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang [[lang]] , String [[key]] ) { return messages . isDefinedAt ( [[key]] , [[lang]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang [[exasperating]] , String [[cavalry]] ) { return messages . isDefinedAt ( [[cavalry]] , [[exasperating]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 526 ---------------------------------------------
Adds bindings for the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[bindings]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self [[levies]] ( GuiceableModule ... [[wiltshire]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[wiltshire]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 527 ---------------------------------------------
Define a set of REPLACE bindings . --> Define a QATro --> Socre: 1.0

[[[[Adv]]]]: public final Self [[REPLACEME0]] ( play . api . inject . Binding < ? > ... [[REPLACEME0]] ) { return [[REPLACEME0]] ( Guiceable . bindings ( [[REPLACEME0]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self [[QUATRO]] ( play . api . inject . Binding < ? > ... [[QUATRO]] ) { return [[QUATRO]] ( Guiceable . bindings ( [[QUATRO]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 528 ---------------------------------------------
Returns the preferred messages for this language . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages [[lombardo]] ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 529 ---------------------------------------------
Overrides delegate overrides . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . overrides ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self [[perch]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . overrides ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 530 ---------------------------------------------
Adds bindings for the given modules . --> proof of this instance --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( play . api . inject . Module ... [[modules]] ) { return [[bindings]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self [[frightening]] ( play . api . inject . Module ... [[smarter]] ) { return [[frightening]] ( Guiceable . [[smarter]] ( [[smarter]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 531 ---------------------------------------------
Static factory method . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static < A , B > Tuple < A , B > Tuple ( A a , B b ) { return new Tuple < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 532 ---------------------------------------------
Static factory method . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static < A , B , C , D , E > Tuple5 < A , B , C , D , E > Tuple5 ( A a , B b , C c , D d , E e ) { return new Tuple5 < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 533 ---------------------------------------------
Sets the overrides of the given bindings . --> Methode overrides --> Socre: 1.0

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Binding < ? > ... [[bindings]] ) { return overrides ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Binding < ? > ... [[dujour]] ) { return overrides ( Guiceable . [[dujour]] ( [[dujour]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 534 ---------------------------------------------
Set the language for the result . --> Convenience method for unit testing --> Socre: 1.0

[[[[Adv]]]]: public Result [[setLang]] ( Result result , Lang [[lang]] ) { return messages . setLang ( result . asScala ( ) , [[lang]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result [[atwell]] ( Result result , Lang [[houten]] ) { return messages . setLang ( result . asScala ( ) , [[houten]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 535 ---------------------------------------------
Converts an annotation into a Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[greg]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 536 ---------------------------------------------
Call the given request . --> Billiver a biller --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < Result > [[call]] ( Request req ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > [[billiard]] ( Request req ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 537 ---------------------------------------------
Define overrides the default overrides . --> Constructs a letterbox with the specified hamilton --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Module ... [[modules]] ) { return [[overrides]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self [[letterbox]] ( play . api . inject . Module ... [[hamilton]] ) { return [[letterbox]] ( Guiceable . [[hamilton]] ( [[hamilton]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 538 ---------------------------------------------
Disables given modules . --> Disables self - scope to be enabled --> Socre: 1.0

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... [[moduleClasses]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[moduleClasses]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[trollope]] ( Class < ? > ... [[delicto]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[delicto]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 539 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 361 / 165 / 13 / 539:  54%|█████▍    | 539/1000 [42:13<36:06,  4.70s/it][Succeeded / Failed / Skipped / Total] 361 / 165 / 13 / 539:  54%|█████▍    | 540/1000 [42:14<35:59,  4.69s/it][Succeeded / Failed / Skipped / Total] 362 / 165 / 13 / 540:  54%|█████▍    | 540/1000 [42:14<35:59,  4.69s/it][Succeeded / Failed / Skipped / Total] 362 / 165 / 13 / 540:  54%|█████▍    | 541/1000 [42:16<35:51,  4.69s/it][Succeeded / Failed / Skipped / Total] 363 / 165 / 13 / 541:  54%|█████▍    | 541/1000 [42:16<35:51,  4.69s/it][Succeeded / Failed / Skipped / Total] 363 / 165 / 13 / 541:  54%|█████▍    | 542/1000 [42:21<35:47,  4.69s/it][Succeeded / Failed / Skipped / Total] 364 / 165 / 13 / 542:  54%|█████▍    | 542/1000 [42:21<35:47,  4.69s/it][Succeeded / Failed / Skipped / Total] 364 / 165 / 13 / 542:  54%|█████▍    | 543/1000 [42:28<35:44,  4.69s/it][Succeeded / Failed / Skipped / Total] 364 / 166 / 13 / 543:  54%|█████▍    | 543/1000 [42:28<35:44,  4.69s/it][Succeeded / Failed / Skipped / Total] 364 / 166 / 13 / 543:  54%|█████▍    | 544/1000 [42:30<35:37,  4.69s/it][Succeeded / Failed / Skipped / Total] 364 / 167 / 13 / 544:  54%|█████▍    | 544/1000 [42:30<35:37,  4.69s/it][Succeeded / Failed / Skipped / Total] 364 / 167 / 13 / 544:  55%|█████▍    | 545/1000 [42:30<35:29,  4.68s/it][Succeeded / Failed / Skipped / Total] 365 / 167 / 13 / 545:  55%|█████▍    | 545/1000 [42:30<35:29,  4.68s/it][Succeeded / Failed / Skipped / Total] 365 / 167 / 13 / 545:  55%|█████▍    | 546/1000 [42:31<35:21,  4.67s/it][Succeeded / Failed / Skipped / Total] 365 / 168 / 13 / 546:  55%|█████▍    | 546/1000 [42:31<35:21,  4.67s/it][Succeeded / Failed / Skipped / Total] 365 / 168 / 13 / 546:  55%|█████▍    | 547/1000 [42:43<35:22,  4.69s/it][Succeeded / Failed / Skipped / Total] 366 / 168 / 13 / 547:  55%|█████▍    | 547/1000 [42:43<35:22,  4.69s/it][Succeeded / Failed / Skipped / Total] 366 / 168 / 13 / 547:  55%|█████▍    | 548/1000 [42:46<35:17,  4.68s/it]Convert the given execution context to an executor . --> Execute passbook --> Socre: 1.0

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext ec ) { ExecutionContext [[prepared]] = ec . prepare ( ) ; if ( [[prepared]] instanceof Executor ) { return ( Executor ) [[prepared]] ; } else { return [[prepared]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[passbook]] ( ExecutionContext ec ) { ExecutionContext [[bedspreads]] = ec . prepare ( ) ; if ( [[bedspreads]] instanceof Executor ) { return ( Executor ) [[bedspreads]] ; } else { return [[bedspreads]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 540 ---------------------------------------------
Gets an existing file . --> Gets gibbons --> Socre: 1.0

[[[[Adv]]]]: public Optional < File > [[getExistingFile]] ( String [[relativePath]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[relativePath]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > [[gibbons]] ( String [[yoru]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[yoru]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 541 ---------------------------------------------
Create a stream of bytes . --> generate glop --> Socre: 1.0

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String [[callbackName]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[gloop]] ( String [[bron]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[bron]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 542 ---------------------------------------------
Create a new JsonNode . --> Warnings --> Socre: 1.0

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[json]] ( String [[callbackName]] ) { return Flow . of ( JsonNode . class ) . map ( [[json]] -> { return ByteString . fromString ( Json . stringify ( [[json]] ) ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[befell]] ( String [[astounded]] ) { return Flow . of ( JsonNode . class ) . map ( [[befell]] -> { return ByteString . fromString ( Json . stringify ( [[befell]] ) ) ; } ) . via ( flow ( [[astounded]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 543 ---------------------------------------------
Adds a mapped constraint for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public < T [[extends]] ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T [[assets]] ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 544 ---------------------------------------------
Create a new instance of the given key . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < T extends ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 545 ---------------------------------------------
Creates a new JAConfig . --> Shaffer config --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig [[of]] ( String n1 , String [[u1]] , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , [[u1]] ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig [[shil]] ( String n1 , String [[mueller]] , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , [[mueller]] ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 546 ---------------------------------------------
Returns a new instance of JPAConfig . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig of ( String [[name]] , String [[unitName]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[name]] , [[unitName]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig of ( String [[absolution]] , String [[imploded]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[absolution]] , [[imploded]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 547 ---------------------------------------------
Handle bad request . --> Delegates to the destination --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader [[request]] , String [[message]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[request]] . method ( ) , [[request]] . uri ( ) , [[message]] , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[destination]] ( RequestHeader [[tonne]] , String [[bangkok]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[tonne]] . method ( ) , [[tonne]] . uri ( ) , [[bangkok]] , [[tonne]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 548 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 367 / 168 / 13 / 548:  55%|█████▍    | 548/1000 [42:46<35:17,  4.68s/it][Succeeded / Failed / Skipped / Total] 367 / 168 / 13 / 548:  55%|█████▍    | 549/1000 [42:49<35:10,  4.68s/it][Succeeded / Failed / Skipped / Total] 367 / 169 / 13 / 549:  55%|█████▍    | 549/1000 [42:49<35:10,  4.68s/it][Succeeded / Failed / Skipped / Total] 367 / 169 / 13 / 549:  55%|█████▌    | 550/1000 [42:53<35:05,  4.68s/it][Succeeded / Failed / Skipped / Total] 367 / 170 / 13 / 550:  55%|█████▌    | 550/1000 [42:53<35:05,  4.68s/it][Succeeded / Failed / Skipped / Total] 367 / 170 / 13 / 550:  55%|█████▌    | 551/1000 [42:54<34:57,  4.67s/it][Succeeded / Failed / Skipped / Total] 367 / 171 / 13 / 551:  55%|█████▌    | 551/1000 [42:54<34:57,  4.67s/it][Succeeded / Failed / Skipped / Total] 367 / 171 / 13 / 551:  55%|█████▌    | 552/1000 [42:58<34:52,  4.67s/it][Succeeded / Failed / Skipped / Total] 368 / 171 / 13 / 552:  55%|█████▌    | 552/1000 [42:58<34:52,  4.67s/it][Succeeded / Failed / Skipped / Total] 368 / 171 / 13 / 552:  55%|█████▌    | 553/1000 [42:59<34:45,  4.66s/it][Succeeded / Failed / Skipped / Total] 369 / 171 / 13 / 553:  55%|█████▌    | 553/1000 [42:59<34:45,  4.66s/it][Succeeded / Failed / Skipped / Total] 369 / 171 / 13 / 553:  55%|█████▌    | 554/1000 [43:08<34:43,  4.67s/it][Succeeded / Failed / Skipped / Total] 369 / 172 / 13 / 554:  55%|█████▌    | 554/1000 [43:08<34:43,  4.67s/it][Succeeded / Failed / Skipped / Total] 369 / 172 / 13 / 554:  56%|█████▌    | 555/1000 [43:08<34:35,  4.66s/it]Invoked when a client error occurs . --> Overriding superclass method --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onClientError]] ( RequestHeader request , int statusCode , String [[message]] ) { if ( statusCode == 400 ) { return onBadRequest ( request , [[message]] ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , [[message]] ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , [[message]] ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , [[message]] ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + [[message]] ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[brimstone]] ( RequestHeader request , int statusCode , String [[mangalsutra]] ) { if ( statusCode == 400 ) { return onBadRequest ( request , [[mangalsutra]] ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , [[mangalsutra]] ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , [[mangalsutra]] ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , [[mangalsutra]] ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + [[mangalsutra]] ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 549 ---------------------------------------------
Display a forbidden page . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onForbidden]] ( RequestHeader request , String [[message]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > [[bulging]] ( RequestHeader request , String [[parle]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 550 ---------------------------------------------
Handles not found exceptions . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onNotFound]] ( RequestHeader request , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > [[greasers]] ( RequestHeader request , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 551 ---------------------------------------------
Logs internal error . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[logServerError]] ( RequestHeader [[request]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[request]] . method ( ) , [[request]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void [[facilitate]] ( RequestHeader [[three]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[three]] . method ( ) , [[three]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 552 ---------------------------------------------
Handle error response . --> Display an exception --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onProdServerError]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > [[billiard]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 553 ---------------------------------------------
Convert a throwable to a useful exception --> Wrap a throwable into a BadException --> Socre: 1.0

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable [[throwable]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[throwable]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[bungling]] ( final Throwable [[parenthood]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[parenthood]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 554 ---------------------------------------------
Handles transient errors . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onServerError]] ( RequestHeader [[request]] , Throwable exception ) { try { UsefulException [[usefulException]] = throwableToUsefulException ( exception ) ; logServerError ( [[request]] , [[usefulException]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[request]] , [[usefulException]] ) ; default : return onDevServerError ( [[request]] , [[usefulException]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[cheats]] ( RequestHeader [[geologist]] , Throwable exception ) { try { UsefulException [[highborn]] = throwableToUsefulException ( exception ) ; logServerError ( [[geologist]] , [[highborn]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[geologist]] , [[highborn]] ) ; default : return onDevServerError ( [[geologist]] , [[highborn]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 555 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 369 / 173 / 13 / 555:  56%|█████▌    | 555/1000 [43:08<34:35,  4.66s/it][Succeeded / Failed / Skipped / Total] 369 / 173 / 13 / 555:  56%|█████▌    | 556/1000 [43:10<34:28,  4.66s/it][Succeeded / Failed / Skipped / Total] 370 / 173 / 13 / 556:  56%|█████▌    | 556/1000 [43:10<34:28,  4.66s/it][Succeeded / Failed / Skipped / Total] 370 / 173 / 13 / 556:  56%|█████▌    | 557/1000 [43:13<34:22,  4.66s/it][Succeeded / Failed / Skipped / Total] 370 / 174 / 13 / 557:  56%|█████▌    | 557/1000 [43:13<34:22,  4.66s/it][Succeeded / Failed / Skipped / Total] 370 / 174 / 13 / 557:  56%|█████▌    | 558/1000 [43:16<34:16,  4.65s/it][Succeeded / Failed / Skipped / Total] 370 / 175 / 13 / 558:  56%|█████▌    | 558/1000 [43:16<34:16,  4.65s/it][Succeeded / Failed / Skipped / Total] 370 / 175 / 13 / 558:  56%|█████▌    | 559/1000 [43:26<34:16,  4.66s/it][Succeeded / Failed / Skipped / Total] 371 / 175 / 13 / 559:  56%|█████▌    | 559/1000 [43:26<34:16,  4.66s/it][Succeeded / Failed / Skipped / Total] 371 / 175 / 13 / 559:  56%|█████▌    | 560/1000 [43:34<34:14,  4.67s/it][Succeeded / Failed / Skipped / Total] 372 / 175 / 13 / 560:  56%|█████▌    | 560/1000 [43:34<34:14,  4.67s/it][Succeeded / Failed / Skipped / Total] 372 / 175 / 13 / 560:  56%|█████▌    | 561/1000 [43:38<34:09,  4.67s/it][Succeeded / Failed / Skipped / Total] 373 / 175 / 13 / 561:  56%|█████▌    | 561/1000 [43:38<34:09,  4.67s/it][Succeeded / Failed / Skipped / Total] 373 / 175 / 13 / 561:  56%|█████▌    | 562/1000 [43:40<34:02,  4.66s/it][Succeeded / Failed / Skipped / Total] 373 / 176 / 13 / 562:  56%|█████▌    | 562/1000 [43:40<34:02,  4.66s/it][Succeeded / Failed / Skipped / Total] 373 / 176 / 13 / 562:  56%|█████▋    | 563/1000 [43:41<33:55,  4.66s/it][Succeeded / Failed / Skipped / Total] 374 / 176 / 13 / 563:  56%|█████▋    | 563/1000 [43:41<33:55,  4.66s/it][Succeeded / Failed / Skipped / Total] 374 / 176 / 13 / 563:  56%|█████▋    | 564/1000 [43:42<33:47,  4.65s/it]Handler for error errors . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onDevServerError]] ( RequestHeader [[request]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > [[notations]] ( RequestHeader [[death]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , [[death]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 556 ---------------------------------------------
Creates a build doc handler for a given directory and a jar file . --> Handler for albi files . --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base ) { return [[fromDirectoryAndJar]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[albi]] ( File directory , JarFile jarFile , String base ) { return [[albi]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 557 ---------------------------------------------
Returns the matching method matching the given name and parameter types . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > [[cls]] , final String [[methodName]] , final Class < ? > ... parameterTypes ) { try { final Method method = [[cls]] . getMethod ( [[methodName]] , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[astounded]] ( final Class < ? > [[strikers]] , final String [[bloodletting]] , final Class < ? > ... parameterTypes ) { try { final Method method = [[strikers]] . getMethod ( [[bloodletting]] , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 558 ---------------------------------------------
Creates a new documentation handler for a given directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[shitty]] ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 559 ---------------------------------------------
Create an HttpEntity from content . --> Convert Archers to HttpEntity --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity fromContent ( Content [[content]] , String charset ) { String [[body]] ; if ( [[content]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity fromContent ( Content [[archers]] , String charset ) { String [[abandoned]] ; if ( [[archers]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 560 ---------------------------------------------
Creates an instance from a string . --> Wraps a movie with a certain charset --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String [[content]] , String charset ) { return new Strict ( ByteString . fromString ( [[content]] , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[veiled]] ( String [[rumor]] , String charset ) { return new Strict ( ByteString . fromString ( [[rumor]] , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 561 ---------------------------------------------
Consume all data in the buffer . --> Retrieves a piece of pieces --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer [[mat]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[mat]] ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[obscurity]] ( Materializer [[pawnshop]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[pawnshop]] ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 562 ---------------------------------------------
Creates a chunked entity based on the given data . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[vizier]] ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 563 ---------------------------------------------
Creates a JSON response with a JsonNode . --> accardless of data --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , JsonNode content ) { return [[status]] ( [[status]] , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result [[accident]] ( int [[gregson]] , JsonNode content ) { return [[accident]] ( [[accident]] , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 564 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 374 / 177 / 13 / 564:  56%|█████▋    | 564/1000 [43:42<33:47,  4.65s/it][Succeeded / Failed / Skipped / Total] 374 / 177 / 13 / 564:  56%|█████▋    | 565/1000 [43:43<33:39,  4.64s/it][Succeeded / Failed / Skipped / Total] 374 / 177 / 14 / 565:  56%|█████▋    | 565/1000 [43:43<33:39,  4.64s/it][Succeeded / Failed / Skipped / Total] 374 / 177 / 14 / 565:  57%|█████▋    | 566/1000 [43:46<33:34,  4.64s/it][Succeeded / Failed / Skipped / Total] 375 / 177 / 14 / 566:  57%|█████▋    | 566/1000 [43:46<33:34,  4.64s/it][Succeeded / Failed / Skipped / Total] 375 / 177 / 14 / 566:  57%|█████▋    | 567/1000 [43:48<33:27,  4.64s/it][Succeeded / Failed / Skipped / Total] 376 / 177 / 14 / 567:  57%|█████▋    | 567/1000 [43:48<33:27,  4.64s/it][Succeeded / Failed / Skipped / Total] 376 / 177 / 14 / 567:  57%|█████▋    | 568/1000 [43:49<33:20,  4.63s/it][Succeeded / Failed / Skipped / Total] 377 / 177 / 14 / 568:  57%|█████▋    | 568/1000 [43:49<33:20,  4.63s/it][Succeeded / Failed / Skipped / Total] 377 / 177 / 14 / 568:  57%|█████▋    | 569/1000 [43:53<33:14,  4.63s/it][Succeeded / Failed / Skipped / Total] 377 / 178 / 14 / 569:  57%|█████▋    | 569/1000 [43:53<33:14,  4.63s/it][Succeeded / Failed / Skipped / Total] 377 / 178 / 14 / 569:  57%|█████▋    | 570/1000 [43:56<33:08,  4.63s/it][Succeeded / Failed / Skipped / Total] 378 / 178 / 14 / 570:  57%|█████▋    | 570/1000 [43:56<33:08,  4.63s/it][Succeeded / Failed / Skipped / Total] 378 / 178 / 14 / 570:  57%|█████▋    | 571/1000 [43:57<33:01,  4.62s/it][Succeeded / Failed / Skipped / Total] 378 / 179 / 14 / 571:  57%|█████▋    | 571/1000 [43:57<33:01,  4.62s/it][Succeeded / Failed / Skipped / Total] 378 / 179 / 14 / 571:  57%|█████▋    | 572/1000 [44:00<32:56,  4.62s/it][Succeeded / Failed / Skipped / Total] 379 / 179 / 14 / 572:  57%|█████▋    | 572/1000 [44:00<32:56,  4.62s/it][Succeeded / Failed / Skipped / Total] 379 / 179 / 14 / 572:  57%|█████▋    | 573/1000 [44:02<32:49,  4.61s/it][Succeeded / Failed / Skipped / Total] 380 / 179 / 14 / 573:  57%|█████▋    | 573/1000 [44:02<32:49,  4.61s/it][Succeeded / Failed / Skipped / Total] 380 / 179 / 14 / 573:  57%|█████▋    | 574/1000 [44:05<32:43,  4.61s/it][Succeeded / Failed / Skipped / Total] 381 / 179 / 14 / 574:  57%|█████▋    | 574/1000 [44:05<32:43,  4.61s/it][Succeeded / Failed / Skipped / Total] 381 / 179 / 14 / 574:  57%|█████▊    | 575/1000 [44:08<32:37,  4.61s/it]Create a new documentation handler for a given jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile [[jarFile]] , String base ) { FileRepository repo = new JarRepository ( [[jarFile]] , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[miscarriages]] ( JarFile [[animosity]] , String base ) { FileRepository repo = new JarRepository ( [[animosity]] , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 565 ---------------------------------------------
Find a user by id --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 566 ---------------------------------------------
Creates a HTTP response with the specified content . --> Http Status --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int [[status]] , byte [ ] content ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( status , new HttpEntity . Strict ( ByteString . fromArray ( content ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result status ( int [[poltergeists]] , byte [ ] content ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( status , new HttpEntity . Strict ( ByteString . fromArray ( content ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 567 ---------------------------------------------
Sends a status message response . --> Send status message --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int [[status]] , InputStream content , long contentLength ) { return status ( status ) . sendInputStream ( content , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result status ( int [[katara]] , InputStream content , long contentLength ) { return status ( status ) . sendInputStream ( content , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 568 ---------------------------------------------
Creates a status message . --> Jordi process --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , File content ) { return [[status]] ( [[status]] , content , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[jordi]] ( int status , File content ) { return [[jordi]] ( [[jordi]] , content , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 569 ---------------------------------------------
Returns a duplicate of this call . --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[bretagne]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 570 ---------------------------------------------
Sends a content response to a JSON response . --> Send all coveralls --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , JsonNode content , JsonEncoding [[encoding]] ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return [[status]] ( [[status]] ) . sendJson ( content , [[encoding]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result [[coveralls]] ( int status , JsonNode content , JsonEncoding [[oxfam]] ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return [[coveralls]] ( [[coveralls]] ) . sendJson ( content , [[oxfam]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 571 ---------------------------------------------
Selects the preferred language . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > [[candidates]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidates]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[cretinous]] ( Collection < Lang > [[jams]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[jams]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 572 ---------------------------------------------
Returns the web socket URL for the given request . --> Returns the mean of the request --> Socre: 1.0

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request request ) { return [[webSocketURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[meaner]] ( Http . Request request ) { return [[meaner]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 573 ---------------------------------------------
Returns a new call with the specified fragment . --> Jennings --> Socre: 1.0

[[[[Adv]]]]: public Call [[withFragment]] ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call [[jennings]] ( String [[amicus]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[amicus]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 574 ---------------------------------------------
Returns the absolute URL of the given request . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request [[request]] ) { return [[absoluteURL]] ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[cold]] ( Http . Request [[elias]] ) { return [[cold]] ( [[elias]] . secure ( ) , [[elias]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 575 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 381 / 180 / 14 / 575:  57%|█████▊    | 575/1000 [44:08<32:37,  4.61s/it][Succeeded / Failed / Skipped / Total] 381 / 180 / 14 / 575:  58%|█████▊    | 576/1000 [44:10<32:30,  4.60s/it][Succeeded / Failed / Skipped / Total] 382 / 180 / 14 / 576:  58%|█████▊    | 576/1000 [44:10<32:30,  4.60s/it][Succeeded / Failed / Skipped / Total] 382 / 180 / 14 / 576:  58%|█████▊    | 577/1000 [44:13<32:25,  4.60s/it][Succeeded / Failed / Skipped / Total] 383 / 180 / 14 / 577:  58%|█████▊    | 577/1000 [44:13<32:25,  4.60s/it][Succeeded / Failed / Skipped / Total] 383 / 180 / 14 / 577:  58%|█████▊    | 578/1000 [44:15<32:18,  4.59s/it][Succeeded / Failed / Skipped / Total] 384 / 180 / 14 / 578:  58%|█████▊    | 578/1000 [44:15<32:18,  4.59s/it][Succeeded / Failed / Skipped / Total] 384 / 180 / 14 / 578:  58%|█████▊    | 579/1000 [44:19<32:13,  4.59s/it][Succeeded / Failed / Skipped / Total] 385 / 180 / 14 / 579:  58%|█████▊    | 579/1000 [44:19<32:13,  4.59s/it][Succeeded / Failed / Skipped / Total] 385 / 180 / 14 / 579:  58%|█████▊    | 580/1000 [44:24<32:09,  4.59s/it][Succeeded / Failed / Skipped / Total] 385 / 181 / 14 / 580:  58%|█████▊    | 580/1000 [44:24<32:09,  4.59s/it][Succeeded / Failed / Skipped / Total] 385 / 181 / 14 / 580:  58%|█████▊    | 581/1000 [44:27<32:03,  4.59s/it][Succeeded / Failed / Skipped / Total] 386 / 181 / 14 / 581:  58%|█████▊    | 581/1000 [44:27<32:03,  4.59s/it][Succeeded / Failed / Skipped / Total] 386 / 181 / 14 / 581:  58%|█████▊    | 582/1000 [44:28<31:56,  4.58s/it]Creates a buildDocHandler from a list of files . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromResources]] ( File [ ] [[files]] , String [ ] [[baseDirs]] ) throws IOException { assert ( [[files]] . length == [[baseDirs]] . length ) ; FileRepository [ ] repositories = new FileRepository [ [[files]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int [[i]] = 0 ; [[i]] < [[files]] . length ; [[i]] ++ ) { File file = [[files]] [ [[i]] ] ; String baseDir = [[baseDirs]] [ [[i]] ] ; if ( file . isDirectory ( ) ) { repositories [ [[i]] ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler [[fuzzball]] ( File [ ] [[yuri]] , String [ ] [[insecurities]] ) throws IOException { assert ( [[yuri]] . length == [[insecurities]] . length ) ; FileRepository [ ] repositories = new FileRepository [ [[yuri]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int [[azriel]] = 0 ; [[azriel]] < [[yuri]] . length ; [[azriel]] ++ ) { File file = [[yuri]] [ [[azriel]] ] ; String baseDir = [[insecurities]] [ [[azriel]] ] ; if ( file . isDirectory ( ) ) { repositories [ [[azriel]] ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 576 ---------------------------------------------
To json node . --> Define the given data --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object data ) { try { return mapper ( ) . valueToTree ( data ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[defrosting]] ( final Object data ) { try { return mapper ( ) . valueToTree ( data ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 577 ---------------------------------------------
Deserializes a JsonNode from a JsonNode . --> Convenience method for deserialization . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[anatomically]] > [[anatomically]] fromJson ( JsonNode json , Class < [[anatomically]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 578 ---------------------------------------------
Returns a function that applies the given connection function . --> used by ConnectionFunction --> Socre: 1.0

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[block]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[connection]] ) { try { return [[block]] . call ( [[connection]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[excepting]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[bulge]] ) { try { return [[excepting]] . call ( [[bulge]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 579 ---------------------------------------------
Creates a documentation handler for a given directory and a given directory . --> Creates documentation handler --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File [[directory]] , JarFile [[jarFile]] , String [[base]] , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( [[directory]] ) ; FileRepository jarRepo = new JarRepository ( [[jarFile]] , Option . apply ( [[base]] ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[brûlée]] ( File [[sire]] , JarFile [[corkscrew]] , String [[idols]] , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( [[sire]] ) ; FileRepository jarRepo = new JarRepository ( [[corkscrew]] , Option . apply ( [[idols]] ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 580 ---------------------------------------------
Parses the given string into a JsonNode object . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode parse ( String [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode parse ( String [[journals]] ) { try { return mapper ( ) . readTree ( [[journals]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 581 ---------------------------------------------
Parse a JSON document from an input stream . --> Borrower from hirose --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[parse]] ( java . io . InputStream [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[bernier]] ( java . io . InputStream [[hirose]] ) { try { return mapper ( ) . readTree ( [[hirose]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 582 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 386 / 182 / 14 / 582:  58%|█████▊    | 582/1000 [44:28<31:56,  4.58s/it][Succeeded / Failed / Skipped / Total] 386 / 182 / 14 / 582:  58%|█████▊    | 583/1000 [44:28<31:48,  4.58s/it][Succeeded / Failed / Skipped / Total] 387 / 182 / 14 / 583:  58%|█████▊    | 583/1000 [44:28<31:48,  4.58s/it][Succeeded / Failed / Skipped / Total] 387 / 182 / 14 / 583:  58%|█████▊    | 584/1000 [44:31<31:42,  4.57s/it][Succeeded / Failed / Skipped / Total] 387 / 183 / 14 / 584:  58%|█████▊    | 584/1000 [44:31<31:42,  4.57s/it][Succeeded / Failed / Skipped / Total] 387 / 183 / 14 / 584:  58%|█████▊    | 585/1000 [44:35<31:37,  4.57s/it][Succeeded / Failed / Skipped / Total] 388 / 183 / 14 / 585:  58%|█████▊    | 585/1000 [44:35<31:37,  4.57s/it][Succeeded / Failed / Skipped / Total] 388 / 183 / 14 / 585:  59%|█████▊    | 586/1000 [44:39<31:32,  4.57s/it][Succeeded / Failed / Skipped / Total] 389 / 183 / 14 / 586:  59%|█████▊    | 586/1000 [44:39<31:32,  4.57s/it][Succeeded / Failed / Skipped / Total] 389 / 183 / 14 / 586:  59%|█████▊    | 587/1000 [44:41<31:26,  4.57s/it][Succeeded / Failed / Skipped / Total] 389 / 184 / 14 / 587:  59%|█████▊    | 587/1000 [44:41<31:26,  4.57s/it][Succeeded / Failed / Skipped / Total] 389 / 184 / 14 / 587:  59%|█████▉    | 588/1000 [44:46<31:22,  4.57s/it][Succeeded / Failed / Skipped / Total] 390 / 184 / 14 / 588:  59%|█████▉    | 588/1000 [44:46<31:22,  4.57s/it][Succeeded / Failed / Skipped / Total] 390 / 184 / 14 / 588:  59%|█████▉    | 589/1000 [44:49<31:16,  4.57s/it][Succeeded / Failed / Skipped / Total] 391 / 184 / 14 / 589:  59%|█████▉    | 589/1000 [44:49<31:16,  4.57s/it][Succeeded / Failed / Skipped / Total] 391 / 184 / 14 / 589:  59%|█████▉    | 590/1000 [44:50<31:09,  4.56s/it]Creates a new server instance with the given parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode mode , int [[port]] , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( [[port]] ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[courgettes]] ( Mode mode , int [[oxfam]] , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( [[oxfam]] ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 583 ---------------------------------------------
Relative path relative to startPath --> Convenience method for debugging --> Socre: 1.0

[[[[Adv]]]]: public static String [[relative]] ( String [[startPath]] , String targetPath ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[economy]] ( String [[benighted]] , String targetPath ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 584 ---------------------------------------------
Returns a function that runs a connection function on a connection . --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectionFunction]] ( final ConnectionRunnable [[block]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[connection]] ) { try { [[block]] . run ( [[connection]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[him]] ( final ConnectionRunnable [[delightful]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[undercarriage]] ) { try { [[delightful]] . run ( [[undercarriage]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 585 ---------------------------------------------
Parse cron expression --> Get date after date --> Socre: 1.0

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String cron ) { try { return new CronExpression ( cron ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[applauded]] ( String cron ) { try { return new CronExpression ( cron ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 586 ---------------------------------------------
Gets the next interval --> Get cron interval --> Socre: 1.0

[[[[Adv]]]]: public static long cronInterval ( String [[cron]] , Date date ) { try { return new CronExpression ( [[cron]] ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long cronInterval ( String [[clamped]] , Date date ) { try { return new CronExpression ( [[clamped]] ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[clamped]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 587 ---------------------------------------------
Displays the given constraints . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > [[constraints]] ) { return [[constraints]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[bongo]] ( Set < ConstraintDescriptor < ? > > [[dmitry]] ) { return [[dmitry]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[bongo]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 588 ---------------------------------------------
Checks if the given classes are assignable to the given class array . --> Jealously --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] [[classArray]] , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( [[classArray]] ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( [[classArray]] == null ) { [[classArray]] = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < [[classArray]] . length ; i ++ ) { if ( [[isAssignable]] ( [[classArray]] [ i ] , toClassArray [ i ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[jealously]] ( Class < ? > [ ] [[hiroshima]] , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( [[hiroshima]] ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( [[hiroshima]] == null ) { [[hiroshima]] = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < [[hiroshima]] . length ; i ++ ) { if ( [[jealously]] ( [[hiroshima]] [ i ] , toClassArray [ i ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 589 ---------------------------------------------
Performs a timeout after the given amount of time . --> Performs timeout and waits for permits --> Socre: 1.0

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > [[stage]] , final long [[amount]] , final TimeUnit unit ) { requireNonNull ( [[stage]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( [[amount]] , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> [[stage]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > [[pericles]] , final long [[wunderbar]] , final TimeUnit unit ) { requireNonNull ( [[pericles]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( [[wunderbar]] , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> [[pericles]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 590 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 392 / 184 / 14 / 590:  59%|█████▉    | 590/1000 [44:50<31:09,  4.56s/it][Succeeded / Failed / Skipped / Total] 392 / 184 / 14 / 590:  59%|█████▉    | 591/1000 [44:54<31:04,  4.56s/it][Succeeded / Failed / Skipped / Total] 392 / 185 / 14 / 591:  59%|█████▉    | 591/1000 [44:54<31:04,  4.56s/it][Succeeded / Failed / Skipped / Total] 392 / 185 / 14 / 591:  59%|█████▉    | 592/1000 [44:54<30:57,  4.55s/it][Succeeded / Failed / Skipped / Total] 393 / 185 / 14 / 592:  59%|█████▉    | 592/1000 [44:54<30:57,  4.55s/it][Succeeded / Failed / Skipped / Total] 393 / 185 / 14 / 592:  59%|█████▉    | 593/1000 [44:56<30:50,  4.55s/it][Succeeded / Failed / Skipped / Total] 394 / 185 / 14 / 593:  59%|█████▉    | 593/1000 [44:56<30:50,  4.55s/it][Succeeded / Failed / Skipped / Total] 394 / 185 / 14 / 593:  59%|█████▉    | 594/1000 [44:56<30:43,  4.54s/it][Succeeded / Failed / Skipped / Total] 394 / 186 / 14 / 594:  59%|█████▉    | 594/1000 [44:56<30:43,  4.54s/it][Succeeded / Failed / Skipped / Total] 394 / 186 / 14 / 594:  60%|█████▉    | 595/1000 [44:58<30:36,  4.53s/it][Succeeded / Failed / Skipped / Total] 394 / 187 / 14 / 595:  60%|█████▉    | 595/1000 [44:58<30:36,  4.53s/it][Succeeded / Failed / Skipped / Total] 394 / 187 / 14 / 595:  60%|█████▉    | 596/1000 [44:59<30:29,  4.53s/it][Succeeded / Failed / Skipped / Total] 395 / 187 / 14 / 596:  60%|█████▉    | 596/1000 [44:59<30:29,  4.53s/it][Succeeded / Failed / Skipped / Total] 395 / 187 / 14 / 596:  60%|█████▉    | 597/1000 [45:01<30:23,  4.53s/it][Succeeded / Failed / Skipped / Total] 395 / 188 / 14 / 597:  60%|█████▉    | 597/1000 [45:01<30:23,  4.53s/it][Succeeded / Failed / Skipped / Total] 395 / 188 / 14 / 597:  60%|█████▉    | 598/1000 [45:03<30:17,  4.52s/it][Succeeded / Failed / Skipped / Total] 395 / 189 / 14 / 598:  60%|█████▉    | 598/1000 [45:03<30:17,  4.52s/it][Succeeded / Failed / Skipped / Total] 395 / 189 / 14 / 598:  60%|█████▉    | 599/1000 [45:11<30:15,  4.53s/it]Display a request . --> This method is used to render the default page --> Socre: 1.0

[[[[Adv]]]]: public static Result TODO ( Request [[request]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[request]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result TODO ( Request [[andthen]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[andthen]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 591 ---------------------------------------------
Displays a displayable constraint . --> [[[FAILED]]]

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[displayableConstraint]] ( ConstraintDescriptor < ? > [[constraint]] ) { final Display displayAnnotation = [[constraint]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[constraint]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[chupa]] ( ConstraintDescriptor < ? > [[mulatto]] ) { final Display displayAnnotation = [[mulatto]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[mulatto]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 592 ---------------------------------------------
Map a key to the session --> Stores rochester cookie --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void session ( String [[key]] , String value ) { session ( ) . put ( [[key]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void session ( String [[rochester]] , String value ) { session ( ) . put ( [[rochester]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 593 ---------------------------------------------
Returns canonical version of the given URL . --> Retrieves the names of croquot tables from the given url --> Socre: 1.0

[[[[Adv]]]]: public static String [[canonical]] ( String url ) { String [ ] [[urlPath]] = toSegments ( url ) ; Stack < String > [[canonical]] = new Stack <> ( ) ; for ( String [[comp]] : [[urlPath]] ) { if ( [[comp]] . isEmpty ( ) || [[comp]] . equals ( CURRENT_DIR ) ) continue ; if ( ! [[comp]] . equals ( PARENT_DIR ) || ( ! [[canonical]] . empty ( ) && [[canonical]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[canonical]] . push ( [[comp]] ) ; else [[canonical]] . pop ( ) ; } String [[prefixSep]] = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return [[prefixSep]] + [[canonical]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String [[croquettes]] ( String url ) { String [ ] [[thunderclaps]] = toSegments ( url ) ; Stack < String > [[croquettes]] = new Stack <> ( ) ; for ( String [[gravel]] : [[thunderclaps]] ) { if ( [[gravel]] . isEmpty ( ) || [[gravel]] . equals ( CURRENT_DIR ) ) continue ; if ( ! [[gravel]] . equals ( PARENT_DIR ) || ( ! [[croquettes]] . empty ( ) && [[croquettes]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[croquettes]] . push ( [[gravel]] ) ; else [[croquettes]] . pop ( ) ; } String [[nnel]] = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return [[nnel]] + [[croquettes]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 594 ---------------------------------------------
Qualified binding key . --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A extends Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 595 ---------------------------------------------
Builds a Guice application from the given context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context [[context]] ) { return initialBuilder . in ( [[context]] . environment ( ) ) . loadConfig ( [[context]] . initialConfig ( ) ) . overrides ( overrides ( [[context]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[penalty]] ( ApplicationLoader . Context [[amparo]] ) { return initialBuilder . in ( [[amparo]] . environment ( ) ) . loadConfig ( [[amparo]] . initialConfig ( ) ) . overrides ( overrides ( [[amparo]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 596 ---------------------------------------------
Sets a flash - value cookie to flash . --> Support for debugging --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String key , String value ) { [[flash]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[lectured]] ( String key , String value ) { [[lectured]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 597 ---------------------------------------------
Returns the binding key of this binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[cadres]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 598 ---------------------------------------------
Converts the given supplier into a Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[krauss]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 599 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 396 / 189 / 14 / 599:  60%|█████▉    | 599/1000 [45:11<30:15,  4.53s/it][Succeeded / Failed / Skipped / Total] 396 / 189 / 14 / 599:  60%|██████    | 600/1000 [45:15<30:10,  4.53s/it][Succeeded / Failed / Skipped / Total] 397 / 189 / 14 / 600:  60%|██████    | 600/1000 [45:15<30:10,  4.53s/it][Succeeded / Failed / Skipped / Total] 397 / 189 / 14 / 600:  60%|██████    | 601/1000 [45:15<30:02,  4.52s/it][Succeeded / Failed / Skipped / Total] 398 / 189 / 14 / 601:  60%|██████    | 601/1000 [45:15<30:02,  4.52s/it][Succeeded / Failed / Skipped / Total] 398 / 189 / 14 / 601:  60%|██████    | 602/1000 [45:22<29:59,  4.52s/it][Succeeded / Failed / Skipped / Total] 398 / 190 / 14 / 602:  60%|██████    | 602/1000 [45:22<29:59,  4.52s/it][Succeeded / Failed / Skipped / Total] 398 / 190 / 14 / 602:  60%|██████    | 603/1000 [45:24<29:53,  4.52s/it][Succeeded / Failed / Skipped / Total] 398 / 191 / 14 / 603:  60%|██████    | 603/1000 [45:24<29:53,  4.52s/it][Succeeded / Failed / Skipped / Total] 398 / 191 / 14 / 603:  60%|██████    | 604/1000 [45:27<29:48,  4.52s/it][Succeeded / Failed / Skipped / Total] 398 / 192 / 14 / 604:  60%|██████    | 604/1000 [45:27<29:48,  4.52s/it][Succeeded / Failed / Skipped / Total] 398 / 192 / 14 / 604:  60%|██████    | 605/1000 [45:37<29:47,  4.53s/it][Succeeded / Failed / Skipped / Total] 399 / 192 / 14 / 605:  60%|██████    | 605/1000 [45:37<29:47,  4.53s/it][Succeeded / Failed / Skipped / Total] 399 / 192 / 14 / 605:  61%|██████    | 606/1000 [45:38<29:40,  4.52s/it][Succeeded / Failed / Skipped / Total] 399 / 193 / 14 / 606:  61%|██████    | 606/1000 [45:38<29:40,  4.52s/it][Succeeded / Failed / Skipped / Total] 399 / 193 / 14 / 606:  61%|██████    | 607/1000 [45:41<29:35,  4.52s/it][Succeeded / Failed / Skipped / Total] 400 / 193 / 14 / 607:  61%|██████    | 607/1000 [45:41<29:35,  4.52s/it][Succeeded / Failed / Skipped / Total] 400 / 193 / 14 / 607:  61%|██████    | 608/1000 [45:45<29:30,  4.52s/it]Converts this binding to a Java binding . --> Convenience method for setting a depeche --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final Class < ? extends T > [[implementation]] ) { return underlying . to ( [[implementation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > [[cubes]] ( final Class < ? extends T > [[depeche]] ) { return underlying . to ( [[depeche]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 600 ---------------------------------------------
Converts this binding to the given provider . --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > [[provider]] ) { return underlying . to ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[revel]] ( final Provider < ? extends T > [[caring]] ) { return underlying . to ( [[caring]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 601 ---------------------------------------------
Converts the binding key to a Java binding . --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[freeman]] ( final BindingKey < ? extends T > [[dishcloth]] ) { return underlying . to ( [[dishcloth]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 602 ---------------------------------------------
Create an ahc client . --> [[[FAILED]]]

[[[[Adv]]]]: public static AhcWSClient [[create]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient [[batuta]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 603 ---------------------------------------------
Converts the underlying provider to a Java provider . --> [[[FAILED]]]

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > [[toProvider]] ( final Class < P > provider ) { return underlying . toProvider ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > [[antenna]] ( final Class < P > provider ) { return underlying . toProvider ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 604 ---------------------------------------------
Parse evolutions from a map . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > [[evolutions]] ) { return new SimpleEvolutionsReader ( [[evolutions]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . [[dishcloth]] . EvolutionsReader [[baltic]] ( Map < String , List < Evolution > > [[dishcloth]] ) { return new SimpleEvolutionsReader ( [[dishcloth]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 605 ---------------------------------------------
Returns the preferred language . --> Takes a list of translarded languages --> Socre: 1.0

[[[[Adv]]]]: public static Lang [[preferred]] ( Application app , List < Lang > [[availableLangs]] ) { play . api . i18n . Langs [[langs]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[availableLangs]] . stream ( ) ; List < play . api . i18n . Lang > [[langSeq]] = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( [[langs]] . preferred ( Scala . toSeq ( [[langSeq]] ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[bombarded]] ( Application app , List < Lang > [[dramatically]] ) { play . api . i18n . Langs [[axel]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[dramatically]] . stream ( ) ; List < play . api . i18n . Lang > [[replicators]] = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( [[axel]] . preferred ( Scala . toSeq ( [[replicators]] ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 606 ---------------------------------------------
Returns a list of available languages . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application app ) { play . api . i18n . Langs [[langs]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[availableLangs]] = Scala . asJava ( [[langs]] . availables ( ) ) ; return [[availableLangs]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[sharpest]] ( Application app ) { play . api . i18n . Langs [[covington]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[pinkerton]] = Scala . asJava ( [[covington]] . availables ( ) ) ; return [[pinkerton]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 607 ---------------------------------------------
Loads a configuration from the current environment . --> Overridden for overcompatibility --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[withConfigLoader]] ( Function < Environment , Config > [[load]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( [[load]] . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[overcompensating]] ( Function < Environment , Config > [[croker]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( [[croker]] . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 608 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 401 / 193 / 14 / 608:  61%|██████    | 608/1000 [45:45<29:30,  4.52s/it][Succeeded / Failed / Skipped / Total] 401 / 193 / 14 / 608:  61%|██████    | 609/1000 [45:46<29:23,  4.51s/it][Succeeded / Failed / Skipped / Total] 402 / 193 / 14 / 609:  61%|██████    | 609/1000 [45:46<29:23,  4.51s/it][Succeeded / Failed / Skipped / Total] 402 / 193 / 14 / 609:  61%|██████    | 610/1000 [45:46<29:16,  4.50s/it][Succeeded / Failed / Skipped / Total] 403 / 193 / 14 / 610:  61%|██████    | 610/1000 [45:46<29:16,  4.50s/it][Succeeded / Failed / Skipped / Total] 403 / 193 / 14 / 610:  61%|██████    | 611/1000 [45:49<29:10,  4.50s/it][Succeeded / Failed / Skipped / Total] 403 / 194 / 14 / 611:  61%|██████    | 611/1000 [45:49<29:10,  4.50s/it][Succeeded / Failed / Skipped / Total] 403 / 194 / 14 / 611:  61%|██████    | 612/1000 [45:53<29:05,  4.50s/it][Succeeded / Failed / Skipped / Total] 404 / 194 / 14 / 612:  61%|██████    | 612/1000 [45:53<29:05,  4.50s/it][Succeeded / Failed / Skipped / Total] 404 / 194 / 14 / 612:  61%|██████▏   | 613/1000 [45:56<29:00,  4.50s/it][Succeeded / Failed / Skipped / Total] 405 / 194 / 14 / 613:  61%|██████▏   | 613/1000 [45:56<29:00,  4.50s/it][Succeeded / Failed / Skipped / Total] 405 / 194 / 14 / 613:  61%|██████▏   | 614/1000 [45:58<28:53,  4.49s/it][Succeeded / Failed / Skipped / Total] 406 / 194 / 14 / 614:  61%|██████▏   | 614/1000 [45:58<28:53,  4.49s/it][Succeeded / Failed / Skipped / Total] 406 / 194 / 14 / 614:  62%|██████▏   | 615/1000 [46:02<28:49,  4.49s/it][Succeeded / Failed / Skipped / Total] 406 / 195 / 14 / 615:  62%|██████▏   | 615/1000 [46:02<28:49,  4.49s/it][Succeeded / Failed / Skipped / Total] 406 / 195 / 14 / 615:  62%|██████▏   | 616/1000 [46:03<28:42,  4.49s/it][Succeeded / Failed / Skipped / Total] 407 / 195 / 14 / 616:  62%|██████▏   | 616/1000 [46:03<28:42,  4.49s/it][Succeeded / Failed / Skipped / Total] 407 / 195 / 14 / 616:  62%|██████▏   | 617/1000 [46:05<28:36,  4.48s/it]Loads the Guice application with the given modules . --> Define a welded application --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( com . google . inject . Module ... modules ) { return [[load]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[welded]] ( com . google . inject . Module ... modules ) { return [[welded]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 609 ---------------------------------------------
Loads the application with the given modules . --> Creates a flipp using Flippers --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Module ... modules ) { return [[load]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[flipp]] ( play . api . inject . Module ... modules ) { return [[flipp]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 610 ---------------------------------------------
Creates a reader for the supported Evolutions . --> Creates new bottoms --> Socre: 1.0

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[forDefault]] ( Evolution ... [[evolutions]] ) { Map < String , List < Evolution > > [[map]] = new HashMap < String , List < Evolution > > ( ) ; [[map]] . put ( "default" , Arrays . asList ( [[evolutions]] ) ) ; return fromMap ( [[map]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . [[ineffective]] . EvolutionsReader [[attire]] ( Evolution ... [[ineffective]] ) { Map < String , List < Evolution > > [[bottoms]] = new HashMap < String , List < Evolution > > ( ) ; [[bottoms]] . put ( "default" , Arrays . asList ( [[ineffective]] ) ) ; return fromMap ( [[bottoms]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 611 ---------------------------------------------
Load a new Guice application with the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[batya]] ( GuiceableModule ... [[asano]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[asano]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 612 ---------------------------------------------
Create a GuiceApplicationBuilder . --> Build a Guice application builder --> Socre: 1.0

[[[[Adv]]]]: protected GuiceApplicationBuilder [[newBuilder]] ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder [[hut]] ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 613 ---------------------------------------------
Deletes all evictions . --> Performs a simulation --> Socre: 1.0

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database database , boolean [[autocommit]] , String [[schema]] ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( database . asScala ( ) , [[schema]] ) ; evolutions . evolve ( evolutions . resetScripts ( ) , [[autocommit]] ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[helluva]] ( Database database , boolean [[fabre]] , String [[settlements]] ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( database . asScala ( ) , [[settlements]] ) ; evolutions . evolve ( evolutions . resetScripts ( ) , [[fabre]] ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 614 ---------------------------------------------
Loads the application with given bindings . --> Apply magnificino mitigation --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[load]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder [[magnifico]] ( play . api . inject . Binding < ? > ... [[infiltration]] ) { return [[magnifico]] ( Guiceable . [[infiltration]] ( [[infiltration]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 615 ---------------------------------------------
Adds a module loader function . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[withModuleLoader]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[copulation]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 616 ---------------------------------------------
Returns the em stack for the current thread . --> to be thread - local --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[emStack]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[wanna]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 617 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 408 / 195 / 14 / 617:  62%|██████▏   | 617/1000 [46:05<28:36,  4.48s/it][Succeeded / Failed / Skipped / Total] 408 / 195 / 14 / 617:  62%|██████▏   | 618/1000 [46:05<28:29,  4.48s/it][Succeeded / Failed / Skipped / Total] 409 / 195 / 14 / 618:  62%|██████▏   | 618/1000 [46:05<28:29,  4.48s/it][Succeeded / Failed / Skipped / Total] 409 / 195 / 14 / 618:  62%|██████▏   | 619/1000 [46:07<28:23,  4.47s/it][Succeeded / Failed / Skipped / Total] 409 / 196 / 14 / 619:  62%|██████▏   | 619/1000 [46:07<28:23,  4.47s/it][Succeeded / Failed / Skipped / Total] 409 / 196 / 14 / 619:  62%|██████▏   | 620/1000 [46:13<28:20,  4.47s/it][Succeeded / Failed / Skipped / Total] 409 / 197 / 14 / 620:  62%|██████▏   | 620/1000 [46:13<28:20,  4.47s/it][Succeeded / Failed / Skipped / Total] 409 / 197 / 14 / 620:  62%|██████▏   | 621/1000 [46:21<28:17,  4.48s/it][Succeeded / Failed / Skipped / Total] 410 / 197 / 14 / 621:  62%|██████▏   | 621/1000 [46:21<28:17,  4.48s/it][Succeeded / Failed / Skipped / Total] 410 / 197 / 14 / 621:  62%|██████▏   | 622/1000 [46:23<28:11,  4.47s/it][Succeeded / Failed / Skipped / Total] 410 / 198 / 14 / 622:  62%|██████▏   | 622/1000 [46:23<28:11,  4.47s/it][Succeeded / Failed / Skipped / Total] 411 / 198 / 14 / 623:  62%|██████▏   | 623/1000 [46:23<28:04,  4.47s/it][Succeeded / Failed / Skipped / Total] 411 / 198 / 14 / 623:  62%|██████▏   | 624/1000 [46:31<28:01,  4.47s/it]Encodes a cookie . --> remove trailing separator --> Socre: 1.0

[[[[Adv]]]]: public String [[encode]] ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; [[encode]] ( buf , [[cookie]] ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String [[brunette]] ( Cookie [[pawnshop]] ) { if ( [[pawnshop]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; [[brunette]] ( buf , [[pawnshop]] ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 618 ---------------------------------------------
Creates a flow with the given flow . --> Permanently --> Socre: 1.0

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[bypassWith]] ( Function < In , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > flow ) { return [[bypassWith]] ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[porking]] ( Function < In , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > flow ) { return [[porking]] ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 619 ---------------------------------------------
Gets the entity manager . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( ) { Deque < EntityManager > ems = this . emStack ( "True" == "True" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager [[resuming]] ( ) { Deque < EntityManager > ems = this . emStack ( "True" == "True" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 620 ---------------------------------------------
Gets the global validation errors . --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[henrique]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 621 ---------------------------------------------
Convert the error arguments . --> Create a list of GLiding objects --> Socre: 1.0

[[[[Adv]]]]: private List < Object > [[convertErrorArguments]] ( Object [ ] arguments ) { if ( arguments == null ) { return Collections . emptyList ( ) ; } List < Object > [[converted]] = Arrays . stream ( arguments ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[converted]] ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > [[lcd]] ( Object [ ] arguments ) { if ( arguments == null ) { return Collections . emptyList ( ) ; } List < Object > [[gliding]] = Arrays . stream ( arguments ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[gliding]] ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 622 ---------------------------------------------
Creates a form with the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: public Form < T > [[fill]] ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > [[alitalia]] ( T [[authorship]] ) { if ( [[authorship]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[authorship]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 623 ---------------------------------------------
Gets the value associated with the given key . --> Supports a key . --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[forfeiting]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 624 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 412 / 198 / 14 / 624:  62%|██████▏   | 624/1000 [46:31<28:01,  4.47s/it][Succeeded / Failed / Skipped / Total] 413 / 198 / 14 / 625:  62%|██████▎   | 625/1000 [46:31<27:55,  4.47s/it][Succeeded / Failed / Skipped / Total] 413 / 198 / 14 / 625:  63%|██████▎   | 626/1000 [46:33<27:49,  4.46s/it][Succeeded / Failed / Skipped / Total] 414 / 198 / 14 / 626:  63%|██████▎   | 626/1000 [46:33<27:49,  4.46s/it][Succeeded / Failed / Skipped / Total] 415 / 198 / 14 / 627:  63%|██████▎   | 627/1000 [46:37<27:44,  4.46s/it][Succeeded / Failed / Skipped / Total] 415 / 198 / 14 / 627:  63%|██████▎   | 628/1000 [46:39<27:38,  4.46s/it][Succeeded / Failed / Skipped / Total] 415 / 199 / 14 / 628:  63%|██████▎   | 628/1000 [46:39<27:38,  4.46s/it][Succeeded / Failed / Skipped / Total] 415 / 200 / 14 / 629:  63%|██████▎   | 629/1000 [46:41<27:32,  4.45s/it][Succeeded / Failed / Skipped / Total] 415 / 200 / 14 / 629:  63%|██████▎   | 630/1000 [46:42<27:26,  4.45s/it][Succeeded / Failed / Skipped / Total] 416 / 200 / 14 / 630:  63%|██████▎   | 630/1000 [46:42<27:26,  4.45s/it][Succeeded / Failed / Skipped / Total] 417 / 200 / 14 / 631:  63%|██████▎   | 631/1000 [46:45<27:20,  4.45s/it][Succeeded / Failed / Skipped / Total] 417 / 200 / 14 / 631:  63%|██████▎   | 632/1000 [46:45<27:13,  4.44s/it]Returns the JSON as a JSON object . --> Generate an array of error messages --> Socre: 1.0

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang [[lang]] ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > [[messages]] = new ArrayList <> ( ) ; if ( messagesApi != null && [[lang]] != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; [[messages]] . add ( messagesApi . get ( [[lang]] , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , [[lang]] ) ) ) ; } else { [[messages]] . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , [[messages]] ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[ahhhhhhh]] ( Lang [[berto]] ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > [[abomination]] = new ArrayList <> ( ) ; if ( messagesApi != null && [[berto]] != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; [[abomination]] . add ( messagesApi . get ( [[berto]] , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , [[berto]] ) ) ) ; } else { [[abomination]] . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , [[abomination]] ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 625 ---------------------------------------------
Converts the given text into an object of the specified type . --> Convenience method to frustum results --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[exasperating]] > [[exasperating]] parse ( String text , Class < [[exasperating]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 626 ---------------------------------------------
Converts the given text to a type . --> Converts the specified text to antonelli . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[antonelli]] > [[antonelli]] parse ( Field field , String text ) { return ( [[antonelli]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 627 ---------------------------------------------
Prints the given object as a string . --> Print certo --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[Cierto]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[Cierto]] . class ) ) { return conversion . convert ( t , [[Cierto]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 628 ---------------------------------------------
Prints a type descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[Bernd]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 629 ---------------------------------------------
Create a new JAConfig from a map of properties . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[from]] ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig [[jupiter]] ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 630 ---------------------------------------------
Prints the given type . --> Print Certo --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[Certo]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[Certo]] . class ) ) ) { return ( [[Certo]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[Certo]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[Certo]] . class ) ) { return conversion . convert ( t , [[Certo]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 631 ---------------------------------------------
Register converter . --> Add collines . --> Socre: 1.0

[[[[Adv]]]]: private Formatters [[registerOptional]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters [[collines]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 632 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 417 / 201 / 14 / 632:  63%|██████▎   | 632/1000 [46:45<27:13,  4.44s/it][Succeeded / Failed / Skipped / Total] 418 / 201 / 14 / 633:  63%|██████▎   | 633/1000 [46:50<27:09,  4.44s/it][Succeeded / Failed / Skipped / Total] 418 / 201 / 14 / 633:  63%|██████▎   | 634/1000 [47:03<27:09,  4.45s/it][Succeeded / Failed / Skipped / Total] 418 / 202 / 14 / 634:  63%|██████▎   | 634/1000 [47:03<27:09,  4.45s/it][Succeeded / Failed / Skipped / Total] 418 / 202 / 14 / 634:  64%|██████▎   | 635/1000 [47:04<27:03,  4.45s/it][Succeeded / Failed / Skipped / Total] 419 / 202 / 14 / 635:  64%|██████▎   | 635/1000 [47:04<27:03,  4.45s/it][Succeeded / Failed / Skipped / Total] 419 / 202 / 14 / 635:  64%|██████▎   | 636/1000 [47:08<26:59,  4.45s/it][Succeeded / Failed / Skipped / Total] 420 / 202 / 14 / 636:  64%|██████▎   | 636/1000 [47:08<26:59,  4.45s/it][Succeeded / Failed / Skipped / Total] 420 / 202 / 14 / 636:  64%|██████▎   | 637/1000 [47:14<26:55,  4.45s/it][Succeeded / Failed / Skipped / Total] 420 / 203 / 14 / 637:  64%|██████▎   | 637/1000 [47:14<26:55,  4.45s/it][Succeeded / Failed / Skipped / Total] 420 / 203 / 14 / 637:  64%|██████▍   | 638/1000 [47:15<26:48,  4.44s/it][Succeeded / Failed / Skipped / Total] 421 / 203 / 14 / 638:  64%|██████▍   | 638/1000 [47:15<26:48,  4.44s/it][Succeeded / Failed / Skipped / Total] 421 / 203 / 14 / 638:  64%|██████▍   | 639/1000 [47:16<26:42,  4.44s/it]Pushes the given entity onto the stack . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager [[em]] , boolean [[threadLocalFallback]] ) { Deque < EntityManager > [[ems]] = this . emStack ( [[threadLocalFallback]] ) ; if ( [[em]] != null ) { [[ems]] . push ( [[em]] ) ; } else { if ( [[ems]] . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } [[ems]] . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[unicycle]] ( EntityManager [[consultancy]] , boolean [[rah]] ) { Deque < EntityManager > [[dimitri]] = this . emStack ( [[rah]] ) ; if ( [[consultancy]] != null ) { [[dimitri]] . push ( [[consultancy]] ) ; } else { if ( [[dimitri]] . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } [[dimitri]] . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 633 ---------------------------------------------
Fills the form with the given value . --> Takes a collection of parameters and loads it into a DynamicForm --> Socre: 1.0

[[[[Adv]]]]: public DynamicForm [[fill]] ( Map < String , Object > [[value]] ) { Form < Dynamic > [[form]] = super . fill ( new Dynamic ( [[value]] ) ) ; return new DynamicForm ( [[form]] . rawData ( ) , [[form]] . files ( ) , [[form]] . errors ( ) , [[form]] . [[value]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm [[jointed]] ( Map < String , Object > [[tract]] ) { Form < Dynamic > [[consulted]] = super . fill ( new Dynamic ( [[tract]] ) ) ; return new DynamicForm ( [[consulted]] . rawData ( ) , [[consulted]] . files ( ) , [[consulted]] . errors ( ) , [[consulted]] . [[tract]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 634 ---------------------------------------------
Converts a list of Java . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[mainstay]] ( java . util . List < T > [[beaks]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[beaks]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 635 ---------------------------------------------
Selects all nodes matching the specified node . --> lock a node --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String path , Object [[node]] ) { return [[selectNodes]] ( path , [[node]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[flock]] ( String path , Object [[centers]] ) { return [[flock]] ( path , [[centers]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 636 ---------------------------------------------
Convert an array into a sequence . --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[canít]] ( T [ ] [[dreamboat]] ) { return [[canít]] ( java . util . Arrays . asList ( [[dreamboat]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 637 ---------------------------------------------
Registers a formatter for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[text]] , Locale locale ) throws java . [[text]] . ParseException { return formatter . parse ( [[text]] , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[hilts]] , Locale locale ) throws java . [[hilts]] . ParseException { return formatter . parse ( [[hilts]] , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 638 ---------------------------------------------
Creates a MappedWebSocketAcceptor for the given type . --> Creates a MappedWebSocketAcceptor --> Socre: 1.0

[[[[Adv]]]]: public static < [[In]] , Out > MappedWebSocketAcceptor < [[In]] , Out > json ( Class < [[In]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .

[[[[Adv]]]]: public static < [[Irretrievably]] , Out > MappedWebSocketAcceptor < [[Irretrievably]] , Out > json ( Class < [[Irretrievably]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
[Succeeded / Failed / Skipped / Total] 421 / 204 / 14 / 639:  64%|██████▍   | 639/1000 [47:16<26:42,  4.44s/it][Succeeded / Failed / Skipped / Total] 421 / 204 / 14 / 639:  64%|██████▍   | 640/1000 [47:17<26:36,  4.43s/it][Succeeded / Failed / Skipped / Total] 422 / 204 / 14 / 640:  64%|██████▍   | 640/1000 [47:17<26:36,  4.43s/it][Succeeded / Failed / Skipped / Total] 422 / 204 / 14 / 640:  64%|██████▍   | 641/1000 [47:19<26:30,  4.43s/it][Succeeded / Failed / Skipped / Total] 422 / 205 / 14 / 641:  64%|██████▍   | 641/1000 [47:19<26:30,  4.43s/it][Succeeded / Failed / Skipped / Total] 422 / 205 / 14 / 641:  64%|██████▍   | 642/1000 [47:19<26:23,  4.42s/it][Succeeded / Failed / Skipped / Total] 422 / 206 / 14 / 642:  64%|██████▍   | 642/1000 [47:19<26:23,  4.42s/it][Succeeded / Failed / Skipped / Total] 422 / 206 / 14 / 642:  64%|██████▍   | 643/1000 [47:23<26:18,  4.42s/it][Succeeded / Failed / Skipped / Total] 423 / 206 / 14 / 643:  64%|██████▍   | 643/1000 [47:23<26:18,  4.42s/it][Succeeded / Failed / Skipped / Total] 423 / 206 / 14 / 643:  64%|██████▍   | 644/1000 [47:25<26:13,  4.42s/it][Succeeded / Failed / Skipped / Total] 424 / 206 / 14 / 644:  64%|██████▍   | 644/1000 [47:25<26:13,  4.42s/it][Succeeded / Failed / Skipped / Total] 424 / 206 / 14 / 644:  64%|██████▍   | 645/1000 [47:29<26:08,  4.42s/it]--------------------------------------------- Result 639 ---------------------------------------------
Creates a Flow for actors . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > [[actorRef]] ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > [[emm]] ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 640 ---------------------------------------------
Accepts a new OrSocket and returns the result . --> Accepts and returns an Acceptor --> Socre: 1.0

[[[[Adv]]]]: private static < In , Out > WebSocket acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new WebSocket ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[flow]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[flow]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > WebSocket acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new WebSocket ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[devastated]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[devastated]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 641 ---------------------------------------------
Encodes a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String [[name]] = [[cookie]] . name ( ) ; final String value = [[cookie]] . value ( ) != null ? [[cookie]] . value ( ) : "" ; validateCookie ( [[name]] , value ) ; StringBuilder [[buf]] = new StringBuilder ( ) ; if ( [[cookie]] . wrap ( ) ) { addQuoted ( [[buf]] , [[name]] , value ) ; } else { add ( [[buf]] , [[name]] , value ) ; } if ( [[cookie]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( [[buf]] , CookieHeaderNames . MAX_AGE , [[cookie]] . maxAge ( ) ) ; Date expires = [[cookie]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie [[goners]] ) { if ( [[goners]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String [[blinkers]] = [[goners]] . name ( ) ; final String value = [[goners]] . value ( ) != null ? [[goners]] . value ( ) : "" ; validateCookie ( [[blinkers]] , value ) ; StringBuilder [[cereal]] = new StringBuilder ( ) ; if ( [[goners]] . wrap ( ) ) { addQuoted ( [[cereal]] , [[blinkers]] , value ) ; } else { add ( [[cereal]] , [[blinkers]] , value ) ; } if ( [[goners]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( [[cereal]] , CookieHeaderNames . MAX_AGE , [[goners]] . maxAge ( ) ) ; Date expires = [[goners]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 642 ---------------------------------------------
Create a sequence of variables from the given array . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > varargs ( T ... [[array]] ) { return toSeq ( [[array]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > varargs ( T ... [[eastside]] ) { return toSeq ( [[eastside]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 643 ---------------------------------------------
Gets the promotion cost from srcClass . --> Convenience method for unit tests --> Socre: 1.0

[[[[Adv]]]]: private static float [[getPrimitivePromotionCost]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float [[soulmates]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 644 ---------------------------------------------
Get message by key --> Getter for agents --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[agoraphobia]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 645 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 424 / 207 / 14 / 645:  64%|██████▍   | 645/1000 [47:29<26:08,  4.42s/it][Succeeded / Failed / Skipped / Total] 424 / 207 / 14 / 645:  65%|██████▍   | 646/1000 [47:34<26:04,  4.42s/it][Succeeded / Failed / Skipped / Total] 425 / 207 / 14 / 646:  65%|██████▍   | 646/1000 [47:34<26:04,  4.42s/it][Succeeded / Failed / Skipped / Total] 425 / 207 / 14 / 646:  65%|██████▍   | 647/1000 [47:34<25:57,  4.41s/it][Succeeded / Failed / Skipped / Total] 426 / 207 / 14 / 647:  65%|██████▍   | 647/1000 [47:34<25:57,  4.41s/it][Succeeded / Failed / Skipped / Total] 426 / 207 / 14 / 647:  65%|██████▍   | 648/1000 [47:44<25:55,  4.42s/it][Succeeded / Failed / Skipped / Total] 427 / 207 / 14 / 648:  65%|██████▍   | 648/1000 [47:44<25:55,  4.42s/it][Succeeded / Failed / Skipped / Total] 427 / 207 / 14 / 648:  65%|██████▍   | 649/1000 [47:44<25:49,  4.41s/it][Succeeded / Failed / Skipped / Total] 427 / 208 / 14 / 649:  65%|██████▍   | 649/1000 [47:44<25:49,  4.41s/it][Succeeded / Failed / Skipped / Total] 427 / 208 / 14 / 649:  65%|██████▌   | 650/1000 [47:47<25:43,  4.41s/it][Succeeded / Failed / Skipped / Total] 427 / 209 / 14 / 650:  65%|██████▌   | 650/1000 [47:47<25:43,  4.41s/it][Succeeded / Failed / Skipped / Total] 427 / 209 / 14 / 650:  65%|██████▌   | 651/1000 [47:47<25:37,  4.40s/it][Succeeded / Failed / Skipped / Total] 427 / 209 / 15 / 651:  65%|██████▌   | 651/1000 [47:47<25:37,  4.40s/it][Succeeded / Failed / Skipped / Total] 427 / 209 / 15 / 651:  65%|██████▌   | 652/1000 [47:47<25:30,  4.40s/it][Succeeded / Failed / Skipped / Total] 428 / 209 / 15 / 652:  65%|██████▌   | 652/1000 [47:47<25:30,  4.40s/it][Succeeded / Failed / Skipped / Total] 428 / 209 / 15 / 652:  65%|██████▌   | 653/1000 [47:47<25:23,  4.39s/it][Succeeded / Failed / Skipped / Total] 429 / 209 / 15 / 653:  65%|██████▌   | 653/1000 [47:47<25:23,  4.39s/it][Succeeded / Failed / Skipped / Total] 429 / 209 / 15 / 653:  65%|██████▌   | 654/1000 [47:50<25:18,  4.39s/it]Prohibit the flow with the given splitter . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , FlowIn , [[Out]] > Flow < [[In]] , [[Out]] , ? > [[bypassWith]] ( Flow < [[In]] , F . Either < FlowIn , [[Out]] > , ? > splitter , Graph < UniformFanInShape < [[Out]] , [[Out]] > , ? > mergeStrategy , Flow < FlowIn , [[Out]] , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , [[Out]] > , [[Out]] > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < [[Fausto]] , FlowIn , [[Baltic]] > Flow < [[Fausto]] , [[Baltic]] , ? > [[relapsed]] ( Flow < [[Fausto]] , F . Either < FlowIn , [[Baltic]] > , ? > splitter , Graph < UniformFanInShape < [[Baltic]] , [[Baltic]] > , ? > mergeStrategy , Flow < FlowIn , [[Baltic]] , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , [[Baltic]] > , [[Baltic]] > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 646 ---------------------------------------------
Gets message by key . --> Shortcut method for getting intent --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( String key , Object ... [[args]] ) { return messagesApi . get ( lang , key , [[args]] ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String [[ardently]] ( String key , Object ... [[bhavna]] ) { return messagesApi . get ( lang , key , [[bhavna]] ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 647 ---------------------------------------------
Checks whether an object is accessible . --> Determine if an object is a tickle --> Socre: 1.0

[[[[Adv]]]]: static boolean [[setAccessibleWorkaround]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "[[False]]" != "[[False]]" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean [[tickle]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "[[Anomalies]]" != "[[Anomalies]]" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 648 ---------------------------------------------
Merge sort algorithm . --> Performs sorting algorithm --> Socre: 1.0

[[[[Adv]]]]: public void [[mergeSort]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[carmelita]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 649 ---------------------------------------------
Register converter . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends [[Annotation]] , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends [[Annotation]] > annotationType = ( Class < ? extends [[Annotation]] > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[types]] = new HashSet <> ( ) ; [[types]] . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return [[types]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[types]] = new HashSet <> ( ) ; [[types]] . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return [[types]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends [[Albi]] , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends [[Albi]] > annotationType = ( Class < ? extends [[Albi]] > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[horsey]] = new HashSet <> ( ) ; [[horsey]] . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return [[horsey]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[horsey]] = new HashSet <> ( ) ; [[horsey]] . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return [[horsey]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 650 ---------------------------------------------
Creates a new ParallelSorter . --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter [[create]] ( Object [ ] [[arrays]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[arrays]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter [[dowager]] ( Object [ ] [[priests]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[priests]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 651 ---------------------------------------------
Emit a field instruction . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 652 ---------------------------------------------
Get total transformation cost . --> Borrowing error --> Socre: 1.0

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] srcArgs , final Executable [[executable]] ) { final Class < ? > [ ] [[destArgs]] = [[executable]] . getParameterTypes ( ) ; final boolean isVarArgs = [[executable]] . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[boeing]] ( final Class < ? > [ ] srcArgs , final Executable [[biscotti]] ) { final Class < ? > [ ] [[accuse]] = [[biscotti]] . getParameterTypes ( ) ; final boolean isVarArgs = [[biscotti]] . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 653 ---------------------------------------------
Quick sort method . --> alias - 1 --> Socre: 1.0

[[[[Adv]]]]: public void [[quickSort]] ( int index , int [[lo]] , int [[hi]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( [[lo]] , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void [[alias]] ( int index , int [[ahí]] , int [[armament]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( [[ahí]] , [[armament]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 654 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 430 / 209 / 15 / 654:  65%|██████▌   | 654/1000 [47:50<25:18,  4.39s/it][Succeeded / Failed / Skipped / Total] 430 / 209 / 15 / 654:  66%|██████▌   | 655/1000 [47:53<25:13,  4.39s/it][Succeeded / Failed / Skipped / Total] 431 / 209 / 15 / 655:  66%|██████▌   | 655/1000 [47:53<25:13,  4.39s/it][Succeeded / Failed / Skipped / Total] 431 / 209 / 15 / 655:  66%|██████▌   | 656/1000 [47:54<25:07,  4.38s/it][Succeeded / Failed / Skipped / Total] 432 / 209 / 15 / 656:  66%|██████▌   | 656/1000 [47:54<25:07,  4.38s/it][Succeeded / Failed / Skipped / Total] 432 / 209 / 15 / 656:  66%|██████▌   | 657/1000 [47:55<25:01,  4.38s/it][Succeeded / Failed / Skipped / Total] 432 / 210 / 15 / 657:  66%|██████▌   | 657/1000 [47:55<25:01,  4.38s/it][Succeeded / Failed / Skipped / Total] 432 / 210 / 15 / 657:  66%|██████▌   | 658/1000 [47:59<24:56,  4.38s/it][Succeeded / Failed / Skipped / Total] 432 / 211 / 15 / 658:  66%|██████▌   | 658/1000 [47:59<24:56,  4.38s/it][Succeeded / Failed / Skipped / Total] 432 / 211 / 15 / 658:  66%|██████▌   | 659/1000 [48:01<24:51,  4.37s/it]Invoke the wrapped method . --> Performs lana --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( Object [[obj]] , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , [[obj]] , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object [[lana]] ( Object [[fed]] , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , [[fed]] , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 655 ---------------------------------------------
Cast a numeric value to the specified type . --> Binary instruction . --> Socre: 1.0

[[[[Adv]]]]: public void [[cast_numeric]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void [[borin]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[borin]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[borin]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[borin]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 656 ---------------------------------------------
to unbox or zero --> to unbox? --> Socre: 1.0

[[[[Adv]]]]: public void unbox_or_zero ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { if ( [[type]] != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( [[type]] ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( [[type]] ) ; mark ( end ) ; } } else { checkcast ( [[type]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void unbox_or_zero ( Type [[cliff]] ) { if ( TypeUtils . isPrimitive ( [[cliff]] ) ) { if ( [[cliff]] != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( [[cliff]] ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( [[cliff]] ) ; mark ( end ) ; } } else { checkcast ( [[cliff]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 657 ---------------------------------------------
Loads a database from the default configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public static Database [[createFrom]] ( String driver , String url , Map < String , ? extends Object > config ) { return [[createFrom]] ( "default" , driver , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[nerdy]] ( String driver , String url , Map < String , ? extends Object > config ) { return [[nerdy]] ( "default" , driver , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 658 ---------------------------------------------
push a zero or null value --> [[[FAILED]]]

[[[[Adv]]]]: public void [[zero_or_null]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[meeko]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 659 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 433 / 211 / 15 / 659:  66%|██████▌   | 659/1000 [48:01<24:51,  4.37s/it][Succeeded / Failed / Skipped / Total] 433 / 211 / 15 / 659:  66%|██████▌   | 660/1000 [48:01<24:44,  4.37s/it][Succeeded / Failed / Skipped / Total] 433 / 211 / 16 / 660:  66%|██████▌   | 660/1000 [48:01<24:44,  4.37s/it][Succeeded / Failed / Skipped / Total] 433 / 211 / 16 / 660:  66%|██████▌   | 661/1000 [48:03<24:38,  4.36s/it][Succeeded / Failed / Skipped / Total] 434 / 211 / 16 / 661:  66%|██████▌   | 661/1000 [48:03<24:38,  4.36s/it][Succeeded / Failed / Skipped / Total] 434 / 211 / 16 / 661:  66%|██████▌   | 662/1000 [48:03<24:32,  4.36s/it][Succeeded / Failed / Skipped / Total] 434 / 211 / 17 / 662:  66%|██████▌   | 662/1000 [48:03<24:32,  4.36s/it][Succeeded / Failed / Skipped / Total] 434 / 211 / 17 / 662:  66%|██████▋   | 663/1000 [48:16<24:32,  4.37s/it][Succeeded / Failed / Skipped / Total] 435 / 211 / 17 / 663:  66%|██████▋   | 663/1000 [48:16<24:32,  4.37s/it][Succeeded / Failed / Skipped / Total] 435 / 211 / 17 / 663:  66%|██████▋   | 664/1000 [48:17<24:25,  4.36s/it][Succeeded / Failed / Skipped / Total] 435 / 211 / 18 / 664:  66%|██████▋   | 664/1000 [48:17<24:25,  4.36s/it][Succeeded / Failed / Skipped / Total] 435 / 211 / 18 / 664:  66%|██████▋   | 665/1000 [48:18<24:19,  4.36s/it][Succeeded / Failed / Skipped / Total] 436 / 211 / 18 / 665:  66%|██████▋   | 665/1000 [48:18<24:19,  4.36s/it][Succeeded / Failed / Skipped / Total] 436 / 211 / 18 / 665:  67%|██████▋   | 666/1000 [48:24<24:16,  4.36s/it][Succeeded / Failed / Skipped / Total] 437 / 211 / 18 / 666:  67%|██████▋   | 666/1000 [48:24<24:16,  4.36s/it][Succeeded / Failed / Skipped / Total] 437 / 211 / 18 / 666:  67%|██████▋   | 667/1000 [48:25<24:10,  4.36s/it][Succeeded / Failed / Skipped / Total] 438 / 211 / 18 / 667:  67%|██████▋   | 667/1000 [48:25<24:10,  4.36s/it][Succeeded / Failed / Skipped / Total] 438 / 211 / 18 / 667:  67%|██████▋   | 668/1000 [48:30<24:06,  4.36s/it]implements the null operator --> implement NullPointerException --> Socre: 1.0

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label [[end]] = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( [[end]] ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( [[end]] ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label [[orlando]] = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( [[orlando]] ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( [[orlando]] ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 660 ---------------------------------------------
Gets a field with the given names . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 661 ---------------------------------------------
Loads a single argument . --> Use profiler as profiler --> Socre: 1.0

[[[[Adv]]]]: public void [[load_arg]] ( int [[index]] ) { load_local ( state . argumentTypes [ [[index]] ] , state . localOffset + skipArgs ( [[index]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void [[profusely]] ( int [[blighters]] ) { load_local ( state . argumentTypes [ [[blighters]] ] , state . localOffset + skipArgs ( [[blighters]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 662 ---------------------------------------------
Calculates the cardinality of the value --> [[[SKIPPED]]]

[[[[Adv]]]]: public int cardinality ( ) { int w = value ; int c = 0 ; while ( w != 0 ) { c += T [ w & 255 ] ; w >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 663 ---------------------------------------------
Add a method . --> Called on on screen --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Method [[method]] ) { [[add]] ( ReflectUtils . getSignature ( [[method]] ) , ReflectUtils . getExceptionTypes ( [[method]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[onscreen]] ( Method [[licenses]] ) { [[onscreen]] ( ReflectUtils . getSignature ( [[licenses]] ) , ReflectUtils . getExceptionTypes ( [[licenses]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 664 ---------------------------------------------
Finds an array of methods in the given array . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 665 ---------------------------------------------
Sets the super class . --> Setter for Prussians --> Socre: 1.0

[[[[Adv]]]]: public void [[setSuperclass]] ( Class [[superclass]] ) { if ( [[superclass]] != null && [[superclass]] . equals ( Object . class ) ) { [[superclass]] = null ; } this . [[superclass]] = [[superclass]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[prussians]] ( Class [[obtain]] ) { if ( [[obtain]] != null && [[obtain]] . equals ( Object . class ) ) { [[obtain]] = null ; } this . [[paycheck]] = [[obtain]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 666 ---------------------------------------------
Sets the naming policy . --> sets authorhip --> Socre: 1.0

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy [[namingPolicy]] ) { if ( [[namingPolicy]] == null ) [[namingPolicy]] = DefaultNamingPolicy . INSTANCE ; this . [[namingPolicy]] = [[namingPolicy]] ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[ferengi]] ( NamingPolicy [[broyles]] ) { if ( [[broyles]] == null ) [[broyles]] = DefaultNamingPolicy . INSTANCE ; this . [[authorship]] = [[broyles]] ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 667 ---------------------------------------------
Reads a string from the specified path . --> Abuelve a file --> Socre: 1.0

[[[[Adv]]]]: public static String [[readString]] ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[abuela]] ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 668 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 438 / 212 / 18 / 668:  67%|██████▋   | 668/1000 [48:30<24:06,  4.36s/it][Succeeded / Failed / Skipped / Total] 438 / 212 / 18 / 668:  67%|██████▋   | 669/1000 [48:31<24:00,  4.35s/it][Succeeded / Failed / Skipped / Total] 439 / 212 / 18 / 669:  67%|██████▋   | 669/1000 [48:31<24:00,  4.35s/it][Succeeded / Failed / Skipped / Total] 439 / 212 / 18 / 669:  67%|██████▋   | 670/1000 [48:33<23:54,  4.35s/it][Succeeded / Failed / Skipped / Total] 440 / 212 / 18 / 670:  67%|██████▋   | 670/1000 [48:33<23:54,  4.35s/it][Succeeded / Failed / Skipped / Total] 440 / 212 / 18 / 670:  67%|██████▋   | 671/1000 [48:37<23:50,  4.35s/it][Succeeded / Failed / Skipped / Total] 441 / 212 / 18 / 671:  67%|██████▋   | 671/1000 [48:37<23:50,  4.35s/it][Succeeded / Failed / Skipped / Total] 441 / 212 / 18 / 671:  67%|██████▋   | 672/1000 [48:39<23:44,  4.34s/it][Succeeded / Failed / Skipped / Total] 442 / 212 / 18 / 672:  67%|██████▋   | 672/1000 [48:39<23:44,  4.34s/it][Succeeded / Failed / Skipped / Total] 442 / 212 / 18 / 672:  67%|██████▋   | 673/1000 [48:40<23:38,  4.34s/it][Succeeded / Failed / Skipped / Total] 443 / 212 / 18 / 673:  67%|██████▋   | 673/1000 [48:40<23:38,  4.34s/it][Succeeded / Failed / Skipped / Total] 443 / 212 / 18 / 673:  67%|██████▋   | 674/1000 [48:40<23:32,  4.33s/it][Succeeded / Failed / Skipped / Total] 444 / 212 / 18 / 674:  67%|██████▋   | 674/1000 [48:40<23:32,  4.33s/it][Succeeded / Failed / Skipped / Total] 444 / 212 / 18 / 674:  68%|██████▊   | 675/1000 [48:44<23:27,  4.33s/it]Filter the given constructors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[filterConstructors]] ( Class [[sc]] , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( [[sc]] , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[sc]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void [[dart]] ( Class [[bering]] , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( [[bering]] , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[bering]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 669 ---------------------------------------------
Resolve child path . --> removes grandparents --> Socre: 1.0

[[[[Adv]]]]: public static Path [[resolve]] ( final Path base , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return base . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path [[hippocratic]] ( final Path base , String [[grandmother]] ) { if ( StringUtil . startsWithChar ( [[grandmother]] , File . separatorChar ) ) { [[grandmother]] = [[grandmother]] . substring ( 1 ) ; } return base . resolve ( [[grandmother]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 670 ---------------------------------------------
Returns all methods in the given superclass . --> Bulgarian --> Socre: 1.0

[[[[Adv]]]]: public static void [[getMethods]] ( Class superclass , Class [ ] [[interfaces]] , List [[methods]] ) { [[getMethods]] ( superclass , [[interfaces]] , [[methods]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void [[bulgarian]] ( Class superclass , Class [ ] [[adnan]] , List [[piece]] ) { [[bulgarian]] ( superclass , [[adnan]] , [[piece]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 671 ---------------------------------------------
Create HTTP GET request --> Make proof read --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[proofread]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 672 ---------------------------------------------
Start HTTP POST request --> Checks to see if the specified destination is valid --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[canfield]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 673 ---------------------------------------------
Create HTTP request with the given destination and destination . --> Set certificate to given destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String [[method]] , final String destination ) { return new HttpRequest ( ) . [[method]] ( [[method]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[certo]] ( final String [[bashful]] , final String destination ) { return new HttpRequest ( ) . [[bashful]] ( [[bashful]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 674 ---------------------------------------------
Process an array element . --> Combines code into a code emitter --> Socre: 1.0

[[[[Adv]]]]: public static void [[process_array]] ( CodeEmitter e , Type [[type]] , ProcessArrayCallback [[callback]] ) { Type [[componentType]] = TypeUtils . getComponentType ( [[type]] ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( [[componentType]] ) ; [[callback]] . processElement ( [[componentType]] ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void [[combine]] ( CodeEmitter e , Type [[consumer]] , ProcessArrayCallback [[tract]] ) { Type [[club]] = TypeUtils . getComponentType ( [[consumer]] ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( [[club]] ) ; [[tract]] . processElement ( [[club]] ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 675 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 445 / 212 / 18 / 675:  68%|██████▊   | 675/1000 [48:44<23:27,  4.33s/it][Succeeded / Failed / Skipped / Total] 445 / 212 / 18 / 675:  68%|██████▊   | 676/1000 [48:46<23:22,  4.33s/it][Succeeded / Failed / Skipped / Total] 445 / 213 / 18 / 676:  68%|██████▊   | 676/1000 [48:46<23:22,  4.33s/it][Succeeded / Failed / Skipped / Total] 445 / 213 / 18 / 676:  68%|██████▊   | 677/1000 [48:49<23:17,  4.33s/it][Succeeded / Failed / Skipped / Total] 445 / 214 / 18 / 677:  68%|██████▊   | 677/1000 [48:49<23:17,  4.33s/it][Succeeded / Failed / Skipped / Total] 445 / 214 / 18 / 677:  68%|██████▊   | 678/1000 [48:50<23:11,  4.32s/it][Succeeded / Failed / Skipped / Total] 446 / 214 / 18 / 678:  68%|██████▊   | 678/1000 [48:50<23:11,  4.32s/it][Succeeded / Failed / Skipped / Total] 446 / 214 / 18 / 678:  68%|██████▊   | 679/1000 [48:51<23:05,  4.32s/it][Succeeded / Failed / Skipped / Total] 446 / 215 / 18 / 679:  68%|██████▊   | 679/1000 [48:51<23:05,  4.32s/it][Succeeded / Failed / Skipped / Total] 446 / 215 / 18 / 679:  68%|██████▊   | 680/1000 [48:52<23:00,  4.31s/it][Succeeded / Failed / Skipped / Total] 447 / 215 / 18 / 680:  68%|██████▊   | 680/1000 [48:52<23:00,  4.31s/it][Succeeded / Failed / Skipped / Total] 447 / 215 / 18 / 680:  68%|██████▊   | 681/1000 [48:53<22:54,  4.31s/it][Succeeded / Failed / Skipped / Total] 447 / 216 / 18 / 681:  68%|██████▊   | 681/1000 [48:53<22:54,  4.31s/it][Succeeded / Failed / Skipped / Total] 447 / 216 / 18 / 681:  68%|██████▊   | 682/1000 [48:54<22:48,  4.30s/it][Succeeded / Failed / Skipped / Total] 448 / 216 / 18 / 682:  68%|██████▊   | 682/1000 [48:54<22:48,  4.30s/it][Succeeded / Failed / Skipped / Total] 448 / 216 / 18 / 682:  68%|██████▊   | 683/1000 [48:58<22:43,  4.30s/it][Succeeded / Failed / Skipped / Total] 449 / 216 / 18 / 683:  68%|██████▊   | 683/1000 [48:58<22:43,  4.30s/it][Succeeded / Failed / Skipped / Total] 449 / 216 / 18 / 683:  68%|██████▊   | 684/1000 [48:58<22:37,  4.30s/it][Succeeded / Failed / Skipped / Total] 449 / 217 / 18 / 684:  68%|██████▊   | 684/1000 [48:58<22:37,  4.30s/it][Succeeded / Failed / Skipped / Total] 449 / 217 / 18 / 684:  68%|██████▊   | 685/1000 [48:59<22:31,  4.29s/it]Create a PUT request --> Shuffle the given destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[reshuffle]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 676 ---------------------------------------------
Start a connect request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[chihuahua]] ( final String [[farewell]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[farewell]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 677 ---------------------------------------------
Sets the Http request host . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[host]] ( final String [[host]] ) { this . [[host]] = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[afterwards]] ( final String [[dimitri]] ) { this . [[knockin]] = [[afterwards]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[afterwards]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 678 ---------------------------------------------
Create a HTTP TRACE request --> Create HttpRequest with destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[matsuda]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 679 ---------------------------------------------
Create a HTTP PATCH request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[lisle]] ( final String [[operatives]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[operatives]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 680 ---------------------------------------------
Start OPTIONS request --> Start HTTP POST operation --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( destination ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[ordination]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( destination ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 681 ---------------------------------------------
Start a HEAD request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[broker]] ( final String [[belladonna]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[belladonna]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 682 ---------------------------------------------
Create a DELETE request --> HTTP POST method --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[acrobats]] ( final String [[paiute]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[paiute]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 683 ---------------------------------------------
Adds a query parameter to the request . --> Browse a request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[query]] ( final String name1 , final Object value1 , final Object ... parameters ) { [[query]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; [[query]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest [[shelf]] ( final String name1 , final Object value1 , final Object ... parameters ) { [[shelf]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; [[shelf]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 684 ---------------------------------------------
Calculates the cost of object transformation between sourceClass and destinationClass . --> [[[FAILED]]]

[[[[Adv]]]]: private static float getObjectTransformationCost ( Class < ? > [[srcClass]] , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( [[srcClass]] , destClass ) ; } float cost = 0.0f ; while ( [[srcClass]] != null && ! destClass . equals ( [[srcClass]] ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( [[srcClass]] , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( [[srcClass]] == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float getObjectTransformationCost ( Class < ? > [[assassinations]] , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( [[assassinations]] , destClass ) ; } float cost = 0.0f ; while ( [[assassinations]] != null && ! destClass . equals ( [[assassinations]] ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( [[assassinations]] , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( [[assassinations]] == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 685 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 450 / 217 / 18 / 685:  68%|██████▊   | 685/1000 [48:59<22:31,  4.29s/it][Succeeded / Failed / Skipped / Total] 450 / 217 / 18 / 685:  69%|██████▊   | 686/1000 [49:00<22:26,  4.29s/it][Succeeded / Failed / Skipped / Total] 451 / 217 / 18 / 686:  69%|██████▊   | 686/1000 [49:00<22:26,  4.29s/it][Succeeded / Failed / Skipped / Total] 451 / 217 / 18 / 686:  69%|██████▊   | 687/1000 [49:03<22:21,  4.28s/it][Succeeded / Failed / Skipped / Total] 452 / 217 / 18 / 687:  69%|██████▊   | 687/1000 [49:03<22:21,  4.28s/it][Succeeded / Failed / Skipped / Total] 452 / 217 / 18 / 687:  69%|██████▉   | 688/1000 [49:04<22:15,  4.28s/it][Succeeded / Failed / Skipped / Total] 453 / 217 / 18 / 688:  69%|██████▉   | 688/1000 [49:04<22:15,  4.28s/it][Succeeded / Failed / Skipped / Total] 453 / 217 / 18 / 688:  69%|██████▉   | 689/1000 [49:06<22:10,  4.28s/it][Succeeded / Failed / Skipped / Total] 454 / 217 / 18 / 689:  69%|██████▉   | 689/1000 [49:06<22:10,  4.28s/it][Succeeded / Failed / Skipped / Total] 454 / 217 / 18 / 689:  69%|██████▉   | 690/1000 [49:07<22:04,  4.27s/it][Succeeded / Failed / Skipped / Total] 455 / 217 / 18 / 690:  69%|██████▉   | 690/1000 [49:07<22:04,  4.27s/it][Succeeded / Failed / Skipped / Total] 455 / 217 / 18 / 690:  69%|██████▉   | 691/1000 [49:10<21:59,  4.27s/it][Succeeded / Failed / Skipped / Total] 456 / 217 / 18 / 691:  69%|██████▉   | 691/1000 [49:10<21:59,  4.27s/it][Succeeded / Failed / Skipped / Total] 456 / 217 / 18 / 691:  69%|██████▉   | 692/1000 [49:12<21:53,  4.27s/it][Succeeded / Failed / Skipped / Total] 457 / 217 / 18 / 692:  69%|██████▉   | 692/1000 [49:12<21:53,  4.27s/it][Succeeded / Failed / Skipped / Total] 457 / 217 / 18 / 692:  69%|██████▉   | 693/1000 [49:15<21:49,  4.26s/it][Succeeded / Failed / Skipped / Total] 458 / 217 / 18 / 693:  69%|██████▉   | 693/1000 [49:15<21:49,  4.26s/it][Succeeded / Failed / Skipped / Total] 458 / 217 / 18 / 693:  69%|██████▉   | 694/1000 [49:15<21:43,  4.26s/it]Add query map . --> Add query to request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > [[queryMap]] ) { for ( Map . Entry < String , String > entry : [[queryMap]] . entrySet ( ) ) { query . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > [[goner]] ) { for ( Map . Entry < String , String > entry : [[goner]] . entrySet ( ) ) { query . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 686 ---------------------------------------------
Returns the query string . --> Retrieve the itinerary --> Socre: 1.0

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[trolley]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 687 ---------------------------------------------
Sets the request path . --> enable overcompatibility --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[path]] ( String [[path]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[overcompensating]] ( String [[bluer]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 688 ---------------------------------------------
Returns the host URL . --> Builds a famiglia --> Socre: 1.0

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[famiglia]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 689 ---------------------------------------------
Set the query parameter . --> Set the request Url for this request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[queryString]] ( final String queryString , final boolean [[decode]] ) { this . query = HttpUtil . parseQuery ( [[queryString]] , [[decode]] ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest [[bulge]] ( final String queryString , final boolean [[hauled]] ) { this . query = HttpUtil . parseQuery ( [[bulge]] , [[hauled]] ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 690 ---------------------------------------------
Resolves all bridge classes . --> Package private for testing --> Socre: 1.0

[[[[Adv]]]]: public Map [[resolveAll]] ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class [[owner]] = ( Class ) entry . getKey ( ) ; Set [[bridges]] = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( [[owner]] . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[bridges]] , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map [[packaged]] ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class [[visitor]] = ( Class ) entry . getKey ( ) ; Set [[dinosaurs]] = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( [[visitor]] . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[dinosaurs]] , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 691 ---------------------------------------------
Execute and receive response . --> Send and receive response --> Socre: 1.0

[[[[Adv]]]]: public < [[R]] > [[R]] sendAndReceive ( final Function < HttpResponse , [[R]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < [[gauze]] > [[gauze]] sendAndReceive ( final Function < HttpResponse , [[gauze]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 692 ---------------------------------------------
Sets the host header . --> Overwrites the Http request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String [[hostPort]] = this . host ; if ( port != Defaults . DEFAULT_PORT ) { [[hostPort]] += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , [[hostPort]] ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[ashish]] ( ) { String [[dadu]] = this . host ; if ( port != Defaults . DEFAULT_PORT ) { [[dadu]] += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , [[dadu]] ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 693 ---------------------------------------------
Returns the underlying buffer . --> Hooker --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Buffer [[buffer]] ( final boolean [[fullRequest]] ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer [[hanker]] ( final boolean [[aoi]] ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 694 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 459 / 217 / 18 / 694:  69%|██████▉   | 694/1000 [49:15<21:43,  4.26s/it][Succeeded / Failed / Skipped / Total] 459 / 217 / 18 / 694:  70%|██████▉   | 695/1000 [49:15<21:37,  4.25s/it][Succeeded / Failed / Skipped / Total] 460 / 217 / 18 / 695:  70%|██████▉   | 695/1000 [49:15<21:37,  4.25s/it][Succeeded / Failed / Skipped / Total] 461 / 217 / 18 / 696:  70%|██████▉   | 696/1000 [49:16<21:31,  4.25s/it][Succeeded / Failed / Skipped / Total] 461 / 217 / 18 / 696:  70%|██████▉   | 697/1000 [49:22<21:28,  4.25s/it][Succeeded / Failed / Skipped / Total] 462 / 217 / 18 / 697:  70%|██████▉   | 697/1000 [49:22<21:28,  4.25s/it][Succeeded / Failed / Skipped / Total] 463 / 217 / 18 / 698:  70%|██████▉   | 698/1000 [49:24<21:22,  4.25s/it][Succeeded / Failed / Skipped / Total] 463 / 217 / 18 / 698:  70%|██████▉   | 699/1000 [49:24<21:16,  4.24s/it][Succeeded / Failed / Skipped / Total] 464 / 217 / 18 / 699:  70%|██████▉   | 699/1000 [49:24<21:16,  4.24s/it][Succeeded / Failed / Skipped / Total] 464 / 218 / 18 / 700:  70%|███████   | 700/1000 [49:27<21:11,  4.24s/it][Succeeded / Failed / Skipped / Total] 464 / 218 / 18 / 700:  70%|███████   | 701/1000 [49:30<21:07,  4.24s/it][Succeeded / Failed / Skipped / Total] 464 / 219 / 18 / 701:  70%|███████   | 701/1000 [49:30<21:07,  4.24s/it]Sets a cookie in the request . --> Set a set of Cookie headers --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder [[cookieString]] = new StringBuilder ( ) ; boolean [[first]] = "True" == "True" ; for ( Cookie [[cookie]] : REPLACEME0 ) { Integer maxAge = [[cookie]] . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! [[first]] ) { [[cookieString]] . append ( "; " ) ; } [[first]] = "False" != "False" ; [[cookieString]] . append ( [[cookie]] . getName ( ) ) ; [[cookieString]] . append ( ' ' ) ; [[cookieString]] . append ( [[cookie]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[cookieString]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder [[bernier]] = new StringBuilder ( ) ; boolean [[chuka]] = "True" == "True" ; for ( Cookie [[crouching]] : REPLACEME0 ) { Integer maxAge = [[crouching]] . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! [[chuka]] ) { [[bernier]] . append ( "; " ) ; } [[chuka]] = "False" != "False" ; [[bernier]] . append ( [[crouching]] . getName ( ) ) ; [[bernier]] . append ( ' ' ) ; [[bernier]] . append ( [[crouching]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[bernier]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 695 ---------------------------------------------
Remove range . --> region > nullers --> Socre: 1.0

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[removeRange]] ( firstHandler . nextHandler , start , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[arranger]] ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[arranger]] ( firstHandler . nextHandler , start , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 696 ---------------------------------------------
Collect all action interceptors . --> documentation inherited from AbstractClassLoader --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[plagiarized]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 697 ---------------------------------------------
Collects all action run executions . --> sort the actions in the actions --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[intercede]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 698 ---------------------------------------------
Sets a simple property . --> Notification that the BeanProperty has been declared --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[abstention]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 699 ---------------------------------------------
Collects all action filters . --> Generate the footer --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[footer]] ( ) { final Collection < ? extends ActionFilter > [[mainstay]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[mainstay]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 700 ---------------------------------------------
Collects all actions . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > [[resultsValues]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[resultsValues]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[shove]] ( ) { final Collection < ActionResult > [[hank]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[hank]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 701 ---------------------------------------------
Returns the writer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[bedi]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 702 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 465 / 219 / 18 / 702:  70%|███████   | 702/1000 [49:31<21:01,  4.23s/it][Succeeded / Failed / Skipped / Total] 465 / 219 / 18 / 702:  70%|███████   | 703/1000 [49:31<20:55,  4.23s/it][Succeeded / Failed / Skipped / Total] 466 / 219 / 18 / 703:  70%|███████   | 703/1000 [49:31<20:55,  4.23s/it][Succeeded / Failed / Skipped / Total] 467 / 219 / 18 / 704:  70%|███████   | 704/1000 [49:32<20:49,  4.22s/it][Succeeded / Failed / Skipped / Total] 467 / 219 / 18 / 704:  70%|███████   | 705/1000 [49:32<20:43,  4.22s/it][Succeeded / Failed / Skipped / Total] 468 / 219 / 18 / 705:  70%|███████   | 705/1000 [49:32<20:43,  4.22s/it][Succeeded / Failed / Skipped / Total] 468 / 220 / 18 / 706:  71%|███████   | 706/1000 [49:38<20:40,  4.22s/it][Succeeded / Failed / Skipped / Total] 468 / 220 / 18 / 706:  71%|███████   | 707/1000 [49:38<20:34,  4.21s/it][Succeeded / Failed / Skipped / Total] 468 / 221 / 18 / 707:  71%|███████   | 707/1000 [49:38<20:34,  4.21s/it][Succeeded / Failed / Skipped / Total] 469 / 221 / 18 / 708:  71%|███████   | 708/1000 [49:46<20:31,  4.22s/it][Succeeded / Failed / Skipped / Total] 469 / 221 / 18 / 708:  71%|███████   | 709/1000 [49:50<20:27,  4.22s/it][Succeeded / Failed / Skipped / Total] 470 / 221 / 18 / 709:  71%|███████   | 709/1000 [49:50<20:27,  4.22s/it][Succeeded / Failed / Skipped / Total] 470 / 221 / 18 / 709:  71%|███████   | 710/1000 [49:51<20:21,  4.21s/it][Succeeded / Failed / Skipped / Total] 470 / 222 / 18 / 710:  71%|███████   | 710/1000 [49:51<20:21,  4.21s/it][Succeeded / Failed / Skipped / Total] 470 / 222 / 18 / 710:  71%|███████   | 711/1000 [49:53<20:16,  4.21s/it][Succeeded / Failed / Skipped / Total] 471 / 222 / 18 / 711:  71%|███████   | 711/1000 [49:53<20:16,  4.21s/it][Succeeded / Failed / Skipped / Total] 471 / 222 / 18 / 711:  71%|███████   | 712/1000 [49:54<20:11,  4.21s/it]Get object reference by name . --> Get phosphates by name --> Socre: 1.0

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[phosphates]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 703 ---------------------------------------------
Set the basic authentication header . --> Adds a discount to the request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String username , final String [[password]] ) { if ( username != null && [[password]] != null ) { String [[data]] = username . concat ( StringPool . COLON ) . concat ( [[password]] ) ; String base64 = Base64 . encodeToString ( [[data]] ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[bulge]] ( final String username , final String [[exhaustion]] ) { if ( username != null && [[exhaustion]] != null ) { String [[hairspray]] = username . concat ( StringPool . COLON ) . concat ( [[exhaustion]] ) ; String base64 = Base64 . encodeToString ( [[hairspray]] ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 704 ---------------------------------------------
Extract the property name from the property name --> Removes prefixes from string --> Socre: 1.0

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String [[propertyName]] ) { int ndx = StringUtil . indexOfChars ( [[propertyName]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[propertyName]] ; } return [[propertyName]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[babes]] ( final String [[avoidable]] ) { int ndx = StringUtil . indexOfChars ( [[avoidable]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[avoidable]] ; } return [[avoidable]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 705 ---------------------------------------------
Sets the object reference . --> Convenience method for unit testing --> Socre: 1.0

[[[[Adv]]]]: public void [[setObjectReference]] ( final String name , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , object ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[luciano]] ( final String name , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , object ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 706 ---------------------------------------------
Gets the index property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty [[beanProperty]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } else { try { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[henpecked]] > [[henpecked]] getProperty ( final Object bean , final String name ) { BeanProperty [[vegetative]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[vegetative]] ) ; return ( [[henpecked]] ) getIndexProperty ( [[vegetative]] ) ; } else { try { resolveNestedProperties ( [[vegetative]] ) ; return ( [[henpecked]] ) getIndexProperty ( [[vegetative]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 707 ---------------------------------------------
Returns the length of the exception table . --> [[[FAILED]]]

[[[[Adv]]]]: static int [[getExceptionTableLength]] ( final Handler [[firstHandler]] ) { int [[length]] = 0 ; Handler handler = [[firstHandler]] ; while ( handler != null ) { [[length]] ++ ; handler = handler . nextHandler ; } return [[length]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int [[encryption]] ( final Handler [[kublai]] ) { int [[coptic]] = 0 ; Handler handler = [[kublai]] ; while ( handler != null ) { [[coptic]] ++ ; handler = handler . nextHandler ; } return [[coptic]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 708 ---------------------------------------------
Serializes a value . --> Helper method for serialization --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext [[jsonContext]] , final T value ) { if ( [[jsonContext]] . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext [[fiddled]] , final T value ) { if ( [[fiddled]] . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 709 ---------------------------------------------
Lookup an object reference . --> Returns the alam value of the given gauge --> Socre: 1.0

[[[[Adv]]]]: public Object [[lookupObject]] ( final String [[ref]] ) { Object [[value]] = getObjectReference ( [[ref]] ) ; if ( [[value]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[ref]] ) ; } return [[value]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[alamut]] ( final String [[gauguin]] ) { Object [[hanlon]] = getObjectReference ( [[gauguin]] ) ; if ( [[hanlon]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[gauguin]] ) ; } return [[hanlon]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 710 ---------------------------------------------
Register a hint . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[smellin]] ( final String [[flore]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[flore]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 711 ---------------------------------------------
Find table descriptor by column ref . --> Search by property name --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String [[columnRef]] ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( [[columnRef]] ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[iwakura]] ( final String [[incentives]] ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( [[incentives]] ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
[Succeeded / Failed / Skipped / Total] 471 / 223 / 18 / 712:  71%|███████   | 712/1000 [49:54<20:11,  4.21s/it][Succeeded / Failed / Skipped / Total] 471 / 223 / 18 / 712:  71%|███████▏  | 713/1000 [49:56<20:06,  4.20s/it][Succeeded / Failed / Skipped / Total] 471 / 224 / 18 / 713:  71%|███████▏  | 713/1000 [49:56<20:06,  4.20s/it][Succeeded / Failed / Skipped / Total] 471 / 224 / 18 / 713:  71%|███████▏  | 714/1000 [49:57<20:00,  4.20s/it][Succeeded / Failed / Skipped / Total] 471 / 225 / 18 / 714:  71%|███████▏  | 714/1000 [49:57<20:00,  4.20s/it][Succeeded / Failed / Skipped / Total] 471 / 225 / 18 / 714:  72%|███████▏  | 715/1000 [50:02<19:56,  4.20s/it][Succeeded / Failed / Skipped / Total] 472 / 225 / 18 / 715:  72%|███████▏  | 715/1000 [50:02<19:56,  4.20s/it][Succeeded / Failed / Skipped / Total] 472 / 225 / 18 / 715:  72%|███████▏  | 716/1000 [50:07<19:52,  4.20s/it][Succeeded / Failed / Skipped / Total] 473 / 225 / 18 / 716:  72%|███████▏  | 716/1000 [50:07<19:52,  4.20s/it][Succeeded / Failed / Skipped / Total] 473 / 225 / 18 / 716:  72%|███████▏  | 717/1000 [50:11<19:48,  4.20s/it][Succeeded / Failed / Skipped / Total] 473 / 226 / 18 / 717:  72%|███████▏  | 717/1000 [50:11<19:48,  4.20s/it][Succeeded / Failed / Skipped / Total] 473 / 226 / 18 / 717:  72%|███████▏  | 718/1000 [50:17<19:45,  4.20s/it][Succeeded / Failed / Skipped / Total] 474 / 226 / 18 / 718:  72%|███████▏  | 718/1000 [50:17<19:45,  4.20s/it][Succeeded / Failed / Skipped / Total] 474 / 226 / 18 / 718:  72%|███████▏  | 719/1000 [50:21<19:40,  4.20s/it]--------------------------------------------- Result 712 ---------------------------------------------
Returns the alias for the specified table reference . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getTableAlias]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( [[tableRef]] ) ; return [[t]] == null ? null : [[t]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[subjective]] ( final String [[plagiarized]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[negotiation]] = tableRefs . get ( [[plagiarized]] ) ; return [[negotiation]] == null ? null : [[negotiation]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 713 ---------------------------------------------
Returns the descriptor for the given table reference . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor [[getTableDescriptor]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[tableRef]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor [[redesigning]] ( final String [[relocate]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[relocate]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 714 ---------------------------------------------
Looks up a table reference . --> [[[FAILED]]]

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String [[tableRef]] ) { DbEntityDescriptor [[ded]] = getTableDescriptor ( [[tableRef]] ) ; if ( [[ded]] == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[tableRef]] ) ; } return [[ded]] ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[defeating]] ( final String [[antenna]] ) { DbEntityDescriptor [[state]] = getTableDescriptor ( [[antenna]] ) ; if ( [[state]] == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[antenna]] ) ; } return [[state]] ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 715 ---------------------------------------------
Apply to the column name . --> Gets bandaging --> Socre: 1.0

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String columnName ) { String propertyName = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[bandaging]] ( final String columnName ) { String propertyName = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 716 ---------------------------------------------
Stores the value in the specified statement . --> Convenience method for unit testing --> Socre: 1.0

[[[[Adv]]]]: public void [[storeValue]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void [[juve]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 717 ---------------------------------------------
Prepare the return value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[acres]] > [[acres]] prepareGetValue ( final T t , final Class < [[acres]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[acres]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 718 ---------------------------------------------
Convert a column name to a property name . --> Calculates the mcshane --> Socre: 1.0

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int [[i]] = 0 ; [[i]] < len ; [[i]] ++ ) { char c = columnName . charAt ( [[i]] ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[mcshane]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int [[neighborhood]] = 0 ; [[neighborhood]] < len ; [[neighborhood]] ++ ) { char c = columnName . charAt ( [[neighborhood]] ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 719 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 475 / 226 / 18 / 719:  72%|███████▏  | 719/1000 [50:21<19:40,  4.20s/it][Succeeded / Failed / Skipped / Total] 475 / 226 / 18 / 719:  72%|███████▏  | 720/1000 [50:23<19:35,  4.20s/it][Succeeded / Failed / Skipped / Total] 476 / 226 / 18 / 720:  72%|███████▏  | 720/1000 [50:23<19:35,  4.20s/it][Succeeded / Failed / Skipped / Total] 476 / 227 / 18 / 721:  72%|███████▏  | 721/1000 [50:23<19:29,  4.19s/it][Succeeded / Failed / Skipped / Total] 476 / 227 / 18 / 721:  72%|███████▏  | 722/1000 [50:24<19:24,  4.19s/it][Succeeded / Failed / Skipped / Total] 477 / 227 / 18 / 722:  72%|███████▏  | 722/1000 [50:24<19:24,  4.19s/it][Succeeded / Failed / Skipped / Total] 477 / 228 / 18 / 723:  72%|███████▏  | 723/1000 [50:25<19:19,  4.18s/it][Succeeded / Failed / Skipped / Total] 477 / 228 / 18 / 723:  72%|███████▏  | 724/1000 [50:32<19:15,  4.19s/it][Succeeded / Failed / Skipped / Total] 478 / 228 / 18 / 724:  72%|███████▏  | 724/1000 [50:32<19:15,  4.19s/it]Convert property name to column name . --> Given an administered string administer it as a goddamble --> Socre: 1.0

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String [[propertyName]] ) { StringBuilder [[tableName]] = new StringBuilder ( [[propertyName]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[propertyName]] , separatorChar ) ; [[tableName]] . append ( convertedTableName ) ; } else { [[tableName]] . append ( [[propertyName]] ) ; } if ( ! changeCase ) { return [[tableName]] . toString ( ) ; } return uppercase ? toUppercase ( [[tableName]] ) . toString ( ) : toLowercase ( [[tableName]] ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[goddammit]] ( final String [[administered]] ) { StringBuilder [[funeral]] = new StringBuilder ( [[administered]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[administered]] , separatorChar ) ; [[funeral]] . append ( convertedTableName ) ; } else { [[funeral]] . append ( [[administered]] ) ; } if ( ! changeCase ) { return [[funeral]] . toString ( ) ; } return uppercase ? toUppercase ( [[funeral]] ) . toString ( ) : toLowercase ( [[funeral]] ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 720 ---------------------------------------------
Returns a copy of the wrapped set . --> protected for testing --> Socre: 1.0

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > [[set]] = new HashSet <> ( wrappers . size ( ) ) ; [[set]] . addAll ( wrappers . values ( ) ) ; return [[set]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[nationalist]] ( ) { final Set < T > [[chestnuts]] = new HashSet <> ( wrappers . size ( ) ) ; [[chestnuts]] . addAll ( wrappers . values ( ) ) ; return [[chestnuts]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 721 ---------------------------------------------
Register a table reference --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerTableReference]] ( final String [[tableReference]] , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[t]] = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( [[tableReference]] , [[t]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[tableReference]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[circumvent]] ( final String [[villager]] , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[impious]] = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( [[villager]] , [[impious]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[villager]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 722 ---------------------------------------------
Inject uploaded files . --> Called by ServletRequest --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper [[multipartRequest]] = ( MultipartRequestWrapper ) servletRequest ; if ( ! [[multipartRequest]] . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = [[multipartRequest]] . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[paramName]] = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[paramName]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[paramName]] ) ; if ( name != null ) { final FileUpload [ ] paramValues = [[multipartRequest]] . getFiles ( [[paramName]] ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[wilco]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper [[marylou]] = ( MultipartRequestWrapper ) servletRequest ; if ( ! [[marylou]] . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = [[marylou]] . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[fatted]] = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[fatted]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[fatted]] ) ; if ( name != null ) { final FileUpload [ ] paramValues = [[marylou]] . getFiles ( [[fatted]] ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 723 ---------------------------------------------
Creates a new wrapper for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: protected < R [[extends]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R [[homes]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 724 ---------------------------------------------
Inject attribute values . --> Writes the attribute values in the URL --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectAttributes]] ( final HttpServletRequest [[servletRequest]] , final Targets targets ) { final Enumeration < String > [[attributeNames]] = [[servletRequest]] . getAttributeNames ( ) ; while ( [[attributeNames]] . hasMoreElements ( ) ) { final String attrName = [[attributeNames]] . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = [[servletRequest]] . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void [[croquettes]] ( final HttpServletRequest [[uriah]] , final Targets targets ) { final Enumeration < String > [[teamster]] = [[uriah]] . getAttributeNames ( ) ; while ( [[teamster]] . hasMoreElements ( ) ) { final String attrName = [[teamster]] . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = [[uriah]] . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
[Succeeded / Failed / Skipped / Total] 479 / 228 / 18 / 725:  72%|███████▎  | 725/1000 [50:35<19:11,  4.19s/it][Succeeded / Failed / Skipped / Total] 479 / 228 / 18 / 725:  73%|███████▎  | 726/1000 [50:37<19:06,  4.18s/it][Succeeded / Failed / Skipped / Total] 480 / 228 / 18 / 726:  73%|███████▎  | 726/1000 [50:37<19:06,  4.18s/it][Succeeded / Failed / Skipped / Total] 480 / 229 / 18 / 727:  73%|███████▎  | 727/1000 [50:39<19:01,  4.18s/it][Succeeded / Failed / Skipped / Total] 480 / 229 / 18 / 727:  73%|███████▎  | 728/1000 [50:40<18:56,  4.18s/it][Succeeded / Failed / Skipped / Total] 481 / 229 / 18 / 728:  73%|███████▎  | 728/1000 [50:40<18:56,  4.18s/it][Succeeded / Failed / Skipped / Total] 482 / 229 / 18 / 729:  73%|███████▎  | 729/1000 [50:43<18:51,  4.18s/it][Succeeded / Failed / Skipped / Total] 482 / 229 / 18 / 729:  73%|███████▎  | 730/1000 [50:43<18:45,  4.17s/it][Succeeded / Failed / Skipped / Total] 483 / 229 / 18 / 730:  73%|███████▎  | 730/1000 [50:43<18:45,  4.17s/it]--------------------------------------------- Result 725 ---------------------------------------------
Gets path . --> Get verb from filename --> Socre: 1.0

[[[[Adv]]]]: private static String [[doGetPath]] ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int endIndex = index + separatorAdd ; if ( prefix >= filename . length ( ) || index < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[verb]] ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int endIndex = index + separatorAdd ; if ( prefix >= filename . length ( ) || index < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 726 ---------------------------------------------
Converts the given path path to system separators . --> Convert Jennings from jennings --> Socre: 1.0

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[henrique]] ( final String [[jennings]] ) { if ( [[jennings]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[jennings]] ) ; } else { return separatorsToUnix ( [[jennings]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 727 ---------------------------------------------
Register action configuration for the given action type . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A [[afterthought]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 728 ---------------------------------------------
Register a madvoc component . --> Add a landing --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[registerComponent]] ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp [[doss]] ( final Class < ? > [[landing]] ) { Objects . requireNonNull ( [[landing]] ) ; madvocComponents . add ( ClassConsumer . of ( [[landing]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 729 ---------------------------------------------
Starts the WebApp . --> describe the webapp --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[ascribe]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 730 ---------------------------------------------
Split a filename into an array of strings . --> Convenience method for YAML --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[split]] ( final String filename ) { String prefix = getPrefix ( filename ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int [[lastExtensionIndex]] = indexOfExtension ( filename ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( [[lastExtensionIndex]] == - 1 ) { baseName = filename . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) , [[lastExtensionIndex]] ) ; extension = filename . substring ( [[lastExtensionIndex]] + 1 ) ; } } else { path = filename . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( [[lastExtensionIndex]] == - 1 ) { baseName = filename . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) + path . length ( ) , [[lastExtensionIndex]] ) ; extension = filename . substring ( [[lastExtensionIndex]] + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] [[yemen]] ( final String filename ) { String prefix = getPrefix ( filename ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int [[downstairs]] = indexOfExtension ( filename ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( [[downstairs]] == - 1 ) { baseName = filename . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) , [[downstairs]] ) ; extension = filename . substring ( [[downstairs]] + 1 ) ; } } else { path = filename . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( [[downstairs]] == - 1 ) { baseName = filename . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) + path . length ( ) , [[downstairs]] ) ; extension = filename . substring ( [[downstairs]] + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 731 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 484 / 229 / 18 / 731:  73%|███████▎  | 731/1000 [50:44<18:40,  4.16s/it][Succeeded / Failed / Skipped / Total] 484 / 229 / 18 / 731:  73%|███████▎  | 732/1000 [50:45<18:34,  4.16s/it][Succeeded / Failed / Skipped / Total] 485 / 229 / 18 / 732:  73%|███████▎  | 732/1000 [50:45<18:34,  4.16s/it][Succeeded / Failed / Skipped / Total] 485 / 230 / 18 / 733:  73%|███████▎  | 733/1000 [50:47<18:29,  4.16s/it][Succeeded / Failed / Skipped / Total] 485 / 230 / 18 / 733:  73%|███████▎  | 734/1000 [50:47<18:24,  4.15s/it][Succeeded / Failed / Skipped / Total] 486 / 230 / 18 / 734:  73%|███████▎  | 734/1000 [50:47<18:24,  4.15s/it][Succeeded / Failed / Skipped / Total] 487 / 230 / 18 / 735:  74%|███████▎  | 735/1000 [51:00<18:23,  4.16s/it][Succeeded / Failed / Skipped / Total] 487 / 230 / 18 / 735:  74%|███████▎  | 736/1000 [51:00<18:17,  4.16s/it]Resolves a wrapper for the given class . --> This method should be called only once per class --> Socre: 1.0

[[[[Adv]]]]: public T [[resolve]] ( final Class < ? extends T > [[wrapperClass]] ) { String wrapperClassName = [[wrapperClass]] . getName ( ) ; T [[wrapper]] = lookup ( wrapperClassName ) ; if ( [[wrapper]] == null ) { [[wrapper]] = createWrapper ( [[wrapperClass]] ) ; initializeWrapper ( [[wrapper]] ) ; wrappers . put ( wrapperClassName , [[wrapper]] ) ; } return [[wrapper]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T [[testimonial]] ( final Class < ? extends T > [[bruto]] ) { String wrapperClassName = [[bruto]] . getName ( ) ; T [[separating]] = lookup ( wrapperClassName ) ; if ( [[separating]] == null ) { [[separating]] = createWrapper ( [[bruto]] ) ; initializeWrapper ( [[separating]] ) ; wrappers . put ( wrapperClassName , [[separating]] ) ; } return [[separating]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 732 ---------------------------------------------
Configure the default defaults . --> Application management methods --> Socre: 1.0

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[appartment]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 733 ---------------------------------------------
Registers the madvo components . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[liddle]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 734 ---------------------------------------------
Relative path . --> Convenience method for creating a beholder --> Socre: 1.0

[[[[Adv]]]]: public static String [[relativePath]] ( final String [[targetPath]] , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( [[targetPath]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[beholder]] ( final String [[antidepressant]] , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( [[antidepressant]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 735 ---------------------------------------------
Returns a bytecode of the signature of the given type . --> Produces a crackband --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class type ) { final String [[name]] = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[name]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[waistband]] ( final Class type ) { final String [[punching]] = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[punching]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 736 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 488 / 230 / 18 / 736:  74%|███████▎  | 736/1000 [51:00<18:17,  4.16s/it][Succeeded / Failed / Skipped / Total] 488 / 230 / 18 / 736:  74%|███████▎  | 737/1000 [51:03<18:13,  4.16s/it][Succeeded / Failed / Skipped / Total] 489 / 230 / 18 / 737:  74%|███████▎  | 737/1000 [51:03<18:13,  4.16s/it][Succeeded / Failed / Skipped / Total] 489 / 230 / 18 / 737:  74%|███████▍  | 738/1000 [51:06<18:08,  4.16s/it][Succeeded / Failed / Skipped / Total] 489 / 231 / 18 / 738:  74%|███████▍  | 738/1000 [51:06<18:08,  4.16s/it][Succeeded / Failed / Skipped / Total] 489 / 231 / 18 / 738:  74%|███████▍  | 739/1000 [51:07<18:03,  4.15s/it][Succeeded / Failed / Skipped / Total] 489 / 232 / 18 / 739:  74%|███████▍  | 739/1000 [51:07<18:03,  4.15s/it][Succeeded / Failed / Skipped / Total] 489 / 232 / 18 / 739:  74%|███████▍  | 740/1000 [51:08<17:57,  4.15s/it][Succeeded / Failed / Skipped / Total] 489 / 233 / 18 / 740:  74%|███████▍  | 740/1000 [51:08<17:57,  4.15s/it][Succeeded / Failed / Skipped / Total] 489 / 233 / 18 / 740:  74%|███████▍  | 741/1000 [51:09<17:52,  4.14s/it]Scans a jar file . --> Hide the zipfile --> Socre: 1.0

[[[[Adv]]]]: protected void [[scanJarFile]] ( final File file ) { final ZipFile [[zipFile]] ; try { [[zipFile]] = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = [[zipFile]] . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[zipFile]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[zipFile]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( [[zipFile]] ) ; throw rex ; } } } ZipUtil . close ( [[zipFile]] ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void [[hidey]] ( final File file ) { final ZipFile [[cartel]] ; try { [[cartel]] = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = [[cartel]] . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[cartel]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[cartel]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( [[cartel]] ) ; throw rex ; } } } ZipUtil . close ( [[cartel]] ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 737 ---------------------------------------------
Inject parameters from the request . --> Performs the booker --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest servletRequest , final Targets [[targets]] ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > [[paramNames]] = servletRequest . getParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { final String paramName = [[paramNames]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } [[targets]] . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[booker]] ( final HttpServletRequest servletRequest , final Targets [[astor]] ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > [[jailhouse]] = servletRequest . getParameterNames ( ) ; while ( [[jailhouse]] . hasMoreElements ( ) ) { final String paramName = [[jailhouse]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } [[astor]] . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 738 ---------------------------------------------
Exclude jars from the classpath . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[excludeJars]] ( final String ... [[excludedJars]] ) { for ( final String [[excludedJar]] : [[excludedJars]] ) { rulesJars . exclude ( [[excludedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner [[detailing]] ( final String ... [[mattingly]] ) { for ( final String [[bellyache]] : [[mattingly]] ) { rulesJars . exclude ( [[bellyache]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 739 ---------------------------------------------
Excludes entries from the classpath . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[excludeEntries]] ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner [[alans]] ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 740 ---------------------------------------------
Includes the specified jars . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[includeJars]] ( final String ... includedJars ) { for ( final String [[includedJar]] : includedJars ) { rulesJars . include ( [[includedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner [[charlatans]] ( final String ... includedJars ) { for ( final String [[gratin]] : includedJars ) { rulesJars . include ( [[gratin]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 741 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 489 / 234 / 18 / 741:  74%|███████▍  | 741/1000 [51:09<17:52,  4.14s/it][Succeeded / Failed / Skipped / Total] 489 / 234 / 18 / 741:  74%|███████▍  | 742/1000 [51:16<17:49,  4.15s/it][Succeeded / Failed / Skipped / Total] 489 / 235 / 18 / 742:  74%|███████▍  | 742/1000 [51:16<17:49,  4.15s/it][Succeeded / Failed / Skipped / Total] 489 / 235 / 18 / 742:  74%|███████▍  | 743/1000 [51:20<17:45,  4.15s/it][Succeeded / Failed / Skipped / Total] 489 / 236 / 18 / 743:  74%|███████▍  | 743/1000 [51:20<17:45,  4.15s/it][Succeeded / Failed / Skipped / Total] 489 / 236 / 18 / 743:  74%|███████▍  | 744/1000 [51:21<17:40,  4.14s/it][Succeeded / Failed / Skipped / Total] 490 / 236 / 18 / 744:  74%|███████▍  | 744/1000 [51:21<17:40,  4.14s/it][Succeeded / Failed / Skipped / Total] 490 / 236 / 18 / 744:  74%|███████▍  | 745/1000 [51:23<17:35,  4.14s/it][Succeeded / Failed / Skipped / Total] 491 / 236 / 18 / 745:  74%|███████▍  | 745/1000 [51:23<17:35,  4.14s/it][Succeeded / Failed / Skipped / Total] 491 / 236 / 18 / 745:  75%|███████▍  | 746/1000 [51:24<17:30,  4.13s/it][Succeeded / Failed / Skipped / Total] 491 / 237 / 18 / 746:  75%|███████▍  | 746/1000 [51:24<17:30,  4.13s/it][Succeeded / Failed / Skipped / Total] 491 / 237 / 18 / 746:  75%|███████▍  | 747/1000 [51:31<17:27,  4.14s/it][Succeeded / Failed / Skipped / Total] 491 / 238 / 18 / 747:  75%|███████▍  | 747/1000 [51:31<17:27,  4.14s/it][Succeeded / Failed / Skipped / Total] 492 / 238 / 18 / 748:  75%|███████▍  | 748/1000 [51:31<17:21,  4.13s/it][Succeeded / Failed / Skipped / Total] 492 / 238 / 18 / 748:  75%|███████▍  | 749/1000 [51:33<17:16,  4.13s/it]Includes specified entries . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[includeEntries]] ( final String ... includedEntries ) { for ( final String includedEntry : includedEntries ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner [[cretinous]] ( final String ... includedEntries ) { for ( final String includedEntry : includedEntries ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 742 ---------------------------------------------
Returns the default scope for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[baptiste]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 743 ---------------------------------------------
Scans the scanner . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[path]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[path]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[hitches]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[agendas]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[agendas]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 744 ---------------------------------------------
Decode characters . --> Shortcut method for short transmission --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[decode]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] [[shortcoming]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 745 ---------------------------------------------
Creates a new transaction --> overrides default implementation --> Socre: 1.0

[[[[Adv]]]]: @ Override protected JtxTransaction createNewTransaction ( final JtxTransactionMode tm , final Object [[scope]] , final boolean [[active]] ) { return new DbJtxTransaction ( this , tm , [[scope]] , [[active]] ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction createNewTransaction ( final JtxTransactionMode tm , final Object [[seething]] , final boolean [[duplicate]] ) { return new DbJtxTransaction ( this , tm , [[seething]] , [[duplicate]] ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 746 ---------------------------------------------
Scan given paths . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... [[paths]] ) { for ( final String [[path]] : [[paths]] ) { filesToScan . add ( new File ( [[path]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[overlooks]] ( final String ... [[projecting]] ) { for ( final String [[falkor]] : [[projecting]] ) { filesToScan . add ( new File ( [[falkor]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 747 ---------------------------------------------
Gets or init scope . --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope [[getOrInitScope]] ( final Class < ? extends MadvocScope > [[madvocScopeType]] ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( [[madvocScopeType]] ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope [[squeal]] ( final Class < ? extends MadvocScope > [[analysing]] ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( [[analysing]] ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 748 ---------------------------------------------
Copies this bean . --> Kill this object --> Socre: 1.0

[[[[Adv]]]]: public void [[copy]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void [[assassination]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 749 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 493 / 238 / 18 / 749:  75%|███████▍  | 749/1000 [51:33<17:16,  4.13s/it][Succeeded / Failed / Skipped / Total] 494 / 238 / 18 / 750:  75%|███████▌  | 750/1000 [51:38<17:12,  4.13s/it][Succeeded / Failed / Skipped / Total] 494 / 238 / 18 / 750:  75%|███████▌  | 751/1000 [51:38<17:07,  4.13s/it][Succeeded / Failed / Skipped / Total] 495 / 238 / 18 / 751:  75%|███████▌  | 751/1000 [51:38<17:07,  4.13s/it][Succeeded / Failed / Skipped / Total] 496 / 238 / 18 / 752:  75%|███████▌  | 752/1000 [51:44<17:03,  4.13s/it][Succeeded / Failed / Skipped / Total] 496 / 238 / 18 / 752:  75%|███████▌  | 753/1000 [51:46<16:59,  4.13s/it][Succeeded / Failed / Skipped / Total] 497 / 238 / 18 / 753:  75%|███████▌  | 753/1000 [51:46<16:59,  4.13s/it][Succeeded / Failed / Skipped / Total] 497 / 239 / 18 / 754:  75%|███████▌  | 754/1000 [51:49<16:54,  4.12s/it][Succeeded / Failed / Skipped / Total] 497 / 239 / 18 / 754:  76%|███████▌  | 755/1000 [51:51<16:49,  4.12s/it]Generates a unique CSRF token . --> Parses a random amount --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[prepareCsrfToken]] ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean [[unique]] ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; [[unique]] = tokenSet . add ( new Token ( value , timeToLive ) ) ; } while ( ! [[unique]] ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[pittance]] ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean [[amusement]] ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; [[amusement]] = tokenSet . add ( new Token ( value , timeToLive ) ) ; } while ( ! [[amusement]] ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 750 ---------------------------------------------
Creates a new scope for the specified scope . --> Hook for heheme --> Socre: 1.0

[[[[Adv]]]]: public void [[forScope]] ( final Class < ? extends MadvocScope > [[scopeType]] , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope [[scope]] = getOrInitScope ( [[scopeType]] ) ; madvocScopeConsumer . accept ( [[scope]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void [[hehe]] ( final Class < ? extends MadvocScope > [[noose]] , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope [[presidents]] = getOrInitScope ( [[noose]] ) ; madvocScopeConsumer . accept ( [[presidents]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 751 ---------------------------------------------
Visit property . --> setProperty --> Socre: 1.0

[[[[Adv]]]]: @ Override protected boolean [[visitProperty]] ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean [[braulio]] ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 752 ---------------------------------------------
Creates a copy of a Bean --> The copy of the given object --> Socre: 1.0

[[[[Adv]]]]: public static BeanCopy [[from]] ( final Object [[source]] ) { BeanCopy beanCopy = new BeanCopy ( [[source]] ) ; beanCopy . isSourceMap = [[source]] instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy [[avalanche]] ( final Object [[florida]] ) { BeanCopy beanCopy = new BeanCopy ( [[florida]] ) ; beanCopy . isSourceMap = [[florida]] instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 753 ---------------------------------------------
Register a bean definition --> Register a BeanDefinition --> Socre: 1.0

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition [[beanDefinition]] ) { beans . put ( name , [[beanDefinition]] ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = [[beanDefinition]] . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition [[aussi]] ) { beans . put ( name , [[aussi]] ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = [[aussi]] . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 754 ---------------------------------------------
Resolves a scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] Scope > S resolveScope ( final Class < S > scopeType ) { S [[scope]] = ( S ) scopes . get ( scopeType ) ; if ( [[scope]] == null ) { try { [[scope]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[scope]] ) ; scopes . put ( scopeType , [[scope]] ) ; } return [[scope]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[crashers]] Scope > S resolveScope ( final Class < S > scopeType ) { S [[jango]] = ( S ) scopes . get ( scopeType ) ; if ( [[jango]] == null ) { try { [[jango]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[jango]] ) ; scopes . put ( scopeType , [[jango]] ) ; } return [[jango]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 755 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 497 / 240 / 18 / 755:  76%|███████▌  | 755/1000 [51:51<16:49,  4.12s/it][Succeeded / Failed / Skipped / Total] 498 / 240 / 18 / 756:  76%|███████▌  | 756/1000 [51:56<16:45,  4.12s/it][Succeeded / Failed / Skipped / Total] 498 / 240 / 18 / 756:  76%|███████▌  | 757/1000 [52:07<16:43,  4.13s/it][Succeeded / Failed / Skipped / Total] 499 / 240 / 18 / 757:  76%|███████▌  | 757/1000 [52:07<16:43,  4.13s/it][Succeeded / Failed / Skipped / Total] 499 / 240 / 18 / 757:  76%|███████▌  | 758/1000 [52:09<16:39,  4.13s/it][Succeeded / Failed / Skipped / Total] 500 / 240 / 18 / 758:  76%|███████▌  | 758/1000 [52:09<16:39,  4.13s/it][Succeeded / Failed / Skipped / Total] 500 / 240 / 18 / 758:  76%|███████▌  | 759/1000 [52:15<16:35,  4.13s/it][Succeeded / Failed / Skipped / Total] 500 / 241 / 18 / 759:  76%|███████▌  | 759/1000 [52:15<16:35,  4.13s/it][Succeeded / Failed / Skipped / Total] 500 / 241 / 18 / 759:  76%|███████▌  | 760/1000 [52:17<16:30,  4.13s/it]Scans class files . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanClassPath]] ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile [[ff]] = FindFile . create ( ) . includeDirs ( "[[False]]" != "[[False]]" ) . recursive ( "True" == "True" ) . searchPath ( rootPath ) ; File [[file]] ; while ( ( [[file]] = [[ff]] . nextFile ( ) ) != null ) { final String filePath = [[file]] . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , [[file]] , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , [[file]] , "[[False]]" != "[[False]]" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void [[patrone]] ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile [[corruptible]] = FindFile . create ( ) . includeDirs ( "[[Masons]]" != "[[Masons]]" ) . recursive ( "True" == "True" ) . searchPath ( rootPath ) ; File [[stemmed]] ; while ( ( [[stemmed]] = [[corruptible]] . nextFile ( ) ) != null ) { final String filePath = [[stemmed]] . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , [[stemmed]] , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , [[stemmed]] , "[[Masons]]" != "[[Masons]]" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 756 ---------------------------------------------
Removes the bean with the specified type . --> Striive distortion --> Socre: 1.0

[[[[Adv]]]]: public void [[removeBean]] ( final Class [[type]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[abrasive]] ( final Class [[avril]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 757 ---------------------------------------------
Register a Petite Set InjectionPoint --> Register a Petite SetInjectionPoint --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String beanName , final String property ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; [[beanDefinition]] . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String beanName , final String property ) { BeanDefinition [[bessy]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[bessy]] . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + [[bessy]] . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; [[bessy]] . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 758 ---------------------------------------------
Registers a property injection point . --> Adds a Chester field to the bean definition --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetitePropertyInjectionPoint]] ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint [[pip]] = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( [[pip]] ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void [[chesterfield]] ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint [[lollies]] = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( [[lollies]] ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 759 ---------------------------------------------
Initialize the table reference . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[init]] ( final TemplateData [[templateData]] ) { super . init ( [[templateData]] ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = [[templateData]] . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . [[tableReference]] ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } [[templateData]] . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void [[blend]] ( final TemplateData [[burman]] ) { super . init ( [[burman]] ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = [[burman]] . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . [[peeper]] ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } [[burman]] . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 760 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 501 / 241 / 18 / 760:  76%|███████▌  | 760/1000 [52:17<16:30,  4.13s/it][Succeeded / Failed / Skipped / Total] 501 / 241 / 18 / 760:  76%|███████▌  | 761/1000 [52:20<16:26,  4.13s/it][Succeeded / Failed / Skipped / Total] 502 / 241 / 18 / 761:  76%|███████▌  | 761/1000 [52:20<16:26,  4.13s/it][Succeeded / Failed / Skipped / Total] 502 / 241 / 18 / 761:  76%|███████▌  | 762/1000 [52:25<16:22,  4.13s/it][Succeeded / Failed / Skipped / Total] 502 / 242 / 18 / 762:  76%|███████▌  | 762/1000 [52:25<16:22,  4.13s/it][Succeeded / Failed / Skipped / Total] 502 / 242 / 18 / 762:  76%|███████▋  | 763/1000 [52:26<16:17,  4.12s/it][Succeeded / Failed / Skipped / Total] 503 / 242 / 18 / 763:  76%|███████▋  | 763/1000 [52:26<16:17,  4.12s/it][Succeeded / Failed / Skipped / Total] 503 / 242 / 18 / 763:  76%|███████▋  | 764/1000 [52:35<16:14,  4.13s/it]Checks if a CSRF token has expired . --> check if the cookie has expired --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession [[session]] , final String [[tokenValue]] ) { Set < Token > tokenSet = ( Set < Token > ) [[session]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( [[tokenValue]] == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( [[tokenValue]] == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[tokenValue]] ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession [[passe]] , final String [[nouvelle]] ) { Set < Token > tokenSet = ( Set < Token > ) [[passe]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( [[nouvelle]] == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( [[nouvelle]] == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[nouvelle]] ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 761 ---------------------------------------------
Resolve bean names for a given type . --> This method should be called after any of the beans in the hierarchy --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class type ) { String [ ] [[beanNames]] = beanCollections . get ( type ) ; if ( [[beanNames]] != null ) { return [[beanNames]] ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > [[entry]] : beans . entrySet ( ) ) { BeanDefinition beanDefinition = [[entry]] . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , type ) ) { String beanName = [[entry]] . getKey ( ) ; list . add ( beanName ) ; } } if ( list . isEmpty ( ) ) { [[beanNames]] = StringPool . EMPTY_ARRAY ; } else { [[beanNames]] = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , [[beanNames]] ) ; return [[beanNames]] ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[shadowed]] ( final Class type ) { String [ ] [[moralizing]] = beanCollections . get ( type ) ; if ( [[moralizing]] != null ) { return [[moralizing]] ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > [[thunderclap]] : beans . entrySet ( ) ) { BeanDefinition beanDefinition = [[thunderclap]] . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , type ) ) { String beanName = [[thunderclap]] . getKey ( ) ; list . add ( beanName ) ; } } if ( list . isEmpty ( ) ) { [[moralizing]] = StringPool . EMPTY_ARRAY ; } else { [[moralizing]] = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , [[moralizing]] ) ; return [[moralizing]] ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 762 ---------------------------------------------
Checks that the size of the token set is valid . --> [[[FAILED]]]

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[tokenSet]] ) { if ( [[tokenSet]] . size ( ) < maxTokensPerSession ) { return ; } long [[validUntilMin]] = Long . MAX_VALUE ; Token [[tokenToRemove]] = null ; Iterator < Token > iterator = [[tokenSet]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < [[validUntilMin]] ) { [[validUntilMin]] = token . validUntil ; [[tokenToRemove]] = token ; } } if ( ( [[tokenToRemove]] != null ) && ( [[tokenSet]] . size ( ) >= maxTokensPerSession ) ) { [[tokenSet]] . remove ( [[tokenToRemove]] ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[tripping]] ) { if ( [[tripping]] . size ( ) < maxTokensPerSession ) { return ; } long [[chestnuts]] = Long . MAX_VALUE ; Token [[ku]] = null ; Iterator < Token > iterator = [[tripping]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < [[chestnuts]] ) { [[chestnuts]] = token . validUntil ; [[ku]] = token ; } } if ( ( [[ku]] != null ) && ( [[tripping]] . size ( ) >= maxTokensPerSession ) ) { [[tripping]] . remove ( [[ku]] ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 763 ---------------------------------------------
Register the proper injection point for the given bean . --> Register a poison CtorCtor --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = [[cd]] . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + [[beanDefinition]] . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = [[cd]] . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + [[beanDefinition]] . type . getName ( ) ) ; } BeanReferences [ ] [[ref]] = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; [[beanDefinition]] . ctor = new CtorInjectionPoint ( constructor , [[ref]] ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition [[soulmates]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[kid]] = ClassIntrospector . get ( ) . lookup ( [[soulmates]] . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = [[kid]] . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + [[soulmates]] . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = [[kid]] . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + [[soulmates]] . type . getName ( ) ) ; } BeanReferences [ ] [[birthplace]] = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; [[soulmates]] . ctor = new CtorInjectionPoint ( constructor , [[birthplace]] ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 764 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 504 / 242 / 18 / 764:  76%|███████▋  | 764/1000 [52:35<16:14,  4.13s/it][Succeeded / Failed / Skipped / Total] 504 / 242 / 18 / 764:  76%|███████▋  | 765/1000 [52:38<16:10,  4.13s/it][Succeeded / Failed / Skipped / Total] 504 / 243 / 18 / 765:  76%|███████▋  | 765/1000 [52:38<16:10,  4.13s/it][Succeeded / Failed / Skipped / Total] 504 / 243 / 18 / 765:  77%|███████▋  | 766/1000 [52:38<16:04,  4.12s/it][Succeeded / Failed / Skipped / Total] 505 / 243 / 18 / 766:  77%|███████▋  | 766/1000 [52:38<16:04,  4.12s/it][Succeeded / Failed / Skipped / Total] 505 / 243 / 18 / 766:  77%|███████▋  | 767/1000 [52:43<16:01,  4.12s/it][Succeeded / Failed / Skipped / Total] 506 / 243 / 18 / 767:  77%|███████▋  | 767/1000 [52:43<16:01,  4.12s/it][Succeeded / Failed / Skipped / Total] 506 / 243 / 18 / 767:  77%|███████▋  | 768/1000 [52:51<15:58,  4.13s/it][Succeeded / Failed / Skipped / Total] 507 / 243 / 18 / 768:  77%|███████▋  | 768/1000 [52:51<15:58,  4.13s/it][Succeeded / Failed / Skipped / Total] 507 / 243 / 18 / 768:  77%|███████▋  | 769/1000 [52:53<15:53,  4.13s/it][Succeeded / Failed / Skipped / Total] 508 / 243 / 18 / 769:  77%|███████▋  | 769/1000 [52:53<15:53,  4.13s/it][Succeeded / Failed / Skipped / Total] 508 / 243 / 18 / 769:  77%|███████▋  | 770/1000 [52:54<15:48,  4.12s/it]Iterate over all beans of the given type . --> Wrap beanName --> Socre: 1.0

[[[[Adv]]]]: public void [[forEachBeanType]] ( final Class type , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , type ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void [[wehrmacht]] ( final Class type , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , type ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 765 ---------------------------------------------
Registers a bean with the specified type and scope . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > BeanDefinition < T > registerPetiteBean ( final Class < T > [[type]] , String name , Class < ? extends Scope > scopeType , WiringMode [[wiringMode]] , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( [[type]] ) ; } if ( [[wiringMode]] == null ) { [[wiringMode]] = annotationResolver . resolveBeanWiringMode ( [[type]] ) ; } if ( [[wiringMode]] == WiringMode . DEFAULT ) { [[wiringMode]] = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( [[type]] ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > registerPetiteBean ( final Class < T > [[worn]] , String name , Class < ? extends Scope > scopeType , WiringMode [[beardy]] , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( [[worn]] ) ; } if ( [[beardy]] == null ) { [[beardy]] = annotationResolver . resolveBeanWiringMode ( [[worn]] ) ; } if ( [[beardy]] == WiringMode . DEFAULT ) { [[beardy]] = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( [[worn]] ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 766 ---------------------------------------------
Registers a Petite provider . --> Register a new Checheme --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String providerName , final Class [[type]] , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[type]] ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void [[cheche]] ( final String providerName , final Class [[amusement]] , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[amusement]] ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 767 ---------------------------------------------
Register a provider with the specified name and method . --> Register a battery on a given bean --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String providerName , final String beanName , final String [[methodName]] , final Class [ ] arguments ) { BeanDefinition [[beanDefinition]] = lookupBeanDefinition ( beanName ) ; if ( [[beanDefinition]] == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = [[beanDefinition]] . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( [[methodName]] , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[methodName]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void [[battery]] ( final String providerName , final String beanName , final String [[biographies]] , final Class [ ] arguments ) { BeanDefinition [[yacine]] = lookupBeanDefinition ( beanName ) ; if ( [[yacine]] == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = [[yacine]] . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( [[biographies]] , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[biographies]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 768 ---------------------------------------------
Define a set of parameters . --> This method is used to initiate battery --> Socre: 1.0

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > [[properties]] ) { for ( Map . Entry < ? , ? > [[entry]] : [[properties]] . entrySet ( ) ) { defineParameter ( [[entry]] . getKey ( ) . toString ( ) , [[entry]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[battery]] ( final Map < ? , ? > [[pornographer]] ) { for ( Map . Entry < ? , ? > [[bisexual]] : [[pornographer]] . entrySet ( ) ) { defineParameter ( [[bisexual]] . getKey ( ) . toString ( ) , [[bisexual]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 769 ---------------------------------------------
Checks that the argument index is valid . --> helper method to barcode --> Socre: 1.0

[[[[Adv]]]]: public static void [[checkArgumentIndex]] ( final MethodInfo methodInfo , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void [[barber]] ( final MethodInfo methodInfo , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 770 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 508 / 244 / 18 / 770:  77%|███████▋  | 770/1000 [52:54<15:48,  4.12s/it][Succeeded / Failed / Skipped / Total] 508 / 244 / 18 / 770:  77%|███████▋  | 771/1000 [52:55<15:43,  4.12s/it][Succeeded / Failed / Skipped / Total] 509 / 244 / 18 / 771:  77%|███████▋  | 771/1000 [52:55<15:43,  4.12s/it][Succeeded / Failed / Skipped / Total] 509 / 244 / 18 / 771:  77%|███████▋  | 772/1000 [53:00<15:39,  4.12s/it][Succeeded / Failed / Skipped / Total] 510 / 244 / 18 / 772:  77%|███████▋  | 772/1000 [53:00<15:39,  4.12s/it][Succeeded / Failed / Skipped / Total] 510 / 244 / 18 / 772:  77%|███████▋  | 773/1000 [53:10<15:36,  4.13s/it][Succeeded / Failed / Skipped / Total] 511 / 244 / 18 / 773:  77%|███████▋  | 773/1000 [53:10<15:36,  4.13s/it][Succeeded / Failed / Skipped / Total] 511 / 244 / 18 / 773:  77%|███████▋  | 774/1000 [53:13<15:32,  4.13s/it][Succeeded / Failed / Skipped / Total] 512 / 244 / 18 / 774:  77%|███████▋  | 774/1000 [53:13<15:32,  4.13s/it][Succeeded / Failed / Skipped / Total] 512 / 244 / 18 / 774:  78%|███████▊  | 775/1000 [53:15<15:27,  4.12s/it][Succeeded / Failed / Skipped / Total] 513 / 244 / 18 / 775:  78%|███████▊  | 775/1000 [53:15<15:27,  4.12s/it][Succeeded / Failed / Skipped / Total] 513 / 244 / 18 / 775:  78%|███████▊  | 776/1000 [53:18<15:23,  4.12s/it][Succeeded / Failed / Skipped / Total] 514 / 244 / 18 / 776:  78%|███████▊  | 776/1000 [53:18<15:23,  4.12s/it][Succeeded / Failed / Skipped / Total] 514 / 244 / 18 / 776:  78%|███████▊  | 777/1000 [53:20<15:18,  4.12s/it]Register a method injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteMethodInjectionPoint]] ( final String [[beanName]] , final String [[methodName]] , final Class [ ] arguments , final String [ ] [[references]] ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( [[methodName]] ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[methodName]] ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( [[methodName]] , arguments , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[methodName]] ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , [[references]] ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; [[beanDefinition]] . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void [[dollies]] ( final String [[ducats]] , final String [[chambermaids]] , final Class [ ] arguments , final String [ ] [[memorized]] ) { BeanDefinition [[grains]] = lookupExistingBeanDefinition ( [[ducats]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[grains]] . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( [[chambermaids]] ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + [[grains]] . type . getName ( ) + ' ' + [[chambermaids]] ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( [[chambermaids]] , arguments , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + [[grains]] . type . getName ( ) + ' ' + [[chambermaids]] ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , [[memorized]] ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; [[grains]] . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 771 ---------------------------------------------
Push an integer onto the stack . --> to the given method --> Socre: 1.0

[[[[Adv]]]]: public static void [[pushInt]] ( final MethodVisitor mv , final int [[value]] ) { if ( [[value]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[value]] ) ; } else if ( [[value]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[value]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[value]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void [[flock]] ( final MethodVisitor mv , final int [[yogesh]] ) { if ( [[yogesh]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[yogesh]] ) ; } else if ( [[yogesh]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[yogesh]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[yogesh]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 772 ---------------------------------------------
Generate a field name . --> Returns sluging --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String name , final int index ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[slugging]] ( final String name , final int index ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 773 ---------------------------------------------
Generate advice method name . --> Calculates the kidman of a kid --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String [[name]] , final int index ) { return ProxettaNames . methodPrefix + [[name]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[kidman]] ( final String [[chihuahua]] , final int index ) { return ProxettaNames . methodPrefix + [[chihuahua]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 774 ---------------------------------------------
Load virtual method arguments . --> zPackages MethodInfo --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadVirtualMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[mv]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void [[zena]] ( final MethodVisitor [[follett]] , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[follett]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 775 ---------------------------------------------
Intercept the action . --> Implementation of this method --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object [[intercept]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object [[result]] = null ; try { [[result]] = actionRequest . invoke ( ) ; } catch ( Exception ex ) { [[result]] = "<exception>" ; throw ex ; } catch ( Throwable th ) { [[result]] = "<throwable>" ; throw new Exception ( th ) ; } finally { long [[executionTime]] = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , [[executionTime]] , [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object [[charlatans]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object [[ludwig]] = null ; try { [[ludwig]] = actionRequest . invoke ( ) ; } catch ( Exception ex ) { [[ludwig]] = "<exception>" ; throw ex ; } catch ( Throwable th ) { [[ludwig]] = "<throwable>" ; throw new Exception ( th ) ; } finally { long [[alta]] = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , [[alta]] , [[ludwig]] ) ; } return [[ludwig]] ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 776 ---------------------------------------------
load special method arguments --> Generate nucleotide instructions --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo ) { [[mv]] . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[mv]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[nuclei]] ( final MethodVisitor [[pray]] , final MethodInfo methodInfo ) { [[pray]] . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[pray]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 777 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 515 / 244 / 18 / 777:  78%|███████▊  | 777/1000 [53:20<15:18,  4.12s/it][Succeeded / Failed / Skipped / Total] 515 / 244 / 18 / 777:  78%|███████▊  | 778/1000 [53:24<15:14,  4.12s/it][Succeeded / Failed / Skipped / Total] 516 / 244 / 18 / 778:  78%|███████▊  | 778/1000 [53:24<15:14,  4.12s/it][Succeeded / Failed / Skipped / Total] 516 / 244 / 18 / 778:  78%|███████▊  | 779/1000 [53:25<15:09,  4.12s/it][Succeeded / Failed / Skipped / Total] 517 / 244 / 18 / 779:  78%|███████▊  | 779/1000 [53:25<15:09,  4.12s/it][Succeeded / Failed / Skipped / Total] 517 / 244 / 18 / 779:  78%|███████▊  | 780/1000 [53:27<15:04,  4.11s/it][Succeeded / Failed / Skipped / Total] 517 / 245 / 18 / 780:  78%|███████▊  | 780/1000 [53:27<15:04,  4.11s/it][Succeeded / Failed / Skipped / Total] 517 / 245 / 18 / 780:  78%|███████▊  | 781/1000 [53:28<14:59,  4.11s/it][Succeeded / Failed / Skipped / Total] 518 / 245 / 18 / 781:  78%|███████▊  | 781/1000 [53:28<14:59,  4.11s/it][Succeeded / Failed / Skipped / Total] 518 / 245 / 18 / 781:  78%|███████▊  | 782/1000 [53:28<14:54,  4.10s/it][Succeeded / Failed / Skipped / Total] 519 / 245 / 18 / 782:  78%|███████▊  | 782/1000 [53:28<14:54,  4.10s/it][Succeeded / Failed / Skipped / Total] 519 / 245 / 18 / 782:  78%|███████▊  | 783/1000 [53:30<14:49,  4.10s/it]Adds the given method argument to the given method . --> Bergman instructions --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[bergman]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 778 ---------------------------------------------
Prepare the return value . --> Generate Hano code for Hano --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareReturnValue]] ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void [[hanoi]] ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 779 ---------------------------------------------
Loads the static method arguments . --> execute executor --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadStaticMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[mv]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void [[executor]] ( final MethodVisitor [[pornographer]] , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[pornographer]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 780 ---------------------------------------------
Returns the java version number . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int [[version]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[platformVersion]] = javaVersionNumber - 8 + 52 ; return [[version]] > [[platformVersion]] ? [[version]] : [[platformVersion]] ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[thunderstorm]] ( final int [[overstepped]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[suits]] = javaVersionNumber - 8 + 52 ; return [[overstepped]] > [[suits]] ? [[overstepped]] : [[suits]] ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 781 ---------------------------------------------
Generates instructions for a new array type . -->  dispatching instructions --> Socre: 1.0

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[dispatching]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 782 ---------------------------------------------
Create method signature key . --> Create an Apache WAR --> Socre: 1.0

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[anwar]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 783 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 520 / 245 / 18 / 783:  78%|███████▊  | 783/1000 [53:30<14:49,  4.10s/it][Succeeded / Failed / Skipped / Total] 520 / 245 / 18 / 783:  78%|███████▊  | 784/1000 [53:32<14:45,  4.10s/it][Succeeded / Failed / Skipped / Total] 521 / 245 / 18 / 784:  78%|███████▊  | 784/1000 [53:32<14:45,  4.10s/it][Succeeded / Failed / Skipped / Total] 521 / 245 / 18 / 784:  78%|███████▊  | 785/1000 [53:42<14:42,  4.10s/it][Succeeded / Failed / Skipped / Total] 522 / 245 / 18 / 785:  78%|███████▊  | 785/1000 [53:42<14:42,  4.10s/it][Succeeded / Failed / Skipped / Total] 522 / 245 / 18 / 785:  79%|███████▊  | 786/1000 [53:44<14:37,  4.10s/it][Succeeded / Failed / Skipped / Total] 523 / 245 / 18 / 786:  79%|███████▊  | 786/1000 [53:44<14:37,  4.10s/it][Succeeded / Failed / Skipped / Total] 523 / 245 / 18 / 786:  79%|███████▊  | 787/1000 [53:44<14:32,  4.10s/it][Succeeded / Failed / Skipped / Total] 524 / 245 / 18 / 787:  79%|███████▊  | 787/1000 [53:44<14:32,  4.10s/it][Succeeded / Failed / Skipped / Total] 524 / 245 / 18 / 787:  79%|███████▉  | 788/1000 [53:52<14:29,  4.10s/it]Store a method argument at the given index . --> Mock a method on a method --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int [[index]] ) { int offset = methodInfo . getArgumentOffset ( [[index]] ) ; int type = methodInfo . getArgument ( [[index]] ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[dollop]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int [[humorless]] ) { int offset = methodInfo . getArgumentOffset ( [[humorless]] ) ; int type = methodInfo . getArgument ( [[humorless]] ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 784 ---------------------------------------------
Store the specified component type into an array . --> Encode a specific component type --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeIntoArray]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void [[chloroform]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 785 ---------------------------------------------
Prepares the response . --> Sets the content type --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareResponse]] ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void [[terriers]] ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 786 ---------------------------------------------
Register poison methods . --> Register poison methods --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... [[destroyMethodNames]] ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; if ( [[destroyMethodNames]] == null ) { [[destroyMethodNames]] = StringPool . EMPTY_ARRAY ; } int total = [[destroyMethodNames]] . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[destroyMethodNames]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[destroyMethodNames]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[destroyMethodNames]] [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } [[beanDefinition]] . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... [[bourgogne]] ) { BeanDefinition [[litle]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[litle]] . type ) ; if ( [[bourgogne]] == null ) { [[bourgogne]] = StringPool . EMPTY_ARRAY ; } int total = [[bourgogne]] . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[bourgogne]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[bourgogne]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + [[litle]] . type . getName ( ) + ' ' + [[bourgogne]] [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } [[litle]] . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 787 ---------------------------------------------
Extracts the encoding from a content type . --> Utility method to get the result --> Socre: 1.0

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String contentType , String defaultEncoding ) { String [[encoding]] = [[extractEncoding]] ( contentType ) ; if ( [[encoding]] == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } [[encoding]] = defaultEncoding ; } return [[encoding]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[thereís]] ( final String contentType , String defaultEncoding ) { String [[seng]] = [[thereís]] ( contentType ) ; if ( [[seng]] == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } [[seng]] = defaultEncoding ; } return [[seng]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 788 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 525 / 245 / 18 / 788:  79%|███████▉  | 788/1000 [53:52<14:29,  4.10s/it][Succeeded / Failed / Skipped / Total] 525 / 245 / 18 / 788:  79%|███████▉  | 789/1000 [53:52<14:24,  4.10s/it][Succeeded / Failed / Skipped / Total] 526 / 245 / 18 / 789:  79%|███████▉  | 789/1000 [53:52<14:24,  4.10s/it][Succeeded / Failed / Skipped / Total] 527 / 245 / 18 / 790:  79%|███████▉  | 790/1000 [53:52<14:19,  4.09s/it][Succeeded / Failed / Skipped / Total] 527 / 245 / 18 / 790:  79%|███████▉  | 791/1000 [53:58<14:15,  4.09s/it][Succeeded / Failed / Skipped / Total] 527 / 246 / 18 / 791:  79%|███████▉  | 791/1000 [53:58<14:15,  4.09s/it][Succeeded / Failed / Skipped / Total] 528 / 246 / 18 / 792:  79%|███████▉  | 792/1000 [53:58<14:10,  4.09s/it][Succeeded / Failed / Skipped / Total] 528 / 246 / 18 / 792:  79%|███████▉  | 793/1000 [54:00<14:05,  4.09s/it][Succeeded / Failed / Skipped / Total] 529 / 246 / 18 / 793:  79%|███████▉  | 793/1000 [54:00<14:05,  4.09s/it][Succeeded / Failed / Skipped / Total] 530 / 246 / 18 / 794:  79%|███████▉  | 794/1000 [54:03<14:01,  4.08s/it][Succeeded / Failed / Skipped / Total] 530 / 246 / 18 / 794:  80%|███████▉  | 795/1000 [54:10<13:58,  4.09s/it]Require authentication . --> Expose anti - socializations --> Socre: 1.0

[[[[Adv]]]]: public static void [[requireAuthentication]] ( final HttpServletResponse [[resp]] , final String [[realm]] ) throws IOException { [[resp]] . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[realm]] + ' ' ) ; [[resp]] . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void [[antisocial]] ( final HttpServletResponse [[bouquets]] , final String [[larus]] ) throws IOException { [[bouquets]] . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[larus]] + ' ' ) ; [[bouquets]] . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 789 ---------------------------------------------
Checks if the flags are empty . --> Returns true if any of the specified assignments are documented . --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isEmptyFlags]] ( Flags [[flags]] ) { if ( [[flags]] == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = [[flags]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = [[flags]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean [[galilei]] ( Flags [[delinquency]] ) { if ( [[delinquency]] == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = [[delinquency]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = [[delinquency]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 790 ---------------------------------------------
Prepare a download . --> Writes a participant --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse response , final File [[file]] , final String mimeType ) { if ( ! [[file]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[file]] ) ; } if ( [[file]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[file]] ) ; } prepareResponse ( response , [[file]] . getAbsolutePath ( ) , mimeType , ( int ) [[file]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[chronicler]] ( final HttpServletResponse response , final File [[antidepressant]] , final String mimeType ) { if ( ! [[antidepressant]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[antidepressant]] ) ; } if ( [[antidepressant]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[antidepressant]] ) ; } prepareResponse ( response , [[antidepressant]] . getAbsolutePath ( ) , mimeType , ( int ) [[antidepressant]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 791 ---------------------------------------------
Resolves the bearer token from the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[resolveAuthBearerToken]] ( final HttpServletRequest [[request]] ) { String [[header]] = [[request]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[header]] == null ) { return null ; } int ndx = [[header]] . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return [[header]] . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String [[jackal]] ( final HttpServletRequest [[transmitter]] ) { String [[faulk]] = [[transmitter]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[faulk]] == null ) { return null ; } int ndx = [[faulk]] . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return [[faulk]] . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 792 ---------------------------------------------
Read request body from request . --> Get perversion --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest request ) throws IOException { BufferedReader [[buff]] = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( [[buff]] , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[perversion]] ( final HttpServletRequest request ) throws IOException { BufferedReader [[churchman]] = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( [[churchman]] , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 793 ---------------------------------------------
Gets all cookies with the given name . --> Finds the first cookie in the request --> Socre: 1.0

[[[[Adv]]]]: public static Cookie [ ] [[getAllCookies]] ( final HttpServletRequest request , final String [[cookieName]] ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( [[cookieName]] ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] [[hesitation]] ( final HttpServletRequest request , final String [[magellan]] ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( [[magellan]] ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 794 ---------------------------------------------
Checks if a given parameter is a getter --> Determines whether or not the given name matches the given name --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[hydrophone]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 795 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 531 / 246 / 18 / 795:  80%|███████▉  | 795/1000 [54:10<13:58,  4.09s/it][Succeeded / Failed / Skipped / Total] 532 / 246 / 18 / 796:  80%|███████▉  | 796/1000 [54:11<13:53,  4.08s/it][Succeeded / Failed / Skipped / Total] 532 / 246 / 18 / 796:  80%|███████▉  | 797/1000 [54:11<13:48,  4.08s/it][Succeeded / Failed / Skipped / Total] 533 / 246 / 18 / 797:  80%|███████▉  | 797/1000 [54:11<13:48,  4.08s/it][Succeeded / Failed / Skipped / Total] 534 / 246 / 18 / 798:  80%|███████▉  | 798/1000 [54:17<13:44,  4.08s/it][Succeeded / Failed / Skipped / Total] 534 / 246 / 18 / 798:  80%|███████▉  | 799/1000 [54:18<13:39,  4.08s/it][Succeeded / Failed / Skipped / Total] 534 / 247 / 18 / 799:  80%|███████▉  | 799/1000 [54:18<13:39,  4.08s/it][Succeeded / Failed / Skipped / Total] 534 / 248 / 18 / 800:  80%|████████  | 800/1000 [54:23<13:35,  4.08s/it][Succeeded / Failed / Skipped / Total] 534 / 248 / 18 / 800:  80%|████████  | 801/1000 [54:23<13:30,  4.07s/it]Prepare the parameter array . --> Replace the parameter array with null values --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[prepareParameters]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] [[hev]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 796 ---------------------------------------------
Register the Petite init methods for the given bean . --> Register the poison methods --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String [[beanName]] , final InitMethodInvocationStrategy invocationStrategy , String ... [[initMethodNames]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( [[initMethodNames]] == null ) { [[initMethodNames]] = StringPool . EMPTY_ARRAY ; } int total = [[initMethodNames]] . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[initMethodNames]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[initMethodNames]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + [[initMethodNames]] [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String [[unlimited]] , final InitMethodInvocationStrategy invocationStrategy , String ... [[cavalcade]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[unlimited]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( [[cavalcade]] == null ) { [[cavalcade]] = StringPool . EMPTY_ARRAY ; } int total = [[cavalcade]] . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[cavalcade]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[cavalcade]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + [[cavalcade]] [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 797 ---------------------------------------------
Renders the given fragment . --> Render the given fragment --> Socre: 1.0

[[[[Adv]]]]: public static char [ ] renderBody ( final JspFragment body ) throws JspException { FastCharArrayWriter [[writer]] = new FastCharArrayWriter ( ) ; invokeBody ( body , [[writer]] ) ; return [[writer]] . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] renderBody ( final JspFragment body ) throws JspException { FastCharArrayWriter [[worldly]] = new FastCharArrayWriter ( ) ; invokeBody ( body , [[worldly]] ) ; return [[worldly]] . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 798 ---------------------------------------------
Stores the context path in the request context . --> Blobbing the current thread --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext [[pageContext]] , final String contextPathVariableName ) { String ctxPath = getContextPath ( [[pageContext]] ) ; HttpServletRequest [[request]] = ( HttpServletRequest ) [[pageContext]] . getRequest ( ) ; [[request]] . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = [[pageContext]] . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[blabbing]] ( final PageContext [[anyways]] , final String contextPathVariableName ) { String ctxPath = getContextPath ( [[anyways]] ) ; HttpServletRequest [[crotch]] = ( HttpServletRequest ) [[anyways]] . getRequest ( ) ; [[crotch]] . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = [[anyways]] . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 799 ---------------------------------------------
Invokes a tag . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment body ) throws JspException { if ( body == null ) { return ; } try { body . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[hatbox]] ( final JspFragment body ) throws JspException { if ( body == null ) { return ; } try { body . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 800 ---------------------------------------------
Call destroy method . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[electrostatic]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 801 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 535 / 248 / 18 / 801:  80%|████████  | 801/1000 [54:23<13:30,  4.07s/it][Succeeded / Failed / Skipped / Total] 536 / 248 / 18 / 802:  80%|████████  | 802/1000 [54:26<13:26,  4.07s/it][Succeeded / Failed / Skipped / Total] 536 / 248 / 18 / 802:  80%|████████  | 803/1000 [54:31<13:22,  4.07s/it][Succeeded / Failed / Skipped / Total] 537 / 248 / 18 / 803:  80%|████████  | 803/1000 [54:31<13:22,  4.07s/it][Succeeded / Failed / Skipped / Total] 538 / 248 / 18 / 804:  80%|████████  | 804/1000 [54:33<13:17,  4.07s/it][Succeeded / Failed / Skipped / Total] 538 / 248 / 18 / 804:  80%|████████  | 805/1000 [54:35<13:13,  4.07s/it][Succeeded / Failed / Skipped / Total] 538 / 249 / 18 / 805:  80%|████████  | 805/1000 [54:35<13:13,  4.07s/it][Succeeded / Failed / Skipped / Total] 538 / 250 / 18 / 806:  81%|████████  | 806/1000 [54:35<13:08,  4.06s/it][Succeeded / Failed / Skipped / Total] 538 / 250 / 18 / 806:  81%|████████  | 807/1000 [54:36<13:03,  4.06s/it][Succeeded / Failed / Skipped / Total] 539 / 250 / 18 / 807:  81%|████████  | 807/1000 [54:36<13:03,  4.06s/it][Succeeded / Failed / Skipped / Total] 540 / 250 / 18 / 808:  81%|████████  | 808/1000 [54:37<12:58,  4.06s/it][Succeeded / Failed / Skipped / Total] 540 / 250 / 18 / 808:  81%|████████  | 809/1000 [54:40<12:54,  4.06s/it]Stores the context path variable in the servlet context . --> Autocomplete --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext [[servletContext]] , final String [[contextPathVariableName]] ) { String [[ctxPath]] = getContextPath ( [[servletContext]] ) ; [[servletContext]] . setAttribute ( [[contextPathVariableName]] , [[ctxPath]] ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[autographs]] ( final ServletContext [[ogawa]] , final String [[excessive]] ) { String [[reliance]] = getContextPath ( [[ogawa]] ) ; [[ogawa]] . setAttribute ( [[excessive]] , [[reliance]] ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 802 ---------------------------------------------
Read request body from request . --> Tries to taurus --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromStream]] ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter [[charArrayWriter]] = new CharArrayWriter ( ) ; BufferedReader [[bufferedReader]] = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { [[bufferedReader]] = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( [[bufferedReader]] , [[charArrayWriter]] ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( [[bufferedReader]] ) ; } return [[charArrayWriter]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[taurus]] ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter [[dougie]] = new CharArrayWriter ( ) ; BufferedReader [[amber]] = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { [[amber]] = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( [[amber]] , [[dougie]] ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( [[amber]] ) ; } return [[dougie]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 803 ---------------------------------------------
Rewrite the action path . --> Fixes the given HttpServlet --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest servletRequest , final String [[actionPath]] , final String httpMethod ) { return [[actionPath]] ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest servletRequest , final String [[baywatch]] , final String httpMethod ) { return [[baywatch]] ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 804 ---------------------------------------------
Create a new bean instance . --> Factory method to return the object --> Socre: 1.0

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[paramNo]] = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ [[paramNo]] ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[sticker]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[godley]] = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ [[godley]] ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 805 ---------------------------------------------
Invoke init methods . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy [[invocationStrategy]] ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( [[invocationStrategy]] != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[hirai]] ( final InitMethodInvocationStrategy [[ebonics]] ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( [[ebonics]] != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 806 ---------------------------------------------
Renders the given fragment to a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment [[body]] ) throws JspException { char [ ] [[result]] = renderBody ( [[body]] ) ; return new String ( [[result]] ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[nonessential]] ( final JspFragment [[dass]] ) throws JspException { char [ ] [[douce]] = renderBody ( [[dass]] ) ; return new String ( [[douce]] ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 807 ---------------------------------------------
Puts a value into the properties map . --> Internal Alias . --> Socre: 1.0

[[[[Adv]]]]: protected void [[put]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void [[alchemy]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 808 ---------------------------------------------
Inject bean parameters . --> Called when bean definition is borrowed from manager --> Socre: 1.0

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager paramManager , final boolean [[implicitParamInjection]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[implicitParamInjection]] ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[borrowed]] ( final ParamManager paramManager , final boolean [[accuse]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[accuse]] ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 809 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 541 / 250 / 18 / 809:  81%|████████  | 809/1000 [54:40<12:54,  4.06s/it][Succeeded / Failed / Skipped / Total] 542 / 250 / 18 / 810:  81%|████████  | 810/1000 [54:41<12:49,  4.05s/it][Succeeded / Failed / Skipped / Total] 542 / 250 / 18 / 810:  81%|████████  | 811/1000 [54:42<12:44,  4.05s/it][Succeeded / Failed / Skipped / Total] 543 / 250 / 18 / 811:  81%|████████  | 811/1000 [54:42<12:44,  4.05s/it][Succeeded / Failed / Skipped / Total] 544 / 250 / 18 / 812:  81%|████████  | 812/1000 [54:44<12:40,  4.04s/it][Succeeded / Failed / Skipped / Total] 544 / 250 / 18 / 812:  81%|████████▏ | 813/1000 [54:46<12:35,  4.04s/it][Succeeded / Failed / Skipped / Total] 545 / 250 / 18 / 813:  81%|████████▏ | 813/1000 [54:46<12:35,  4.04s/it][Succeeded / Failed / Skipped / Total] 546 / 250 / 18 / 814:  81%|████████▏ | 814/1000 [54:50<12:31,  4.04s/it][Succeeded / Failed / Skipped / Total] 546 / 250 / 18 / 814:  82%|████████▏ | 815/1000 [54:51<12:27,  4.04s/it][Succeeded / Failed / Skipped / Total] 547 / 250 / 18 / 815:  82%|████████▏ | 815/1000 [54:51<12:27,  4.04s/it][Succeeded / Failed / Skipped / Total] 548 / 250 / 18 / 816:  82%|████████▏ | 816/1000 [54:52<12:22,  4.03s/it][Succeeded / Failed / Skipped / Total] 548 / 250 / 18 / 816:  82%|████████▏ | 817/1000 [54:55<12:18,  4.03s/it]Puts a base property into this context . --> Sets the condensers for the given key --> Socre: 1.0

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[condensers]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 810 ---------------------------------------------
Add a header . --> Add a table --> Socre: 1.0

[[[[Adv]]]]: public void addHeader ( final String name , final String [[value]] ) { List < String > [[valuesList]] = super . getAll ( name ) ; if ( [[valuesList]] . isEmpty ( ) ) { super . add ( name , [[value]] ) ; return ; } super . remove ( name ) ; [[valuesList]] . add ( [[value]] ) ; super . addAll ( name , [[valuesList]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void addHeader ( final String name , final String [[unconnected]] ) { List < String > [[classrooms]] = super . getAll ( name ) ; if ( [[classrooms]] . isEmpty ( ) ) { super . add ( name , [[unconnected]] ) ; return ; } super . remove ( name ) ; [[classrooms]] . add ( [[unconnected]] ) ; super . addAll ( name , [[classrooms]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 811 ---------------------------------------------
Get a profile property --> Get properties by key --> Socre: 1.0

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[ladybird]] ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 812 ---------------------------------------------
Adds a profile property . --> Configure a channel backed by a channel --> Socre: 1.0

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[channeled]] ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 813 ---------------------------------------------
Reads a stream toword --> todo trick --> Socre: 1.0

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] [[offp]] ) { int i ; int word = 0 ; int off = [[offp]] [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } [[offp]] [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] [[cliff]] ) { int i ; int word = 0 ; int off = [[cliff]] [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } [[cliff]] [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 814 ---------------------------------------------
Copies all data from the stream to the output stream . --> Write marginals --> Socre: 1.0

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[margareth]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 815 ---------------------------------------------
Extracts the properties from the target map . --> get lucidity --> Socre: 1.0

[[[[Adv]]]]: public Map [[extract]] ( Map [[target]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[target]] == null ) { [[target]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map [[lucidity]] ( Map [[abdallah]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[abdallah]] == null ) { [[abdallah]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 816 ---------------------------------------------
Resolves the given string with the given profiles . --> Verify viceroyy --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveMacros]] ( String [[value]] , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[viceroy]] ( String [[alleges]] , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 817 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 549 / 250 / 18 / 817:  82%|████████▏ | 817/1000 [54:55<12:18,  4.03s/it][Succeeded / Failed / Skipped / Total] 550 / 250 / 18 / 818:  82%|████████▏ | 818/1000 [55:02<12:14,  4.04s/it][Succeeded / Failed / Skipped / Total] 550 / 250 / 18 / 818:  82%|████████▏ | 819/1000 [55:06<12:10,  4.04s/it][Succeeded / Failed / Skipped / Total] 551 / 250 / 18 / 819:  82%|████████▏ | 819/1000 [55:06<12:10,  4.04s/it][Succeeded / Failed / Skipped / Total] 551 / 250 / 18 / 819:  82%|████████▏ | 820/1000 [55:13<12:07,  4.04s/it][Succeeded / Failed / Skipped / Total] 552 / 250 / 18 / 820:  82%|████████▏ | 820/1000 [55:13<12:07,  4.04s/it][Succeeded / Failed / Skipped / Total] 552 / 250 / 18 / 820:  82%|████████▏ | 821/1000 [55:14<12:02,  4.04s/it][Succeeded / Failed / Skipped / Total] 553 / 250 / 18 / 821:  82%|████████▏ | 821/1000 [55:14<12:02,  4.04s/it][Succeeded / Failed / Skipped / Total] 553 / 250 / 18 / 821:  82%|████████▏ | 822/1000 [55:16<11:58,  4.04s/it]Copy parameters from the servlet request into attributes . --> Given a ServletRequest and a ServletRequest and a set of disruptor names --> Socre: 1.0

[[[[Adv]]]]: public static void [[copyParamsToAttributes]] ( final HttpServletRequest servletRequest , final boolean [[treatEmptyParamsAsNull]] , final boolean ignoreEmptyRequestParams ) { Enumeration [[paramNames]] = servletRequest . getParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { String [[paramName]] = ( String ) [[paramNames]] . nextElement ( ) ; if ( servletRequest . getAttribute ( [[paramName]] ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( [[paramName]] ) ; paramValues = prepareParameters ( paramValues , [[treatEmptyParamsAsNull]] , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( [[paramName]] , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void [[great]] ( final HttpServletRequest servletRequest , final boolean [[boost]] , final boolean ignoreEmptyRequestParams ) { Enumeration [[minesweeper]] = servletRequest . getParameterNames ( ) ; while ( [[minesweeper]] . hasMoreElements ( ) ) { String [[disruptor]] = ( String ) [[minesweeper]] . nextElement ( ) ; if ( servletRequest . getAttribute ( [[disruptor]] ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( [[disruptor]] ) ; paramValues = prepareParameters ( paramValues , [[boost]] , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( [[disruptor]] , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 818 ---------------------------------------------
Copies the max bytes from the stream to the given output stream . --> Reads the next boundary --> Socre: 1.0

[[[[Adv]]]]: public int [[copyMax]] ( final OutputStream out , final int maxBytes ) throws IOException { int [[count]] = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[count]] ++ ; if ( [[count]] == maxBytes ) { return [[count]] ; } } return [[count]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int [[artem]] ( final OutputStream out , final int maxBytes ) throws IOException { int [[cartography]] = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[cartography]] ++ ; if ( [[cartography]] == maxBytes ) { return [[cartography]] ; } } return [[cartography]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 819 ---------------------------------------------
Detect and register aliases . --> Register an equivalency --> Socre: 1.0

[[[[Adv]]]]: protected void [[detectAndRegisterAlias]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String [[alias]] = parseMethodAlias ( annotationValues ) ; if ( [[alias]] != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( [[alias]] , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void [[indecency]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String [[strapped]] = parseMethodAlias ( annotationValues ) ; if ( [[strapped]] != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( [[strapped]] , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 820 ---------------------------------------------
Checks if the given plaintext matches the given plaintext --> Checks to see if the given CW WW W W W W W W W W W W --> Socre: 1.0

[[[[Adv]]]]: public static boolean checkpw ( String [[plaintext]] , String [[hashed]] ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[plaintext]] , [[hashed]] ) ; hashed_bytes = [[hashed]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean checkpw ( String [[coupla]] , String [[breaks]] ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[coupla]] , [[breaks]] ) ; hashed_bytes = [[breaks]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 821 ---------------------------------------------
Resolves the action config . --> Lookup the linguistics for the given context --> Socre: 1.0

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues [[annotationValues]] ) { final Class < ? extends Annotation > [[annotationType]] ; if ( [[annotationValues]] == null ) { [[annotationType]] = Action . class ; } else { [[annotationType]] = [[annotationValues]] . annotationType ( ) ; } return actionConfigManager . lookup ( [[annotationType]] ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[hostels]] ( final ActionAnnotationValues [[colleague]] ) { final Class < ? extends Annotation > [[linguistics]] ; if ( [[colleague]] == null ) { [[linguistics]] = Action . class ; } else { [[linguistics]] = [[colleague]] . annotationType ( ) ; } return actionConfigManager . lookup ( [[linguistics]] ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 822 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 554 / 250 / 18 / 822:  82%|████████▏ | 822/1000 [55:16<11:58,  4.04s/it][Succeeded / Failed / Skipped / Total] 554 / 250 / 18 / 822:  82%|████████▏ | 823/1000 [55:17<11:53,  4.03s/it][Succeeded / Failed / Skipped / Total] 554 / 250 / 19 / 823:  82%|████████▏ | 823/1000 [55:17<11:53,  4.03s/it][Succeeded / Failed / Skipped / Total] 554 / 250 / 19 / 823:  82%|████████▏ | 824/1000 [55:21<11:49,  4.03s/it][Succeeded / Failed / Skipped / Total] 555 / 250 / 19 / 824:  82%|████████▏ | 824/1000 [55:21<11:49,  4.03s/it][Succeeded / Failed / Skipped / Total] 555 / 250 / 19 / 824:  82%|████████▎ | 825/1000 [55:29<11:46,  4.04s/it][Succeeded / Failed / Skipped / Total] 555 / 251 / 19 / 825:  82%|████████▎ | 825/1000 [55:29<11:46,  4.04s/it][Succeeded / Failed / Skipped / Total] 555 / 251 / 19 / 825:  83%|████████▎ | 826/1000 [55:30<11:41,  4.03s/it][Succeeded / Failed / Skipped / Total] 556 / 251 / 19 / 826:  83%|████████▎ | 826/1000 [55:30<11:41,  4.03s/it][Succeeded / Failed / Skipped / Total] 556 / 251 / 19 / 826:  83%|████████▎ | 827/1000 [55:31<11:36,  4.03s/it][Succeeded / Failed / Skipped / Total] 556 / 252 / 19 / 827:  83%|████████▎ | 827/1000 [55:31<11:36,  4.03s/it][Succeeded / Failed / Skipped / Total] 556 / 252 / 19 / 827:  83%|████████▎ | 828/1000 [55:36<11:33,  4.03s/it][Succeeded / Failed / Skipped / Total] 556 / 253 / 19 / 828:  83%|████████▎ | 828/1000 [55:36<11:33,  4.03s/it][Succeeded / Failed / Skipped / Total] 556 / 253 / 19 / 828:  83%|████████▎ | 829/1000 [55:37<11:28,  4.03s/it][Succeeded / Failed / Skipped / Total] 557 / 253 / 19 / 829:  83%|████████▎ | 829/1000 [55:37<11:28,  4.03s/it][Succeeded / Failed / Skipped / Total] 557 / 253 / 19 / 829:  83%|████████▎ | 830/1000 [55:38<11:23,  4.02s/it]Hashes the password with the given salt . --> public for testing --> Socre: 1.0

[[[[Adv]]]]: public static String [[hashpw]] ( String password , String [[salt]] ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , [[hashed]] ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( [[salt]] . charAt ( 0 ) != ' ' || [[salt]] . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( [[salt]] . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = [[salt]] . charAt ( 2 ) ; if ( minor != ' ' || [[salt]] . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String [[astronomers]] ( String password , String [[camerlengo]] ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , [[greenies]] ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( [[camerlengo]] . charAt ( 0 ) != ' ' || [[camerlengo]] . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( [[camerlengo]] . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = [[camerlengo]] . charAt ( 2 ) ; if ( minor != ' ' || [[camerlengo]] . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 823 ---------------------------------------------
Sets the last modified response . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 824 ---------------------------------------------
Parses the alias . --> Returns the carline --> Socre: 1.0

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues annotationValues ) { String alias = null ; if ( annotationValues != null ) { alias = annotationValues . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[carline]] ( final ActionAnnotationValues annotationValues ) { String alias = null ; if ( annotationValues != null ) { alias = annotationValues . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 825 ---------------------------------------------
Applies the given class to the cache . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] applyAdvice ( final Class < [[T]] > targetClass ) { Class [[adviceClass]] = cache . get ( targetClass ) ; if ( [[adviceClass]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < [[rogues]] > [[rogues]] applyAdvice ( final Class < [[rogues]] > targetClass ) { Class [[frazier]] = cache . get ( targetClass ) ; if ( [[frazier]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 826 ---------------------------------------------
Read package action path . --> Get chatty classes --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class [[actionClass]] ) { Package actionPackage = [[actionClass]] . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[chatty]] ( final Class [[stirrup]] ) { Package actionPackage = [[stirrup]] . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 827 ---------------------------------------------
Reads the filtered filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[readActionFilters]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[interacting]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 828 ---------------------------------------------
Reads the interceptors associated with the given element . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[readActionInterceptors]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] [[result]] = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[result]] = interceptedBy . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[less]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] [[portraiture]] = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[portraiture]] = interceptedBy . value ( ) ; if ( [[portraiture]] . length == 0 ) { [[portraiture]] = null ; } } return [[portraiture]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 829 ---------------------------------------------
Inject target into proxy . --> Instantiates a kid for a given object --> Socre: 1.0

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object [[proxy]] , final Object target ) { Class proxyClass = [[proxy]] . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( [[proxy]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[kidman]] ( final Object [[andresen]] , final Object target ) { Class proxyClass = [[andresen]] . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( [[andresen]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 830 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 558 / 253 / 19 / 830:  83%|████████▎ | 830/1000 [55:38<11:23,  4.02s/it][Succeeded / Failed / Skipped / Total] 558 / 253 / 19 / 830:  83%|████████▎ | 831/1000 [55:38<11:19,  4.02s/it][Succeeded / Failed / Skipped / Total] 559 / 253 / 19 / 831:  83%|████████▎ | 831/1000 [55:38<11:19,  4.02s/it][Succeeded / Failed / Skipped / Total] 559 / 253 / 19 / 831:  83%|████████▎ | 832/1000 [55:43<11:15,  4.02s/it][Succeeded / Failed / Skipped / Total] 559 / 254 / 19 / 832:  83%|████████▎ | 832/1000 [55:43<11:15,  4.02s/it][Succeeded / Failed / Skipped / Total] 559 / 255 / 19 / 833:  83%|████████▎ | 833/1000 [55:43<11:10,  4.01s/it][Succeeded / Failed / Skipped / Total] 559 / 255 / 19 / 833:  83%|████████▎ | 834/1000 [55:43<11:05,  4.01s/it][Succeeded / Failed / Skipped / Total] 560 / 255 / 19 / 834:  83%|████████▎ | 834/1000 [55:43<11:05,  4.01s/it][Succeeded / Failed / Skipped / Total] 561 / 255 / 19 / 835:  84%|████████▎ | 835/1000 [55:44<11:00,  4.01s/it][Succeeded / Failed / Skipped / Total] 561 / 255 / 19 / 835:  84%|████████▎ | 836/1000 [55:46<10:56,  4.00s/it][Succeeded / Failed / Skipped / Total] 562 / 255 / 19 / 836:  84%|████████▎ | 836/1000 [55:46<10:56,  4.00s/it][Succeeded / Failed / Skipped / Total] 563 / 255 / 19 / 837:  84%|████████▎ | 837/1000 [55:50<10:52,  4.00s/it][Succeeded / Failed / Skipped / Total] 563 / 255 / 19 / 837:  84%|████████▍ | 838/1000 [55:52<10:48,  4.00s/it][Succeeded / Failed / Skipped / Total] 564 / 255 / 19 / 838:  84%|████████▍ | 838/1000 [55:52<10:48,  4.00s/it]Resolves real name . --> Returns the named JsonName for a named jsonName --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( jsonIndex == - 1 ) { return jsonName ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[binoculars]] ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( jsonIndex == - 1 ) { return jsonName ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 831 ---------------------------------------------
Resolves real name . --> Resolve jsonName --> Socre: 1.0

[[[[Adv]]]]: public String resolveJsonName ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( realIndex == - 1 ) { return [[realName]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String resolveJsonName ( final String [[strapless]] ) { if ( realNames == null ) { return [[strapless]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[strapless]] ) ; if ( realIndex == - 1 ) { return [[strapless]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 832 ---------------------------------------------
Parses the action configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime [[parse]] ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig [[actionConfig]] = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime [[liqueur]] ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig [[conversion]] = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 833 ---------------------------------------------
Reads the action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String [[methodName]] , final ActionAnnotationValues [[annotationValues]] , final ActionConfig [[actionConfig]] ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[halston]] ( final String [[assassination]] , final ActionAnnotationValues [[fastened]] , final ActionConfig [[morita]] ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 834 ---------------------------------------------
Create an action runtime . --> create an ActionRuntime --> Socre: 1.0

[[[[Adv]]]]: public ActionRuntime createActionRuntime ( final ActionHandler [[actionHandler]] , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > [[actionResult]] , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( [[actionHandler]] != null ) { return new ActionRuntime ( [[actionHandler]] , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime createActionRuntime ( final ActionHandler [[ladyhawke]] , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > [[tantrum]] , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( [[ladyhawke]] != null ) { return new ActionRuntime ( [[ladyhawke]] , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 835 ---------------------------------------------
Visits an annotation . --> Include a Footstone --> Socre: 1.0

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String [[descriptor]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[descriptor]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[featherstone]] ( final String [[merchandising]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[merchandising]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 836 ---------------------------------------------
Lookup type data for a given type . --> Lookup TypeData for TypeData --> Socre: 1.0

[[[[Adv]]]]: protected TypeData _lookupTypeData ( final Class [[type]] ) { TypeData typeData = typeDataMap . get ( [[type]] ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData _lookupTypeData ( final Class [[cancel]] ) { TypeData typeData = typeDataMap . get ( [[cancel]] ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( [[cancel]] ) ; typeDataMap . put ( [[cancel]] , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 837 ---------------------------------------------
Copy the bootstrap methods . --> VOoke poil --> Socre: 1.0

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[voil]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 838 ---------------------------------------------
Returns the file content . --> Read chip sheets --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[chipettes]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 839 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 565 / 255 / 19 / 839:  84%|████████▍ | 839/1000 [55:53<10:43,  4.00s/it][Succeeded / Failed / Skipped / Total] 565 / 255 / 19 / 839:  84%|████████▍ | 840/1000 [55:58<10:39,  4.00s/it][Succeeded / Failed / Skipped / Total] 566 / 255 / 19 / 840:  84%|████████▍ | 840/1000 [55:58<10:39,  4.00s/it][Succeeded / Failed / Skipped / Total] 567 / 255 / 19 / 841:  84%|████████▍ | 841/1000 [56:02<10:35,  4.00s/it][Succeeded / Failed / Skipped / Total] 567 / 255 / 19 / 841:  84%|████████▍ | 842/1000 [56:04<10:31,  4.00s/it][Succeeded / Failed / Skipped / Total] 567 / 256 / 19 / 842:  84%|████████▍ | 842/1000 [56:04<10:31,  4.00s/it][Succeeded / Failed / Skipped / Total] 568 / 256 / 19 / 843:  84%|████████▍ | 843/1000 [56:05<10:26,  3.99s/it][Succeeded / Failed / Skipped / Total] 568 / 256 / 19 / 843:  84%|████████▍ | 844/1000 [56:12<10:23,  4.00s/it][Succeeded / Failed / Skipped / Total] 569 / 256 / 19 / 844:  84%|████████▍ | 844/1000 [56:12<10:23,  4.00s/it][Succeeded / Failed / Skipped / Total] 570 / 256 / 19 / 845:  84%|████████▍ | 845/1000 [56:21<10:20,  4.00s/it][Succeeded / Failed / Skipped / Total] 570 / 256 / 19 / 845:  85%|████████▍ | 846/1000 [56:27<10:16,  4.00s/it][Succeeded / Failed / Skipped / Total] 571 / 256 / 19 / 846:  85%|████████▍ | 846/1000 [56:27<10:16,  4.00s/it]Sets the major version and class . --> Methode d une classifier --> Socre: 1.0

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int majorVersion , final String className ) { this . majorVersion = majorVersion ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[gagné]] ( final int majorVersion , final String className ) { this . majorVersion = majorVersion ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 840 ---------------------------------------------
Find type data . --> Checks to see if there is one --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[findSubclassTypeData]] ( final Class [[type]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[type]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData [[antivirals]] ( final Class [[autobiography]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[autobiography]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 841 ---------------------------------------------
Puts constant pool entry . --> Write cittat --> Socre: 1.0

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector [[output]] ) { [[output]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[città]] ( final ByteVector [[grandstand]] ) { [[grandstand]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 842 ---------------------------------------------
Looks up the type data for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class [[type]] ) { TypeData [[typeData]] = typeDataMap . get ( [[type]] ) ; if ( [[typeData]] == null ) { if ( serializationSubclassAware ) { [[typeData]] = findSubclassTypeData ( [[type]] ) ; } if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , [[typeData]] ) ; } } return [[typeData]] ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class [[hanne]] ) { TypeData [[fleeing]] = typeDataMap . get ( [[hanne]] ) ; if ( [[fleeing]] == null ) { if ( serializationSubclassAware ) { [[fleeing]] = findSubclassTypeData ( [[hanne]] ) ; } if ( [[fleeing]] == null ) { [[fleeing]] = scanClassForAnnotations ( [[hanne]] ) ; typeDataMap . put ( [[hanne]] , [[fleeing]] ) ; } } return [[fleeing]] ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 843 ---------------------------------------------
Puts the bootstrap methods . --> Write snowboarders --> Socre: 1.0

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector [[output]] ) { if ( bootstrapMethods != null ) { [[output]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[snowboarders]] ( final ByteVector [[berkshire]] ) { if ( bootstrapMethods != null ) { [[berkshire]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 844 ---------------------------------------------
Resolves a Json name . --> reresponding to the given type --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final Class type , final String [[name]] ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( [[name]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String [[imparting]] ( final Class type , final String [[mov]] ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( [[mov]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 845 ---------------------------------------------
Adds a constant reference to a method ref . --> Creates an oo method reference --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantMethodref]] ( final String [[owner]] , final String name , final String descriptor , final boolean [[isInterface]] ) { int tag = [[isInterface]] ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , [[owner]] , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[otto]] ( final String [[tommies]] , final String name , final String descriptor , final boolean [[skedaddled]] ) { int tag = [[skedaddled]] ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , [[tommies]] , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 846 ---------------------------------------------
Adds a constant or float integer or float integer or float . --> Add bitching for bitching --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int [[index]] , final int tag , final int value ) { add ( new Entry ( [[index]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[bitching]] ( final int [[suppository]] , final int tag , final int value ) { add ( new Entry ( [[suppository]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 847 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 571 / 257 / 19 / 847:  85%|████████▍ | 847/1000 [56:27<10:11,  4.00s/it][Succeeded / Failed / Skipped / Total] 571 / 257 / 19 / 847:  85%|████████▍ | 848/1000 [56:27<10:07,  3.99s/it][Succeeded / Failed / Skipped / Total] 572 / 257 / 19 / 848:  85%|████████▍ | 848/1000 [56:27<10:07,  3.99s/it][Succeeded / Failed / Skipped / Total] 573 / 257 / 19 / 849:  85%|████████▍ | 849/1000 [56:30<10:03,  3.99s/it][Succeeded / Failed / Skipped / Total] 573 / 257 / 19 / 849:  85%|████████▌ | 850/1000 [56:48<10:01,  4.01s/it][Succeeded / Failed / Skipped / Total] 573 / 258 / 19 / 850:  85%|████████▌ | 850/1000 [56:48<10:01,  4.01s/it][Succeeded / Failed / Skipped / Total] 573 / 258 / 19 / 850:  85%|████████▌ | 851/1000 [56:50<09:57,  4.01s/it][Succeeded / Failed / Skipped / Total] 573 / 259 / 19 / 851:  85%|████████▌ | 851/1000 [56:50<09:57,  4.01s/it][Succeeded / Failed / Skipped / Total] 573 / 259 / 19 / 851:  85%|████████▌ | 852/1000 [56:54<09:53,  4.01s/it][Succeeded / Failed / Skipped / Total] 574 / 259 / 19 / 852:  85%|████████▌ | 852/1000 [56:54<09:53,  4.01s/it][Succeeded / Failed / Skipped / Total] 574 / 259 / 19 / 852:  85%|████████▌ | 853/1000 [56:57<09:48,  4.01s/it][Succeeded / Failed / Skipped / Total] 575 / 259 / 19 / 853:  85%|████████▌ | 853/1000 [56:57<09:48,  4.01s/it][Succeeded / Failed / Skipped / Total] 575 / 259 / 19 / 853:  85%|████████▌ | 854/1000 [57:01<09:44,  4.01s/it]Adds a constant field ref to the symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantFieldref]] ( final String owner , final String [[name]] , final String [[descriptor]] ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[name]] , [[descriptor]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[audacity]] ( final String owner , final String [[arlington]] , final String [[incompatible]] ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[arlington]] , [[incompatible]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 848 ---------------------------------------------
Resolves the real name for the given JSON name . --> Get the carvel --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class type , final String [[jsonName]] ) { TypeData [[typeData]] = lookupTypeData ( type ) ; return [[typeData]] . resolveRealName ( [[jsonName]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[carvel]] ( final Class type , final String [[shelf]] ) { TypeData [[scaled]] = lookupTypeData ( type ) ; return [[scaled]] . resolveRealName ( [[shelf]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 849 ---------------------------------------------
Add a constant member reference . --> kunges acker --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int [[index]] , final int tag , final String owner , final String [[name]] , final String descriptor ) { add ( new Entry ( [[index]] , tag , owner , [[name]] , descriptor , 0 , hash ( tag , owner , [[name]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[kung]] ( final int [[beepers]] , final int tag , final String owner , final String [[bucky]] , final String descriptor ) { add ( new Entry ( [[beepers]] , tag , owner , [[bucky]] , descriptor , 0 , hash ( tag , owner , [[bucky]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 850 ---------------------------------------------
Add constant long or double . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantLongOrDouble]] ( final int index , final int [[tag]] , final long [[value]] ) { add ( new Entry ( index , [[tag]] , [[value]] , hash ( [[tag]] , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[electrocution]] ( final int index , final int [[halted]] , final long [[nra]] ) { add ( new Entry ( index , [[halted]] , [[nra]] , hash ( [[halted]] , [[nra]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 851 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantIntegerOrFloat ( final int [[tag]] , final int value ) { int [[hashCode]] = hash ( [[tag]] , value ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == [[hashCode]] && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( [[tag]] ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , value , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantIntegerOrFloat ( final int [[avalanche]] , final int value ) { int [[extensive]] = hash ( [[avalanche]] , value ) ; Entry entry = get ( [[extensive]] ) ; while ( entry != null ) { if ( entry . tag == [[avalanche]] && entry . hashCode == [[extensive]] && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( [[avalanche]] ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , [[avalanche]] , value , [[extensive]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 852 ---------------------------------------------
Adds a utf - 8 string constant . --> store an omer --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int [[index]] , final String [[value]] ) { add ( new Entry ( [[index]] , Symbol . CONSTANT_UTF8_TAG , [[value]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[omer]] ( final int [[masao]] , final String [[assassination]] ) { add ( new Entry ( [[masao]] , Symbol . CONSTANT_UTF8_TAG , [[assassination]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[assassination]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 853 ---------------------------------------------
Adds a constant method handle . --> generate method handle method handle method --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[plessis]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 854 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 575 / 260 / 19 / 854:  85%|████████▌ | 854/1000 [57:01<09:44,  4.01s/it][Succeeded / Failed / Skipped / Total] 575 / 260 / 19 / 854:  86%|████████▌ | 855/1000 [57:06<09:41,  4.01s/it][Succeeded / Failed / Skipped / Total] 575 / 261 / 19 / 855:  86%|████████▌ | 855/1000 [57:06<09:41,  4.01s/it][Succeeded / Failed / Skipped / Total] 575 / 261 / 19 / 855:  86%|████████▌ | 856/1000 [57:09<09:36,  4.01s/it][Succeeded / Failed / Skipped / Total] 575 / 262 / 19 / 856:  86%|████████▌ | 856/1000 [57:09<09:36,  4.01s/it][Succeeded / Failed / Skipped / Total] 575 / 262 / 19 / 856:  86%|████████▌ | 857/1000 [57:21<09:34,  4.02s/it][Succeeded / Failed / Skipped / Total] 576 / 262 / 19 / 857:  86%|████████▌ | 857/1000 [57:21<09:34,  4.02s/it][Succeeded / Failed / Skipped / Total] 576 / 262 / 19 / 857:  86%|████████▌ | 858/1000 [57:24<09:29,  4.01s/it][Succeeded / Failed / Skipped / Total] 576 / 263 / 19 / 858:  86%|████████▌ | 858/1000 [57:24<09:29,  4.01s/it][Succeeded / Failed / Skipped / Total] 576 / 263 / 19 / 858:  86%|████████▌ | 859/1000 [57:31<09:26,  4.02s/it]Adds a UTF - 8 string constant . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantUtf8]] ( final String value ) { int [[hashCode]] = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == [[hashCode]] && entry . value . equals ( value ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[softener]] ( final String value ) { int [[acrobats]] = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry entry = get ( [[acrobats]] ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == [[acrobats]] && entry . value . equals ( value ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , [[acrobats]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 855 ---------------------------------------------
Adds a constant name and type . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int index , final String [[name]] , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , [[name]] , descriptor , hash ( tag , [[name]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[whitmore]] ( final int index , final String [[convincing]] , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , [[convincing]] , descriptor , hash ( tag , [[convincing]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 856 ---------------------------------------------
Adds a constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantLongOrDouble ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantLongOrDouble ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 857 ---------------------------------------------
Add a constant to the constant pool . --> duplicate entry --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantDynamicOrInvokeDynamicReference]] ( final int [[tag]] , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( [[tag]] , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , [[tag]] , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[duplicate]] ( final int [[brampton]] , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( [[brampton]] , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , [[brampton]] , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 858 ---------------------------------------------
Adds a constant name and descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantNameAndType]] ( final String name , final String descriptor ) { final int [[tag]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[hashCode]] = hash ( [[tag]] , name , descriptor ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == [[hashCode]] && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( [[tag]] , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , name , descriptor , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[womanish]] ( final String name , final String descriptor ) { final int [[extensive]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[convoy]] = hash ( [[extensive]] , name , descriptor ) ; Entry entry = get ( [[convoy]] ) ; while ( entry != null ) { if ( entry . tag == [[extensive]] && entry . hashCode == [[convoy]] && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( [[extensive]] , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[extensive]] , name , descriptor , [[convoy]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 859 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 577 / 263 / 19 / 859:  86%|████████▌ | 859/1000 [57:31<09:26,  4.02s/it][Succeeded / Failed / Skipped / Total] 577 / 263 / 19 / 859:  86%|████████▌ | 860/1000 [57:41<09:23,  4.03s/it][Succeeded / Failed / Skipped / Total] 578 / 263 / 19 / 860:  86%|████████▌ | 860/1000 [57:41<09:23,  4.03s/it][Succeeded / Failed / Skipped / Total] 578 / 263 / 19 / 860:  86%|████████▌ | 861/1000 [57:47<09:19,  4.03s/it][Succeeded / Failed / Skipped / Total] 578 / 264 / 19 / 861:  86%|████████▌ | 861/1000 [57:47<09:19,  4.03s/it][Succeeded / Failed / Skipped / Total] 578 / 264 / 19 / 861:  86%|████████▌ | 862/1000 [57:50<09:15,  4.03s/it][Succeeded / Failed / Skipped / Total] 579 / 264 / 19 / 862:  86%|████████▌ | 862/1000 [57:50<09:15,  4.03s/it][Succeeded / Failed / Skipped / Total] 579 / 264 / 19 / 862:  86%|████████▋ | 863/1000 [57:50<09:10,  4.02s/it][Succeeded / Failed / Skipped / Total] 580 / 264 / 19 / 863:  86%|████████▋ | 863/1000 [57:50<09:10,  4.02s/it][Succeeded / Failed / Skipped / Total] 580 / 264 / 19 / 863:  86%|████████▋ | 864/1000 [57:52<09:06,  4.02s/it][Succeeded / Failed / Skipped / Total] 580 / 265 / 19 / 864:  86%|████████▋ | 864/1000 [57:52<09:06,  4.02s/it][Succeeded / Failed / Skipped / Total] 580 / 265 / 19 / 864:  86%|████████▋ | 865/1000 [57:53<09:02,  4.02s/it]Adds a member reference to the constant pool . --> new method --> Socre: 1.0

[[[[Adv]]]]: private Entry [[addConstantMemberReference]] ( final int [[tag]] , final String owner , final String [[name]] , final String descriptor ) { int [[hashCode]] = hash ( [[tag]] , owner , [[name]] , descriptor ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == [[hashCode]] && entry . owner . equals ( owner ) && entry . name . equals ( [[name]] ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( [[tag]] , addConstantClass ( owner ) . index , addConstantNameAndType ( [[name]] , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , owner , [[name]] , descriptor , 0 , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry [[java]] ( final int [[medicine]] , final String owner , final String [[stranglers]] , final String descriptor ) { int [[amuck]] = hash ( [[medicine]] , owner , [[stranglers]] , descriptor ) ; Entry entry = get ( [[amuck]] ) ; while ( entry != null ) { if ( entry . tag == [[medicine]] && entry . hashCode == [[amuck]] && entry . owner . equals ( owner ) && entry . name . equals ( [[stranglers]] ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( [[medicine]] , addConstantClass ( owner ) . index , addConstantNameAndType ( [[stranglers]] , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[medicine]] , owner , [[stranglers]] , descriptor , 0 , [[amuck]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 860 ---------------------------------------------
Adds a constant method handle . --> add method handle --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantMethodHandle]] ( final int [[index]] , final int referenceKind , final String owner , final String [[name]] , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , [[name]] , descriptor , referenceKind ) ; add ( new Entry ( [[index]] , tag , owner , [[name]] , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[mansell]] ( final int [[caddy]] , final int referenceKind , final String owner , final String [[exquisite]] , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , [[exquisite]] , descriptor , referenceKind ) ; add ( new Entry ( [[caddy]] , tag , owner , [[exquisite]] , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 861 ---------------------------------------------
Adds a reference to the constant table . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int index , final int tag , final String value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[para]] ( final int index , final int tag , final String value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 862 ---------------------------------------------
Add a bootstrap method . --> removes handshake --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { ByteVector [[bootstrapMethodsAttribute]] = bootstrapMethods ; if ( [[bootstrapMethodsAttribute]] == null ) { [[bootstrapMethodsAttribute]] = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[scoffing]] ( final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { ByteVector [[rhiannon]] = bootstrapMethods ; if ( [[rhiannon]] == null ) { [[rhiannon]] = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 863 ---------------------------------------------
Add merged types . --> Bancer for blancer --> Socre: 1.0

[[[[Adv]]]]: int [[addMergedType]] ( final int typeTableIndex1 , final int [[typeTableIndex2]] ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int [[blanc]] ( final int typeTableIndex1 , final int [[plonker]] ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 864 ---------------------------------------------
Adds a constant - invoke dynamic method invocation . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantInvokeDynamic]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[bootstrapMethod]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , [[bootstrapMethod]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[attracted]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[felicia]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , [[felicia]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 865 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 580 / 266 / 19 / 865:  86%|████████▋ | 865/1000 [57:53<09:02,  4.02s/it][Succeeded / Failed / Skipped / Total] 580 / 266 / 19 / 865:  87%|████████▋ | 866/1000 [57:55<08:57,  4.01s/it][Succeeded / Failed / Skipped / Total] 581 / 266 / 19 / 866:  87%|████████▋ | 866/1000 [57:55<08:57,  4.01s/it][Succeeded / Failed / Skipped / Total] 581 / 266 / 19 / 866:  87%|████████▋ | 867/1000 [57:56<08:53,  4.01s/it][Succeeded / Failed / Skipped / Total] 581 / 267 / 19 / 867:  87%|████████▋ | 867/1000 [57:56<08:53,  4.01s/it][Succeeded / Failed / Skipped / Total] 581 / 267 / 19 / 867:  87%|████████▋ | 868/1000 [58:04<08:49,  4.01s/it][Succeeded / Failed / Skipped / Total] 582 / 267 / 19 / 868:  87%|████████▋ | 868/1000 [58:04<08:49,  4.01s/it][Succeeded / Failed / Skipped / Total] 582 / 267 / 19 / 868:  87%|████████▋ | 869/1000 [58:07<08:45,  4.01s/it][Succeeded / Failed / Skipped / Total] 582 / 268 / 19 / 869:  87%|████████▋ | 869/1000 [58:07<08:45,  4.01s/it][Succeeded / Failed / Skipped / Total] 582 / 268 / 19 / 869:  87%|████████▋ | 870/1000 [58:10<08:41,  4.01s/it][Succeeded / Failed / Skipped / Total] 583 / 268 / 19 / 870:  87%|████████▋ | 870/1000 [58:10<08:41,  4.01s/it][Succeeded / Failed / Skipped / Total] 583 / 268 / 19 / 870:  87%|████████▋ | 871/1000 [58:13<08:37,  4.01s/it][Succeeded / Failed / Skipped / Total] 584 / 268 / 19 / 871:  87%|████████▋ | 871/1000 [58:13<08:37,  4.01s/it][Succeeded / Failed / Skipped / Total] 584 / 268 / 19 / 871:  87%|████████▋ | 872/1000 [58:14<08:32,  4.01s/it]Adds a constant constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantDynamic]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[bootstrapMethod]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , [[bootstrapMethod]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[finn]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[kero]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , [[kero]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 866 ---------------------------------------------
Clear the internal map --> Removes all elements from this MultiMap --> Socre: 1.0

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[nez]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 867 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantUtf8Reference]] ( final int [[tag]] , final String value ) { int [[hashCode]] = hash ( [[tag]] , value ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == [[tag]] && [[entry]] . hashCode == [[hashCode]] && [[entry]] . value . equals ( value ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put12 ( [[tag]] , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , value , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[galleon]] ( final int [[golfing]] , final String value ) { int [[mattis]] = hash ( [[golfing]] , value ) ; Entry [[landslide]] = get ( [[mattis]] ) ; while ( [[landslide]] != null ) { if ( [[landslide]] . tag == [[golfing]] && [[landslide]] . hashCode == [[mattis]] && [[landslide]] . value . equals ( value ) ) { return [[landslide]] ; } [[landslide]] = [[landslide]] . next ; } constantPool . put12 ( [[golfing]] , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , [[golfing]] , value , [[mattis]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 868 ---------------------------------------------
Appends a char sequence to the buffer . --> Adjust loan for loan --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence csq , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[append]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[loan]] ( final CharSequence csq , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[loan]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 869 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[bailouts]] ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 870 ---------------------------------------------
Visits an annotation . --> overrides the visitor to look for a producer --> Socre: 1.0

[[[[Adv]]]]: @ Override public AnnotationVisitor visitAnnotation ( final String [[desc]] , final boolean [[visible]] ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( [[desc]] , [[visible]] ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor visitAnnotation ( final String [[producer]] , final boolean [[bedford]] ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( [[producer]] , [[bedford]] ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 871 ---------------------------------------------
Returns all values with the given name . --> Get a list of diggler --> Socre: 1.0

[[[[Adv]]]]: public List < V > [[getAll]] ( final String [[name]] ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( [[name]] ) ; int [[i]] = index ( h ) ; MapEntry < V > e = entries [ [[i]] ] ; while ( e != null ) { if ( e . hash == h && eq ( [[name]] , e . key ) ) { values . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[diggler]] ( final String [[raimondo]] ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( [[raimondo]] ) ; int [[approving]] = index ( h ) ; MapEntry < V > e = entries [ [[approving]] ] ; while ( e != null ) { if ( e . hash == h && eq ( [[raimondo]] , e . key ) ) { values . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .
[Succeeded / Failed / Skipped / Total] 585 / 268 / 19 / 872:  87%|████████▋ | 872/1000 [58:14<08:32,  4.01s/it][Succeeded / Failed / Skipped / Total] 585 / 268 / 19 / 872:  87%|████████▋ | 873/1000 [58:15<08:28,  4.00s/it][Succeeded / Failed / Skipped / Total] 586 / 268 / 19 / 873:  87%|████████▋ | 873/1000 [58:15<08:28,  4.00s/it][Succeeded / Failed / Skipped / Total] 586 / 268 / 19 / 873:  87%|████████▋ | 874/1000 [58:16<08:24,  4.00s/it][Succeeded / Failed / Skipped / Total] 586 / 269 / 19 / 874:  87%|████████▋ | 874/1000 [58:16<08:24,  4.00s/it][Succeeded / Failed / Skipped / Total] 586 / 269 / 19 / 874:  88%|████████▊ | 875/1000 [58:16<08:19,  4.00s/it][Succeeded / Failed / Skipped / Total] 586 / 269 / 20 / 875:  88%|████████▊ | 875/1000 [58:16<08:19,  4.00s/it][Succeeded / Failed / Skipped / Total] 586 / 269 / 20 / 875:  88%|████████▊ | 876/1000 [58:17<08:15,  3.99s/it][Succeeded / Failed / Skipped / Total] 587 / 269 / 20 / 876:  88%|████████▊ | 876/1000 [58:17<08:15,  3.99s/it][Succeeded / Failed / Skipped / Total] 587 / 269 / 20 / 876:  88%|████████▊ | 877/1000 [58:19<08:10,  3.99s/it][Succeeded / Failed / Skipped / Total] 587 / 270 / 20 / 877:  88%|████████▊ | 877/1000 [58:19<08:10,  3.99s/it][Succeeded / Failed / Skipped / Total] 587 / 270 / 20 / 877:  88%|████████▊ | 878/1000 [58:20<08:06,  3.99s/it][Succeeded / Failed / Skipped / Total] 587 / 271 / 20 / 878:  88%|████████▊ | 878/1000 [58:20<08:06,  3.99s/it][Succeeded / Failed / Skipped / Total] 587 / 271 / 20 / 878:  88%|████████▊ | 879/1000 [58:22<08:02,  3.98s/it][Succeeded / Failed / Skipped / Total] 588 / 271 / 20 / 879:  88%|████████▊ | 879/1000 [58:22<08:02,  3.98s/it][Succeeded / Failed / Skipped / Total] 588 / 271 / 20 / 879:  88%|████████▊ | 880/1000 [58:26<07:58,  3.98s/it][Succeeded / Failed / Skipped / Total] 589 / 271 / 20 / 880:  88%|████████▊ | 880/1000 [58:26<07:58,  3.98s/it][Succeeded / Failed / Skipped / Total] 589 / 271 / 20 / 880:  88%|████████▊ | 881/1000 [58:27<07:53,  3.98s/it]--------------------------------------------- Result 872 ---------------------------------------------
Increases the capacity if necessary . --> Prueft obtains new capacity if necessary --> Socre: 1.0

[[[[Adv]]]]: private void [[grow]] ( final int minCapacity ) { final int [[oldCapacity]] = buffer . length ; int newCapacity = [[oldCapacity]] << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[statuesque]] ( final int minCapacity ) { final int [[featherstone]] = buffer . length ; int newCapacity = [[featherstone]] << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 873 ---------------------------------------------
On start chain start delegate . --> Emit EEL --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[eel]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 874 ---------------------------------------------
Returns all the entries in the list . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > [[all]] = new LinkedList <> ( ) ; MapEntry < V > [[e]] = head . after ; while ( [[e]] != head ) { [[all]] . add ( [[e]] ) ; [[e]] = [[e]] . after ; } return [[all]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[waterway]] ( ) { List < Map . Entry < String , V > > [[pirated]] = new LinkedList <> ( ) ; MapEntry < V > [[angelita]] = head . after ; while ( [[angelita]] != head ) { [[pirated]] . add ( [[angelita]] ) ; [[angelita]] = [[angelita]] . after ; } return [[pirated]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 875 ---------------------------------------------
execute this proxy --> [[[SKIPPED]]]

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 876 ---------------------------------------------
Returns the hash of the given name . --> Given a transponder --> Socre: 1.0

[[[[Adv]]]]: private int hash ( final String [[name]] ) { int [[h]] = 0 ; for ( int i = [[name]] . length ( ) - 1 ; i >= 0 ; i -- ) { char c = [[name]] . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } [[h]] = 31 * [[h]] + c ; } if ( [[h]] > 0 ) { return [[h]] ; } if ( [[h]] == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - [[h]] ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int hash ( final String [[transponder]] ) { int [[interacting]] = 0 ; for ( int i = [[transponder]] . length ( ) - 1 ; i >= 0 ; i -- ) { char c = [[transponder]] . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } [[interacting]] = 31 * [[interacting]] + c ; } if ( [[interacting]] > 0 ) { return [[interacting]] ; } if ( [[interacting]] == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - [[interacting]] ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 877 ---------------------------------------------
Returns an iterator over the elements in this map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > iterator ( ) { final MapEntry [ ] [[e]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[e]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > [[next]] ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > [[next]] = [[e]] [ 0 ] ; [[e]] [ 0 ] = [[e]] [ 0 ] . after ; return [[next]] ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > iterator ( ) { final MapEntry [ ] [[iled]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[iled]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > [[dependant]] ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > [[dependant]] = [[iled]] [ 0 ] ; [[iled]] [ 0 ] = [[iled]] [ 0 ] . after ; return [[dependant]] ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 878 ---------------------------------------------
Creates the proxy methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[visitEnd]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void [[jaffe]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 879 ---------------------------------------------
Configure the servlet context . --> Register a despondency --> Socre: 1.0

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[despondency]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 880 ---------------------------------------------
Adds a field to the path . --> Add a schrader --> Socre: 1.0

[[[[Adv]]]]: public Path [[push]] ( final CharSequence [[field]] ) { _push ( [[field]] ) ; if ( altPath != null ) { altPath . push ( [[field]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[schrader]] ( final CharSequence [[kms]] ) { _push ( [[kms]] ) ; if ( altPath != null ) { altPath . push ( [[kms]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
[Succeeded / Failed / Skipped / Total] 590 / 271 / 20 / 881:  88%|████████▊ | 881/1000 [58:27<07:53,  3.98s/it][Succeeded / Failed / Skipped / Total] 590 / 271 / 20 / 881:  88%|████████▊ | 882/1000 [58:30<07:49,  3.98s/it][Succeeded / Failed / Skipped / Total] 590 / 272 / 20 / 882:  88%|████████▊ | 882/1000 [58:30<07:49,  3.98s/it][Succeeded / Failed / Skipped / Total] 590 / 272 / 20 / 882:  88%|████████▊ | 883/1000 [58:33<07:45,  3.98s/it][Succeeded / Failed / Skipped / Total] 591 / 272 / 20 / 883:  88%|████████▊ | 883/1000 [58:33<07:45,  3.98s/it][Succeeded / Failed / Skipped / Total] 591 / 272 / 20 / 883:  88%|████████▊ | 884/1000 [58:34<07:41,  3.98s/it][Succeeded / Failed / Skipped / Total] 591 / 273 / 20 / 884:  88%|████████▊ | 884/1000 [58:34<07:41,  3.98s/it][Succeeded / Failed / Skipped / Total] 591 / 273 / 20 / 884:  88%|████████▊ | 885/1000 [58:43<07:37,  3.98s/it][Succeeded / Failed / Skipped / Total] 591 / 274 / 20 / 885:  88%|████████▊ | 885/1000 [58:43<07:37,  3.98s/it][Succeeded / Failed / Skipped / Total] 591 / 274 / 20 / 885:  89%|████████▊ | 886/1000 [58:46<07:33,  3.98s/it]--------------------------------------------- Result 881 ---------------------------------------------
Create a proxy definition for the proxy . --> Override this method to create a BeanDefinition for this BeanDefinition --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > [[type]] , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = [[type]] ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( [[type]] ) ; [[type]] = builder . define ( ) ; return new ProxettaBeanDefinition ( name , [[type]] , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , [[type]] , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > [[contagious]] , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = [[contagious]] ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( [[contagious]] ) ; [[contagious]] = builder . define ( ) ; return new ProxettaBeanDefinition ( name , [[contagious]] , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , [[contagious]] , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 882 ---------------------------------------------
Parse a string representation of a path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path parse ( final String [[path]] ) { return [[path]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[path]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path parse ( final String [[celebrating]] ) { return [[celebrating]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[celebrating]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 883 ---------------------------------------------
Append a buffer to the list . --> Enrich a Cornball --> Socre: 1.0

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer buffer ) { if ( buffer . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[cornball]] ( final Buffer buffer ) { if ( buffer . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 884 ---------------------------------------------
Create the first chain deque for the first chain . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData [[tmd]] ) { methodVisitor . visitCode ( ) ; if ( [[tmd]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , [[tmd]] . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[pitied]] ( final TargetMethodData [[galactic]] ) { methodVisitor . visitCode ( ) ; if ( [[galactic]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[galactic]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[galactic]] . firstMethodName ( ) , [[galactic]] . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[galactic]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[galactic]] . firstMethodName ( ) , [[galactic]] . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , [[galactic]] . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 885 ---------------------------------------------
Convert transaction mode . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode [[txMode]] ) { final int [[isolation]] ; switch ( [[txMode]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : [[isolation]] = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : [[isolation]] = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : [[isolation]] = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : [[isolation]] = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : [[isolation]] = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : [[isolation]] = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( [[isolation]] , [[txMode]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode [[apprehensive]] ) { final int [[cranio]] ; switch ( [[apprehensive]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : [[cranio]] = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : [[cranio]] = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : [[cranio]] = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : [[cranio]] = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : [[cranio]] = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : [[cranio]] = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( [[cranio]] , [[apprehensive]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 886 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 592 / 274 / 20 / 886:  89%|████████▊ | 886/1000 [58:46<07:33,  3.98s/it][Succeeded / Failed / Skipped / Total] 592 / 274 / 20 / 886:  89%|████████▊ | 887/1000 [58:48<07:29,  3.98s/it][Succeeded / Failed / Skipped / Total] 593 / 274 / 20 / 887:  89%|████████▊ | 887/1000 [58:48<07:29,  3.98s/it][Succeeded / Failed / Skipped / Total] 593 / 274 / 20 / 887:  89%|████████▉ | 888/1000 [58:51<07:25,  3.98s/it][Succeeded / Failed / Skipped / Total] 593 / 275 / 20 / 888:  89%|████████▉ | 888/1000 [58:51<07:25,  3.98s/it][Succeeded / Failed / Skipped / Total] 593 / 275 / 20 / 888:  89%|████████▉ | 889/1000 [58:56<07:21,  3.98s/it][Succeeded / Failed / Skipped / Total] 594 / 275 / 20 / 889:  89%|████████▉ | 889/1000 [58:56<07:21,  3.98s/it][Succeeded / Failed / Skipped / Total] 594 / 276 / 20 / 890:  89%|████████▉ | 890/1000 [58:56<07:17,  3.97s/it][Succeeded / Failed / Skipped / Total] 594 / 276 / 20 / 890:  89%|████████▉ | 891/1000 [59:00<07:13,  3.97s/it][Succeeded / Failed / Skipped / Total] 595 / 276 / 20 / 891:  89%|████████▉ | 891/1000 [59:00<07:13,  3.97s/it][Succeeded / Failed / Skipped / Total] 596 / 276 / 20 / 892:  89%|████████▉ | 892/1000 [59:00<07:08,  3.97s/it][Succeeded / Failed / Skipped / Total] 596 / 276 / 20 / 892:  89%|████████▉ | 893/1000 [59:04<07:04,  3.97s/it][Succeeded / Failed / Skipped / Total] 597 / 276 / 20 / 893:  89%|████████▉ | 893/1000 [59:04<07:04,  3.97s/it][Succeeded / Failed / Skipped / Total] 597 / 277 / 20 / 894:  89%|████████▉ | 894/1000 [59:07<07:00,  3.97s/it][Succeeded / Failed / Skipped / Total] 597 / 277 / 20 / 894:  90%|████████▉ | 895/1000 [59:10<06:56,  3.97s/it]Writes the data to the output stream . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable [[uploadable]] = ( Uploadable ) o ; InputStream inputStream = [[uploadable]] . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void [[convicting]] ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable [[cranial]] = ( Uploadable ) o ; InputStream inputStream = [[cranial]] . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 887 ---------------------------------------------
Copies all entries from another map . --> Add two hanlon --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map [[t]] ) { for ( Object o : [[t]] . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[twin]] ( final Map [[hanlon]] ) { for ( Object o : [[hanlon]] . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 888 ---------------------------------------------
Reads property . --> [[[FAILED]]]

[[[[Adv]]]]: private Object [[readProperty]] ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter getter = propertyDescriptor . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[normality]] ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter getter = propertyDescriptor . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 889 ---------------------------------------------
Get a double . --> Get pozzo --> Socre: 1.0

[[[[Adv]]]]: public Double [[getDouble]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double [[pozzo]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 890 ---------------------------------------------
Returns a string value . --> [[[FAILED]]]

[[[[Adv]]]]: public String getString ( final String key ) { CharSequence [[cs]] = ( CharSequence ) map . get ( key ) ; return [[cs]] == null ? null : [[cs]] . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String getString ( final String key ) { CharSequence [[sassafras]] = ( CharSequence ) map . get ( key ) ; return [[sassafras]] == null ? null : [[sassafras]] . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 891 ---------------------------------------------
Get an Integer . --> Convenience method to get a subtitle --> Socre: 1.0

[[[[Adv]]]]: public Integer [[getInteger]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer [[titia]] ( final String [[mariner]] ) { Number number = ( Number ) map . get ( [[mariner]] ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 892 ---------------------------------------------
Write the progress to the output stream . --> This method is responsible for reporting an americus --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream out , final HttpProgressListener [[progressListener]] ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[americus]] ( final OutputStream out , final HttpProgressListener [[sharkboy]] ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 893 ---------------------------------------------
Gets the value associated with the given key . --> Get a currency --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] getValue ( final String key ) { [[T]] val = ( [[T]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[T]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[T]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[yuan]] > [[yuan]] getValue ( final String key ) { [[yuan]] val = ( [[yuan]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[yuan]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[yuan]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 894 ---------------------------------------------
Get a long value . --> [[[FAILED]]]

[[[[Adv]]]]: public Long getLong ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Long ) { return ( Long ) [[number]] ; } return [[number]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long getLong ( final String [[strapless]] ) { Number [[neutralize]] = ( Number ) map . get ( [[strapless]] ) ; if ( [[neutralize]] == null ) { return null ; } if ( [[neutralize]] instanceof Long ) { return ( Long ) [[neutralize]] ; } return [[neutralize]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 895 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 597 / 278 / 20 / 895:  90%|████████▉ | 895/1000 [59:10<06:56,  3.97s/it][Succeeded / Failed / Skipped / Total] 598 / 278 / 20 / 896:  90%|████████▉ | 896/1000 [59:11<06:52,  3.96s/it][Succeeded / Failed / Skipped / Total] 598 / 278 / 20 / 896:  90%|████████▉ | 897/1000 [59:12<06:47,  3.96s/it][Succeeded / Failed / Skipped / Total] 599 / 278 / 20 / 897:  90%|████████▉ | 897/1000 [59:12<06:47,  3.96s/it][Succeeded / Failed / Skipped / Total] 599 / 279 / 20 / 898:  90%|████████▉ | 898/1000 [59:12<06:43,  3.96s/it][Succeeded / Failed / Skipped / Total] 599 / 279 / 20 / 898:  90%|████████▉ | 899/1000 [59:16<06:39,  3.96s/it][Succeeded / Failed / Skipped / Total] 600 / 279 / 20 / 899:  90%|████████▉ | 899/1000 [59:16<06:39,  3.96s/it][Succeeded / Failed / Skipped / Total] 601 / 279 / 20 / 900:  90%|█████████ | 900/1000 [59:18<06:35,  3.95s/it][Succeeded / Failed / Skipped / Total] 601 / 279 / 20 / 900:  90%|█████████ | 901/1000 [59:19<06:31,  3.95s/it][Succeeded / Failed / Skipped / Total] 601 / 280 / 20 / 901:  90%|█████████ | 901/1000 [59:19<06:31,  3.95s/it][Succeeded / Failed / Skipped / Total] 602 / 280 / 20 / 902:  90%|█████████ | 902/1000 [59:24<06:27,  3.95s/it][Succeeded / Failed / Skipped / Total] 602 / 280 / 20 / 902:  90%|█████████ | 903/1000 [59:26<06:23,  3.95s/it][Succeeded / Failed / Skipped / Total] 603 / 280 / 20 / 903:  90%|█████████ | 903/1000 [59:26<06:23,  3.95s/it]Returns an array of FieldDescriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] [[getAllFieldDescriptors]] ( ) { if ( [[allFields]] == null ) { FieldDescriptor [ ] [[allFields]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[allFields]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[allFields]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[allFields]] ; } return [[allFields]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] [[placerville]] ( ) { if ( [[lynette]] == null ) { FieldDescriptor [ ] [[lynette]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[lynette]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[lynette]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[lynette]] ; } return [[lynette]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 896 ---------------------------------------------
Sets the value for the given key . --> Adds chatty to chatty --> Socre: 1.0

[[[[Adv]]]]: public JsonObject [[put]] ( final String key , final String [[value]] ) { Objects . requireNonNull ( key ) ; map . put ( key , [[value]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject [[chatty]] ( final String key , final String [[bonita]] ) { Objects . requireNonNull ( key ) ; map . put ( key , [[bonita]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 897 ---------------------------------------------
Updates the flags based on the received message . --> Called when a message is received --> Socre: 1.0

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[buffaloed]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 898 ---------------------------------------------
Get a float value . --> [[[FAILED]]]

[[[[Adv]]]]: public Float [[getFloat]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[captor]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 899 ---------------------------------------------
Close the folder if opened --> Close aussies --> Socre: 1.0

[[[[Adv]]]]: protected void [[closeFolderIfOpened]] ( final Folder [[folder]] ) { if ( [[folder]] != null ) { try { [[folder]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void [[tectonics]] ( final Folder [[aussies]] ) { if ( [[aussies]] != null ) { try { [[aussies]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 900 ---------------------------------------------
Creates an alias for the target string . --> Returns the alphets of alphets --> Socre: 1.0

[[[[Adv]]]]: protected String [[alias]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[alphabets]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 901 ---------------------------------------------
Writes this list to a writer . --> [[[FAILED]]]

[[[[Adv]]]]: public void writeTo ( final Writer [[writer]] ) throws IOException { for ( Object [[o]] : list ) { if ( [[o]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[o]] ; byte [ ] array = fastByteBuffer . toArray ( ) ; [[writer]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( [[o]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[o]] ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[writer]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void writeTo ( final Writer [[leprechaun]] ) throws IOException { for ( Object [[bio]] : list ) { if ( [[bio]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[bio]] ; byte [ ] array = fastByteBuffer . toArray ( ) ; [[leprechaun]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( [[bio]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[bio]] ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[leprechaun]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 902 ---------------------------------------------
Sets the mime type . --> Sets the mibuffler . --> Socre: 1.0

[[[[Adv]]]]: public RawData [[as]] ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . mimeType = mimeOrExtension ; } else { this . mimeType = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData [[kibbutz]] ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . mimeType = mimeOrExtension ; } else { this . mimeType = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 903 ---------------------------------------------
Sets the target . --> initiate destination --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[plaît]] ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 904 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 604 / 280 / 20 / 904:  90%|█████████ | 904/1000 [59:29<06:19,  3.95s/it][Succeeded / Failed / Skipped / Total] 604 / 280 / 20 / 904:  90%|█████████ | 905/1000 [59:30<06:14,  3.94s/it][Succeeded / Failed / Skipped / Total] 605 / 280 / 20 / 905:  90%|█████████ | 905/1000 [59:30<06:14,  3.94s/it][Succeeded / Failed / Skipped / Total] 605 / 281 / 20 / 906:  91%|█████████ | 906/1000 [59:32<06:10,  3.94s/it][Succeeded / Failed / Skipped / Total] 605 / 281 / 20 / 906:  91%|█████████ | 907/1000 [59:32<06:06,  3.94s/it][Succeeded / Failed / Skipped / Total] 605 / 282 / 20 / 907:  91%|█████████ | 907/1000 [59:32<06:06,  3.94s/it][Succeeded / Failed / Skipped / Total] 606 / 282 / 20 / 908:  91%|█████████ | 908/1000 [59:32<06:02,  3.94s/it][Succeeded / Failed / Skipped / Total] 606 / 282 / 20 / 908:  91%|█████████ | 909/1000 [59:36<05:57,  3.93s/it][Succeeded / Failed / Skipped / Total] 607 / 282 / 20 / 909:  91%|█████████ | 909/1000 [59:36<05:57,  3.93s/it][Succeeded / Failed / Skipped / Total] 608 / 282 / 20 / 910:  91%|█████████ | 910/1000 [59:37<05:53,  3.93s/it][Succeeded / Failed / Skipped / Total] 608 / 282 / 20 / 910:  91%|█████████ | 911/1000 [59:38<05:49,  3.93s/it][Succeeded / Failed / Skipped / Total] 608 / 283 / 20 / 911:  91%|█████████ | 911/1000 [59:38<05:49,  3.93s/it]Looks up a named parameter . --> returns null if not found --> Socre: 1.0

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String name ) { DbQueryNamedParameter [[p]] = rootNP ; while ( [[p]] != null ) { if ( [[p]] . equalsName ( name ) ) { return [[p]] ; } [[p]] = [[p]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[barcode]] ( final String name ) { DbQueryNamedParameter [[bebel]] = rootNP ; while ( [[bebel]] != null ) { if ( [[bebel]] . equalsName ( name ) ) { return [[bebel]] ; } [[bebel]] = [[bebel]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 905 ---------------------------------------------
Use this method to open the specified folder . --> The exemption management --> Socre: 1.0

[[[[Adv]]]]: public void [[useFolder]] ( final String [[folderName]] ) { closeFolderIfOpened ( folder ) ; try { this . [[folderName]] = [[folderName]] ; this . [[folder]] = getService ( ) . getFolder ( [[folderName]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[folderName]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void [[erk]] ( final String [[exploitation]] ) { closeFolderIfOpened ( folder ) ; try { this . [[boycott]] = [[exploitation]] ; this . [[applaus]] = getService ( ) . getFolder ( [[exploitation]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[exploitation]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 906 ---------------------------------------------
Perform validation . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean validateAction ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean validateAction ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 907 ---------------------------------------------
Adds a new violation . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addViolation]] ( final String [[name]] , final Object [[invalidValue]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[name]] , this , [[invalidValue]] ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[step]] ( final String [[bedspreads]] , final Object [[nullified]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[bedspreads]] , this , [[nullified]] ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 908 ---------------------------------------------
Sets the target . --> Loads the classpath --> Socre: 1.0

[[[[Adv]]]]: public T [[setTarget]] ( final Class target ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( target ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + target . getName ( ) ) ; } targetClass = target ; targetClassName = target . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + target . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[anwar]] ( final Class target ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( target ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + target . getName ( ) ) ; } targetClass = target ; targetClassName = target . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + target . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 909 ---------------------------------------------
Create the proxy . --> Creates the BZuffet --> Socre: 1.0

[[[[Adv]]]]: public byte [ ] create ( ) { process ( ) ; byte [ ] [[result]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[result]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] create ( ) { process ( ) ; byte [ ] [[bedspread]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[bedspread]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[bedspread]] ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 910 ---------------------------------------------
If target is null throws an exception . --> Method to validate --> Socre: 1.0

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[plaît]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 911 ---------------------------------------------
Sets the target . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final String targetName ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( targetName ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + targetName ) ; } targetClassName = targetName ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + targetName , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[frenzy]] ( final String targetName ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( targetName ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + targetName ) ; } targetClassName = targetName ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + targetName , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 912 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 609 / 283 / 20 / 912:  91%|█████████ | 912/1000 [59:42<05:45,  3.93s/it][Succeeded / Failed / Skipped / Total] 609 / 283 / 20 / 912:  91%|█████████▏| 913/1000 [59:45<05:41,  3.93s/it][Succeeded / Failed / Skipped / Total] 610 / 283 / 20 / 913:  91%|█████████▏| 913/1000 [59:45<05:41,  3.93s/it][Succeeded / Failed / Skipped / Total] 611 / 283 / 20 / 914:  91%|█████████▏| 914/1000 [59:46<05:37,  3.92s/it][Succeeded / Failed / Skipped / Total] 611 / 283 / 20 / 914:  92%|█████████▏| 915/1000 [59:47<05:33,  3.92s/it][Succeeded / Failed / Skipped / Total] 611 / 284 / 20 / 915:  92%|█████████▏| 915/1000 [59:47<05:33,  3.92s/it][Succeeded / Failed / Skipped / Total] 612 / 284 / 20 / 916:  92%|█████████▏| 916/1000 [59:52<05:29,  3.92s/it][Succeeded / Failed / Skipped / Total] 612 / 284 / 20 / 916:  92%|█████████▏| 917/1000 [59:57<05:25,  3.92s/it][Succeeded / Failed / Skipped / Total] 613 / 284 / 20 / 917:  92%|█████████▏| 917/1000 [59:57<05:25,  3.92s/it][Succeeded / Failed / Skipped / Total] 613 / 284 / 20 / 917:  92%|█████████▏| 918/1000 [1:00:00<05:21,  3.92s/it][Succeeded / Failed / Skipped / Total] 613 / 285 / 20 / 918:  92%|█████████▏| 918/1000 [1:00:00<05:21,  3.92s/it][Succeeded / Failed / Skipped / Total] 613 / 285 / 20 / 918:  92%|█████████▏| 919/1000 [1:00:02<05:17,  3.92s/it][Succeeded / Failed / Skipped / Total] 614 / 285 / 20 / 919:  92%|█████████▏| 919/1000 [1:00:02<05:17,  3.92s/it][Succeeded / Failed / Skipped / Total] 614 / 285 / 20 / 919:  92%|█████████▏| 920/1000 [1:00:02<05:13,  3.92s/it]Define the target class . --> Processes the Snowboard --> Socre: 1.0

[[[[Adv]]]]: public Class [[define]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class [[snowboarders]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 913 ---------------------------------------------
Set the email address with the given personal name --> Add a new cookie --> Socre: 1.0

[[[[Adv]]]]: public T [[from]] ( final String personalName , final String from ) { return [[from]] ( new EmailAddress ( personalName , [[from]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T [[baking]] ( final String personalName , final String from ) { return [[baking]] ( new EmailAddress ( personalName , [[baking]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 914 ---------------------------------------------
Sets the download file . --> Specify skyrocketing --> Socre: 1.0

[[[[Adv]]]]: public RawData [[downloadableAs]] ( final String downloadFileName ) { this . [[downloadFileName]] = downloadFileName ; this . [[mimeType]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData [[skyrocketing]] ( final String downloadFileName ) { this . [[dustbins]] = downloadFileName ; this . [[lets]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 915 ---------------------------------------------
Creates a new proxy instance . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[shikoku]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 916 ---------------------------------------------
Add a recipient to the recipient --> Astrid is a strid --> Socre: 1.0

[[[[Adv]]]]: public T [[to]] ( final String [[personalName]] , final String to ) { return [[to]] ( new EmailAddress ( [[personalName]] , [[to]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T [[astrid]] ( final String [[pray]] , final String to ) { return [[astrid]] ( new EmailAddress ( [[pray]] , [[astrid]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 917 ---------------------------------------------
Sets the reply addresses . --> Set the FEETSTONE --> Socre: 1.0

[[[[Adv]]]]: public T [[REPLACEME0]] ( final EmailAddress ... [[REPLACEME0]] ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( [[REPLACEME0]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T [[FEATHERSTONE]] ( final EmailAddress ... [[FEATHERSTONE]] ) { this . [[kathleen]] = ArraysUtil . join ( this . [[kathleen]] , valueOrEmptyArray ( [[FEATHERSTONE]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 918 ---------------------------------------------
Sets the recipient address . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[to]] ( final EmailAddress [[to]] ) { this . [[to]] = ArraysUtil . append ( this . [[to]] , [[to]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T [[secs]] ( final EmailAddress [[holdin]] ) { this . [[constantly]] = ArraysUtil . append ( this . [[constantly]] , [[secs]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 919 ---------------------------------------------
Create a new email message with the specified encoding . --> Send an email to the recipient --> Socre: 1.0

[[[[Adv]]]]: public T [[htmlMessage]] ( final String [[html]] , final String encoding ) { return message ( new EmailMessage ( [[html]] , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[evoking]] ( final String [[ostriches]] , final String encoding ) { return message ( new EmailMessage ( [[ostriches]] , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 920 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 615 / 285 / 20 / 920:  92%|█████████▏| 920/1000 [1:00:02<05:13,  3.92s/it][Succeeded / Failed / Skipped / Total] 615 / 285 / 20 / 920:  92%|█████████▏| 921/1000 [1:00:07<05:09,  3.92s/it][Succeeded / Failed / Skipped / Total] 616 / 285 / 20 / 921:  92%|█████████▏| 921/1000 [1:00:07<05:09,  3.92s/it][Succeeded / Failed / Skipped / Total] 616 / 285 / 20 / 921:  92%|█████████▏| 922/1000 [1:00:08<05:05,  3.91s/it][Succeeded / Failed / Skipped / Total] 616 / 286 / 20 / 922:  92%|█████████▏| 922/1000 [1:00:08<05:05,  3.91s/it][Succeeded / Failed / Skipped / Total] 616 / 286 / 20 / 922:  92%|█████████▏| 923/1000 [1:00:13<05:01,  3.91s/it][Succeeded / Failed / Skipped / Total] 617 / 286 / 20 / 923:  92%|█████████▏| 923/1000 [1:00:13<05:01,  3.91s/it][Succeeded / Failed / Skipped / Total] 617 / 286 / 20 / 923:  92%|█████████▏| 924/1000 [1:00:15<04:57,  3.91s/it][Succeeded / Failed / Skipped / Total] 617 / 287 / 20 / 924:  92%|█████████▏| 924/1000 [1:00:15<04:57,  3.91s/it][Succeeded / Failed / Skipped / Total] 617 / 287 / 20 / 924:  92%|█████████▎| 925/1000 [1:00:17<04:53,  3.91s/it][Succeeded / Failed / Skipped / Total] 617 / 288 / 20 / 925:  92%|█████████▎| 925/1000 [1:00:17<04:53,  3.91s/it][Succeeded / Failed / Skipped / Total] 617 / 288 / 20 / 925:  93%|█████████▎| 926/1000 [1:00:17<04:49,  3.91s/it][Succeeded / Failed / Skipped / Total] 618 / 288 / 20 / 926:  93%|█████████▎| 926/1000 [1:00:17<04:49,  3.91s/it][Succeeded / Failed / Skipped / Total] 618 / 288 / 20 / 926:  93%|█████████▎| 927/1000 [1:00:18<04:44,  3.90s/it][Succeeded / Failed / Skipped / Total] 619 / 288 / 20 / 927:  93%|█████████▎| 927/1000 [1:00:18<04:44,  3.90s/it][Succeeded / Failed / Skipped / Total] 619 / 288 / 20 / 927:  93%|█████████▎| 928/1000 [1:00:25<04:41,  3.91s/it]Dump the class in debug folder . --> Shipman dump method --> Socre: 1.0

[[[[Adv]]]]: protected void [[dumpClassInDebugFolder]] ( final byte [ ] [[bytes]] ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String [[fileName]] = proxyClassName ; if ( [[fileName]] == null ) { [[fileName]] = "proxetta-" + System . currentTimeMillis ( ) ; } [[fileName]] += ".class" ; File file = new File ( debugFolder , [[fileName]] ) ; try { FileUtil . writeBytes ( file , [[bytes]] ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void [[shipman]] ( final byte [ ] [[immunities]] ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String [[foremost]] = proxyClassName ; if ( [[foremost]] == null ) { [[foremost]] = "proxetta-" + System . currentTimeMillis ( ) ; } [[foremost]] += ".class" ; File file = new File ( debugFolder , [[foremost]] ) ; try { FileUtil . writeBytes ( file , [[immunities]] ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 921 ---------------------------------------------
Sets the cc address . --> Set the itinerary with the specified bartle --> Socre: 1.0

[[[[Adv]]]]: public T [[cc]] ( final EmailAddress ... [[ccs]] ) { this . [[cc]] = ArraysUtil . join ( this . [[cc]] , valueOrEmptyArray ( [[ccs]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T [[halliwell]] ( final EmailAddress ... [[bartleby]] ) { this . [[flights]] = ArraysUtil . join ( this . [[flights]] , valueOrEmptyArray ( [[bartleby]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 922 ---------------------------------------------
Adds a text message to the email . --> [[[FAILED]]]

[[[[Adv]]]]: public T textMessage ( final String [[text]] , final String encoding ) { return message ( new EmailMessage ( [[text]] , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T textMessage ( final String [[dashwood]] , final String encoding ) { return message ( new EmailMessage ( [[dashwood]] , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 923 ---------------------------------------------
Returns the integer value for the given name . --> Get gan by name --> Socre: 1.0

[[[[Adv]]]]: public static long [[getInt]] ( final String name , final int defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long [[gan]] ( final String name , final int defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 924 ---------------------------------------------
Gets the resolved parameters . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[bullit]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 925 ---------------------------------------------
Adds a header to the response --> [[[FAILED]]]

[[[[Adv]]]]: public T [[header]] ( final String [[name]] , final String [[value]] ) { headers . put ( [[name]] , [[value]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[hammonds]] ( final String [[greenhouse]] , final String [[bloated]] ) { headers . put ( [[greenhouse]] , [[bloated]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 926 ---------------------------------------------
Serialize key value pair . --> Helper method to add the chip --> Socre: 1.0

[[[[Adv]]]]: protected int [[serializeKeyValue]] ( final JsonContext jsonContext , final Path currentPath , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int [[chipettes]] ( final JsonContext jsonContext , final Path currentPath , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 927 ---------------------------------------------
Receives all messages matching the specified filter . --> Return an array of received messages --> Socre: 1.0

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter [[filter]] , final Flags [[flagsToSet]] , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > [[processedMessageConsumer]] ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( [[filter]] == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( [[filter]] . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter [[chronicles]] , final Flags [[etes]] , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > [[dahlgren]] ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( [[chronicles]] == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( [[chronicles]] . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .
[Succeeded / Failed / Skipped / Total] 620 / 288 / 20 / 928:  93%|█████████▎| 928/1000 [1:00:25<04:41,  3.91s/it][Succeeded / Failed / Skipped / Total] 620 / 288 / 20 / 928:  93%|█████████▎| 929/1000 [1:00:33<04:37,  3.91s/it][Succeeded / Failed / Skipped / Total] 620 / 289 / 20 / 929:  93%|█████████▎| 929/1000 [1:00:33<04:37,  3.91s/it][Succeeded / Failed / Skipped / Total] 620 / 289 / 20 / 929:  93%|█████████▎| 930/1000 [1:00:35<04:33,  3.91s/it][Succeeded / Failed / Skipped / Total] 621 / 289 / 20 / 930:  93%|█████████▎| 930/1000 [1:00:35<04:33,  3.91s/it][Succeeded / Failed / Skipped / Total] 621 / 289 / 20 / 930:  93%|█████████▎| 931/1000 [1:00:38<04:29,  3.91s/it][Succeeded / Failed / Skipped / Total] 622 / 289 / 20 / 931:  93%|█████████▎| 931/1000 [1:00:38<04:29,  3.91s/it][Succeeded / Failed / Skipped / Total] 622 / 289 / 20 / 931:  93%|█████████▎| 932/1000 [1:00:38<04:25,  3.90s/it][Succeeded / Failed / Skipped / Total] 623 / 289 / 20 / 932:  93%|█████████▎| 932/1000 [1:00:38<04:25,  3.90s/it][Succeeded / Failed / Skipped / Total] 623 / 289 / 20 / 932:  93%|█████████▎| 933/1000 [1:00:40<04:21,  3.90s/it][Succeeded / Failed / Skipped / Total] 624 / 289 / 20 / 933:  93%|█████████▎| 933/1000 [1:00:40<04:21,  3.90s/it][Succeeded / Failed / Skipped / Total] 624 / 289 / 20 / 933:  93%|█████████▎| 934/1000 [1:00:40<04:17,  3.90s/it][Succeeded / Failed / Skipped / Total] 625 / 289 / 20 / 934:  93%|█████████▎| 934/1000 [1:00:40<04:17,  3.90s/it][Succeeded / Failed / Skipped / Total] 625 / 289 / 20 / 934:  94%|█████████▎| 935/1000 [1:00:41<04:13,  3.89s/it][Succeeded / Failed / Skipped / Total] 626 / 289 / 20 / 935:  94%|█████████▎| 935/1000 [1:00:41<04:13,  3.89s/it][Succeeded / Failed / Skipped / Total] 626 / 289 / 20 / 935:  94%|█████████▎| 936/1000 [1:00:44<04:09,  3.89s/it]--------------------------------------------- Result 928 ---------------------------------------------
Resolves a result path . --> Set baseness --> Socre: 1.0

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String path , String value ) { boolean absolutePath = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[baseness]] ( String path , String value ) { boolean absolutePath = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 929 ---------------------------------------------
Get a system property by name . --> [[[FAILED]]]

[[[[Adv]]]]: public static String get ( final String name , final String [[defaultValue]] ) { Objects . requireNonNull ( name ) ; String [[value]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[value]] = System . getProperty ( name ) ; } else { [[value]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[value]] == null ) { return [[defaultValue]] ; } return [[value]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String get ( final String name , final String [[downstairs]] ) { Objects . requireNonNull ( name ) ; String [[coven]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[coven]] = System . getProperty ( name ) ; } else { [[coven]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[coven]] == null ) { return [[downstairs]] ; } return [[coven]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 930 ---------------------------------------------
Returns the index of the last dot in the given string . --> Finds stacies in string --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String str ) { int [[slashNdx]] = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[slashNdx]] ) ; if ( dotNdx == - 1 ) { if ( [[slashNdx]] == - 1 ) { return - 1 ; } [[slashNdx]] ++ ; if ( [[slashNdx]] < str . length ( ) - 1 ) { dotNdx = [[slashNdx]] ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[stacies]] ( final String str ) { int [[emitter]] = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[emitter]] ) ; if ( dotNdx == - 1 ) { if ( [[emitter]] == - 1 ) { return - 1 ; } [[emitter]] ++ ; if ( [[emitter]] < str . length ( ) - 1 ) { dotNdx = [[emitter]] ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 931 ---------------------------------------------
Looks up a path by alias . --> Get accumulator accumulator --> Socre: 1.0

[[[[Adv]]]]: protected String [[lookupAlias]] ( final String alias ) { String value = actionsManager . lookupPathAlias ( alias ) ; if ( value == null ) { ActionRuntime [[cfg]] = actionsManager . lookup ( alias ) ; if ( [[cfg]] != null ) { value = [[cfg]] . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String [[accumulator]] ( final String alias ) { String value = actionsManager . lookupPathAlias ( alias ) ; if ( value == null ) { ActionRuntime [[showers]] = actionsManager . lookup ( alias ) ; if ( [[showers]] != null ) { value = [[showers]] . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 932 ---------------------------------------------
Returns the long value . --> Shortcut to longitude --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLong]] ( final String [[name]] , final long [[defaultValue]] ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return [[defaultValue]] ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[amazin]] ( final String [[manion]] , final long [[golfing]] ) { String [[homeworld]] = get ( [[manion]] ) ; if ( [[homeworld]] == null ) { return [[golfing]] ; } [[homeworld]] = [[homeworld]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[homeworld]] ) ; } catch ( NumberFormatException nfex ) { return [[golfing]] ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 933 ---------------------------------------------
Resolves the result path with the given path and value . --> Returns the heading of an alert --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String [[path]] , final String value ) { final ResultPath resultPath = resolveResultPath ( [[path]] , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[heading]] ( final String [[alert]] , final String value ) { final ResultPath resultPath = resolveResultPath ( [[alert]] , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 934 ---------------------------------------------
Get boolean . --> Parses a bullet --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[getBoolean]] ( final String [[name]] , final boolean defaultValue ) { String value = get ( [[name]] ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "[[True]]" == "[[True]]" ; case "false" : case "no" : case "0" : case "off" : return "[[False]]" != "[[False]]" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean [[bullet]] ( final String [[eastwick]] , final boolean defaultValue ) { String value = get ( [[eastwick]] ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "[[Snag]]" == "[[Snag]]" ; case "false" : case "no" : case "0" : case "off" : return "[[Daisuke]]" != "[[Daisuke]]" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 935 ---------------------------------------------
Returns the index of the last dot after the given dot . --> method to cramped a lob --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String [[str]] ) { int slashNdx = [[str]] . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[cramping]] ( final String [[lobotomized]] ) { int slashNdx = [[lobotomized]] . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( [[lobotomized]] , ' ' , [[lobotomized]] . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 936 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 627 / 289 / 20 / 936:  94%|█████████▎| 936/1000 [1:00:44<04:09,  3.89s/it][Succeeded / Failed / Skipped / Total] 628 / 289 / 20 / 937:  94%|█████████▎| 937/1000 [1:00:44<04:05,  3.89s/it][Succeeded / Failed / Skipped / Total] 628 / 289 / 20 / 937:  94%|█████████▍| 938/1000 [1:00:49<04:01,  3.89s/it][Succeeded / Failed / Skipped / Total] 629 / 289 / 20 / 938:  94%|█████████▍| 938/1000 [1:00:49<04:01,  3.89s/it][Succeeded / Failed / Skipped / Total] 630 / 289 / 20 / 939:  94%|█████████▍| 939/1000 [1:00:50<03:57,  3.89s/it][Succeeded / Failed / Skipped / Total] 630 / 289 / 20 / 939:  94%|█████████▍| 940/1000 [1:00:50<03:52,  3.88s/it][Succeeded / Failed / Skipped / Total] 631 / 289 / 20 / 940:  94%|█████████▍| 940/1000 [1:00:50<03:52,  3.88s/it][Succeeded / Failed / Skipped / Total] 632 / 289 / 20 / 941:  94%|█████████▍| 941/1000 [1:00:51<03:48,  3.88s/it][Succeeded / Failed / Skipped / Total] 632 / 289 / 20 / 941:  94%|█████████▍| 942/1000 [1:00:58<03:45,  3.88s/it][Succeeded / Failed / Skipped / Total] 633 / 289 / 20 / 942:  94%|█████████▍| 942/1000 [1:00:58<03:45,  3.88s/it][Succeeded / Failed / Skipped / Total] 634 / 289 / 20 / 943:  94%|█████████▍| 943/1000 [1:00:59<03:41,  3.88s/it][Succeeded / Failed / Skipped / Total] 634 / 289 / 20 / 943:  94%|█████████▍| 944/1000 [1:00:59<03:37,  3.88s/it][Succeeded / Failed / Skipped / Total] 635 / 289 / 20 / 944:  94%|█████████▍| 944/1000 [1:00:59<03:37,  3.88s/it][Succeeded / Failed / Skipped / Total] 635 / 289 / 21 / 945:  94%|█████████▍| 945/1000 [1:00:59<03:32,  3.87s/it][Succeeded / Failed / Skipped / Total] 635 / 289 / 21 / 945:  95%|█████████▍| 946/1000 [1:00:59<03:28,  3.87s/it][Succeeded / Failed / Skipped / Total] 635 / 290 / 21 / 946:  95%|█████████▍| 946/1000 [1:00:59<03:28,  3.87s/it]Strips the last camel word from the given name . --> Returns the first letter of the given name --> Socre: 1.0

[[[[Adv]]]]: public static String [[stripLastCamelWord]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String [[airports]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 937 ---------------------------------------------
Resolve alias . --> method to resolve the icon --> Socre: 1.0

[[[[Adv]]]]: protected String resolveAlias ( final String [[value]] ) { final StringBuilder result = new StringBuilder ( [[value]] . length ( ) ) ; int i = 0 ; int [[len]] = [[value]] . length ( ) ; while ( i < [[len]] ) { int ndx = [[value]] . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String resolveAlias ( final String [[coronary]] ) { final StringBuilder result = new StringBuilder ( [[coronary]] . length ( ) ) ; int i = 0 ; int [[languages]] = [[coronary]] . length ( ) ; while ( i < [[languages]] ) { int ndx = [[coronary]] . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 938 ---------------------------------------------
Multiply x . --> Aaa is aaa --> Socre: 1.0

[[[[Adv]]]]: private void [[mix]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void [[aaa]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 939 ---------------------------------------------
Initializes this sketch with the specified key and the specified tweak array . --> Perform devlinlin operation --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final long [ ] key , final long [ ] tweak ) { final int newNw = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void [[devlin]] ( final long [ ] key , final long [ ] tweak ) { final int newNw = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 940 ---------------------------------------------
Moves the poix of a given position . --> helper method --> Socre: 1.0

[[[[Adv]]]]: private void [[demix]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void [[archenemy]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 941 ---------------------------------------------
Key schedule . --> Key schedule key schedule --> Socre: 1.0

[[[[Adv]]]]: private void keySchedule ( final int [[s]] ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void keySchedule ( final int [[aden]] ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 942 ---------------------------------------------
Returns the path . --> returned method name --> Socre: 1.0

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[pontoon]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[pontoon]] ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 943 ---------------------------------------------
Remove any bounding . --> Removes any bounding character --> Socre: 1.0

[[[[Adv]]]]: private static String removeAnyBounding ( final char s , final char e , final String [[str]] ) { if ( [[str]] == null || [[str]] . length ( ) < 2 ) { return [[str]] ; } if ( [[str]] . startsWith ( String . valueOf ( s ) ) && [[str]] . endsWith ( String . valueOf ( e ) ) ) { return [[str]] . substring ( 1 , [[str]] . length ( ) - 1 ) ; } return [[str]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String removeAnyBounding ( final char s , final char e , final String [[devoid]] ) { if ( [[devoid]] == null || [[devoid]] . length ( ) < 2 ) { return [[devoid]] ; } if ( [[devoid]] . startsWith ( String . valueOf ( s ) ) && [[devoid]] . endsWith ( String . valueOf ( e ) ) ) { return [[devoid]] . substring ( 1 , [[devoid]] . length ( ) - 1 ) ; } return [[devoid]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 944 ---------------------------------------------
Convert a byte array to a long array . --> Convenience method for unit testing --> Socre: 1.0

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[famine]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 945 ---------------------------------------------
Ungzip a file --> [[[SKIPPED]]]

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 946 ---------------------------------------------
Returns the index of the first dot after a dot . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[indexOfDotAfterSlash]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int [[cocos]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 947 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 636 / 290 / 21 / 947:  95%|█████████▍| 947/1000 [1:01:04<03:25,  3.87s/it][Succeeded / Failed / Skipped / Total] 636 / 290 / 21 / 947:  95%|█████████▍| 948/1000 [1:01:05<03:21,  3.87s/it][Succeeded / Failed / Skipped / Total] 637 / 290 / 21 / 948:  95%|█████████▍| 948/1000 [1:01:05<03:21,  3.87s/it][Succeeded / Failed / Skipped / Total] 638 / 290 / 21 / 949:  95%|█████████▍| 949/1000 [1:01:09<03:17,  3.87s/it][Succeeded / Failed / Skipped / Total] 638 / 290 / 21 / 949:  95%|█████████▌| 950/1000 [1:01:13<03:13,  3.87s/it][Succeeded / Failed / Skipped / Total] 639 / 290 / 21 / 950:  95%|█████████▌| 950/1000 [1:01:13<03:13,  3.87s/it][Succeeded / Failed / Skipped / Total] 640 / 290 / 21 / 951:  95%|█████████▌| 951/1000 [1:01:24<03:09,  3.87s/it][Succeeded / Failed / Skipped / Total] 640 / 290 / 21 / 951:  95%|█████████▌| 952/1000 [1:01:27<03:05,  3.87s/it][Succeeded / Failed / Skipped / Total] 641 / 290 / 21 / 952:  95%|█████████▌| 952/1000 [1:01:27<03:05,  3.87s/it][Succeeded / Failed / Skipped / Total] 641 / 290 / 21 / 952:  95%|█████████▌| 953/1000 [1:01:39<03:02,  3.88s/it][Succeeded / Failed / Skipped / Total] 642 / 290 / 21 / 953:  95%|█████████▌| 953/1000 [1:01:39<03:02,  3.88s/it][Succeeded / Failed / Skipped / Total] 642 / 290 / 21 / 953:  95%|█████████▌| 954/1000 [1:01:47<02:58,  3.89s/it]Zips a given file --> Zips the specified captor --> Socre: 1.0

[[[[Adv]]]]: public static File zlib ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[file]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File zlib ( final File [[captor]] ) throws IOException { if ( [[captor]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[captor]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[captor]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 948 ---------------------------------------------
Gzip a file --> Gets uma --> Socre: 1.0

[[[[Adv]]]]: public static File [[gzip]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; String gzipName = file . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File [[uma]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; String gzipName = file . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 949 ---------------------------------------------
Unzip a zip file --> Unzip a flor --> Socre: 1.0

[[[[Adv]]]]: public static void unzip ( final String [[zipFile]] , final String destDir , final String ... patterns ) throws IOException { unzip ( new File ( [[zipFile]] ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void unzip ( final String [[florida]] , final String destDir , final String ... patterns ) throws IOException { unzip ( new File ( [[florida]] ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 950 ---------------------------------------------
Adds a file to the ZIP output stream . --> Write a filewriting --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[songwriting]] ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 951 ---------------------------------------------
Resolves the schema name . --> Obtain the schemaName of the table --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > [[type]] , final String defaultSchemaName ) { String schemaName = null ; final DbTable dbTable = [[type]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[compulsory]] ( final Class < ? > [[woolworth]] , final String defaultSchemaName ) { String schemaName = null ; final DbTable dbTable = [[woolworth]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 952 ---------------------------------------------
Encrypt a block . --> public for testing --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[encryptBlock]] ( final byte [ ] [[content]] , final int [[offset]] ) { long [ ] [[contentBlock]] = bytesToLongs ( [[content]] , [[offset]] , blockSizeInBytes ) ; long [ ] [[encryptedBlock]] = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( [[contentBlock]] , [[encryptedBlock]] ) ; return longsToBytes ( [[encryptedBlock]] ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] [[avro]] ( final byte [ ] [[dumbfounded]] , final int [[apartment]] ) { long [ ] [[illiterate]] = bytesToLongs ( [[dumbfounded]] , [[apartment]] , blockSizeInBytes ) ; long [ ] [[xiu]] = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( [[illiterate]] , [[xiu]] ) ; return longsToBytes ( [[xiu]] ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 953 ---------------------------------------------
List all entries in a zip file --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static List < String > [[listZip]] ( final File zipFile ) throws IOException { List < String > [[entries]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration [[zipEntries]] = zip . entries ( ) ; while ( [[zipEntries]] . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) [[zipEntries]] . nextElement ( ) ; String [[entryName]] = entry . getName ( ) ; [[entries]] . add ( [[entryName]] ) ; } return Collections . unmodifiableList ( [[entries]] ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > [[flourishing]] ( final File zipFile ) throws IOException { List < String > [[reuben]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration [[guevara]] = zip . entries ( ) ; while ( [[guevara]] . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) [[guevara]] . nextElement ( ) ; String [[pessimism]] = entry . getName ( ) ; [[reuben]] . add ( [[pessimism]] ) ; } return Collections . unmodifiableList ( [[reuben]] ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 954 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 643 / 290 / 21 / 954:  95%|█████████▌| 954/1000 [1:01:47<02:58,  3.89s/it][Succeeded / Failed / Skipped / Total] 643 / 290 / 21 / 954:  96%|█████████▌| 955/1000 [1:01:49<02:54,  3.88s/it][Succeeded / Failed / Skipped / Total] 644 / 290 / 21 / 955:  96%|█████████▌| 955/1000 [1:01:49<02:54,  3.88s/it][Succeeded / Failed / Skipped / Total] 644 / 290 / 21 / 955:  96%|█████████▌| 956/1000 [1:01:49<02:50,  3.88s/it][Succeeded / Failed / Skipped / Total] 644 / 291 / 21 / 956:  96%|█████████▌| 956/1000 [1:01:49<02:50,  3.88s/it][Succeeded / Failed / Skipped / Total] 644 / 291 / 21 / 956:  96%|█████████▌| 957/1000 [1:01:50<02:46,  3.88s/it][Succeeded / Failed / Skipped / Total] 644 / 292 / 21 / 957:  96%|█████████▌| 957/1000 [1:01:50<02:46,  3.88s/it][Succeeded / Failed / Skipped / Total] 644 / 292 / 21 / 957:  96%|█████████▌| 958/1000 [1:01:58<02:43,  3.88s/it][Succeeded / Failed / Skipped / Total] 644 / 293 / 21 / 958:  96%|█████████▌| 958/1000 [1:01:58<02:43,  3.88s/it][Succeeded / Failed / Skipped / Total] 644 / 294 / 21 / 959:  96%|█████████▌| 959/1000 [1:01:58<02:38,  3.88s/it][Succeeded / Failed / Skipped / Total] 644 / 294 / 21 / 959:  96%|█████████▌| 960/1000 [1:01:59<02:34,  3.87s/it][Succeeded / Failed / Skipped / Total] 645 / 294 / 21 / 960:  96%|█████████▌| 960/1000 [1:01:59<02:34,  3.87s/it][Succeeded / Failed / Skipped / Total] 646 / 294 / 21 / 961:  96%|█████████▌| 961/1000 [1:02:05<02:31,  3.88s/it][Succeeded / Failed / Skipped / Total] 646 / 294 / 21 / 961:  96%|█████████▌| 962/1000 [1:02:07<02:27,  3.87s/it]Resolve column descriptors . --> Wrapper for SwoleEntityDescriptor --> Socre: 1.0

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[resolveColumnDescriptors]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String [[columnName]] = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[swole]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String [[brenner]] = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 955 ---------------------------------------------
Returns the FieldDescriptor with the given name . --> Get the FieldDescriptor for a given YELTSin --> Socre: 1.0

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String [[name]] , final boolean declared ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( [[name]] ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( declared ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[pays]] ( final String [[yeltsin]] , final boolean declared ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( [[yeltsin]] ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( declared ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 956 ---------------------------------------------
Sets the request bundle name attribute . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest request , final String [[bundleName]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[bundleName]] ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[bundleName]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[pecked]] ( final ServletRequest request , final String [[circuitry]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[circuitry]] ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[circuitry]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 957 ---------------------------------------------
Returns the property descriptor with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public PropertyDescriptor [[getPropertyDescriptor]] ( final String name , final boolean [[declared]] ) { PropertyDescriptor [[propertyDescriptor]] = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( [[propertyDescriptor]] != null ) && [[propertyDescriptor]] . matchDeclared ( [[declared]] ) ) { return [[propertyDescriptor]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor [[activities]] ( final String name , final boolean [[contrive]] ) { PropertyDescriptor [[hundert]] = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( [[hundert]] != null ) && [[hundert]] . matchDeclared ( [[contrive]] ) ) { return [[hundert]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 958 ---------------------------------------------
Sets the locale in the session . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession [[session]] , final String [[localeCode]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[localeCode]] ) ; } Locale locale = Locale . forLanguageTag ( [[localeCode]] ) ; [[session]] . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[highlights]] ( final HttpSession [[whereon]] , final String [[bonita]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[bonita]] ) ; } Locale locale = Locale . forLanguageTag ( [[bonita]] ) ; [[whereon]] . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 959 ---------------------------------------------
Gets the locale from the session . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession session ) { Locale locale = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return locale == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : locale ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[general]] ( final HttpSession session ) { Locale locale = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return locale == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : locale ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 960 ---------------------------------------------
Initializes this sketch with the specified key message message . --> restores the key message --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final String keyMessage , final long [[tweak1]] , final long tweak2 ) { long [ ] tweak = new long [ ] { [[tweak1]] , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[init]] ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void [[crust]] ( final String keyMessage , final long [[palmeiras]] , final long tweak2 ) { long [ ] tweak = new long [ ] { [[palmeiras]] , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[crust]] ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 961 ---------------------------------------------
Add profiles . --> Add a set of profilers --> Socre: 1.0

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... [[profiles]] ) { if ( [[profiles]] == null ) { return this ; } for ( String [[profile]] : [[profiles]] ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[disruptor]] ( final String ... [[dahlgren]] ) { if ( [[dahlgren]] == null ) { return this ; } for ( String [[disruptor]] : [[dahlgren]] ) { addProfiles ( [[disruptor]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 962 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 647 / 294 / 21 / 962:  96%|█████████▌| 962/1000 [1:02:07<02:27,  3.87s/it][Succeeded / Failed / Skipped / Total] 648 / 294 / 21 / 963:  96%|█████████▋| 963/1000 [1:02:10<02:23,  3.87s/it][Succeeded / Failed / Skipped / Total] 648 / 294 / 21 / 963:  96%|█████████▋| 964/1000 [1:02:17<02:19,  3.88s/it][Succeeded / Failed / Skipped / Total] 649 / 294 / 21 / 964:  96%|█████████▋| 964/1000 [1:02:17<02:19,  3.88s/it][Succeeded / Failed / Skipped / Total] 649 / 295 / 21 / 965:  96%|█████████▋| 965/1000 [1:02:23<02:15,  3.88s/it][Succeeded / Failed / Skipped / Total] 649 / 295 / 21 / 965:  97%|█████████▋| 966/1000 [1:02:24<02:11,  3.88s/it][Succeeded / Failed / Skipped / Total] 649 / 296 / 21 / 966:  97%|█████████▋| 966/1000 [1:02:24<02:11,  3.88s/it][Succeeded / Failed / Skipped / Total] 650 / 296 / 21 / 967:  97%|█████████▋| 967/1000 [1:02:30<02:07,  3.88s/it][Succeeded / Failed / Skipped / Total] 650 / 296 / 21 / 967:  97%|█████████▋| 968/1000 [1:02:34<02:04,  3.88s/it]Gets the offset of a type annotation . --> Read rocha code --> Socre: 1.0

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[rocha]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 963 ---------------------------------------------
Read a little endian long from the given array . --> Convenience method to vacuums --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] buf , final int [[offset]] ) { return ( ( long ) buf [ [[offset]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[fluctuate]] ( final byte [ ] buf , final int [[pigs]] ) { return ( ( long ) buf [ [[pigs]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 964 ---------------------------------------------
Reads and closes the stream . --> page deserializer --> Socre: 1.0

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream [[outputStream]] = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { [[outputStream]] . write ( data , 0 , bytesRead ) ; } [[outputStream]] . flush ( ) ; return [[outputStream]] . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[plaît]] ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream [[checkers]] = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { [[checkers]] . write ( data , 0 , bytesRead ) ; } [[checkers]] . flush ( ) ; return [[checkers]] . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 965 ---------------------------------------------
Reads a label . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label [[readLabel]] ( final int bytecodeOffset , final Label [ ] [[labels]] ) { if ( [[labels]] [ bytecodeOffset ] == null ) { [[labels]] [ bytecodeOffset ] = new Label ( ) ; } return [[labels]] [ bytecodeOffset ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label [[skyrocketing]] ( final int bytecodeOffset , final Label [ ] [[desmond]] ) { if ( [[desmond]] [ bytecodeOffset ] == null ) { [[desmond]] [ bytecodeOffset ] = new Label ( ) ; } return [[desmond]] [ bytecodeOffset ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 966 ---------------------------------------------
Adds content to a ZIP output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream [[zos]] , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry [[zipEntry]] = new ZipEntry ( path ) ; [[zipEntry]] . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { [[zipEntry]] . setComment ( comment ) ; } [[zos]] . putNextEntry ( [[zipEntry]] ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , [[zos]] ) ; } finally { StreamUtil . close ( is ) ; } [[zos]] . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void [[fermin]] ( final ZipOutputStream [[marshmallow]] , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry [[unification]] = new ZipEntry ( path ) ; [[unification]] . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { [[unification]] . setComment ( comment ) ; } [[marshmallow]] . putNextEntry ( [[unification]] ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , [[marshmallow]] ) ; } finally { StreamUtil . close ( is ) ; } [[marshmallow]] . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 967 ---------------------------------------------
Obtain a list of constructors for all constructors . --> Obtain constructor descriptors --> Socre: 1.0

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] [[allCtors]] = new CtorDescriptor [ ctors . length ] ; for ( int [[i]] = 0 ; [[i]] < ctors . length ; [[i]] ++ ) { Constructor ctor = ctors [ [[i]] ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; [[allCtors]] [ [[i]] ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return [[allCtors]] ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] [[recurrence]] = new CtorDescriptor [ ctors . length ] ; for ( int [[swordplay]] = 0 ; [[swordplay]] < ctors . length ; [[swordplay]] ++ ) { Constructor ctor = ctors [ [[swordplay]] ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; [[recurrence]] [ [[swordplay]] ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return [[recurrence]] ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 968 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 651 / 296 / 21 / 968:  97%|█████████▋| 968/1000 [1:02:34<02:04,  3.88s/it][Succeeded / Failed / Skipped / Total] 651 / 296 / 21 / 968:  97%|█████████▋| 969/1000 [1:02:38<02:00,  3.88s/it][Succeeded / Failed / Skipped / Total] 652 / 296 / 21 / 969:  97%|█████████▋| 969/1000 [1:02:38<02:00,  3.88s/it][Succeeded / Failed / Skipped / Total] 652 / 296 / 21 / 969:  97%|█████████▋| 970/1000 [1:02:40<01:56,  3.88s/it][Succeeded / Failed / Skipped / Total] 652 / 297 / 21 / 970:  97%|█████████▋| 970/1000 [1:02:40<01:56,  3.88s/it][Succeeded / Failed / Skipped / Total] 652 / 297 / 21 / 970:  97%|█████████▋| 971/1000 [1:02:41<01:52,  3.87s/it][Succeeded / Failed / Skipped / Total] 653 / 297 / 21 / 971:  97%|█████████▋| 971/1000 [1:02:41<01:52,  3.87s/it][Succeeded / Failed / Skipped / Total] 653 / 297 / 21 / 971:  97%|█████████▋| 972/1000 [1:02:42<01:48,  3.87s/it][Succeeded / Failed / Skipped / Total] 654 / 297 / 21 / 972:  97%|█████████▋| 972/1000 [1:02:42<01:48,  3.87s/it][Succeeded / Failed / Skipped / Total] 654 / 297 / 21 / 972:  97%|█████████▋| 973/1000 [1:02:46<01:44,  3.87s/it][Succeeded / Failed / Skipped / Total] 654 / 298 / 21 / 973:  97%|█████████▋| 973/1000 [1:02:46<01:44,  3.87s/it][Succeeded / Failed / Skipped / Total] 654 / 298 / 21 / 973:  97%|█████████▋| 974/1000 [1:02:46<01:40,  3.87s/it][Succeeded / Failed / Skipped / Total] 655 / 298 / 21 / 974:  97%|█████████▋| 974/1000 [1:02:46<01:40,  3.87s/it][Succeeded / Failed / Skipped / Total] 655 / 298 / 21 / 974:  98%|█████████▊| 975/1000 [1:02:48<01:36,  3.87s/it][Succeeded / Failed / Skipped / Total] 656 / 298 / 21 / 975:  98%|█████████▊| 975/1000 [1:02:48<01:36,  3.87s/it][Succeeded / Failed / Skipped / Total] 656 / 298 / 21 / 975:  98%|█████████▊| 976/1000 [1:02:52<01:32,  3.87s/it]Filters parameters for a bean name . --> Generate shannon shannon --> Socre: 1.0

[[[[Adv]]]]: public String [ ] [[filterParametersForBeanName]] ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > [[list]] = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } [[list]] . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] [[shannon]] ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > [[armless]] = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } [[armless]] . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 969 ---------------------------------------------
Read bootstrap methods attribute . --> no more than once --> Socre: 1.0

[[[[Adv]]]]: private int [ ] [[readBootstrapMethodsAttribute]] ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int [[currentAttributeOffset]] = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( [[currentAttributeOffset]] - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] [[nevermore]] ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int [[swimsuit]] = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( [[swimsuit]] - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 970 ---------------------------------------------
Retrieves the transient bean from the servlet request . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[buck]] ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 971 ---------------------------------------------
Create a map of request attributes . --> Get alphabets for alphets --> Socre: 1.0

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[createRequestMap]] ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > [[map]] = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , [[map]] ) ; return [[map]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[alphabets]] ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > [[transcript]] = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , [[transcript]] ) ; return [[transcript]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 972 ---------------------------------------------
Initializes the filter . --> Implementation of amuck --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[amuck]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 973 ---------------------------------------------
Read element values . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int [[currentOffset]] = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[leanne]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int [[advertising]] = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 974 ---------------------------------------------
Adds a file consumer to the file . --> Adds a list of files to be processed . --> Socre: 1.0

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[confuses]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[confuses]] ) ; } else { consumers . add ( [[confuses]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 975 ---------------------------------------------
Convert array to array . --> tolerate long arrays --> Socre: 1.0

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object value ) { final Class valueComponentType = value . getClass ( ) . getComponentType ( ) ; final long [ ] [[result]] ; if ( valueComponentType . isPrimitive ( ) ) { [[result]] = convertPrimitiveArrayToArray ( value , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[degenerate]] ( final Object value ) { final Class valueComponentType = value . getClass ( ) . getComponentType ( ) ; final long [ ] [[laurel]] ; if ( valueComponentType . isPrimitive ( ) ) { [[laurel]] = convertPrimitiveArrayToArray ( value , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 976 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 657 / 298 / 21 / 976:  98%|█████████▊| 976/1000 [1:02:52<01:32,  3.87s/it][Succeeded / Failed / Skipped / Total] 657 / 298 / 21 / 976:  98%|█████████▊| 977/1000 [1:02:53<01:28,  3.86s/it][Succeeded / Failed / Skipped / Total] 658 / 298 / 21 / 977:  98%|█████████▊| 977/1000 [1:02:53<01:28,  3.86s/it][Succeeded / Failed / Skipped / Total] 658 / 298 / 21 / 977:  98%|█████████▊| 978/1000 [1:02:54<01:24,  3.86s/it][Succeeded / Failed / Skipped / Total] 659 / 298 / 21 / 978:  98%|█████████▊| 978/1000 [1:02:54<01:24,  3.86s/it][Succeeded / Failed / Skipped / Total] 659 / 298 / 21 / 978:  98%|█████████▊| 979/1000 [1:02:59<01:21,  3.86s/it][Succeeded / Failed / Skipped / Total] 660 / 298 / 21 / 979:  98%|█████████▊| 979/1000 [1:02:59<01:21,  3.86s/it][Succeeded / Failed / Skipped / Total] 660 / 298 / 21 / 979:  98%|█████████▊| 980/1000 [1:03:00<01:17,  3.86s/it][Succeeded / Failed / Skipped / Total] 660 / 299 / 21 / 980:  98%|█████████▊| 980/1000 [1:03:00<01:17,  3.86s/it][Succeeded / Failed / Skipped / Total] 660 / 299 / 21 / 980:  98%|█████████▊| 981/1000 [1:03:01<01:13,  3.85s/it][Succeeded / Failed / Skipped / Total] 661 / 299 / 21 / 981:  98%|█████████▊| 981/1000 [1:03:01<01:13,  3.85s/it][Succeeded / Failed / Skipped / Total] 661 / 299 / 21 / 981:  98%|█████████▊| 982/1000 [1:03:02<01:09,  3.85s/it]Read verification type info . --> Extract an aurora --> Socre: 1.0

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int [[verificationTypeInfoOffset]] , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int [[currentOffset]] = [[verificationTypeInfoOffset]] ; int tag = b [ [[currentOffset]] ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( [[currentOffset]] , charBuffer ) ; [[currentOffset]] += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( [[currentOffset]] ) , labels ) ; [[currentOffset]] += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return [[currentOffset]] ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[apothecary]] ( final int [[cru]] , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int [[aurora]] = [[cru]] ; int tag = b [ [[aurora]] ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( [[aurora]] , charBuffer ) ; [[aurora]] += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( [[aurora]] ) , labels ) ; [[aurora]] += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return [[aurora]] ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 977 ---------------------------------------------
Add a search path . --> Add shannon file --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI searchPath ) { File [[file]] ; try { [[file]] = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[shannon]] ( final URI searchPath ) { File [[kissy]] ; try { [[kissy]] = new File ( [[shannon]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[shannon]] , ex ) ; } addPath ( [[kissy]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 978 ---------------------------------------------
Exclude patterns that match the given pattern . --> Excludes all matching rules --> Socre: 1.0

[[[[Adv]]]]: public FindFile exclude ( final String ... [[patterns]] ) { for ( String pattern : [[patterns]] ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile exclude ( final String ... [[console]] ) { for ( String pattern : [[console]] ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 979 ---------------------------------------------
Initialize the rules . --> Initialize the rules --> Socre: 1.0

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] [[files]] = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { [[files]] [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( [[files]] ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] [[tectonics]] = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { [[tectonics]] [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( [[tectonics]] ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 980 ---------------------------------------------
Add a path . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addPath]] ( final File [[path]] ) { if ( ! [[path]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[path]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void [[dilithium]] ( final File [[hoard]] ) { if ( ! [[hoard]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[hoard]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 981 ---------------------------------------------
Includes specified patterns . --> add rule to list of rules --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[include]] ( final String ... [[patterns]] ) { for ( String pattern : [[patterns]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile [[bronwyn]] ( final String ... [[benjamins]] ) { for ( String pattern : [[benjamins]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 982 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 661 / 300 / 21 / 982:  98%|█████████▊| 982/1000 [1:03:02<01:09,  3.85s/it][Succeeded / Failed / Skipped / Total] 661 / 300 / 21 / 982:  98%|█████████▊| 983/1000 [1:03:03<01:05,  3.85s/it][Succeeded / Failed / Skipped / Total] 661 / 301 / 21 / 983:  98%|█████████▊| 983/1000 [1:03:03<01:05,  3.85s/it][Succeeded / Failed / Skipped / Total] 661 / 301 / 21 / 983:  98%|█████████▊| 984/1000 [1:03:04<01:01,  3.85s/it][Succeeded / Failed / Skipped / Total] 661 / 302 / 21 / 984:  98%|█████████▊| 984/1000 [1:03:04<01:01,  3.85s/it][Succeeded / Failed / Skipped / Total] 661 / 302 / 21 / 984:  98%|█████████▊| 985/1000 [1:03:08<00:57,  3.85s/it][Succeeded / Failed / Skipped / Total] 661 / 303 / 21 / 985:  98%|█████████▊| 985/1000 [1:03:08<00:57,  3.85s/it][Succeeded / Failed / Skipped / Total] 661 / 303 / 21 / 985:  99%|█████████▊| 986/1000 [1:03:09<00:53,  3.84s/it][Succeeded / Failed / Skipped / Total] 661 / 304 / 21 / 986:  99%|█████████▊| 986/1000 [1:03:09<00:53,  3.84s/it][Succeeded / Failed / Skipped / Total] 661 / 304 / 21 / 986:  99%|█████████▊| 987/1000 [1:03:11<00:49,  3.84s/it][Succeeded / Failed / Skipped / Total] 661 / 305 / 21 / 987:  99%|█████████▊| 987/1000 [1:03:11<00:49,  3.84s/it][Succeeded / Failed / Skipped / Total] 661 / 305 / 21 / 987:  99%|█████████▉| 988/1000 [1:03:20<00:46,  3.85s/it][Succeeded / Failed / Skipped / Total] 661 / 306 / 21 / 988:  99%|█████████▉| 988/1000 [1:03:20<00:46,  3.85s/it][Succeeded / Failed / Skipped / Total] 661 / 306 / 21 / 988:  99%|█████████▉| 989/1000 [1:03:22<00:42,  3.84s/it]Returns an iterator over the contained files . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[regretting]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 983 ---------------------------------------------
Add a search path --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL searchPath ) { File file = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[punk]] ( final URL searchPath ) { File file = FileUtil . toContainerFile ( [[punk]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[punk]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 984 ---------------------------------------------
Returns the ctor descriptor with the specified arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... [[args]] ) { ctors : for ( CtorDescriptor [[ctorDescriptor]] : allCtors ) { Class [ ] [[arg]] = [[ctorDescriptor]] . getParameters ( ) ; if ( [[arg]] . length != [[args]] . length ) { continue ; } for ( int j = 0 ; j < [[arg]] . length ; j ++ ) { if ( [[arg]] [ j ] != [[args]] [ j ] ) { continue ctors ; } } return [[ctorDescriptor]] ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... [[seco]] ) { ctors : for ( CtorDescriptor [[alyssa]] : allCtors ) { Class [ ] [[devices]] = [[alyssa]] . getParameters ( ) ; if ( [[devices]] . length != [[seco]] . length ) { continue ; } for ( int j = 0 ; j < [[devices]] . length ; j ++ ) { if ( [[devices]] [ j ] != [[seco]] [ j ] ) { continue ctors ; } } return [[alyssa]] ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 985 ---------------------------------------------
Return the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[colette]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 986 ---------------------------------------------
Returns a buffered writer . --> [[[FAILED]]]

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[angular]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 987 ---------------------------------------------
Returns all the files in the iterator . --> [[[FAILED]]]

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > [[allFiles]] = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { [[allFiles]] . add ( file ) ; } return [[allFiles]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[schaffer]] ( ) { List < File > [[crooks]] = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { [[crooks]] . add ( file ) ; } return [[crooks]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 988 ---------------------------------------------
Gets the size of this object . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[lindquist]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 989 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 661 / 307 / 21 / 989:  99%|█████████▉| 989/1000 [1:03:22<00:42,  3.84s/it][Succeeded / Failed / Skipped / Total] 661 / 307 / 21 / 989:  99%|█████████▉| 990/1000 [1:03:22<00:38,  3.84s/it][Succeeded / Failed / Skipped / Total] 661 / 308 / 21 / 990:  99%|█████████▉| 990/1000 [1:03:22<00:38,  3.84s/it][Succeeded / Failed / Skipped / Total] 661 / 308 / 21 / 990:  99%|█████████▉| 991/1000 [1:03:22<00:34,  3.84s/it][Succeeded / Failed / Skipped / Total] 661 / 309 / 21 / 991:  99%|█████████▉| 991/1000 [1:03:22<00:34,  3.84s/it][Succeeded / Failed / Skipped / Total] 661 / 309 / 21 / 991:  99%|█████████▉| 992/1000 [1:03:29<00:30,  3.84s/it][Succeeded / Failed / Skipped / Total] 662 / 309 / 21 / 992:  99%|█████████▉| 992/1000 [1:03:29<00:30,  3.84s/it][Succeeded / Failed / Skipped / Total] 662 / 309 / 21 / 992:  99%|█████████▉| 993/1000 [1:03:29<00:26,  3.84s/it][Succeeded / Failed / Skipped / Total] 663 / 309 / 21 / 993:  99%|█████████▉| 993/1000 [1:03:29<00:26,  3.84s/it][Succeeded / Failed / Skipped / Total] 663 / 309 / 21 / 993:  99%|█████████▉| 994/1000 [1:03:33<00:23,  3.84s/it][Succeeded / Failed / Skipped / Total] 664 / 309 / 21 / 994:  99%|█████████▉| 994/1000 [1:03:33<00:23,  3.84s/it][Succeeded / Failed / Skipped / Total] 664 / 309 / 21 / 994: 100%|█████████▉| 995/1000 [1:03:35<00:19,  3.83s/it]Returns the class name as a string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[stringBuilder]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { [[stringBuilder]] . append ( "[]" ) ; } return [[stringBuilder]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[mette]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[caff]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { [[caff]] . append ( "[]" ) ; } return [[caff]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 990 ---------------------------------------------
Resolves the wiring mode . --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode [[resolveBeanWiringMode]] ( final Class [[type]] ) { PetiteBean [[petiteBean]] = ( ( Class < ? > ) [[type]] ) . getAnnotation ( PetiteBean . class ) ; return [[petiteBean]] != null ? [[petiteBean]] . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode [[baker]] ( final Class [[tomasz]] ) { PetiteBean [[ashland]] = ( ( Class < ? > ) [[tomasz]] ) . getAnnotation ( PetiteBean . class ) ; return [[ashland]] != null ? [[ashland]] . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 991 ---------------------------------------------
Append descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder stringBuilder ) { if ( sort == OBJECT ) { stringBuilder . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { stringBuilder . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { stringBuilder . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[busboys]] ( final StringBuilder stringBuilder ) { if ( sort == OBJECT ) { stringBuilder . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { stringBuilder . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { stringBuilder . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 992 ---------------------------------------------
Sets the rollback only . --> zAddTransactionException --> Socre: 1.0

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[zai]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 993 ---------------------------------------------
Commit or rollback resources . --> kadow --> Socre: 1.0

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[krakow]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .
--------------------------------------------- Result 994 ---------------------------------------------
Gets constructor descriptor . --> Calculate class name --> Socre: 1.0

[[[[Adv]]]]: public static String [[getConstructorDescriptor]] ( final Constructor < ? > [[constructor]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[constructor]] . getParameterTypes ( ) ; for ( Class < ? > [[parameter]] : parameters ) { appendDescriptor ( [[parameter]] , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String [[acetone]] ( final Constructor < ? > [[calzone]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[calzone]] . getParameterTypes ( ) ; for ( Class < ? > [[crore]] : parameters ) { appendDescriptor ( [[crore]] , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 995 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 665 / 309 / 21 / 995: 100%|█████████▉| 995/1000 [1:03:35<00:19,  3.83s/it][Succeeded / Failed / Skipped / Total] 665 / 309 / 21 / 995: 100%|█████████▉| 996/1000 [1:03:38<00:15,  3.83s/it][Succeeded / Failed / Skipped / Total] 665 / 310 / 21 / 996: 100%|█████████▉| 996/1000 [1:03:38<00:15,  3.83s/it][Succeeded / Failed / Skipped / Total] 665 / 310 / 21 / 996: 100%|█████████▉| 997/1000 [1:03:40<00:11,  3.83s/it][Succeeded / Failed / Skipped / Total] 666 / 310 / 21 / 997: 100%|█████████▉| 997/1000 [1:03:40<00:11,  3.83s/it][Succeeded / Failed / Skipped / Total] 666 / 310 / 21 / 997: 100%|█████████▉| 998/1000 [1:03:43<00:07,  3.83s/it][Succeeded / Failed / Skipped / Total] 667 / 310 / 21 / 998: 100%|█████████▉| 998/1000 [1:03:43<00:07,  3.83s/it][Succeeded / Failed / Skipped / Total] 667 / 310 / 21 / 998: 100%|█████████▉| 999/1000 [1:03:54<00:03,  3.84s/it][Succeeded / Failed / Skipped / Total] 667 / 311 / 21 / 999: 100%|█████████▉| 999/1000 [1:03:54<00:03,  3.84s/it][Succeeded / Failed / Skipped / Total] 667 / 311 / 21 / 999: 100%|██████████| 1000/1000 [1:04:07<00:00,  3.85s/it]Gets a method descriptor . --> generates bean documentation --> Socre: 1.0

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method [[method]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[method]] . getParameterTypes ( ) ; for ( Class < ? > [[parameter]] : parameters ) { appendDescriptor ( [[parameter]] , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( [[method]] . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[bean]] ( final Method [[medical]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[medical]] . getParameterTypes ( ) ; for ( Class < ? > [[figment]] : parameters ) { appendDescriptor ( [[figment]] , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( [[medical]] . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 996 ---------------------------------------------
Resolves the bean name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class type , final boolean useLongTypeName ) { PetiteBean [[petiteBean]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String [[name]] = null ; if ( [[petiteBean]] != null ) { [[name]] = [[petiteBean]] . value ( ) . trim ( ) ; } if ( ( [[name]] == null ) || ( [[name]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[name]] = type . getName ( ) ; } else { [[name]] = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return [[name]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[defrauding]] ( final Class type , final boolean useLongTypeName ) { PetiteBean [[johannes]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String [[brushes]] = null ; if ( [[johannes]] != null ) { [[brushes]] = [[johannes]] . value ( ) . trim ( ) ; } if ( ( [[brushes]] == null ) || ( [[brushes]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[brushes]] = type . getName ( ) ; } else { [[brushes]] = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return [[brushes]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 997 ---------------------------------------------
Gets the arguments and returns the size of the arguments . --> ululul --> Socre: 1.0

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String [[methodDescriptor]] ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[aul]] ( final String [[crore]] ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 998 ---------------------------------------------
Gets the method descriptor . --> Calculate micahah --> Socre: 1.0

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Type returnType , final Type ... argumentTypes ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; returnType . appendDescriptor ( [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String [[micah]] ( final Type returnType , final Type ... argumentTypes ) { StringBuilder [[kublai]] = new StringBuilder ( ) ; [[kublai]] . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( [[kublai]] ) ; } [[kublai]] . append ( ' ' ) ; returnType . appendDescriptor ( [[kublai]] ) ; return [[kublai]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 999 ---------------------------------------------
Rolls back all resources . --> [[[FAILED]]]

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception [[lastException]] = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { [[lastException]] = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( [[lastException]] != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , [[lastException]] ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception [[attributes]] = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { [[attributes]] = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( [[attributes]] != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , [[attributes]] ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .
--------------------------------------------- Result 1000 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 667 / 312 / 21 / 1000: 100%|██████████| 1000/1000 [1:04:07<00:00,  3.85s/it]Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  unk
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapRandom(
    (max_candidates):  50
    (embedding):  WordEmbedding
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 667 / 312 / 21 / 1000: 100%|██████████| 1000/1000 [1:04:10<00:00,  3.85s/it]Request a resource from transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[E]] > [[E]] requestResource ( final Class < [[E]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[E]] resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[E]] > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < [[chums]] > [[chums]] requestResource ( final Class < [[chums]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[chums]] resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[chums]] > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 667    |
| Number of failed attacks:     | 312    |
| Number of skipped attacks:    | 21     |
| Original accuracy:            | 97.9%  |
| Accuracy under attack:        | 31.2%  |
| Attack success rate:          | 68.13% |
| Average perturbed word %:     | 55.19% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 131.22 |
| Original BLEU-4:              | 17.68  |
| Perturbed BLEU-4:             | 2.15   |
+-------------------------------+--------+


textattack: Running 8 worker(s) on 8 GPU(s).
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 1/1000 [00:00<00:01, 987.59it/s][Succeeded / Failed / Skipped / Total] 1 / 1 / 0 / 2:   0%|          | 2/1000 [00:00<00:00, 1077.95it/s][Succeeded / Failed / Skipped / Total] 1 / 2 / 0 / 3:   0%|          | 3/1000 [00:00<00:00, 1348.80it/s][Succeeded / Failed / Skipped / Total] 1 / 3 / 0 / 4:   0%|          | 4/1000 [00:00<00:00, 1470.01it/s][Succeeded / Failed / Skipped / Total] 1 / 4 / 0 / 5:   0%|          | 5/1000 [00:00<00:00, 1566.09it/s][Succeeded / Failed / Skipped / Total] 1 / 5 / 0 / 6:   1%|          | 6/1000 [00:00<00:00, 1637.55it/s]--------------------------------------------- Result 1 ---------------------------------------------
Wrap an observable . --> Gibt das fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas fas --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[hamstring]] ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 2 ---------------------------------------------
Emits a value in a fast - path order . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[fastPathOrderedEmit]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[observer]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[observer]] , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[observer]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void [[domini]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[populist]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[populist]] , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[populist]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 3 ---------------------------------------------
Returns an observable that is sorted by the elements of this observable sequence using the given sort function . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[celso]] ( Comparator < ? super T > [[mantra]] ) { ObjectHelper . requireNonNull ( [[mantra]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[mantra]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 4 ---------------------------------------------
Creates a new unicast processor with the given capacity . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[stymied]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 5 ---------------------------------------------
Performs a replay of the provided connectable observable using the specified scheduler . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[observeOn]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[poplin]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 6 ---------------------------------------------
Creates a new unicast processor with a given capacity . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int [[capacityHint]] , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( [[capacityHint]] , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[qaddafi]] ( int [[percolator]] , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( [[percolator]] , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 7 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 2 / 5 / 0 / 7:   1%|          | 7/1000 [00:00<00:00, 1650.56it/s][Succeeded / Failed / Skipped / Total] 3 / 5 / 0 / 8:   1%|          | 8/1000 [00:00<00:00, 1750.18it/s][Succeeded / Failed / Skipped / Total] 3 / 6 / 0 / 9:   1%|          | 9/1000 [00:00<00:00, 1842.30it/s][Succeeded / Failed / Skipped / Total] 3 / 7 / 0 / 10:   1%|          | 10/1000 [00:00<00:00, 1937.77it/s][Succeeded / Failed / Skipped / Total] 3 / 8 / 0 / 11:   1%|          | 11/1000 [00:00<00:00, 2012.10it/s]Try to apply a function to a Publisher and return true if it succeeds --> Exposed for testing purposes only --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > source , Subscriber < ? super R > [[subscriber]] , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( [[subscriber]] ) ; return "True" == "True" ; } Publisher < ? extends R > [[r]] ; try { [[r]] = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return "True" == "True" ; } if ( [[r]] instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) [[r]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( [[subscriber]] ) ; return "True" == "True" ; } [[subscriber]] . onSubscribe ( new ScalarSubscription < R > ( [[subscriber]] , u ) ) ; } else { [[r]] . subscribe ( [[subscriber]] ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[exterior]] ( Publisher < T > source , Subscriber < ? super R > [[radu]] , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[radu]] ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( [[radu]] ) ; return "True" == "True" ; } Publisher < ? extends R > [[kazimierz]] ; try { [[kazimierz]] = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[radu]] ) ; return "True" == "True" ; } if ( [[kazimierz]] instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) [[kazimierz]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[radu]] ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( [[radu]] ) ; return "True" == "True" ; } [[radu]] . onSubscribe ( new ScalarSubscription < R > ( [[radu]] , u ) ) ; } else { [[kazimierz]] . subscribe ( [[radu]] ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 8 ---------------------------------------------
Resets all internal state to null . --> halve the internal state of this class --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[False]]" != "[[False]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[halve]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[Rulebook]]" != "[[Rulebook]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 9 ---------------------------------------------
Creates a Flowable from a scalar value using the given function . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Flowable < U > [[scalarXMap]] ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > [[awaken]] ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > [[barclay]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , [[barclay]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 10 ---------------------------------------------
Throws a NullPointerException if the object is null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[neglects]] > [[neglects]] requireNonNull ( [[neglects]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 11 ---------------------------------------------
Creates a Maybe from a Completable source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource [[completableSource]] ) { ObjectHelper . requireNonNull ( [[completableSource]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[completableSource]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[controllers]] ( CompletableSource [[manhunt]] ) { ObjectHelper . requireNonNull ( [[manhunt]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[manhunt]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 12 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 3 / 9 / 0 / 12:   1%|          | 12/1000 [00:00<00:00, 2078.27it/s][Succeeded / Failed / Skipped / Total] 4 / 9 / 0 / 13:   1%|▏         | 13/1000 [00:00<00:00, 2105.09it/s][Succeeded / Failed / Skipped / Total] 4 / 10 / 0 / 14:   1%|▏         | 14/1000 [00:00<00:00, 2149.90it/s][Succeeded / Failed / Skipped / Total] 4 / 11 / 0 / 15:   2%|▏         | 15/1000 [00:00<00:00, 2200.73it/s][Succeeded / Failed / Skipped / Total] 4 / 12 / 0 / 16:   2%|▏         | 16/1000 [00:00<00:00, 2254.32it/s][Succeeded / Failed / Skipped / Total] 4 / 13 / 0 / 17:   2%|▏         | 17/1000 [00:00<00:00, 2296.32it/s][Succeeded / Failed / Skipped / Total] 4 / 14 / 0 / 18:   2%|▏         | 18/1000 [00:00<00:00, 2336.15it/s][Succeeded / Failed / Skipped / Total] 4 / 15 / 0 / 19:   2%|▏         | 19/1000 [00:00<00:00, 2379.21it/s][Succeeded / Failed / Skipped / Total] 4 / 16 / 0 / 20:   2%|▏         | 20/1000 [00:00<00:00, 2413.02it/s][Succeeded / Failed / Skipped / Total] 4 / 17 / 0 / 21:   2%|▏         | 21/1000 [00:00<00:00, 2449.88it/s]Creates a Maybe from a single source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[kanagawa]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 13 ---------------------------------------------
Attempts to retry this Maybe with the specified number of times . --> Retry with bournemouth and muslimah --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[times]] , Predicate < ? super Throwable > [[predicate]] ) { return toFlowable ( ) . retry ( [[times]] , [[predicate]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[bournemouth]] , Predicate < ? super Throwable > [[muslimah]] ) { return toFlowable ( ) . retry ( [[bournemouth]] , [[muslimah]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 14 ---------------------------------------------
Returns the identity function . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[T]] > Function < [[T]] , [[T]] > [[identity]] ( ) { return ( Function < [[T]] , [[T]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[lebanese]] > Function < [[lebanese]] , [[lebanese]] > [[tribulations]] ( ) { return ( Function < [[lebanese]] , [[lebanese]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 15 ---------------------------------------------
Creates a Callable that just returns the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[linguini]] ( T [[hubcap]] ) { return new JustValue < Object , T > ( [[hubcap]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 16 ---------------------------------------------
Creates a new unicast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[alisha]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 17 ---------------------------------------------
Creates a function that just returns the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > justFunction ( U [[value]] ) { return new JustValue < [[T]] , U > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < [[galloping]] , U > Function < [[galloping]] , U > justFunction ( U [[misguided]] ) { return new JustValue < [[galloping]] , U > ( [[misguided]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 18 ---------------------------------------------
Returns a function that casts the target value to the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[castFunction]] ( Class < U > target ) { return new CastToClass < [[T]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < [[afire]] , U > Function < [[afire]] , U > [[aish]] ( Class < U > target ) { return new CastToClass < [[afire]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 19 ---------------------------------------------
Blocks until the count reaches zero or an exception is thrown . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[housemother]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 20 ---------------------------------------------
Creates a new unicast subject with the given capacity . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[carwash]] ( int [[amiss]] ) { return new UnicastSubject < T > ( [[amiss]] , "[[Disturbing]]" == "[[Disturbing]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 21 ---------------------------------------------
Creates a new UnicastSubject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[divot]] ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 22 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 5 / 17 / 0 / 22:   2%|▏         | 22/1000 [00:00<00:00, 2466.84it/s][Succeeded / Failed / Skipped / Total] 6 / 17 / 0 / 23:   2%|▏         | 23/1000 [00:00<00:00, 2475.79it/s][Succeeded / Failed / Skipped / Total] 7 / 17 / 0 / 24:   2%|▏         | 24/1000 [00:00<00:00, 2498.90it/s][Succeeded / Failed / Skipped / Total] 7 / 17 / 0 / 24:   2%|▎         | 25/1000 [00:08<05:31,  2.94it/s]  [Succeeded / Failed / Skipped / Total] 7 / 18 / 0 / 25:   2%|▎         | 25/1000 [00:08<05:31,  2.94it/s][Succeeded / Failed / Skipped / Total] 7 / 19 / 0 / 26:   3%|▎         | 26/1000 [00:10<06:29,  2.50it/s][Succeeded / Failed / Skipped / Total] 7 / 20 / 0 / 27:   3%|▎         | 27/1000 [00:13<07:53,  2.05it/s][Succeeded / Failed / Skipped / Total] 8 / 20 / 0 / 28:   3%|▎         | 28/1000 [00:22<13:04,  1.24it/s][Succeeded / Failed / Skipped / Total] 9 / 20 / 0 / 29:   3%|▎         | 29/1000 [00:23<13:21,  1.21it/s]Creates a new unicast subject with the given capacity . --> kellogg subject subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] , Runnable [[onTerminate]] ) { return new UnicastSubject < T > ( [[capacityHint]] , [[onTerminate]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[kellogg]] ( int [[convince]] , Runnable [[notorious]] ) { return new UnicastSubject < T > ( [[convince]] , [[notorious]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 23 ---------------------------------------------
Blocks until the condition is satisfied or the condition is not met . --> Methode permettant de kla --> Socre: 1.0

[[[[Adv]]]]: public boolean [[blockingAwait]] ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean [[kla]] ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "[[Resumé]]" == "[[Resumé]]" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 24 ---------------------------------------------
Requests messages from the given subscription . --> Bogotá unwelcome --> Socre: 1.0

[[[[Adv]]]]: public static void [[request]] ( Subscription [[s]] , int prefetch ) { [[s]] . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void [[bogotá]] ( Subscription [[unwelcome]] , int prefetch ) { [[unwelcome]] . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 25 ---------------------------------------------
Returns the value of the notification . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object [[o]] = value ; if ( [[o]] != null && ! NotificationLite . isError ( [[o]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[czech]] ( ) { Object [[acquaintances]] = value ; if ( [[acquaintances]] != null && ! NotificationLite . isError ( [[acquaintances]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 26 ---------------------------------------------
Blocks until the count reaches zero or an exception is thrown . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long timeout , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[unit]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[unit]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[corbeau]] ( long timeout , TimeUnit [[dashwood]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[dashwood]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[dashwood]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 27 ---------------------------------------------
Returns the error associated with this notification . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object [[o]] = value ; if ( NotificationLite . isError ( [[o]] ) ) { return NotificationLite . getError ( [[o]] ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[lollipops]] ( ) { Object [[bugged]] = value ; if ( NotificationLite . isError ( [[bugged]] ) ) { return NotificationLite . getError ( [[bugged]] ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 28 ---------------------------------------------
Returns the upper bound of Long . MAX_VALUE if the result is negative . --> numero a numero b --> Socre: 1.0

[[[[Adv]]]]: public static long [[addCap]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[numero]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 29 ---------------------------------------------
Posts a complete event to the subscriber . --> private static final long COMPLETED_MASK = 0 ; --> Socre: 1.0

[[[[Adv]]]]: public static < T > void [[postComplete]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong [[state]] , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[state]] . get ( ) , actual , queue , [[state]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[state]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void [[privately]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong [[loam]] , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[loam]] . get ( ) , actual , queue , [[loam]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[loam]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 30 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 9 / 21 / 0 / 30:   3%|▎         | 30/1000 [00:35<18:56,  1.17s/it][Succeeded / Failed / Skipped / Total] 10 / 21 / 0 / 31:   3%|▎         | 31/1000 [00:46<24:18,  1.51s/it][Succeeded / Failed / Skipped / Total] 11 / 21 / 0 / 32:   3%|▎         | 32/1000 [01:07<33:51,  2.10s/it][Succeeded / Failed / Skipped / Total] 11 / 22 / 0 / 33:   3%|▎         | 33/1000 [01:26<42:16,  2.62s/it][Succeeded / Failed / Skipped / Total] 11 / 23 / 0 / 34:   3%|▎         | 34/1000 [01:36<45:27,  2.82s/it][Succeeded / Failed / Skipped / Total] 11 / 24 / 0 / 35:   4%|▎         | 35/1000 [01:41<46:46,  2.91s/it][Succeeded / Failed / Skipped / Total] 11 / 25 / 0 / 36:   4%|▎         | 36/1000 [01:44<46:34,  2.90s/it][Succeeded / Failed / Skipped / Total] 11 / 26 / 0 / 37:   4%|▎         | 37/1000 [01:45<45:58,  2.86s/it]Completes the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[complete]] ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void [[divya]] ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 31 ---------------------------------------------
Multiply two longs . If the result is Long . MAX_VALUE return Long . MAX_VALUE . --> Multiply a by boldness --> Socre: 1.0

[[[[Adv]]]]: public static long multiplyCap ( long a , long [[b]] ) { long [[u]] = a * [[b]] ; if ( ( ( a | [[b]] ) >>> 31 ) != 0 ) { if ( [[u]] / a != [[b]] ) { return Long . MAX_VALUE ; } } return [[u]] ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long multiplyCap ( long a , long [[boldness]] ) { long [[absentee]] = a * [[boldness]] ; if ( ( ( a | [[boldness]] ) >>> 31 ) != 0 ) { if ( [[absentee]] / a != [[boldness]] ) { return Long . MAX_VALUE ; } } return [[absentee]] ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 32 ---------------------------------------------
Adds an object to the end of the list . --> The muslimah is the muslimah --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Object [[o]] ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[muslimah]] ( Object [[retold]] ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 33 ---------------------------------------------
Converts a Throwable to a NullPointerException . --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException [[toNpe]] ( Throwable ex ) { NullPointerException [[npe]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[npe]] . initCause ( ex ) ; return [[npe]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException [[putsch]] ( Throwable ex ) { NullPointerException [[airborne]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[airborne]] . initCause ( ex ) ; return [[airborne]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 34 ---------------------------------------------
Shuts down the executor service . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService [[exec]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[exec]] != null ) { [[exec]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[salvageable]] ( ) { ScheduledExecutorService [[bhavna]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[bhavna]] != null ) { [[bhavna]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 35 ---------------------------------------------
Validates that the given disposables are non - null . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[validate]] ( Disposable [[upstream]] , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[upstream]] != null ) { next . dispose ( ) ; if ( [[upstream]] != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[nikki]] ( Disposable [[brothers]] , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[brothers]] != null ) { next . dispose ( ) ; if ( [[brothers]] != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 36 ---------------------------------------------
Atomically adds n to the requested counter . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[add]] ( AtomicLong requested , long n ) { for ( ; ; ) { long [[r]] = requested . get ( ) ; if ( [[r]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( [[r]] , n ) ; if ( requested . compareAndSet ( [[r]] , u ) ) { return [[r]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long [[doña]] ( AtomicLong requested , long n ) { for ( ; ; ) { long [[dishonorable]] = requested . get ( ) ; if ( [[dishonorable]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( [[dishonorable]] , n ) ; if ( requested . compareAndSet ( [[dishonorable]] , u ) ) { return [[dishonorable]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 37 ---------------------------------------------
Validates the upstream subscription and the next subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[validate]] ( Subscription [[upstream]] , Subscription [[next]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( [[upstream]] != null ) { [[next]] . cancel ( ) ; if ( [[upstream]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[zurich]] ( Subscription [[acts]] , Subscription [[mosca]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[mosca]] , "next is null" ) ; if ( [[acts]] != null ) { [[mosca]] . cancel ( ) ; if ( [[acts]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 38 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 12 / 26 / 0 / 38:   4%|▍         | 38/1000 [02:06<53:21,  3.33s/it][Succeeded / Failed / Skipped / Total] 12 / 27 / 0 / 39:   4%|▍         | 39/1000 [02:06<52:03,  3.25s/it][Succeeded / Failed / Skipped / Total] 12 / 28 / 0 / 40:   4%|▍         | 40/1000 [02:10<52:20,  3.27s/it][Succeeded / Failed / Skipped / Total] 13 / 28 / 0 / 41:   4%|▍         | 41/1000 [02:14<52:20,  3.27s/it][Succeeded / Failed / Skipped / Total] 13 / 29 / 0 / 42:   4%|▍         | 42/1000 [02:24<55:07,  3.45s/it]Loops through the queue and emits the result . --> valley starts with extracurriculars --> Socre: 1.0

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "[[False]]" != "[[False]]" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[valley]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "[[Extracurricular]]" != "[[Extracurricular]]" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 39 ---------------------------------------------
Atomically compareAndSets the upstream AtomicReference to null and disposes the next disposable if the AtomicReference doesn t exist . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Disposable > [[upstream]] , Disposable next , Class < ? > [[observer]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( [[upstream]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[observer]] ) ; } return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean [[switcheroo]] ( AtomicReference < Disposable > [[disintegrate]] , Disposable next , Class < ? > [[pianists]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[disintegrate]] . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( [[disintegrate]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[pianists]] ) ; } return "[[Depositing]]" != "[[Depositing]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 40 ---------------------------------------------
Atomically sets the value of the AtomicReference to null and cancels the next subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Subscription > [[upstream]] , Subscription [[next]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , [[next]] ) ) { [[next]] . cancel ( ) ; if ( [[upstream]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean [[beefing]] ( AtomicReference < Subscription > [[iridescent]] , Subscription [[comédie]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[comédie]] , "next is null" ) ; if ( ! [[iridescent]] . compareAndSet ( null , [[comédie]] ) ) { [[comédie]] . cancel ( ) ; if ( [[iridescent]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "[[Depict]]" == "[[Depict]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 41 ---------------------------------------------
Wraps an exception in a RuntimeException if it is not already one . --> judiciary uruguay --> Socre: 1.0

[[[[Adv]]]]: public static RuntimeException [[wrapOrThrow]] ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException [[judiciary]] ( Throwable [[uruguay]] ) { if ( [[uruguay]] instanceof Error ) { throw ( Error ) [[uruguay]] ; } if ( [[uruguay]] instanceof RuntimeException ) { return ( RuntimeException ) [[uruguay]] ; } return new RuntimeException ( [[uruguay]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 42 ---------------------------------------------
Drains a queue of values up to Long . MAX_VALUE . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 43 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 13 / 30 / 0 / 43:   4%|▍         | 43/1000 [02:37<58:35,  3.67s/it][Succeeded / Failed / Skipped / Total] 13 / 31 / 0 / 44:   4%|▍         | 44/1000 [02:37<57:12,  3.59s/it][Succeeded / Failed / Skipped / Total] 13 / 32 / 0 / 45:   4%|▍         | 45/1000 [02:45<58:22,  3.67s/it][Succeeded / Failed / Skipped / Total] 13 / 33 / 0 / 46:   5%|▍         | 46/1000 [02:46<57:24,  3.61s/it][Succeeded / Failed / Skipped / Total] 13 / 34 / 0 / 47:   5%|▍         | 47/1000 [02:59<1:00:48,  3.83s/it][Succeeded / Failed / Skipped / Total] 13 / 35 / 0 / 48:   5%|▍         | 48/1000 [03:01<59:53,  3.78s/it]  [Succeeded / Failed / Skipped / Total] 13 / 36 / 0 / 49:   5%|▍         | 49/1000 [03:23<1:05:50,  4.15s/it][Succeeded / Failed / Skipped / Total] 13 / 36 / 0 / 49:   5%|▌         | 50/1000 [03:32<1:07:19,  4.25s/it][Succeeded / Failed / Skipped / Total] 13 / 37 / 0 / 50:   5%|▌         | 50/1000 [03:32<1:07:19,  4.25s/it][Succeeded / Failed / Skipped / Total] 13 / 37 / 0 / 50:   5%|▌         | 51/1000 [03:33<1:06:03,  4.18s/it][Succeeded / Failed / Skipped / Total] 13 / 38 / 0 / 51:   5%|▌         | 51/1000 [03:33<1:06:03,  4.18s/it][Succeeded / Failed / Skipped / Total] 13 / 38 / 0 / 51:   5%|▌         | 52/1000 [04:02<1:13:32,  4.65s/it]Creates a new scheduled executor service with the specified thread factory . --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory [[factory]] ) { final ScheduledExecutorService [[exec]] = Executors . newScheduledThreadPool ( 1 , [[factory]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[exec]] ) ; return [[exec]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[wollen]] ( ThreadFactory [[packaged]] ) { final ScheduledExecutorService [[congregation]] = Executors . newScheduledThreadPool ( 1 , [[packaged]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[congregation]] ) ; return [[congregation]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 44 ---------------------------------------------
Clears the set of disposables . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[clear]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void [[anyhow]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 45 ---------------------------------------------
Throws the given Throwable if it is not already an Exception . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[E]] [[extends]] Throwable > Exception throwIfThrowable ( Throwable e ) throws [[E]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[E]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[abattoir]] [[heffalumps]] Throwable > Exception throwIfThrowable ( Throwable e ) throws [[abattoir]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[abattoir]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 46 ---------------------------------------------
Returns the number of resources in the set . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[set]] = resources ; return [[set]] != null ? [[set]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[você]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[surged]] = resources ; return [[surged]] != null ? [[surged]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 47 ---------------------------------------------
Starts the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[rajasthan]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 48 ---------------------------------------------
Starts the unbounded subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[abolitionist]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 49 ---------------------------------------------
Creates an Observable composed of the results of applying the given function to an observable source . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T [[value]] , Function < ? super T , ? extends ObservableSource < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[value]] , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[carrara]] ( T [[procession]] , Function < ? super T , ? extends ObservableSource < ? extends U > > [[trattoria]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[procession]] , [[trattoria]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 50 ---------------------------------------------
Sets the subscription to the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription [[s]] ) { if ( cancelled ) { [[s]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[s]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[a]] = actual ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } actual = [[s]] ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { [[s]] . request ( r ) ; } return ; } Subscription [[a]] = missedSubscription . getAndSet ( [[s]] ) ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[likes]] ( Subscription [[premiums]] ) { if ( cancelled ) { [[premiums]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[premiums]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[keypad]] = actual ; if ( [[keypad]] != null && cancelOnReplace ) { [[keypad]] . cancel ( ) ; } actual = [[premiums]] ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { [[premiums]] . request ( r ) ; } return ; } Subscription [[keypad]] = missedSubscription . getAndSet ( [[premiums]] ) ; if ( [[keypad]] != null && cancelOnReplace ) { [[keypad]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 51 ---------------------------------------------
Returns the current thread s disposable . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Disposable [[get]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable [[bridgette]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
[Succeeded / Failed / Skipped / Total] 13 / 39 / 0 / 52:   5%|▌         | 52/1000 [04:02<1:13:32,  4.66s/it][Succeeded / Failed / Skipped / Total] 13 / 39 / 0 / 52:   5%|▌         | 53/1000 [04:05<1:13:06,  4.63s/it][Succeeded / Failed / Skipped / Total] 13 / 40 / 0 / 53:   5%|▌         | 53/1000 [04:05<1:13:06,  4.63s/it][Succeeded / Failed / Skipped / Total] 13 / 40 / 0 / 53:   5%|▌         | 54/1000 [04:13<1:14:01,  4.69s/it][Succeeded / Failed / Skipped / Total] 13 / 41 / 0 / 54:   5%|▌         | 54/1000 [04:13<1:14:01,  4.69s/it][Succeeded / Failed / Skipped / Total] 13 / 41 / 0 / 54:   6%|▌         | 55/1000 [04:23<1:15:34,  4.80s/it][Succeeded / Failed / Skipped / Total] 14 / 41 / 0 / 55:   6%|▌         | 55/1000 [04:23<1:15:34,  4.80s/it][Succeeded / Failed / Skipped / Total] 14 / 41 / 0 / 55:   6%|▌         | 56/1000 [04:27<1:15:16,  4.78s/it][Succeeded / Failed / Skipped / Total] 15 / 41 / 0 / 56:   6%|▌         | 56/1000 [04:27<1:15:16,  4.78s/it][Succeeded / Failed / Skipped / Total] 15 / 41 / 0 / 56:   6%|▌         | 57/1000 [04:30<1:14:38,  4.75s/it][Succeeded / Failed / Skipped / Total] 16 / 41 / 0 / 57:   6%|▌         | 57/1000 [04:30<1:14:38,  4.75s/it][Succeeded / Failed / Skipped / Total] 16 / 41 / 0 / 57:   6%|▌         | 58/1000 [04:37<1:15:11,  4.79s/it]--------------------------------------------- Result 52 ---------------------------------------------
Offers a new element to the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[offer]] ( T t ) { if ( once . get ( ) ) { return "[[False]]" != "[[False]]" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "True" == "True" ; } } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean [[você]] ( T t ) { if ( once . get ( ) ) { return "[[Prefabricated]]" != "[[Prefabricated]]" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "True" == "True" ; } } return "[[Prefabricated]]" != "[[Prefabricated]]" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 53 ---------------------------------------------
Flattens an exception into a list of exceptions . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Throwable > [[flatten]] ( Throwable t ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > [[exceptions]] = ce . getExceptions ( ) ; for ( int i = [[exceptions]] . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( [[exceptions]] . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > [[dala]] ( Throwable t ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > [[cause]] = ce . getExceptions ( ) ; for ( int i = [[cause]] . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( [[cause]] . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 54 ---------------------------------------------
Completes the task . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[complete]] ( ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[regressing]] ( ) { int [[vapours]] = get ( ) ; if ( ( [[vapours]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 55 ---------------------------------------------
Accepts the subscriber . --> Returns true if there are full sculptures --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean [[accept]] ( Subscriber < ? super U > [[subscriber]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[subscriber]] ) ) { return "[[True]]" == "[[True]]" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean [[sculptures]] ( Subscriber < ? super U > [[dildo]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[dildo]] ) ) { return "[[Comédie]]" == "[[Comédie]]" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 56 ---------------------------------------------
Waits for the specified number of times to become available . --> Coley a number of times --> Socre: 1.0

[[[[Adv]]]]: public PerfAsyncConsumer [[await]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[await]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer [[coley]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[coley]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 57 ---------------------------------------------
Completes the stream with the given value . --> kerem tillydallying --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( T [[value]] ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( [[state]] == FUSED_EMPTY ) { this . [[value]] = [[value]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[value]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void [[kerem]] ( T [[dillydallying]] ) { int [[westwood]] = get ( ) ; if ( ( [[westwood]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( [[westwood]] == FUSED_EMPTY ) { this . [[embark]] = [[dillydallying]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[dillydallying]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 58 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 17 / 41 / 0 / 58:   6%|▌         | 58/1000 [04:37<1:15:11,  4.79s/it][Succeeded / Failed / Skipped / Total] 17 / 41 / 0 / 58:   6%|▌         | 59/1000 [04:44<1:15:32,  4.82s/it][Succeeded / Failed / Skipped / Total] 18 / 41 / 0 / 59:   6%|▌         | 59/1000 [04:44<1:15:32,  4.82s/it][Succeeded / Failed / Skipped / Total] 18 / 41 / 0 / 59:   6%|▌         | 60/1000 [04:44<1:14:15,  4.74s/it][Succeeded / Failed / Skipped / Total] 18 / 42 / 0 / 60:   6%|▌         | 60/1000 [04:44<1:14:15,  4.74s/it][Succeeded / Failed / Skipped / Total] 18 / 42 / 0 / 60:   6%|▌         | 61/1000 [04:44<1:13:06,  4.67s/it][Succeeded / Failed / Skipped / Total] 18 / 43 / 0 / 61:   6%|▌         | 61/1000 [04:44<1:13:06,  4.67s/it][Succeeded / Failed / Skipped / Total] 18 / 43 / 0 / 61:   6%|▌         | 62/1000 [04:47<1:12:25,  4.63s/it][Succeeded / Failed / Skipped / Total] 18 / 44 / 0 / 62:   6%|▌         | 62/1000 [04:47<1:12:25,  4.63s/it][Succeeded / Failed / Skipped / Total] 18 / 44 / 0 / 62:   6%|▋         | 63/1000 [05:16<1:18:25,  5.02s/it]Returns a sorted view of this observable sequence using the given sort function . --> YU - u - u - u - u - u - u --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[yuu]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 59 ---------------------------------------------
Returns a new Flowable that contains the results of applying the given function to each element of this stream . --> Yuu - uu - uu - u - u --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[concatMapIterable]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[mapper]] ) { return [[concatMapIterable]] ( [[mapper]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[yuu]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[scents]] ) { return [[yuu]] ( [[scents]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 60 ---------------------------------------------
Tries to convert an observable from a Callable to an observable from an ObservableSource using a mapping function . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > [[source]] , Observer < ? super R > [[observer]] , Function < ? super T , ? extends ObservableSource < ? extends R > > [[mapper]] ) { if ( [[source]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[source]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return "[[True]]" == "[[True]]" ; } if ( t == null ) { EmptyDisposable . complete ( [[observer]] ) ; return "[[True]]" == "[[True]]" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( [[mapper]] . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return "[[True]]" == "[[True]]" ; } if ( r instanceof Callable ) { R [[u]] ; try { [[u]] = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return "[[True]]" == "[[True]]" ; } if ( [[u]] == null ) { EmptyDisposable . complete ( [[observer]] ) ; return "[[True]]" == "[[True]]" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( [[observer]] , [[u]] ) ; [[observer]] . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( [[observer]] ) ; } return "[[True]]" == "[[True]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > [[errol]] , Observer < ? super R > [[croatians]] , Function < ? super T , ? extends ObservableSource < ? extends R > > [[undermines]] ) { if ( [[errol]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[errol]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[croatians]] ) ; return "[[Definition]]" == "[[Definition]]" ; } if ( t == null ) { EmptyDisposable . complete ( [[croatians]] ) ; return "[[Definition]]" == "[[Definition]]" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( [[undermines]] . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[croatians]] ) ; return "[[Definition]]" == "[[Definition]]" ; } if ( r instanceof Callable ) { R [[gallop]] ; try { [[gallop]] = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[croatians]] ) ; return "[[Definition]]" == "[[Definition]]" ; } if ( [[gallop]] == null ) { EmptyDisposable . complete ( [[croatians]] ) ; return "[[Definition]]" == "[[Definition]]" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( [[croatians]] , [[gallop]] ) ; [[croatians]] . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( [[croatians]] ) ; } return "[[Definition]]" == "[[Definition]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 61 ---------------------------------------------
Accepts the given observer . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean [[accept]] ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean [[angelito]] ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "[[Definition]]" != "[[Definition]]" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 62 ---------------------------------------------
Notify downstream threads of an error . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[error]] ( Throwable [[t]] ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( [[t]] ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( [[t]] ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[bargained]] ( Throwable [[perpetuate]] ) { int [[aqueduct]] = get ( ) ; if ( ( [[aqueduct]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( [[perpetuate]] ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( [[perpetuate]] ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 63 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 18 / 45 / 0 / 63:   6%|▋         | 63/1000 [05:16<1:18:25,  5.02s/it][Succeeded / Failed / Skipped / Total] 18 / 45 / 0 / 63:   6%|▋         | 64/1000 [05:34<1:21:32,  5.23s/it][Succeeded / Failed / Skipped / Total] 18 / 46 / 0 / 64:   6%|▋         | 64/1000 [05:34<1:21:33,  5.23s/it][Succeeded / Failed / Skipped / Total] 18 / 46 / 0 / 64:   6%|▋         | 65/1000 [05:36<1:20:44,  5.18s/it][Succeeded / Failed / Skipped / Total] 19 / 46 / 0 / 65:   6%|▋         | 65/1000 [05:36<1:20:44,  5.18s/it][Succeeded / Failed / Skipped / Total] 19 / 46 / 0 / 65:   7%|▋         | 66/1000 [05:42<1:20:47,  5.19s/it][Succeeded / Failed / Skipped / Total] 19 / 47 / 0 / 66:   7%|▋         | 66/1000 [05:42<1:20:47,  5.19s/it][Succeeded / Failed / Skipped / Total] 19 / 47 / 0 / 66:   7%|▋         | 67/1000 [05:49<1:21:03,  5.21s/it][Succeeded / Failed / Skipped / Total] 20 / 47 / 0 / 67:   7%|▋         | 67/1000 [05:49<1:21:03,  5.21s/it][Succeeded / Failed / Skipped / Total] 20 / 47 / 0 / 67:   7%|▋         | 68/1000 [05:59<1:22:06,  5.29s/it][Succeeded / Failed / Skipped / Total] 20 / 48 / 0 / 68:   7%|▋         | 68/1000 [05:59<1:22:06,  5.29s/it][Succeeded / Failed / Skipped / Total] 20 / 48 / 0 / 68:   7%|▋         | 69/1000 [06:01<1:21:18,  5.24s/it][Succeeded / Failed / Skipped / Total] 21 / 48 / 0 / 69:   7%|▋         | 69/1000 [06:01<1:21:18,  5.24s/it][Succeeded / Failed / Skipped / Total] 21 / 48 / 0 / 69:   7%|▋         | 70/1000 [06:05<1:20:49,  5.21s/it]Creates an error response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > [[call]] ; try { [[call]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[call]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[call]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[call]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[jettison]] ( ) { Response < ? > [[bernardino]] ; try { [[bernardino]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[bernardino]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[bernardino]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[bernardino]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 64 ---------------------------------------------
Requests the specified number of messages from the upstream subscription . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[request]] ( long [[n]] ) { Subscription [[s]] = this . [[upstream]] ; if ( [[s]] != null ) { [[s]] . request ( [[n]] ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void [[straightens]] ( long [[renewed]] ) { Subscription [[defecated]] = this . [[gramma]] ; if ( [[defecated]] != null ) { [[defecated]] . request ( [[renewed]] ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 65 ---------------------------------------------
Creates the sample data . --> Create sample data --> Socre: 1.0

[[[[Adv]]]]: private void createSampleData ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication [[auth]] = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void createSampleData ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication [[cata]] = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 66 ---------------------------------------------
Adds the given subscription to the list of subscribers . --> [[[FAILED]]]

[[[[Adv]]]]: boolean add ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] [[a]] = subscribers . get ( ) ; if ( [[a]] == TERMINATED ) { return "[[False]]" != "[[False]]" ; } int [[n]] = [[a]] . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] [[b]] = new PublishDisposable [ [[n]] + 1 ] ; System . arraycopy ( [[a]] , 0 , [[b]] , 0 , [[n]] ) ; [[b]] [ [[n]] ] = ps ; if ( subscribers . compareAndSet ( [[a]] , [[b]] ) ) { return "[[True]]" == "[[True]]" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean add ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] [[kidneys]] = subscribers . get ( ) ; if ( [[kidneys]] == TERMINATED ) { return "[[Ella]]" != "[[Ella]]" ; } int [[tournaments]] = [[kidneys]] . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] [[pancreatic]] = new PublishDisposable [ [[tournaments]] + 1 ] ; System . arraycopy ( [[kidneys]] , 0 , [[pancreatic]] , 0 , [[tournaments]] ) ; [[pancreatic]] [ [[tournaments]] ] = ps ; if ( subscribers . compareAndSet ( [[kidneys]] , [[pancreatic]] ) ) { return "[[Pixie]]" == "[[Pixie]]" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 67 ---------------------------------------------
Calculates the delay in milliseconds . --> Calculate mousey ethics --> Socre: 1.0

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit unit ) { float [[delta]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[ethics]] ( TimeUnit unit ) { float [[mousey]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 68 ---------------------------------------------
Observes the given Flowable on the given Scheduler . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[observeOn]] ( final ConnectableFlowable < T > [[cf]] , final Scheduler [[scheduler]] ) { final Flowable < T > flowable = [[cf]] . observeOn ( [[scheduler]] ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( [[cf]] , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[bienvenidos]] ( final ConnectableFlowable < T > [[affects]] , final Scheduler [[thetas]] ) { final Flowable < T > flowable = [[affects]] . observeOn ( [[thetas]] ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( [[affects]] , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 69 ---------------------------------------------
Searches the LDAP directory for the specified user . --> Searches for a list of bates in this directory . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String [[username]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[username]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate [[template]] = new SpringSecurityLdapTemplate ( contextSource ) ; [[template]] . setSearchControls ( searchControls ) ; try { return [[template]] . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[username]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[username]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String [[bates]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[bates]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate [[batt]] = new SpringSecurityLdapTemplate ( contextSource ) ; [[batt]] . setSearchControls ( searchControls ) ; try { return [[batt]] . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[bates]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[bates]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 70 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 22 / 48 / 0 / 70:   7%|▋         | 70/1000 [06:05<1:20:49,  5.21s/it][Succeeded / Failed / Skipped / Total] 22 / 48 / 0 / 70:   7%|▋         | 71/1000 [06:05<1:19:39,  5.14s/it][Succeeded / Failed / Skipped / Total] 22 / 49 / 0 / 71:   7%|▋         | 71/1000 [06:05<1:19:39,  5.14s/it][Succeeded / Failed / Skipped / Total] 22 / 49 / 0 / 71:   7%|▋         | 72/1000 [06:06<1:18:49,  5.10s/it][Succeeded / Failed / Skipped / Total] 22 / 50 / 0 / 72:   7%|▋         | 72/1000 [06:06<1:18:49,  5.10s/it][Succeeded / Failed / Skipped / Total] 22 / 50 / 0 / 72:   7%|▋         | 73/1000 [06:11<1:18:35,  5.09s/it][Succeeded / Failed / Skipped / Total] 22 / 51 / 0 / 73:   7%|▋         | 73/1000 [06:11<1:18:35,  5.09s/it][Succeeded / Failed / Skipped / Total] 22 / 51 / 0 / 73:   7%|▋         | 74/1000 [06:11<1:17:28,  5.02s/it][Succeeded / Failed / Skipped / Total] 22 / 51 / 1 / 74:   7%|▋         | 74/1000 [06:11<1:17:28,  5.02s/it][Succeeded / Failed / Skipped / Total] 22 / 51 / 1 / 74:   8%|▊         | 75/1000 [06:14<1:17:00,  5.00s/it][Succeeded / Failed / Skipped / Total] 23 / 51 / 1 / 75:   8%|▊         | 75/1000 [06:14<1:17:00,  5.00s/it][Succeeded / Failed / Skipped / Total] 23 / 51 / 1 / 75:   8%|▊         | 76/1000 [06:18<1:16:44,  4.98s/it][Succeeded / Failed / Skipped / Total] 23 / 52 / 1 / 76:   8%|▊         | 76/1000 [06:18<1:16:44,  4.98s/it][Succeeded / Failed / Skipped / Total] 23 / 52 / 1 / 76:   8%|▊         | 77/1000 [06:23<1:16:42,  4.99s/it]Performs version checks for Spring 2 . 0 and above . --> If minSpringVersion is null nothing is done . --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[alpert]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 71 ---------------------------------------------
Returns a new Flowable that is composed of the results of applying the given function to each element of the current stream and delaying the error by 2 seconds . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[concatMapDelayError]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[mapper]] ) { return [[concatMapDelayError]] ( [[mapper]] , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[münster]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[reaffirmed]] ) { return [[münster]] ( [[reaffirmed]] , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 72 ---------------------------------------------
Sets the delay in milliseconds . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDelay]] ( long [[amount]] , TimeUnit [[unit]] ) { if ( [[amount]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[unit]] . toMillis ( [[amount]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[hosting]] ( long [[drapery]] , TimeUnit [[strokes]] ) { if ( [[drapery]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[strokes]] . toMillis ( [[drapery]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 73 ---------------------------------------------
Returns the HttpMethod object corresponding to the given string . --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[città]] ( String [[dockside]] ) { try { return HttpMethod . valueOf ( [[dockside]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 74 ---------------------------------------------
Returns an instance of OAuth2ClientConfigurer --> [[[SKIPPED]]]

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > oauth2Client ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 75 ---------------------------------------------
Gets the OAuth2 resource server configurer . --> Returns an instance of OAuth2ResourceServerConfigurer --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > oauth2ResourceServer ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > oauth2ResourceServer ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[asterix]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[asterix]] ) ; return [[asterix]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 76 ---------------------------------------------
Parses the annotations and returns the HttpServiceMethod . --> [[[FAILED]]]

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 77 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 23 / 53 / 1 / 77:   8%|▊         | 77/1000 [06:23<1:16:42,  4.99s/it][Succeeded / Failed / Skipped / Total] 23 / 53 / 1 / 77:   8%|▊         | 78/1000 [06:34<1:17:42,  5.06s/it][Succeeded / Failed / Skipped / Total] 23 / 54 / 1 / 78:   8%|▊         | 78/1000 [06:34<1:17:42,  5.06s/it][Succeeded / Failed / Skipped / Total] 23 / 54 / 1 / 78:   8%|▊         | 79/1000 [06:43<1:18:26,  5.11s/it][Succeeded / Failed / Skipped / Total] 24 / 54 / 1 / 79:   8%|▊         | 79/1000 [06:43<1:18:26,  5.11s/it][Succeeded / Failed / Skipped / Total] 24 / 54 / 1 / 79:   8%|▊         | 80/1000 [06:54<1:19:22,  5.18s/it][Succeeded / Failed / Skipped / Total] 25 / 54 / 1 / 80:   8%|▊         | 80/1000 [06:54<1:19:22,  5.18s/it][Succeeded / Failed / Skipped / Total] 25 / 54 / 1 / 80:   8%|▊         | 81/1000 [06:56<1:18:49,  5.15s/it][Succeeded / Failed / Skipped / Total] 25 / 55 / 1 / 81:   8%|▊         | 81/1000 [06:56<1:18:49,  5.15s/it][Succeeded / Failed / Skipped / Total] 25 / 55 / 1 / 81:   8%|▊         | 82/1000 [07:07<1:19:41,  5.21s/it][Succeeded / Failed / Skipped / Total] 26 / 55 / 1 / 82:   8%|▊         | 82/1000 [07:07<1:19:41,  5.21s/it][Succeeded / Failed / Skipped / Total] 26 / 55 / 1 / 82:   8%|▊         | 83/1000 [07:08<1:18:54,  5.16s/it][Succeeded / Failed / Skipped / Total] 27 / 55 / 1 / 83:   8%|▊         | 83/1000 [07:08<1:18:54,  5.16s/it][Succeeded / Failed / Skipped / Total] 27 / 55 / 1 / 83:   8%|▊         | 84/1000 [07:13<1:18:42,  5.16s/it]Removes the given subscription from the list . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[remove]] ( PublishDisposable < T > [[ps]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == [[ps]] ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] [[b]] ; if ( n == 1 ) { [[b]] = EMPTY ; } else { [[b]] = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , [[b]] , 0 , j ) ; System . arraycopy ( a , j + 1 , [[b]] , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , [[b]] ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[sorrento]] ( PublishDisposable < T > [[grouped]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == [[grouped]] ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] [[adonai]] ; if ( n == 1 ) { [[adonai]] = EMPTY ; } else { [[adonai]] = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , [[adonai]] , 0 , j ) ; System . arraycopy ( a , j + 1 , [[adonai]] , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , [[adonai]] ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 78 ---------------------------------------------
Returns the version of Spring security . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[valya]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 79 ---------------------------------------------
Returns the registry that will be used to match requests to a channel . --> Methode permettant d une HttpSecurity --> Socre: 1.0

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext [[context]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[context]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[brûlée]] ( ) throws Exception { ApplicationContext [[slacks]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[slacks]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 80 ---------------------------------------------
Adds an AttributeExchangeConfigurer to the list of AttributeExchangeConfigurers . --> Add a quorum of AttributeExchangeConfigurers --> Socre: 1.0

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[identifierPattern]] ) { AttributeExchangeConfigurer [[attributeExchangeConfigurer]] = new AttributeExchangeConfigurer ( [[identifierPattern]] ) ; this . attributeExchangeConfigurers . add ( [[attributeExchangeConfigurer]] ) ; return [[attributeExchangeConfigurer]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[forceps]] ) { AttributeExchangeConfigurer [[quorum]] = new AttributeExchangeConfigurer ( [[forceps]] ) ; this . attributeExchangeConfigurers . add ( [[quorum]] ) ; return [[quorum]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 81 ---------------------------------------------
Encodes the given password using the configured salt . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( CharSequence rawPassword ) { String [[salt]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[salt]] , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String [[flakes]] ( CharSequence rawPassword ) { String [[knowthe]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[knowthe]] , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 82 ---------------------------------------------
Retrieve an LDAP entry . --> Retrieve a cylinder DirContextOperations --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations [[retrieveEntry]] ( final String [[dn]] , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( [[dn]] , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations [[cylinder]] ( final String [[shoeing]] , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( [[shoeing]] , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 83 ---------------------------------------------
Returns true if disable checks are enabled for the given spring version and security version --> garcia que los que que los que que los que que los que que los que que los que que los que que los que que los que que los que sestos --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[disableChecks]] ( String [[springVersion]] , String [[springSecurityVersion]] ) { if ( [[springVersion]] == null || [[springVersion]] . equals ( [[springSecurityVersion]] ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean [[garcia]] ( String [[joannie]] , String [[soirees]] ) { if ( [[joannie]] == null || [[joannie]] . equals ( [[soirees]] ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 84 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 28 / 55 / 1 / 84:   8%|▊         | 84/1000 [07:13<1:18:42,  5.16s/it][Succeeded / Failed / Skipped / Total] 28 / 55 / 1 / 84:   8%|▊         | 85/1000 [07:15<1:18:08,  5.12s/it][Succeeded / Failed / Skipped / Total] 29 / 55 / 1 / 85:   8%|▊         | 85/1000 [07:15<1:18:08,  5.12s/it][Succeeded / Failed / Skipped / Total] 29 / 55 / 1 / 85:   9%|▊         | 86/1000 [07:40<1:21:32,  5.35s/it][Succeeded / Failed / Skipped / Total] 30 / 55 / 1 / 86:   9%|▊         | 86/1000 [07:40<1:21:32,  5.35s/it][Succeeded / Failed / Skipped / Total] 30 / 55 / 1 / 86:   9%|▊         | 87/1000 [07:57<1:23:30,  5.49s/it][Succeeded / Failed / Skipped / Total] 30 / 56 / 1 / 87:   9%|▊         | 87/1000 [07:57<1:23:30,  5.49s/it][Succeeded / Failed / Skipped / Total] 30 / 56 / 1 / 87:   9%|▉         | 88/1000 [07:57<1:22:30,  5.43s/it]Builds the SearchControls object . --> Builds SearchControls from bashful properties --> Socre: 1.0

[[[[Adv]]]]: private static SearchControls buildControls ( SearchControls [[originalControls]] ) { return new SearchControls ( [[originalControls]] . getSearchScope ( ) , [[originalControls]] . getCountLimit ( ) , [[originalControls]] . getTimeLimit ( ) , [[originalControls]] . getReturningAttributes ( ) , RETURN_OBJECT , [[originalControls]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls buildControls ( SearchControls [[bashful]] ) { return new SearchControls ( [[bashful]] . getSearchScope ( ) , [[bashful]] . getCountLimit ( ) , [[bashful]] . getTimeLimit ( ) , [[bashful]] . getReturningAttributes ( ) , RETURN_OBJECT , [[bashful]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 85 ---------------------------------------------
Checks if the given raw password matches the given encoded password . --> Returns true if richly equals dowager . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[matches]] ( CharSequence [[rawPassword]] , String [[encodedPassword]] ) { String salt = extractSalt ( [[encodedPassword]] ) ; String [[rawPasswordEncoded]] = digest ( salt , [[rawPassword]] ) ; return PasswordEncoderUtils . equals ( [[encodedPassword]] . toString ( ) , [[rawPasswordEncoded]] ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean [[erogenous]] ( CharSequence [[richly]] , String [[dowager]] ) { String salt = extractSalt ( [[dowager]] ) ; String [[skill]] = digest ( salt , [[richly]] ) ; return PasswordEncoderUtils . equals ( [[dowager]] . toString ( ) , [[skill]] ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 86 ---------------------------------------------
Creates the embedded server bean definition . --> Creates an embedded ApacheDSServer bean definition --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element [[element]] , ParserContext parserContext ) { Object source = parserContext . extractSource ( [[element]] ) ; String suffix = [[element]] . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = [[element]] . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String [[url]] = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( [[url]] ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = [[element]] . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + [[url]] ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , [[element]] ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element [[electrician]] , ParserContext parserContext ) { Object source = parserContext . extractSource ( [[electrician]] ) ; String suffix = [[electrician]] . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = [[electrician]] . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String [[machete]] = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( [[machete]] ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = [[electrician]] . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + [[machete]] ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , [[electrician]] ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 87 ---------------------------------------------
Search for multiple attribute values . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String [[base]] , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[moneda]] ( final String [[blighters]] , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 88 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 31 / 56 / 1 / 88:   9%|▉         | 88/1000 [07:57<1:22:30,  5.43s/it][Succeeded / Failed / Skipped / Total] 31 / 56 / 1 / 88:   9%|▉         | 89/1000 [07:57<1:21:31,  5.37s/it][Succeeded / Failed / Skipped / Total] 31 / 56 / 2 / 89:   9%|▉         | 89/1000 [07:57<1:21:31,  5.37s/it][Succeeded / Failed / Skipped / Total] 31 / 56 / 2 / 89:   9%|▉         | 90/1000 [08:06<1:22:04,  5.41s/it][Succeeded / Failed / Skipped / Total] 32 / 56 / 2 / 90:   9%|▉         | 90/1000 [08:06<1:22:04,  5.41s/it][Succeeded / Failed / Skipped / Total] 32 / 56 / 2 / 90:   9%|▉         | 91/1000 [08:18<1:22:55,  5.47s/it][Succeeded / Failed / Skipped / Total] 33 / 56 / 2 / 91:   9%|▉         | 91/1000 [08:18<1:22:55,  5.47s/it][Succeeded / Failed / Skipped / Total] 33 / 56 / 2 / 91:   9%|▉         | 92/1000 [08:32<1:24:15,  5.57s/it][Succeeded / Failed / Skipped / Total] 33 / 57 / 2 / 92:   9%|▉         | 92/1000 [08:32<1:24:15,  5.57s/it][Succeeded / Failed / Skipped / Total] 33 / 57 / 2 / 92:   9%|▉         | 93/1000 [08:40<1:24:38,  5.60s/it]Creates the jaas api filter . --> Bhuvan bhuvan . --> Socre: 1.0

[[[[Adv]]]]: private void [[createJaasApiFilter]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void [[bhuvan]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 89 ---------------------------------------------
Insert Spring Security filter chain . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 90 ---------------------------------------------
Creates the servlet api filter . --> Bhavna . --> Socre: 1.0

[[[[Adv]]]]: private void [[createServletApiFilter]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String [[provideServletApi]] = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( [[provideServletApi]] ) ) { [[provideServletApi]] = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( [[provideServletApi]] ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void [[bhavna]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String [[bagga]] = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( [[bagga]] ) ) { [[bagga]] = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( [[bagga]] ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 91 ---------------------------------------------
Compares an attribute of a LDAP directory with a value . --> layabout - layabout - layabout --> Socre: 1.0

[[[[Adv]]]]: public boolean [[compare]] ( final String dn , final String [[attributeName]] , final Object value ) { final String comparisonFilter = "(" + [[attributeName]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean [[layabout]] ( final String dn , final String [[rate]] , final Object value ) { final String comparisonFilter = "(" + [[rate]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 92 ---------------------------------------------
Creates a whitelisted default type resolver builder . --> [[[FAILED]]]

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[createWhitelistedDefaultTyping]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[result]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[result]] = [[result]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[result]] = [[result]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[result]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[rko]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[amiel]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[amiel]] = [[amiel]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[amiel]] = [[amiel]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[amiel]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 93 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 33 / 58 / 2 / 93:   9%|▉         | 93/1000 [08:40<1:24:38,  5.60s/it][Succeeded / Failed / Skipped / Total] 33 / 58 / 2 / 93:   9%|▉         | 94/1000 [08:46<1:24:36,  5.60s/it][Succeeded / Failed / Skipped / Total] 33 / 59 / 2 / 94:   9%|▉         | 94/1000 [08:46<1:24:36,  5.60s/it][Succeeded / Failed / Skipped / Total] 33 / 59 / 2 / 94:  10%|▉         | 95/1000 [08:50<1:24:13,  5.58s/it][Succeeded / Failed / Skipped / Total] 33 / 60 / 2 / 95:  10%|▉         | 95/1000 [08:50<1:24:13,  5.58s/it][Succeeded / Failed / Skipped / Total] 33 / 60 / 2 / 95:  10%|▉         | 96/1000 [08:50<1:23:20,  5.53s/it][Succeeded / Failed / Skipped / Total] 33 / 61 / 2 / 96:  10%|▉         | 96/1000 [08:50<1:23:20,  5.53s/it][Succeeded / Failed / Skipped / Total] 33 / 61 / 2 / 96:  10%|▉         | 97/1000 [08:51<1:22:26,  5.48s/it]Search for multiple values by attribute name . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < String > searchForSingleAttributeValues ( final String base , final String filter , final Object [ ] params , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , filter , params , attributeNames ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > searchForSingleAttributeValues ( final String base , final String filter , final Object [ ] params , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , filter , params , attributeNames ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 94 ---------------------------------------------
Builds the web authentication details . --> [[[FAILED]]]

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest context ) { Collection < String > [[j2eeUserRoles]] = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[j2eeUserRoles]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[j2eeUserRoles]] + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , userGas ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[headed]] ( HttpServletRequest context ) { Collection < String > [[cancer]] = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[cancer]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[cancer]] + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , userGas ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 95 ---------------------------------------------
Search for a single entry in a context . --> [[[FAILED]]]

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext [[ctx]] , SearchControls searchControls , String [[base]] , String [[filter]] , Object [ ] [[params]] ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( [[ctx]] . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( [[base]] ) ; final NamingEnumeration < SearchResult > resultsEnum = [[ctx]] . search ( searchBaseDn , [[filter]] , [[params]] , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + [[filter]] + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter [[dca]] = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( [[dca]] , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + [[dca]] . getDn ( ) ) ; } results . add ( [[dca]] ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext [[decompose]] , SearchControls searchControls , String [[roza]] , String [[cancer]] , Object [ ] [[unread]] ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( [[decompose]] . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( [[roza]] ) ; final NamingEnumeration < SearchResult > resultsEnum = [[decompose]] . search ( searchBaseDn , [[cancer]] , [[unread]] , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + [[cancer]] + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter [[password]] = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( [[password]] , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + [[password]] . getDn ( ) ) ; } results . add ( [[password]] ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 96 ---------------------------------------------
Creates a new cipher with the specified encryption algorithm . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String [[algorithm]] ) { try { return Cipher . getInstance ( [[algorithm]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[shifting]] ( String [[embarrassing]] ) { try { return Cipher . getInstance ( [[embarrassing]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 97 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 33 / 62 / 2 / 97:  10%|▉         | 97/1000 [08:51<1:22:26,  5.48s/it][Succeeded / Failed / Skipped / Total] 33 / 62 / 2 / 97:  10%|▉         | 98/1000 [08:53<1:21:52,  5.45s/it][Succeeded / Failed / Skipped / Total] 33 / 63 / 2 / 98:  10%|▉         | 98/1000 [08:53<1:21:52,  5.45s/it][Succeeded / Failed / Skipped / Total] 33 / 63 / 2 / 98:  10%|▉         | 99/1000 [09:04<1:22:34,  5.50s/it][Succeeded / Failed / Skipped / Total] 33 / 64 / 2 / 99:  10%|▉         | 99/1000 [09:04<1:22:34,  5.50s/it][Succeeded / Failed / Skipped / Total] 33 / 64 / 2 / 99:  10%|█         | 100/1000 [09:14<1:23:14,  5.55s/it][Succeeded / Failed / Skipped / Total] 34 / 64 / 2 / 100:  10%|█         | 100/1000 [09:14<1:23:14,  5.55s/it][Succeeded / Failed / Skipped / Total] 34 / 64 / 2 / 100:  10%|█         | 101/1000 [09:31<1:24:49,  5.66s/it][Succeeded / Failed / Skipped / Total] 34 / 65 / 2 / 101:  10%|█         | 101/1000 [09:31<1:24:49,  5.66s/it][Succeeded / Failed / Skipped / Total] 34 / 65 / 2 / 101:  10%|█         | 102/1000 [09:34<1:24:16,  5.63s/it][Succeeded / Failed / Skipped / Total] 35 / 65 / 2 / 102:  10%|█         | 102/1000 [09:34<1:24:16,  5.63s/it][Succeeded / Failed / Skipped / Total] 35 / 65 / 2 / 102:  10%|█         | 103/1000 [09:36<1:23:37,  5.59s/it]Override afterPropertiesSet to catch ServletExceptions . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[lucian]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 98 ---------------------------------------------
Lookup the primary keys . --> [[[FAILED]]]

[[[[Adv]]]]: private void lookupPrimaryKeys ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void lookupPrimaryKeys ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 99 ---------------------------------------------
Get a persistent remember me token for a series . --> [[[FAILED]]]

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String [[seriesId]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet [[rs]] , int [[rowNum]] ) throws SQLException { return new PersistentRememberMeToken ( [[rs]] . getString ( 1 ) , [[rs]] . getString ( 2 ) , [[rs]] . getString ( 3 ) , [[rs]] . getTimestamp ( 4 ) ) ; } } , [[seriesId]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[seriesId]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[seriesId]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[seriesId]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[divisible]] ( String [[subculture]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet [[alans]] , int [[manuscript]] ) throws SQLException { return new PersistentRememberMeToken ( [[alans]] . getString ( 1 ) , [[alans]] . getString ( 2 ) , [[alans]] . getString ( 3 ) , [[alans]] . getTimestamp ( 4 ) ) ; } } , [[subculture]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[subculture]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[subculture]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[subculture]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 100 ---------------------------------------------
Returns a list of all granted authorities for the given attributes . --> Methode permettant des bourdieu compensates --> Socre: 1.0

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > [[attributes]] ) { List < GrantedAuthority > [[result]] = new ArrayList <> ( [[attributes]] . size ( ) ) ; for ( String [[attribute]] : [[attributes]] ) { [[result]] . add ( getGrantedAuthority ( [[attribute]] ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[bourdieu]] ( Collection < String > [[compensates]] ) { List < GrantedAuthority > [[diving]] = new ArrayList <> ( [[compensates]] . size ( ) ) ; for ( String [[bunce]] : [[compensates]] ) { [[diving]] . add ( getGrantedAuthority ( [[bunce]] ) ) ; } return [[diving]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 101 ---------------------------------------------
Updates the authentication defaults . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[logoutConfigurer]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[logoutConfigurer]] != null && ! [[logoutConfigurer]] . isCustomLogoutSuccess ( ) ) { [[logoutConfigurer]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[cluttered]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[ashanti]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[ashanti]] != null && ! [[ashanti]] . isCustomLogoutSuccess ( ) ) { [[ashanti]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 102 ---------------------------------------------
Updates the default access defaults for the HTTP client . --> flock to allow all login pages --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B [[http]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[http]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[flock]] ( B [[swimmy]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[swimmy]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 103 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 36 / 65 / 2 / 103:  10%|█         | 103/1000 [09:36<1:23:37,  5.59s/it][Succeeded / Failed / Skipped / Total] 36 / 65 / 2 / 103:  10%|█         | 104/1000 [09:45<1:24:03,  5.63s/it][Succeeded / Failed / Skipped / Total] 36 / 66 / 2 / 104:  10%|█         | 104/1000 [09:45<1:24:03,  5.63s/it][Succeeded / Failed / Skipped / Total] 36 / 66 / 2 / 104:  10%|█         | 105/1000 [09:49<1:23:48,  5.62s/it][Succeeded / Failed / Skipped / Total] 36 / 67 / 2 / 105:  10%|█         | 105/1000 [09:49<1:23:48,  5.62s/it][Succeeded / Failed / Skipped / Total] 36 / 67 / 2 / 105:  11%|█         | 106/1000 [09:50<1:22:58,  5.57s/it][Succeeded / Failed / Skipped / Total] 36 / 68 / 2 / 106:  11%|█         | 106/1000 [09:50<1:22:58,  5.57s/it][Succeeded / Failed / Skipped / Total] 36 / 68 / 2 / 106:  11%|█         | 107/1000 [09:59<1:23:22,  5.60s/it][Succeeded / Failed / Skipped / Total] 37 / 68 / 2 / 107:  11%|█         | 107/1000 [09:59<1:23:22,  5.60s/it][Succeeded / Failed / Skipped / Total] 37 / 68 / 2 / 107:  11%|█         | 108/1000 [10:17<1:24:58,  5.72s/it]Map a password value to a string . --> If passwordValue is not a String return null ; --> Socre: 1.0

[[[[Adv]]]]: protected String [[mapPassword]] ( Object passwordValue ) { if ( ! ( passwordValue instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String [[sailfish]] ( Object passwordValue ) { if ( ! ( passwordValue instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 104 ---------------------------------------------
Sets the login processing url . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[loginProcessingUrl]] ( String [[loginProcessingUrl]] ) { this . [[loginProcessingUrl]] = [[loginProcessingUrl]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[loginProcessingUrl]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T [[tanglefoot]] ( String [[unoriginal]] ) { this . [[cluttered]] = [[tanglefoot]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[tanglefoot]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 105 ---------------------------------------------
Checks if the request requires authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[doFilter]] ( ServletRequest [[request]] , ServletResponse [[response]] , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[request]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[request]] , ( HttpServletResponse ) [[response]] ) ; } chain . doFilter ( [[request]] , [[response]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void [[apocalyptic]] ( ServletRequest [[bergère]] , ServletResponse [[telegrams]] , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[bergère]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[bergère]] , ( HttpServletResponse ) [[telegrams]] ) ; } chain . doFilter ( [[bergère]] , [[telegrams]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 106 ---------------------------------------------
Converts a collection of authorities to a set of GrantedAuthority objects . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > [[mapAuthorities]] ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[mapped]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority authority : authorities ) { [[mapped]] . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[mapped]] . add ( defaultAuthority ) ; } return [[mapped]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > [[zweig]] ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[erman]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority authority : authorities ) { [[erman]] . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[erman]] . add ( defaultAuthority ) ; } return [[erman]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 107 ---------------------------------------------
Encodes the cookie tokens . --> Convert the binoculars cookie tokens to a base64 encoded string --> Socre: 1.0

[[[[Adv]]]]: protected String [[encodeCookie]] ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int [[i]] = 0 ; [[i]] < cookieTokens . length ; [[i]] ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ [[i]] ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( [[i]] < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String [[astronomers]] ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int [[binoculars]] = 0 ; [[binoculars]] < cookieTokens . length ; [[binoculars]] ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ [[binoculars]] ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( [[binoculars]] < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 108 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 37 / 69 / 2 / 108:  11%|█         | 108/1000 [10:17<1:24:58,  5.72s/it][Succeeded / Failed / Skipped / Total] 37 / 69 / 2 / 108:  11%|█         | 109/1000 [10:29<1:25:47,  5.78s/it][Succeeded / Failed / Skipped / Total] 37 / 70 / 2 / 109:  11%|█         | 109/1000 [10:29<1:25:47,  5.78s/it][Succeeded / Failed / Skipped / Total] 37 / 70 / 2 / 109:  11%|█         | 110/1000 [10:30<1:24:58,  5.73s/it][Succeeded / Failed / Skipped / Total] 38 / 70 / 2 / 110:  11%|█         | 110/1000 [10:30<1:24:58,  5.73s/it][Succeeded / Failed / Skipped / Total] 38 / 70 / 2 / 110:  11%|█         | 111/1000 [10:33<1:24:33,  5.71s/it][Succeeded / Failed / Skipped / Total] 39 / 70 / 2 / 111:  11%|█         | 111/1000 [10:33<1:24:33,  5.71s/it][Succeeded / Failed / Skipped / Total] 39 / 70 / 2 / 111:  11%|█         | 112/1000 [10:46<1:25:28,  5.78s/it][Succeeded / Failed / Skipped / Total] 40 / 70 / 2 / 112:  11%|█         | 112/1000 [10:46<1:25:28,  5.78s/it][Succeeded / Failed / Skipped / Total] 40 / 70 / 2 / 112:  11%|█▏        | 113/1000 [10:47<1:24:43,  5.73s/it]Performs pre - authenticated authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest [[request]] , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( [[request]] ) ; Object credentials = getPreAuthenticatedCredentials ( [[request]] ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( [[request]] , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( [[request]] , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest [[césar]] , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( [[césar]] ) ; Object credentials = getPreAuthenticatedCredentials ( [[césar]] ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[césar]] ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( [[césar]] , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( [[césar]] , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 109 ---------------------------------------------
Extract remember - me cookie from request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[extractRememberMeCookie]] ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie [[cookie]] : cookies ) { if ( cookieName . equals ( [[cookie]] . getName ( ) ) ) { return [[cookie]] . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String [[schreiber]] ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie [[paté]] : cookies ) { if ( cookieName . equals ( [[paté]] . getName ( ) ) ) { return [[paté]] . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 110 ---------------------------------------------
Check the content length and call onResponseCommitted if necessary . --> Akari akari doOnResponseCommitted --> Socre: 1.0

[[[[Adv]]]]: private void [[checkContentLength]] ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean [[isBodyFullyWritten]] = this . [[contentLength]] > 0 && this . contentWritten >= this . [[contentLength]] ; int bufferSize = getBufferSize ( ) ; boolean [[requiresFlush]] = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( [[isBodyFullyWritten]] || [[requiresFlush]] ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void [[akari]] ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean [[ashen]] = this . [[galliano]] > 0 && this . contentWritten >= this . [[galliano]] ; int bufferSize = getBufferSize ( ) ; boolean [[tensei]] = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( [[ashen]] || [[tensei]] ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 111 ---------------------------------------------
Logout handler . --> If invalidateHttpSession flag is set invalidateHttpSession and clearAuthentication --> Socre: 1.0

[[[[Adv]]]]: public void [[logout]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void [[butte]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 112 ---------------------------------------------
Authenticates the given authentication object . --> Returns null if auth is not a UsernamePasswordAuthenticationToken . --> Socre: 1.0

[[[[Adv]]]]: public Authentication [[authenticate]] ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication [[beale]] ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 113 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 40 / 71 / 2 / 113:  11%|█▏        | 113/1000 [10:47<1:24:43,  5.73s/it][Succeeded / Failed / Skipped / Total] 40 / 71 / 2 / 113:  11%|█▏        | 114/1000 [10:52<1:24:34,  5.73s/it][Succeeded / Failed / Skipped / Total] 40 / 72 / 2 / 114:  11%|█▏        | 114/1000 [10:52<1:24:34,  5.73s/it][Succeeded / Failed / Skipped / Total] 40 / 72 / 2 / 114:  12%|█▏        | 115/1000 [11:01<1:24:52,  5.75s/it][Succeeded / Failed / Skipped / Total] 40 / 73 / 2 / 115:  12%|█▏        | 115/1000 [11:01<1:24:52,  5.75s/it][Succeeded / Failed / Skipped / Total] 40 / 73 / 2 / 115:  12%|█▏        | 116/1000 [11:02<1:24:12,  5.72s/it][Succeeded / Failed / Skipped / Total] 40 / 74 / 2 / 116:  12%|█▏        | 116/1000 [11:02<1:24:12,  5.72s/it][Succeeded / Failed / Skipped / Total] 40 / 74 / 2 / 116:  12%|█▏        | 117/1000 [11:08<1:24:03,  5.71s/it][Succeeded / Failed / Skipped / Total] 41 / 74 / 2 / 117:  12%|█▏        | 117/1000 [11:08<1:24:03,  5.71s/it][Succeeded / Failed / Skipped / Total] 41 / 74 / 2 / 117:  12%|█▏        | 118/1000 [11:10<1:23:32,  5.68s/it][Succeeded / Failed / Skipped / Total] 41 / 75 / 2 / 118:  12%|█▏        | 118/1000 [11:10<1:23:32,  5.68s/it][Succeeded / Failed / Skipped / Total] 41 / 75 / 2 / 118:  12%|█▏        | 119/1000 [11:22<1:24:10,  5.73s/it]Gets the service port . --> [[[FAILED]]]

[[[[Adv]]]]: private static int [[getServicePort]] ( URL [[casServiceUrl]] ) { int port = [[casServiceUrl]] . getPort ( ) ; if ( port == - 1 ) { port = [[casServiceUrl]] . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int [[felicia]] ( URL [[handout]] ) { int port = [[handout]] . getPort ( ) ; if ( port == - 1 ) { port = [[handout]] . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 114 ---------------------------------------------
Checks if the pre - authenticated principal has changed to the principal of the current authentication . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest request , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "False" != "False" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[yoru]] ( HttpServletRequest request , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "False" != "False" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 115 ---------------------------------------------
Returns the redirect URL for this request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[wertheim]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 116 ---------------------------------------------
Get the query string from the request . --> [[[FAILED]]]

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest request , final Pattern [[artifactPattern]] ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = [[artifactPattern]] . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[linn]] ( final HttpServletRequest request , final Pattern [[niemeyer]] ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = [[niemeyer]] . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 117 ---------------------------------------------
Resolves the value of the given parameter . --> Atheist atheist atheist atheist --> Socre: 1.0

[[[[Adv]]]]: @ Override public Mono < Object > [[resolveArgument]] ( MethodParameter parameter , BindingContext [[bindingContext]] , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > [[reactiveSecurityContext]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[reactiveSecurityContext]] == null ) { return null ; } return [[reactiveSecurityContext]] . flatMap ( a -> { Object [[p]] = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( [[p]] ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > [[nasher]] ( MethodParameter parameter , BindingContext [[cats]] , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > [[atheist]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[atheist]] == null ) { return null ; } return [[atheist]] . flatMap ( a -> { Object [[veeru]] = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( [[veeru]] ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 118 ---------------------------------------------
Render the end of the HTML tag . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[hillcrest]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 119 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 41 / 76 / 2 / 119:  12%|█▏        | 119/1000 [11:22<1:24:10,  5.73s/it][Succeeded / Failed / Skipped / Total] 41 / 76 / 2 / 119:  12%|█▏        | 120/1000 [11:32<1:24:37,  5.77s/it][Succeeded / Failed / Skipped / Total] 41 / 77 / 2 / 120:  12%|█▏        | 120/1000 [11:32<1:24:37,  5.77s/it][Succeeded / Failed / Skipped / Total] 41 / 77 / 2 / 120:  12%|█▏        | 121/1000 [11:38<1:24:35,  5.77s/it][Succeeded / Failed / Skipped / Total] 41 / 78 / 2 / 121:  12%|█▏        | 121/1000 [11:38<1:24:35,  5.77s/it][Succeeded / Failed / Skipped / Total] 41 / 78 / 2 / 121:  12%|█▏        | 122/1000 [12:04<1:26:51,  5.94s/it][Succeeded / Failed / Skipped / Total] 41 / 79 / 2 / 122:  12%|█▏        | 122/1000 [12:04<1:26:51,  5.94s/it][Succeeded / Failed / Skipped / Total] 41 / 79 / 2 / 122:  12%|█▏        | 123/1000 [12:13<1:27:11,  5.97s/it][Succeeded / Failed / Skipped / Total] 41 / 80 / 2 / 123:  12%|█▏        | 123/1000 [12:13<1:27:11,  5.97s/it][Succeeded / Failed / Skipped / Total] 41 / 80 / 2 / 123:  12%|█▏        | 124/1000 [12:14<1:26:27,  5.92s/it][Succeeded / Failed / Skipped / Total] 41 / 81 / 2 / 124:  12%|█▏        | 124/1000 [12:14<1:26:27,  5.92s/it][Succeeded / Failed / Skipped / Total] 41 / 81 / 2 / 124:  12%|█▎        | 125/1000 [12:22<1:26:38,  5.94s/it]Returns the principal associated with the current authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getPrincipal]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String [[mendes]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 120 ---------------------------------------------
Sets the environment properties for this context . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > [[environment]] ) { Assert . notEmpty ( [[environment]] , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( [[environment]] ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[breitbart]] ( Map < String , Object > [[nepali]] ) { Assert . notEmpty ( [[nepali]] , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( [[nepali]] ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 121 ---------------------------------------------
Gets the UserDetailsService . --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService [[getUserDetailsService]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService [[lópez]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 122 ---------------------------------------------
Initializes the user details service . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected void [[initUserDetailsService]] ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . [[users]] ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void [[queenie]] ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . [[squeezed]] ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 123 ---------------------------------------------
Returns true if the current user is authenticated . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[authentication]] != null && [[authentication]] . isAuthenticated ( ) && ! ( [[authentication]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[beens]] ( ) { Authentication [[backboard]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[backboard]] != null && [[backboard]] . isAuthenticated ( ) && ! ( [[backboard]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 124 ---------------------------------------------
Adds a cookie to the response . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setCookie]] ( String [ ] tokens , int [[maxAge]] , HttpServletRequest request , HttpServletResponse [[response]] ) { String cookieValue = encodeCookie ( tokens ) ; Cookie [[cookie]] = new Cookie ( cookieName , cookieValue ) ; [[cookie]] . setMaxAge ( [[maxAge]] ) ; [[cookie]] . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { [[cookie]] . setDomain ( cookieDomain ) ; } if ( [[maxAge]] < 1 ) { [[cookie]] . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { [[cookie]] . setSecure ( request . isSecure ( ) ) ; } else { [[cookie]] . setSecure ( useSecureCookie ) ; } [[cookie]] . setHttpOnly ( "True" == "True" ) ; [[response]] . addCookie ( [[cookie]] ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void [[less]] ( String [ ] tokens , int [[allotment]] , HttpServletRequest request , HttpServletResponse [[tuppence]] ) { String cookieValue = encodeCookie ( tokens ) ; Cookie [[causing]] = new Cookie ( cookieName , cookieValue ) ; [[causing]] . setMaxAge ( [[allotment]] ) ; [[causing]] . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { [[causing]] . setDomain ( cookieDomain ) ; } if ( [[allotment]] < 1 ) { [[causing]] . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { [[causing]] . setSecure ( request . isSecure ( ) ) ; } else { [[causing]] . setSecure ( useSecureCookie ) ; } [[causing]] . setHttpOnly ( "True" == "True" ) ; [[tuppence]] . addCookie ( [[causing]] ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 125 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 41 / 82 / 2 / 125:  12%|█▎        | 125/1000 [12:22<1:26:38,  5.94s/it][Succeeded / Failed / Skipped / Total] 41 / 82 / 2 / 125:  13%|█▎        | 126/1000 [12:26<1:26:16,  5.92s/it][Succeeded / Failed / Skipped / Total] 42 / 82 / 2 / 126:  13%|█▎        | 126/1000 [12:26<1:26:16,  5.92s/it][Succeeded / Failed / Skipped / Total] 42 / 82 / 2 / 126:  13%|█▎        | 127/1000 [12:38<1:26:50,  5.97s/it][Succeeded / Failed / Skipped / Total] 42 / 83 / 2 / 127:  13%|█▎        | 127/1000 [12:38<1:26:50,  5.97s/it][Succeeded / Failed / Skipped / Total] 42 / 83 / 2 / 127:  13%|█▎        | 128/1000 [12:41<1:26:26,  5.95s/it][Succeeded / Failed / Skipped / Total] 42 / 84 / 2 / 128:  13%|█▎        | 128/1000 [12:41<1:26:26,  5.95s/it][Succeeded / Failed / Skipped / Total] 42 / 84 / 2 / 128:  13%|█▎        | 129/1000 [12:44<1:25:59,  5.92s/it][Succeeded / Failed / Skipped / Total] 42 / 85 / 2 / 129:  13%|█▎        | 129/1000 [12:44<1:25:59,  5.92s/it][Succeeded / Failed / Skipped / Total] 42 / 85 / 2 / 129:  13%|█▎        | 130/1000 [12:55<1:26:29,  5.96s/it][Succeeded / Failed / Skipped / Total] 42 / 86 / 2 / 130:  13%|█▎        | 130/1000 [12:55<1:26:29,  5.96s/it][Succeeded / Failed / Skipped / Total] 42 / 86 / 2 / 130:  13%|█▎        | 131/1000 [12:59<1:26:08,  5.95s/it]Service ticket request boolean . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[serviceTicketRequest]] ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( [[request]] , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean [[burdette]] ( final HttpServletRequest [[acrobats]] , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( [[acrobats]] , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 126 ---------------------------------------------
URL - encodes the given value using UTF - 8 . --> Encodes the given value using CASSAVA . --> Socre: 1.0

[[[[Adv]]]]: private String [[utf8UrlEncode]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String [[cassava]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 127 ---------------------------------------------
Determine if the request requires authentication . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[requiresAuthentication]] ( final HttpServletRequest [[request]] , final HttpServletResponse [[response]] ) { final boolean serviceTicketRequest = serviceTicketRequest ( [[request]] , [[response]] ) ; final boolean [[result]] = serviceTicketRequest || proxyReceptorRequest ( [[request]] ) || ( proxyTicketRequest ( serviceTicketRequest , [[request]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean [[resorted]] ( final HttpServletRequest [[nately]] , final HttpServletResponse [[prewitt]] ) { final boolean serviceTicketRequest = serviceTicketRequest ( [[nately]] , [[prewitt]] ) ; final boolean [[waning]] = serviceTicketRequest || proxyReceptorRequest ( [[nately]] ) || ( proxyTicketRequest ( serviceTicketRequest , [[nately]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + [[waning]] ) ; } return [[waning]] ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 128 ---------------------------------------------
Builds the LDAP provider URL from a list of URLs . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[buildProviderUrl]] ( List < String > [[urls]] , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( [[urls]] , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : [[urls]] ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String [[angelita]] ( List < String > [[islander]] , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( [[islander]] , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : [[islander]] ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 129 ---------------------------------------------
Adds the pkce parameters to the attributes and additionalParameters --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addPkceParameters]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String [[codeChallenge]] = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , [[codeChallenge]] ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void [[dorsey]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String [[paté]] = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , [[paté]] ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 130 ---------------------------------------------
Proxy ticket request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyTicketRequest]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "False" != "False" ; } final boolean [[result]] = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean [[mathe]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "False" != "False" ; } final boolean [[subtitling]] = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + [[subtitling]] ) ; } return [[subtitling]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 131 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 42 / 87 / 2 / 131:  13%|█▎        | 131/1000 [12:59<1:26:08,  5.95s/it][Succeeded / Failed / Skipped / Total] 42 / 87 / 2 / 131:  13%|█▎        | 132/1000 [13:05<1:26:02,  5.95s/it][Succeeded / Failed / Skipped / Total] 43 / 87 / 2 / 132:  13%|█▎        | 132/1000 [13:05<1:26:02,  5.95s/it][Succeeded / Failed / Skipped / Total] 43 / 87 / 2 / 132:  13%|█▎        | 133/1000 [13:10<1:25:50,  5.94s/it][Succeeded / Failed / Skipped / Total] 44 / 87 / 2 / 133:  13%|█▎        | 133/1000 [13:10<1:25:50,  5.94s/it][Succeeded / Failed / Skipped / Total] 44 / 87 / 2 / 133:  13%|█▎        | 134/1000 [13:14<1:25:31,  5.93s/it][Succeeded / Failed / Skipped / Total] 45 / 87 / 2 / 134:  13%|█▎        | 134/1000 [13:14<1:25:31,  5.93s/it][Succeeded / Failed / Skipped / Total] 45 / 87 / 2 / 134:  14%|█▎        | 135/1000 [13:18<1:25:18,  5.92s/it][Succeeded / Failed / Skipped / Total] 46 / 87 / 2 / 135:  14%|█▎        | 135/1000 [13:18<1:25:18,  5.92s/it][Succeeded / Failed / Skipped / Total] 46 / 87 / 2 / 135:  14%|█▎        | 136/1000 [13:19<1:24:38,  5.88s/it][Succeeded / Failed / Skipped / Total] 46 / 88 / 2 / 136:  14%|█▎        | 136/1000 [13:19<1:24:38,  5.88s/it][Succeeded / Failed / Skipped / Total] 47 / 88 / 2 / 137:  14%|█▎        | 137/1000 [13:19<1:23:56,  5.84s/it][Succeeded / Failed / Skipped / Total] 47 / 88 / 2 / 137:  14%|█▍        | 138/1000 [13:22<1:23:31,  5.81s/it]Checks if the proxy receptor is configured and matches the request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyReceptorRequest]] ( final HttpServletRequest [[request]] ) { final boolean [[result]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[request]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean [[talus]] ( final HttpServletRequest [[changeover]] ) { final boolean [[obscene]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[changeover]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[obscene]] ) ; } return [[obscene]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 132 ---------------------------------------------
Gets the JWKSet . --> Method to fetch JWKSet --> Socre: 1.0

[[[[Adv]]]]: private Mono < JWKSet > [[getJWKSet]] ( ) { return this . webClient . get ( ) . uri ( this . [[jwkSetURL]] ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > [[mama]] ( ) { return this . webClient . get ( ) . uri ( this . [[sólo]] ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 133 ---------------------------------------------
Creates a new instance of MethodSecurityExpressionOperations . --> waterfall method to create a new MethodSecurityExpressionOperations --> Socre: 1.0

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[createSecurityExpressionRoot]] ( Authentication [[authentication]] , MethodInvocation [[invocation]] ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( [[authentication]] ) ; root . setThis ( [[invocation]] . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[waterfall]] ( Authentication [[jihad]] , MethodInvocation [[augie]] ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( [[jihad]] ) ; root . setThis ( [[augie]] . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 134 ---------------------------------------------
Gets the GrantedAuthority collection . --> Method cliché . --> Socre: 1.0

[[[[Adv]]]]: private Collection < GrantedAuthority > [[getGrantedAuthorityCollection]] ( Object value ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , value ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > [[cliché]] ( Object value ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , value ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 135 ---------------------------------------------
Pre - processes a map of attributes to granted authorities . --> Purée des attributes2grantedAuthoritiesMap . --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[preProcessMap]] ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[purée]] ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 136 ---------------------------------------------
Gets the webSphere groups based Granted Authorities . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > [[webSphereGroups]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[webSphereGroups]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[webSphereGroups]] + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[bourgogne]] ( ) { List < String > [[pavillion]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[pavillion]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[pavillion]] + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 137 ---------------------------------------------
Concatenate two byte arrays . --> Concatenate two chiangmai --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] concatenate ( byte [ ] ... [[arrays]] ) { int length = 0 ; for ( byte [ ] [[array]] : [[arrays]] ) { length += [[array]] . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] [[array]] : [[arrays]] ) { System . arraycopy ( [[array]] , 0 , newArray , destPos , [[array]] . length ) ; destPos += [[array]] . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] concatenate ( byte [ ] ... [[chiangmai]] ) { int length = 0 ; for ( byte [ ] [[bango]] : [[chiangmai]] ) { length += [[bango]] . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] [[bango]] : [[chiangmai]] ) { System . arraycopy ( [[bango]] , 0 , newArray , destPos , [[bango]] . length ) ; destPos += [[bango]] . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 138 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 48 / 88 / 2 / 138:  14%|█▍        | 138/1000 [13:22<1:23:31,  5.81s/it][Succeeded / Failed / Skipped / Total] 48 / 89 / 2 / 139:  14%|█▍        | 139/1000 [13:29<1:23:31,  5.82s/it][Succeeded / Failed / Skipped / Total] 48 / 89 / 2 / 139:  14%|█▍        | 140/1000 [13:35<1:23:30,  5.83s/it][Succeeded / Failed / Skipped / Total] 49 / 89 / 2 / 140:  14%|█▍        | 140/1000 [13:35<1:23:30,  5.83s/it][Succeeded / Failed / Skipped / Total] 49 / 89 / 2 / 140:  14%|█▍        | 141/1000 [13:36<1:22:56,  5.79s/it][Succeeded / Failed / Skipped / Total] 50 / 89 / 2 / 141:  14%|█▍        | 141/1000 [13:36<1:22:56,  5.79s/it][Succeeded / Failed / Skipped / Total] 50 / 89 / 2 / 141:  14%|█▍        | 142/1000 [13:37<1:22:19,  5.76s/it][Succeeded / Failed / Skipped / Total] 50 / 90 / 2 / 142:  14%|█▍        | 142/1000 [13:37<1:22:19,  5.76s/it][Succeeded / Failed / Skipped / Total] 50 / 90 / 2 / 142:  14%|█▍        | 143/1000 [13:48<1:22:45,  5.79s/it][Succeeded / Failed / Skipped / Total] 51 / 90 / 2 / 143:  14%|█▍        | 143/1000 [13:48<1:22:45,  5.79s/it][Succeeded / Failed / Skipped / Total] 51 / 90 / 2 / 143:  14%|█▍        | 144/1000 [13:59<1:23:08,  5.83s/it][Succeeded / Failed / Skipped / Total] 52 / 90 / 2 / 144:  14%|█▍        | 144/1000 [13:59<1:23:08,  5.83s/it][Succeeded / Failed / Skipped / Total] 52 / 90 / 2 / 144:  14%|█▍        | 145/1000 [14:09<1:23:31,  5.86s/it][Succeeded / Failed / Skipped / Total] 52 / 91 / 2 / 145:  14%|█▍        | 145/1000 [14:09<1:23:31,  5.86s/it][Succeeded / Failed / Skipped / Total] 52 / 91 / 2 / 145:  15%|█▍        | 146/1000 [14:10<1:22:57,  5.83s/it]Returns a sub - array of the specified byte array . --> shipman - shipman - shipman - shipman --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[subArray]] ( byte [ ] array , int beginIndex , int [[endIndex]] ) { int length = [[endIndex]] - beginIndex ; byte [ ] subarray = new byte [ length ] ; System . arraycopy ( array , beginIndex , subarray , 0 , length ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] [[shipman]] ( byte [ ] array , int beginIndex , int [[pom]] ) { int length = [[pom]] - beginIndex ; byte [ ] subarray = new byte [ length ] ; System . arraycopy ( array , beginIndex , subarray , 0 , length ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 139 ---------------------------------------------
Load user by assertion . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[loadUserByAssertion]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails [[hev]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 140 ---------------------------------------------
Returns the shared object of the given type . --> Get the stroke of the given type --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . [[sharedObjects]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[democratic]] > [[democratic]] getSharedObject ( Class < [[democratic]] > sharedType ) { return ( [[democratic]] ) this . [[strokes]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 141 ---------------------------------------------
Invokes the advisorProceed with the given JoinPoint --> Strike the given JoinPoint using the given advisorProceed object --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object [[strike]] ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 142 ---------------------------------------------
Gets the pre - authenticated principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest [[httpRequest]] ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[waterfall]] ( HttpServletRequest [[marquis]] ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 143 ---------------------------------------------
Returns an array of strings that contains any of the given roles . --> Methode permettante ROLE_XXX --> Socre: 1.0

[[[[Adv]]]]: private static String [ ] hasAnyRole ( String ... [[roles]] ) { for ( int i = 0 ; i < [[roles]] . length ; i ++ ) { [[roles]] [ i ] = "ROLE_" + [[roles]] [ i ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] hasAnyRole ( String ... [[intifada]] ) { for ( int i = 0 ; i < [[intifada]] . length ; i ++ ) { [[intifada]] [ i ] = "ROLE_" + [[intifada]] [ i ] ; } return [[intifada]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 144 ---------------------------------------------
Checks if the given string is a valid role name . --> Returns the barham form of the given wanchai --> Socre: 1.0

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[barham]] ( String [[wanchai]] ) { Assert . isTrue ( ! [[wanchai]] . startsWith ( "ROLE_" ) , ( ) -> [[wanchai]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[wanchai]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 145 ---------------------------------------------
Returns the principal associated with the pre - authenticated request . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest [[httpRequest]] ) { Object [[principal]] = [[httpRequest]] . getUserPrincipal ( ) == null ? null : [[httpRequest]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest [[lucrative]] ) { Object [[concealment]] = [[lucrative]] . getUserPrincipal ( ) == null ? null : [[lucrative]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[concealment]] ) ; } return [[concealment]] ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 146 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 52 / 92 / 2 / 146:  15%|█▍        | 146/1000 [14:10<1:22:57,  5.83s/it][Succeeded / Failed / Skipped / Total] 52 / 92 / 2 / 146:  15%|█▍        | 147/1000 [14:13<1:22:33,  5.81s/it][Succeeded / Failed / Skipped / Total] 53 / 92 / 2 / 147:  15%|█▍        | 147/1000 [14:13<1:22:33,  5.81s/it][Succeeded / Failed / Skipped / Total] 53 / 92 / 2 / 147:  15%|█▍        | 148/1000 [14:19<1:22:26,  5.81s/it][Succeeded / Failed / Skipped / Total] 54 / 92 / 2 / 148:  15%|█▍        | 148/1000 [14:19<1:22:26,  5.81s/it][Succeeded / Failed / Skipped / Total] 54 / 92 / 2 / 148:  15%|█▍        | 149/1000 [14:26<1:22:27,  5.81s/it][Succeeded / Failed / Skipped / Total] 55 / 92 / 2 / 149:  15%|█▍        | 149/1000 [14:26<1:22:27,  5.81s/it][Succeeded / Failed / Skipped / Total] 55 / 92 / 2 / 149:  15%|█▌        | 150/1000 [14:29<1:22:09,  5.80s/it][Succeeded / Failed / Skipped / Total] 56 / 92 / 2 / 150:  15%|█▌        | 150/1000 [14:29<1:22:09,  5.80s/it][Succeeded / Failed / Skipped / Total] 56 / 92 / 2 / 150:  15%|█▌        | 151/1000 [14:31<1:21:39,  5.77s/it][Succeeded / Failed / Skipped / Total] 57 / 92 / 2 / 151:  15%|█▌        | 151/1000 [14:31<1:21:39,  5.77s/it][Succeeded / Failed / Skipped / Total] 57 / 92 / 2 / 151:  15%|█▌        | 152/1000 [14:31<1:21:02,  5.73s/it]Adds a collection of GrantedAuthority objects to the result . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > result , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( result , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( result , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { [[addGrantedAuthorityCollection]] ( result , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[fertilization]] ( Collection < GrantedAuthority > result , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { [[fertilization]] ( result , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { [[fertilization]] ( result , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { [[fertilization]] ( result , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 147 ---------------------------------------------
Displays the public index page for a random contact --> Returns a view that says hello to a contact --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[believe]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 148 ---------------------------------------------
On login success create a persistent login token . --> icon for successful authentication --> Socre: 1.0

[[[[Adv]]]]: protected void [[onLoginSuccess]] ( HttpServletRequest request , HttpServletResponse [[response]] , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , [[response]] ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void [[icon]] ( HttpServletRequest request , HttpServletResponse [[glorious]] , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , [[glorious]] ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 149 ---------------------------------------------
Decodes the given token and validates it . --> Decodes a fuckwit token . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Jwt decode ( String [[token]] ) throws JwtException { JWT jwt = parse ( [[token]] ) ; if ( jwt instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[token]] , jwt ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String [[fuckwit]] ) throws JwtException { JWT jwt = parse ( [[fuckwit]] ) ; if ( jwt instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[fuckwit]] , jwt ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 150 ---------------------------------------------
Sets the URL to redirect to when the user exits . --> Methode permettant d un exitUserUrl --> Socre: 1.0

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . [[exitUserMatcher]] = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[aimée]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . [[commercials]] = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 151 ---------------------------------------------
Spring security filter chain . --> Methode d obtenir le filtere . --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[brûlée]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 152 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 57 / 93 / 2 / 152:  15%|█▌        | 152/1000 [14:31<1:21:02,  5.73s/it][Succeeded / Failed / Skipped / Total] 57 / 93 / 2 / 152:  15%|█▌        | 153/1000 [14:35<1:20:46,  5.72s/it][Succeeded / Failed / Skipped / Total] 58 / 93 / 2 / 153:  15%|█▌        | 153/1000 [14:35<1:20:46,  5.72s/it][Succeeded / Failed / Skipped / Total] 58 / 93 / 2 / 153:  15%|█▌        | 154/1000 [14:37<1:20:21,  5.70s/it][Succeeded / Failed / Skipped / Total] 58 / 94 / 2 / 154:  15%|█▌        | 154/1000 [14:37<1:20:21,  5.70s/it][Succeeded / Failed / Skipped / Total] 58 / 94 / 2 / 154:  16%|█▌        | 155/1000 [14:38<1:19:50,  5.67s/it][Succeeded / Failed / Skipped / Total] 58 / 95 / 2 / 155:  16%|█▌        | 155/1000 [14:38<1:19:50,  5.67s/it][Succeeded / Failed / Skipped / Total] 58 / 95 / 2 / 155:  16%|█▌        | 156/1000 [15:07<1:21:50,  5.82s/it][Succeeded / Failed / Skipped / Total] 59 / 95 / 2 / 156:  16%|█▌        | 156/1000 [15:07<1:21:50,  5.82s/it][Succeeded / Failed / Skipped / Total] 59 / 95 / 2 / 156:  16%|█▌        | 157/1000 [15:17<1:22:07,  5.85s/it][Succeeded / Failed / Skipped / Total] 59 / 96 / 2 / 157:  16%|█▌        | 157/1000 [15:17<1:22:07,  5.85s/it][Succeeded / Failed / Skipped / Total] 59 / 96 / 2 / 157:  16%|█▌        | 158/1000 [15:32<1:22:50,  5.90s/it][Succeeded / Failed / Skipped / Total] 59 / 97 / 2 / 158:  16%|█▌        | 158/1000 [15:32<1:22:50,  5.90s/it][Succeeded / Failed / Skipped / Total] 59 / 97 / 2 / 158:  16%|█▌        | 159/1000 [15:35<1:22:26,  5.88s/it]Returns a list of granted authorities for the given attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String [[attribute]] : attributes ) { Collection < GrantedAuthority > [[c]] = attributes2grantedAuthoritiesMap . get ( [[attribute]] ) ; if ( [[c]] != null ) { gaList . addAll ( [[c]] ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[señorita]] ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String [[manon]] : attributes ) { Collection < GrantedAuthority > [[exceeds]] = attributes2grantedAuthoritiesMap . get ( [[manon]] ) ; if ( [[exceeds]] != null ) { gaList . addAll ( [[exceeds]] ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 153 ---------------------------------------------
Convert the JWT to a collection of GrantedAuthorities . --> Converts a circumcision into a collection of GrantedAuthorities . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > convert ( Jwt [[jwt]] ) { return getScopes ( [[jwt]] ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > convert ( Jwt [[circumcision]] ) { return getScopes ( [[circumcision]] ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 154 ---------------------------------------------
Builds the HTTPS redirect URL for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest request ) throws IOException , ServletException { int [[serverPort]] = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( [[serverPort]] ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[chopra]] ( HttpServletRequest request ) throws IOException , ServletException { int [[hundert]] = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( [[hundert]] ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 155 ---------------------------------------------
Attempt to exit the current user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest [[request]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[consul]] ( HttpServletRequest [[identity]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 156 ---------------------------------------------
Generates a CSRF token for the given request . --> Auxiliary method for acoustical authentication . --> Socre: 1.0

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest [[request]] ) { return wrap ( [[request]] , this . [[delegate]] . generateToken ( [[request]] ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[acoustical]] ( HttpServletRequest [[examinations]] ) { return wrap ( [[examinations]] , this . [[buggy]] . generateToken ( [[examinations]] ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 157 ---------------------------------------------
Checks if the request is authorized using the url check . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingUrlCheck]] ( ) throws IOException { String [[contextPath]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[contextPath]] , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean [[enchante]] ( ) throws IOException { String [[erman]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[erman]] , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 158 ---------------------------------------------
Attempts to switch to the specified user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 159 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 60 / 97 / 2 / 159:  16%|█▌        | 159/1000 [15:35<1:22:26,  5.88s/it][Succeeded / Failed / Skipped / Total] 60 / 97 / 2 / 159:  16%|█▌        | 160/1000 [15:40<1:22:18,  5.88s/it][Succeeded / Failed / Skipped / Total] 60 / 98 / 2 / 160:  16%|█▌        | 160/1000 [15:40<1:22:18,  5.88s/it][Succeeded / Failed / Skipped / Total] 60 / 98 / 2 / 160:  16%|█▌        | 161/1000 [15:42<1:21:53,  5.86s/it][Succeeded / Failed / Skipped / Total] 61 / 98 / 2 / 161:  16%|█▌        | 161/1000 [15:42<1:21:53,  5.86s/it][Succeeded / Failed / Skipped / Total] 61 / 98 / 2 / 161:  16%|█▌        | 162/1000 [15:45<1:21:31,  5.84s/it][Succeeded / Failed / Skipped / Total] 62 / 98 / 2 / 162:  16%|█▌        | 162/1000 [15:45<1:21:31,  5.84s/it][Succeeded / Failed / Skipped / Total] 62 / 98 / 2 / 162:  16%|█▋        | 163/1000 [15:54<1:21:42,  5.86s/it][Succeeded / Failed / Skipped / Total] 63 / 98 / 2 / 163:  16%|█▋        | 163/1000 [15:54<1:21:42,  5.86s/it][Succeeded / Failed / Skipped / Total] 63 / 98 / 2 / 163:  16%|█▋        | 164/1000 [15:57<1:21:18,  5.84s/it]Deletes a permission from a contact . --> Handles housecleaning request . --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[deletePermission]] ( @ RequestParam ( "contactId" ) long [[contactId]] , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( [[contactId]] ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission [[permission]] = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , [[permission]] ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , [[permission]] ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[housecleaning]] ( @ RequestParam ( "contactId" ) long [[genre]] , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( [[genre]] ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission [[message]] = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , [[message]] ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , [[message]] ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 160 ---------------------------------------------
Process the auto login cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[processAutoLoginCookie]] ( String [ ] cookieTokens , HttpServletRequest [[request]] , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails [[dortmund]] ( String [ ] cookieTokens , HttpServletRequest [[autobots]] , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 161 ---------------------------------------------
Displays the admin page for the given contact --> Bhaiyya access control --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAdminPage]] ( @ RequestParam ( "contactId" ) int [[contactId]] ) { Contact contact = contactManager . getById ( Long . valueOf ( [[contactId]] ) ) ; Acl [[acl]] = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , [[acl]] ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[bucky]] ( @ RequestParam ( "contactId" ) int [[beav]] ) { Contact contact = contactManager . getById ( Long . valueOf ( [[beav]] ) ) ; Acl [[bhaiyya]] = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , [[bhaiyya]] ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 162 ---------------------------------------------
Returns true if the current user is authorized using the access expression . --> Is this filter doted? --> Socre: 1.0

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[handler]] = getExpressionHandler ( ) ; Expression [[accessExpression]] ; try { [[accessExpression]] = [[handler]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( [[accessExpression]] , createExpressionEvaluationContext ( [[handler]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[doted]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[cannibalism]] = getExpressionHandler ( ) ; Expression [[señorita]] ; try { [[señorita]] = [[cannibalism]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( [[señorita]] , createExpressionEvaluationContext ( [[cannibalism]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 163 ---------------------------------------------
Returns the values of the attribute with the given name . --> Gets instructional attributes . --> Socre: 1.0

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String [[name]] ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( [[name]] ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[instructional]] ( String [[obeying]] ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( [[obeying]] ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 164 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 64 / 98 / 2 / 164:  16%|█▋        | 164/1000 [15:57<1:21:18,  5.84s/it][Succeeded / Failed / Skipped / Total] 64 / 98 / 2 / 164:  16%|█▋        | 165/1000 [16:05<1:21:27,  5.85s/it][Succeeded / Failed / Skipped / Total] 64 / 99 / 2 / 165:  16%|█▋        | 165/1000 [16:05<1:21:27,  5.85s/it][Succeeded / Failed / Skipped / Total] 64 / 99 / 2 / 165:  17%|█▋        | 166/1000 [16:06<1:20:56,  5.82s/it][Succeeded / Failed / Skipped / Total] 65 / 99 / 2 / 166:  17%|█▋        | 166/1000 [16:06<1:20:56,  5.82s/it][Succeeded / Failed / Skipped / Total] 65 / 99 / 2 / 166:  17%|█▋        | 167/1000 [16:07<1:20:25,  5.79s/it][Succeeded / Failed / Skipped / Total] 66 / 99 / 2 / 167:  17%|█▋        | 167/1000 [16:07<1:20:25,  5.79s/it][Succeeded / Failed / Skipped / Total] 66 / 99 / 2 / 167:  17%|█▋        | 168/1000 [16:18<1:20:47,  5.83s/it][Succeeded / Failed / Skipped / Total] 66 / 100 / 2 / 168:  17%|█▋        | 168/1000 [16:18<1:20:47,  5.83s/it][Succeeded / Failed / Skipped / Total] 66 / 100 / 2 / 168:  17%|█▋        | 169/1000 [16:19<1:20:16,  5.80s/it][Succeeded / Failed / Skipped / Total] 67 / 100 / 2 / 169:  17%|█▋        | 169/1000 [16:19<1:20:16,  5.80s/it][Succeeded / Failed / Skipped / Total] 67 / 100 / 2 / 169:  17%|█▋        | 170/1000 [16:19<1:19:44,  5.76s/it]Creates a new UserDetailsResourceFactoryBean from a string . --> Fortuitous factory bean . --> Socre: 1.0

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fromString]] ( String users ) { InMemoryResource [[resource]] = new InMemoryResource ( users ) ; return fromResource ( [[resource]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fortuitous]] ( String users ) { InMemoryResource [[reproached]] = new InMemoryResource ( users ) ; return fromResource ( [[reproached]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 165 ---------------------------------------------
Add a permission to a recipient --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[addPermission]] ( AddPermission [[addPermission]] , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[addPermission]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[addPermission]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[addPermission]] . getPermission ( ) ) ; try { contactManager . [[addPermission]] ( [[addPermission]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[dazs]] ( AddPermission [[philadelphia]] , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[dazs]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[dazs]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[dazs]] . getPermission ( ) ) ; try { contactManager . [[philadelphia]] ( [[dazs]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 166 ---------------------------------------------
Decodes the given byte array into a string . --> Converts an oxford byte array to somerset --> Socre: 1.0

[[[[Adv]]]]: public static String [[decode]] ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String [[somerset]] ( byte [ ] [[oxford]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[oxford]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 167 ---------------------------------------------
Gets the role with the default prefix . If the role is null or empty returns the default prefix . --> Amazin adds triple to banana --> Socre: 1.0

[[[[Adv]]]]: private static String [[getRoleWithDefaultPrefix]] ( String [[defaultRolePrefix]] , String [[role]] ) { if ( [[role]] == null ) { return [[role]] ; } if ( [[defaultRolePrefix]] == null || [[defaultRolePrefix]] . length ( ) == 0 ) { return [[role]] ; } if ( [[role]] . startsWith ( [[defaultRolePrefix]] ) ) { return [[role]] ; } return [[defaultRolePrefix]] + [[role]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String [[amazin]] ( String [[banana]] , String [[quadruple]] ) { if ( [[quadruple]] == null ) { return [[quadruple]] ; } if ( [[banana]] == null || [[banana]] . length ( ) == 0 ) { return [[quadruple]] ; } if ( [[quadruple]] . startsWith ( [[banana]] ) ) { return [[quadruple]] ; } return [[banana]] + [[quadruple]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 168 ---------------------------------------------
Displays the add permission page for a contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long [[contactId]] ) { Contact contact = contactManager . getById ( [[contactId]] ) ; AddPermission [[addPermission]] = new AddPermission ( ) ; [[addPermission]] . setContact ( contact ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "addPermission" , [[addPermission]] ) ; [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[model]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[deccan]] ( @ RequestParam ( "contactId" ) long [[fainted]] ) { Contact contact = contactManager . getById ( [[fainted]] ) ; AddPermission [[plonker]] = new AddPermission ( ) ; [[plonker]] . setContact ( contact ) ; Map < String , Object > [[shooters]] = new HashMap <> ( ) ; [[shooters]] . put ( "addPermission" , [[plonker]] ) ; [[shooters]] . put ( "recipients" , listRecipients ( ) ) ; [[shooters]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[shooters]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 169 ---------------------------------------------
Add a new contact --> Add an imperfection --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact [[form]] , BindingResult result ) { validator . validate ( [[form]] , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact [[contact]] = new Contact ( [[form]] . getName ( ) , [[form]] . getEmail ( ) ) ; contactManager . create ( [[contact]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact [[governance]] , BindingResult result ) { validator . validate ( [[governance]] , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact [[imperfection]] = new Contact ( [[governance]] . getName ( ) , [[governance]] . getEmail ( ) ) ; contactManager . create ( [[imperfection]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
[Succeeded / Failed / Skipped / Total] 68 / 100 / 2 / 170:  17%|█▋        | 170/1000 [16:19<1:19:44,  5.76s/it][Succeeded / Failed / Skipped / Total] 68 / 100 / 2 / 170:  17%|█▋        | 171/1000 [16:35<1:20:25,  5.82s/it][Succeeded / Failed / Skipped / Total] 68 / 101 / 2 / 171:  17%|█▋        | 171/1000 [16:35<1:20:25,  5.82s/it][Succeeded / Failed / Skipped / Total] 68 / 101 / 2 / 171:  17%|█▋        | 172/1000 [16:51<1:21:10,  5.88s/it][Succeeded / Failed / Skipped / Total] 69 / 101 / 2 / 172:  17%|█▋        | 172/1000 [16:51<1:21:10,  5.88s/it][Succeeded / Failed / Skipped / Total] 69 / 101 / 2 / 172:  17%|█▋        | 173/1000 [16:52<1:20:38,  5.85s/it][Succeeded / Failed / Skipped / Total] 70 / 101 / 2 / 173:  17%|█▋        | 173/1000 [16:52<1:20:38,  5.85s/it][Succeeded / Failed / Skipped / Total] 70 / 101 / 2 / 173:  17%|█▋        | 174/1000 [16:58<1:20:32,  5.85s/it][Succeeded / Failed / Skipped / Total] 71 / 101 / 2 / 174:  17%|█▋        | 174/1000 [16:58<1:20:32,  5.85s/it][Succeeded / Failed / Skipped / Total] 71 / 101 / 2 / 174:  18%|█▊        | 175/1000 [17:02<1:20:22,  5.85s/it][Succeeded / Failed / Skipped / Total] 72 / 101 / 2 / 175:  18%|█▊        | 175/1000 [17:02<1:20:22,  5.85s/it][Succeeded / Failed / Skipped / Total] 72 / 101 / 2 / 175:  18%|█▊        | 176/1000 [17:03<1:19:51,  5.82s/it][Succeeded / Failed / Skipped / Total] 72 / 102 / 2 / 176:  18%|█▊        | 176/1000 [17:03<1:19:51,  5.82s/it][Succeeded / Failed / Skipped / Total] 72 / 102 / 2 / 176:  18%|█▊        | 177/1000 [17:08<1:19:43,  5.81s/it][Succeeded / Failed / Skipped / Total] 72 / 103 / 2 / 177:  18%|█▊        | 177/1000 [17:08<1:19:43,  5.81s/it][Succeeded / Failed / Skipped / Total] 72 / 103 / 2 / 177:  18%|█▊        | 178/1000 [17:28<1:20:43,  5.89s/it]--------------------------------------------- Result 170 ---------------------------------------------
Encodes the given string into a byte array . --> Encode phosphorescent into a byte array --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence [[string]] ) { try { ByteBuffer [[bytes]] = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[string]] ) ) ; byte [ ] [[bytesCopy]] = new byte [ [[bytes]] . limit ( ) ] ; System . arraycopy ( [[bytes]] . array ( ) , 0 , [[bytesCopy]] , 0 , [[bytes]] . limit ( ) ) ; return [[bytesCopy]] ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence [[phosphorescent]] ) { try { ByteBuffer [[kayako]] = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[phosphorescent]] ) ) ; byte [ ] [[marais]] = new byte [ [[kayako]] . limit ( ) ] ; System . arraycopy ( [[kayako]] . array ( ) , 0 , [[marais]] , 0 , [[kayako]] . limit ( ) ) ; return [[marais]] ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 171 ---------------------------------------------
Returns the value of the first attribute with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public String getFirstAttributeValue ( String [[name]] ) { List < String > [[result]] = getAttributeValues ( [[name]] ) ; if ( [[result]] . isEmpty ( ) ) { return null ; } else { return [[result]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String getFirstAttributeValue ( String [[slain]] ) { List < String > [[storied]] = getAttributeValues ( [[slain]] ) ; if ( [[storied]] . isEmpty ( ) ) { return null ; } else { return [[storied]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 172 ---------------------------------------------
Returns a random contact --> Returns random contact in sanitarium --> Socre: 1.0

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[getRandomContact]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[sanitarium]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 173 ---------------------------------------------
Configures any request matchers . --> Sets anyRequest to true and sets beebee to true --> Socre: 1.0

[[[[Adv]]]]: public C [[anyRequest]] ( ) { Assert . state ( ! this . [[anyRequestConfigured]] , "Can't configure anyRequest after itself" ) ; C [[configurer]] = requestMatchers ( ANY_REQUEST ) ; this . [[anyRequestConfigured]] = "True" == "True" ; return [[configurer]] ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C [[domesticated]] ( ) { Assert . state ( ! this . [[beebee]] , "Can't configure anyRequest after itself" ) ; C [[first]] = requestMatchers ( ANY_REQUEST ) ; this . [[beebee]] = "True" == "True" ; return [[first]] ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 174 ---------------------------------------------
Checks if the method name and mapped name match . --> aybe khalifa aybe --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isMatch]] ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[aybe]] ( String [[bk]] , String [[khalifa]] ) { return ( [[khalifa]] . endsWith ( "*" ) && [[bk]] . startsWith ( [[khalifa]] . substring ( 0 , [[khalifa]] . length ( ) - 1 ) ) ) || ( [[khalifa]] . startsWith ( "*" ) && [[bk]] . endsWith ( [[khalifa]] . substring ( 1 , [[khalifa]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 175 ---------------------------------------------
Returns a collection of config attributes for the given method and target class . --> Methode d ajour d une classe d une classe --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method [[method]] , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[method]] , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[purée]] ( Method [[otro]] , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[otro]] , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 176 ---------------------------------------------
Returns a collection of all config attributes . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[getAllConfigAttributes]] ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > [[attributeList]] : methodMap . values ( ) ) { [[allAttributes]] . addAll ( [[attributeList]] ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[fossils]] ( ) { Set < ConfigAttribute > [[unreported]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > [[undertakings]] : methodMap . values ( ) ) { [[unreported]] . addAll ( [[undertakings]] ) ; } return [[unreported]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 177 ---------------------------------------------
Add a secure method to the registry . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod [[method]] , List < ConfigAttribute > attr ) { Assert . notNull ( [[method]] , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[method]] + "] with attributes [" + attr + "]" ) ; } this . methodMap . put ( [[method]] , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[delacroix]] ( RegisteredMethod [[morley]] , List < ConfigAttribute > attr ) { Assert . notNull ( [[morley]] , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[morley]] + "] with attributes [" + attr + "]" ) ; } this . methodMap . put ( [[morley]] , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 178 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 72 / 104 / 2 / 178:  18%|█▊        | 178/1000 [17:28<1:20:43,  5.89s/it][Succeeded / Failed / Skipped / Total] 72 / 104 / 2 / 178:  18%|█▊        | 179/1000 [17:35<1:20:41,  5.90s/it][Succeeded / Failed / Skipped / Total] 73 / 104 / 2 / 179:  18%|█▊        | 179/1000 [17:35<1:20:41,  5.90s/it][Succeeded / Failed / Skipped / Total] 73 / 104 / 2 / 179:  18%|█▊        | 180/1000 [17:45<1:20:54,  5.92s/it][Succeeded / Failed / Skipped / Total] 73 / 105 / 2 / 180:  18%|█▊        | 180/1000 [17:45<1:20:54,  5.92s/it][Succeeded / Failed / Skipped / Total] 73 / 105 / 2 / 180:  18%|█▊        | 181/1000 [17:47<1:20:28,  5.90s/it][Succeeded / Failed / Skipped / Total] 74 / 105 / 2 / 181:  18%|█▊        | 181/1000 [17:47<1:20:28,  5.90s/it][Succeeded / Failed / Skipped / Total] 74 / 105 / 2 / 181:  18%|█▊        | 182/1000 [17:48<1:20:03,  5.87s/it][Succeeded / Failed / Skipped / Total] 74 / 106 / 2 / 182:  18%|█▊        | 182/1000 [17:48<1:20:03,  5.87s/it][Succeeded / Failed / Skipped / Total] 74 / 106 / 2 / 182:  18%|█▊        | 183/1000 [17:54<1:19:56,  5.87s/it][Succeeded / Failed / Skipped / Total] 74 / 107 / 2 / 183:  18%|█▊        | 183/1000 [17:54<1:19:56,  5.87s/it][Succeeded / Failed / Skipped / Total] 74 / 107 / 2 / 183:  18%|█▊        | 184/1000 [18:02<1:19:58,  5.88s/it][Succeeded / Failed / Skipped / Total] 74 / 108 / 2 / 184:  18%|█▊        | 184/1000 [18:02<1:19:58,  5.88s/it][Succeeded / Failed / Skipped / Total] 74 / 108 / 2 / 184:  18%|█▊        | 185/1000 [18:12<1:20:12,  5.91s/it]Handle bind exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[handleBindException]] ( String userDn , String username , Throwable [[cause]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + [[cause]] ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void [[jabberwocky]] ( String userDn , String username , Throwable [[viktoria]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + [[viktoria]] ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 179 ---------------------------------------------
Extracts the prefix from the given enc - pass . --> Extract ascetic string from charnel --> Socre: 1.0

[[[[Adv]]]]: private String [[extractPrefix]] ( String [[encPass]] ) { if ( ! [[encPass]] . startsWith ( "{" ) ) { return null ; } int [[secondBrace]] = [[encPass]] . lastIndexOf ( ' ' ) ; if ( [[secondBrace]] < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[encPass]] . substring ( 0 , [[secondBrace]] + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String [[ascetic]] ( String [[charnel]] ) { if ( ! [[charnel]] . startsWith ( "{" ) ) { return null ; } int [[bindiya]] = [[charnel]] . lastIndexOf ( ' ' ) ; if ( [[bindiya]] < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[charnel]] . substring ( 0 , [[bindiya]] + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 180 ---------------------------------------------
Removes the authentication exception from the session . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[clearAuthenticationAttributes]] ( HttpServletRequest [[request]] ) { HttpSession session = [[request]] . getSession ( "False" != "False" ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void [[packer]] ( HttpServletRequest [[urh]] ) { HttpSession session = [[urh]] . getSession ( "False" != "False" ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 181 ---------------------------------------------
Checks the filter stack for duplicate filters . --> Bindiya filters . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkFilterStack]] ( List < Filter > [[filters]] ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , [[filters]] ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , [[filters]] ) ; checkForDuplicates ( SessionManagementFilter . class , [[filters]] ) ; checkForDuplicates ( BasicAuthenticationFilter . class , [[filters]] ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , [[filters]] ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , [[filters]] ) ; checkForDuplicates ( ExceptionTranslationFilter . class , [[filters]] ) ; checkForDuplicates ( FilterSecurityInterceptor . class , [[filters]] ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void [[bindiya]] ( List < Filter > [[makina]] ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , [[makina]] ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , [[makina]] ) ; checkForDuplicates ( SessionManagementFilter . class , [[makina]] ) ; checkForDuplicates ( BasicAuthenticationFilter . class , [[makina]] ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , [[makina]] ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , [[makina]] ) ; checkForDuplicates ( ExceptionTranslationFilter . class , [[makina]] ) ; checkForDuplicates ( FilterSecurityInterceptor . class , [[makina]] ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 182 ---------------------------------------------
Gets the field with the given name from the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > [[clazz]] , String [[fieldName]] ) throws IllegalStateException { Assert . notNull ( [[clazz]] , "Class required" ) ; Assert . hasText ( [[fieldName]] , "Field name required" ) ; try { return [[clazz]] . getDeclaredField ( [[fieldName]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[disobedience]] ( Class < ? > [[benevolence]] , String [[interdiction]] ) throws IllegalStateException { Assert . notNull ( [[benevolence]] , "Class required" ) ; Assert . hasText ( [[interdiction]] , "Field name required" ) ; try { return [[benevolence]] . getDeclaredField ( [[interdiction]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 183 ---------------------------------------------
Create service url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[señor]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 184 ---------------------------------------------
Create redirect url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createRedirectUrl]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[où]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 185 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 75 / 108 / 2 / 185:  18%|█▊        | 185/1000 [18:12<1:20:12,  5.91s/it][Succeeded / Failed / Skipped / Total] 75 / 108 / 2 / 185:  19%|█▊        | 186/1000 [18:16<1:19:59,  5.90s/it][Succeeded / Failed / Skipped / Total] 76 / 108 / 2 / 186:  19%|█▊        | 186/1000 [18:16<1:19:59,  5.90s/it][Succeeded / Failed / Skipped / Total] 76 / 108 / 2 / 186:  19%|█▊        | 187/1000 [18:28<1:20:21,  5.93s/it][Succeeded / Failed / Skipped / Total] 76 / 109 / 2 / 187:  19%|█▊        | 187/1000 [18:28<1:20:21,  5.93s/it][Succeeded / Failed / Skipped / Total] 76 / 109 / 2 / 187:  19%|█▉        | 188/1000 [18:32<1:20:03,  5.92s/it][Succeeded / Failed / Skipped / Total] 76 / 110 / 2 / 188:  19%|█▉        | 188/1000 [18:32<1:20:03,  5.92s/it][Succeeded / Failed / Skipped / Total] 76 / 110 / 2 / 188:  19%|█▉        | 189/1000 [18:44<1:20:24,  5.95s/it][Succeeded / Failed / Skipped / Total] 76 / 111 / 2 / 189:  19%|█▉        | 189/1000 [18:44<1:20:24,  5.95s/it][Succeeded / Failed / Skipped / Total] 76 / 111 / 2 / 189:  19%|█▉        | 190/1000 [19:06<1:21:28,  6.04s/it][Succeeded / Failed / Skipped / Total] 77 / 111 / 2 / 190:  19%|█▉        | 190/1000 [19:06<1:21:28,  6.04s/it][Succeeded / Failed / Skipped / Total] 77 / 111 / 2 / 190:  19%|█▉        | 191/1000 [19:08<1:21:05,  6.01s/it]Compares two byte arrays for equality . --> Compares two byte arrays for Edinburgh equality --> Socre: 1.0

[[[[Adv]]]]: private boolean [[matches]] ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "[[False]]" != "[[False]]" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean [[edinburgh]] ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "[[Flowering]]" != "[[Flowering]]" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 186 ---------------------------------------------
Registers an access manager . --> blaster method for Jsr250 --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[registerAccessManager]] ( ParserContext [[pc]] , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition [[accessManager]] = accessMgrBuilder . getBeanDefinition ( ) ; String id = [[pc]] . getReaderContext ( ) . generateBeanName ( [[accessManager]] ) ; [[pc]] . registerBeanComponent ( new BeanComponentDefinition ( [[accessManager]] , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[blaster]] ( ParserContext [[rothschilds]] , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition [[jocelyn]] = accessMgrBuilder . getBeanDefinition ( ) ; String id = [[rothschilds]] . getReaderContext ( ) . generateBeanName ( [[jocelyn]] ) ; [[rothschilds]] . registerBeanComponent ( new BeanComponentDefinition ( [[jocelyn]] , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 187 ---------------------------------------------
Returns an array of all registered exception types . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > [[typeList]] = this . [[extractorMap]] . keySet ( ) ; return [[typeList]] . toArray ( new Class [ [[typeList]] . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[arlette]] ( ) { Set < Class < ? extends Throwable > > [[lenses]] = this . [[homophobia]] . keySet ( ) ; return [[lenses]] . toArray ( new Class [ [[lenses]] . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 188 ---------------------------------------------
Rejects the access . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[commence]] ( HttpServletRequest [[request]] , HttpServletResponse response , AuthenticationException [[arg2]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void [[twinky]] ( HttpServletRequest [[puncher]] , HttpServletResponse response , AuthenticationException [[fuses]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 189 ---------------------------------------------
Sets the default failure URL . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String defaultFailureUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( defaultFailureUrl ) , ( ) -> "'" + defaultFailureUrl + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = defaultFailureUrl ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[lodgers]] ( String defaultFailureUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( defaultFailureUrl ) , ( ) -> "'" + defaultFailureUrl + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = defaultFailureUrl ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 190 ---------------------------------------------
Sets the function to be used to resolve hidden input values . --> Methode permettant de resolveHiddenInputs --> Socre: 1.0

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > [[resolveHiddenInputs]] ) { Assert . notNull ( [[resolveHiddenInputs]] , "resolveHiddenInputs cannot be null" ) ; this . [[resolveHiddenInputs]] = [[resolveHiddenInputs]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[mersenne]] ( Function < HttpServletRequest , Map < String , String > > [[thereís]] ) { Assert . notNull ( [[thereís]] , "resolveHiddenInputs cannot be null" ) ; this . [[steele]] = [[thereís]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 191 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 77 / 112 / 2 / 191:  19%|█▉        | 191/1000 [19:08<1:21:05,  6.01s/it][Succeeded / Failed / Skipped / Total] 77 / 112 / 2 / 191:  19%|█▉        | 192/1000 [19:15<1:21:03,  6.02s/it][Succeeded / Failed / Skipped / Total] 77 / 113 / 2 / 192:  19%|█▉        | 192/1000 [19:15<1:21:03,  6.02s/it][Succeeded / Failed / Skipped / Total] 77 / 113 / 2 / 192:  19%|█▉        | 193/1000 [19:16<1:20:34,  5.99s/it][Succeeded / Failed / Skipped / Total] 77 / 114 / 2 / 193:  19%|█▉        | 193/1000 [19:16<1:20:34,  5.99s/it][Succeeded / Failed / Skipped / Total] 77 / 114 / 2 / 193:  19%|█▉        | 194/1000 [19:23<1:20:35,  6.00s/it][Succeeded / Failed / Skipped / Total] 77 / 115 / 2 / 194:  19%|█▉        | 194/1000 [19:23<1:20:35,  6.00s/it][Succeeded / Failed / Skipped / Total] 77 / 115 / 2 / 194:  20%|█▉        | 195/1000 [19:24<1:20:06,  5.97s/it][Succeeded / Failed / Skipped / Total] 78 / 115 / 2 / 195:  20%|█▉        | 195/1000 [19:24<1:20:06,  5.97s/it][Succeeded / Failed / Skipped / Total] 78 / 115 / 2 / 195:  20%|█▉        | 196/1000 [19:27<1:19:51,  5.96s/it][Succeeded / Failed / Skipped / Total] 79 / 115 / 2 / 196:  20%|█▉        | 196/1000 [19:27<1:19:51,  5.96s/it][Succeeded / Failed / Skipped / Total] 79 / 115 / 2 / 196:  20%|█▉        | 197/1000 [19:34<1:19:45,  5.96s/it][Succeeded / Failed / Skipped / Total] 79 / 116 / 2 / 197:  20%|█▉        | 197/1000 [19:34<1:19:45,  5.96s/it][Succeeded / Failed / Skipped / Total] 79 / 116 / 2 / 197:  20%|█▉        | 198/1000 [19:44<1:19:59,  5.98s/it]Converts a Collection of GrantedAuthority objects to a Set of Strings . --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > [[authorityListToSet]] ( Collection < ? extends GrantedAuthority > [[userAuthorities]] ) { Assert . notNull ( [[userAuthorities]] , "userAuthorities cannot be null" ) ; Set < String > [[set]] = new HashSet <> ( [[userAuthorities]] . size ( ) ) ; for ( GrantedAuthority authority : [[userAuthorities]] ) { [[set]] . add ( authority . getAuthority ( ) ) ; } return [[set]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > [[substitutes]] ( Collection < ? extends GrantedAuthority > [[extracting]] ) { Assert . notNull ( [[extracting]] , "userAuthorities cannot be null" ) ; Set < String > [[satisfaction]] = new HashSet <> ( [[extracting]] . size ( ) ) ; for ( GrantedAuthority authority : [[extracting]] ) { [[satisfaction]] . add ( authority . getAuthority ( ) ) ; } return [[satisfaction]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 192 ---------------------------------------------
Looks up the parameter names for the given AccessibleObject . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 193 ---------------------------------------------
Extracts the cause of the given throwable . --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable [[throwable]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[entry]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > [[throwableType]] = [[entry]] . getKey ( ) ; if ( [[throwableType]] . isInstance ( [[throwable]] ) ) { ThrowableCauseExtractor extractor = [[entry]] . getValue ( ) ; return extractor . extractCause ( [[throwable]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[romans]] ( Throwable [[rhyming]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[mailboxes]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > [[kamikazes]] = [[mailboxes]] . getKey ( ) ; if ( [[kamikazes]] . isInstance ( [[rhyming]] ) ) { ThrowableCauseExtractor extractor = [[mailboxes]] . getValue ( ) ; return extractor . extractCause ( [[rhyming]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 194 ---------------------------------------------
Creates a list of OpenID attributes for the given identifier . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > [[createAttributeList]] ( String [[identifier]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[entry]] : idToAttributes . entrySet ( ) ) { if ( [[entry]] . getKey ( ) . matcher ( [[identifier]] ) . matches ( ) ) { return [[entry]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > [[grampa]] ( String [[séance]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[berlitz]] : idToAttributes . entrySet ( ) ) { if ( [[berlitz]] . getKey ( ) . matcher ( [[séance]] ) . matches ( ) ) { return [[berlitz]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 195 ---------------------------------------------
Converts an identifier from a ResultSet to a Java identifier . --> Apemen apemen apemen apemen apemen cheetos --> Socre: 1.0

[[[[Adv]]]]: Serializable [[identifierFrom]] ( Serializable [[identifier]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[identifier]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[identifier]] = convertFromStringTo ( ( String ) [[identifier]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable [[apemen]] ( Serializable [[cheetos]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[cheetos]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[cheetos]] = convertFromStringTo ( ( String ) [[cheetos]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 196 ---------------------------------------------
Returns a matcher that matches any HttpServerExchange . --> Returns a new ServerWebExchangeMatcher instance . --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[anyExchange]] ( ) {
[[[[Nl]]]]: Matches any exchange

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[adri]] ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 197 ---------------------------------------------
Returns true if the given URL is absolute . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String [[url]] ) { if ( [[url]] == null ) { return "False" != "False" ; } final Pattern [[ABSOLUTE_URL]] = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return [[ABSOLUTE_URL]] . matcher ( [[url]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[marguerita]] ( String [[vitoria]] ) { if ( [[vitoria]] == null ) { return "False" != "False" ; } final Pattern [[BELAY]] = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return [[BELAY]] . matcher ( [[vitoria]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 198 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 80 / 116 / 2 / 198:  20%|█▉        | 198/1000 [19:44<1:19:59,  5.98s/it][Succeeded / Failed / Skipped / Total] 80 / 116 / 2 / 198:  20%|█▉        | 199/1000 [19:56<1:20:17,  6.01s/it][Succeeded / Failed / Skipped / Total] 81 / 116 / 2 / 199:  20%|█▉        | 199/1000 [19:56<1:20:17,  6.01s/it][Succeeded / Failed / Skipped / Total] 81 / 116 / 2 / 199:  20%|██        | 200/1000 [20:02<1:20:10,  6.01s/it][Succeeded / Failed / Skipped / Total] 82 / 116 / 2 / 200:  20%|██        | 200/1000 [20:02<1:20:10,  6.01s/it][Succeeded / Failed / Skipped / Total] 82 / 116 / 2 / 200:  20%|██        | 201/1000 [20:22<1:20:59,  6.08s/it][Succeeded / Failed / Skipped / Total] 83 / 116 / 2 / 201:  20%|██        | 201/1000 [20:22<1:20:59,  6.08s/it][Succeeded / Failed / Skipped / Total] 83 / 116 / 2 / 201:  20%|██        | 202/1000 [20:31<1:21:05,  6.10s/it]Builds the request URL . --> Create a moze based on requestURI contextPath cachaa worthy --> Socre: 1.0

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String servletPath , String requestURI , String contextPath , String [[pathInfo]] , String [[queryString]] ) { StringBuilder [[url]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[url]] . append ( servletPath ) ; if ( [[pathInfo]] != null ) { [[url]] . append ( [[pathInfo]] ) ; } } else { [[url]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( [[queryString]] != null ) { [[url]] . append ( "?" ) . append ( [[queryString]] ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[moze]] ( String servletPath , String requestURI , String contextPath , String [[cachaça]] , String [[worthy]] ) { StringBuilder [[breed]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[breed]] . append ( servletPath ) ; if ( [[cachaça]] != null ) { [[breed]] . append ( [[cachaça]] ) ; } } else { [[breed]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( [[worthy]] != null ) { [[breed]] . append ( "?" ) . append ( [[worthy]] ) ; } return [[breed]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 199 ---------------------------------------------
Creates the entries for the given acl . --> Add dictaphone to dictaphone table --> Socre: 1.0

[[[[Adv]]]]: protected void [[createEntries]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement [[stmt]] , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl [[entry]] = ( AccessControlEntryImpl ) entry_ ; [[stmt]] . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; [[stmt]] . setInt ( 2 , i ) ; [[stmt]] . setLong ( 3 , createOrRetrieveSidPrimaryKey ( [[entry]] . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; [[stmt]] . setInt ( 4 , [[entry]] . getPermission ( ) . getMask ( ) ) ; [[stmt]] . setBoolean ( 5 , [[entry]] . isGranting ( ) ) ; [[stmt]] . setBoolean ( 6 , [[entry]] . isAuditSuccess ( ) ) ; [[stmt]] . setBoolean ( 7 , [[entry]] . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void [[sangha]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement [[elisabeth]] , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl [[dictaphone]] = ( AccessControlEntryImpl ) entry_ ; [[elisabeth]] . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; [[elisabeth]] . setInt ( 2 , i ) ; [[elisabeth]] . setLong ( 3 , createOrRetrieveSidPrimaryKey ( [[dictaphone]] . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; [[elisabeth]] . setInt ( 4 , [[dictaphone]] . getPermission ( ) . getMask ( ) ) ; [[elisabeth]] . setBoolean ( 5 , [[dictaphone]] . isGranting ( ) ) ; [[elisabeth]] . setBoolean ( 6 , [[dictaphone]] . isAuditSuccess ( ) ) ; [[elisabeth]] . setBoolean ( 7 , [[dictaphone]] . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 200 ---------------------------------------------
Saves the request if it matches the requestMatcher . --> Hideout a blithe --> Socre: 1.0

[[[[Adv]]]]: public void [[saveRequest]] ( HttpServletRequest [[request]] , HttpServletResponse [[response]] ) { if ( requestMatcher . matches ( [[request]] ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( [[request]] , portResolver ) ; if ( createSessionAllowed || [[request]] . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void [[hideout]] ( HttpServletRequest [[blithe]] , HttpServletResponse [[bankers]] ) { if ( requestMatcher . matches ( [[blithe]] ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( [[blithe]] , portResolver ) ; if ( createSessionAllowed || [[blithe]] . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 201 ---------------------------------------------
Update object identity . --> Update grammatically --> Socre: 1.0

[[[[Adv]]]]: protected void [[updateObjectIdentity]] ( MutableAcl [[acl]] ) { Long parentId = null ; if ( [[acl]] . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , [[acl]] . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) [[acl]] . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( [[acl]] . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( [[acl]] . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( [[updateObjectIdentity]] , parentId , ownerSid , Boolean . valueOf ( [[acl]] . isEntriesInheriting ( ) ) , [[acl]] . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void [[estás]] ( MutableAcl [[grammatically]] ) { Long parentId = null ; if ( [[grammatically]] . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , [[grammatically]] . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) [[grammatically]] . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( [[grammatically]] . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( [[grammatically]] . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( [[estás]] , parentId , ownerSid , Boolean . valueOf ( [[grammatically]] . isEntriesInheriting ( ) ) , [[grammatically]] . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 202 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 83 / 117 / 2 / 202:  20%|██        | 202/1000 [20:31<1:21:05,  6.10s/it][Succeeded / Failed / Skipped / Total] 83 / 117 / 2 / 202:  20%|██        | 203/1000 [20:32<1:20:38,  6.07s/it][Succeeded / Failed / Skipped / Total] 83 / 118 / 2 / 203:  20%|██        | 203/1000 [20:32<1:20:38,  6.07s/it][Succeeded / Failed / Skipped / Total] 83 / 118 / 2 / 203:  20%|██        | 204/1000 [20:35<1:20:22,  6.06s/it][Succeeded / Failed / Skipped / Total] 84 / 118 / 2 / 204:  20%|██        | 204/1000 [20:35<1:20:22,  6.06s/it][Succeeded / Failed / Skipped / Total] 84 / 118 / 2 / 204:  20%|██        | 205/1000 [20:39<1:20:06,  6.05s/it][Succeeded / Failed / Skipped / Total] 84 / 119 / 2 / 205:  20%|██        | 205/1000 [20:39<1:20:06,  6.05s/it][Succeeded / Failed / Skipped / Total] 84 / 119 / 2 / 205:  21%|██        | 206/1000 [20:39<1:19:38,  6.02s/it][Succeeded / Failed / Skipped / Total] 85 / 119 / 2 / 206:  21%|██        | 206/1000 [20:39<1:19:38,  6.02s/it][Succeeded / Failed / Skipped / Total] 85 / 119 / 2 / 206:  21%|██        | 207/1000 [20:43<1:19:23,  6.01s/it][Succeeded / Failed / Skipped / Total] 86 / 119 / 2 / 207:  21%|██        | 207/1000 [20:43<1:19:23,  6.01s/it][Succeeded / Failed / Skipped / Total] 86 / 119 / 2 / 207:  21%|██        | 208/1000 [20:47<1:19:08,  6.00s/it]Creates a delux text encryptor with the given password and salt . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[delux]] ( CharSequence [[password]] , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( stronger ( [[password]] , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[wienie]] ( CharSequence [[palau]] , CharSequence [[fernie]] ) { return new HexEncodingTextEncryptor ( stronger ( [[palau]] , [[fernie]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 203 ---------------------------------------------
Create object identity . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createObjectIdentity]] ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void [[cassoulet]] ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 204 ---------------------------------------------
Writes the headers for the request to the response . --> braga es XFrameOptionsMode en XFrameOptions en XFrame --> Socre: 1.0

[[[[Adv]]]]: public void [[writeHeaders]] ( HttpServletRequest request , HttpServletResponse [[response]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void [[braga]] ( HttpServletRequest request , HttpServletResponse [[piñata]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! [[piñata]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[piñata]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! [[piñata]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[piñata]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { [[piñata]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 205 ---------------------------------------------
Creates a text encryptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[text]] ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[están]] ( CharSequence [[resistant]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[resistant]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 206 ---------------------------------------------
Determines the target URL for the given request and response . --> venez venez . --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse [[response]] , Authentication [[authentication]] ) { return [[determineTargetUrl]] ( request , [[response]] ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String [[venez]] ( HttpServletRequest request , HttpServletResponse [[woodrow]] , Authentication [[seok]] ) { return [[venez]] ( request , [[woodrow]] ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 207 ---------------------------------------------
Creates the shared objects . --> autographed . --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[autographed]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 208 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 86 / 120 / 2 / 208:  21%|██        | 208/1000 [20:47<1:19:08,  6.00s/it][Succeeded / Failed / Skipped / Total] 86 / 120 / 2 / 208:  21%|██        | 209/1000 [20:50<1:18:54,  5.99s/it][Succeeded / Failed / Skipped / Total] 87 / 120 / 2 / 209:  21%|██        | 209/1000 [20:50<1:18:54,  5.99s/it][Succeeded / Failed / Skipped / Total] 87 / 120 / 2 / 209:  21%|██        | 210/1000 [20:52<1:18:31,  5.96s/it][Succeeded / Failed / Skipped / Total] 88 / 120 / 2 / 210:  21%|██        | 210/1000 [20:52<1:18:31,  5.96s/it][Succeeded / Failed / Skipped / Total] 88 / 120 / 2 / 210:  21%|██        | 211/1000 [20:56<1:18:20,  5.96s/it][Succeeded / Failed / Skipped / Total] 89 / 120 / 2 / 211:  21%|██        | 211/1000 [20:56<1:18:20,  5.96s/it][Succeeded / Failed / Skipped / Total] 89 / 120 / 2 / 211:  21%|██        | 212/1000 [21:04<1:18:19,  5.96s/it][Succeeded / Failed / Skipped / Total] 89 / 121 / 2 / 212:  21%|██        | 212/1000 [21:04<1:18:19,  5.96s/it][Succeeded / Failed / Skipped / Total] 89 / 121 / 2 / 212:  21%|██▏       | 213/1000 [21:08<1:18:05,  5.95s/it][Succeeded / Failed / Skipped / Total] 90 / 121 / 2 / 213:  21%|██▏       | 213/1000 [21:08<1:18:05,  5.95s/it][Succeeded / Failed / Skipped / Total] 90 / 121 / 2 / 213:  21%|██▏       | 214/1000 [21:11<1:17:50,  5.94s/it][Succeeded / Failed / Skipped / Total] 90 / 122 / 2 / 214:  21%|██▏       | 214/1000 [21:11<1:17:50,  5.94s/it][Succeeded / Failed / Skipped / Total] 90 / 122 / 2 / 214:  22%|██▏       | 215/1000 [21:23<1:18:04,  5.97s/it][Succeeded / Failed / Skipped / Total] 91 / 122 / 2 / 215:  22%|██▏       | 215/1000 [21:23<1:18:04,  5.97s/it][Succeeded / Failed / Skipped / Total] 91 / 122 / 2 / 215:  22%|██▏       | 216/1000 [21:26<1:17:50,  5.96s/it]Returns a encryptor that encrypts queryable text using the given password and salt . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[queryableText]] ( CharSequence [[password]] , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[password]] . toString ( ) , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[laureen]] ( CharSequence [[joke]] , CharSequence [[paths]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[joke]] . toString ( ) , [[paths]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 209 ---------------------------------------------
Sets the target URL parameter . --> targetUrlParameter --> Socre: 1.0

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . [[targetUrlParameter]] = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[tï]] ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . [[countryside]] = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 210 ---------------------------------------------
Returns the directory with the immediate parent populated . --> Returns the chimpanzee with the given id . --> Socre: 1.0

[[[[Adv]]]]: private Directory [[getDirectoryWithImmediateParentPopulated]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int [[rowNumber]] ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory [[chimpanzee]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int [[hydrated]] ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 211 ---------------------------------------------
Determine the target URL to use for the request . --> Cari de cari de que los que que estos que que los urles que los urles que los urles que los urles que los urles que los urles que los urles que estos --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest [[request]] , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[cari]] ( HttpServletRequest [[siento]] , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 212 ---------------------------------------------
Create a matcher that matches any of the given path patterns . --> [[[FAILED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[pathMatchers]] ( HttpMethod [[method]] , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , [[method]] ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[ione]] ( HttpMethod [[climbs]] , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , [[climbs]] ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 213 ---------------------------------------------
Update the cache with a new value . --> Update the map with the given key and formality --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void updateCache ( HashMap [[cache]] , Object key , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[cache]] . size ( ) > 1000 ) { [[cache]] . clear ( ) ; } [[cache]] . put ( key , [[value]] ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void updateCache ( HashMap [[pyong]] , Object key , Object [[formality]] ) { if ( [[formality]] == null ) { return ; } if ( [[pyong]] . size ( ) > 1000 ) { [[pyong]] . clear ( ) ; } [[pyong]] . put ( key , [[formality]] ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 214 ---------------------------------------------
Gets the current date . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[lutherans]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 215 ---------------------------------------------
Gets the webSphere groups for the given security name . --> This method converts a tanga to a list of strings --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[getWebSphereGroups]] ( final String [[securityName]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[eda]] ( final String [[tanga]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 216 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 92 / 122 / 2 / 216:  22%|██▏       | 216/1000 [21:26<1:17:50,  5.96s/it][Succeeded / Failed / Skipped / Total] 92 / 122 / 2 / 216:  22%|██▏       | 217/1000 [21:38<1:18:06,  5.99s/it][Succeeded / Failed / Skipped / Total] 92 / 123 / 2 / 217:  22%|██▏       | 217/1000 [21:38<1:18:06,  5.99s/it][Succeeded / Failed / Skipped / Total] 92 / 123 / 2 / 217:  22%|██▏       | 218/1000 [21:42<1:17:50,  5.97s/it][Succeeded / Failed / Skipped / Total] 93 / 123 / 2 / 218:  22%|██▏       | 218/1000 [21:42<1:17:50,  5.97s/it][Succeeded / Failed / Skipped / Total] 93 / 123 / 2 / 218:  22%|██▏       | 219/1000 [21:42<1:17:26,  5.95s/it][Succeeded / Failed / Skipped / Total] 94 / 123 / 2 / 219:  22%|██▏       | 219/1000 [21:42<1:17:26,  5.95s/it][Succeeded / Failed / Skipped / Total] 94 / 123 / 2 / 219:  22%|██▏       | 220/1000 [21:45<1:17:09,  5.93s/it][Succeeded / Failed / Skipped / Total] 95 / 123 / 2 / 220:  22%|██▏       | 220/1000 [21:45<1:17:09,  5.93s/it][Succeeded / Failed / Skipped / Total] 95 / 123 / 2 / 220:  22%|██▏       | 221/1000 [21:46<1:16:45,  5.91s/it][Succeeded / Failed / Skipped / Total] 95 / 124 / 2 / 221:  22%|██▏       | 221/1000 [21:46<1:16:45,  5.91s/it][Succeeded / Failed / Skipped / Total] 95 / 124 / 2 / 221:  22%|██▏       | 222/1000 [22:05<1:17:25,  5.97s/it][Succeeded / Failed / Skipped / Total] 95 / 125 / 2 / 222:  22%|██▏       | 222/1000 [22:05<1:17:25,  5.97s/it][Succeeded / Failed / Skipped / Total] 95 / 125 / 2 / 222:  22%|██▏       | 223/1000 [22:28<1:18:18,  6.05s/it][Succeeded / Failed / Skipped / Total] 96 / 125 / 2 / 223:  22%|██▏       | 223/1000 [22:28<1:18:18,  6.05s/it][Succeeded / Failed / Skipped / Total] 96 / 125 / 2 / 223:  22%|██▏       | 224/1000 [22:31<1:18:01,  6.03s/it]Builds the details for the given authentication request . --> Methode permettant de brisket --> Socre: 1.0

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest [[request]] , UsernamePasswordAuthenticationToken [[authRequest]] ) { [[authRequest]] . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[brisket]] ( HttpServletRequest [[estúpido]] , UsernamePasswordAuthenticationToken [[piracy]] ) { [[piracy]] . setDetails ( authenticationDetailsSource . buildDetails ( [[estúpido]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 217 ---------------------------------------------
Builds a distinguished name from the given username . --> [[[FAILED]]]

[[[[Adv]]]]: public DistinguishedName [[buildDn]] ( String [[username]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[username]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName [[vitoria]] ( String [[decode]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[decode]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 218 ---------------------------------------------
Internal method to parse a date . --> to --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String value , DateFormat [ ] [[formats]] ) { Date date = null ; for ( int [[i]] = 0 ; ( date == null ) && ( [[i]] < [[formats]] . length ) ; [[i]] ++ ) { try { date = [[formats]] [ [[i]] ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[što]] ( String value , DateFormat [ ] [[stronghold]] ) { Date date = null ; for ( int [[embellished]] = 0 ; ( date == null ) && ( [[embellished]] < [[stronghold]] . length ) ; [[embellished]] ++ ) { try { date = [[stronghold]] [ [[embellished]] ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 219 ---------------------------------------------
Throws an exception if maximum sessions is exceeded . --> If the maximum number of denominations is exceeded throw an exception --> Socre: 1.0

[[[[Adv]]]]: protected void [[allowableSessionsExceeded]] ( List < SessionInformation > [[sessions]] , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[sessions]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void [[azur]] ( List < SessionInformation > [[denominations]] , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[denominations]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 220 ---------------------------------------------
Returns a list of filters for the given URL . --> Get a list of filters based on a list of burglars --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > getFilters ( String [[url]] ) { return getFilters ( firewall . getFirewalledRequest ( ( new FilterInvocation ( [[url]] , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > getFilters ( String [[burglars]] ) { return getFilters ( firewall . getFirewalledRequest ( ( new FilterInvocation ( [[burglars]] , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 221 ---------------------------------------------
Determines the Websphere security name for the given subject . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject [[subject]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[subject]] ) ; } String [[userSecurityName]] = null ; if ( [[subject]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[explode]] ( final Subject [[ferocity]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[ferocity]] ) ; } String [[protestants]] = null ; if ( [[ferocity]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 222 ---------------------------------------------
Builds a distinguished name for a group . --> [[[FAILED]]]

[[[[Adv]]]]: protected DistinguishedName [[buildGroupDn]] ( String [[group]] ) { DistinguishedName [[dn]] = new DistinguishedName ( groupSearchBase ) ; [[dn]] . add ( groupRoleAttributeName , [[group]] . toLowerCase ( ) ) ; return [[dn]] ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName [[falled]] ( String [[counting]] ) { DistinguishedName [[ripening]] = new DistinguishedName ( groupSearchBase ) ; [[ripening]] . add ( groupRoleAttributeName , [[counting]] . toLowerCase ( ) ) ; return [[ripening]] ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 223 ---------------------------------------------
Create a basic authentication scheme . --> Auerbach auerbach BasicAuth --> Socre: 1.0

[[[[Adv]]]]: public AuthenticationScheme [[basic]] ( String [[userName]] , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( [[userName]] ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme [[auerbach]] ( String [[mccann]] , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( [[mccann]] ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 224 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 96 / 126 / 2 / 224:  22%|██▏       | 224/1000 [22:31<1:18:01,  6.03s/it][Succeeded / Failed / Skipped / Total] 96 / 126 / 2 / 224:  22%|██▎       | 225/1000 [22:32<1:17:39,  6.01s/it][Succeeded / Failed / Skipped / Total] 96 / 127 / 2 / 225:  22%|██▎       | 225/1000 [22:32<1:17:39,  6.01s/it][Succeeded / Failed / Skipped / Total] 96 / 127 / 2 / 225:  23%|██▎       | 226/1000 [22:34<1:17:18,  5.99s/it][Succeeded / Failed / Skipped / Total] 96 / 128 / 2 / 226:  23%|██▎       | 226/1000 [22:34<1:17:18,  5.99s/it][Succeeded / Failed / Skipped / Total] 96 / 128 / 2 / 226:  23%|██▎       | 227/1000 [22:41<1:17:15,  6.00s/it][Succeeded / Failed / Skipped / Total] 96 / 129 / 2 / 227:  23%|██▎       | 227/1000 [22:41<1:17:15,  6.00s/it][Succeeded / Failed / Skipped / Total] 96 / 129 / 2 / 227:  23%|██▎       | 228/1000 [22:51<1:17:22,  6.01s/it][Succeeded / Failed / Skipped / Total] 97 / 129 / 2 / 228:  23%|██▎       | 228/1000 [22:51<1:17:22,  6.01s/it][Succeeded / Failed / Skipped / Total] 97 / 129 / 2 / 228:  23%|██▎       | 229/1000 [22:59<1:17:22,  6.02s/it][Succeeded / Failed / Skipped / Total] 97 / 130 / 2 / 229:  23%|██▎       | 229/1000 [22:59<1:17:22,  6.02s/it][Succeeded / Failed / Skipped / Total] 97 / 130 / 2 / 229:  23%|██▎       | 230/1000 [23:03<1:17:11,  6.01s/it][Succeeded / Failed / Skipped / Total] 98 / 130 / 2 / 230:  23%|██▎       | 230/1000 [23:03<1:17:11,  6.01s/it][Succeeded / Failed / Skipped / Total] 98 / 130 / 2 / 230:  23%|██▎       | 231/1000 [23:18<1:17:35,  6.05s/it][Succeeded / Failed / Skipped / Total] 99 / 130 / 2 / 231:  23%|██▎       | 231/1000 [23:18<1:17:35,  6.05s/it][Succeeded / Failed / Skipped / Total] 99 / 130 / 2 / 231:  23%|██▎       | 232/1000 [23:20<1:17:16,  6.04s/it]Changes current user s password . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[changePassword]] ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void [[methought]] ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 225 ---------------------------------------------
Returns the application context for the given page context . --> [[[FAILED]]]

[[[[Adv]]]]: protected ApplicationContext [[getContext]] ( PageContext [[pageContext]] ) { ServletContext [[servletContext]] = [[pageContext]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[servletContext]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext [[zeno]] ( PageContext [[mock]] ) { ServletContext [[torvalds]] = [[mock]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[torvalds]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 226 ---------------------------------------------
Returns the list of filters that match the given request . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest [[request]] ) { for ( SecurityFilterChain [[chain]] : filterChains ) { if ( [[chain]] . matches ( [[request]] ) ) { return [[chain]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest [[disparaging]] ) { for ( SecurityFilterChain [[piquet]] : filterChains ) { if ( [[piquet]] . matches ( [[disparaging]] ) ) { return [[piquet]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 227 ---------------------------------------------
Sets session attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . [[sessionAttributes]] ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[bridgehead]] ( Map < String , Object > [[correlation]] ) { notNull ( [[correlation]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[correlation]] , this . [[accustomed]] ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 228 ---------------------------------------------
Adds a list of filters to the list of filters . --> Adds all the earners from the given junction --> Socre: 1.0

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > [[filters]] ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[earners]] ( List < Filter > [[junction]] ) { Validate . notNull ( [[earners]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[earners]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 229 ---------------------------------------------
Copies the details of the source authentication to the destination authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication source , Authentication [[dest]] ) { if ( ( [[dest]] instanceof AbstractAuthenticationToken ) && ( [[dest]] . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) [[dest]] ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[baby]] ( Authentication source , Authentication [[cabeza]] ) { if ( ( [[cabeza]] instanceof AbstractAuthenticationToken ) && ( [[cabeza]] . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) [[cabeza]] ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 230 ---------------------------------------------
Creates a basic authentication scheme . --> polonaise the given user name and password --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String userName , String [[password]] ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[password]] ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[polonaise]] ( String userName , String [[compactor]] ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[compactor]] ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 231 ---------------------------------------------
Sets the proxy for the given URI . --> Performs an ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD ALPD --> Socre: 1.0

[[[[Adv]]]]: public static void [[proxy]] ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[proxy]] ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void [[aldo]] ( URI [[bonanza]] ) { if ( [[bonanza]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[aldo]] ( new ProxySpecification ( [[bonanza]] . getHost ( ) , [[bonanza]] . getPort ( ) , [[bonanza]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
[Succeeded / Failed / Skipped / Total] 100 / 130 / 2 / 232:  23%|██▎       | 232/1000 [23:20<1:17:16,  6.04s/it][Succeeded / Failed / Skipped / Total] 100 / 130 / 2 / 232:  23%|██▎       | 233/1000 [23:25<1:17:07,  6.03s/it][Succeeded / Failed / Skipped / Total] 100 / 131 / 2 / 233:  23%|██▎       | 233/1000 [23:25<1:17:07,  6.03s/it][Succeeded / Failed / Skipped / Total] 100 / 131 / 2 / 233:  23%|██▎       | 234/1000 [23:36<1:17:15,  6.05s/it][Succeeded / Failed / Skipped / Total] 101 / 131 / 2 / 234:  23%|██▎       | 234/1000 [23:36<1:17:15,  6.05s/it][Succeeded / Failed / Skipped / Total] 101 / 131 / 2 / 234:  24%|██▎       | 235/1000 [23:39<1:17:00,  6.04s/it][Succeeded / Failed / Skipped / Total] 101 / 132 / 2 / 235:  24%|██▎       | 235/1000 [23:39<1:17:00,  6.04s/it][Succeeded / Failed / Skipped / Total] 101 / 132 / 2 / 235:  24%|██▎       | 236/1000 [23:41<1:16:42,  6.02s/it][Succeeded / Failed / Skipped / Total] 101 / 133 / 2 / 236:  24%|██▎       | 236/1000 [23:41<1:16:42,  6.02s/it][Succeeded / Failed / Skipped / Total] 101 / 133 / 2 / 236:  24%|██▎       | 237/1000 [23:45<1:16:28,  6.01s/it][Succeeded / Failed / Skipped / Total] 102 / 133 / 2 / 237:  24%|██▎       | 237/1000 [23:45<1:16:28,  6.01s/it][Succeeded / Failed / Skipped / Total] 102 / 133 / 2 / 237:  24%|██▍       | 238/1000 [24:06<1:17:10,  6.08s/it]--------------------------------------------- Result 232 ---------------------------------------------
Loops through the login . config . url . --> Weta - weta - weta - weta - weta --> Socre: 1.0

[[[[Adv]]]]: private void [[configureJaasUsingLoop]] ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int [[n]] = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + [[n]] ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } [[n]] ++ ; } if ( ! alreadySet ) { String key = prefix + [[n]] ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void [[weta]] ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int [[britney]] = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + [[britney]] ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } [[britney]] ++ ; } if ( ! alreadySet ) { String key = prefix + [[britney]] ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 233 ---------------------------------------------
Get the full distinguished name from the base context . --> [[[FAILED]]]

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName [[dn]] , Context [[baseCtx]] ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( [[baseCtx]] . getNameInNamespace ( ) ) ; if ( [[dn]] . contains ( baseDn ) ) { return [[dn]] ; } baseDn . append ( [[dn]] ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[chernobyl]] ( DistinguishedName [[tends]] , Context [[corazón]] ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( [[corazón]] . getNameInNamespace ( ) ) ; if ( [[tends]] . contains ( baseDn ) ) { return [[tends]] ; } baseDn . append ( [[tends]] ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 234 ---------------------------------------------
Set default charset for query parameters . --> Returns a new EncoderConfig with aomori encoding . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[aomori]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "[[Diffiicult]]" == "[[Diffiicult]]" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 235 ---------------------------------------------
Adds a filter to the list of filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( Filter [[filter]] , Filter ... [[additionalFilters]] ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( [[additionalFilters]] != null ) { Collections . addAll ( RestAssured . filters , [[additionalFilters]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[policeman]] ( Filter [[nausea]] , Filter ... [[generalized]] ) { Validate . notNull ( [[nausea]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[nausea]] ) ; if ( [[generalized]] != null ) { Collections . addAll ( RestAssured . filters , [[generalized]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 236 ---------------------------------------------
Sets the HTTP redirect configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredConfig [[redirect]] ( RedirectConfig [[redirectConfig]] ) { notNull ( [[redirectConfig]] , "Redirect config" ) ; return new RestAssuredConfig ( [[redirectConfig]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig [[pointing]] ( RedirectConfig [[jeanette]] ) { notNull ( [[jeanette]] , "Redirect config" ) ; return new RestAssuredConfig ( [[jeanette]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 237 ---------------------------------------------
Sets the JAXB object mapper factory . --> Amistad amistad JAXBObjectMapperFactory --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[jaxbObjectMapperFactory]] ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[jaxbObjectMapperFactory]] , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig [[amistad]] ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[amistad]] , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 238 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 102 / 134 / 2 / 238:  24%|██▍       | 238/1000 [24:06<1:17:10,  6.08s/it][Succeeded / Failed / Skipped / Total] 102 / 134 / 2 / 238:  24%|██▍       | 239/1000 [24:07<1:16:50,  6.06s/it][Succeeded / Failed / Skipped / Total] 102 / 135 / 2 / 239:  24%|██▍       | 239/1000 [24:07<1:16:50,  6.06s/it][Succeeded / Failed / Skipped / Total] 102 / 135 / 2 / 239:  24%|██▍       | 240/1000 [24:15<1:16:49,  6.07s/it][Succeeded / Failed / Skipped / Total] 102 / 136 / 2 / 240:  24%|██▍       | 240/1000 [24:15<1:16:49,  6.07s/it][Succeeded / Failed / Skipped / Total] 102 / 136 / 2 / 240:  24%|██▍       | 241/1000 [24:18<1:16:31,  6.05s/it][Succeeded / Failed / Skipped / Total] 102 / 137 / 2 / 241:  24%|██▍       | 241/1000 [24:18<1:16:31,  6.05s/it][Succeeded / Failed / Skipped / Total] 102 / 137 / 2 / 241:  24%|██▍       | 242/1000 [24:18<1:16:09,  6.03s/it][Succeeded / Failed / Skipped / Total] 103 / 137 / 2 / 242:  24%|██▍       | 242/1000 [24:18<1:16:09,  6.03s/it][Succeeded / Failed / Skipped / Total] 103 / 137 / 2 / 242:  24%|██▍       | 243/1000 [24:19<1:15:46,  6.01s/it]Create an NTLM Authentication Scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[ntlm]] ( String [[userName]] , String [[password]] , String workstation , String domain ) { final NTLMAuthScheme scheme = new NTLMAuthScheme ( ) ; scheme . setUserName ( [[userName]] ) ; scheme . setPassword ( [[password]] ) ; scheme . setWorkstation ( workstation ) ; scheme . setDomain ( domain ) ; return scheme ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[mesquite]] ( String [[alyona]] , String [[troop]] , String workstation , String domain ) { final NTLMAuthScheme scheme = new NTLMAuthScheme ( ) ; scheme . setUserName ( [[alyona]] ) ; scheme . setPassword ( [[troop]] ) ; scheme . setWorkstation ( workstation ) ; scheme . setDomain ( domain ) ; return scheme ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 239 ---------------------------------------------
Sets the default object mapper type . --> [[[FAILED]]]

[[[[Adv]]]]: public ObjectMapperConfig [[defaultObjectMapperType]] ( ObjectMapperType [[defaultObjectMapperType]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[defaultObjectMapperType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig [[chana]] ( ObjectMapperType [[kenan]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[chana]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 240 ---------------------------------------------
Sets the log config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig [[logConfig]] ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[exceptional]] ( LogConfig [[disheartened]] ) { notNull ( [[exceptional]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[exceptional]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 241 ---------------------------------------------
Sets the session config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sessionConfig]] ( SessionConfig [[sessionConfig]] ) { notNull ( [[sessionConfig]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[sessionConfig]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[barmaid]] ( SessionConfig [[childcare]] ) { notNull ( [[barmaid]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[barmaid]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 242 ---------------------------------------------
Prints the response body to the given stream depending on the response options . --> Output biddies . --> Socre: 1.0

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions responseOptions , ResponseBody [[responseBody]] , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder [[builder]] = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { [[builder]] . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers [[headers]] = responseOptions . headers ( ) ; if ( [[headers]] . exist ( ) ) { appendNewLineIfAll ( logDetail , [[builder]] ) . append ( toString ( [[headers]] ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , [[builder]] ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , [[responseBody]] ) ; } else { responseBodyToAppend = [[responseBody]] . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { [[builder]] . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } [[builder]] . append ( responseBodyToAppend ) ; } String response = [[builder]] . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[biddies]] ( ResponseOptions responseOptions , ResponseBody [[resources]] , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder [[studio]] = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { [[studio]] . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers [[affairs]] = responseOptions . headers ( ) ; if ( [[affairs]] . exist ( ) ) { appendNewLineIfAll ( logDetail , [[studio]] ) . append ( toString ( [[affairs]] ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , [[studio]] ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , [[resources]] ) ; } else { responseBodyToAppend = [[resources]] . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { [[studio]] . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } [[studio]] . append ( responseBodyToAppend ) ; } String response = [[studio]] . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 243 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 104 / 137 / 2 / 243:  24%|██▍       | 243/1000 [24:19<1:15:46,  6.01s/it][Succeeded / Failed / Skipped / Total] 104 / 137 / 2 / 243:  24%|██▍       | 244/1000 [24:21<1:15:28,  5.99s/it][Succeeded / Failed / Skipped / Total] 105 / 137 / 2 / 244:  24%|██▍       | 244/1000 [24:21<1:15:28,  5.99s/it][Succeeded / Failed / Skipped / Total] 105 / 137 / 2 / 244:  24%|██▍       | 245/1000 [24:23<1:15:10,  5.97s/it][Succeeded / Failed / Skipped / Total] 105 / 138 / 2 / 245:  24%|██▍       | 245/1000 [24:23<1:15:10,  5.97s/it][Succeeded / Failed / Skipped / Total] 105 / 138 / 2 / 245:  25%|██▍       | 246/1000 [24:26<1:14:53,  5.96s/it][Succeeded / Failed / Skipped / Total] 106 / 138 / 2 / 246:  25%|██▍       | 246/1000 [24:26<1:14:53,  5.96s/it][Succeeded / Failed / Skipped / Total] 106 / 138 / 2 / 246:  25%|██▍       | 247/1000 [24:26<1:14:32,  5.94s/it][Succeeded / Failed / Skipped / Total] 107 / 138 / 2 / 247:  25%|██▍       | 247/1000 [24:26<1:14:32,  5.94s/it][Succeeded / Failed / Skipped / Total] 107 / 138 / 2 / 247:  25%|██▍       | 248/1000 [24:27<1:14:08,  5.92s/it][Succeeded / Failed / Skipped / Total] 108 / 138 / 2 / 248:  25%|██▍       | 248/1000 [24:27<1:14:08,  5.92s/it][Succeeded / Failed / Skipped / Total] 108 / 138 / 2 / 248:  25%|██▍       | 249/1000 [24:29<1:13:51,  5.90s/it][Succeeded / Failed / Skipped / Total] 108 / 139 / 2 / 249:  25%|██▍       | 249/1000 [24:29<1:13:51,  5.90s/it][Succeeded / Failed / Skipped / Total] 108 / 139 / 2 / 249:  25%|██▌       | 250/1000 [24:31<1:13:35,  5.89s/it]Creates a new AuthenticationScheme instance with the specified user name and password . --> Create a new AuthenticationScheme that is logically based on your username password portents and treatin --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme [[form]] ( String userName , String [[password]] , FormAuthConfig [[config]] ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( [[password]] == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[scheme]] = new FormAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( [[password]] ) ; [[scheme]] . setConfig ( [[config]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme [[youself]] ( String userName , String [[portents]] , FormAuthConfig [[treatin]] ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( [[portents]] == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[logically]] = new FormAuthScheme ( ) ; [[logically]] . setUserName ( userName ) ; [[logically]] . setPassword ( [[portents]] ) ; [[logically]] . setConfig ( [[treatin]] ) ; return [[logically]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 244 ---------------------------------------------
Sets the async config . --> Creates a new AsyncConfig instance . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig asyncConfig ( AsyncConfig [[asyncConfig]] ) { notNull ( asyncConfig , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig asyncConfig ( AsyncConfig [[specialising]] ) { notNull ( asyncConfig , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 245 ---------------------------------------------
Sets the object mapper config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig [[objectMapperConfig]] ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[fluently]] ( ObjectMapperConfig [[welcome]] ) { notNull ( [[fluently]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[fluently]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 246 ---------------------------------------------
Sets the MockMvcParamConfig . --> Sets address . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[paramConfig]] ( MockMvcParamConfig paramConfig ) { notNull ( [[paramConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[paramConfig]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[address]] ( MockMvcParamConfig paramConfig ) { notNull ( [[address]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[address]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 247 ---------------------------------------------
Sets the multiPart config . --> Configures a MultiPartConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig multiPartConfig ( MultiPartConfig [[multiPartConfig]] ) { notNull ( multiPartConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig multiPartConfig ( MultiPartConfig [[fries]] ) { notNull ( multiPartConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 248 ---------------------------------------------
Sets the mock servlet configuration . --> Creates a new MockMvcConfig instance beneath this one . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[mockMvcConfig]] ( MockMvcConfig mockMvcConfig ) { notNull ( [[mockMvcConfig]] , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , [[mockMvcConfig]] , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[beneath]] ( MockMvcConfig mockMvcConfig ) { notNull ( [[beneath]] , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , [[beneath]] , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 249 ---------------------------------------------
Returns a copy of this config with the given JsonConfig . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig [[jsonConfig]] ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[nicotine]] ( JsonConfig [[clai]] ) { notNull ( [[nicotine]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[nicotine]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 250 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 109 / 139 / 2 / 250:  25%|██▌       | 250/1000 [24:31<1:13:35,  5.89s/it][Succeeded / Failed / Skipped / Total] 109 / 139 / 2 / 250:  25%|██▌       | 251/1000 [24:42<1:13:44,  5.91s/it][Succeeded / Failed / Skipped / Total] 109 / 140 / 2 / 251:  25%|██▌       | 251/1000 [24:42<1:13:44,  5.91s/it][Succeeded / Failed / Skipped / Total] 109 / 140 / 2 / 251:  25%|██▌       | 252/1000 [24:45<1:13:29,  5.89s/it][Succeeded / Failed / Skipped / Total] 109 / 141 / 2 / 252:  25%|██▌       | 252/1000 [24:45<1:13:29,  5.89s/it][Succeeded / Failed / Skipped / Total] 109 / 141 / 2 / 252:  25%|██▌       | 253/1000 [24:46<1:13:08,  5.87s/it][Succeeded / Failed / Skipped / Total] 110 / 141 / 2 / 253:  25%|██▌       | 253/1000 [24:46<1:13:08,  5.87s/it][Succeeded / Failed / Skipped / Total] 110 / 141 / 2 / 253:  25%|██▌       | 254/1000 [24:47<1:12:47,  5.85s/it][Succeeded / Failed / Skipped / Total] 111 / 141 / 2 / 254:  25%|██▌       | 254/1000 [24:47<1:12:47,  5.85s/it][Succeeded / Failed / Skipped / Total] 111 / 141 / 2 / 254:  26%|██▌       | 255/1000 [25:00<1:13:03,  5.88s/it][Succeeded / Failed / Skipped / Total] 111 / 142 / 2 / 255:  26%|██▌       | 255/1000 [25:00<1:13:03,  5.88s/it][Succeeded / Failed / Skipped / Total] 111 / 142 / 2 / 255:  26%|██▌       | 256/1000 [25:13<1:13:17,  5.91s/it][Succeeded / Failed / Skipped / Total] 112 / 142 / 2 / 256:  26%|██▌       | 256/1000 [25:13<1:13:17,  5.91s/it][Succeeded / Failed / Skipped / Total] 112 / 142 / 2 / 256:  26%|██▌       | 257/1000 [25:17<1:13:07,  5.91s/it][Succeeded / Failed / Skipped / Total] 113 / 142 / 2 / 257:  26%|██▌       | 257/1000 [25:17<1:13:07,  5.91s/it][Succeeded / Failed / Skipped / Total] 113 / 142 / 2 / 257:  26%|██▌       | 258/1000 [25:19<1:12:51,  5.89s/it]Sets the header config . --> Sets screenwriting configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[headerConfig]] ( HeaderConfig headerConfig ) { notNull ( [[headerConfig]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[headerConfig]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[screenwriting]] ( HeaderConfig headerConfig ) { notNull ( [[screenwriting]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[screenwriting]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 251 ---------------------------------------------
Sets the encoder config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[encoderConfig]] ( EncoderConfig [[encoderConfig]] ) { notNull ( [[encoderConfig]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[encoderConfig]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[eubanks]] ( EncoderConfig [[hangers]] ) { notNull ( [[eubanks]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[eubanks]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 252 ---------------------------------------------
Sets the xml config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig [[xmlConfig]] ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[mukhtar]] ( XmlConfig [[rigorously]] ) { notNull ( [[mukhtar]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[mukhtar]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 253 ---------------------------------------------
Returns a certificate auth settings that allows all hostnames to be present in the keystore . --> Alejandra certificate auth settings --> Socre: 1.0

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[alejandra]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 254 ---------------------------------------------
Declares namespaces for this configuration . --> Create a new instance of XmlPathConfig --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[minaret]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 255 ---------------------------------------------
Sets the matcher config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[matcherConfig]] ( MatcherConfig [[matcherConfig]] ) { notNull ( [[matcherConfig]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[matcherConfig]] ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[overwith]] ( MatcherConfig [[colossal]] ) { notNull ( [[overwith]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[overwith]] ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 256 ---------------------------------------------
Set credentials for basic authentication . --> Alexei authentiques --> Socre: 1.0

[[[[Adv]]]]: public void [[basic]] ( String [[host]] , int port , String user , String [[pass]] ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[host]] , port ) , new UsernamePasswordCredentials ( user , [[pass]] ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[americanos]] ( String [[brigades]] , int port , String user , String [[alexei]] ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[brigades]] , port ) , new UsernamePasswordCredentials ( user , [[alexei]] ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 257 ---------------------------------------------
Sets the request headers . --> Hemorrhage a map of denominations --> Socre: 1.0

[[[[Adv]]]]: public void [[setHeaders]] ( Map < ? , ? > [[headers]] ) { this . [[defaultRequestHeaders]] . clear ( ) ; if ( [[headers]] == null ) return ; for ( Object key : [[headers]] . keySet ( ) ) { Object val = [[headers]] . get ( key ) ; if ( val == null ) continue ; this . [[defaultRequestHeaders]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void [[hemorrhaging]] ( Map < ? , ? > [[awakening]] ) { this . [[denominations]] . clear ( ) ; if ( [[awakening]] == null ) return ; for ( Object key : [[awakening]] . keySet ( ) ) { Object val = [[awakening]] . get ( key ) ; if ( val == null ) continue ; this . [[denominations]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 258 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 114 / 142 / 2 / 258:  26%|██▌       | 258/1000 [25:19<1:12:51,  5.89s/it][Succeeded / Failed / Skipped / Total] 114 / 142 / 2 / 258:  26%|██▌       | 259/1000 [25:26<1:12:47,  5.89s/it][Succeeded / Failed / Skipped / Total] 115 / 142 / 2 / 259:  26%|██▌       | 259/1000 [25:26<1:12:47,  5.89s/it][Succeeded / Failed / Skipped / Total] 115 / 142 / 2 / 259:  26%|██▌       | 260/1000 [25:36<1:12:51,  5.91s/it][Succeeded / Failed / Skipped / Total] 115 / 143 / 2 / 260:  26%|██▌       | 260/1000 [25:36<1:12:51,  5.91s/it][Succeeded / Failed / Skipped / Total] 115 / 143 / 2 / 260:  26%|██▌       | 261/1000 [25:37<1:12:32,  5.89s/it][Succeeded / Failed / Skipped / Total] 116 / 143 / 2 / 261:  26%|██▌       | 261/1000 [25:37<1:12:32,  5.89s/it][Succeeded / Failed / Skipped / Total] 116 / 143 / 2 / 261:  26%|██▌       | 262/1000 [25:44<1:12:29,  5.89s/it][Succeeded / Failed / Skipped / Total] 117 / 143 / 2 / 262:  26%|██▌       | 262/1000 [25:44<1:12:29,  5.89s/it][Succeeded / Failed / Skipped / Total] 117 / 143 / 2 / 262:  26%|██▋       | 263/1000 [25:45<1:12:10,  5.88s/it][Succeeded / Failed / Skipped / Total] 118 / 143 / 2 / 263:  26%|██▋       | 263/1000 [25:45<1:12:10,  5.88s/it][Succeeded / Failed / Skipped / Total] 118 / 143 / 2 / 263:  26%|██▋       | 264/1000 [25:55<1:12:16,  5.89s/it][Succeeded / Failed / Skipped / Total] 119 / 143 / 2 / 264:  26%|██▋       | 264/1000 [25:55<1:12:16,  5.89s/it][Succeeded / Failed / Skipped / Total] 119 / 143 / 2 / 264:  26%|██▋       | 265/1000 [26:00<1:12:07,  5.89s/it][Succeeded / Failed / Skipped / Total] 120 / 143 / 2 / 265:  26%|██▋       | 265/1000 [26:00<1:12:07,  5.89s/it][Succeeded / Failed / Skipped / Total] 120 / 143 / 2 / 265:  27%|██▋       | 266/1000 [26:08<1:12:07,  5.90s/it]Sets the default proxy . --> zvi estado zvi --> Socre: 1.0

[[[[Adv]]]]: public void [[setProxy]] ( String host , int port , String [[scheme]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , [[scheme]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[zvi]] ( String host , int port , String [[estado]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , [[estado]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 259 ---------------------------------------------
Resets all fields to their default values . --> Clears the internal state of Gadda --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[gadda]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 260 ---------------------------------------------
Adds a header to the multi part spec . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder header ( String [[name]] , String [[value]] ) { Validate . notEmpty ( [[name]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[value]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder header ( String [[resources]] , String [[sumptuous]] ) { Validate . notEmpty ( [[resources]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[sumptuous]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 261 ---------------------------------------------
Sets a response header . --> Sets response headers . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder [[setHeader]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > [[newHeaders]] = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; [[newHeaders]] . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( [[newHeaders]] ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder [[regulators]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > [[fluctuate]] = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; [[fluctuate]] . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( [[fluctuate]] ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 262 ---------------------------------------------
Sets the NTCredentials for the given host and port . --> Methode permettant die NT --> Socre: 1.0

[[[[Adv]]]]: public void ntlm ( String [[host]] , int [[port]] , String user , String pass , String [[workstation]] , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[host]] , [[port]] ) , new NTCredentials ( user , pass , [[workstation]] , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void ntlm ( String [[waite]] , int [[hallen]] , String user , String pass , String [[antti]] , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[waite]] , [[hallen]] ) , new NTCredentials ( user , pass , [[antti]] , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 263 ---------------------------------------------
Builds the Response object . --> Method to kamini . --> Socre: 1.0

[[[[Adv]]]]: public Response [[build]] ( ) { final int [[statusCode]] = restAssuredResponse . statusCode ( ) ; if ( [[statusCode]] < 100 || [[statusCode]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[statusCode]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[kamini]] ( ) { final int [[enamel]] = restAssuredResponse . statusCode ( ) ; if ( [[enamel]] < 100 || [[enamel]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[enamel]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 264 ---------------------------------------------
Matches a cookie s expiry date . --> Veronique les veroniques veroniques --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[veronique]] ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 265 ---------------------------------------------
Performs a HTTP request . --> Chuy a teraz --> Socre: 1.0

[[[[Adv]]]]: public Object [[request]] ( String [[method]] , boolean [[hasBody]] , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , [[method]] , this . [[defaultContentType]] , [[hasBody]] , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object [[chuy]] ( String [[teraz]] , boolean [[cli]] , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , [[teraz]] , this . [[bugatti]] , [[cli]] , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 266 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 121 / 143 / 2 / 266:  27%|██▋       | 266/1000 [26:08<1:12:07,  5.90s/it][Succeeded / Failed / Skipped / Total] 121 / 143 / 2 / 266:  27%|██▋       | 267/1000 [26:11<1:11:55,  5.89s/it][Succeeded / Failed / Skipped / Total] 121 / 144 / 2 / 267:  27%|██▋       | 267/1000 [26:11<1:11:55,  5.89s/it][Succeeded / Failed / Skipped / Total] 121 / 144 / 2 / 267:  27%|██▋       | 268/1000 [26:12<1:11:34,  5.87s/it][Succeeded / Failed / Skipped / Total] 122 / 144 / 2 / 268:  27%|██▋       | 268/1000 [26:12<1:11:34,  5.87s/it][Succeeded / Failed / Skipped / Total] 122 / 144 / 2 / 268:  27%|██▋       | 269/1000 [26:13<1:11:16,  5.85s/it][Succeeded / Failed / Skipped / Total] 122 / 145 / 2 / 269:  27%|██▋       | 269/1000 [26:13<1:11:16,  5.85s/it][Succeeded / Failed / Skipped / Total] 122 / 145 / 2 / 269:  27%|██▋       | 270/1000 [26:15<1:10:59,  5.83s/it][Succeeded / Failed / Skipped / Total] 122 / 146 / 2 / 270:  27%|██▋       | 270/1000 [26:15<1:10:59,  5.83s/it][Succeeded / Failed / Skipped / Total] 122 / 146 / 2 / 270:  27%|██▋       | 271/1000 [26:16<1:10:41,  5.82s/it][Succeeded / Failed / Skipped / Total] 123 / 146 / 2 / 271:  27%|██▋       | 271/1000 [26:16<1:10:41,  5.82s/it][Succeeded / Failed / Skipped / Total] 123 / 146 / 2 / 271:  27%|██▋       | 272/1000 [26:18<1:10:24,  5.80s/it][Succeeded / Failed / Skipped / Total] 123 / 147 / 2 / 272:  27%|██▋       | 272/1000 [26:18<1:10:24,  5.80s/it][Succeeded / Failed / Skipped / Total] 123 / 147 / 2 / 272:  27%|██▋       | 273/1000 [26:24<1:10:20,  5.81s/it][Succeeded / Failed / Skipped / Total] 123 / 148 / 2 / 273:  27%|██▋       | 273/1000 [26:24<1:10:20,  5.81s/it][Succeeded / Failed / Skipped / Total] 123 / 148 / 2 / 273:  27%|██▋       | 274/1000 [26:29<1:10:11,  5.80s/it][Succeeded / Failed / Skipped / Total] 124 / 148 / 2 / 274:  27%|██▋       | 274/1000 [26:29<1:10:11,  5.80s/it][Succeeded / Failed / Skipped / Total] 124 / 148 / 2 / 274:  28%|██▊       | 275/1000 [26:46<1:10:34,  5.84s/it]Matches any secured cookie . --> 的Matcher --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[secured]] ( Matcher < ? super Boolean > securedMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , securedMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[ç]] ( Matcher < ? super Boolean > securedMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , securedMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 267 ---------------------------------------------
Matches the value of the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[ties]] ( Matcher < ? super String > [[dormant]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[dormant]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 268 ---------------------------------------------
Matches specific HTTP only cookies . --> zhenya matchers --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[zhenya]] ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
Matches a cookie s comment . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[comment]] ( Matcher < ? super String > [[commentMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[commentMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[tumultuous]] ( Matcher < ? super String > [[textbooks]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[textbooks]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 270 ---------------------------------------------
Returns a copy of this configuration with the given prefix and namespace URI replaced . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig declaredNamespace ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > [[updatedNamespaces]] = new HashMap < String , String > ( declaredNamespaces ) ; [[updatedNamespaces]] . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[updatedNamespaces]] , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig declaredNamespace ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > [[entry]] = new HashMap < String , String > ( declaredNamespaces ) ; [[entry]] . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[entry]] , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 271 ---------------------------------------------
Matches cookies that match the given path matcher . --> barstow --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[barstow]] ( Matcher < ? super String > [[ś]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[ś]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 272 ---------------------------------------------
Sets the control name . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String [[controlName]] ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . controlName = [[controlName]] ; this . [[isControlNameExplicit]] = "[[True]]" == "[[True]]" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[punisher]] ( String [[dissertation]] ) { Validate . notEmpty ( [[punisher]] , "Control name cannot be empty" ) ; this . controlName = [[punisher]] ; this . [[glorify]] = "[[Hookin]]" == "[[Hookin]]" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 273 ---------------------------------------------
Specifies the domain of the cookies that match the given matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[beguile]] ( Matcher < ? super String > [[emts]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[emts]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Sets the type of number return type . --> Returns a new JsonPathConfig with the hecht return type --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[numberReturnType]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[numberReturnType]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig [[hecht]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[hecht]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 275 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 125 / 148 / 2 / 275:  28%|██▊       | 275/1000 [26:46<1:10:34,  5.84s/it][Succeeded / Failed / Skipped / Total] 125 / 148 / 2 / 275:  28%|██▊       | 276/1000 [26:47<1:10:15,  5.82s/it][Succeeded / Failed / Skipped / Total] 125 / 149 / 2 / 276:  28%|██▊       | 276/1000 [26:47<1:10:15,  5.82s/it][Succeeded / Failed / Skipped / Total] 125 / 149 / 2 / 276:  28%|██▊       | 277/1000 [26:49<1:10:02,  5.81s/it][Succeeded / Failed / Skipped / Total] 126 / 149 / 2 / 277:  28%|██▊       | 277/1000 [26:49<1:10:02,  5.81s/it][Succeeded / Failed / Skipped / Total] 126 / 149 / 2 / 277:  28%|██▊       | 278/1000 [26:50<1:09:43,  5.79s/it][Succeeded / Failed / Skipped / Total] 126 / 150 / 2 / 278:  28%|██▊       | 278/1000 [26:50<1:09:43,  5.79s/it][Succeeded / Failed / Skipped / Total] 126 / 150 / 2 / 278:  28%|██▊       | 279/1000 [26:53<1:09:29,  5.78s/it][Succeeded / Failed / Skipped / Total] 126 / 151 / 2 / 279:  28%|██▊       | 279/1000 [26:53<1:09:29,  5.78s/it][Succeeded / Failed / Skipped / Total] 126 / 151 / 2 / 279:  28%|██▊       | 280/1000 [26:54<1:09:11,  5.77s/it][Succeeded / Failed / Skipped / Total] 127 / 151 / 2 / 280:  28%|██▊       | 280/1000 [26:54<1:09:11,  5.77s/it][Succeeded / Failed / Skipped / Total] 127 / 151 / 2 / 280:  28%|██▊       | 281/1000 [26:56<1:08:56,  5.75s/it][Succeeded / Failed / Skipped / Total] 128 / 151 / 2 / 281:  28%|██▊       | 281/1000 [26:56<1:08:56,  5.75s/it][Succeeded / Failed / Skipped / Total] 128 / 151 / 2 / 281:  28%|██▊       | 282/1000 [26:57<1:08:37,  5.73s/it][Succeeded / Failed / Skipped / Total] 129 / 151 / 2 / 282:  28%|██▊       | 282/1000 [26:57<1:08:37,  5.73s/it][Succeeded / Failed / Skipped / Total] 129 / 151 / 2 / 282:  28%|██▊       | 283/1000 [26:58<1:08:20,  5.72s/it][Succeeded / Failed / Skipped / Total] 130 / 151 / 2 / 283:  28%|██▊       | 283/1000 [26:58<1:08:20,  5.72s/it][Succeeded / Failed / Skipped / Total] 130 / 151 / 2 / 283:  28%|██▊       | 284/1000 [27:00<1:08:04,  5.71s/it][Succeeded / Failed / Skipped / Total] 131 / 151 / 2 / 284:  28%|██▊       | 284/1000 [27:00<1:08:04,  5.71s/it][Succeeded / Failed / Skipped / Total] 131 / 151 / 2 / 284:  28%|██▊       | 285/1000 [27:11<1:08:12,  5.72s/it]Sets the default parser type . --> Returns a new JsonPathConfig instance with a silken JsonParserType --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType [[defaultParserType]] ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[aeronautics]] ( JsonParserType [[silken]] ) { return new JsonPathConfig ( numberReturnType , [[aeronautics]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 276 ---------------------------------------------
Creates a new Headers object with the given header added to it . --> [[[FAILED]]]

[[[[Adv]]]]: public static Headers [[headers]] ( Header [[header]] , Header ... [[additionalHeaders]] ) { notNull ( [[header]] , "Header" ) ; final List < Header > [[headerList]] = new LinkedList < Header > ( ) ; [[headerList]] . add ( [[header]] ) ; if ( [[additionalHeaders]] != null ) { Collections . addAll ( [[headerList]] , [[additionalHeaders]] ) ; } return new Headers ( [[headerList]] ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers [[fastidious]] ( Header [[awakening]] , Header ... [[computations]] ) { notNull ( [[awakening]] , "Header" ) ; final List < Header > [[violators]] = new LinkedList < Header > ( ) ; [[violators]] . add ( [[awakening]] ) ; if ( [[computations]] != null ) { Collections . addAll ( [[violators]] , [[computations]] ) ; } return new Headers ( [[violators]] ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 277 ---------------------------------------------
Expect the given header name to match the given expected value . --> Add quetzalcoatl --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String headerName , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( headerName , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder [[quetzalcoatl]] ( String headerName , Matcher < String > [[ç]] ) { spec . header ( headerName , [[ç]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 278 ---------------------------------------------
Matches a cookie s maximum age . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[fim]] ( Matcher < ? super Integer > [[admired]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[admired]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 279 ---------------------------------------------
Returns a matcher that matches the version of the current request . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[split]] ( Matcher < ? super Integer > [[surpass]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[surpass]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 280 ---------------------------------------------
Set the default stream for logging . --> Adrien adrien log detail if validation fails --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream printStream ) { return new LogConfig ( printStream , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[adrien]] ( PrintStream printStream ) { return new LogConfig ( printStream , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 281 ---------------------------------------------
Adds an attribute to the request spec . --> Adds a dissertation to the spec . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addAttribute ( String attributeName , Object [[attributeValue]] ) { spec . attribute ( attributeName , [[attributeValue]] ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addAttribute ( String attributeName , Object [[dissertation]] ) { spec . attribute ( attributeName , [[dissertation]] ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 282 ---------------------------------------------
Specifies the host of the proxy to connect to . --> ProxySpecification --> Socre: 1.0

[[[[Adv]]]]: public ProxySpecification [[withHost]] ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification [[ś]] ( String [[hightailing]] ) { return new ProxySpecification ( [[hightailing]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 283 ---------------------------------------------
Expect a response header with the given expected value . --> Set iranian pg feets --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , String [[expectedValue]] ) { spec . header ( [[headerName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[iranian]] ( String [[pg]] , String [[feets]] ) { spec . header ( [[pg]] , [[feets]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 284 ---------------------------------------------
Adds additional result handlers to the request . --> Adds one or more ResultHandlers to the request . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler [[resultHandler]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[resultHandler]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler [[heinous]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[heinous]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 285 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 131 / 152 / 2 / 285:  28%|██▊       | 285/1000 [27:11<1:08:12,  5.72s/it][Succeeded / Failed / Skipped / Total] 131 / 152 / 2 / 285:  29%|██▊       | 286/1000 [27:11<1:07:53,  5.71s/it][Succeeded / Failed / Skipped / Total] 132 / 152 / 2 / 286:  29%|██▊       | 286/1000 [27:11<1:07:53,  5.71s/it][Succeeded / Failed / Skipped / Total] 132 / 152 / 2 / 286:  29%|██▊       | 287/1000 [27:22<1:08:00,  5.72s/it][Succeeded / Failed / Skipped / Total] 133 / 152 / 2 / 287:  29%|██▊       | 287/1000 [27:22<1:08:00,  5.72s/it][Succeeded / Failed / Skipped / Total] 133 / 152 / 2 / 287:  29%|██▉       | 288/1000 [27:23<1:07:42,  5.71s/it][Succeeded / Failed / Skipped / Total] 134 / 152 / 2 / 288:  29%|██▉       | 288/1000 [27:23<1:07:42,  5.71s/it][Succeeded / Failed / Skipped / Total] 134 / 152 / 2 / 288:  29%|██▉       | 289/1000 [27:37<1:07:58,  5.74s/it][Succeeded / Failed / Skipped / Total] 135 / 152 / 2 / 289:  29%|██▉       | 289/1000 [27:37<1:07:58,  5.74s/it][Succeeded / Failed / Skipped / Total] 135 / 152 / 2 / 289:  29%|██▉       | 290/1000 [27:40<1:07:45,  5.73s/it][Succeeded / Failed / Skipped / Total] 136 / 152 / 2 / 290:  29%|██▉       | 290/1000 [27:40<1:07:45,  5.73s/it][Succeeded / Failed / Skipped / Total] 136 / 152 / 2 / 290:  29%|██▉       | 291/1000 [27:44<1:07:35,  5.72s/it][Succeeded / Failed / Skipped / Total] 136 / 153 / 2 / 291:  29%|██▉       | 291/1000 [27:44<1:07:35,  5.72s/it][Succeeded / Failed / Skipped / Total] 136 / 153 / 2 / 291:  29%|██▉       | 292/1000 [27:52<1:07:35,  5.73s/it][Succeeded / Failed / Skipped / Total] 136 / 154 / 2 / 292:  29%|██▉       | 292/1000 [27:52<1:07:35,  5.73s/it][Succeeded / Failed / Skipped / Total] 136 / 154 / 2 / 292:  29%|██▉       | 293/1000 [27:56<1:07:24,  5.72s/it][Succeeded / Failed / Skipped / Total] 137 / 154 / 2 / 293:  29%|██▉       | 293/1000 [27:56<1:07:24,  5.72s/it][Succeeded / Failed / Skipped / Total] 137 / 154 / 2 / 293:  29%|██▉       | 294/1000 [27:59<1:07:12,  5.71s/it][Succeeded / Failed / Skipped / Total] 138 / 154 / 2 / 294:  29%|██▉       | 294/1000 [27:59<1:07:12,  5.71s/it][Succeeded / Failed / Skipped / Total] 138 / 154 / 2 / 294:  30%|██▉       | 295/1000 [28:01<1:06:57,  5.70s/it]Specifies a cookie with the given name and value to match the provided expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String [[cookieName]] , String expectedValue ) { spec . cookie ( [[cookieName]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[quetzalcoatl]] ( String [[avnet]] , String expectedValue ) { spec . cookie ( [[avnet]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 286 ---------------------------------------------
Enable logging of request and response if validation fails . --> Returns a new LogConfig object that will arrive at this LogDetail . --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[enableLoggingOfRequestAndResponseIfValidationFails]] ( LogDetail [[logDetail]] ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , [[logDetail]] , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig [[arriving]] ( LogDetail [[admirably]] ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , [[admirably]] , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 287 ---------------------------------------------
Sets the default boundary for this MultiPartConfig . --> Sets the fingernail control name subtype and fingernail charset --> Socre: 1.0

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String [[defaultBoundary]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[fingernail]] ( String [[rimrock]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[fingernail]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 288 ---------------------------------------------
Adds a header to the request . --> Sets ajit and alibis . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String [[headerName]] , String [[headerValue]] ) { spec . header ( [[headerName]] , [[headerValue]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[noria]] ( String [[ajit]] , String [[alibis]] ) { spec . header ( [[ajit]] , [[alibis]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 289 ---------------------------------------------
Sets the HTTP multipart mode . --> Estpido este HttpClientConfig lz --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[lz]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[lz]] , shouldReuseHttpClientInstance , httpClient , "[[Estúpido]]" == "[[Estúpido]]" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 290 ---------------------------------------------
Returns the integer value for the given path . --> dauphine - dauphine - dauphine --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[dauphine]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 291 ---------------------------------------------
Sets the parameter with the given name to the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( httpClientParams ) ; [[newParams]] . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[ashkan]] = new HashMap < String , Object > ( httpClientParams ) ; [[ashkan]] . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , [[ashkan]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 292 ---------------------------------------------
Sets the HTTP client factory . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[httpClientFactory]] ( HttpClientFactory [[httpClientFactory]] ) { return new HttpClientConfig ( [[httpClientFactory]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig [[muncher]] ( HttpClientFactory [[daugther]] ) { return new HttpClientConfig ( [[muncher]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 293 ---------------------------------------------
Get byte from path --> argo ( luau ) --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[argo]] ( String [[luau]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 294 ---------------------------------------------
Returns the short value of the given path . --> laval ( aboutit ) ; --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[laval]] ( String [[aboutit]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 295 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 138 / 155 / 2 / 295:  30%|██▉       | 295/1000 [28:01<1:06:57,  5.70s/it][Succeeded / Failed / Skipped / Total] 138 / 155 / 2 / 295:  30%|██▉       | 296/1000 [28:07<1:06:52,  5.70s/it][Succeeded / Failed / Skipped / Total] 138 / 156 / 2 / 296:  30%|██▉       | 296/1000 [28:07<1:06:52,  5.70s/it][Succeeded / Failed / Skipped / Total] 138 / 156 / 2 / 296:  30%|██▉       | 297/1000 [28:17<1:06:57,  5.71s/it][Succeeded / Failed / Skipped / Total] 139 / 156 / 2 / 297:  30%|██▉       | 297/1000 [28:17<1:06:57,  5.71s/it][Succeeded / Failed / Skipped / Total] 139 / 156 / 2 / 297:  30%|██▉       | 298/1000 [28:29<1:07:08,  5.74s/it][Succeeded / Failed / Skipped / Total] 139 / 157 / 2 / 298:  30%|██▉       | 298/1000 [28:29<1:07:08,  5.74s/it][Succeeded / Failed / Skipped / Total] 139 / 157 / 2 / 298:  30%|██▉       | 299/1000 [28:30<1:06:49,  5.72s/it][Succeeded / Failed / Skipped / Total] 139 / 158 / 2 / 299:  30%|██▉       | 299/1000 [28:30<1:06:49,  5.72s/it][Succeeded / Failed / Skipped / Total] 139 / 158 / 2 / 299:  30%|███       | 300/1000 [28:32<1:06:35,  5.71s/it][Succeeded / Failed / Skipped / Total] 140 / 158 / 2 / 300:  30%|███       | 300/1000 [28:32<1:06:35,  5.71s/it][Succeeded / Failed / Skipped / Total] 140 / 158 / 2 / 300:  30%|███       | 301/1000 [28:33<1:06:18,  5.69s/it][Succeeded / Failed / Skipped / Total] 141 / 158 / 2 / 301:  30%|███       | 301/1000 [28:33<1:06:18,  5.69s/it][Succeeded / Failed / Skipped / Total] 141 / 158 / 2 / 301:  30%|███       | 302/1000 [28:35<1:06:05,  5.68s/it][Succeeded / Failed / Skipped / Total] 141 / 159 / 2 / 302:  30%|███       | 302/1000 [28:35<1:06:05,  5.68s/it][Succeeded / Failed / Skipped / Total] 141 / 159 / 2 / 302:  30%|███       | 303/1000 [28:45<1:06:09,  5.69s/it][Succeeded / Failed / Skipped / Total] 141 / 160 / 2 / 303:  30%|███       | 303/1000 [28:45<1:06:09,  5.69s/it][Succeeded / Failed / Skipped / Total] 141 / 160 / 2 / 303:  30%|███       | 304/1000 [28:55<1:06:13,  5.71s/it][Succeeded / Failed / Skipped / Total] 142 / 160 / 2 / 304:  30%|███       | 304/1000 [28:55<1:06:13,  5.71s/it][Succeeded / Failed / Skipped / Total] 142 / 160 / 2 / 304:  30%|███       | 305/1000 [29:05<1:06:17,  5.72s/it]Performs a GET request and returns the result . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion [[jsonAssertion]] = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) [[jsonAssertion]] . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[sakuma]] > [[sakuma]] get ( String path ) { final JSONAssertion [[hatton]] = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[sakuma]] ) [[hatton]] . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 296 ---------------------------------------------
Add a multi part request with the given content body and mime type . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String [[controlName]] , String contentBody , String mimeType ) { spec . multiPart ( [[controlName]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[semaphore]] ( String [[faxed]] , String contentBody , String mimeType ) { spec . multiPart ( [[faxed]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 297 ---------------------------------------------
Returns the long value for the given path . --> hüseyin ( andrea ) --> Socre: 1.0

[[[[Adv]]]]: public long [[getLong]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[hüseyin]] ( String [[andrea]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 298 ---------------------------------------------
Get a property as a float . --> [[[FAILED]]]

[[[[Adv]]]]: public float [[getFloat]] ( String path ) { final Object [[value]] = get ( path ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[tereza]] ( String path ) { final Object [[balu]] = get ( path ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 299 ---------------------------------------------
Returns a copy of this instance with the given httpClientParams replaced . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[addParams]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig [[fastened]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[Craftsman]]" == "[[Craftsman]]" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 300 ---------------------------------------------
Sets the body of the request . --> Add barracuda body --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[setBody]] ( Object object , ObjectMapper [[mapper]] ) { spec . body ( object , [[mapper]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder [[barracuda]] ( Object object , ObjectMapper [[δ]] ) { spec . body ( object , [[δ]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 301 ---------------------------------------------
Creates an HTTP request from the given parameters . --> HttpRequestBase --> Socre: 1.0

[[[[Adv]]]]: static HttpRequestBase [[createHttpRequest]] ( URI [[uri]] , String httpMethod , boolean hasBody ) { String [[method]] = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > [[type]] = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( [[method]] ) ; final HttpRequestBase [[httpRequest]] ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase [[ß]] ( URI [[preoccupied]] , String httpMethod , boolean hasBody ) { String [[fountainhead]] = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > [[fairbanks]] = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( [[fountainhead]] ) ; final HttpRequestBase [[sweetcakes]] ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 302 ---------------------------------------------
Returns the double value at the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getDouble]] ( String [[path]] ) { final Object value = get ( [[path]] ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[corbeau]] ( String [[seras]] ) { final Object value = get ( [[seras]] ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 303 ---------------------------------------------
Gets the map . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[K]] , V > Map < [[K]] , V > [[getMap]] ( String [[path]] ) { return get ( [[path]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < [[liberté]] , V > Map < [[liberté]] , V > [[δ]] ( String [[brunches]] ) { return get ( [[brunches]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 304 ---------------------------------------------
Adds a parameter to the request spec . --> Methode permettant de parametrique d une parametrique --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String parameterName , Object ... [[parameterValues]] ) { spec . param ( parameterName , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[estúpido]] ( String parameterName , Object ... [[overrated]] ) { spec . param ( parameterName , [[overrated]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 305 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 143 / 160 / 2 / 305:  30%|███       | 305/1000 [29:05<1:06:17,  5.72s/it][Succeeded / Failed / Skipped / Total] 143 / 160 / 2 / 305:  31%|███       | 306/1000 [29:07<1:06:04,  5.71s/it][Succeeded / Failed / Skipped / Total] 143 / 161 / 2 / 306:  31%|███       | 306/1000 [29:07<1:06:04,  5.71s/it][Succeeded / Failed / Skipped / Total] 143 / 161 / 2 / 306:  31%|███       | 307/1000 [29:13<1:05:59,  5.71s/it][Succeeded / Failed / Skipped / Total] 144 / 161 / 2 / 307:  31%|███       | 307/1000 [29:13<1:05:59,  5.71s/it][Succeeded / Failed / Skipped / Total] 144 / 161 / 2 / 307:  31%|███       | 308/1000 [29:28<1:06:12,  5.74s/it][Succeeded / Failed / Skipped / Total] 144 / 162 / 2 / 308:  31%|███       | 308/1000 [29:28<1:06:12,  5.74s/it][Succeeded / Failed / Skipped / Total] 144 / 162 / 2 / 308:  31%|███       | 309/1000 [29:30<1:05:59,  5.73s/it][Succeeded / Failed / Skipped / Total] 144 / 163 / 2 / 309:  31%|███       | 309/1000 [29:30<1:05:59,  5.73s/it][Succeeded / Failed / Skipped / Total] 144 / 163 / 2 / 309:  31%|███       | 310/1000 [29:43<1:06:08,  5.75s/it][Succeeded / Failed / Skipped / Total] 144 / 164 / 2 / 310:  31%|███       | 310/1000 [29:43<1:06:08,  5.75s/it][Succeeded / Failed / Skipped / Total] 144 / 164 / 2 / 310:  31%|███       | 311/1000 [29:45<1:05:54,  5.74s/it][Succeeded / Failed / Skipped / Total] 145 / 164 / 2 / 311:  31%|███       | 311/1000 [29:45<1:05:54,  5.74s/it][Succeeded / Failed / Skipped / Total] 145 / 164 / 2 / 311:  31%|███       | 312/1000 [29:46<1:05:40,  5.73s/it][Succeeded / Failed / Skipped / Total] 146 / 164 / 2 / 312:  31%|███       | 312/1000 [29:46<1:05:40,  5.73s/it][Succeeded / Failed / Skipped / Total] 146 / 164 / 2 / 312:  31%|███▏      | 313/1000 [30:01<1:05:53,  5.75s/it][Succeeded / Failed / Skipped / Total] 146 / 165 / 2 / 313:  31%|███▏      | 313/1000 [30:01<1:05:53,  5.75s/it]Adds a cookie to the request . --> Methode permettant de lafleur lafleur valeur --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String key , Object value , Object ... [[cookieNameValuePairs]] ) { spec . cookie ( key , value , [[cookieNameValuePairs]] ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[lafleur]] ( String key , Object value , Object ... [[estúpido]] ) { spec . cookie ( key , value , [[estúpido]] ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 306 ---------------------------------------------
Gets the object at the given path and converts it to the given object type . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] getObject ( String path , Class < [[T]] > objectType ) { Object object = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < [[kissy]] > [[kissy]] getObject ( String path , Class < [[kissy]] > objectType ) { Object object = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 307 ---------------------------------------------
Index all explicit bindings in this level . --> Index the aerosols in the bindingsMultimap --> Socre: 1.0

[[[[Adv]]]]: void index ( ) { for ( Binding < ? > [[binding]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[binding]] . getKey ( ) . getTypeLiteral ( ) , [[binding]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void index ( ) { for ( Binding < ? > [[aerosols]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[aerosols]] . getKey ( ) . getTypeLiteral ( ) , [[aerosols]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 308 ---------------------------------------------
Adds a parameter to the request spec . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String parameterName , Collection < ? > [[parameterValues]] ) { spec . param ( parameterName , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[equality]] ( String parameterName , Collection < ? > [[blunts]] ) { spec . param ( parameterName , [[blunts]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 309 ---------------------------------------------
Sets the update strategy for form params . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[places]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "[[Budda]]" == "[[Budda]]" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 310 ---------------------------------------------
Creates a filter that logs the response to the given stream if the given matcher matches . --> [[[FAILED]]]

[[[[Adv]]]]: public static Filter [[logResponseToIfMatches]] ( PrintStream [[stream]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[stream]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter [[deanne]] ( PrintStream [[disperse]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[disperse]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 311 ---------------------------------------------
Removes a failed JIT binding . --> amend sharecroppers bindings and constructors --> Socre: 1.0

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > [[binding]] , InjectionPoint ip ) { failedJitBindings . add ( [[binding]] . getKey ( ) ) ; jitBindings . remove ( [[binding]] . getKey ( ) ) ; membersInjectorStore . remove ( [[binding]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[binding]] ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[amend]] ( Binding < ? > [[sharecroppers]] , InjectionPoint ip ) { failedJitBindings . add ( [[sharecroppers]] . getKey ( ) ) ; jitBindings . remove ( [[sharecroppers]] . getKey ( ) ) ; membersInjectorStore . remove ( [[sharecroppers]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[sharecroppers]] ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 312 ---------------------------------------------
Convert a string binding to a constant string binding . --> ricki - ricki - bind --> Socre: 1.0

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > [[key]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[ricki]] ( Key < T > [[destabilizing]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 313 ---------------------------------------------
Returns the internal dependencies of the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > [[binding]] ) { if ( [[binding]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[binding]] ) . getInternalDependencies ( ) ; } else if ( [[binding]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[binding]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[zilch]] ( BindingImpl < ? > [[orientation]] ) { if ( [[orientation]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[orientation]] ) . getInternalDependencies ( ) ; } else if ( [[orientation]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[orientation]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 314 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 146 / 166 / 2 / 314:  31%|███▏      | 314/1000 [30:01<1:05:34,  5.74s/it][Succeeded / Failed / Skipped / Total] 146 / 166 / 2 / 314:  32%|███▏      | 315/1000 [30:08<1:05:31,  5.74s/it][Succeeded / Failed / Skipped / Total] 147 / 166 / 2 / 315:  32%|███▏      | 315/1000 [30:08<1:05:31,  5.74s/it][Succeeded / Failed / Skipped / Total] 148 / 166 / 2 / 316:  32%|███▏      | 316/1000 [30:24<1:05:49,  5.77s/it][Succeeded / Failed / Skipped / Total] 148 / 166 / 2 / 316:  32%|███▏      | 317/1000 [30:27<1:05:37,  5.76s/it][Succeeded / Failed / Skipped / Total] 148 / 167 / 2 / 317:  32%|███▏      | 317/1000 [30:27<1:05:37,  5.76s/it][Succeeded / Failed / Skipped / Total] 148 / 167 / 2 / 317:  32%|███▏      | 318/1000 [30:35<1:05:36,  5.77s/it][Succeeded / Failed / Skipped / Total] 149 / 167 / 2 / 318:  32%|███▏      | 318/1000 [30:35<1:05:36,  5.77s/it][Succeeded / Failed / Skipped / Total] 149 / 167 / 2 / 318:  32%|███▏      | 319/1000 [30:43<1:05:36,  5.78s/it][Succeeded / Failed / Skipped / Total] 149 / 168 / 2 / 319:  32%|███▏      | 319/1000 [30:43<1:05:36,  5.78s/it][Succeeded / Failed / Skipped / Total] 149 / 168 / 2 / 319:  32%|███▏      | 320/1000 [30:43<1:05:18,  5.76s/it][Succeeded / Failed / Skipped / Total] 149 / 169 / 2 / 320:  32%|███▏      | 320/1000 [30:43<1:05:18,  5.76s/it][Succeeded / Failed / Skipped / Total] 149 / 169 / 2 / 320:  32%|███▏      | 321/1000 [31:04<1:05:44,  5.81s/it][Succeeded / Failed / Skipped / Total] 150 / 169 / 2 / 321:  32%|███▏      | 321/1000 [31:04<1:05:44,  5.81s/it][Succeeded / Failed / Skipped / Total] 150 / 169 / 2 / 321:  32%|███▏      | 322/1000 [31:07<1:05:32,  5.80s/it]Clean up for collected state . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[cleanUpForCollectedState]] ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void [[darmstadt]] ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 315 ---------------------------------------------
Creates a new Cookies instance with the specified cookie and additional Cookies . --> Modula salvato modulo marimba --> Socre: 1.0

[[[[Adv]]]]: public static Cookies [[cookies]] ( Cookie [[cookie]] , Cookie ... [[additionalCookies]] ) { AssertParameter . notNull ( [[cookie]] , "Cookie" ) ; final List < Cookie > [[cookieList]] = new LinkedList < Cookie > ( ) ; [[cookieList]] . add ( [[cookie]] ) ; Collections . addAll ( [[cookieList]] , [[additionalCookies]] ) ; return new Cookies ( [[cookieList]] ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies [[modula]] ( Cookie [[salvato]] , Cookie ... [[marimba]] ) { AssertParameter . notNull ( [[salvato]] , "Cookie" ) ; final List < Cookie > [[spectacularly]] = new LinkedList < Cookie > ( ) ; [[spectacularly]] . add ( [[salvato]] ) ; Collections . addAll ( [[spectacularly]] , [[marimba]] ) ; return new Cookies ( [[spectacularly]] ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 316 ---------------------------------------------
Returns true if the method a overrides the method b . --> deviate two methods --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[overrides]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[deviate]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 317 ---------------------------------------------
Creates an uninitialized binding for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 318 ---------------------------------------------
Binds the given injector to the global scope . --> private static final long serialVersionUID = 1 ; --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindInjector]] ( InjectorImpl [[injector]] ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory [[injectorFactory]] = new InjectorFactory ( [[injector]] ) ; [[injector]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( [[injector]] , key , SourceProvider . UNKNOWN_SOURCE , [[injectorFactory]] , Scoping . UNSCOPED , [[injectorFactory]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void [[privately]] ( InjectorImpl [[gyrate]] ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory [[canvases]] = new InjectorFactory ( [[gyrate]] ) ; [[gyrate]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( [[gyrate]] , key , SourceProvider . UNKNOWN_SOURCE , [[canvases]] , Scoping . UNSCOPED , [[canvases]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 319 ---------------------------------------------
Gets the provider type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[kerstin]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 320 ---------------------------------------------
Get a list from the cache . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > [[getList]] ( String [[path]] , Class < T > [[genericType]] ) { if ( [[genericType]] == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > [[original]] = get ( [[path]] ) ; final List < T > [[newList]] = new LinkedList < T > ( ) ; if ( [[original]] != null ) { for ( T t : [[original]] ) { T e ; if ( t instanceof Map && ! [[genericType]] . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > [[clips]] ( String [[pla]] , Class < T > [[error]] ) { if ( [[error]] == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > [[motherfuckers]] = get ( [[pla]] ) ; final List < T > [[constrained]] = new LinkedList < T > ( ) ; if ( [[motherfuckers]] != null ) { for ( T t : [[motherfuckers]] ) { T e ; if ( t instanceof Map && ! [[error]] . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 321 ---------------------------------------------
Prepares the built - in converters . --> Add corpuscles to the beltway --> Socre: 1.0

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl [[injector]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[corpuscles]] ( InjectorImpl [[beltway]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 322 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 150 / 170 / 2 / 322:  32%|███▏      | 322/1000 [31:07<1:05:32,  5.80s/it][Succeeded / Failed / Skipped / Total] 150 / 170 / 2 / 322:  32%|███▏      | 323/1000 [31:08<1:05:16,  5.78s/it][Succeeded / Failed / Skipped / Total] 150 / 171 / 2 / 323:  32%|███▏      | 323/1000 [31:08<1:05:16,  5.78s/it][Succeeded / Failed / Skipped / Total] 150 / 171 / 2 / 323:  32%|███▏      | 324/1000 [31:15<1:05:12,  5.79s/it][Succeeded / Failed / Skipped / Total] 150 / 172 / 2 / 324:  32%|███▏      | 324/1000 [31:15<1:05:12,  5.79s/it][Succeeded / Failed / Skipped / Total] 150 / 172 / 2 / 324:  32%|███▎      | 325/1000 [31:43<1:05:52,  5.86s/it][Succeeded / Failed / Skipped / Total] 150 / 173 / 2 / 325:  32%|███▎      | 325/1000 [31:43<1:05:52,  5.86s/it][Succeeded / Failed / Skipped / Total] 150 / 173 / 2 / 325:  33%|███▎      | 326/1000 [31:45<1:05:40,  5.85s/it][Succeeded / Failed / Skipped / Total] 150 / 174 / 2 / 326:  33%|███▎      | 326/1000 [31:45<1:05:40,  5.85s/it][Succeeded / Failed / Skipped / Total] 150 / 174 / 2 / 326:  33%|███▎      | 327/1000 [31:45<1:05:22,  5.83s/it][Succeeded / Failed / Skipped / Total] 150 / 175 / 2 / 327:  33%|███▎      | 327/1000 [31:45<1:05:22,  5.83s/it][Succeeded / Failed / Skipped / Total] 150 / 175 / 2 / 327:  33%|███▎      | 328/1000 [31:46<1:05:06,  5.81s/it][Succeeded / Failed / Skipped / Total] 150 / 176 / 2 / 328:  33%|███▎      | 328/1000 [31:46<1:05:06,  5.81s/it][Succeeded / Failed / Skipped / Total] 150 / 176 / 2 / 328:  33%|███▎      | 329/1000 [31:55<1:05:06,  5.82s/it][Succeeded / Failed / Skipped / Total] 150 / 177 / 2 / 329:  33%|███▎      | 329/1000 [31:55<1:05:06,  5.82s/it][Succeeded / Failed / Skipped / Total] 150 / 177 / 2 / 329:  33%|███▎      | 330/1000 [32:01<1:05:00,  5.82s/it]Binds a Logger instance to the given injector . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl [[injector]] ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; [[injector]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( [[injector]] , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[mapplethorpe]] ( InjectorImpl [[cheeta]] ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; [[cheeta]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( [[cheeta]] , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 323 ---------------------------------------------
Initializes the delegate injector . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( MembersInjector < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void [[afterglow]] ( MembersInjector < T > [[engagements]] ) { checkState ( this . [[ties]] == null , "delegate already initialized" ) ; this . [[ties]] = checkNotNull ( [[engagements]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 324 ---------------------------------------------
Checks for misplaced binding annotations . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[checkForMisplacedBindingAnnotations]] ( Member member , Errors errors ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( errors , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean [[zilch]] ( Member member , Errors errors ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( errors , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 325 ---------------------------------------------
Checks if all internal dependencies of the given binding have failed . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[cleanup]] ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean [[bindingFailed]] = "[[False]]" != "[[False]]" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > [[depKey]] = dep . getKey ( ) ; InjectionPoint [[ip]] = dep . getInjectionPoint ( ) ; if ( encountered . add ( [[depKey]] ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean [[kerstin]] ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean [[aqueduct]] = "[[Victuals]]" != "[[Victuals]]" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > [[firewater]] = dep . getKey ( ) ; InjectionPoint [[casings]] = dep . getInjectionPoint ( ) ; if ( encountered . add ( [[firewater]] ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 326 ---------------------------------------------
Returns an array of all the given parameter injectors . --> [[[FAILED]]]

[[[[Adv]]]]: static Object [ ] [[getAll]] ( InternalContext [[context]] , SingleParameterInjector < ? > [ ] [[parameterInjectors]] ) throws InternalProvisionException { if ( [[parameterInjectors]] == null ) { return NO_ARGUMENTS ; } int [[size]] = [[parameterInjectors]] . length ; Object [ ] [[parameters]] = new Object [ [[size]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] [[tallyho]] ( InternalContext [[hacks]] , SingleParameterInjector < ? > [ ] [[hideaki]] ) throws InternalProvisionException { if ( [[hideaki]] == null ) { return NO_ARGUMENTS ; } int [[chand]] = [[hideaki]] . length ; Object [ ] [[inexpensive]] = new Object [ [[chand]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 327 ---------------------------------------------
Canonicalizes the given class loader so that it is compatible with the system bridge . --> [[[FAILED]]]

[[[[Adv]]]]: private static ClassLoader [[canonicalize]] ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader [[yunnan]] ( ClassLoader [[chefs]] ) { return [[chefs]] != null ? [[chefs]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 328 ---------------------------------------------
Resolves all types in the given array . --> [[[FAILED]]]

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[resolveAll]] ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] [[result]] = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int [[t]] = 0 ; [[t]] < [[types]] . length ; [[t]] ++ ) { [[result]] [ [[t]] ] = resolve ( [[types]] [ [[t]] ] ) ; } return ImmutableList . copyOf ( [[result]] ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[δ]] ( Type [ ] [[strings]] ) { TypeLiteral < ? > [ ] [[decks]] = new TypeLiteral < ? > [ [[strings]] . length ] ; for ( int [[dvorak]] = 0 ; [[dvorak]] < [[strings]] . length ; [[dvorak]] ++ ) { [[decks]] [ [[dvorak]] ] = resolve ( [[strings]] [ [[dvorak]] ] ) ; } return ImmutableList . copyOf ( [[decks]] ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 329 ---------------------------------------------
Fixes the annotations of the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > [[fixAnnotations]] ( Key < ? > [[key]] ) { return [[key]] . getAnnotation ( ) == null ? [[key]] : Key . get ( [[key]] . getTypeLiteral ( ) , [[key]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > [[lamontagne]] ( Key < ? > [[fecal]] ) { return [[fecal]] . getAnnotation ( ) == null ? [[fecal]] : Key . get ( [[fecal]] . getTypeLiteral ( ) , [[fecal]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
[Succeeded / Failed / Skipped / Total] 150 / 178 / 2 / 330:  33%|███▎      | 330/1000 [32:01<1:05:00,  5.82s/it][Succeeded / Failed / Skipped / Total] 150 / 178 / 2 / 330:  33%|███▎      | 331/1000 [32:19<1:05:20,  5.86s/it][Succeeded / Failed / Skipped / Total] 150 / 179 / 2 / 331:  33%|███▎      | 331/1000 [32:19<1:05:20,  5.86s/it][Succeeded / Failed / Skipped / Total] 150 / 179 / 2 / 331:  33%|███▎      | 332/1000 [32:24<1:05:12,  5.86s/it][Succeeded / Failed / Skipped / Total] 150 / 180 / 2 / 332:  33%|███▎      | 332/1000 [32:24<1:05:12,  5.86s/it][Succeeded / Failed / Skipped / Total] 150 / 180 / 2 / 332:  33%|███▎      | 333/1000 [32:27<1:05:00,  5.85s/it][Succeeded / Failed / Skipped / Total] 151 / 180 / 2 / 333:  33%|███▎      | 333/1000 [32:27<1:05:00,  5.85s/it][Succeeded / Failed / Skipped / Total] 151 / 180 / 2 / 333:  33%|███▎      | 334/1000 [32:30<1:04:49,  5.84s/it][Succeeded / Failed / Skipped / Total] 152 / 180 / 2 / 334:  33%|███▎      | 334/1000 [32:30<1:04:49,  5.84s/it][Succeeded / Failed / Skipped / Total] 152 / 180 / 2 / 334:  34%|███▎      | 335/1000 [32:37<1:04:46,  5.84s/it][Succeeded / Failed / Skipped / Total] 152 / 181 / 2 / 335:  34%|███▎      | 335/1000 [32:37<1:04:46,  5.84s/it][Succeeded / Failed / Skipped / Total] 152 / 181 / 2 / 335:  34%|███▎      | 336/1000 [32:40<1:04:34,  5.83s/it][Succeeded / Failed / Skipped / Total] 152 / 182 / 2 / 336:  34%|███▎      | 336/1000 [32:40<1:04:34,  5.83s/it][Succeeded / Failed / Skipped / Total] 152 / 182 / 2 / 336:  34%|███▎      | 337/1000 [32:42<1:04:21,  5.82s/it]--------------------------------------------- Result 330 ---------------------------------------------
Requests an injection for the given binding from the given source . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[provisionCallback]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[rewriting]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 331 ---------------------------------------------
Checks if the given class loader has the same version of cglib . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader [[classLoader]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[classLoader]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[ramdas]] ( ClassLoader [[bleating]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[bleating]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 332 ---------------------------------------------
Canonicalizes the given type literal so that it can be used as a key . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[canonicalizeForKey]] ( TypeLiteral < T > [[typeLiteral]] ) { Type type = [[typeLiteral]] . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( [[typeLiteral]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[ishak]] ( TypeLiteral < T > [[presenter]] ) { Type type = [[presenter]] . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( [[presenter]] ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( [[presenter]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 333 ---------------------------------------------
Returns the scope instance for the given key . --> Signify the given key using the given injector and scoping --> Socre: 1.0

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[scope]] ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > [[creator]] , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return [[creator]] ; } Scope [[scope]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[signified]] ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > [[engagements]] , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return [[engagements]] ; } Scope [[signified]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 334 ---------------------------------------------
Creates a new instance of this class with the specified arguments . --> titus titus --> Socre: 1.0

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] [[args]] ) throws Throwable { constructor . setAccessible ( "[[True]]" == "[[True]]" ) ; try { return constructor . newInstance ( [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[titus]] ( Object [ ] [[nï]] ) throws Throwable { constructor . setAccessible ( "[[Legs]]" == "[[Legs]]" ) ; try { return constructor . newInstance ( [[nï]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 335 ---------------------------------------------
Validate all pending injections . --> [[[FAILED]]]

[[[[Adv]]]]: void [[validateOustandingInjections]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void [[enzo]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 336 ---------------------------------------------
Generates an annotation for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[cayetano]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 337 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 152 / 183 / 2 / 337:  34%|███▎      | 337/1000 [32:42<1:04:21,  5.82s/it][Succeeded / Failed / Skipped / Total] 152 / 183 / 2 / 337:  34%|███▍      | 338/1000 [32:49<1:04:17,  5.83s/it][Succeeded / Failed / Skipped / Total] 152 / 184 / 2 / 338:  34%|███▍      | 338/1000 [32:49<1:04:17,  5.83s/it][Succeeded / Failed / Skipped / Total] 152 / 184 / 2 / 338:  34%|███▍      | 339/1000 [33:07<1:04:36,  5.86s/it][Succeeded / Failed / Skipped / Total] 153 / 184 / 2 / 339:  34%|███▍      | 339/1000 [33:07<1:04:36,  5.86s/it][Succeeded / Failed / Skipped / Total] 154 / 184 / 2 / 340:  34%|███▍      | 340/1000 [33:07<1:04:18,  5.85s/it][Succeeded / Failed / Skipped / Total] 154 / 184 / 2 / 340:  34%|███▍      | 341/1000 [33:16<1:04:17,  5.85s/it][Succeeded / Failed / Skipped / Total] 154 / 185 / 2 / 341:  34%|███▍      | 341/1000 [33:16<1:04:17,  5.85s/it][Succeeded / Failed / Skipped / Total] 155 / 185 / 2 / 342:  34%|███▍      | 342/1000 [33:25<1:04:18,  5.86s/it][Succeeded / Failed / Skipped / Total] 155 / 185 / 2 / 342:  34%|███▍      | 343/1000 [33:36<1:04:21,  5.88s/it]Adds the servlet request and the servlet pipeline to the request . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[withDispatcher]] ( ServletRequest [[servletRequest]] , final ManagedServletPipeline [[servletPipeline]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[lilacs]] ( ServletRequest [[hearings]] , final ManagedServletPipeline [[cordy]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 338 ---------------------------------------------
Checks if the given member is publicly callable . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[isPubliclyCallable]] ( Member [[member]] ) { if ( ! Modifier . isPublic ( [[member]] . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( [[member]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[member]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[member]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean [[handmaiden]] ( Member [[cylon]] ) { if ( ! Modifier . isPublic ( [[cylon]] . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( [[cylon]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[cylon]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[cylon]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 339 ---------------------------------------------
Creates an injectable instance based on the scope annotation . --> lebaron scoping --> Socre: 1.0

[[[[Adv]]]]: static Scoping [[makeInjectable]] ( Scoping [[scoping]] , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = [[scoping]] . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return [[scoping]] ; } ScopeBinding [[scope]] = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( [[scope]] != null ) { return forInstance ( [[scope]] . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping [[lebaron]] ( Scoping [[infecting]] , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = [[infecting]] . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return [[infecting]] ; } ScopeBinding [[beatboxing]] = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( [[beatboxing]] != null ) { return forInstance ( [[beatboxing]] . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 340 ---------------------------------------------
Add a direct type binding . --> plebeian with direct type provider --> Socre: 1.0

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder [[binder]] ) { [[binder]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[plebeian]] ( Binder [[threaten]] ) { [[threaten]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 341 ---------------------------------------------
Checks if the given annotation is retained at runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > [[annotationType]] ) { Retention retention = [[annotationType]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[infecting]] ( Class < ? extends Annotation > [[shortcuts]] ) { Retention retention = [[shortcuts]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 342 ---------------------------------------------
Normalizes a path by removing the query part of the path . --> Miyata el miyata --> Socre: 1.0

[[[[Adv]]]]: static String [[normalizePath]] ( String path ) { StringBuilder [[sb]] = new StringBuilder ( path . length ( ) ) ; int [[queryStart]] = path . indexOf ( ' ' ) ; String query = null ; if ( [[queryStart]] != - 1 ) { query = path . substring ( [[queryStart]] ) ; path = path . substring ( 0 , [[queryStart]] ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String [[miyata]] ( String path ) { StringBuilder [[embarrass]] = new StringBuilder ( path . length ( ) ) ; int [[nebuchadnezzar]] = path . indexOf ( ' ' ) ; String query = null ; if ( [[nebuchadnezzar]] != - 1 ) { query = path . substring ( [[nebuchadnezzar]] ) ; path = path . substring ( 0 , [[nebuchadnezzar]] ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 343 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 155 / 186 / 2 / 343:  34%|███▍      | 343/1000 [33:36<1:04:21,  5.88s/it][Succeeded / Failed / Skipped / Total] 155 / 186 / 2 / 343:  34%|███▍      | 344/1000 [33:37<1:04:08,  5.87s/it][Succeeded / Failed / Skipped / Total] 155 / 187 / 2 / 344:  34%|███▍      | 344/1000 [33:37<1:04:08,  5.87s/it][Succeeded / Failed / Skipped / Total] 155 / 187 / 2 / 344:  34%|███▍      | 345/1000 [33:42<1:03:59,  5.86s/it][Succeeded / Failed / Skipped / Total] 156 / 187 / 2 / 345:  34%|███▍      | 345/1000 [33:42<1:03:59,  5.86s/it][Succeeded / Failed / Skipped / Total] 156 / 187 / 2 / 345:  35%|███▍      | 346/1000 [33:45<1:03:48,  5.85s/it][Succeeded / Failed / Skipped / Total] 157 / 187 / 2 / 346:  35%|███▍      | 346/1000 [33:45<1:03:48,  5.85s/it][Succeeded / Failed / Skipped / Total] 157 / 187 / 2 / 346:  35%|███▍      | 347/1000 [33:51<1:03:42,  5.85s/it][Succeeded / Failed / Skipped / Total] 157 / 188 / 2 / 347:  35%|███▍      | 347/1000 [33:51<1:03:42,  5.85s/it][Succeeded / Failed / Skipped / Total] 157 / 188 / 2 / 347:  35%|███▍      | 348/1000 [33:53<1:03:30,  5.84s/it][Succeeded / Failed / Skipped / Total] 157 / 189 / 2 / 348:  35%|███▍      | 348/1000 [33:53<1:03:30,  5.84s/it][Succeeded / Failed / Skipped / Total] 157 / 189 / 2 / 348:  35%|███▍      | 349/1000 [33:57<1:03:21,  5.84s/it][Succeeded / Failed / Skipped / Total] 158 / 189 / 2 / 349:  35%|███▍      | 349/1000 [33:57<1:03:21,  5.84s/it][Succeeded / Failed / Skipped / Total] 158 / 189 / 2 / 349:  35%|███▌      | 350/1000 [34:02<1:03:12,  5.84s/it]Returns the name of the key . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[zacarias]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 344 ---------------------------------------------
Initializes the delegate provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[toots]] ( Provider < T > [[blessing]] ) { checkState ( this . [[beeing]] == null , "delegate already initialized" ) ; this . [[beeing]] = checkNotNull ( [[blessing]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 345 ---------------------------------------------
Creates a real map and set binder . --> Lupita lupita multibinder --> Socre: 1.0

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[newRealMapBinder]] ( Binder binder , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > [[valueType]] = valueTypeAndAnnotation . getTypeLiteral ( ) ; return [[newRealMapBinder]] ( binder , keyType , [[valueType]] , valueTypeAndAnnotation . ofType ( mapOf ( keyType , [[valueType]] ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , [[valueType]] ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[lupita]] ( Binder binder , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > [[eveybody]] = valueTypeAndAnnotation . getTypeLiteral ( ) ; return [[lupita]] ( binder , keyType , [[eveybody]] , valueTypeAndAnnotation . ofType ( mapOf ( keyType , [[eveybody]] ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , [[eveybody]] ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 346 ---------------------------------------------
Creates a new instance for the given module . --> Manacingly menacingly menacingly menacingly --> Socre: 1.0

[[[[Adv]]]]: static Module [[forModule]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[menacingly]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 347 ---------------------------------------------
Gets the key for a new value . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[entrySetBinder]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[valueKey]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[entrySetBinder]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[entrySetBinder]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[valueKey]] ) ) ; return [[valueKey]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[levees]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[sanger]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[levees]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[levees]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[sanger]] ) ) ; return [[sanger]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 348 ---------------------------------------------
Returns the injector for the given injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > [[get]] ( InjectionPoint constructorInjector , Errors [[errors]] ) throws ErrorsException { return cache . get ( constructorInjector , [[errors]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > [[wehrmacht]] ( InjectionPoint constructorInjector , Errors [[feds]] ) throws ErrorsException { return cache . get ( constructorInjector , [[feds]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 349 ---------------------------------------------
Checks if interceptor class has scope annotation . --> ersatz is cryptic --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation [[annotation]] : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[annotation]] . annotationType ( ) ) ) { return "[[True]]" == "[[True]]" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[ersatz]] ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation [[il]] : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[il]] . annotationType ( ) ) ) { return "[[Cryptic]]" == "[[Cryptic]]" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 350 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 158 / 190 / 2 / 350:  35%|███▌      | 350/1000 [34:02<1:03:12,  5.84s/it][Succeeded / Failed / Skipped / Total] 158 / 190 / 2 / 350:  35%|███▌      | 351/1000 [34:12<1:03:15,  5.85s/it][Succeeded / Failed / Skipped / Total] 158 / 191 / 2 / 351:  35%|███▌      | 351/1000 [34:12<1:03:15,  5.85s/it][Succeeded / Failed / Skipped / Total] 158 / 191 / 2 / 351:  35%|███▌      | 352/1000 [34:27<1:03:26,  5.87s/it][Succeeded / Failed / Skipped / Total] 158 / 192 / 2 / 352:  35%|███▌      | 352/1000 [34:27<1:03:26,  5.87s/it][Succeeded / Failed / Skipped / Total] 158 / 192 / 2 / 352:  35%|███▌      | 353/1000 [34:30<1:03:15,  5.87s/it][Succeeded / Failed / Skipped / Total] 158 / 193 / 2 / 353:  35%|███▌      | 353/1000 [34:30<1:03:15,  5.87s/it][Succeeded / Failed / Skipped / Total] 158 / 193 / 2 / 353:  35%|███▌      | 354/1000 [34:44<1:03:24,  5.89s/it][Succeeded / Failed / Skipped / Total] 159 / 193 / 2 / 354:  35%|███▌      | 354/1000 [34:44<1:03:24,  5.89s/it][Succeeded / Failed / Skipped / Total] 159 / 193 / 2 / 354:  36%|███▌      | 355/1000 [34:46<1:03:10,  5.88s/it][Succeeded / Failed / Skipped / Total] 160 / 193 / 2 / 355:  36%|███▌      | 355/1000 [34:46<1:03:10,  5.88s/it][Succeeded / Failed / Skipped / Total] 160 / 193 / 2 / 355:  36%|███▌      | 356/1000 [34:59<1:03:17,  5.90s/it][Succeeded / Failed / Skipped / Total] 161 / 193 / 2 / 356:  36%|███▌      | 356/1000 [34:59<1:03:17,  5.90s/it][Succeeded / Failed / Skipped / Total] 161 / 193 / 2 / 356:  36%|███▌      | 357/1000 [35:01<1:03:05,  5.89s/it]Returns a collection of all assisted methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[teleport]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 351 ---------------------------------------------
Find scope annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static Class < ? extends Annotation > [[findScopeAnnotation]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation [[annotation]] : annotations ) { Class < ? extends Annotation > annotationType = [[annotation]] . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > [[wehrmacht]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation [[finest]] : annotations ) { Class < ? extends Annotation > annotationType = [[finest]] . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 352 ---------------------------------------------
Write replace . --> [[[FAILED]]]

[[[[Adv]]]]: private Object [[writeReplace]] ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object [[kenna]] ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 353 ---------------------------------------------
Returns the key associated with the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > [[getKey]] ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int [[numErrorsBefore]] = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , annotations ) ; errors . throwIfNewErrors ( [[numErrorsBefore]] ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > [[deeley]] ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int [[numero]] = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , annotations ) ; errors . throwIfNewErrors ( [[numero]] ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 354 ---------------------------------------------
Invokes the proxy method with the given arguments . --> rails - rails - rails --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object [[invoke]] ( Object proxy , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object [[rails]] ( Object proxy , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 355 ---------------------------------------------
Checks if the type is not specified . --> Leti - leti - leti - leti --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > typeLiteral , ConfigurationException [[ce]] ) { Collection < Message > messages = [[ce]] . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[leti]] ( TypeLiteral < ? > typeLiteral , ConfigurationException [[chitchat]] ) { Collection < Message > messages = [[chitchat]] . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 356 ---------------------------------------------
New real set binder . --> loosen the multibinder with the given key --> Socre: 1.0

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[newRealSetBinder]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[loosen]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 357 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 162 / 193 / 2 / 357:  36%|███▌      | 357/1000 [35:01<1:03:05,  5.89s/it][Succeeded / Failed / Skipped / Total] 162 / 193 / 2 / 357:  36%|███▌      | 358/1000 [35:04<1:02:54,  5.88s/it][Succeeded / Failed / Skipped / Total] 163 / 193 / 2 / 358:  36%|███▌      | 358/1000 [35:04<1:02:54,  5.88s/it][Succeeded / Failed / Skipped / Total] 163 / 193 / 2 / 358:  36%|███▌      | 359/1000 [35:20<1:03:06,  5.91s/it][Succeeded / Failed / Skipped / Total] 163 / 194 / 2 / 359:  36%|███▌      | 359/1000 [35:20<1:03:06,  5.91s/it][Succeeded / Failed / Skipped / Total] 163 / 194 / 2 / 359:  36%|███▌      | 360/1000 [35:24<1:02:57,  5.90s/it][Succeeded / Failed / Skipped / Total] 164 / 194 / 2 / 360:  36%|███▌      | 360/1000 [35:24<1:02:57,  5.90s/it][Succeeded / Failed / Skipped / Total] 164 / 194 / 2 / 360:  36%|███▌      | 361/1000 [35:31<1:02:52,  5.90s/it][Succeeded / Failed / Skipped / Total] 165 / 194 / 2 / 361:  36%|███▌      | 361/1000 [35:31<1:02:52,  5.90s/it][Succeeded / Failed / Skipped / Total] 165 / 194 / 2 / 361:  36%|███▌      | 362/1000 [35:32<1:02:37,  5.89s/it][Succeeded / Failed / Skipped / Total] 166 / 194 / 2 / 362:  36%|███▌      | 362/1000 [35:32<1:02:37,  5.89s/it][Succeeded / Failed / Skipped / Total] 166 / 194 / 2 / 362:  36%|███▋      | 363/1000 [35:37<1:02:30,  5.89s/it][Succeeded / Failed / Skipped / Total] 166 / 195 / 2 / 363:  36%|███▋      | 363/1000 [35:37<1:02:30,  5.89s/it][Succeeded / Failed / Skipped / Total] 166 / 195 / 2 / 363:  36%|███▋      | 364/1000 [35:38<1:02:16,  5.88s/it]Provisions a new instance of the class using the given context . --> boogey the given construction context --> Socre: 1.0

[[[[Adv]]]]: private T [[provision]] ( InternalContext context , ConstructionContext < T > [[constructionContext]] ) throws InternalProvisionException { try { T t ; try { Object [ ] [[parameters]] = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( [[parameters]] ) ; [[constructionContext]] . setProxyDelegates ( t ) ; } finally { [[constructionContext]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T [[boogey]] ( InternalContext context , ConstructionContext < T > [[labors]] ) throws InternalProvisionException { try { T t ; try { Object [ ] [[graded]] = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( [[graded]] ) ; [[labors]] . setProxyDelegates ( t ) ; } finally { [[labors]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 358 ---------------------------------------------
Returns an error message indicating that no implementation for the given key was bound . --> Thrown when an implementation of the given key is not bound . --> Socre: 1.0

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[sb]] = new StringBuilder ( ) ; [[sb]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[moat]] = new StringBuilder ( ) ; [[moat]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 359 ---------------------------------------------
Gets the internal constructor . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[scaramouche]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 360 ---------------------------------------------
Gets the internal dependencies . --> NANKING Injection Points --> Socre: 1.0

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[nanking]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 361 ---------------------------------------------
Returns true if the set of dependencies is invalid for optimized injection . --> surveilled surveilled = null ; --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > [[dependencies]] , Class < ? > [[implementation]] , TypeLiteral < ? > [[factoryType]] ) { Set < Dependency < ? > > [[badDeps]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[belladonna]] ( Set < Dependency < ? > > [[surveilled]] , Class < ? > [[batmobile]] , TypeLiteral < ? > [[niño]] ) { Set < Dependency < ? > > [[cowabunga]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 362 ---------------------------------------------
Returns true if the given constructor has matching parameters . --> grudge the parameters of a constructor --> Socre: 1.0

[[[[Adv]]]]: private boolean [[constructorHasMatchingParams]] ( TypeLiteral < ? > [[type]] , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = [[type]] . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean [[grudge]] ( TypeLiteral < ? > [[antero]] , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = [[antero]] . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 363 ---------------------------------------------
Gets the binding from the new injector . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > [[getBindingFromNewInjector]] ( final Method [[method]] , final Object [ ] [[args]] , final AssistData [[data]] ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = [[data]] . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > [[misrepresented]] ( final Method [[aishwarya]] , final Object [ ] [[celled]] , final AssistData [[première]] ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = [[première]] . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 364 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 166 / 196 / 2 / 364:  36%|███▋      | 364/1000 [35:38<1:02:16,  5.88s/it][Succeeded / Failed / Skipped / Total] 166 / 196 / 2 / 364:  36%|███▋      | 365/1000 [35:39<1:02:02,  5.86s/it][Succeeded / Failed / Skipped / Total] 166 / 197 / 2 / 365:  36%|███▋      | 365/1000 [35:39<1:02:02,  5.86s/it][Succeeded / Failed / Skipped / Total] 166 / 197 / 2 / 365:  37%|███▋      | 366/1000 [35:45<1:01:56,  5.86s/it][Succeeded / Failed / Skipped / Total] 167 / 197 / 2 / 366:  37%|███▋      | 366/1000 [35:45<1:01:56,  5.86s/it][Succeeded / Failed / Skipped / Total] 167 / 197 / 2 / 366:  37%|███▋      | 367/1000 [35:46<1:01:41,  5.85s/it][Succeeded / Failed / Skipped / Total] 168 / 197 / 2 / 367:  37%|███▋      | 367/1000 [35:46<1:01:41,  5.85s/it][Succeeded / Failed / Skipped / Total] 168 / 197 / 2 / 367:  37%|███▋      | 368/1000 [36:00<1:01:51,  5.87s/it][Succeeded / Failed / Skipped / Total] 168 / 198 / 2 / 368:  37%|███▋      | 368/1000 [36:00<1:01:51,  5.87s/it][Succeeded / Failed / Skipped / Total] 168 / 198 / 2 / 368:  37%|███▋      | 369/1000 [36:03<1:01:39,  5.86s/it][Succeeded / Failed / Skipped / Total] 168 / 199 / 2 / 369:  37%|███▋      | 369/1000 [36:03<1:01:39,  5.86s/it][Succeeded / Failed / Skipped / Total] 168 / 199 / 2 / 369:  37%|███▋      | 370/1000 [36:03<1:01:24,  5.85s/it][Succeeded / Failed / Skipped / Total] 168 / 200 / 2 / 370:  37%|███▋      | 370/1000 [36:03<1:01:24,  5.85s/it][Succeeded / Failed / Skipped / Total] 168 / 200 / 2 / 370:  37%|███▋      | 371/1000 [36:21<1:01:38,  5.88s/it][Succeeded / Failed / Skipped / Total] 168 / 201 / 2 / 371:  37%|███▋      | 371/1000 [36:21<1:01:38,  5.88s/it][Succeeded / Failed / Skipped / Total] 168 / 201 / 2 / 371:  37%|███▋      | 372/1000 [36:32<1:01:41,  5.89s/it]Returns true if the constructor is annotated with an at - inject annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor cxtor ) { return cxtor . isAnnotationPresent ( Inject . class ) || cxtor . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[zhukov]] ( Constructor cxtor ) { return cxtor . isAnnotationPresent ( Inject . class ) || cxtor . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 365 ---------------------------------------------
Removes assisted dependencies from a set of dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > [[removeAssistedDeps]] ( Set < Dependency < ? > > [[deps]] ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[dep]] : [[deps]] ) { Class < ? > [[annotationType]] = [[dep]] . getKey ( ) . getAnnotationType ( ) ; if ( [[annotationType]] == null || ! [[annotationType]] . equals ( Assisted . class ) ) { [[builder]] . add ( [[dep]] ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > [[analyse]] ( Set < Dependency < ? > > [[ardmore]] ) { ImmutableSet . Builder < Dependency < ? > > [[infractions]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[defenses]] : [[ardmore]] ) { Class < ? > [[awaited]] = [[defenses]] . getKey ( ) . getAnnotationType ( ) ; if ( [[awaited]] == null || ! [[awaited]] . equals ( Assisted . class ) ) { [[infractions]] . add ( [[defenses]] ) ; } } return [[infractions]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 366 ---------------------------------------------
Finds the next filter that matches the given request . --> Get a coronado based on a list of professors --> Socre: 1.0

[[[[Adv]]]]: private Filter [[findNextFilter]] ( HttpServletRequest [[request]] ) { while ( ++ index < filterDefinitions . length ) { Filter [[filter]] = filterDefinitions [ index ] . getFilterIfMatching ( [[request]] ) ; if ( [[filter]] != null ) { return [[filter]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter [[hôtel]] ( HttpServletRequest [[professors]] ) { while ( ++ index < filterDefinitions . length ) { Filter [[coronado]] = filterDefinitions [ index ] . getFilterIfMatching ( [[professors]] ) ; if ( [[coronado]] != null ) { return [[coronado]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 367 ---------------------------------------------
Scans for methods that are false or true in a module . --> chevalier aufgerufen ModuleAnnotatedMethodScanner aufgerufen --> Socre: 1.0

[[[[Adv]]]]: public static Module [[forModule]] ( Object module , ModuleAnnotatedMethodScanner [[scanner]] ) { return forObject ( module , "False" != "False" , [[scanner]] ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[chevalier]] ( Object module , ModuleAnnotatedMethodScanner [[clingy]] ) { return forObject ( module , "False" != "False" , [[clingy]] ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 368 ---------------------------------------------
Returns the dependencies for the given injection point and implementation . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint [[ctorPoint]] , TypeLiteral < ? > [[implementation]] ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; [[builder]] . addAll ( [[ctorPoint]] . getDependencies ( ) ) ; if ( ! [[implementation]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint [[ip]] : InjectionPoint . forInstanceMethodsAndFields ( [[implementation]] ) ) { [[builder]] . addAll ( [[ip]] . getDependencies ( ) ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[crash]] ( InjectionPoint [[eila]] , TypeLiteral < ? > [[overtaking]] ) { ImmutableSet . Builder < Dependency < ? > > [[readjust]] = ImmutableSet . builder ( ) ; [[readjust]] . addAll ( [[eila]] . getDependencies ( ) ) ; if ( ! [[overtaking]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint [[skydiving]] : InjectionPoint . forInstanceMethodsAndFields ( [[overtaking]] ) ) { [[readjust]] . addAll ( [[skydiving]] . getDependencies ( ) ) ; } } return [[readjust]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 369 ---------------------------------------------
Returns the line number for the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member [[member]] ) { Preconditions . checkArgument ( type == [[member]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[member]] , [[member]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[member]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[já]] ( Member [[voice]] ) { Preconditions . checkArgument ( type == [[voice]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[voice]] , [[voice]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[voice]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 370 ---------------------------------------------
Initializes the injector . --> [[[FAILED]]]

[[[[Adv]]]]: void [[initialize]] ( Errors [[errors]] ) { injector . lookups = injector ; new LookupProcessor ( [[errors]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[caricature]] ( Errors [[stas]] ) { injector . lookups = injector ; new LookupProcessor ( [[stas]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 371 ---------------------------------------------
Transfers the given callable to another callable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > [[callable]] ) { return wrap ( [[callable]] , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[caster]] ( Callable < T > [[consuela]] ) { return wrap ( [[consuela]] , [[caster]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 372 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 169 / 201 / 2 / 372:  37%|███▋      | 372/1000 [36:32<1:01:41,  5.89s/it][Succeeded / Failed / Skipped / Total] 169 / 201 / 2 / 372:  37%|███▋      | 373/1000 [36:34<1:01:28,  5.88s/it][Succeeded / Failed / Skipped / Total] 169 / 202 / 2 / 373:  37%|███▋      | 373/1000 [36:34<1:01:28,  5.88s/it][Succeeded / Failed / Skipped / Total] 169 / 202 / 2 / 373:  37%|███▋      | 374/1000 [36:49<1:01:37,  5.91s/it][Succeeded / Failed / Skipped / Total] 169 / 203 / 2 / 374:  37%|███▋      | 374/1000 [36:49<1:01:37,  5.91s/it][Succeeded / Failed / Skipped / Total] 169 / 203 / 2 / 374:  38%|███▊      | 375/1000 [36:55<1:01:31,  5.91s/it][Succeeded / Failed / Skipped / Total] 169 / 204 / 2 / 375:  38%|███▊      | 375/1000 [36:55<1:01:31,  5.91s/it][Succeeded / Failed / Skipped / Total] 169 / 205 / 2 / 376:  38%|███▊      | 376/1000 [36:55<1:01:16,  5.89s/it][Succeeded / Failed / Skipped / Total] 169 / 205 / 2 / 376:  38%|███▊      | 377/1000 [37:00<1:01:09,  5.89s/it][Succeeded / Failed / Skipped / Total] 169 / 206 / 2 / 377:  38%|███▊      | 377/1000 [37:00<1:01:09,  5.89s/it][Succeeded / Failed / Skipped / Total] 170 / 206 / 2 / 378:  38%|███▊      | 378/1000 [37:12<1:01:12,  5.91s/it][Succeeded / Failed / Skipped / Total] 170 / 206 / 2 / 378:  38%|███▊      | 379/1000 [37:17<1:01:06,  5.90s/it]Returns a new Callable that will continue the execution of the given callable with the given seed map . --> hahaha ha ha ha ha ha ha ha ha ha --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > [[callable]] , Map < Key < ? > , Object > [[seedMap]] ) { return wrap ( [[callable]] , [[continueRequest]] ( [[seedMap]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[hahahaha]] ( Callable < T > [[slows]] , Map < Key < ? > , Object > [[ginette]] ) { return wrap ( [[slows]] , [[hahahaha]] ( [[ginette]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 373 ---------------------------------------------
Validates that the given value is compatible with the given key and canonicalizes it . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > key , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[kathleen]] ( Key < ? > key , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 374 ---------------------------------------------
Gets the binding source . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[allyou]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 375 ---------------------------------------------
Returns the annotation associated with the given method . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation [[getAnnotation]] ( Binder [[binder]] , Method [[method]] ) { if ( [[method]] . isBridge ( ) || [[method]] . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = [[method]] . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { [[binder]] . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , [[method]] ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation [[corrigan]] ( Binder [[azure]] , Method [[amélie]] ) { if ( [[amélie]] . isBridge ( ) || [[amélie]] . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = [[amélie]] . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { [[azure]] . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , [[amélie]] ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 376 ---------------------------------------------
Creates a new key for the given type and annotation strategy . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > [[get]] ( Class < T > [[type]] , AnnotationStrategy annotationStrategy ) { return new Key < T > ( [[type]] , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > [[belsen]] ( Class < T > [[attacks]] , AnnotationStrategy annotationStrategy ) { return new Key < T > ( [[attacks]] , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 377 ---------------------------------------------
Creates an annotation strategy for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Annotation [[annotation]] ) { checkNotNull ( [[annotation]] , "annotation" ) ; Class < ? extends Annotation > annotationType = [[annotation]] . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , [[annotation]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[annotation]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy [[preserved]] ( Annotation [[zodiac]] ) { checkNotNull ( [[zodiac]] , "annotation" ) ; Class < ? extends Annotation > annotationType = [[zodiac]] . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , [[zodiac]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[zodiac]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 378 ---------------------------------------------
Creates a message with the specified cause and message format . --> 的message --> Socre: 1.0

[[[[Adv]]]]: public static Message [[create]] ( Throwable cause , String messageFormat , Object ... arguments ) { return [[create]] ( cause , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[ð]] ( Throwable cause , String messageFormat , Object ... arguments ) { return [[ð]] ( cause , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 379 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 170 / 207 / 2 / 379:  38%|███▊      | 379/1000 [37:17<1:01:06,  5.90s/it][Succeeded / Failed / Skipped / Total] 170 / 207 / 2 / 379:  38%|███▊      | 380/1000 [37:33<1:01:16,  5.93s/it][Succeeded / Failed / Skipped / Total] 171 / 207 / 2 / 380:  38%|███▊      | 380/1000 [37:33<1:01:16,  5.93s/it][Succeeded / Failed / Skipped / Total] 171 / 207 / 2 / 380:  38%|███▊      | 381/1000 [37:46<1:01:22,  5.95s/it][Succeeded / Failed / Skipped / Total] 171 / 208 / 2 / 381:  38%|███▊      | 381/1000 [37:46<1:01:22,  5.95s/it][Succeeded / Failed / Skipped / Total] 171 / 208 / 2 / 381:  38%|███▊      | 382/1000 [37:49<1:01:12,  5.94s/it][Succeeded / Failed / Skipped / Total] 171 / 209 / 2 / 382:  38%|███▊      | 382/1000 [37:49<1:01:12,  5.94s/it][Succeeded / Failed / Skipped / Total] 171 / 209 / 2 / 382:  38%|███▊      | 383/1000 [37:54<1:01:04,  5.94s/it][Succeeded / Failed / Skipped / Total] 171 / 210 / 2 / 383:  38%|███▊      | 383/1000 [37:54<1:01:04,  5.94s/it][Succeeded / Failed / Skipped / Total] 171 / 210 / 2 / 383:  38%|███▊      | 384/1000 [37:59<1:00:56,  5.94s/it][Succeeded / Failed / Skipped / Total] 172 / 210 / 2 / 384:  38%|███▊      | 384/1000 [37:59<1:00:56,  5.94s/it][Succeeded / Failed / Skipped / Total] 172 / 210 / 2 / 384:  38%|███▊      | 385/1000 [38:06<1:00:53,  5.94s/it]Creates an annotation strategy for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return [[strategyFor]] ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[everybody]] ( Class < ? extends Annotation > [[gyroscope]] ) { [[gyroscope]] = Annotations . canonicalizeIfNamed ( [[gyroscope]] ) ; if ( isAllDefaultMethods ( [[gyroscope]] ) ) { return [[everybody]] ( generateAnnotation ( [[gyroscope]] ) ) ; } checkNotNull ( [[gyroscope]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[gyroscope]] ) ; ensureIsBindingAnnotation ( [[gyroscope]] ) ; return new AnnotationTypeStrategy ( [[gyroscope]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 380 ---------------------------------------------
Removes all internal classes from the stack trace . --> Enhancer by Guice --> Socre: 1.0

[[[[Adv]]]]: private void [[pruneStacktrace]] ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] [[stackTrace]] = t . getStackTrace ( ) ; List < StackTraceElement > [[pruned]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[stackTrace]] ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[pruned]] . add ( element ) ; } } t . setStackTrace ( [[pruned]] . toArray ( new StackTraceElement [ [[pruned]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void [[rancheros]] ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] [[duffle]] = t . getStackTrace ( ) ; List < StackTraceElement > [[fig]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[duffle]] ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[fig]] . add ( element ) ; } } t . setStackTrace ( [[fig]] . toArray ( new StackTraceElement [ [[fig]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 381 ---------------------------------------------
Returns all injectors for the given set of injection points . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[injectors]] = Lists . newArrayList ( ) ; for ( InjectionPoint [[injectionPoint]] : injectionPoints ) { try { Errors errorsForMember = [[injectionPoint]] . isOptional ( ) ? new Errors ( [[injectionPoint]] ) : errors . withSource ( [[injectionPoint]] ) ; SingleMemberInjector [[injector]] = [[injectionPoint]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[injector]] , [[injectionPoint]] , errorsForMember ) : new SingleMethodInjector ( this . [[injector]] , [[injectionPoint]] , errorsForMember ) ; [[injectors]] . add ( [[injector]] ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[reinforced]] = Lists . newArrayList ( ) ; for ( InjectionPoint [[congratulate]] : injectionPoints ) { try { Errors errorsForMember = [[congratulate]] . isOptional ( ) ? new Errors ( [[congratulate]] ) : errors . withSource ( [[congratulate]] ) ; SingleMemberInjector [[democracy]] = [[congratulate]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[woman]] , [[congratulate]] , errorsForMember ) : new SingleMethodInjector ( this . [[woman]] , [[congratulate]] , errorsForMember ) ; [[reinforced]] . add ( [[democracy]] ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 382 ---------------------------------------------
Returns true if the given class should be skipped . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String className ) { return ( parent != null && parent . shouldBeSkipped ( className ) ) || classNamesToSkip . contains ( className ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[riccardo]] ( String className ) { return ( parent != null && parent . shouldBeSkipped ( className ) ) || classNamesToSkip . contains ( className ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 383 ---------------------------------------------
Creates a new message with the given message format and arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( String [[messageFormat]] , Object ... [[arguments]] ) { return [[create]] ( null , [[messageFormat]] , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message [[all]] ( String [[stated]] , Object ... [[puffer]] ) { return [[all]] ( null , [[stated]] , [[puffer]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 384 ---------------------------------------------
Convert the given object to its corresponding Java source . --> Returns the francis of the overdog element --> Socre: 1.0

[[[[Adv]]]]: static Object [[convert]] ( Object [[o]] ) { ElementSource [[source]] = null ; if ( [[o]] instanceof ElementSource ) { [[source]] = ( ElementSource ) [[o]] ; [[o]] = [[source]] . getDeclaringSource ( ) ; } return [[convert]] ( [[o]] , [[source]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object [[francis]] ( Object [[overdog]] ) { ElementSource [[beetles]] = null ; if ( [[overdog]] instanceof ElementSource ) { [[beetles]] = ( ElementSource ) [[overdog]] ; [[overdog]] = [[beetles]] . getDeclaringSource ( ) ; } return [[francis]] ( [[overdog]] , [[beetles]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 385 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 172 / 211 / 2 / 385:  38%|███▊      | 385/1000 [38:06<1:00:53,  5.94s/it][Succeeded / Failed / Skipped / Total] 172 / 211 / 2 / 385:  39%|███▊      | 386/1000 [38:11<1:00:45,  5.94s/it][Succeeded / Failed / Skipped / Total] 173 / 211 / 2 / 386:  39%|███▊      | 386/1000 [38:11<1:00:45,  5.94s/it][Succeeded / Failed / Skipped / Total] 173 / 211 / 2 / 386:  39%|███▊      | 387/1000 [38:28<1:00:57,  5.97s/it][Succeeded / Failed / Skipped / Total] 174 / 211 / 2 / 387:  39%|███▊      | 387/1000 [38:28<1:00:57,  5.97s/it][Succeeded / Failed / Skipped / Total] 174 / 211 / 2 / 387:  39%|███▉      | 388/1000 [38:39<1:00:58,  5.98s/it][Succeeded / Failed / Skipped / Total] 175 / 211 / 2 / 388:  39%|███▉      | 388/1000 [38:39<1:00:58,  5.98s/it][Succeeded / Failed / Skipped / Total] 175 / 211 / 2 / 388:  39%|███▉      | 389/1000 [38:41<1:00:46,  5.97s/it][Succeeded / Failed / Skipped / Total] 175 / 212 / 2 / 389:  39%|███▉      | 389/1000 [38:41<1:00:46,  5.97s/it][Succeeded / Failed / Skipped / Total] 175 / 212 / 2 / 389:  39%|███▉      | 390/1000 [38:41<1:00:31,  5.95s/it][Succeeded / Failed / Skipped / Total] 175 / 212 / 3 / 390:  39%|███▉      | 390/1000 [38:41<1:00:31,  5.95s/it][Succeeded / Failed / Skipped / Total] 175 / 212 / 3 / 390:  39%|███▉      | 391/1000 [38:49<1:00:28,  5.96s/it][Succeeded / Failed / Skipped / Total] 175 / 213 / 3 / 391:  39%|███▉      | 391/1000 [38:49<1:00:28,  5.96s/it][Succeeded / Failed / Skipped / Total] 175 / 213 / 3 / 391:  39%|███▉      | 392/1000 [38:50<1:00:14,  5.94s/it]Creates a members injector with listeners for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > createWithListeners ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > createWithListeners ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 386 ---------------------------------------------
Pushes a dependency onto the stack . --> punta anaesthetist --> Socre: 1.0

[[[[Adv]]]]: Dependency < ? > [[pushDependency]] ( Dependency < ? > dependency , Object source ) { Dependency < ? > previous = this . [[dependency]] ; this . [[dependency]] = dependency ; doPushState ( dependency , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > [[punta]] ( Dependency < ? > dependency , Object source ) { Dependency < ? > previous = this . [[anaesthetist]] ; this . [[anaesthetist]] = dependency ; doPushState ( dependency , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 387 ---------------------------------------------
Called when a connection event occurs . --> Process a connection event --> Socre: 1.0

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > [[processorList]] = this . [[processors]] . get ( type ) ; if ( [[processorList]] != null ) { for ( ConnectionEventProcessor processor : [[processorList]] ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > [[repenting]] = this . [[bienvenido]] . get ( type ) ; if ( [[repenting]] != null ) { for ( ConnectionEventProcessor processor : [[repenting]] ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 388 ---------------------------------------------
Get the configuration source from a list of module class names . --> cloak a ballerina from a list of ballerinas --> Socre: 1.0

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > [[moduleClassNames]] ) { Preconditions . checkNotNull ( [[moduleClassNames]] , "The list of module class names cannot be null." ) ; for ( final String [[moduleClassName]] : [[moduleClassNames]] ) { if ( ! shouldBeSkipped ( [[moduleClassName]] ) ) { return new StackTraceElement ( [[moduleClassName]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[cloak]] ( List < String > [[glastonbury]] ) { Preconditions . checkNotNull ( [[glastonbury]] , "The list of module class names cannot be null." ) ; for ( final String [[ballerina]] : [[glastonbury]] ) { if ( ! shouldBeSkipped ( [[ballerina]] ) ) { return new StackTraceElement ( [[ballerina]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 389 ---------------------------------------------
Creates an initializable for the given instance . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Initializable < T > [[of]] ( final T instance ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return instance ; } @ Override public String toString ( ) { return String . valueOf ( instance ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > [[lakshman]] ( final T instance ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return instance ; } @ Override public String toString ( ) { return String . valueOf ( instance ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 390 ---------------------------------------------
Launders an exception if it is unchecked . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void launderThrowable ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 391 ---------------------------------------------
Creates a new message with the specified message format and cause . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable [[cause]] , List < Object > [[sources]] , String [[messageFormat]] , Object ... arguments ) { String message = format ( [[messageFormat]] , arguments ) ; return new Message ( [[sources]] , message , [[cause]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message [[zenith]] ( Throwable [[essays]] , List < Object > [[amélie]] , String [[dilapidated]] , Object ... arguments ) { String message = format ( [[dilapidated]] , arguments ) ; return new Message ( [[amélie]] , message , [[essays]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 392 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 175 / 214 / 3 / 392:  39%|███▉      | 392/1000 [38:50<1:00:14,  5.94s/it][Succeeded / Failed / Skipped / Total] 175 / 214 / 3 / 392:  39%|███▉      | 393/1000 [38:55<1:00:06,  5.94s/it][Succeeded / Failed / Skipped / Total] 175 / 215 / 3 / 393:  39%|███▉      | 393/1000 [38:55<1:00:06,  5.94s/it][Succeeded / Failed / Skipped / Total] 175 / 215 / 3 / 393:  39%|███▉      | 394/1000 [38:58<59:57,  5.94s/it]  [Succeeded / Failed / Skipped / Total] 176 / 215 / 3 / 394:  39%|███▉      | 394/1000 [38:58<59:57,  5.94s/it][Succeeded / Failed / Skipped / Total] 176 / 215 / 3 / 394:  40%|███▉      | 395/1000 [39:03<59:48,  5.93s/it][Succeeded / Failed / Skipped / Total] 177 / 215 / 3 / 395:  40%|███▉      | 395/1000 [39:03<59:48,  5.93s/it][Succeeded / Failed / Skipped / Total] 177 / 215 / 3 / 395:  40%|███▉      | 396/1000 [39:09<59:43,  5.93s/it][Succeeded / Failed / Skipped / Total] 177 / 216 / 3 / 396:  40%|███▉      | 396/1000 [39:09<59:43,  5.93s/it][Succeeded / Failed / Skipped / Total] 177 / 216 / 3 / 396:  40%|███▉      | 397/1000 [39:11<59:31,  5.92s/it][Succeeded / Failed / Skipped / Total] 178 / 216 / 3 / 397:  40%|███▉      | 397/1000 [39:11<59:31,  5.92s/it][Succeeded / Failed / Skipped / Total] 178 / 216 / 3 / 397:  40%|███▉      | 398/1000 [39:12<59:18,  5.91s/it][Succeeded / Failed / Skipped / Total] 179 / 216 / 3 / 398:  40%|███▉      | 398/1000 [39:12<59:18,  5.91s/it][Succeeded / Failed / Skipped / Total] 179 / 216 / 3 / 398:  40%|███▉      | 399/1000 [39:20<59:15,  5.92s/it]Pushes the state for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: void pushState ( com . google . inject . Key < ? > key , Object [[source]] ) { doPushState ( key , [[source]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void pushState ( com . google . inject . Key < ? > key , Object [[arash]] ) { doPushState ( key , [[arash]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 393 ---------------------------------------------
Main method to manage a remote module . --> [[[FAILED]]]

[[[[Adv]]]]: public static void main ( String [ ] [[args]] ) throws Exception { if ( [[args]] . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module [[module]] = ( Module ) Class . forName ( [[args]] [ 0 ] ) . newInstance ( ) ; Injector [[injector]] = Guice . createInjector ( [[module]] ) ; manage ( [[args]] [ 0 ] , [[injector]] ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void main ( String [ ] [[ivories]] ) throws Exception { if ( [[ivories]] . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module [[pipelines]] = ( Module ) Class . forName ( [[ivories]] [ 0 ] ) . newInstance ( ) ; Injector [[flaccid]] = Guice . createInjector ( [[pipelines]] ) ; manage ( [[ivories]] [ 0 ] , [[flaccid]] ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 394 ---------------------------------------------
Tries to get a URL from the cache . --> Returns the shorthanded version of the given URL or null if not found . --> Socre: 1.0

[[[[Adv]]]]: private Url tryGet ( String url ) { SoftReference < Url > [[softRef]] = Url . parsedUrls . get ( url ) ; return ( null == [[softRef]] ) ? null : [[softRef]] . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url tryGet ( String url ) { SoftReference < Url > [[shorthanded]] = Url . parsedUrls . get ( url ) ; return ( null == [[shorthanded]] ) ? null : [[shorthanded]] . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 395 ---------------------------------------------
Decodes the protocol code . --> wolfowitz . --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode [[decodeProtocolCode]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; in . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode [[wolfowitz]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; in . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 396 ---------------------------------------------
Get the result of a future task . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] getFutureTaskResult ( RunStateRecordedFutureTask < [[T]] > task , Logger logger ) { [[T]] [[t]] = null ; if ( null != task ) { try { [[t]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[t]] ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < [[ats]] > [[ats]] getFutureTaskResult ( RunStateRecordedFutureTask < [[ats]] > task , Logger logger ) { [[ats]] [[astronomical]] = null ; if ( null != task ) { try { [[astronomical]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[astronomical]] ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 397 ---------------------------------------------
Register a processor for the given command code . --> demonstrates a new RemotingProcessor --> Socre: 1.0

[[[[Adv]]]]: public void [[registerProcessor]] ( CommandCode cmdCode , RemotingProcessor < ? > [[processor]] ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , [[processor]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , [[processor]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void [[demonstrates]] ( CommandCode cmdCode , RemotingProcessor < ? > [[mongolian]] ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , [[mongolian]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , [[mongolian]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 398 ---------------------------------------------
Scans all available connection pools . --> Scans the administrator pools . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void scan ( ) { if ( null != this . [[connTasks]] && ! this . [[connTasks]] . isEmpty ( ) ) { Iterator < String > iter = this . [[connTasks]] . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . [[connTasks]] . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan

[[[[Adv]]]]: @ Override public void scan ( ) { if ( null != this . [[administrator]] && ! this . [[administrator]] . isEmpty ( ) ) { Iterator < String > iter = this . [[administrator]] . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . [[administrator]] . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 399 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 180 / 216 / 3 / 399:  40%|███▉      | 399/1000 [39:20<59:15,  5.92s/it][Succeeded / Failed / Skipped / Total] 180 / 216 / 3 / 399:  40%|████      | 400/1000 [39:20<59:01,  5.90s/it][Succeeded / Failed / Skipped / Total] 180 / 216 / 4 / 400:  40%|████      | 400/1000 [39:20<59:01,  5.90s/it][Succeeded / Failed / Skipped / Total] 180 / 216 / 4 / 400:  40%|████      | 401/1000 [39:21<58:47,  5.89s/it][Succeeded / Failed / Skipped / Total] 181 / 216 / 4 / 401:  40%|████      | 401/1000 [39:21<58:47,  5.89s/it][Succeeded / Failed / Skipped / Total] 181 / 216 / 4 / 401:  40%|████      | 402/1000 [39:28<58:42,  5.89s/it][Succeeded / Failed / Skipped / Total] 181 / 217 / 4 / 402:  40%|████      | 402/1000 [39:28<58:42,  5.89s/it][Succeeded / Failed / Skipped / Total] 181 / 217 / 4 / 402:  40%|████      | 403/1000 [39:31<58:32,  5.88s/it][Succeeded / Failed / Skipped / Total] 182 / 217 / 4 / 403:  40%|████      | 403/1000 [39:31<58:32,  5.88s/it][Succeeded / Failed / Skipped / Total] 182 / 217 / 4 / 403:  40%|████      | 404/1000 [39:38<58:29,  5.89s/it][Succeeded / Failed / Skipped / Total] 183 / 217 / 4 / 404:  40%|████      | 404/1000 [39:38<58:29,  5.89s/it][Succeeded / Failed / Skipped / Total] 183 / 217 / 4 / 404:  40%|████      | 405/1000 [39:46<58:26,  5.89s/it]Create a connection and healing if needed . --> Method to send Oksana response to Oksana --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[oksana]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 400 ---------------------------------------------
Removes a connection pool from the pool map . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void removeTask ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 401 ---------------------------------------------
Provisions the given provider and adds it to the construction context . --> Provision chambermaids from seal provider and kunai provider --> Socre: 1.0

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > [[provider]] , Dependency < ? > [[dependency]] , ConstructionContext < T > [[constructionContext]] ) throws InternalProvisionException { T [[t]] = [[provider]] . get ( ) ; if ( [[t]] == null && ! [[dependency]] . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , [[dependency]] ) ; } [[constructionContext]] . setProxyDelegates ( [[t]] ) ; return [[t]] ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > [[seal]] , Dependency < ? > [[kunai]] , ConstructionContext < T > [[nitro]] ) throws InternalProvisionException { T [[chambermaids]] = [[seal]] . get ( ) ; if ( [[chambermaids]] == null && ! [[kunai]] . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , [[kunai]] ) ; } [[nitro]] . setProxyDelegates ( [[chambermaids]] ) ; return [[chambermaids]] ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 402 ---------------------------------------------
Registers the default processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerDefaultProcessor]] ( RemotingProcessor < ? > [[processor]] ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = [[processor]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void [[zeljko]] ( RemotingProcessor < ? > [[será]] ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = [[será]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 403 ---------------------------------------------
Closes a connection . --> Closes the connection with the given aimer . --> Socre: 1.0

[[[[Adv]]]]: public void closeConnection ( String [[addr]] ) { Url url = this . addressParser . parse ( [[addr]] ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void closeConnection ( String [[aimer]] ) { Url url = this . addressParser . parse ( [[aimer]] ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 404 ---------------------------------------------
Performs a sync create . --> Performs the actual creation of a connection . --> Socre: 1.0

[[[[Adv]]]]: private void doCreate ( final Url [[url]] , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = [[url]] . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( [[url]] . isConnWarmup ( ) ) { for ( int [[i]] = actualNum ; [[i]] < expectNum ; ++ [[i]] ) { Connection connection = create ( [[url]] ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > [[url]] . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + [[url]] . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void doCreate ( final Url [[conjugate]] , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = [[conjugate]] . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( [[conjugate]] . isConnWarmup ( ) ) { for ( int [[innovation]] = actualNum ; [[innovation]] < expectNum ; ++ [[innovation]] ) { Connection connection = create ( [[conjugate]] ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > [[conjugate]] . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + [[conjugate]] . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 405 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 183 / 218 / 4 / 405:  40%|████      | 405/1000 [39:46<58:26,  5.89s/it][Succeeded / Failed / Skipped / Total] 183 / 218 / 4 / 405:  41%|████      | 406/1000 [39:47<58:12,  5.88s/it][Succeeded / Failed / Skipped / Total] 183 / 219 / 4 / 406:  41%|████      | 406/1000 [39:47<58:12,  5.88s/it][Succeeded / Failed / Skipped / Total] 183 / 219 / 4 / 406:  41%|████      | 407/1000 [39:49<58:01,  5.87s/it][Succeeded / Failed / Skipped / Total] 184 / 219 / 4 / 407:  41%|████      | 407/1000 [39:49<58:01,  5.87s/it][Succeeded / Failed / Skipped / Total] 184 / 219 / 4 / 407:  41%|████      | 408/1000 [39:54<57:54,  5.87s/it][Succeeded / Failed / Skipped / Total] 185 / 219 / 4 / 408:  41%|████      | 408/1000 [39:54<57:54,  5.87s/it][Succeeded / Failed / Skipped / Total] 185 / 219 / 4 / 408:  41%|████      | 409/1000 [39:55<57:41,  5.86s/it]Formats the given collection of Message objects as a human - readable string . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[formatMessages]] ( String heading , Collection < Message > errorMessages ) { Formatter [[fmt]] = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int [[index]] = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = [[index]] ++ ; [[fmt]] . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( [[fmt]] , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; [[fmt]] . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; [[fmt]] . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } [[fmt]] . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { [[fmt]] . format ( "1 error" ) ; } else { [[fmt]] . format ( "%s errors" , errorMessages . size ( ) ) ; } return [[fmt]] . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String [[cheung]] ( String heading , Collection < Message > errorMessages ) { Formatter [[pavements]] = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int [[alrighty]] = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = [[alrighty]] ++ ; [[pavements]] . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( [[pavements]] , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; [[pavements]] . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; [[pavements]] . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } [[pavements]] . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { [[pavements]] . format ( "1 error" ) ; } else { [[pavements]] . format ( "%s errors" , errorMessages . size ( ) ) ; } return [[pavements]] . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 406 ---------------------------------------------
Gets the connection from the given url and creates it if it does not exist . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Connection getAndCreateIfAbsent ( Url [[url]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection getAndCreateIfAbsent ( Url [[tuileries]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 407 ---------------------------------------------
Called when the connection is closed . --> wedding to the headquarters --> Socre: 1.0

[[[[Adv]]]]: public void [[onClose]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture [[future]] = entry . getValue ( ) ; if ( [[future]] != null ) { [[future]] . putResponse ( [[future]] . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; [[future]] . cancelTimeout ( ) ; [[future]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void [[wedding]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture [[headquarters]] = entry . getValue ( ) ; if ( [[headquarters]] != null ) { [[headquarters]] . putResponse ( [[headquarters]] . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; [[headquarters]] . cancelTimeout ( ) ; [[headquarters]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 408 ---------------------------------------------
Adds a connection event processor . --> This method adds a democracy to the regrette list for an agathe --> Socre: 1.0

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType [[type]] , ConnectionEventProcessor [[processor]] ) { List < ConnectionEventProcessor > [[processorList]] = this . [[processors]] . get ( [[type]] ) ; if ( [[processorList]] == null ) { this . [[processors]] . putIfAbsent ( [[type]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[processorList]] = this . [[processors]] . get ( [[type]] ) ; } [[processorList]] . add ( [[processor]] ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[byul]] ( ConnectionEventType [[agathe]] , ConnectionEventProcessor [[democracy]] ) { List < ConnectionEventProcessor > [[concussion]] = this . [[regrette]] . get ( [[agathe]] ) ; if ( [[concussion]] == null ) { this . [[regrette]] . putIfAbsent ( [[agathe]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[concussion]] = this . [[regrette]] . get ( [[agathe]] ) ; } [[concussion]] . add ( [[democracy]] ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 409 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 186 / 219 / 4 / 409:  41%|████      | 409/1000 [39:55<57:41,  5.86s/it][Succeeded / Failed / Skipped / Total] 186 / 219 / 4 / 409:  41%|████      | 410/1000 [40:01<57:36,  5.86s/it][Succeeded / Failed / Skipped / Total] 187 / 219 / 4 / 410:  41%|████      | 410/1000 [40:01<57:36,  5.86s/it][Succeeded / Failed / Skipped / Total] 187 / 219 / 4 / 410:  41%|████      | 411/1000 [40:06<57:29,  5.86s/it][Succeeded / Failed / Skipped / Total] 188 / 219 / 4 / 411:  41%|████      | 411/1000 [40:06<57:29,  5.86s/it][Succeeded / Failed / Skipped / Total] 188 / 219 / 4 / 411:  41%|████      | 412/1000 [40:08<57:17,  5.85s/it][Succeeded / Failed / Skipped / Total] 189 / 219 / 4 / 412:  41%|████      | 412/1000 [40:08<57:17,  5.85s/it][Succeeded / Failed / Skipped / Total] 189 / 219 / 4 / 412:  41%|████▏     | 413/1000 [40:11<57:07,  5.84s/it][Succeeded / Failed / Skipped / Total] 190 / 219 / 4 / 413:  41%|████▏     | 413/1000 [40:11<57:07,  5.84s/it][Succeeded / Failed / Skipped / Total] 190 / 219 / 4 / 413:  41%|████▏     | 414/1000 [40:12<56:54,  5.83s/it]Registers a processor with the rpc server . --> Registers a MultiInterestUserProcessor to the rpc server --> Socre: 1.0

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[processor]] . multiInterest ( ) || [[processor]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[processor]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , [[processor]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > [[punt]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[punt]] . multiInterest ( ) || [[punt]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[punt]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , [[punt]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 410 ---------------------------------------------
Deserialize the RpcRequestCommand and send the response --> Deserializador de RpcRequestCommand --> Socre: 1.0

[[[[Adv]]]]: private boolean deserializeRequestCommand ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "[[False]]" != "[[False]]" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "[[False]]" != "[[False]]" ; } return result ; }
[[[[Nl]]]]: deserialize request command

[[[[Adv]]]]: private boolean deserializeRequestCommand ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "[[Ecuador]]" != "[[Ecuador]]" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "[[Ecuador]]" != "[[Ecuador]]" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 411 ---------------------------------------------
Heals the connection if needed . --> Create antelope from a gillette . --> Socre: 1.0

[[[[Adv]]]]: private void [[healIfNeed]] ( ConnectionPool pool , Url [[url]] ) throws RemotingException , InterruptedException { String [[poolKey]] = [[url]] . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void [[antelope]] ( ConnectionPool pool , Url [[gillette]] ) throws RemotingException , InterruptedException { String [[roadblocks]] = [[gillette]] . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 412 ---------------------------------------------
Get all connections from all connection pools . --> This method is used to provide a tutorial for punxsutawney --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[getAll]] ( ) { Map < String , List < Connection > > [[allConnections]] = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool [[pool]] = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != [[pool]] ) { [[allConnections]] . put ( entry . getKey ( ) , [[pool]] . getAll ( ) ) ; } } return [[allConnections]] ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[tutorial]] ( ) { Map < String , List < Connection > > [[rainy]] = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool [[punxsutawney]] = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != [[punxsutawney]] ) { [[rainy]] . put ( entry . getKey ( ) , [[punxsutawney]] . getAll ( ) ) ; } } return [[rainy]] ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 413 ---------------------------------------------
Sets an attribute if not present . --> Add a value to the attributes map --> Socre: 1.0

[[[[Adv]]]]: public Object [[setAttributeIfAbsent]] ( String key , Object [[value]] ) { return attributes . putIfAbsent ( key , [[value]] ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object [[devdas]] ( String key , Object [[admired]] ) { return attributes . putIfAbsent ( key , [[admired]] ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 414 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 191 / 219 / 4 / 414:  41%|████▏     | 414/1000 [40:12<56:54,  5.83s/it][Succeeded / Failed / Skipped / Total] 191 / 219 / 4 / 414:  42%|████▏     | 415/1000 [40:12<56:41,  5.81s/it][Succeeded / Failed / Skipped / Total] 191 / 220 / 4 / 415:  42%|████▏     | 415/1000 [40:12<56:41,  5.81s/it][Succeeded / Failed / Skipped / Total] 191 / 220 / 4 / 415:  42%|████▏     | 416/1000 [40:34<56:58,  5.85s/it][Succeeded / Failed / Skipped / Total] 192 / 220 / 4 / 416:  42%|████▏     | 416/1000 [40:34<56:58,  5.85s/it][Succeeded / Failed / Skipped / Total] 192 / 220 / 4 / 416:  42%|████▏     | 417/1000 [40:36<56:46,  5.84s/it][Succeeded / Failed / Skipped / Total] 192 / 221 / 4 / 417:  42%|████▏     | 417/1000 [40:36<56:46,  5.84s/it][Succeeded / Failed / Skipped / Total] 192 / 221 / 4 / 417:  42%|████▏     | 418/1000 [40:36<56:32,  5.83s/it][Succeeded / Failed / Skipped / Total] 193 / 221 / 4 / 418:  42%|████▏     | 418/1000 [40:36<56:32,  5.83s/it][Succeeded / Failed / Skipped / Total] 193 / 221 / 4 / 418:  42%|████▏     | 419/1000 [40:39<56:23,  5.82s/it][Succeeded / Failed / Skipped / Total] 194 / 221 / 4 / 419:  42%|████▏     | 419/1000 [40:39<56:23,  5.82s/it][Succeeded / Failed / Skipped / Total] 194 / 221 / 4 / 419:  42%|████▏     | 420/1000 [40:39<56:09,  5.81s/it]Debug log . --> Logs the avocados response . --> Socre: 1.0

[[[[Adv]]]]: private void [[debugLog]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void [[avocados]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 415 ---------------------------------------------
Returns the processor associated with the given command code . --> [[[FAILED]]]

[[[[Adv]]]]: public RemotingProcessor < ? > [[getProcessor]] ( CommandCode [[cmdCode]] ) { RemotingProcessor < ? > [[processor]] = this . cmd2processors . get ( [[cmdCode]] ) ; if ( [[processor]] != null ) { return [[processor]] ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > [[september]] ( CommandCode [[yunnan]] ) { RemotingProcessor < ? > [[arkady]] = this . cmd2processors . get ( [[yunnan]] ) ; if ( [[arkady]] != null ) { return [[arkady]] ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 416 ---------------------------------------------
Pre - processes the remoting context . --> Update the RemotingContext with the given RpcRequestCommand --> Socre: 1.0

[[[[Adv]]]]: private void [[preProcessRemotingContext]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void [[alberta]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 417 ---------------------------------------------
Closes the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[annulled]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[centre]] . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[centre]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 418 ---------------------------------------------
Logs the timeout information . --> fiy the RpcRequestCommand --> Socre: 1.0

[[[[Adv]]]]: private void [[timeoutLog]] ( final RpcRequestCommand cmd , long [[currentTimestamp]] , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , [[currentTimestamp]] , cmd . getArriveTime ( ) , ( [[currentTimestamp]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( [[currentTimestamp]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void [[fiy]] ( final RpcRequestCommand cmd , long [[allegiance]] , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , [[allegiance]] , cmd . getArriveTime ( ) , ( [[allegiance]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( [[allegiance]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 419 ---------------------------------------------
Add a reconnect task . --> Befriends the given URL . --> Socre: 1.0

[[[[Adv]]]]: public void [[addReconnectTask]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void [[befriended]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 420 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 194 / 221 / 5 / 420:  42%|████▏     | 420/1000 [40:39<56:09,  5.81s/it][Succeeded / Failed / Skipped / Total] 194 / 221 / 5 / 420:  42%|████▏     | 421/1000 [40:46<56:05,  5.81s/it][Succeeded / Failed / Skipped / Total] 195 / 221 / 5 / 421:  42%|████▏     | 421/1000 [40:46<56:05,  5.81s/it][Succeeded / Failed / Skipped / Total] 195 / 221 / 5 / 421:  42%|████▏     | 422/1000 [40:52<55:59,  5.81s/it][Succeeded / Failed / Skipped / Total] 196 / 221 / 5 / 422:  42%|████▏     | 422/1000 [40:52<55:59,  5.81s/it][Succeeded / Failed / Skipped / Total] 196 / 221 / 5 / 422:  42%|████▏     | 423/1000 [40:54<55:47,  5.80s/it][Succeeded / Failed / Skipped / Total] 197 / 221 / 5 / 423:  42%|████▏     | 423/1000 [40:54<55:47,  5.80s/it][Succeeded / Failed / Skipped / Total] 197 / 221 / 5 / 423:  42%|████▏     | 424/1000 [40:55<55:35,  5.79s/it]Stops the task manager . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 421 ---------------------------------------------
Sends an invocation to the remote peer . --> Send an unnatural command to the remote server --> Socre: 1.0

[[[[Adv]]]]: protected void oneway ( final Connection [[conn]] , final RemotingCommand [[request]] ) { try { [[conn]] . getChannel ( ) . writeAndFlush ( [[request]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[conn]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void oneway ( final Connection [[colours]] , final RemotingCommand [[unnatural]] ) { try { [[colours]] . getChannel ( ) . writeAndFlush ( [[unnatural]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[colours]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[colours]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[colours]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 422 ---------------------------------------------
Dispatch the request to the user processor . --> armoire the employees . --> Socre: 1.0

[[[[Adv]]]]: private void [[dispatchToUserProcessor]] ( RemotingContext [[ctx]] , RpcRequestCommand [[cmd]] ) { final int id = [[cmd]] . getId ( ) ; final byte type = [[cmd]] . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void [[armoire]] ( RemotingContext [[employees]] , RpcRequestCommand [[denies]] ) { final int id = [[denies]] . getId ( ) ; final byte type = [[denies]] . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 423 ---------------------------------------------
Convert an integer to a bit set . --> Returns a BitSet containing the most prevalent bits of the given value . --> Socre: 1.0

[[[[Adv]]]]: public static BitSet [[toBitSet]] ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet [[bs]] = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { [[bs]] . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return [[bs]] ; }
[[[[Nl]]]]: from byte to bit set

[[[[Adv]]]]: public static BitSet [[acc]] ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet [[prevalent]] = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { [[prevalent]] . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return [[prevalent]] ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 424 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 198 / 221 / 5 / 424:  42%|████▏     | 424/1000 [40:55<55:35,  5.79s/it][Succeeded / Failed / Skipped / Total] 198 / 221 / 5 / 424:  42%|████▎     | 425/1000 [40:58<55:26,  5.78s/it][Succeeded / Failed / Skipped / Total] 199 / 221 / 5 / 425:  42%|████▎     | 425/1000 [40:58<55:26,  5.78s/it][Succeeded / Failed / Skipped / Total] 199 / 221 / 5 / 425:  43%|████▎     | 426/1000 [40:58<55:12,  5.77s/it][Succeeded / Failed / Skipped / Total] 199 / 221 / 6 / 426:  43%|████▎     | 426/1000 [40:58<55:12,  5.77s/it][Succeeded / Failed / Skipped / Total] 199 / 221 / 6 / 426:  43%|████▎     | 427/1000 [41:04<55:06,  5.77s/it][Succeeded / Failed / Skipped / Total] 200 / 221 / 6 / 427:  43%|████▎     | 427/1000 [41:04<55:06,  5.77s/it][Succeeded / Failed / Skipped / Total] 200 / 221 / 6 / 427:  43%|████▎     | 428/1000 [41:05<54:54,  5.76s/it]Monitor connection pools . --> Monitors the connection pools . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > [[connections]] = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( [[connections]] ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > [[assyrians]] = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( [[assyrians]] ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 425 ---------------------------------------------
Get a system property as a boolean . --> Gets a boolean . --> Socre: 1.0

[[[[Adv]]]]: public static boolean getBool ( String key , String [[defaultValue]] ) { return Boolean . parseBoolean ( System . getProperty ( key , [[defaultValue]] ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property

[[[[Adv]]]]: public static boolean getBool ( String key , String [[gerais]] ) { return Boolean . parseBoolean ( System . getProperty ( key , [[gerais]] ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 426 ---------------------------------------------
Logs information to the logger . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void infoLog ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 427 ---------------------------------------------
Returns true if the request timed out . --> Returns true if the paste operation has timed out . --> Socre: 1.0

[[[[Adv]]]]: public boolean isRequestTimeout ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . [[arriveTimestamp]] ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean isRequestTimeout ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . [[paste]] ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 428 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 201 / 221 / 6 / 428:  43%|████▎     | 428/1000 [41:05<54:54,  5.76s/it][Succeeded / Failed / Skipped / Total] 201 / 221 / 6 / 428:  43%|████▎     | 429/1000 [41:08<54:45,  5.75s/it][Succeeded / Failed / Skipped / Total] 202 / 221 / 6 / 429:  43%|████▎     | 429/1000 [41:08<54:45,  5.75s/it][Succeeded / Failed / Skipped / Total] 202 / 221 / 6 / 429:  43%|████▎     | 430/1000 [41:09<54:33,  5.74s/it][Succeeded / Failed / Skipped / Total] 203 / 221 / 6 / 430:  43%|████▎     | 430/1000 [41:09<54:33,  5.74s/it][Succeeded / Failed / Skipped / Total] 203 / 221 / 6 / 430:  43%|████▎     | 431/1000 [41:10<54:21,  5.73s/it][Succeeded / Failed / Skipped / Total] 204 / 221 / 6 / 431:  43%|████▎     | 431/1000 [41:10<54:21,  5.73s/it][Succeeded / Failed / Skipped / Total] 204 / 221 / 6 / 431:  43%|████▎     | 432/1000 [41:12<54:10,  5.72s/it]Filter a list of connections by their service status . --> Filters a list of councillors by their service status . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > [[connections]] ) { List < Connection > [[serviceOnConnections]] = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : [[connections]] ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { [[serviceOnConnections]] . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , [[serviceOnConnections]] ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > [[councillors]] ) { List < Connection > [[ineptitude]] = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : [[councillors]] ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { [[ineptitude]] . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , [[ineptitude]] ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 429 ---------------------------------------------
Gets a random connection from a list of connections . --> Gets a random axis from a list of connections . --> Socre: 1.0

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection [[result]] = null ; while ( ( [[result]] == null || ! [[result]] . isFine ( ) ) && tries ++ < MAX_TIMES ) { [[result]] = conns . get ( this . random . nextInt ( size ) ) ; } if ( [[result]] != null && ! [[result]] . isFine ( ) ) { [[result]] = null ; } return [[result]] ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection [[axis]] = null ; while ( ( [[axis]] == null || ! [[axis]] . isFine ( ) ) && tries ++ < MAX_TIMES ) { [[axis]] = conns . get ( this . random . nextInt ( size ) ) ; } if ( [[axis]] != null && ! [[axis]] . isFine ( ) ) { [[axis]] = null ; } return [[axis]] ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 430 ---------------------------------------------
Process a message using the configured executor . --> corrodes a message to a ExecutorService --> Socre: 1.0

[[[[Adv]]]]: @ Override public void process ( RemotingContext [[ctx]] , T msg , ExecutorService [[defaultExecutor]] ) throws Exception { ProcessTask [[task]] = new ProcessTask ( [[ctx]] , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[task]] ) ; } else { [[defaultExecutor]] . execute ( [[task]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void process ( RemotingContext [[allegiance]] , T msg , ExecutorService [[schoolbag]] ) throws Exception { ProcessTask [[corrodes]] = new ProcessTask ( [[allegiance]] , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[corrodes]] ) ; } else { [[schoolbag]] . execute ( [[corrodes]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 431 ---------------------------------------------
Returns a user processor by class name . --> Returns a UserProcessor by pelayo --> Socre: 1.0

[[[[Adv]]]]: public UserProcessor < ? > getUserProcessor ( String [[className]] ) { return StringUtils . isBlank ( [[className]] ) ? null : this . userProcessors . get ( [[className]] ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > getUserProcessor ( String [[pelayo]] ) { return StringUtils . isBlank ( [[pelayo]] ) ? null : this . userProcessors . get ( [[pelayo]] ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 432 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 205 / 221 / 6 / 432:  43%|████▎     | 432/1000 [41:12<54:10,  5.72s/it][Succeeded / Failed / Skipped / Total] 205 / 221 / 6 / 432:  43%|████▎     | 433/1000 [41:13<53:58,  5.71s/it][Succeeded / Failed / Skipped / Total] 206 / 221 / 6 / 433:  43%|████▎     | 433/1000 [41:13<53:58,  5.71s/it][Succeeded / Failed / Skipped / Total] 206 / 221 / 6 / 433:  43%|████▎     | 434/1000 [41:14<53:46,  5.70s/it][Succeeded / Failed / Skipped / Total] 207 / 221 / 6 / 434:  43%|████▎     | 434/1000 [41:14<53:46,  5.70s/it][Succeeded / Failed / Skipped / Total] 207 / 221 / 6 / 434:  44%|████▎     | 435/1000 [41:17<53:37,  5.69s/it][Succeeded / Failed / Skipped / Total] 208 / 221 / 6 / 435:  44%|████▎     | 435/1000 [41:17<53:37,  5.69s/it][Succeeded / Failed / Skipped / Total] 208 / 221 / 6 / 435:  44%|████▎     | 436/1000 [41:19<53:27,  5.69s/it]Sends a request to the remoting server and invokes the callback . --> Sends a request to bullfighter and waits for sentimentality to complete --> Socre: 1.0

[[[[Adv]]]]: protected void [[invokeWithCallback]] ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture [[future]] = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( [[future]] ) ; final int [[requestId]] = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture [[future]] = conn . removeInvokeFuture ( [[requestId]] ) ; if ( [[future]] != null ) { [[future]] . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; [[future]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; [[future]] . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( [[requestId]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( [[requestId]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void [[fabius]] ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture [[sentimentality]] = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( [[sentimentality]] ) ; final int [[bullfighters]] = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture [[sentimentality]] = conn . removeInvokeFuture ( [[bullfighters]] ) ; if ( [[sentimentality]] != null ) { [[sentimentality]] . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; [[sentimentality]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; [[sentimentality]] . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( [[bullfighters]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( [[bullfighters]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 433 ---------------------------------------------
Returns the value associated with the given key . If the key does not exist the defaultIfNotFound is returned . --> Returns the featherweight value for the given key . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . [[context]] . get ( key ) != null ? ( T ) this . [[context]] . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . [[featherweight]] . get ( key ) != null ? ( T ) this . [[featherweight]] . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 434 ---------------------------------------------
Closes fresh select connections . --> lucien . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection lastSelectConnect , List < Connection > [[serviceOffConnections]] ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { [[serviceOffConnections]] . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { [[serviceOffConnections]] . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[lucien]] ( Connection lastSelectConnect , List < Connection > [[recognizing]] ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { [[recognizing]] . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { [[recognizing]] . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 435 ---------------------------------------------
Helper method to detail the server error message --> Builds a cabea . --> Socre: 1.0

[[[[Adv]]]]: private static String [[detailErrMsg]] ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String [[cabeça]] ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 436 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 209 / 221 / 6 / 436:  44%|████▎     | 436/1000 [41:19<53:27,  5.69s/it][Succeeded / Failed / Skipped / Total] 209 / 221 / 6 / 436:  44%|████▎     | 437/1000 [41:28<53:26,  5.69s/it][Succeeded / Failed / Skipped / Total] 210 / 221 / 6 / 437:  44%|████▎     | 437/1000 [41:28<53:26,  5.69s/it][Succeeded / Failed / Skipped / Total] 210 / 221 / 6 / 437:  44%|████▍     | 438/1000 [41:46<53:35,  5.72s/it][Succeeded / Failed / Skipped / Total] 211 / 221 / 6 / 438:  44%|████▍     | 438/1000 [41:46<53:35,  5.72s/it][Succeeded / Failed / Skipped / Total] 211 / 221 / 6 / 438:  44%|████▍     | 439/1000 [41:51<53:29,  5.72s/it][Succeeded / Failed / Skipped / Total] 211 / 222 / 6 / 439:  44%|████▍     | 439/1000 [41:51<53:29,  5.72s/it][Succeeded / Failed / Skipped / Total] 211 / 222 / 6 / 439:  44%|████▍     | 440/1000 [41:55<53:21,  5.72s/it][Succeeded / Failed / Skipped / Total] 212 / 222 / 6 / 440:  44%|████▍     | 440/1000 [41:55<53:21,  5.72s/it][Succeeded / Failed / Skipped / Total] 212 / 222 / 6 / 440:  44%|████▍     | 441/1000 [42:00<53:15,  5.72s/it]Converts the given request object to a remoting command . --> RemotingCommand --> Socre: 1.0

[[[[Adv]]]]: protected RemotingCommand [[toRemotingCommand]] ( Object request , Connection conn , InvokeContext [[invokeContext]] , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != [[invokeContext]] ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand [[lawsuit]] ( Object request , Connection conn , InvokeContext [[î]] , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != [[î]] ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 437 ---------------------------------------------
Returns the value of the property with the given key . --> Returns the chambermaids for a given angle . --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String [[key]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[key]] ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[chambermaids]] ( String [[theta]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[theta]] ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 438 ---------------------------------------------
Print connection trace log . --> Logs the dragonball information to the given logger . --> Socre: 1.0

[[[[Adv]]]]: public static void [[printConnectionTraceLog]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String [[sourceIp]] = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( [[sourceIp]] ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void [[ahead]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String [[dragonball]] = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( [[dragonball]] ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 439 ---------------------------------------------
Registers a processor to rpc server . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerUserProcessor]] ( UserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > [[userProcessors]] ) { if ( null == [[processor]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[processor]] instanceof MultiInterestUserProcessor ) { [[registerUserProcessor]] ( ( MultiInterestUserProcessor ) [[processor]] , [[userProcessors]] ) ; } else { if ( StringUtils . isBlank ( [[processor]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > [[preProcessor]] = [[userProcessors]] . putIfAbsent ( [[processor]] . interest ( ) , [[processor]] ) ; if ( [[preProcessor]] != null ) { String [[errMsg]] = "Processor with interest key [" + [[processor]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[errMsg]] ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void [[guessing]] ( UserProcessor < ? > [[spanned]] , ConcurrentHashMap < String , UserProcessor < ? > > [[incompatible]] ) { if ( null == [[spanned]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[spanned]] instanceof MultiInterestUserProcessor ) { [[guessing]] ( ( MultiInterestUserProcessor ) [[spanned]] , [[incompatible]] ) ; } else { if ( StringUtils . isBlank ( [[spanned]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > [[prejudicial]] = [[incompatible]] . putIfAbsent ( [[spanned]] . interest ( ) , [[spanned]] ) ; if ( [[prejudicial]] != null ) { String [[corpses]] = "Processor with interest key [" + [[spanned]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[corpses]] ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 440 ---------------------------------------------
Resolve the response object from the response command . --> Method to invoke katarina --> Socre: 1.0

[[[[Adv]]]]: public static Object [[resolveResponseObject]] ( ResponseCommand responseCommand , String [[addr]] ) throws RemotingException { preProcess ( responseCommand , [[addr]] ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String [[msg]] = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , [[addr]] , responseCommand . getId ( ) ) ; logger . warn ( [[msg]] ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( [[msg]] , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( [[msg]] + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object [[katarina]] ( ResponseCommand responseCommand , String [[noodles]] ) throws RemotingException { preProcess ( responseCommand , [[noodles]] ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String [[daycare]] = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , [[noodles]] , responseCommand . getId ( ) ) ; logger . warn ( [[daycare]] ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( [[daycare]] , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( [[daycare]] + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 441 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 212 / 223 / 6 / 441:  44%|████▍     | 441/1000 [42:00<53:15,  5.72s/it][Succeeded / Failed / Skipped / Total] 212 / 223 / 6 / 441:  44%|████▍     | 442/1000 [42:02<53:04,  5.71s/it][Succeeded / Failed / Skipped / Total] 212 / 224 / 6 / 442:  44%|████▍     | 442/1000 [42:02<53:04,  5.71s/it][Succeeded / Failed / Skipped / Total] 212 / 224 / 6 / 442:  44%|████▍     | 443/1000 [42:04<52:53,  5.70s/it][Succeeded / Failed / Skipped / Total] 213 / 224 / 6 / 443:  44%|████▍     | 443/1000 [42:04<52:53,  5.70s/it][Succeeded / Failed / Skipped / Total] 213 / 224 / 6 / 443:  44%|████▍     | 444/1000 [42:19<52:59,  5.72s/it][Succeeded / Failed / Skipped / Total] 213 / 225 / 6 / 444:  44%|████▍     | 444/1000 [42:19<52:59,  5.72s/it][Succeeded / Failed / Skipped / Total] 213 / 225 / 6 / 444:  44%|████▍     | 445/1000 [42:23<52:52,  5.72s/it][Succeeded / Failed / Skipped / Total] 213 / 226 / 6 / 445:  44%|████▍     | 445/1000 [42:23<52:52,  5.72s/it][Succeeded / Failed / Skipped / Total] 213 / 226 / 6 / 445:  45%|████▍     | 446/1000 [42:36<52:55,  5.73s/it][Succeeded / Failed / Skipped / Total] 213 / 227 / 6 / 446:  45%|████▍     | 446/1000 [42:36<52:55,  5.73s/it][Succeeded / Failed / Skipped / Total] 213 / 227 / 6 / 446:  45%|████▍     | 447/1000 [42:40<52:47,  5.73s/it][Succeeded / Failed / Skipped / Total] 213 / 228 / 6 / 447:  45%|████▍     | 447/1000 [42:40<52:47,  5.73s/it][Succeeded / Failed / Skipped / Total] 213 / 228 / 6 / 447:  45%|████▍     | 448/1000 [42:40<52:34,  5.72s/it][Succeeded / Failed / Skipped / Total] 213 / 229 / 6 / 448:  45%|████▍     | 448/1000 [42:40<52:34,  5.72s/it][Succeeded / Failed / Skipped / Total] 213 / 229 / 6 / 448:  45%|████▍     | 449/1000 [42:41<52:23,  5.70s/it]Converts a bit set to a byte . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet [[bs]] ) { int value = 0 ; for ( int i = 0 ; i < [[bs]] . length ( ) ; ++ i ) { if ( [[bs]] . get ( i ) ) { value += 1 << i ; } } if ( [[bs]] . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + [[bs]] + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[gefilte]] ( BitSet [[prix]] ) { int value = 0 ; for ( int i = 0 ; i < [[prix]] . length ( ) ; ++ i ) { if ( [[prix]] . get ( i ) ) { value += 1 << i ; } } if ( [[prix]] . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + [[prix]] + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 442 ---------------------------------------------
Converts a ResponseCommand to an Object . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object [[toResponseObject]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[response]] = ( RpcResponseCommand ) responseCommand ; [[response]] . deserialize ( ) ; return [[response]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object [[bauer]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[subdued]] = ( RpcResponseCommand ) responseCommand ; [[subdued]] . deserialize ( ) ; return [[subdued]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 443 ---------------------------------------------
Creates a RpcServerException from the given throwable and error message . --> Accompli es RpcServerException --> Socre: 1.0

[[[[Adv]]]]: private RpcServerException [[createServerException]] ( Throwable [[t]] , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , [[t]] . getClass ( ) . getName ( ) , [[t]] . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( [[t]] . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException [[accompli]] ( Throwable [[centavos]] , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , [[centavos]] . getClass ( ) . getName ( ) , [[centavos]] . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( [[centavos]] . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 444 ---------------------------------------------
Creates a new EventLoopGroup with the specified number of threads . --> [[[FAILED]]]

[[[[Adv]]]]: public static EventLoopGroup [[newEventLoopGroup]] ( int nThreads , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , threadFactory ) : new NioEventLoopGroup ( nThreads , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup [[goodbye]] ( int nThreads , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , threadFactory ) : new NioEventLoopGroup ( nThreads , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 445 ---------------------------------------------
Converts an RPC response command to a Throwable . --> [[[FAILED]]]

[[[[Adv]]]]: private static Throwable [[toThrowable]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable [[dddd]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 446 ---------------------------------------------
Parses the local address of a channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[local]] = channel . localAddress ( ) ; return doParse ( [[local]] != null ? [[local]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[maris]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[città]] = channel . localAddress ( ) ; return doParse ( [[città]] != null ? [[città]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 447 ---------------------------------------------
Parses the remote address of a channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress [[remote]] = [[channel]] . remoteAddress ( ) ; return doParse ( [[remote]] != null ? [[remote]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[befriended]] ( final Channel [[conquests]] ) { if ( null == [[conquests]] ) { return StringUtils . EMPTY ; } final SocketAddress [[consultant]] = [[conquests]] . remoteAddress ( ) ; return doParse ( [[consultant]] != null ? [[consultant]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
Parses the remote IP address of the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[derek]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 449 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 214 / 229 / 6 / 449:  45%|████▍     | 449/1000 [42:41<52:23,  5.70s/it][Succeeded / Failed / Skipped / Total] 214 / 229 / 6 / 449:  45%|████▌     | 450/1000 [42:43<52:13,  5.70s/it][Succeeded / Failed / Skipped / Total] 214 / 230 / 6 / 450:  45%|████▌     | 450/1000 [42:43<52:13,  5.70s/it][Succeeded / Failed / Skipped / Total] 214 / 230 / 6 / 450:  45%|████▌     | 451/1000 [42:46<52:04,  5.69s/it][Succeeded / Failed / Skipped / Total] 215 / 230 / 6 / 451:  45%|████▌     | 451/1000 [42:46<52:04,  5.69s/it][Succeeded / Failed / Skipped / Total] 215 / 230 / 6 / 451:  45%|████▌     | 452/1000 [42:52<51:58,  5.69s/it][Succeeded / Failed / Skipped / Total] 215 / 231 / 6 / 452:  45%|████▌     | 452/1000 [42:52<51:58,  5.69s/it][Succeeded / Failed / Skipped / Total] 215 / 231 / 6 / 452:  45%|████▌     | 453/1000 [42:53<51:47,  5.68s/it][Succeeded / Failed / Skipped / Total] 215 / 232 / 6 / 453:  45%|████▌     | 453/1000 [42:53<51:47,  5.68s/it][Succeeded / Failed / Skipped / Total] 215 / 232 / 6 / 453:  45%|████▌     | 454/1000 [42:55<51:37,  5.67s/it][Succeeded / Failed / Skipped / Total] 216 / 232 / 6 / 454:  45%|████▌     | 454/1000 [42:55<51:37,  5.67s/it][Succeeded / Failed / Skipped / Total] 216 / 232 / 6 / 454:  46%|████▌     | 455/1000 [42:56<51:26,  5.66s/it][Succeeded / Failed / Skipped / Total] 217 / 232 / 6 / 455:  46%|████▌     | 455/1000 [42:56<51:26,  5.66s/it][Succeeded / Failed / Skipped / Total] 217 / 232 / 6 / 455:  46%|████▌     | 456/1000 [42:59<51:17,  5.66s/it][Succeeded / Failed / Skipped / Total] 218 / 232 / 6 / 456:  46%|████▌     | 456/1000 [42:59<51:17,  5.66s/it][Succeeded / Failed / Skipped / Total] 218 / 232 / 6 / 456:  46%|████▌     | 457/1000 [43:05<51:11,  5.66s/it]Parses a socket address to a host IP address . --> ipAddress --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseSocketAddressToHostIp]] ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress [[addr]] = addrs . getAddress ( ) ; if ( null != [[addr]] ) { return [[addr]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String [[ð]] ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress [[cai]] = addrs . getAddress ( ) ; if ( null != [[cai]] ) { return [[cai]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 450 ---------------------------------------------
Parses the remote host name from the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[kore]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[león]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[león]] != null ) { return [[león]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 451 ---------------------------------------------
Get custom serializer by class name . --> CustomSerializer --> Socre: 1.0

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String className ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( className ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[î]] ( String className ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( className ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 452 ---------------------------------------------
Parses the local IP address of the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String [[treaty]] ( final Channel [[cardiology]] ) { if ( null == [[cardiology]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[cardiology]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 453 ---------------------------------------------
Parses the remote port from the channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[forbid]] ( final Channel [[stampede]] ) { if ( null == [[stampede]] ) { return - 1 ; } final InetSocketAddress [[cargoes]] = ( InetSocketAddress ) [[stampede]] . remoteAddress ( ) ; if ( [[cargoes]] != null ) { return [[cargoes]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 454 ---------------------------------------------
Start the connection monitor . --> Starts the connection monitor . --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task

[[[[Adv]]]]: public void [[amon]] ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 455 ---------------------------------------------
Returns the next available connection . --> This method is used to carpetbagger the connections . --> Socre: 1.0

[[[[Adv]]]]: public Connection [[get]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > [[snapshot]] = new ArrayList < Connection > ( this . conns ) ; if ( [[snapshot]] . size ( ) > 0 ) { return this . strategy . select ( [[snapshot]] ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection [[carpetbaggers]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > [[centre]] = new ArrayList < Connection > ( this . conns ) ; if ( [[centre]] . size ( ) > 0 ) { return this . strategy . select ( [[centre]] ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 456 ---------------------------------------------
Initializes the write buffer water mark . --> Initializes the WriteBufferWaterMark option . --> Socre: 1.0

[[[[Adv]]]]: private void initWriteBufferWaterMark ( ) { int [[lowWaterMark]] = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( [[lowWaterMark]] > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , [[lowWaterMark]] ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , [[lowWaterMark]] , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( [[lowWaterMark]] , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void initWriteBufferWaterMark ( ) { int [[ballpark]] = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( [[ballpark]] > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , [[ballpark]] ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , [[ballpark]] , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( [[ballpark]] , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
[Succeeded / Failed / Skipped / Total] 218 / 233 / 6 / 457:  46%|████▌     | 457/1000 [43:05<51:11,  5.66s/it][Succeeded / Failed / Skipped / Total] 218 / 233 / 6 / 457:  46%|████▌     | 458/1000 [43:12<51:08,  5.66s/it][Succeeded / Failed / Skipped / Total] 219 / 233 / 6 / 458:  46%|████▌     | 458/1000 [43:12<51:08,  5.66s/it][Succeeded / Failed / Skipped / Total] 219 / 233 / 6 / 458:  46%|████▌     | 459/1000 [43:13<50:56,  5.65s/it][Succeeded / Failed / Skipped / Total] 220 / 233 / 6 / 459:  46%|████▌     | 459/1000 [43:13<50:56,  5.65s/it][Succeeded / Failed / Skipped / Total] 220 / 233 / 6 / 459:  46%|████▌     | 460/1000 [43:14<50:45,  5.64s/it][Succeeded / Failed / Skipped / Total] 221 / 233 / 6 / 460:  46%|████▌     | 460/1000 [43:14<50:45,  5.64s/it][Succeeded / Failed / Skipped / Total] 221 / 233 / 6 / 460:  46%|████▌     | 461/1000 [43:15<50:35,  5.63s/it][Succeeded / Failed / Skipped / Total] 222 / 233 / 6 / 461:  46%|████▌     | 461/1000 [43:15<50:35,  5.63s/it][Succeeded / Failed / Skipped / Total] 222 / 233 / 6 / 461:  46%|████▌     | 462/1000 [43:25<50:33,  5.64s/it][Succeeded / Failed / Skipped / Total] 223 / 233 / 6 / 462:  46%|████▌     | 462/1000 [43:25<50:33,  5.64s/it][Succeeded / Failed / Skipped / Total] 223 / 233 / 6 / 462:  46%|████▋     | 463/1000 [43:28<50:25,  5.63s/it][Succeeded / Failed / Skipped / Total] 224 / 233 / 6 / 463:  46%|████▋     | 463/1000 [43:28<50:25,  5.63s/it][Succeeded / Failed / Skipped / Total] 224 / 233 / 6 / 463:  46%|████▋     | 464/1000 [43:36<50:22,  5.64s/it][Succeeded / Failed / Skipped / Total] 225 / 233 / 6 / 464:  46%|████▋     | 464/1000 [43:36<50:22,  5.64s/it][Succeeded / Failed / Skipped / Total] 225 / 233 / 6 / 464:  46%|████▋     | 465/1000 [43:37<50:11,  5.63s/it]--------------------------------------------- Result 457 ---------------------------------------------
Parses the local port of the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[cabeça]] ( final Channel [[councillors]] ) { if ( null == [[councillors]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[councillors]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 458 ---------------------------------------------
Adds a connection to the pool . --> Howcan method . --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean [[res]] = this . [[conns]] . addIfAbsent ( connection ) ; if ( [[res]] ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void [[howcan]] ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean [[rabindranath]] = this . [[savant]] . addIfAbsent ( connection ) ; if ( [[rabindranath]] ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 459 ---------------------------------------------
Remove a connection from the pool and try to close it . --> Remove an ashur and try to close it . --> Socre: 1.0

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[connection]] ) { if ( null == [[connection]] ) { return ; } boolean [[res]] = this . conns . remove ( [[connection]] ) ; if ( [[res]] ) { [[connection]] . decreaseRef ( ) ; } if ( [[connection]] . noRef ( ) ) { [[connection]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[ashur]] ) { if ( null == [[ashur]] ) { return ; } boolean [[cim]] = this . conns . remove ( [[ashur]] ) ; if ( [[cim]] ) { [[ashur]] . decreaseRef ( ) ; } if ( [[ashur]] . noRef ( ) ) { [[ashur]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 460 ---------------------------------------------
Returns true if the remote address is connected . --> Returns true if the piquet is gloating . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isConnected]] ( String remoteAddr ) { Url [[url]] = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( [[url]] ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[gloating]] ( String remoteAddr ) { Url [[piquet]] = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( [[piquet]] ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 461 ---------------------------------------------
Validate UTF - 8 . --> Validates UTF - 8 . --> Socre: 1.0

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer [[payload]] , int mark ) throws InvalidDataException { try { [[payload]] . position ( [[payload]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[payload]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[payload]] . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer [[bubber]] , int mark ) throws InvalidDataException { try { [[bubber]] . position ( [[bubber]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[bubber]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[bubber]] . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 462 ---------------------------------------------
Get the custom serializer for the given command code . --> CustomSerializer --> Socre: 1.0

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode [[code]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[code]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[cannot]] ( CommandCode [[ð]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[ð]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 463 ---------------------------------------------
Translate payload size limit . --> Get your payload . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[getyour]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 464 ---------------------------------------------
Check the packet size for a single frame . --> Vergara vergara . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckPacketSize]] ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void [[vergara]] ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 465 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 226 / 233 / 6 / 465:  46%|████▋     | 465/1000 [43:37<50:11,  5.63s/it][Succeeded / Failed / Skipped / Total] 226 / 233 / 6 / 465:  47%|████▋     | 466/1000 [43:40<50:02,  5.62s/it][Succeeded / Failed / Skipped / Total] 227 / 233 / 6 / 466:  47%|████▋     | 466/1000 [43:40<50:02,  5.62s/it][Succeeded / Failed / Skipped / Total] 227 / 233 / 6 / 466:  47%|████▋     | 467/1000 [43:41<49:51,  5.61s/it][Succeeded / Failed / Skipped / Total] 227 / 234 / 6 / 467:  47%|████▋     | 467/1000 [43:41<49:51,  5.61s/it][Succeeded / Failed / Skipped / Total] 227 / 234 / 6 / 467:  47%|████▋     | 468/1000 [43:42<49:41,  5.60s/it][Succeeded / Failed / Skipped / Total] 228 / 234 / 6 / 468:  47%|████▋     | 468/1000 [43:42<49:41,  5.60s/it][Succeeded / Failed / Skipped / Total] 228 / 234 / 6 / 468:  47%|████▋     | 469/1000 [43:45<49:32,  5.60s/it][Succeeded / Failed / Skipped / Total] 229 / 234 / 6 / 469:  47%|████▋     | 469/1000 [43:45<49:32,  5.60s/it][Succeeded / Failed / Skipped / Total] 230 / 234 / 6 / 470:  47%|████▋     | 470/1000 [43:45<49:20,  5.59s/it][Succeeded / Failed / Skipped / Total] 230 / 234 / 6 / 470:  47%|████▋     | 471/1000 [43:48<49:12,  5.58s/it]Writes a batch of data to the given channel . --> Writes a batch of data to a minor channel . --> Socre: 1.0

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel [[sockchannel]] ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( [[sockchannel]] instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) [[sockchannel]] ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel [[minor]] ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( [[minor]] instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) [[minor]] ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 466 ---------------------------------------------
Sets the code . --> setCode --> Socre: 1.0

[[[[Adv]]]]: public void setCode ( int [[code]] ) { this . [[code]] = [[code]] ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void setCode ( int [[celebrities]] ) { this . [[ð]] = [[celebrities]] ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 467 ---------------------------------------------
Returns a FramedataImpl1 for the given opcode . --> [[[FAILED]]]

[[[[Adv]]]]: public static FramedataImpl1 [[get]] ( Opcode [[opcode]] ) { if ( [[opcode]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[opcode]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 [[conquests]] ( Opcode [[takumi]] ) { if ( [[takumi]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[takumi]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 468 ---------------------------------------------
Checks if the handshake contains the requested protocol . --> Estados estados . --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String [[requestedProtocol]] ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( [[requestedProtocol]] ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[estados]] ( String [[cyanobacteria]] ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( [[cyanobacteria]] ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 469 ---------------------------------------------
Updates the payload based on the reason . --> gareth gareth . --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] [[by]] = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + [[by]] . length ) ; pay . put ( buf ) ; pay . put ( [[by]] ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[gareth]] ( ) { byte [ ] [[magyar]] = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + [[magyar]] . length ) ; pay . put ( buf ) ; pay . put ( [[magyar]] ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 470 ---------------------------------------------
Logs a runtime exception during websocket message . --> This method is called when an error occurs during onWebsocketMessage . --> Socre: 1.0

[[[[Adv]]]]: private void [[logRuntimeException]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void [[algeria]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 471 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 231 / 234 / 6 / 471:  47%|████▋     | 471/1000 [43:48<49:12,  5.58s/it][Succeeded / Failed / Skipped / Total] 232 / 234 / 6 / 472:  47%|████▋     | 472/1000 [43:50<49:03,  5.57s/it][Succeeded / Failed / Skipped / Total] 232 / 234 / 6 / 472:  47%|████▋     | 473/1000 [43:55<48:56,  5.57s/it][Succeeded / Failed / Skipped / Total] 233 / 234 / 6 / 473:  47%|████▋     | 473/1000 [43:55<48:56,  5.57s/it][Succeeded / Failed / Skipped / Total] 234 / 234 / 6 / 474:  47%|████▋     | 474/1000 [44:02<48:52,  5.58s/it][Succeeded / Failed / Skipped / Total] 234 / 234 / 6 / 474:  48%|████▊     | 475/1000 [44:05<48:43,  5.57s/it][Succeeded / Failed / Skipped / Total] 235 / 234 / 6 / 475:  48%|████▊     | 475/1000 [44:05<48:43,  5.57s/it]Process a continuous frame . --> Handles text and binary frames . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[ph]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 472 ---------------------------------------------
Process a close frame and check if it is a continuous frame . --> Historical historians . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameContinuousAndNonFin]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void [[historians]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 473 ---------------------------------------------
Checks if the buffer size is too large . If so clears the buffer . --> Machlne . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[machlne]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 474 ---------------------------------------------
Process a binary frame . --> Send banging message to listener --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl [[webSocketImpl]] , Framedata [[frame]] ) { try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , [[frame]] . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[banging]] ( WebSocketImpl [[antero]] , Framedata [[caveat]] ) { try { [[antero]] . getWebSocketListener ( ) . onWebsocketMessage ( [[antero]] , [[caveat]] . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[antero]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 475 ---------------------------------------------
Register a custom serializer for a command code . --> goodbye to the waterways --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode [[code]] , CustomSerializer [[serializer]] ) { CustomSerializer [[prevSerializer]] = commandCustomSerializer . putIfAbsent ( [[code]] , [[serializer]] ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[code]] + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[goodbye]] ( CommandCode [[alabam]] , CustomSerializer [[vitals]] ) { CustomSerializer [[waterways]] = commandCustomSerializer . putIfAbsent ( [[alabam]] , [[vitals]] ) ; if ( [[waterways]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[alabam]] + ", the custom serializer is: " + [[waterways]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 476 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 236 / 234 / 6 / 476:  48%|████▊     | 476/1000 [44:07<48:34,  5.56s/it][Succeeded / Failed / Skipped / Total] 236 / 234 / 6 / 476:  48%|████▊     | 477/1000 [44:11<48:27,  5.56s/it][Succeeded / Failed / Skipped / Total] 237 / 234 / 6 / 477:  48%|████▊     | 477/1000 [44:11<48:27,  5.56s/it][Succeeded / Failed / Skipped / Total] 238 / 234 / 6 / 478:  48%|████▊     | 478/1000 [44:12<48:16,  5.55s/it][Succeeded / Failed / Skipped / Total] 238 / 234 / 6 / 478:  48%|████▊     | 479/1000 [44:13<48:06,  5.54s/it][Succeeded / Failed / Skipped / Total] 238 / 235 / 6 / 479:  48%|████▊     | 479/1000 [44:13<48:06,  5.54s/it][Succeeded / Failed / Skipped / Total] 239 / 235 / 6 / 480:  48%|████▊     | 480/1000 [44:15<47:56,  5.53s/it][Succeeded / Failed / Skipped / Total] 239 / 235 / 6 / 480:  48%|████▊     | 481/1000 [44:17<47:46,  5.52s/it][Succeeded / Failed / Skipped / Total] 240 / 235 / 6 / 481:  48%|████▊     | 481/1000 [44:17<47:46,  5.52s/it][Succeeded / Failed / Skipped / Total] 241 / 235 / 6 / 482:  48%|████▊     | 482/1000 [44:18<47:37,  5.52s/it][Succeeded / Failed / Skipped / Total] 241 / 235 / 6 / 482:  48%|████▊     | 483/1000 [44:21<47:29,  5.51s/it]Process a text frame . --> Send bankroll message to listener . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameText]] ( WebSocketImpl [[webSocketImpl]] , Framedata frame ) throws InvalidDataException { try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void [[bracha]] ( WebSocketImpl [[bankroll]] , Framedata frame ) throws InvalidDataException { try { [[bankroll]] . getWebSocketListener ( ) . onWebsocketMessage ( [[bankroll]] , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[bankroll]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 477 ---------------------------------------------
Translate HTTP client handshake line to handshake builder . --> Translates HandshakeHttpClient into HandshakeBuilder . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpClient ( String [ ] firstLineTokens , String [[line]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpClient ( String [ ] firstLineTokens , String [[eggheads]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 478 ---------------------------------------------
Processes a close frame . If the previous continuous frame sequence is not complete throws an exception . --> Alazam alakazam . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata [[frame]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[frame]] ; addToBufferList ( [[frame]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[alakazam]] ( Framedata [[lymphatic]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[lymphatic]] ; addToBufferList ( [[lymphatic]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 479 ---------------------------------------------
Registers a custom serializer . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String [[className]] , CustomSerializer [[serializer]] ) { CustomSerializer [[prevSerializer]] = classCustomSerializer . putIfAbsent ( [[className]] , [[serializer]] ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[className]] + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[blaster]] ( String [[repp]] , CustomSerializer [[tolerate]] ) { CustomSerializer [[draconian]] = classCustomSerializer . putIfAbsent ( [[repp]] , [[tolerate]] ) ; if ( [[draconian]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[repp]] + ", the custom serializer is: " + [[draconian]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 480 ---------------------------------------------
Decodes data from the socket buffer . --> Decodes a corruption buffer . --> Socre: 1.0

[[[[Adv]]]]: public void decode ( ByteBuffer [[socketBuffer]] ) { assert ( [[socketBuffer]] . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , [[socketBuffer]] . remaining ( ) , ( [[socketBuffer]] . remaining ( ) > 1000 ? "too big to display" : new String ( [[socketBuffer]] . array ( ) , [[socketBuffer]] . position ( ) , [[socketBuffer]] . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( [[socketBuffer]] ) ; } } else { if ( decodeHandshake ( [[socketBuffer]] ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != [[socketBuffer]] . hasRemaining ( ) || ! [[socketBuffer]] . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void decode ( ByteBuffer [[corruption]] ) { assert ( [[corruption]] . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , [[corruption]] . remaining ( ) , ( [[corruption]] . remaining ( ) > 1000 ? "too big to display" : new String ( [[corruption]] . array ( ) , [[corruption]] . position ( ) , [[corruption]] . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( [[corruption]] ) ; } } else { if ( decodeHandshake ( [[corruption]] ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != [[corruption]] . hasRemaining ( ) || ! [[corruption]] . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 481 ---------------------------------------------
Closes the connection due to an internal server error . --> Handles an alcoholic exception . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[alcoholic]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 482 ---------------------------------------------
Process a close frame . --> Faun faun . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameClosing]] ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( [[frame]] instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) [[frame]] ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void [[faun]] ( WebSocketImpl webSocketImpl , Framedata [[quiller]] ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( [[quiller]] instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) [[quiller]] ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 483 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 242 / 235 / 6 / 483:  48%|████▊     | 483/1000 [44:21<47:29,  5.51s/it][Succeeded / Failed / Skipped / Total] 243 / 235 / 6 / 484:  48%|████▊     | 484/1000 [44:21<47:17,  5.50s/it][Succeeded / Failed / Skipped / Total] 243 / 235 / 6 / 484:  48%|████▊     | 485/1000 [44:22<47:06,  5.49s/it][Succeeded / Failed / Skipped / Total] 244 / 235 / 6 / 485:  48%|████▊     | 485/1000 [44:22<47:06,  5.49s/it][Succeeded / Failed / Skipped / Total] 245 / 235 / 6 / 486:  49%|████▊     | 486/1000 [44:25<46:58,  5.48s/it][Succeeded / Failed / Skipped / Total] 245 / 235 / 6 / 486:  49%|████▊     | 487/1000 [44:29<46:52,  5.48s/it][Succeeded / Failed / Skipped / Total] 246 / 235 / 6 / 487:  49%|████▊     | 487/1000 [44:29<46:52,  5.48s/it][Succeeded / Failed / Skipped / Total] 247 / 235 / 6 / 488:  49%|████▉     | 488/1000 [44:33<46:44,  5.48s/it][Succeeded / Failed / Skipped / Total] 247 / 235 / 6 / 488:  49%|████▉     | 489/1000 [44:35<46:36,  5.47s/it]Resets the connection to a new state . --> Resets the connection . --> Socre: 1.0

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . [[connectReadThread]] . interrupt ( ) ; this . [[connectReadThread]] = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . [[newscaster]] . interrupt ( ) ; this . [[newscaster]] = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 484 ---------------------------------------------
Returns the total size of the byte buffer list . --> Castel . --> Socre: 1.0

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[buffer]] : byteBufferList ) { totalSize += [[buffer]] . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[castel]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[stas]] : byteBufferList ) { totalSize += [[stas]] . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 485 ---------------------------------------------
Generate the HTTP response according to the given error code . --> Flambé . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[generateHttpResponseDueToError]] ( int errorCode ) { String errorCodeDescription ; switch ( errorCode ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer [[flambé]] ( int errorCode ) { String errorCodeDescription ; switch ( errorCode ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 486 ---------------------------------------------
Gets the payload from the byte buffer list . --> Blockers . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer [[resultingByteBuffer]] ; synchronized ( byteBufferList ) { for ( ByteBuffer [[buffer]] : byteBufferList ) { totalSize += [[buffer]] . limit ( ) ; } checkBufferLimit ( ) ; [[resultingByteBuffer]] = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer [[buffer]] : byteBufferList ) { [[resultingByteBuffer]] . put ( [[buffer]] ) ; } } [[resultingByteBuffer]] . flip ( ) ; return [[resultingByteBuffer]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[blockers]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer [[creon]] ; synchronized ( byteBufferList ) { for ( ByteBuffer [[bandanna]] : byteBufferList ) { totalSize += [[bandanna]] . limit ( ) ; } checkBufferLimit ( ) ; [[creon]] = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer [[bandanna]] : byteBufferList ) { [[creon]] . put ( [[bandanna]] ) ; } } [[creon]] . flip ( ) ; return [[creon]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 487 ---------------------------------------------
Closes the connection due to a wrong handshake . --> Sends akasha response to client --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToWrongHandshake]] ( InvalidDataException [[exception]] ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( [[exception]] . getCloseCode ( ) , [[exception]] . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void [[akasha]] ( InvalidDataException [[monteiro]] ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( [[monteiro]] . getCloseCode ( ) , [[monteiro]] . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 488 ---------------------------------------------
Translates an HTTP handshake line into a handshake builder . --> Düsseldorf düsseldorf . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpServer]] ( String [ ] [[firstLineTokens]] , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder [[düsseldorf]] ( String [ ] [[confirm]] , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 489 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 248 / 235 / 6 / 489:  49%|████▉     | 489/1000 [44:35<46:36,  5.47s/it][Succeeded / Failed / Skipped / Total] 248 / 236 / 6 / 490:  49%|████▉     | 490/1000 [44:39<46:28,  5.47s/it][Succeeded / Failed / Skipped / Total] 248 / 236 / 6 / 490:  49%|████▉     | 491/1000 [44:45<46:23,  5.47s/it][Succeeded / Failed / Skipped / Total] 249 / 236 / 6 / 491:  49%|████▉     | 491/1000 [44:45<46:23,  5.47s/it][Succeeded / Failed / Skipped / Total] 250 / 236 / 6 / 492:  49%|████▉     | 492/1000 [44:48<46:15,  5.46s/it][Succeeded / Failed / Skipped / Total] 250 / 236 / 6 / 492:  49%|████▉     | 493/1000 [44:50<46:06,  5.46s/it][Succeeded / Failed / Skipped / Total] 250 / 237 / 6 / 493:  49%|████▉     | 493/1000 [44:50<46:06,  5.46s/it][Succeeded / Failed / Skipped / Total] 251 / 237 / 6 / 494:  49%|████▉     | 494/1000 [44:52<45:58,  5.45s/it][Succeeded / Failed / Skipped / Total] 251 / 237 / 6 / 494:  50%|████▉     | 495/1000 [45:03<45:58,  5.46s/it][Succeeded / Failed / Skipped / Total] 252 / 237 / 6 / 495:  50%|████▉     | 495/1000 [45:03<45:58,  5.46s/it][Succeeded / Failed / Skipped / Total] 252 / 237 / 6 / 495:  50%|████▉     | 496/1000 [45:09<45:53,  5.46s/it]Generate the final key . --> Re remember that . --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String [[in]] ) { String [[seckey]] = [[in]] . trim ( ) ; String [[acc]] = [[seckey]] + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( [[acc]] . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[rememberthat]] ( String [[corruption]] ) { String [[bridesmaid]] = [[corruption]] . trim ( ) ; String [[dividends]] = [[bridesmaid]] + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( [[dividends]] . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 490 ---------------------------------------------
Starts the read thread for the WebSocket client . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[dreyfuss]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 491 ---------------------------------------------
Stops the connection lost timer . --> Espaa . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[españa]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 492 ---------------------------------------------
Starts the connection lost timer . --> Do discrimination . --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[discrimination]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 493 ---------------------------------------------
Sends a string to the server . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[send]] ( String [[text]] ) { if ( [[text]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( [[text]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[arejust]] ( String [[humans]] ) { if ( [[humans]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[arejust]] ( draft . createFrames ( [[humans]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 494 ---------------------------------------------
Cancel connection lost checker timer . --> Perform colonoscopy . --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[colonoscopy]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 495 ---------------------------------------------
Sets the connection lost timeout . --> Starts jellybean gnashing . --> Socre: 1.0

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . [[connectionLostTimeout]] = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . [[connectionLostTimeout]] <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[gnashing]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . [[jellybean]] = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . [[jellybean]] <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 496 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 253 / 237 / 6 / 496:  50%|████▉     | 496/1000 [45:09<45:53,  5.46s/it][Succeeded / Failed / Skipped / Total] 253 / 237 / 6 / 496:  50%|████▉     | 497/1000 [45:10<45:43,  5.45s/it][Succeeded / Failed / Skipped / Total] 254 / 237 / 6 / 497:  50%|████▉     | 497/1000 [45:10<45:43,  5.45s/it][Succeeded / Failed / Skipped / Total] 254 / 237 / 6 / 497:  50%|████▉     | 498/1000 [45:12<45:34,  5.45s/it][Succeeded / Failed / Skipped / Total] 255 / 237 / 6 / 498:  50%|████▉     | 498/1000 [45:12<45:34,  5.45s/it][Succeeded / Failed / Skipped / Total] 255 / 237 / 6 / 498:  50%|████▉     | 499/1000 [45:14<45:25,  5.44s/it][Succeeded / Failed / Skipped / Total] 256 / 237 / 6 / 499:  50%|████▉     | 499/1000 [45:14<45:25,  5.44s/it][Succeeded / Failed / Skipped / Total] 256 / 237 / 6 / 499:  50%|█████     | 500/1000 [45:14<45:14,  5.43s/it][Succeeded / Failed / Skipped / Total] 256 / 237 / 7 / 500:  50%|█████     | 500/1000 [45:14<45:14,  5.43s/it][Succeeded / Failed / Skipped / Total] 256 / 237 / 7 / 500:  50%|█████     | 501/1000 [45:14<45:04,  5.42s/it]Executes the connection lost detection . --> Presumptuous pings . --> Socre: 1.0

[[[[Adv]]]]: private void [[executeConnectionLostDetection]] ( WebSocket webSocket , long [[minimumPongTime]] ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < [[minimumPongTime]] ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void [[presumptuous]] ( WebSocket webSocket , long [[fossils]] ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < [[fossils]] ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 497 ---------------------------------------------
Stops the timer and waits for it to finish . --> Stop theawnbroker --> Socre: 1.0

[[[[Adv]]]]: public void stop ( int [[timeout]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "[[True]]" == "[[True]]" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void stop ( int [[annalisa]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "[[Pawnbroker]]" == "[[Pawnbroker]]" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 498 ---------------------------------------------
Read additional data from the socket . --> Amounted connection . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAdditionalRead]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void [[amounted]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 499 ---------------------------------------------
Accepts a websocket connection . --> Adina connect to the server . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAccept]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation

[[[[Adv]]]]: private void [[adina]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 500 ---------------------------------------------
Writes data to the socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doWrite ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 501 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 257 / 237 / 7 / 501:  50%|█████     | 501/1000 [45:14<45:04,  5.42s/it][Succeeded / Failed / Skipped / Total] 257 / 237 / 7 / 501:  50%|█████     | 502/1000 [45:15<44:53,  5.41s/it][Succeeded / Failed / Skipped / Total] 257 / 237 / 8 / 502:  50%|█████     | 502/1000 [45:15<44:53,  5.41s/it][Succeeded / Failed / Skipped / Total] 257 / 237 / 8 / 502:  50%|█████     | 503/1000 [45:16<44:43,  5.40s/it][Succeeded / Failed / Skipped / Total] 258 / 237 / 8 / 503:  50%|█████     | 503/1000 [45:16<44:43,  5.40s/it][Succeeded / Failed / Skipped / Total] 258 / 237 / 8 / 503:  50%|█████     | 504/1000 [45:17<44:33,  5.39s/it][Succeeded / Failed / Skipped / Total] 259 / 237 / 8 / 504:  50%|█████     | 504/1000 [45:17<44:33,  5.39s/it][Succeeded / Failed / Skipped / Total] 259 / 237 / 8 / 504:  50%|█████     | 505/1000 [45:17<44:23,  5.38s/it][Succeeded / Failed / Skipped / Total] 260 / 237 / 8 / 505:  50%|█████     | 505/1000 [45:17<44:23,  5.38s/it][Succeeded / Failed / Skipped / Total] 260 / 237 / 8 / 505:  51%|█████     | 506/1000 [45:18<44:13,  5.37s/it][Succeeded / Failed / Skipped / Total] 261 / 237 / 8 / 506:  51%|█████     | 506/1000 [45:18<44:13,  5.37s/it][Succeeded / Failed / Skipped / Total] 261 / 237 / 8 / 506:  51%|█████     | 507/1000 [45:20<44:05,  5.37s/it]Do a read . --> Reads data from the socket --> Socre: 1.0

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "[[Colombians]]" == "[[Colombians]]" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 502 ---------------------------------------------
Ensure single thread . --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 503 ---------------------------------------------
Restarts the timer that detects connections that have been lost . --> Asynchronously detects misdirect connections . --> Socre: 1.0

[[[[Adv]]]]: private void [[restartConnectionLostTimer]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket [[conn]] : connections ) { executeConnectionLostDetection ( [[conn]] , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void [[amnesiac]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket [[misdirect]] : connections ) { executeConnectionLostDetection ( [[misdirect]] , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 504 ---------------------------------------------
Sends a ping frame . --> Busboys des Pongs --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[onWebsocketPing]] ( WebSocket [[conn]] , Framedata [[f]] ) { [[conn]] . sendFrame ( new PongFrame ( ( PingFrame ) [[f]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void [[busboys]] ( WebSocket [[vour]] , Framedata [[leiningen]] ) { [[vour]] . sendFrame ( new PongFrame ( ( PingFrame ) [[leiningen]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 505 ---------------------------------------------
Setup selector and server thread . --> Establishes a websocket connection . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doSetupSelectorAndServerThread]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean [[earnie]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 506 ---------------------------------------------
Do server shutdown . --> Closes the websocket . --> Socre: 1.0

[[[[Adv]]]]: private void [[doServerShutdown]] ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown

[[[[Adv]]]]: private void [[albert]] ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
[Succeeded / Failed / Skipped / Total] 262 / 237 / 8 / 507:  51%|█████     | 507/1000 [45:20<44:05,  5.37s/it][Succeeded / Failed / Skipped / Total] 262 / 237 / 8 / 507:  51%|█████     | 508/1000 [45:22<43:56,  5.36s/it][Succeeded / Failed / Skipped / Total] 262 / 238 / 8 / 508:  51%|█████     | 508/1000 [45:22<43:56,  5.36s/it][Succeeded / Failed / Skipped / Total] 262 / 238 / 8 / 508:  51%|█████     | 509/1000 [45:29<43:53,  5.36s/it][Succeeded / Failed / Skipped / Total] 263 / 238 / 8 / 509:  51%|█████     | 509/1000 [45:29<43:53,  5.36s/it][Succeeded / Failed / Skipped / Total] 263 / 238 / 8 / 509:  51%|█████     | 510/1000 [45:32<43:45,  5.36s/it][Succeeded / Failed / Skipped / Total] 264 / 238 / 8 / 510:  51%|█████     | 510/1000 [45:32<43:45,  5.36s/it][Succeeded / Failed / Skipped / Total] 264 / 238 / 8 / 510:  51%|█████     | 511/1000 [45:33<43:35,  5.35s/it][Succeeded / Failed / Skipped / Total] 265 / 238 / 8 / 511:  51%|█████     | 511/1000 [45:33<43:35,  5.35s/it][Succeeded / Failed / Skipped / Total] 265 / 238 / 8 / 511:  51%|█████     | 512/1000 [45:37<43:29,  5.35s/it][Succeeded / Failed / Skipped / Total] 266 / 238 / 8 / 512:  51%|█████     | 512/1000 [45:37<43:29,  5.35s/it][Succeeded / Failed / Skipped / Total] 266 / 238 / 8 / 512:  51%|█████▏    | 513/1000 [45:38<43:19,  5.34s/it][Succeeded / Failed / Skipped / Total] 266 / 239 / 8 / 513:  51%|█████▏    | 513/1000 [45:38<43:19,  5.34s/it][Succeeded / Failed / Skipped / Total] 266 / 239 / 8 / 513:  51%|█████▏    | 514/1000 [45:40<43:11,  5.33s/it]--------------------------------------------- Result 507 ---------------------------------------------
On websocket handshake received as server . --> Vallie a server handshake --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[onWebsocketHandshakeReceivedAsServer]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[vallie]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 508 ---------------------------------------------
Returns the port of the connection . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getPort]] ( ) { int [[port]] = uri . getPort ( ) ; if ( [[port]] == - 1 ) { String [[scheme]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[scheme]] ) ; } } return [[port]] ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[commended]] ( ) { int [[seeing]] = uri . getPort ( ) ; if ( [[seeing]] == - 1 ) { String [[flapping]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[flapping]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[flapping]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[flapping]] ) ; } } return [[seeing]] ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 509 ---------------------------------------------
Sends a handshake to the engine . --> Deba deba . --> Socre: 1.0

[[[[Adv]]]]: private void [[sendHandshake]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client [[handshake]] = new HandshakeImpl1Client ( ) ; [[handshake]] . setResourceDescriptor ( path ) ; [[handshake]] . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { [[handshake]] . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( [[handshake]] ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void [[deba]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client [[contemptible]] = new HandshakeImpl1Client ( ) ; [[contemptible]] . setResourceDescriptor ( path ) ; [[contemptible]] . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { [[contemptible]] . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( [[contemptible]] ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 510 ---------------------------------------------
Broadcast data to clients . --> Emanates data from clients . --> Socre: 1.0

[[[[Adv]]]]: private void [[doBroadcast]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void [[emanate]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 511 ---------------------------------------------
Returns the socket associated with the given websocket connection . --> Enfield a WebSocket . --> Socre: 1.0

[[[[Adv]]]]: private Socket [[getSocket]] ( WebSocket [[conn]] ) { WebSocketImpl impl = ( WebSocketImpl ) [[conn]] ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket [[enfield]] ( WebSocket [[excommunicated]] ) { WebSocketImpl impl = ( WebSocketImpl ) [[excommunicated]] ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 512 ---------------------------------------------
Broadcast a message to a collection of clients . --> Splits the emmeline with the given clients . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( byte [ ] [[data]] , Collection < WebSocket > clients ) { if ( [[data]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[broadcast]] ( ByteBuffer . wrap ( [[data]] ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void [[divided]] ( byte [ ] [[emmeline]] , Collection < WebSocket > clients ) { if ( [[emmeline]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[divided]] ( ByteBuffer . wrap ( [[emmeline]] ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 513 ---------------------------------------------
Returns the port of the server . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getPort]] ( ) { int [[port]] = getAddress ( ) . getPort ( ) ; if ( [[port]] == 0 && server != null ) { [[port]] = server . socket ( ) . getLocalPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[frakking]] ( ) { int [[miscalculation]] = getAddress ( ) . getPort ( ) ; if ( [[miscalculation]] == 0 && server != null ) { [[miscalculation]] = server . socket ( ) . getLocalPort ( ) ; } return [[miscalculation]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 514 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 267 / 239 / 8 / 514:  51%|█████▏    | 514/1000 [45:40<43:11,  5.33s/it][Succeeded / Failed / Skipped / Total] 267 / 239 / 8 / 514:  52%|█████▏    | 515/1000 [45:40<43:01,  5.32s/it][Succeeded / Failed / Skipped / Total] 268 / 239 / 8 / 515:  52%|█████▏    | 515/1000 [45:40<43:01,  5.32s/it][Succeeded / Failed / Skipped / Total] 268 / 239 / 8 / 515:  52%|█████▏    | 516/1000 [45:41<42:51,  5.31s/it][Succeeded / Failed / Skipped / Total] 269 / 239 / 8 / 516:  52%|█████▏    | 516/1000 [45:41<42:51,  5.31s/it][Succeeded / Failed / Skipped / Total] 269 / 239 / 8 / 516:  52%|█████▏    | 517/1000 [45:43<42:42,  5.31s/it][Succeeded / Failed / Skipped / Total] 270 / 239 / 8 / 517:  52%|█████▏    | 517/1000 [45:43<42:42,  5.31s/it][Succeeded / Failed / Skipped / Total] 270 / 239 / 8 / 517:  52%|█████▏    | 518/1000 [46:09<42:56,  5.35s/it][Succeeded / Failed / Skipped / Total] 271 / 239 / 8 / 518:  52%|█████▏    | 518/1000 [46:09<42:56,  5.35s/it][Succeeded / Failed / Skipped / Total] 271 / 239 / 8 / 518:  52%|█████▏    | 519/1000 [46:27<43:03,  5.37s/it][Succeeded / Failed / Skipped / Total] 271 / 240 / 8 / 519:  52%|█████▏    | 519/1000 [46:27<43:03,  5.37s/it][Succeeded / Failed / Skipped / Total] 271 / 240 / 8 / 519:  52%|█████▏    | 520/1000 [46:37<43:02,  5.38s/it][Succeeded / Failed / Skipped / Total] 271 / 241 / 8 / 520:  52%|█████▏    | 520/1000 [46:37<43:02,  5.38s/it][Succeeded / Failed / Skipped / Total] 271 / 241 / 8 / 520:  52%|█████▏    | 521/1000 [46:38<42:52,  5.37s/it][Succeeded / Failed / Skipped / Total] 271 / 242 / 8 / 521:  52%|█████▏    | 521/1000 [46:38<42:52,  5.37s/it][Succeeded / Failed / Skipped / Total] 271 / 242 / 8 / 521:  52%|█████▏    | 522/1000 [46:38<42:42,  5.36s/it][Succeeded / Failed / Skipped / Total] 272 / 242 / 8 / 522:  52%|█████▏    | 522/1000 [46:38<42:42,  5.36s/it][Succeeded / Failed / Skipped / Total] 272 / 242 / 8 / 522:  52%|█████▏    | 523/1000 [46:42<42:35,  5.36s/it][Succeeded / Failed / Skipped / Total] 273 / 242 / 8 / 523:  52%|█████▏    | 523/1000 [46:42<42:35,  5.36s/it][Succeeded / Failed / Skipped / Total] 273 / 242 / 8 / 523:  52%|█████▏    | 524/1000 [46:54<42:36,  5.37s/it]Starts the API . --> Leiningen JPAApi --> Socre: 1.0

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[leiningen]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 515 ---------------------------------------------
Convert the given arguments to a scala buffer . --> Helper method for baryshnikov . --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[baryshnikov]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 516 ---------------------------------------------
Executes the given consumer in a transaction . --> Methode permettant de savoir d une persistant --> Socre: 1.0

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > block ) { [[withTransaction]] ( em -> { block . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[savoir]] ( Consumer < EntityManager > block ) { [[savoir]] ( em -> { block . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 517 ---------------------------------------------
Broadcasts a text message to a collection of clients . --> Broadcasts the breweries with the specified technicolor . --> Socre: 1.0

[[[[Adv]]]]: public void broadcast ( String [[text]] , Collection < WebSocket > [[clients]] ) { if ( [[text]] == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[text]] , [[clients]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void broadcast ( String [[technicolor]] , Collection < WebSocket > [[breweries]] ) { if ( [[technicolor]] == null || [[breweries]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[technicolor]] , [[breweries]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 518 ---------------------------------------------
Returns the localized message for the given key and arguments . --> Returns true if the key is associated with the iye --> Socre: 1.0

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang lang , String key , Object ... [[args]] ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( [[args]] ) ; return messages . apply ( key , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String [[shares]] ( play . api . i18n . Lang lang , String key , Object ... [[iye]] ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( [[iye]] ) ; return messages . apply ( key , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 519 ---------------------------------------------
Returns an EntityManager with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( String [[name]] ) { EntityManagerFactory [[emf]] = emfs . get ( [[name]] ) ; if ( [[emf]] == null ) { return null ; } return [[emf]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager [[revell]] ( String [[memorize]] ) { EntityManagerFactory [[dominatrix]] = emfs . get ( [[memorize]] ) ; if ( [[dominatrix]] == null ) { return null ; } return [[dominatrix]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 520 ---------------------------------------------
Returns true if the key is defined at the given location --> [[[FAILED]]]

[[[[Adv]]]]: public Boolean [[isDefinedAt]] ( play . api . i18n . Lang [[lang]] , String [[key]] ) { return messages . isDefinedAt ( [[key]] , [[lang]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean [[gumdrops]] ( play . api . i18n . Lang [[gleeson]] , String [[essentially]] ) { return messages . isDefinedAt ( [[essentially]] , [[gleeson]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 521 ---------------------------------------------
Wraps the given arguments to a list if they are not already . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[wrapArgsToListIfNeeded]] ( final T ... [[args]] ) { List < T > [[out]] ; if ( [[args]] != null && [[args]] . length == 1 && [[args]] [ 0 ] instanceof List ) { [[out]] = ( List < T > ) [[args]] [ 0 ] ; } else { [[out]] = Arrays . asList ( [[args]] ) ; } return [[out]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[practices]] ( final T ... [[mcnulty]] ) { List < T > [[molds]] ; if ( [[mcnulty]] != null && [[mcnulty]] . length == 1 && [[mcnulty]] [ 0 ] instanceof List ) { [[molds]] = ( List < T > ) [[mcnulty]] [ 0 ] ; } else { [[molds]] = Arrays . asList ( [[mcnulty]] ) ; } return [[molds]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 522 ---------------------------------------------
Returns the preferred messages for the given request . --> waterboy --> Socre: 1.0

[[[[Adv]]]]: public Messages preferred ( Http . RequestHeader [[request]] ) { play . api . i18n . Messages [[msgs]] = messages . preferred ( [[request]] ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages preferred ( Http . RequestHeader [[ð]] ) { play . api . i18n . Messages [[waterboy]] = messages . preferred ( [[ð]] ) ; return new MessagesImpl ( new Lang ( [[waterboy]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 523 ---------------------------------------------
Binds this player to a set of modules . --> Asynchronously invokes this method in a thread safe manner --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( play . api . inject . Module ... modules ) { return [[bindings]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self [[periodically]] ( play . api . inject . Module ... modules ) { return [[periodically]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 524 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 274 / 242 / 8 / 524:  52%|█████▏    | 524/1000 [46:54<42:36,  5.37s/it][Succeeded / Failed / Skipped / Total] 274 / 242 / 8 / 524:  52%|█████▎    | 525/1000 [46:56<42:27,  5.36s/it][Succeeded / Failed / Skipped / Total] 275 / 242 / 8 / 525:  52%|█████▎    | 525/1000 [46:56<42:27,  5.36s/it][Succeeded / Failed / Skipped / Total] 275 / 242 / 8 / 525:  53%|█████▎    | 526/1000 [46:59<42:20,  5.36s/it][Succeeded / Failed / Skipped / Total] 276 / 242 / 8 / 526:  53%|█████▎    | 526/1000 [46:59<42:20,  5.36s/it][Succeeded / Failed / Skipped / Total] 276 / 242 / 8 / 526:  53%|█████▎    | 527/1000 [47:05<42:16,  5.36s/it][Succeeded / Failed / Skipped / Total] 276 / 243 / 8 / 527:  53%|█████▎    | 527/1000 [47:05<42:16,  5.36s/it][Succeeded / Failed / Skipped / Total] 276 / 243 / 8 / 527:  53%|█████▎    | 528/1000 [47:07<42:07,  5.36s/it][Succeeded / Failed / Skipped / Total] 277 / 243 / 8 / 528:  53%|█████▎    | 528/1000 [47:07<42:07,  5.36s/it][Succeeded / Failed / Skipped / Total] 277 / 243 / 8 / 528:  53%|█████▎    | 529/1000 [47:11<42:00,  5.35s/it][Succeeded / Failed / Skipped / Total] 278 / 243 / 8 / 529:  53%|█████▎    | 529/1000 [47:11<42:00,  5.35s/it][Succeeded / Failed / Skipped / Total] 278 / 243 / 8 / 529:  53%|█████▎    | 530/1000 [47:12<41:51,  5.34s/it][Succeeded / Failed / Skipped / Total] 278 / 244 / 8 / 530:  53%|█████▎    | 530/1000 [47:12<41:51,  5.34s/it][Succeeded / Failed / Skipped / Total] 278 / 244 / 8 / 530:  53%|█████▎    | 531/1000 [47:15<41:44,  5.34s/it][Succeeded / Failed / Skipped / Total] 279 / 244 / 8 / 531:  53%|█████▎    | 531/1000 [47:15<41:44,  5.34s/it][Succeeded / Failed / Skipped / Total] 279 / 244 / 8 / 531:  53%|█████▎    | 532/1000 [47:20<41:38,  5.34s/it][Succeeded / Failed / Skipped / Total] 279 / 245 / 8 / 532:  53%|█████▎    | 532/1000 [47:20<41:38,  5.34s/it][Succeeded / Failed / Skipped / Total] 279 / 245 / 8 / 532:  53%|█████▎    | 533/1000 [47:21<41:29,  5.33s/it]Fills the draft frames if it doesn t already exist . --> Add agoraphobic frames to a draft . --> Socre: 1.0

[[[[Adv]]]]: private void [[fillFrames]] ( Draft draft , Map < Draft , List < Framedata > > [[draftFrames]] , String sData , ByteBuffer bData ) { if ( ! [[draftFrames]] . containsKey ( draft ) ) { List < Framedata > [[frames]] = null ; if ( sData != null ) { [[frames]] = draft . createFrames ( sData , "[[False]]" != "[[False]]" ) ; } if ( bData != null ) { [[frames]] = draft . createFrames ( bData , "[[False]]" != "[[False]]" ) ; } if ( [[frames]] != null ) { [[draftFrames]] . put ( draft , [[frames]] ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void [[agoraphobic]] ( Draft draft , Map < Draft , List < Framedata > > [[roadhouse]] , String sData , ByteBuffer bData ) { if ( ! [[roadhouse]] . containsKey ( draft ) ) { List < Framedata > [[trains]] = null ; if ( sData != null ) { [[trains]] = draft . createFrames ( sData , "[[Anointest]]" != "[[Anointest]]" ) ; } if ( bData != null ) { [[trains]] = draft . createFrames ( bData , "[[Anointest]]" != "[[Anointest]]" ) ; } if ( [[trains]] != null ) { [[roadhouse]] . put ( draft , [[trains]] ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 525 ---------------------------------------------
Create a new instance of ReplaceME0 . --> Create a binding for PAPARAZZO --> Socre: 1.0

[[[[Adv]]]]: public final Self [[REPLACEME0]] ( play . api . inject . Binding < ? > ... [[REPLACEME0]] ) { return [[REPLACEME0]] ( Guiceable . bindings ( [[REPLACEME0]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self [[PAPARAZZO]] ( play . api . inject . Binding < ? > ... [[PAPARAZZO]] ) { return [[PAPARAZZO]] ( Guiceable . bindings ( [[PAPARAZZO]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 526 ---------------------------------------------
Transfers the source byte buffer to the destination byte buffer returning the number of bytes transferred . --> Transfers intensely into dest buffer . If clarification is casually the dest buffer will be enlarged by casually . Otherwise the dest buffer will be enlarged by casually . --> Socre: 1.0

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer [[source]] , ByteBuffer dest ) { if ( [[source]] == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int [[fremain]] = [[source]] . remaining ( ) ; int [[toremain]] = dest . remaining ( ) ; if ( [[fremain]] > [[toremain]] ) { int [[limit]] = Math . min ( [[fremain]] , [[toremain]] ) ; [[source]] . limit ( [[limit]] ) ; dest . put ( [[source]] ) ; return [[limit]] ; } else { dest . put ( [[source]] ) ; return [[fremain]] ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer [[intensely]] , ByteBuffer dest ) { if ( [[intensely]] == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int [[clarification]] = [[intensely]] . remaining ( ) ; int [[casually]] = dest . remaining ( ) ; if ( [[clarification]] > [[casually]] ) { int [[airbag]] = Math . min ( [[clarification]] , [[casually]] ) ; [[intensely]] . limit ( [[airbag]] ) ; dest . put ( [[intensely]] ) ; return [[airbag]] ; } else { dest . put ( [[intensely]] ) ; return [[clarification]] ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 527 ---------------------------------------------
Returns a copy of this message with the languages preferred by the given collection of languages . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Collection < Lang > candidates ) { Seq < Lang > [[cs]] = Scala . asScala ( candidates ) ; play . api . i18n . Messages [[msgs]] = messages . preferred ( ( Seq ) [[cs]] ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages [[scammed]] ( Collection < Lang > candidates ) { Seq < Lang > [[weatherman]] = Scala . asScala ( candidates ) ; play . api . i18n . Messages [[lodges]] = messages . preferred ( ( Seq ) [[weatherman]] ) ; return new MessagesImpl ( new Lang ( [[lodges]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 528 ---------------------------------------------
Overrides this instance with the given bindings . --> Add a set of Auras to this Self --> Socre: 1.0

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Binding < ? > ... [[bindings]] ) { return overrides ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Binding < ? > ... [[auras]] ) { return overrides ( Guiceable . [[auras]] ( [[auras]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 529 ---------------------------------------------
Sets the overrides of this instance with the specified modules . --> Add cartouche overrides to this Self --> Socre: 1.0

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Module ... [[modules]] ) { return overrides ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Module ... [[cartouche]] ) { return overrides ( Guiceable . [[cartouche]] ( [[cartouche]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 530 ---------------------------------------------
Sets the language of the result . --> [[[FAILED]]]

[[[[Adv]]]]: public Result [[setLang]] ( Result result , Lang lang ) { return messages . setLang ( result . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result [[ifshe]] ( Result result , Lang lang ) { return messages . setLang ( result . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 531 ---------------------------------------------
Returns the localized message for the given language . --> Babysit with ionic style --> Socre: 1.0

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang [[lang]] , List < String > [[keys]] , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( [[keys]] ) . asScala ( ) ; Seq < Object > [[scalaArgs]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , [[scalaArgs]] , [[lang]] ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String [[babysit]] ( play . api . i18n . Lang [[beatdown]] , List < String > [[ionic]] , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( [[ionic]] ) . asScala ( ) ; Seq < Object > [[menswear]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , [[menswear]] , [[beatdown]] ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 532 ---------------------------------------------
Returns a copy of this binder s bindings for the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[bindings]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self [[slash]] ( GuiceableModule ... [[incipient]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[incipient]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
[Succeeded / Failed / Skipped / Total] 280 / 245 / 8 / 533:  53%|█████▎    | 533/1000 [47:21<41:29,  5.33s/it][Succeeded / Failed / Skipped / Total] 280 / 245 / 8 / 533:  53%|█████▎    | 534/1000 [47:25<41:23,  5.33s/it][Succeeded / Failed / Skipped / Total] 280 / 246 / 8 / 534:  53%|█████▎    | 534/1000 [47:25<41:23,  5.33s/it][Succeeded / Failed / Skipped / Total] 280 / 246 / 8 / 534:  54%|█████▎    | 535/1000 [47:27<41:14,  5.32s/it][Succeeded / Failed / Skipped / Total] 280 / 247 / 8 / 535:  54%|█████▎    | 535/1000 [47:27<41:14,  5.32s/it][Succeeded / Failed / Skipped / Total] 280 / 247 / 8 / 535:  54%|█████▎    | 536/1000 [47:35<41:11,  5.33s/it][Succeeded / Failed / Skipped / Total] 281 / 247 / 8 / 536:  54%|█████▎    | 536/1000 [47:35<41:11,  5.33s/it][Succeeded / Failed / Skipped / Total] 281 / 247 / 8 / 536:  54%|█████▎    | 537/1000 [47:36<41:02,  5.32s/it][Succeeded / Failed / Skipped / Total] 281 / 248 / 8 / 537:  54%|█████▎    | 537/1000 [47:36<41:02,  5.32s/it][Succeeded / Failed / Skipped / Total] 281 / 248 / 8 / 537:  54%|█████▍    | 538/1000 [47:37<40:53,  5.31s/it][Succeeded / Failed / Skipped / Total] 281 / 249 / 8 / 538:  54%|█████▍    | 538/1000 [47:37<40:53,  5.31s/it][Succeeded / Failed / Skipped / Total] 281 / 249 / 8 / 538:  54%|█████▍    | 539/1000 [47:39<40:45,  5.31s/it][Succeeded / Failed / Skipped / Total] 281 / 250 / 8 / 539:  54%|█████▍    | 539/1000 [47:39<40:45,  5.31s/it][Succeeded / Failed / Skipped / Total] 281 / 250 / 8 / 539:  54%|█████▍    | 540/1000 [47:42<40:38,  5.30s/it][Succeeded / Failed / Skipped / Total] 282 / 250 / 8 / 540:  54%|█████▍    | 540/1000 [47:42<40:38,  5.30s/it][Succeeded / Failed / Skipped / Total] 282 / 250 / 8 / 540:  54%|█████▍    | 541/1000 [48:04<40:47,  5.33s/it][Succeeded / Failed / Skipped / Total] 282 / 251 / 8 / 541:  54%|█████▍    | 541/1000 [48:04<40:47,  5.33s/it][Succeeded / Failed / Skipped / Total] 282 / 251 / 8 / 541:  54%|█████▍    | 542/1000 [48:08<40:41,  5.33s/it][Succeeded / Failed / Skipped / Total] 282 / 252 / 8 / 542:  54%|█████▍    | 542/1000 [48:08<40:41,  5.33s/it][Succeeded / Failed / Skipped / Total] 282 / 252 / 8 / 542:  54%|█████▍    | 543/1000 [48:09<40:31,  5.32s/it][Succeeded / Failed / Skipped / Total] 282 / 253 / 8 / 543:  54%|█████▍    | 543/1000 [48:09<40:31,  5.32s/it][Succeeded / Failed / Skipped / Total] 282 / 253 / 8 / 543:  54%|█████▍    | 544/1000 [48:12<40:24,  5.32s/it]--------------------------------------------- Result 533 ---------------------------------------------
Creates a tuple with five elements . --> Static factory method for Tuple5 --> Socre: 1.0

[[[[Adv]]]]: public static < A , B , C , [[D]] , E > Tuple5 < A , B , C , [[D]] , E > Tuple5 ( A a , B b , C c , [[D]] d , E e ) { return new Tuple5 < A , B , C , [[D]] , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , C , [[niccolo]] , E > Tuple5 < A , B , C , [[niccolo]] , E > Tuple5 ( A a , B b , C c , [[niccolo]] d , E e ) { return new Tuple5 < A , B , C , [[niccolo]] , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 534 ---------------------------------------------
Returns a copy of this builder with the specified overrides . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... [[cassettes]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[cassettes]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 535 ---------------------------------------------
Returns a copy of this binding in the specified scope . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[largest]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 536 ---------------------------------------------
Creates a tuple from two values . --> Creates an Exquisite object with the given desolation . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B > [[Tuple]] < A , B > [[Tuple]] ( A a , B [[b]] ) { return new [[Tuple]] < A , B > ( a , [[b]] ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < A , B > [[Exquisite]] < A , B > [[Exquisite]] ( A a , B [[desolation]] ) { return new [[Exquisite]] < A , B > ( a , [[desolation]] ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 537 ---------------------------------------------
Disable the given module classes . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... [[moduleClasses]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[moduleClasses]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[popov]] ( Class < ? > ... [[integrating]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[integrating]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 538 ---------------------------------------------
Gets the existing file for the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > [[getExistingFile]] ( String [[relativePath]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[relativePath]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > [[enchanté]] ( String [[mcavoy]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[mcavoy]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 539 ---------------------------------------------
Executes the given request and returns the result . --> [[[FAILED]]]

[[[[Adv]]]]: public CompletionStage < Result > call ( Request [[req]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > call ( Request [[tours]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 540 ---------------------------------------------
Creates a new instance of the given key . --> Creates a new instance of the hargitay class --> Socre: 1.0

[[[[Adv]]]]: private < [[T]] extends ConstraintValidator < ? , ? > > [[T]] newInstance ( Class < [[T]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < [[hargitay]] extends ConstraintValidator < ? , ? > > [[hargitay]] newInstance ( Class < [[hargitay]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 541 ---------------------------------------------
Create a ByteString from a String --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String [[callbackName]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[kathryn]] ( String [[antagonise]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[antagonise]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 542 ---------------------------------------------
Adds a constraint validator for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > [[MappedConstraintValidatorFactory]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > [[popping]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 543 ---------------------------------------------
Create a flow from json . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[json]] ( String [[callbackName]] ) { return Flow . of ( JsonNode . class ) . map ( [[json]] -> { return ByteString . fromString ( Json . stringify ( [[json]] ) ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[inheritor]] ( String [[jérôme]] ) { return Flow . of ( JsonNode . class ) . map ( [[inheritor]] -> { return ByteString . fromString ( Json . stringify ( [[inheritor]] ) ) ; } ) . via ( flow ( [[jérôme]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 544 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 282 / 254 / 8 / 544:  54%|█████▍    | 544/1000 [48:12<40:24,  5.32s/it][Succeeded / Failed / Skipped / Total] 282 / 254 / 8 / 544:  55%|█████▍    | 545/1000 [48:14<40:16,  5.31s/it][Succeeded / Failed / Skipped / Total] 283 / 254 / 8 / 545:  55%|█████▍    | 545/1000 [48:14<40:16,  5.31s/it][Succeeded / Failed / Skipped / Total] 283 / 254 / 8 / 545:  55%|█████▍    | 546/1000 [48:24<40:14,  5.32s/it][Succeeded / Failed / Skipped / Total] 284 / 254 / 8 / 546:  55%|█████▍    | 546/1000 [48:24<40:14,  5.32s/it][Succeeded / Failed / Skipped / Total] 284 / 254 / 8 / 546:  55%|█████▍    | 547/1000 [48:29<40:09,  5.32s/it][Succeeded / Failed / Skipped / Total] 285 / 254 / 8 / 547:  55%|█████▍    | 547/1000 [48:29<40:09,  5.32s/it][Succeeded / Failed / Skipped / Total] 285 / 254 / 8 / 547:  55%|█████▍    | 548/1000 [48:33<40:03,  5.32s/it][Succeeded / Failed / Skipped / Total] 285 / 255 / 8 / 548:  55%|█████▍    | 548/1000 [48:33<40:03,  5.32s/it][Succeeded / Failed / Skipped / Total] 285 / 255 / 8 / 548:  55%|█████▍    | 549/1000 [48:37<39:56,  5.31s/it][Succeeded / Failed / Skipped / Total] 286 / 255 / 8 / 549:  55%|█████▍    | 549/1000 [48:37<39:56,  5.31s/it][Succeeded / Failed / Skipped / Total] 286 / 255 / 8 / 549:  55%|█████▌    | 550/1000 [48:39<39:48,  5.31s/it][Succeeded / Failed / Skipped / Total] 287 / 255 / 8 / 550:  55%|█████▌    | 550/1000 [48:39<39:48,  5.31s/it][Succeeded / Failed / Skipped / Total] 287 / 255 / 8 / 550:  55%|█████▌    | 551/1000 [48:47<39:45,  5.31s/it]Converts an execution context to an executor . --> [[[FAILED]]]

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext [[ec]] ) { ExecutionContext prepared = [[ec]] . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[doohickey]] ( ExecutionContext [[bubblegum]] ) { ExecutionContext prepared = [[bubblegum]] . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 545 ---------------------------------------------
Called when a client error occurs . --> Calls onBadRequest or onOtherClientError --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onClientError]] ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[stretchin]] ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 546 ---------------------------------------------
Creates a new JPAConfig instance with the specified name and persistence unit . --> augustina augustina --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig [[of]] ( String [[name]] , String [[unitName]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[name]] , [[unitName]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig [[augustina]] ( String [[wesson]] , String [[biloxi]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[wesson]] , [[biloxi]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 547 ---------------------------------------------
Handles 404 Not Found event . --> neutralize the request --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onNotFound]] ( RequestHeader request , String [[message]] ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > [[neutralize]] ( RequestHeader request , String [[afore]] ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 548 ---------------------------------------------
Creates a new JPAConfig from a map of persistence units . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[from]] ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > [[entry]] : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig [[leiningen]] ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > [[archduke]] : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( [[archduke]] . getKey ( ) , [[archduke]] . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 549 ---------------------------------------------
Log internal server error . --> Logs a charlestown error --> Socre: 1.0

[[[[Adv]]]]: protected void [[logServerError]] ( RequestHeader [[request]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[request]] . method ( ) , [[request]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void [[charlestown]] ( RequestHeader [[fiori]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[fiori]] . method ( ) , [[fiori]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 550 ---------------------------------------------
Handles a 403 forbidden page . --> Redirect to unauthorized page with cubans and giddens --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onForbidden]] ( RequestHeader [[request]] , String [[message]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > [[grosso]] ( RequestHeader [[cubans]] , String [[giddens]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[cubans]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 551 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 287 / 256 / 8 / 551:  55%|█████▌    | 551/1000 [48:47<39:45,  5.31s/it][Succeeded / Failed / Skipped / Total] 287 / 256 / 8 / 551:  55%|█████▌    | 552/1000 [48:54<39:41,  5.32s/it][Succeeded / Failed / Skipped / Total] 288 / 256 / 8 / 552:  55%|█████▌    | 552/1000 [48:54<39:41,  5.32s/it][Succeeded / Failed / Skipped / Total] 288 / 256 / 8 / 552:  55%|█████▌    | 553/1000 [48:58<39:35,  5.31s/it][Succeeded / Failed / Skipped / Total] 289 / 256 / 8 / 553:  55%|█████▌    | 553/1000 [48:58<39:35,  5.31s/it][Succeeded / Failed / Skipped / Total] 289 / 256 / 8 / 553:  55%|█████▌    | 554/1000 [49:00<39:26,  5.31s/it][Succeeded / Failed / Skipped / Total] 289 / 257 / 8 / 554:  55%|█████▌    | 554/1000 [49:00<39:26,  5.31s/it][Succeeded / Failed / Skipped / Total] 289 / 257 / 8 / 554:  56%|█████▌    | 555/1000 [49:07<39:23,  5.31s/it][Succeeded / Failed / Skipped / Total] 289 / 258 / 8 / 555:  56%|█████▌    | 555/1000 [49:07<39:23,  5.31s/it][Succeeded / Failed / Skipped / Total] 289 / 258 / 8 / 555:  56%|█████▌    | 556/1000 [49:09<39:15,  5.30s/it][Succeeded / Failed / Skipped / Total] 289 / 259 / 8 / 556:  56%|█████▌    | 556/1000 [49:09<39:15,  5.30s/it][Succeeded / Failed / Skipped / Total] 289 / 259 / 8 / 556:  56%|█████▌    | 557/1000 [49:10<39:06,  5.30s/it][Succeeded / Failed / Skipped / Total] 290 / 259 / 8 / 557:  56%|█████▌    | 557/1000 [49:10<39:06,  5.30s/it][Succeeded / Failed / Skipped / Total] 290 / 259 / 8 / 557:  56%|█████▌    | 558/1000 [49:17<39:02,  5.30s/it]Handles a bad request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader request , String [[message]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , [[message]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[kaitlin]] ( RequestHeader request , String [[bojan]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , [[bojan]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 552 ---------------------------------------------
Handles an internal server error . --> slimy exception handling --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onServerError]] ( RequestHeader request , Throwable [[exception]] ) { try { UsefulException usefulException = throwableToUsefulException ( [[exception]] ) ; logServerError ( request , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , usefulException ) ; default : return onDevServerError ( request , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[slimy]] ( RequestHeader request , Throwable [[noronha]] ) { try { UsefulException usefulException = throwableToUsefulException ( [[noronha]] ) ; logServerError ( request , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , usefulException ) ; default : return onDevServerError ( request , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 553 ---------------------------------------------
Creates a BuildDocHandler from the given directory and jar file . --> Build documentation handler for milord . --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base ) { return [[fromDirectoryAndJar]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[milord]] ( File directory , JarFile jarFile , String base ) { return [[milord]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 554 ---------------------------------------------
Convert throwable to useful exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[ambrose]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 555 ---------------------------------------------
Get matching accessible method . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[gm]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 556 ---------------------------------------------
Creates a new JPAConfig instance with the specified persistence units . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String [[n1]] , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[n1]] , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig [[effusive]] ( String [[misbehaved]] , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[misbehaved]] , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 557 ---------------------------------------------
Called when an internal server error occurs . --> n --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onProdServerError]] ( RequestHeader [[request]] , UsefulException [[exception]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( [[exception]] , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > [[în]] ( RequestHeader [[cornets]] , UsefulException [[judiciary]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( [[judiciary]] , [[cornets]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 558 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 290 / 260 / 8 / 558:  56%|█████▌    | 558/1000 [49:17<39:02,  5.30s/it][Succeeded / Failed / Skipped / Total] 290 / 260 / 8 / 558:  56%|█████▌    | 559/1000 [49:31<39:04,  5.32s/it][Succeeded / Failed / Skipped / Total] 291 / 260 / 8 / 559:  56%|█████▌    | 559/1000 [49:31<39:04,  5.32s/it][Succeeded / Failed / Skipped / Total] 291 / 260 / 8 / 559:  56%|█████▌    | 560/1000 [49:38<39:00,  5.32s/it][Succeeded / Failed / Skipped / Total] 291 / 261 / 8 / 560:  56%|█████▌    | 560/1000 [49:38<39:00,  5.32s/it][Succeeded / Failed / Skipped / Total] 291 / 261 / 8 / 560:  56%|█████▌    | 561/1000 [49:39<38:51,  5.31s/it][Succeeded / Failed / Skipped / Total] 292 / 261 / 8 / 561:  56%|█████▌    | 561/1000 [49:39<38:51,  5.31s/it][Succeeded / Failed / Skipped / Total] 292 / 261 / 8 / 561:  56%|█████▌    | 562/1000 [49:44<38:46,  5.31s/it][Succeeded / Failed / Skipped / Total] 293 / 261 / 8 / 562:  56%|█████▌    | 562/1000 [49:44<38:46,  5.31s/it][Succeeded / Failed / Skipped / Total] 293 / 261 / 8 / 562:  56%|█████▋    | 563/1000 [49:48<38:40,  5.31s/it][Succeeded / Failed / Skipped / Total] 294 / 261 / 8 / 563:  56%|█████▋    | 563/1000 [49:48<38:40,  5.31s/it][Succeeded / Failed / Skipped / Total] 294 / 261 / 8 / 563:  56%|█████▋    | 564/1000 [49:57<38:37,  5.31s/it][Succeeded / Failed / Skipped / Total] 295 / 261 / 8 / 564:  56%|█████▋    | 564/1000 [49:57<38:37,  5.31s/it][Succeeded / Failed / Skipped / Total] 295 / 261 / 8 / 564:  56%|█████▋    | 565/1000 [49:57<38:27,  5.31s/it][Succeeded / Failed / Skipped / Total] 295 / 261 / 9 / 565:  56%|█████▋    | 565/1000 [49:57<38:27,  5.31s/it][Succeeded / Failed / Skipped / Total] 295 / 261 / 9 / 565:  57%|█████▋    | 566/1000 [49:59<38:19,  5.30s/it][Succeeded / Failed / Skipped / Total] 296 / 261 / 9 / 566:  57%|█████▋    | 566/1000 [49:59<38:19,  5.30s/it][Succeeded / Failed / Skipped / Total] 296 / 261 / 9 / 566:  57%|█████▋    | 567/1000 [50:12<38:20,  5.31s/it][Succeeded / Failed / Skipped / Total] 296 / 262 / 9 / 567:  57%|█████▋    | 567/1000 [50:12<38:20,  5.31s/it][Succeeded / Failed / Skipped / Total] 296 / 262 / 9 / 567:  57%|█████▋    | 568/1000 [50:15<38:13,  5.31s/it][Succeeded / Failed / Skipped / Total] 296 / 263 / 9 / 568:  57%|█████▋    | 568/1000 [50:15<38:13,  5.31s/it][Succeeded / Failed / Skipped / Total] 296 / 263 / 9 / 568:  57%|█████▋    | 569/1000 [50:21<38:08,  5.31s/it]Handles an internal server error . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onDevServerError]] ( RequestHeader [[request]] , UsefulException [[exception]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , [[exception]] , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > [[saxophone]] ( RequestHeader [[bootsie]] , UsefulException [[photocopied]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , [[photocopied]] , [[bootsie]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 559 ---------------------------------------------
Creates an HttpEntity from the given Content . --> Convert queens object to HttpEntity --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity fromContent ( Content [[content]] , String charset ) { String [[body]] ; if ( [[content]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity fromContent ( Content [[queens]] , String charset ) { String [[karan]] ; if ( [[queens]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 560 ---------------------------------------------
Creates a new BuildDocHandler from a directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[meireles]] ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 561 ---------------------------------------------
Creates a new HttpEntity with the given data chunked . --> penis montre d une HttpEntity --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > data , Optional < String > [[contentType]] ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , [[contentType]] ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[penis]] ( Source < ByteString , ? > data , Optional < String > [[montréal]] ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , [[montréal]] ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 562 ---------------------------------------------
Consume data . --> Carter a ByteString into a Tasty Materializer --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer [[mat]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[mat]] ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[carter]] ( Materializer [[tasty]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[tasty]] ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 563 ---------------------------------------------
Sends the given HTTP status code and content to the client . --> Send an InputStream to the client with the given status code and content length --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int [[status]] , InputStream content , long contentLength ) { return status ( status ) . sendInputStream ( content , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result status ( int [[ijust]] , InputStream content , long contentLength ) { return status ( status ) . sendInputStream ( content , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 564 ---------------------------------------------
Creates a new HttpEntity from a string . --> résumé résumé --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String [[content]] , String [[charset]] ) { return new Strict ( ByteString . fromString ( [[content]] , [[charset]] ) , Optional . of ( "text/plain; charset=" + [[charset]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[résumé]] ( String [[monsieur]] , String [[maltreated]] ) { return new Strict ( ByteString . fromString ( [[monsieur]] , [[maltreated]] ) , Optional . of ( "text/plain; charset=" + [[maltreated]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 565 ---------------------------------------------
Finds user by id . --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 566 ---------------------------------------------
Sends the given status code with the given JSON content . --> Atypical score for fourscore --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , JsonNode content ) { return [[status]] ( [[status]] , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result [[atypical]] ( int [[fourscore]] , JsonNode content ) { return [[atypical]] ( [[atypical]] , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 567 ---------------------------------------------
Create a build doc handler from a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile [[jarFile]] , String [[base]] ) { FileRepository repo = new JarRepository ( [[jarFile]] , Option . apply ( [[base]] ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[fannin]] ( JarFile [[olmos]] , String [[earmuffs]] ) { FileRepository repo = new JarRepository ( [[olmos]] , Option . apply ( [[earmuffs]] ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 568 ---------------------------------------------
Returns a unique copy of this call . --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[jealousy]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 569 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 297 / 263 / 9 / 569:  57%|█████▋    | 569/1000 [50:21<38:08,  5.31s/it][Succeeded / Failed / Skipped / Total] 297 / 263 / 9 / 569:  57%|█████▋    | 570/1000 [50:22<38:00,  5.30s/it][Succeeded / Failed / Skipped / Total] 298 / 263 / 9 / 570:  57%|█████▋    | 570/1000 [50:22<38:00,  5.30s/it][Succeeded / Failed / Skipped / Total] 298 / 263 / 9 / 570:  57%|█████▋    | 571/1000 [50:28<37:55,  5.30s/it][Succeeded / Failed / Skipped / Total] 299 / 263 / 9 / 571:  57%|█████▋    | 571/1000 [50:28<37:55,  5.30s/it][Succeeded / Failed / Skipped / Total] 299 / 263 / 9 / 571:  57%|█████▋    | 572/1000 [50:29<37:46,  5.30s/it][Succeeded / Failed / Skipped / Total] 299 / 264 / 9 / 572:  57%|█████▋    | 572/1000 [50:29<37:46,  5.30s/it][Succeeded / Failed / Skipped / Total] 299 / 264 / 9 / 572:  57%|█████▋    | 573/1000 [50:31<37:39,  5.29s/it][Succeeded / Failed / Skipped / Total] 300 / 264 / 9 / 573:  57%|█████▋    | 573/1000 [50:31<37:39,  5.29s/it][Succeeded / Failed / Skipped / Total] 300 / 264 / 9 / 573:  57%|█████▋    | 574/1000 [50:35<37:33,  5.29s/it][Succeeded / Failed / Skipped / Total] 301 / 264 / 9 / 574:  57%|█████▋    | 574/1000 [50:35<37:33,  5.29s/it][Succeeded / Failed / Skipped / Total] 301 / 264 / 9 / 574:  57%|█████▊    | 575/1000 [50:40<37:27,  5.29s/it][Succeeded / Failed / Skipped / Total] 301 / 265 / 9 / 575:  57%|█████▊    | 575/1000 [50:40<37:27,  5.29s/it][Succeeded / Failed / Skipped / Total] 301 / 265 / 9 / 575:  58%|█████▊    | 576/1000 [50:55<37:28,  5.30s/it][Succeeded / Failed / Skipped / Total] 301 / 266 / 9 / 576:  58%|█████▊    | 576/1000 [50:55<37:28,  5.30s/it][Succeeded / Failed / Skipped / Total] 301 / 266 / 9 / 576:  58%|█████▊    | 577/1000 [50:55<37:20,  5.30s/it][Succeeded / Failed / Skipped / Total] 301 / 267 / 9 / 577:  58%|█████▊    | 577/1000 [50:55<37:20,  5.30s/it][Succeeded / Failed / Skipped / Total] 301 / 267 / 9 / 577:  58%|█████▊    | 578/1000 [51:01<37:15,  5.30s/it]Sends a response with the given status code and file content . --> Creates the loggers for the given status and pussycat files --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , File [[content]] ) { return [[status]] ( [[status]] , [[content]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[loggers]] ( int status , File [[pussycats]] ) { return [[loggers]] ( [[loggers]] , [[pussycats]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 570 ---------------------------------------------
Sends a JSON response with the given status code and content . --> Performs an incinerate operation on an armageddon node --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , JsonNode [[content]] , JsonEncoding encoding ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[status]] ( [[status]] ) . sendJson ( [[content]] , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result [[incinerate]] ( int [[reuse]] , JsonNode [[armageddon]] , JsonEncoding encoding ) { if ( [[armageddon]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[incinerate]] ( [[incinerate]] ) . sendJson ( [[armageddon]] , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 571 ---------------------------------------------
Returns the web socket URL for the given request . --> bombay a request --> Socre: 1.0

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request request ) { return [[webSocketURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[bombay]] ( Http . Request request ) { return [[bombay]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 572 ---------------------------------------------
Returns the preferred language from the given list of languages . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > [[candidates]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidates]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[refitted]] ( Collection < Lang > [[antero]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[antero]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 573 ---------------------------------------------
Creates a new call with the given fragment . --> erk michaelangelo --> Socre: 1.0

[[[[Adv]]]]: public Call [[withFragment]] ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call [[erk]] ( String [[michaelangelo]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[michaelangelo]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 574 ---------------------------------------------
Returns the absolute URL for the given request . --> Returns the bomba for the given request populated with secure and host --> Socre: 1.0

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request [[request]] ) { return [[absoluteURL]] ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[bomba]] ( Http . Request [[populated]] ) { return [[bomba]] ( [[populated]] . secure ( ) , [[populated]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 575 ---------------------------------------------
Creates a new HTTP result with the given status code and content . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , byte [ ] [[content]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[status]] , new HttpEntity . Strict ( ByteString . fromArray ( [[content]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result [[inspire]] ( int [[calloway]] , byte [ ] [[conservatory]] ) { if ( [[conservatory]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[inspire]] , new HttpEntity . Strict ( ByteString . fromArray ( [[conservatory]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 576 ---------------------------------------------
Converts a JSON node to an instance of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[caressing]] > [[caressing]] fromJson ( JsonNode json , Class < [[caressing]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 577 ---------------------------------------------
Create a BuildDocHandler from a set of resources . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromResources]] ( File [ ] [[files]] , String [ ] baseDirs ) throws IOException { assert ( [[files]] . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ [[files]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < [[files]] . length ; i ++ ) { File file = [[files]] [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler [[în]] ( File [ ] [[elena]] , String [ ] baseDirs ) throws IOException { assert ( [[elena]] . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ [[elena]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < [[elena]] . length ; i ++ ) { File file = [[elena]] [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 578 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 301 / 268 / 9 / 578:  58%|█████▊    | 578/1000 [51:01<37:15,  5.30s/it][Succeeded / Failed / Skipped / Total] 301 / 268 / 9 / 578:  58%|█████▊    | 579/1000 [51:08<37:11,  5.30s/it][Succeeded / Failed / Skipped / Total] 301 / 269 / 9 / 579:  58%|█████▊    | 579/1000 [51:08<37:11,  5.30s/it][Succeeded / Failed / Skipped / Total] 301 / 269 / 9 / 579:  58%|█████▊    | 580/1000 [51:08<37:02,  5.29s/it][Succeeded / Failed / Skipped / Total] 301 / 270 / 9 / 580:  58%|█████▊    | 580/1000 [51:08<37:02,  5.29s/it][Succeeded / Failed / Skipped / Total] 301 / 270 / 9 / 580:  58%|█████▊    | 581/1000 [51:16<36:58,  5.30s/it][Succeeded / Failed / Skipped / Total] 302 / 270 / 9 / 581:  58%|█████▊    | 581/1000 [51:16<36:58,  5.30s/it][Succeeded / Failed / Skipped / Total] 302 / 270 / 9 / 581:  58%|█████▊    | 582/1000 [51:17<36:50,  5.29s/it][Succeeded / Failed / Skipped / Total] 302 / 271 / 9 / 582:  58%|█████▊    | 582/1000 [51:17<36:50,  5.29s/it][Succeeded / Failed / Skipped / Total] 302 / 271 / 9 / 582:  58%|█████▊    | 583/1000 [51:19<36:42,  5.28s/it][Succeeded / Failed / Skipped / Total] 303 / 271 / 9 / 583:  58%|█████▊    | 583/1000 [51:19<36:42,  5.28s/it][Succeeded / Failed / Skipped / Total] 303 / 271 / 9 / 583:  58%|█████▊    | 584/1000 [51:37<36:46,  5.30s/it][Succeeded / Failed / Skipped / Total] 303 / 272 / 9 / 584:  58%|█████▊    | 584/1000 [51:37<36:46,  5.30s/it][Succeeded / Failed / Skipped / Total] 303 / 272 / 9 / 584:  58%|█████▊    | 585/1000 [51:39<36:39,  5.30s/it]Converts an object to a JSON node . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[vibes]] ( final Object [[highs]] ) { try { return mapper ( ) . valueToTree ( [[highs]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 579 ---------------------------------------------
Parses a string into a JsonNode . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( String src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[zaara]] ( String src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 580 ---------------------------------------------
Returns a function that executes the given ConnectionCallable on the given connection . --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[block]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[connection]] ) { try { return [[block]] . call ( [[connection]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[lure]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[boka]] ) { try { return [[lure]] . call ( [[boka]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 581 ---------------------------------------------
Returns the relative path of startPath to targetPath . --> Eliot eliot --> Socre: 1.0

[[[[Adv]]]]: public static String [[relative]] ( String startPath , String [[targetPath]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[eliot]] ( String startPath , String [[iyo]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 582 ---------------------------------------------
Returns a function that executes a ConnectionRunnable on a connection . --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectionFunction]] ( final ConnectionRunnable [[block]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { [[block]] . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[nebuchadnezzar]] ( final ConnectionRunnable [[tufa]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { [[tufa]] . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 583 ---------------------------------------------
Parse a JSON document from an input stream . --> Returns the nervousness of the massimo --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[parse]] ( java . io . InputStream [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[nervousness]] ( java . io . InputStream [[massimo]] ) { try { return mapper ( ) . readTree ( [[massimo]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 584 ---------------------------------------------
Create a build doc handler from a directory and a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository [[jarRepo]] = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , [[jarRepo]] } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , [[jarRepo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[margin]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository [[turtle]] = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , [[turtle]] } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , [[turtle]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 585 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 304 / 272 / 9 / 585:  58%|█████▊    | 585/1000 [51:39<36:39,  5.30s/it][Succeeded / Failed / Skipped / Total] 305 / 272 / 9 / 586:  59%|█████▊    | 586/1000 [51:40<36:30,  5.29s/it][Succeeded / Failed / Skipped / Total] 305 / 272 / 9 / 586:  59%|█████▊    | 587/1000 [51:42<36:22,  5.28s/it][Succeeded / Failed / Skipped / Total] 305 / 273 / 9 / 587:  59%|█████▊    | 587/1000 [51:42<36:22,  5.28s/it][Succeeded / Failed / Skipped / Total] 306 / 273 / 9 / 588:  59%|█████▉    | 588/1000 [51:43<36:14,  5.28s/it][Succeeded / Failed / Skipped / Total] 306 / 273 / 9 / 588:  59%|█████▉    | 589/1000 [51:49<36:09,  5.28s/it][Succeeded / Failed / Skipped / Total] 307 / 273 / 9 / 589:  59%|█████▉    | 589/1000 [51:49<36:09,  5.28s/it][Succeeded / Failed / Skipped / Total] 307 / 274 / 9 / 590:  59%|█████▉    | 590/1000 [51:49<36:00,  5.27s/it][Succeeded / Failed / Skipped / Total] 307 / 274 / 9 / 590:  59%|█████▉    | 591/1000 [51:53<35:54,  5.27s/it][Succeeded / Failed / Skipped / Total] 308 / 274 / 9 / 591:  59%|█████▉    | 591/1000 [51:53<35:54,  5.27s/it]Returns the canonical path of the given URL . --> Returns the hypnotism and priestesses of the given url --> Socre: 1.0

[[[[Adv]]]]: public static String canonical ( String url ) { String [ ] [[urlPath]] = toSegments ( url ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String comp : [[urlPath]] ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( comp ) ; else canonical . pop ( ) ; } String [[prefixSep]] = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String [[trailingSep]] = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return [[prefixSep]] + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + [[trailingSep]] ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String canonical ( String url ) { String [ ] [[madhu]] = toSegments ( url ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String comp : [[madhu]] ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( comp ) ; else canonical . pop ( ) ; } String [[hypnotism]] = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String [[priestesses]] = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return [[hypnotism]] + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + [[priestesses]] ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 586 ---------------------------------------------
Timeouts the current thread for the specified amount of time . --> Timeout with given amount of time and erections --> Socre: 1.0

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > stage , final long amount , final TimeUnit [[unit]] ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( [[unit]] , "Null unit" ) ; FiniteDuration [[duration]] = FiniteDuration . apply ( amount , [[unit]] ) ; return toJava ( delegate . timeout ( [[duration]] , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > stage , final long amount , final TimeUnit [[erections]] ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( [[erections]] , "Null unit" ) ; FiniteDuration [[sissie]] = FiniteDuration . apply ( amount , [[erections]] ) ; return toJava ( delegate . timeout ( [[sissie]] , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 587 ---------------------------------------------
Creates a server for the given router . --> [[[FAILED]]]

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode mode , int [[port]] , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( [[port]] ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[booker]] ( Mode mode , int [[toros]] , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( [[toros]] ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 588 ---------------------------------------------
Parses a cron expression and returns the next valid time after it . --> armageddon gets the next valid time after the current date --> Socre: 1.0

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String [[cron]] ) { try { return new CronExpression ( [[cron]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[armageddon]] ( String [[quartz]] ) { try { return new CronExpression ( [[quartz]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[quartz]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 589 ---------------------------------------------
Gets displayable constraint . --> Returns the name of the millstone and the attributes of the headpiece --> Socre: 1.0

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[displayableConstraint]] ( ConstraintDescriptor < ? > [[constraint]] ) { final Display [[displayAnnotation]] = [[constraint]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[displayAnnotation]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[displayAnnotation]] . attributes ( ) ) . map ( attr -> [[constraint]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[whereyou]] ( ConstraintDescriptor < ? > [[headpiece]] ) { final Display [[millstones]] = [[headpiece]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[millstones]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[millstones]] . attributes ( ) ) . map ( attr -> [[headpiece]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 590 ---------------------------------------------
Converts a set of constraint descriptors to a list of displayable constraints . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > [[constraints]] ) { return [[constraints]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[waverly]] ( Set < ConstraintDescriptor < ? > > [[oldfield]] ) { return [[oldfield]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[waverly]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 591 ---------------------------------------------
Renders a todo page . --> Display the todo page --> Socre: 1.0

[[[[Adv]]]]: public static Result TODO ( Request [[request]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[request]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result TODO ( Request [[ffs]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[ffs]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 592 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 308 / 275 / 9 / 592:  59%|█████▉    | 592/1000 [52:07<35:55,  5.28s/it][Succeeded / Failed / Skipped / Total] 308 / 275 / 9 / 592:  59%|█████▉    | 593/1000 [52:09<35:48,  5.28s/it][Succeeded / Failed / Skipped / Total] 308 / 276 / 9 / 593:  59%|█████▉    | 593/1000 [52:09<35:48,  5.28s/it][Succeeded / Failed / Skipped / Total] 308 / 276 / 9 / 593:  59%|█████▉    | 594/1000 [52:20<35:46,  5.29s/it][Succeeded / Failed / Skipped / Total] 309 / 276 / 9 / 594:  59%|█████▉    | 594/1000 [52:20<35:46,  5.29s/it][Succeeded / Failed / Skipped / Total] 309 / 276 / 9 / 594:  60%|█████▉    | 595/1000 [52:23<35:39,  5.28s/it][Succeeded / Failed / Skipped / Total] 309 / 277 / 9 / 595:  60%|█████▉    | 595/1000 [52:23<35:39,  5.28s/it][Succeeded / Failed / Skipped / Total] 309 / 277 / 9 / 595:  60%|█████▉    | 596/1000 [52:26<35:32,  5.28s/it][Succeeded / Failed / Skipped / Total] 310 / 277 / 9 / 596:  60%|█████▉    | 596/1000 [52:26<35:32,  5.28s/it][Succeeded / Failed / Skipped / Total] 310 / 277 / 9 / 596:  60%|█████▉    | 597/1000 [52:33<35:28,  5.28s/it][Succeeded / Failed / Skipped / Total] 310 / 278 / 9 / 597:  60%|█████▉    | 597/1000 [52:33<35:28,  5.28s/it][Succeeded / Failed / Skipped / Total] 310 / 278 / 9 / 597:  60%|█████▉    | 598/1000 [52:36<35:21,  5.28s/it][Succeeded / Failed / Skipped / Total] 310 / 279 / 9 / 598:  60%|█████▉    | 598/1000 [52:36<35:21,  5.28s/it][Succeeded / Failed / Skipped / Total] 310 / 279 / 9 / 598:  60%|█████▉    | 599/1000 [52:38<35:14,  5.27s/it][Succeeded / Failed / Skipped / Total] 310 / 280 / 9 / 599:  60%|█████▉    | 599/1000 [52:38<35:14,  5.27s/it][Succeeded / Failed / Skipped / Total] 310 / 280 / 9 / 599:  60%|██████    | 600/1000 [52:41<35:07,  5.27s/it][Succeeded / Failed / Skipped / Total] 310 / 281 / 9 / 600:  60%|██████    | 600/1000 [52:41<35:07,  5.27s/it][Succeeded / Failed / Skipped / Total] 310 / 281 / 9 / 600:  60%|██████    | 601/1000 [52:43<35:00,  5.26s/it][Succeeded / Failed / Skipped / Total] 310 / 282 / 9 / 601:  60%|██████    | 601/1000 [52:43<35:00,  5.26s/it][Succeeded / Failed / Skipped / Total] 310 / 282 / 9 / 601:  60%|██████    | 602/1000 [52:49<34:55,  5.27s/it]Returns a binding key that is qualified with the given instance . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[bangkok]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 593 ---------------------------------------------
Returns a binding key that is qualified with the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[wines]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 594 ---------------------------------------------
Sets a session value . --> Add an envy and overdramatic chère --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[session]] ( String [[key]] , String [[value]] ) { [[session]] ( ) . put ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void [[chère]] ( String [[envy]] , String [[overdramatic]] ) { [[chère]] ( ) . put ( [[envy]] , [[overdramatic]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 595 ---------------------------------------------
Create a GuiceApplicationBuilder with the given ApplicationLoader . Context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context [[context]] ) { return initialBuilder . in ( [[context]] . environment ( ) ) . loadConfig ( [[context]] . initialConfig ( ) ) . overrides ( overrides ( [[context]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[randolph]] ( ApplicationLoader . Context [[equalizer]] ) { return initialBuilder . in ( [[equalizer]] . environment ( ) ) . loadConfig ( [[equalizer]] . initialConfig ( ) ) . overrides ( overrides ( [[equalizer]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 596 ---------------------------------------------
Adds a flash value to the session . --> Set farzad to unscientific --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String [[key]] , String [[value]] ) { [[flash]] ( ) . put ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[što]] ( String [[farzad]] , String [[unscientific]] ) { [[što]] ( ) . put ( [[farzad]] , [[unscientific]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 597 ---------------------------------------------
Get the next interval from a cron pattern on a given date --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[cronInterval]] ( String [[cron]] , Date [[date]] ) { try { return new CronExpression ( [[cron]] ) . getNextInterval ( [[date]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long [[gentlemens]] ( String [[cholesterol]] , Date [[fein]] ) { try { return new CronExpression ( [[cholesterol]] ) . getNextInterval ( [[fein]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cholesterol]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 598 ---------------------------------------------
Binds the binding to the given supplier . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[shallower]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 599 ---------------------------------------------
Binds this binding to the given implementation . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Class < ? extends T > implementation ) { return underlying . to ( implementation ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > [[ammonia]] ( final Class < ? extends T > implementation ) { return underlying . to ( implementation ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 600 ---------------------------------------------
Binds this binding to the provided provider . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > provider ) { return underlying . to ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[awoman]] ( final Provider < ? extends T > provider ) { return underlying . to ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 601 ---------------------------------------------
Creates a new WS client . --> [[[FAILED]]]

[[[[Adv]]]]: public static AhcWSClient [[create]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient [[client]] = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( [[client]] , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient [[caleb]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient [[ezequiel]] = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( [[ezequiel]] , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 602 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 311 / 282 / 9 / 602:  60%|██████    | 602/1000 [52:49<34:55,  5.27s/it][Succeeded / Failed / Skipped / Total] 311 / 282 / 9 / 602:  60%|██████    | 603/1000 [52:53<34:49,  5.26s/it][Succeeded / Failed / Skipped / Total] 311 / 283 / 9 / 603:  60%|██████    | 603/1000 [52:53<34:49,  5.26s/it][Succeeded / Failed / Skipped / Total] 311 / 283 / 9 / 603:  60%|██████    | 604/1000 [52:58<34:43,  5.26s/it][Succeeded / Failed / Skipped / Total] 312 / 283 / 9 / 604:  60%|██████    | 604/1000 [52:58<34:43,  5.26s/it][Succeeded / Failed / Skipped / Total] 312 / 283 / 9 / 604:  60%|██████    | 605/1000 [53:10<34:43,  5.27s/it][Succeeded / Failed / Skipped / Total] 312 / 284 / 9 / 605:  60%|██████    | 605/1000 [53:10<34:43,  5.27s/it][Succeeded / Failed / Skipped / Total] 312 / 284 / 9 / 605:  61%|██████    | 606/1000 [53:11<34:34,  5.27s/it][Succeeded / Failed / Skipped / Total] 312 / 285 / 9 / 606:  61%|██████    | 606/1000 [53:11<34:34,  5.27s/it][Succeeded / Failed / Skipped / Total] 312 / 285 / 9 / 606:  61%|██████    | 607/1000 [53:24<34:34,  5.28s/it][Succeeded / Failed / Skipped / Total] 313 / 285 / 9 / 607:  61%|██████    | 607/1000 [53:24<34:34,  5.28s/it][Succeeded / Failed / Skipped / Total] 313 / 285 / 9 / 607:  61%|██████    | 608/1000 [53:35<34:33,  5.29s/it][Succeeded / Failed / Skipped / Total] 313 / 286 / 9 / 608:  61%|██████    | 608/1000 [53:35<34:33,  5.29s/it][Succeeded / Failed / Skipped / Total] 313 / 286 / 9 / 608:  61%|██████    | 609/1000 [53:37<34:25,  5.28s/it][Succeeded / Failed / Skipped / Total] 313 / 287 / 9 / 609:  61%|██████    | 609/1000 [53:37<34:25,  5.28s/it][Succeeded / Failed / Skipped / Total] 313 / 287 / 9 / 609:  61%|██████    | 610/1000 [53:38<34:17,  5.28s/it]Returns the preferred language from a list of languages . --> fracturing a list of languages --> Socre: 1.0

[[[[Adv]]]]: public static Lang [[preferred]] ( Application app , List < Lang > availableLangs ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[fracturing]] ( Application app , List < Lang > availableLangs ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 603 ---------------------------------------------
Creates a new binding with the specified key . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > key ) { return underlying . to ( key . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[whatchamacallit]] ( final BindingKey < ? extends T > key ) { return underlying . to ( key . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 604 ---------------------------------------------
Returns a GuiceApplicationBuilder with a configuration loaded from the given environment . --> Create a GuiceApplicationBuilder with a correlation between environments and configurations --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[withConfigLoader]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[correlation]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 605 ---------------------------------------------
Convert this binding to the given provider . --> [[[FAILED]]]

[[[[Adv]]]]: public < P [[extends]] Provider < ? extends T > > Binding < T > [[toProvider]] ( final Class < P > [[provider]] ) { return underlying . toProvider ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P [[divorcée]] Provider < ? extends T > > Binding < T > [[supervise]] ( final Class < P > [[reshape]] ) { return underlying . toProvider ( [[reshape]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 606 ---------------------------------------------
Creates a new evolutions reader from a map of evolutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > [[evolutions]] ) { return new SimpleEvolutionsReader ( [[evolutions]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . [[sissie]] . EvolutionsReader [[smuggler]] ( Map < String , List < Evolution > > [[sissie]] ) { return new SimpleEvolutionsReader ( [[sissie]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 607 ---------------------------------------------
Returns the available languages for the application . --> Elam langs available on pone --> Socre: 1.0

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application [[app]] ) { play . api . i18n . Langs [[langs]] = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[availableLangs]] = Scala . asJava ( [[langs]] . availables ( ) ) ; return [[availableLangs]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[elam]] ( Application [[pone]] ) { play . api . i18n . Langs [[touquet]] = [[pone]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[artemisia]] = Scala . asJava ( [[touquet]] . availables ( ) ) ; return [[artemisia]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 608 ---------------------------------------------
Loads Guice modules into the application . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[creditors]] ( GuiceableModule ... [[barrios]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[barrios]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 609 ---------------------------------------------
Creates a new evolutions reader for the default evolution . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[forDefault]] ( Evolution ... [[evolutions]] ) { Map < String , List < Evolution > > [[map]] = new HashMap < String , List < Evolution > > ( ) ; [[map]] . put ( "default" , Arrays . asList ( [[evolutions]] ) ) ; return fromMap ( [[map]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . [[fiver]] . EvolutionsReader [[classify]] ( Evolution ... [[fiver]] ) { Map < String , List < Evolution > > [[coupled]] = new HashMap < String , List < Evolution > > ( ) ; [[coupled]] . put ( "default" , Arrays . asList ( [[fiver]] ) ) ; return fromMap ( [[coupled]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 610 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 314 / 287 / 9 / 610:  61%|██████    | 610/1000 [53:38<34:17,  5.28s/it][Succeeded / Failed / Skipped / Total] 314 / 287 / 9 / 610:  61%|██████    | 611/1000 [53:49<34:16,  5.29s/it][Succeeded / Failed / Skipped / Total] 314 / 288 / 9 / 611:  61%|██████    | 611/1000 [53:49<34:16,  5.29s/it][Succeeded / Failed / Skipped / Total] 314 / 288 / 9 / 611:  61%|██████    | 612/1000 [53:50<34:07,  5.28s/it][Succeeded / Failed / Skipped / Total] 314 / 289 / 9 / 612:  61%|██████    | 612/1000 [53:50<34:07,  5.28s/it][Succeeded / Failed / Skipped / Total] 314 / 289 / 9 / 612:  61%|██████▏   | 613/1000 [53:50<33:59,  5.27s/it][Succeeded / Failed / Skipped / Total] 315 / 289 / 9 / 613:  61%|██████▏   | 613/1000 [53:50<33:59,  5.27s/it][Succeeded / Failed / Skipped / Total] 315 / 289 / 9 / 613:  61%|██████▏   | 614/1000 [53:53<33:52,  5.27s/it][Succeeded / Failed / Skipped / Total] 316 / 289 / 9 / 614:  61%|██████▏   | 614/1000 [53:53<33:52,  5.27s/it][Succeeded / Failed / Skipped / Total] 316 / 289 / 9 / 614:  62%|██████▏   | 615/1000 [53:56<33:45,  5.26s/it][Succeeded / Failed / Skipped / Total] 317 / 289 / 9 / 615:  62%|██████▏   | 615/1000 [53:56<33:45,  5.26s/it][Succeeded / Failed / Skipped / Total] 317 / 289 / 9 / 615:  62%|██████▏   | 616/1000 [53:58<33:38,  5.26s/it][Succeeded / Failed / Skipped / Total] 317 / 290 / 9 / 616:  62%|██████▏   | 616/1000 [53:58<33:38,  5.26s/it][Succeeded / Failed / Skipped / Total] 317 / 290 / 9 / 616:  62%|██████▏   | 617/1000 [54:14<33:39,  5.27s/it][Succeeded / Failed / Skipped / Total] 318 / 290 / 9 / 617:  62%|██████▏   | 617/1000 [54:14<33:39,  5.27s/it][Succeeded / Failed / Skipped / Total] 318 / 290 / 9 / 617:  62%|██████▏   | 618/1000 [54:15<33:32,  5.27s/it]Returns true if classArray is assignable to toClassArray --> Compares two arrays for equality and returns true iff both arrays are equal --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] classArray , Class < ? > [ ] [[toClassArray]] , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( [[toClassArray]] ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( [[toClassArray]] == null ) { [[toClassArray]] = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[isAssignable]] ( classArray [ i ] , [[toClassArray]] [ i ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[mcguinn]] ( Class < ? > [ ] classArray , Class < ? > [ ] [[bev]] , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( [[bev]] ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( [[bev]] == null ) { [[bev]] = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[mcguinn]] ( classArray [ i ] , [[bev]] [ i ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 611 ---------------------------------------------
Load the application with the given inject modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Module ... [[modules]] ) { return [[load]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[missile]] ( play . api . inject . Module ... [[true]] ) { return [[missile]] ( Guiceable . [[true]] ( [[true]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 612 ---------------------------------------------
Loads the application with the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( com . google . inject . Module ... modules ) { return [[load]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[hoarse]] ( com . google . inject . Module ... modules ) { return [[hoarse]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 613 ---------------------------------------------
Cleans up the evolutions of a database . --> Ebony is complemented with a set of intrigues --> Socre: 1.0

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database [[database]] , boolean autocommit , String [[schema]] ) { DatabaseEvolutions [[evolutions]] = new DatabaseEvolutions ( [[database]] . asScala ( ) , [[schema]] ) ; [[evolutions]] . evolve ( [[evolutions]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[complemented]] ( Database [[ebony]] , boolean autocommit , String [[intrigues]] ) { DatabaseEvolutions [[lucia]] = new DatabaseEvolutions ( [[ebony]] . asScala ( ) , [[intrigues]] ) ; [[lucia]] . evolve ( [[lucia]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 614 ---------------------------------------------
Load the application with the given bindings . --> penguins --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[load]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder [[å]] ( play . api . inject . Binding < ? > ... [[penguins]] ) { return [[å]] ( Guiceable . [[penguins]] ( [[penguins]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 615 ---------------------------------------------
Returns a new GuiceApplicationBuilder . --> Create a new guice application builder --> Socre: 1.0

[[[[Adv]]]]: protected GuiceApplicationBuilder [[newBuilder]] ( play . api . inject . guice . GuiceApplicationBuilder [[builder]] ) { return new GuiceApplicationBuilder ( [[builder]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder [[straw]] ( play . api . inject . guice . GuiceApplicationBuilder [[subscription]] ) { return new GuiceApplicationBuilder ( [[subscription]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 616 ---------------------------------------------
Returns a GuiceApplicationBuilder with the given module loader . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[withModuleLoader]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[chimera]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 617 ---------------------------------------------
Create an ActorRef from a function . --> ActorRef actorRef for Becomes and Purchase --> Socre: 1.0

[[[[Adv]]]]: public static < [[In]] , [[Out]] > Flow < [[In]] , [[Out]] , ? > actorRef ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < [[In]] , [[Out]] > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < [[Becomes]] , [[Purchase]] > Flow < [[Becomes]] , [[Purchase]] , ? > actorRef ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < [[Becomes]] , [[Purchase]] > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 618 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 319 / 290 / 9 / 618:  62%|██████▏   | 618/1000 [54:15<33:32,  5.27s/it][Succeeded / Failed / Skipped / Total] 319 / 290 / 9 / 618:  62%|██████▏   | 619/1000 [54:25<33:30,  5.28s/it][Succeeded / Failed / Skipped / Total] 319 / 291 / 9 / 619:  62%|██████▏   | 619/1000 [54:25<33:30,  5.28s/it][Succeeded / Failed / Skipped / Total] 319 / 291 / 9 / 619:  62%|██████▏   | 620/1000 [54:27<33:22,  5.27s/it][Succeeded / Failed / Skipped / Total] 320 / 291 / 9 / 620:  62%|██████▏   | 620/1000 [54:27<33:22,  5.27s/it][Succeeded / Failed / Skipped / Total] 320 / 291 / 9 / 620:  62%|██████▏   | 621/1000 [54:32<33:17,  5.27s/it][Succeeded / Failed / Skipped / Total] 320 / 292 / 9 / 621:  62%|██████▏   | 621/1000 [54:32<33:17,  5.27s/it][Succeeded / Failed / Skipped / Total] 320 / 292 / 9 / 621:  62%|██████▏   | 622/1000 [54:35<33:10,  5.27s/it][Succeeded / Failed / Skipped / Total] 321 / 292 / 9 / 622:  62%|██████▏   | 622/1000 [54:35<33:10,  5.27s/it][Succeeded / Failed / Skipped / Total] 321 / 292 / 9 / 622:  62%|██████▏   | 623/1000 [54:39<33:04,  5.26s/it][Succeeded / Failed / Skipped / Total] 321 / 293 / 9 / 623:  62%|██████▏   | 623/1000 [54:39<33:04,  5.26s/it][Succeeded / Failed / Skipped / Total] 321 / 293 / 9 / 623:  62%|██████▏   | 624/1000 [54:43<32:58,  5.26s/it][Succeeded / Failed / Skipped / Total] 322 / 293 / 9 / 624:  62%|██████▏   | 624/1000 [54:43<32:58,  5.26s/it][Succeeded / Failed / Skipped / Total] 322 / 293 / 9 / 624:  62%|██████▎   | 625/1000 [54:49<32:53,  5.26s/it][Succeeded / Failed / Skipped / Total] 322 / 294 / 9 / 625:  62%|██████▎   | 625/1000 [54:49<32:53,  5.26s/it][Succeeded / Failed / Skipped / Total] 322 / 294 / 9 / 625:  63%|██████▎   | 626/1000 [54:53<32:47,  5.26s/it]bypass with graph . --> armando gunga with merge strategy --> Socre: 1.0

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[bypassWith]] ( Flow < In , F . Either < FlowIn , Out > , ? > [[splitter]] , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > flow ) { return [[splitter]] . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[armando]] ( Flow < In , F . Either < FlowIn , Out > , ? > [[gunga]] , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > flow ) { return [[gunga]] . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 619 ---------------------------------------------
Encodes the cookie into a cookie string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[buf]] = new StringBuilder ( ) ; [[encode]] ( [[buf]] , cookie ) ; return stripTrailingSeparator ( [[buf]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String [[massai]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[superheated]] = new StringBuilder ( ) ; [[massai]] ( [[superheated]] , cookie ) ; return stripTrailingSeparator ( [[superheated]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 620 ---------------------------------------------
Convert error arguments to an unmodifiable list . --> Return a list of faces that are not resolvable --> Socre: 1.0

[[[[Adv]]]]: private List < Object > [[convertErrorArguments]] ( Object [ ] arguments ) { if ( arguments == null ) { return Collections . emptyList ( ) ; } List < Object > [[converted]] = Arrays . stream ( arguments ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[converted]] ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > [[ruin]] ( Object [ ] arguments ) { if ( arguments == null ) { return Collections . emptyList ( ) ; } List < Object > [[faces]] = Arrays . stream ( arguments ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[faces]] ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 621 ---------------------------------------------
Returns the global errors . --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[niemeyer]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 622 ---------------------------------------------
Returns the value associated with the given key . --> Brasil . --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[brasil]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 623 ---------------------------------------------
Returns the first EntityManager bound to this thread . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( ) { Deque < EntityManager > [[ems]] = this . emStack ( "[[True]]" == "[[True]]" ) ; if ( [[ems]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[ems]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager [[isiah]] ( ) { Deque < EntityManager > [[meticulously]] = this . emStack ( "[[Reviewers]]" == "[[Reviewers]]" ) ; if ( [[meticulously]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[meticulously]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 624 ---------------------------------------------
Parses the given text into an instance of the given field . --> Parse moisturizing . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[moisturizing]] > [[moisturizing]] parse ( Field field , String text ) { return ( [[moisturizing]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 625 ---------------------------------------------
Creates a new form with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public Form < T > [[fill]] ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > [[carlos]] ( T [[day]] ) { if ( [[day]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[day]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 626 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 322 / 295 / 9 / 626:  63%|██████▎   | 626/1000 [54:53<32:47,  5.26s/it][Succeeded / Failed / Skipped / Total] 322 / 295 / 9 / 626:  63%|██████▎   | 627/1000 [54:54<32:39,  5.25s/it][Succeeded / Failed / Skipped / Total] 323 / 295 / 9 / 627:  63%|██████▎   | 627/1000 [54:54<32:39,  5.25s/it][Succeeded / Failed / Skipped / Total] 323 / 295 / 9 / 627:  63%|██████▎   | 628/1000 [55:04<32:37,  5.26s/it][Succeeded / Failed / Skipped / Total] 323 / 296 / 9 / 628:  63%|██████▎   | 628/1000 [55:04<32:37,  5.26s/it][Succeeded / Failed / Skipped / Total] 323 / 296 / 9 / 628:  63%|██████▎   | 629/1000 [55:05<32:29,  5.25s/it][Succeeded / Failed / Skipped / Total] 324 / 296 / 9 / 629:  63%|██████▎   | 629/1000 [55:05<32:29,  5.25s/it][Succeeded / Failed / Skipped / Total] 324 / 296 / 9 / 629:  63%|██████▎   | 630/1000 [55:05<32:21,  5.25s/it][Succeeded / Failed / Skipped / Total] 324 / 297 / 9 / 630:  63%|██████▎   | 630/1000 [55:05<32:21,  5.25s/it][Succeeded / Failed / Skipped / Total] 324 / 297 / 9 / 630:  63%|██████▎   | 631/1000 [55:05<32:13,  5.24s/it][Succeeded / Failed / Skipped / Total] 324 / 298 / 9 / 631:  63%|██████▎   | 631/1000 [55:05<32:13,  5.24s/it][Succeeded / Failed / Skipped / Total] 324 / 298 / 9 / 631:  63%|██████▎   | 632/1000 [55:12<32:09,  5.24s/it][Succeeded / Failed / Skipped / Total] 325 / 298 / 9 / 632:  63%|██████▎   | 632/1000 [55:12<32:09,  5.24s/it][Succeeded / Failed / Skipped / Total] 325 / 298 / 9 / 632:  63%|██████▎   | 633/1000 [55:29<32:10,  5.26s/it][Succeeded / Failed / Skipped / Total] 326 / 298 / 9 / 633:  63%|██████▎   | 633/1000 [55:29<32:10,  5.26s/it][Succeeded / Failed / Skipped / Total] 326 / 298 / 9 / 633:  63%|██████▎   | 634/1000 [55:30<32:02,  5.25s/it]Parses the given text into an instance of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[mãe]] > [[mãe]] parse ( String text , Class < [[mãe]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 627 ---------------------------------------------
Prints a value to a string . --> Prints an object to a Conspiracy --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[Conspiracy]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[Conspiracy]] . class ) ) { return conversion . convert ( t , [[Conspiracy]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 628 ---------------------------------------------
Push an EntityManager onto the stack or remove it from the stack . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager em , boolean [[threadLocalFallback]] ) { Deque < EntityManager > ems = this . emStack ( [[threadLocalFallback]] ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[kuen]] ( EntityManager em , boolean [[rattlesnake]] ) { Deque < EntityManager > ems = this . emStack ( [[rattlesnake]] ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 629 ---------------------------------------------
Prints a type to a string . --> Prints an object to Heartily --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[Heartily]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[Heartily]] . class ) ) ) { return ( [[Heartily]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[Heartily]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[Heartily]] . class ) ) { return conversion . convert ( t , [[Heartily]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 630 ---------------------------------------------
Prints the type descriptor for the given field . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[À]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 631 ---------------------------------------------
Returns the current EntityManager stack . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[emStack]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object [[emsObject]] = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( [[emsObject]] != null ) { return ( Deque < EntityManager > ) [[emsObject]] ; } else { Deque < EntityManager > [[ems]] = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , [[ems]] ) ; return [[ems]] ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[early]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object [[quiz]] = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( [[quiz]] != null ) { return ( Deque < EntityManager > ) [[quiz]] ; } else { Deque < EntityManager > [[annapolis]] = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , [[annapolis]] ) ; return [[annapolis]] ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 632 ---------------------------------------------
Registers an optional converter to the formatters . --> Carpal formatters . --> Socre: 1.0

[[[[Adv]]]]: private Formatters [[registerOptional]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { if ( [[sourceType]] . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters [[carpal]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor [[boston]] , TypeDescriptor targetType ) { if ( [[boston]] . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 633 ---------------------------------------------
Selects the nodes at the specified path . --> Returns a NodeList with a leapfrog of the given dinars --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String path , Object [[node]] ) { return [[selectNodes]] ( path , [[node]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[leapfrog]] ( String path , Object [[dinars]] ) { return [[leapfrog]] ( path , [[dinars]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 634 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 326 / 299 / 9 / 634:  63%|██████▎   | 634/1000 [55:30<32:02,  5.25s/it][Succeeded / Failed / Skipped / Total] 326 / 299 / 9 / 634:  64%|██████▎   | 635/1000 [55:37<31:58,  5.26s/it][Succeeded / Failed / Skipped / Total] 326 / 300 / 9 / 635:  64%|██████▎   | 635/1000 [55:37<31:58,  5.26s/it][Succeeded / Failed / Skipped / Total] 326 / 300 / 9 / 635:  64%|██████▎   | 636/1000 [55:45<31:54,  5.26s/it][Succeeded / Failed / Skipped / Total] 327 / 300 / 9 / 636:  64%|██████▎   | 636/1000 [55:45<31:54,  5.26s/it][Succeeded / Failed / Skipped / Total] 327 / 300 / 9 / 636:  64%|██████▎   | 637/1000 [55:53<31:50,  5.26s/it][Succeeded / Failed / Skipped / Total] 328 / 300 / 9 / 637:  64%|██████▎   | 637/1000 [55:53<31:50,  5.26s/it][Succeeded / Failed / Skipped / Total] 328 / 300 / 9 / 637:  64%|██████▍   | 638/1000 [55:54<31:43,  5.26s/it][Succeeded / Failed / Skipped / Total] 328 / 301 / 9 / 638:  64%|██████▍   | 638/1000 [55:54<31:43,  5.26s/it][Succeeded / Failed / Skipped / Total] 328 / 301 / 9 / 638:  64%|██████▍   | 639/1000 [55:57<31:37,  5.26s/it][Succeeded / Failed / Skipped / Total] 329 / 301 / 9 / 639:  64%|██████▍   | 639/1000 [55:57<31:37,  5.26s/it][Succeeded / Failed / Skipped / Total] 329 / 301 / 9 / 639:  64%|██████▍   | 640/1000 [56:04<31:32,  5.26s/it]Fills the form with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public DynamicForm [[fill]] ( Map < String , Object > value ) { Form < Dynamic > form = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm [[clacking]] ( Map < String , Object > value ) { Form < Dynamic > form = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 635 ---------------------------------------------
Returns all errors as json . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[testaments]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 636 ---------------------------------------------
Maps a message type to a JSON object . --> Maps a temperature message to a WebSocketAcceptor --> Socre: 1.0

[[[[Adv]]]]: public static < In , Out > MappedWebSocketAcceptor < In , Out > [[json]] ( Class < In > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .

[[[[Adv]]]]: public static < In , Out > MappedWebSocketAcceptor < In , Out > [[temperature]] ( Class < In > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 637 ---------------------------------------------
bypass with . --> Merge a sequence of Minis into a single sequence of Huffings --> Socre: 1.0

[[[[Adv]]]]: public static < [[In]] , FlowIn , [[Out]] > Flow < [[In]] , [[Out]] , ? > [[bypassWith]] ( Function < [[In]] , F . Either < FlowIn , [[Out]] > > splitter , Flow < FlowIn , [[Out]] , ? > [[flow]] ) { return [[bypassWith]] ( Flow . < [[In]] > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[flow]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < [[Minis]] , FlowIn , [[Huffing]] > Flow < [[Minis]] , [[Huffing]] , ? > [[anya]] ( Function < [[Minis]] , F . Either < FlowIn , [[Huffing]] > > splitter , Flow < FlowIn , [[Huffing]] , ? > [[copacabana]] ) { return [[anya]] ( Flow . < [[Minis]] > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[copacabana]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 638 ---------------------------------------------
Convert a Java List to a scala Seq --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[merging]] ( java . util . List < T > [[topside]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[topside]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 639 ---------------------------------------------
Calculates the cost of promotion for primitive types . --> yoou cost = 0 ; --> Socre: 1.0

[[[[Adv]]]]: private static float [[getPrimitivePromotionCost]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float [[yoou]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 640 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 329 / 302 / 9 / 640:  64%|██████▍   | 640/1000 [56:04<31:32,  5.26s/it][Succeeded / Failed / Skipped / Total] 329 / 302 / 9 / 640:  64%|██████▍   | 641/1000 [56:05<31:24,  5.25s/it][Succeeded / Failed / Skipped / Total] 330 / 302 / 9 / 641:  64%|██████▍   | 641/1000 [56:05<31:24,  5.25s/it][Succeeded / Failed / Skipped / Total] 330 / 302 / 9 / 641:  64%|██████▍   | 642/1000 [56:07<31:17,  5.25s/it][Succeeded / Failed / Skipped / Total] 330 / 303 / 9 / 642:  64%|██████▍   | 642/1000 [56:07<31:17,  5.25s/it][Succeeded / Failed / Skipped / Total] 330 / 303 / 9 / 642:  64%|██████▍   | 643/1000 [56:10<31:11,  5.24s/it][Succeeded / Failed / Skipped / Total] 330 / 304 / 9 / 643:  64%|██████▍   | 643/1000 [56:10<31:11,  5.24s/it][Succeeded / Failed / Skipped / Total] 330 / 304 / 9 / 643:  64%|██████▍   | 644/1000 [56:14<31:05,  5.24s/it][Succeeded / Failed / Skipped / Total] 330 / 305 / 9 / 644:  64%|██████▍   | 644/1000 [56:14<31:05,  5.24s/it][Succeeded / Failed / Skipped / Total] 330 / 305 / 9 / 644:  64%|██████▍   | 645/1000 [56:18<30:59,  5.24s/it][Succeeded / Failed / Skipped / Total] 331 / 305 / 9 / 645:  64%|██████▍   | 645/1000 [56:18<30:59,  5.24s/it][Succeeded / Failed / Skipped / Total] 331 / 305 / 9 / 645:  65%|██████▍   | 646/1000 [56:25<30:55,  5.24s/it][Succeeded / Failed / Skipped / Total] 332 / 305 / 9 / 646:  65%|██████▍   | 646/1000 [56:25<30:55,  5.24s/it][Succeeded / Failed / Skipped / Total] 332 / 305 / 9 / 646:  65%|██████▍   | 647/1000 [56:28<30:48,  5.24s/it][Succeeded / Failed / Skipped / Total] 333 / 305 / 9 / 647:  65%|██████▍   | 647/1000 [56:28<30:48,  5.24s/it][Succeeded / Failed / Skipped / Total] 333 / 305 / 9 / 647:  65%|██████▍   | 648/1000 [56:34<30:43,  5.24s/it]Registers a formatter for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[Formatters]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T [[t]] , Locale locale ) { return formatter . print ( [[t]] , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > [[Floorboards]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T [[musée]] , Locale locale ) { return formatter . print ( [[musée]] , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 641 ---------------------------------------------
Calculates the total cost of the transformation . --> Calculate holiday from srcArgs and executable --> Socre: 1.0

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[holiday]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 642 ---------------------------------------------
Varargs to a scala Seq --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... [[array]] ) { return toSeq ( [[array]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[breakable]] ( T ... [[smooching]] ) { return toSeq ( [[smooching]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 643 ---------------------------------------------
Encodes a cookie into a cookie string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder [[buf]] = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( [[buf]] , name , value ) ; } else { add ( [[buf]] , name , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( [[buf]] , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String [[zhong]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder [[ahman]] = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( [[ahman]] , name , value ) ; } else { add ( [[ahman]] , name , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( [[ahman]] , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 644 ---------------------------------------------
Convert an array to a scala collection immutable Seq --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[knowthat]] ( T [ ] [[contesting]] ) { return [[knowthat]] ( java . util . Arrays . asList ( [[contesting]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 645 ---------------------------------------------
Returns true if the AccessibleObject is accessible but not accessible in a package . --> zipperhead - zipperhead - zipperhead --> Socre: 1.0

[[[[Adv]]]]: static boolean [[setAccessibleWorkaround]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "[[False]]" != "[[False]]" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean [[zipperhead]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "[[Corridor]]" != "[[Corridor]]" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 646 ---------------------------------------------
Performs a quick sort using the specified comparator . --> schwerin ausgebenen Comparator ausgegebenen --> Socre: 1.0

[[[[Adv]]]]: public void [[quickSort]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void [[schwerin]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 647 ---------------------------------------------
Get a message by list of keys --> Auxiliary method to perform a descendent search --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( List < String > [[keys]] , Object ... args ) { return messagesApi . get ( lang , [[keys]] , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[ascend]] ( List < String > [[searchin]] , Object ... args ) { return messagesApi . get ( lang , [[searchin]] , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 648 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 334 / 305 / 9 / 648:  65%|██████▍   | 648/1000 [56:34<30:43,  5.24s/it][Succeeded / Failed / Skipped / Total] 334 / 305 / 9 / 648:  65%|██████▍   | 649/1000 [56:42<30:40,  5.24s/it][Succeeded / Failed / Skipped / Total] 335 / 305 / 9 / 649:  65%|██████▍   | 649/1000 [56:42<30:40,  5.24s/it][Succeeded / Failed / Skipped / Total] 335 / 305 / 9 / 649:  65%|██████▌   | 650/1000 [56:45<30:33,  5.24s/it][Succeeded / Failed / Skipped / Total] 336 / 305 / 9 / 650:  65%|██████▌   | 650/1000 [56:45<30:33,  5.24s/it][Succeeded / Failed / Skipped / Total] 336 / 305 / 9 / 650:  65%|██████▌   | 651/1000 [56:45<30:25,  5.23s/it][Succeeded / Failed / Skipped / Total] 336 / 305 / 10 / 651:  65%|██████▌   | 651/1000 [56:45<30:25,  5.23s/it][Succeeded / Failed / Skipped / Total] 336 / 305 / 10 / 651:  65%|██████▌   | 652/1000 [56:46<30:18,  5.22s/it][Succeeded / Failed / Skipped / Total] 337 / 305 / 10 / 652:  65%|██████▌   | 652/1000 [56:46<30:18,  5.22s/it][Succeeded / Failed / Skipped / Total] 337 / 305 / 10 / 652:  65%|██████▌   | 653/1000 [56:53<30:13,  5.23s/it][Succeeded / Failed / Skipped / Total] 337 / 306 / 10 / 653:  65%|██████▌   | 653/1000 [56:53<30:13,  5.23s/it][Succeeded / Failed / Skipped / Total] 337 / 306 / 10 / 653:  65%|██████▌   | 654/1000 [56:56<30:07,  5.22s/it]Creates a parallel sorter for the given array . --> é nablus é nablus --> Socre: 1.0

[[[[Adv]]]]: public static ParallelSorter [[create]] ( Object [ ] [[arrays]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[arrays]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter [[én]] ( Object [ ] [[nablus]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[nablus]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 649 ---------------------------------------------
Returns the message for the given key with the given arguments --> Wexler nunca von wexler --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( String [[key]] , Object ... [[args]] ) { return messagesApi . get ( lang , [[key]] , [[args]] ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String [[wexler]] ( String [[nunca]] , Object ... [[viennese]] ) { return messagesApi . get ( lang , [[nunca]] , [[viennese]] ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 650 ---------------------------------------------
Load an argument at the given index . --> Savoir d obtenir --> Socre: 1.0

[[[[Adv]]]]: public void [[load_arg]] ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void [[savoir]] ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 651 ---------------------------------------------
Emit a field instruction . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 652 ---------------------------------------------
Invokes the protected method . --> Augment cabarets with cabarets --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( Object [[obj]] , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , [[obj]] , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object [[augmented]] ( Object [[cabarets]] , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , [[cabarets]] , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 653 ---------------------------------------------
Creates a new WebSocket object that accepts or returns either the result of the provided function . --> [[[FAILED]]]

[[[[Adv]]]]: private static < In , Out > [[WebSocket]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[WebSocket]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[flow]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[flow]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > [[gamer]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[gamer]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[shuffling]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[shuffling]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 654 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 338 / 306 / 10 / 654:  65%|██████▌   | 654/1000 [56:56<30:07,  5.22s/it][Succeeded / Failed / Skipped / Total] 338 / 306 / 10 / 654:  66%|██████▌   | 655/1000 [57:05<30:04,  5.23s/it][Succeeded / Failed / Skipped / Total] 339 / 306 / 10 / 655:  66%|██████▌   | 655/1000 [57:05<30:04,  5.23s/it][Succeeded / Failed / Skipped / Total] 339 / 306 / 10 / 655:  66%|██████▌   | 656/1000 [57:10<29:59,  5.23s/it][Succeeded / Failed / Skipped / Total] 339 / 307 / 10 / 656:  66%|██████▌   | 656/1000 [57:10<29:59,  5.23s/it][Succeeded / Failed / Skipped / Total] 339 / 307 / 10 / 656:  66%|██████▌   | 657/1000 [57:20<29:55,  5.24s/it][Succeeded / Failed / Skipped / Total] 340 / 307 / 10 / 657:  66%|██████▌   | 657/1000 [57:20<29:55,  5.24s/it][Succeeded / Failed / Skipped / Total] 340 / 307 / 10 / 657:  66%|██████▌   | 658/1000 [57:23<29:49,  5.23s/it]Performs a numeric cast from one type to another . --> Cast medeiros . --> Socre: 1.0

[[[[Adv]]]]: public void cast_numeric ( Type [[from]] , Type [[to]] ) { if ( [[from]] != [[to]] ) { if ( [[from]] == Type . DOUBLE_TYPE ) { if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , [[to]] ) ; } } else if ( [[from]] == Type . FLOAT_TYPE ) { if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , [[to]] ) ; } } else if ( [[from]] == Type . LONG_TYPE ) { if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , [[to]] ) ; } } else { if ( [[to]] == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( [[to]] == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( [[to]] == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void cast_numeric ( Type [[à]] , Type [[medeiros]] ) { if ( [[à]] != [[medeiros]] ) { if ( [[à]] == Type . DOUBLE_TYPE ) { if ( [[medeiros]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( [[medeiros]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , [[medeiros]] ) ; } } else if ( [[à]] == Type . FLOAT_TYPE ) { if ( [[medeiros]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( [[medeiros]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , [[medeiros]] ) ; } } else if ( [[à]] == Type . LONG_TYPE ) { if ( [[medeiros]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( [[medeiros]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , [[medeiros]] ) ; } } else { if ( [[medeiros]] == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( [[medeiros]] == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( [[medeiros]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( [[medeiros]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( [[medeiros]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( [[medeiros]] == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 655 ---------------------------------------------
Pushes a zero or null constant to the stack . --> hotpot aliquot --> Socre: 1.0

[[[[Adv]]]]: public void [[zero_or_null]] ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { switch ( [[type]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[hotpot]] ( Type [[viktoria]] ) { if ( TypeUtils . isPrimitive ( [[viktoria]] ) ) { switch ( [[viktoria]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 656 ---------------------------------------------
Creates a new database with the given driver url and configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public static Database [[createFrom]] ( String [[driver]] , String url , Map < String , ? extends Object > config ) { return [[createFrom]] ( "default" , [[driver]] , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[repeal]] ( String [[epics]] , String url , Map < String , ? extends Object > config ) { return [[repeal]] ( "default" , [[epics]] , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 657 ---------------------------------------------
Unbox or zero . --> bayou ( type ) --> Socre: 1.0

[[[[Adv]]]]: public void [[unbox_or_zero]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void [[bayou]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 658 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 340 / 308 / 10 / 658:  66%|██████▌   | 658/1000 [57:23<29:49,  5.23s/it][Succeeded / Failed / Skipped / Total] 340 / 308 / 10 / 658:  66%|██████▌   | 659/1000 [57:26<29:43,  5.23s/it][Succeeded / Failed / Skipped / Total] 341 / 308 / 10 / 659:  66%|██████▌   | 659/1000 [57:26<29:43,  5.23s/it][Succeeded / Failed / Skipped / Total] 341 / 308 / 10 / 659:  66%|██████▌   | 660/1000 [57:29<29:37,  5.23s/it]Registers a formatter for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends [[Annotation]] , T > [[Formatters]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends [[Annotation]] > annotationType = ( Class < ? extends [[Annotation]] > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { return ( [[sourceType]] . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { final A a = ( A ) [[sourceType]] . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[sourceType]] , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[sourceType]] , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends [[Lunch]] , T > [[Murdering]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends [[Lunch]] > annotationType = ( Class < ? extends [[Lunch]] > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor [[rookies]] , TypeDescriptor targetType ) { return ( [[rookies]] . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[rookies]] , TypeDescriptor targetType ) { final A a = ( A ) [[rookies]] . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[rookies]] , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor [[rookies]] , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[rookies]] , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[rookies]] , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 659 ---------------------------------------------
Get all methods from a superclass and an array of interfaces . --> tachyon . --> Socre: 0.9999999999820136

[[[[Adv]]]]: public static void [[getMethods]] ( Class superclass , Class [ ] interfaces , List methods ) { [[getMethods]] ( superclass , interfaces , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void [[tachyon]] ( Class superclass , Class [ ] interfaces , List methods ) { [[tachyon]] ( superclass , interfaces , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 660 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 342 / 308 / 10 / 660:  66%|██████▌   | 660/1000 [57:29<29:37,  5.23s/it][Succeeded / Failed / Skipped / Total] 342 / 308 / 10 / 660:  66%|██████▌   | 661/1000 [57:53<29:41,  5.26s/it][Succeeded / Failed / Skipped / Total] 343 / 308 / 10 / 661:  66%|██████▌   | 661/1000 [57:53<29:41,  5.26s/it][Succeeded / Failed / Skipped / Total] 343 / 308 / 10 / 661:  66%|██████▌   | 662/1000 [58:01<29:37,  5.26s/it][Succeeded / Failed / Skipped / Total] 344 / 308 / 10 / 662:  66%|██████▌   | 662/1000 [58:01<29:37,  5.26s/it][Succeeded / Failed / Skipped / Total] 344 / 308 / 10 / 662:  66%|██████▋   | 663/1000 [58:03<29:30,  5.25s/it][Succeeded / Failed / Skipped / Total] 344 / 309 / 10 / 663:  66%|██████▋   | 663/1000 [58:03<29:30,  5.25s/it][Succeeded / Failed / Skipped / Total] 344 / 309 / 10 / 663:  66%|██████▋   | 664/1000 [58:06<29:24,  5.25s/it][Succeeded / Failed / Skipped / Total] 345 / 309 / 10 / 664:  66%|██████▋   | 664/1000 [58:06<29:24,  5.25s/it][Succeeded / Failed / Skipped / Total] 345 / 309 / 10 / 664:  66%|██████▋   | 665/1000 [58:14<29:20,  5.25s/it][Succeeded / Failed / Skipped / Total] 346 / 309 / 10 / 665:  66%|██████▋   | 665/1000 [58:14<29:20,  5.25s/it][Succeeded / Failed / Skipped / Total] 346 / 309 / 10 / 665:  67%|██████▋   | 666/1000 [58:15<29:12,  5.25s/it][Succeeded / Failed / Skipped / Total] 346 / 310 / 10 / 666:  67%|██████▋   | 666/1000 [58:15<29:12,  5.25s/it][Succeeded / Failed / Skipped / Total] 346 / 310 / 10 / 666:  67%|██████▋   | 667/1000 [58:17<29:06,  5.24s/it]Generates code to get a field from the provider . --> Get the bookshelf for the given names . --> Socre: 1.0

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type [[type]] = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( [[type]] ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type [[bookshelf]] = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( [[bookshelf]] ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 661 ---------------------------------------------
Adds the signature and exception types for the given method . --> stapler for affirmations --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Method [[method]] ) { [[add]] ( ReflectUtils . getSignature ( [[method]] ) , ReflectUtils . getExceptionTypes ( [[method]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[stapler]] ( Method [[affirmations]] ) { [[stapler]] ( ReflectUtils . getSignature ( [[affirmations]] ) , ReflectUtils . getExceptionTypes ( [[affirmations]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 662 ---------------------------------------------
Compares two null values . --> titlovi titlovi --> Socre: 1.0

[[[[Adv]]]]: private static void [[nullcmp]] ( CodeEmitter e , Label oneNull , Label [[bothNull]] ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( [[bothNull]] ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void [[titlovi]] ( CodeEmitter e , Label oneNull , Label [[chris]] ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( [[chris]] ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 663 ---------------------------------------------
Chooses a comparator to use for the merge sort . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[mergeSort]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[ventriloquist]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 664 ---------------------------------------------
Find methods by name and descriptor . --> Returns an array of allegorical methods . --> Socre: 1.0

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] [[methods]] ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < [[methods]] . length ; i ++ ) { Method method = [[methods]] [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] [[allegorical]] ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < [[allegorical]] . length ; i ++ ) { Method method = [[allegorical]] [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 665 ---------------------------------------------
Returns the cardinality of this set . --> stallin returns the unethical value --> Socre: 1.0

[[[[Adv]]]]: public int [[cardinality]] ( ) { int w = value ; int [[c]] = 0 ; while ( w != 0 ) { [[c]] += T [ w & 255 ] ; w >>= 8 ; } return [[c]] ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int [[stallin]] ( ) { int w = value ; int [[unethical]] = 0 ; while ( w != 0 ) { [[unethical]] += T [ w & 255 ] ; w >>= 8 ; } return [[unethical]] ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 666 ---------------------------------------------
Filter constructors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[filterConstructors]] ( Class sc , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( sc , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void [[lawd]] ( Class sc , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( sc , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 667 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 346 / 311 / 10 / 667:  67%|██████▋   | 667/1000 [58:17<29:06,  5.24s/it][Succeeded / Failed / Skipped / Total] 346 / 311 / 10 / 667:  67%|██████▋   | 668/1000 [58:21<29:00,  5.24s/it][Succeeded / Failed / Skipped / Total] 346 / 312 / 10 / 668:  67%|██████▋   | 668/1000 [58:21<29:00,  5.24s/it][Succeeded / Failed / Skipped / Total] 346 / 312 / 10 / 668:  67%|██████▋   | 669/1000 [58:47<29:05,  5.27s/it][Succeeded / Failed / Skipped / Total] 346 / 313 / 10 / 669:  67%|██████▋   | 669/1000 [58:47<29:05,  5.27s/it][Succeeded / Failed / Skipped / Total] 346 / 313 / 10 / 669:  67%|██████▋   | 670/1000 [58:47<28:57,  5.27s/it][Succeeded / Failed / Skipped / Total] 346 / 314 / 10 / 670:  67%|██████▋   | 670/1000 [58:47<28:57,  5.27s/it][Succeeded / Failed / Skipped / Total] 346 / 314 / 10 / 670:  67%|██████▋   | 671/1000 [58:52<28:52,  5.27s/it][Succeeded / Failed / Skipped / Total] 346 / 315 / 10 / 671:  67%|██████▋   | 671/1000 [58:52<28:52,  5.27s/it][Succeeded / Failed / Skipped / Total] 346 / 315 / 10 / 671:  67%|██████▋   | 672/1000 [58:54<28:45,  5.26s/it]Sets the superclass of this class . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setSuperclass]] ( Class [[superclass]] ) { if ( [[superclass]] != null && [[superclass]] . equals ( Object . class ) ) { [[superclass]] = null ; } this . superclass = [[superclass]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[banerjee]] ( Class [[crumb]] ) { if ( [[crumb]] != null && [[crumb]] . equals ( Object . class ) ) { [[crumb]] = null ; } this . superclass = [[crumb]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 668 ---------------------------------------------
Returns the cost of an Object transformation . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getObjectTransformationCost]] ( Class < ? > [[srcClass]] , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( [[srcClass]] , destClass ) ; } float cost = 0.0f ; while ( [[srcClass]] != null && ! destClass . equals ( [[srcClass]] ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( [[srcClass]] , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( [[srcClass]] == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float [[auctioneer]] ( Class < ? > [[bboy]] , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( [[bboy]] , destClass ) ; } float cost = 0.0f ; while ( [[bboy]] != null && ! destClass . equals ( [[bboy]] ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( [[bboy]] , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( [[bboy]] == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 669 ---------------------------------------------
Resolves all bridged classes . --> [[[FAILED]]]

[[[[Adv]]]]: public Map [[resolveAll]] ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry [[entry]] = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) [[entry]] . getKey ( ) ; Set bridges = ( Set ) [[entry]] . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map [[clacton]] ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry [[peacekeepers]] = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) [[peacekeepers]] . getKey ( ) ; Set bridges = ( Set ) [[peacekeepers]] . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 670 ---------------------------------------------
Generates code to process an array . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[process_array]] ( CodeEmitter [[e]] , Type type , ProcessArrayCallback [[callback]] ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = [[e]] . make_local ( ) ; Local loopvar = [[e]] . make_local ( Type . INT_TYPE ) ; Label loopbody = [[e]] . make_label ( ) ; Label checkloop = [[e]] . make_label ( ) ; [[e]] . store_local ( array ) ; [[e]] . push ( 0 ) ; [[e]] . store_local ( loopvar ) ; [[e]] . goTo ( checkloop ) ; [[e]] . mark ( loopbody ) ; [[e]] . load_local ( array ) ; [[e]] . load_local ( loopvar ) ; [[e]] . array_load ( componentType ) ; [[callback]] . processElement ( componentType ) ; [[e]] . iinc ( loopvar , 1 ) ; [[e]] . mark ( checkloop ) ; [[e]] . load_local ( loopvar ) ; [[e]] . load_local ( array ) ; [[e]] . arraylength ( ) ; [[e]] . if_icmp ( [[e]] . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void [[seacrest]] ( CodeEmitter [[allegorical]] , Type type , ProcessArrayCallback [[enhancing]] ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = [[allegorical]] . make_local ( ) ; Local loopvar = [[allegorical]] . make_local ( Type . INT_TYPE ) ; Label loopbody = [[allegorical]] . make_label ( ) ; Label checkloop = [[allegorical]] . make_label ( ) ; [[allegorical]] . store_local ( array ) ; [[allegorical]] . push ( 0 ) ; [[allegorical]] . store_local ( loopvar ) ; [[allegorical]] . goTo ( checkloop ) ; [[allegorical]] . mark ( loopbody ) ; [[allegorical]] . load_local ( array ) ; [[allegorical]] . load_local ( loopvar ) ; [[allegorical]] . array_load ( componentType ) ; [[enhancing]] . processElement ( componentType ) ; [[allegorical]] . iinc ( loopvar , 1 ) ; [[allegorical]] . mark ( checkloop ) ; [[allegorical]] . load_local ( loopvar ) ; [[allegorical]] . load_local ( array ) ; [[allegorical]] . arraylength ( ) ; [[allegorical]] . if_icmp ( [[allegorical]] . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 671 ---------------------------------------------
Sets the host header . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[host]] ( final String host ) { this . [[host]] = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[email]] ( final String host ) { this . [[travel]] = [[email]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[email]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 672 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 346 / 316 / 10 / 672:  67%|██████▋   | 672/1000 [58:54<28:45,  5.26s/it][Succeeded / Failed / Skipped / Total] 346 / 316 / 10 / 672:  67%|██████▋   | 673/1000 [58:56<28:38,  5.26s/it][Succeeded / Failed / Skipped / Total] 346 / 317 / 10 / 673:  67%|██████▋   | 673/1000 [58:56<28:38,  5.26s/it][Succeeded / Failed / Skipped / Total] 346 / 317 / 10 / 673:  67%|██████▋   | 674/1000 [59:01<28:32,  5.25s/it][Succeeded / Failed / Skipped / Total] 346 / 318 / 10 / 674:  67%|██████▋   | 674/1000 [59:01<28:32,  5.25s/it][Succeeded / Failed / Skipped / Total] 346 / 318 / 10 / 674:  68%|██████▊   | 675/1000 [59:06<28:27,  5.25s/it][Succeeded / Failed / Skipped / Total] 346 / 319 / 10 / 675:  68%|██████▊   | 675/1000 [59:06<28:27,  5.25s/it][Succeeded / Failed / Skipped / Total] 346 / 319 / 10 / 675:  68%|██████▊   | 676/1000 [59:11<28:22,  5.25s/it][Succeeded / Failed / Skipped / Total] 346 / 320 / 10 / 676:  68%|██████▊   | 676/1000 [59:11<28:22,  5.25s/it][Succeeded / Failed / Skipped / Total] 346 / 320 / 10 / 676:  68%|██████▊   | 677/1000 [59:19<28:18,  5.26s/it][Succeeded / Failed / Skipped / Total] 347 / 320 / 10 / 677:  68%|██████▊   | 677/1000 [59:19<28:18,  5.26s/it][Succeeded / Failed / Skipped / Total] 347 / 320 / 10 / 677:  68%|██████▊   | 678/1000 [59:20<28:11,  5.25s/it][Succeeded / Failed / Skipped / Total] 347 / 321 / 10 / 678:  68%|██████▊   | 678/1000 [59:20<28:11,  5.25s/it][Succeeded / Failed / Skipped / Total] 347 / 321 / 10 / 678:  68%|██████▊   | 679/1000 [59:21<28:03,  5.25s/it][Succeeded / Failed / Skipped / Total] 347 / 322 / 10 / 679:  68%|██████▊   | 679/1000 [59:21<28:03,  5.25s/it][Succeeded / Failed / Skipped / Total] 347 / 322 / 10 / 679:  68%|██████▊   | 680/1000 [59:24<27:57,  5.24s/it][Succeeded / Failed / Skipped / Total] 347 / 323 / 10 / 680:  68%|██████▊   | 680/1000 [59:24<27:57,  5.24s/it][Succeeded / Failed / Skipped / Total] 347 / 323 / 10 / 680:  68%|██████▊   | 681/1000 [59:30<27:52,  5.24s/it][Succeeded / Failed / Skipped / Total] 348 / 323 / 10 / 681:  68%|██████▊   | 681/1000 [59:30<27:52,  5.24s/it][Succeeded / Failed / Skipped / Total] 348 / 323 / 10 / 681:  68%|██████▊   | 682/1000 [59:31<27:45,  5.24s/it][Succeeded / Failed / Skipped / Total] 349 / 323 / 10 / 682:  68%|██████▊   | 682/1000 [59:31<27:45,  5.24s/it][Succeeded / Failed / Skipped / Total] 349 / 323 / 10 / 682:  68%|██████▊   | 683/1000 [59:32<27:38,  5.23s/it]Resolves the given path to the given base path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path [[resolve]] ( final Path base , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return base . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path [[renoir]] ( final Path base , String [[vilnius]] ) { if ( StringUtil . startsWithChar ( [[vilnius]] , File . separatorChar ) ) { [[vilnius]] = [[vilnius]] . substring ( 1 ) ; } return base . resolve ( [[vilnius]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 673 ---------------------------------------------
Sets the naming policy . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy [[namingPolicy]] ) { if ( [[namingPolicy]] == null ) [[namingPolicy]] = DefaultNamingPolicy . INSTANCE ; this . [[namingPolicy]] = [[namingPolicy]] ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[playing]] ( NamingPolicy [[swinton]] ) { if ( [[swinton]] == null ) [[swinton]] = DefaultNamingPolicy . INSTANCE ; this . [[arirang]] = [[swinton]] ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 674 ---------------------------------------------
Creates a new HTTP request to connect to the specified destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[askew]] ( final String [[onions]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[onions]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 675 ---------------------------------------------
Creates a new request with the given method and destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String method , final String [[destination]] ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[reconciling]] ( final String method , final String [[wiedersehen]] ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( [[wiedersehen]] ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 676 ---------------------------------------------
Reads a string from the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readString]] ( final Path [[path]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[path]] , StandardCharsets . UTF_8 ) ) { StringWriter [[writer]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[stacked]] ( final Path [[aftermath]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[aftermath]] , StandardCharsets . UTF_8 ) ) { StringWriter [[cond]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 677 ---------------------------------------------
Creates a PATCH request . --> Outshoot an Excel file --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[outshoot]] ( final String [[excel]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[excel]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 678 ---------------------------------------------
Creates a GET request with the specified destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[aircrafts]] ( final String [[fumigation]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[fumigation]] ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 679 ---------------------------------------------
Creates a POST request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[reviewer]] ( final String [[curbside]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[curbside]] ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 680 ---------------------------------------------
Creates a PUT request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[concurrently]] ( final String [[erything]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[erything]] ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 681 ---------------------------------------------
Creates a TRACE request with the specified destination . --> revolutionise the HTTP method with the given incubators --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[revolutionise]] ( final String [[incubators]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[incubators]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 682 ---------------------------------------------
Adds a query parameter to the request . --> Add a HANA - KANA - KANA - KANA - KANA - KANA - KANA - O --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest query ( final String [[name1]] , final Object value1 , final Object ... parameters ) { query ( [[name1]] , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; query . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest query ( final String [[hanako]] , final Object value1 , final Object ... parameters ) { query ( [[hanako]] , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; query . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 683 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 350 / 323 / 10 / 683:  68%|██████▊   | 683/1000 [59:32<27:38,  5.23s/it][Succeeded / Failed / Skipped / Total] 350 / 323 / 10 / 683:  68%|██████▊   | 684/1000 [59:33<27:31,  5.23s/it][Succeeded / Failed / Skipped / Total] 350 / 324 / 10 / 684:  68%|██████▊   | 684/1000 [59:33<27:31,  5.23s/it][Succeeded / Failed / Skipped / Total] 350 / 324 / 10 / 684:  68%|██████▊   | 685/1000 [59:34<27:23,  5.22s/it][Succeeded / Failed / Skipped / Total] 351 / 324 / 10 / 685:  68%|██████▊   | 685/1000 [59:34<27:23,  5.22s/it][Succeeded / Failed / Skipped / Total] 351 / 324 / 10 / 685:  69%|██████▊   | 686/1000 [59:35<27:16,  5.21s/it][Succeeded / Failed / Skipped / Total] 351 / 325 / 10 / 686:  69%|██████▊   | 686/1000 [59:35<27:16,  5.21s/it][Succeeded / Failed / Skipped / Total] 351 / 325 / 10 / 686:  69%|██████▊   | 687/1000 [59:42<27:12,  5.21s/it][Succeeded / Failed / Skipped / Total] 352 / 325 / 10 / 687:  69%|██████▊   | 687/1000 [59:42<27:12,  5.21s/it][Succeeded / Failed / Skipped / Total] 352 / 325 / 10 / 687:  69%|██████▉   | 688/1000 [59:44<27:05,  5.21s/it][Succeeded / Failed / Skipped / Total] 352 / 326 / 10 / 688:  69%|██████▉   | 688/1000 [59:44<27:05,  5.21s/it][Succeeded / Failed / Skipped / Total] 352 / 326 / 10 / 688:  69%|██████▉   | 689/1000 [59:57<27:03,  5.22s/it][Succeeded / Failed / Skipped / Total] 352 / 327 / 10 / 689:  69%|██████▉   | 689/1000 [59:57<27:03,  5.22s/it][Succeeded / Failed / Skipped / Total] 352 / 327 / 10 / 689:  69%|██████▉   | 690/1000 [1:00:02<26:58,  5.22s/it][Succeeded / Failed / Skipped / Total] 352 / 328 / 10 / 690:  69%|██████▉   | 690/1000 [1:00:02<26:58,  5.22s/it][Succeeded / Failed / Skipped / Total] 352 / 328 / 10 / 690:  69%|██████▉   | 691/1000 [1:00:03<26:51,  5.21s/it][Succeeded / Failed / Skipped / Total] 353 / 328 / 10 / 691:  69%|██████▉   | 691/1000 [1:00:03<26:51,  5.21s/it][Succeeded / Failed / Skipped / Total] 353 / 328 / 10 / 691:  69%|██████▉   | 692/1000 [1:00:14<26:48,  5.22s/it][Succeeded / Failed / Skipped / Total] 353 / 329 / 10 / 692:  69%|██████▉   | 692/1000 [1:00:14<26:48,  5.22s/it][Succeeded / Failed / Skipped / Total] 353 / 329 / 10 / 692:  69%|██████▉   | 693/1000 [1:00:20<26:44,  5.22s/it][Succeeded / Failed / Skipped / Total] 353 / 330 / 10 / 693:  69%|██████▉   | 693/1000 [1:00:20<26:44,  5.22s/it][Succeeded / Failed / Skipped / Total] 353 / 330 / 10 / 693:  69%|██████▉   | 694/1000 [1:00:24<26:38,  5.22s/it][Succeeded / Failed / Skipped / Total] 354 / 330 / 10 / 694:  69%|██████▉   | 694/1000 [1:00:24<26:38,  5.22s/it][Succeeded / Failed / Skipped / Total] 354 / 330 / 10 / 694:  70%|██████▉   | 695/1000 [1:00:34<26:34,  5.23s/it]Add a map of query parameters . --> Add key - value pairs to query string --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > [[queryMap]] ) { for ( Map . Entry < String , String > entry : [[queryMap]] . entrySet ( ) ) { query . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > [[krafft]] ) { for ( Map . Entry < String , String > entry : [[krafft]] . entrySet ( ) ) { query . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 684 ---------------------------------------------
Creates a DELETE request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[scintillating]] ( final String [[robberies]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[robberies]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 685 ---------------------------------------------
Sets the path for the request . --> Aymara thurston --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[path]] ( String [[path]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[aymara]] ( String [[thurston]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 686 ---------------------------------------------
Creates a HEAD request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[masked]] ( final String [[toast]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[toast]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 687 ---------------------------------------------
Builds the query string . --> Returns the victim of this request --> Socre: 1.0

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[victim]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 688 ---------------------------------------------
Creates a OPTIONS request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[subsidiaries]] ( final String [[miserably]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[miserably]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 689 ---------------------------------------------
Sends the request and receives the response . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[R]] > [[R]] sendAndReceive ( final Function < HttpResponse , [[R]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < [[nationality]] > [[nationality]] sendAndReceive ( final Function < HttpResponse , [[nationality]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 690 ---------------------------------------------
Returns the host URL . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[preemptive]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 691 ---------------------------------------------
Sets the query string . --> Set lachaise with pigskin request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[queryString]] ( final String queryString , final boolean [[decode]] ) { this . [[query]] = HttpUtil . parseQuery ( [[queryString]] , [[decode]] ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest [[lachaise]] ( final String queryString , final boolean [[pigskin]] ) { this . [[sundsvall]] = HttpUtil . parseQuery ( [[lachaise]] , [[pigskin]] ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 692 ---------------------------------------------
Set the host header . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[kalashnikov]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 693 ---------------------------------------------
Returns a buffer for the current request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected Buffer [[buffer]] ( final boolean [[fullRequest]] ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer [[traumatised]] ( final boolean [[brews]] ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 694 ---------------------------------------------
Collects all action runtimes . --> HAVIS HAVIS HAVIS HAVIS MANIFEST --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[havisham]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 695 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 354 / 331 / 10 / 695:  70%|██████▉   | 695/1000 [1:00:34<26:34,  5.23s/it][Succeeded / Failed / Skipped / Total] 354 / 331 / 10 / 695:  70%|██████▉   | 696/1000 [1:00:35<26:27,  5.22s/it][Succeeded / Failed / Skipped / Total] 355 / 331 / 10 / 696:  70%|██████▉   | 696/1000 [1:00:35<26:27,  5.22s/it][Succeeded / Failed / Skipped / Total] 355 / 331 / 10 / 696:  70%|██████▉   | 697/1000 [1:00:35<26:20,  5.22s/it][Succeeded / Failed / Skipped / Total] 355 / 332 / 10 / 697:  70%|██████▉   | 697/1000 [1:00:35<26:20,  5.22s/it][Succeeded / Failed / Skipped / Total] 355 / 332 / 10 / 697:  70%|██████▉   | 698/1000 [1:00:51<26:19,  5.23s/it][Succeeded / Failed / Skipped / Total] 355 / 333 / 10 / 698:  70%|██████▉   | 698/1000 [1:00:51<26:19,  5.23s/it][Succeeded / Failed / Skipped / Total] 355 / 333 / 10 / 698:  70%|██████▉   | 699/1000 [1:00:53<26:13,  5.23s/it][Succeeded / Failed / Skipped / Total] 355 / 334 / 10 / 699:  70%|██████▉   | 699/1000 [1:00:53<26:13,  5.23s/it][Succeeded / Failed / Skipped / Total] 355 / 334 / 10 / 699:  70%|███████   | 700/1000 [1:00:56<26:06,  5.22s/it][Succeeded / Failed / Skipped / Total] 356 / 334 / 10 / 700:  70%|███████   | 700/1000 [1:00:56<26:06,  5.22s/it][Succeeded / Failed / Skipped / Total] 356 / 334 / 10 / 700:  70%|███████   | 701/1000 [1:01:01<26:01,  5.22s/it][Succeeded / Failed / Skipped / Total] 356 / 335 / 10 / 701:  70%|███████   | 701/1000 [1:01:01<26:01,  5.22s/it][Succeeded / Failed / Skipped / Total] 356 / 335 / 10 / 701:  70%|███████   | 702/1000 [1:01:06<25:56,  5.22s/it][Succeeded / Failed / Skipped / Total] 357 / 335 / 10 / 702:  70%|███████   | 702/1000 [1:01:06<25:56,  5.22s/it][Succeeded / Failed / Skipped / Total] 357 / 335 / 10 / 702:  70%|███████   | 703/1000 [1:01:12<25:51,  5.22s/it][Succeeded / Failed / Skipped / Total] 358 / 335 / 10 / 703:  70%|███████   | 703/1000 [1:01:12<25:51,  5.22s/it][Succeeded / Failed / Skipped / Total] 358 / 335 / 10 / 703:  70%|███████   | 704/1000 [1:01:13<25:44,  5.22s/it]Collects all action filters from the filters manager . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[dappled]] ( ) { final Collection < ? extends ActionFilter > [[bewilderment]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[bewilderment]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 696 ---------------------------------------------
Sets the HTTP Basic Authentication header . --> Sends a hiram request to the given sailin and username --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String [[username]] , final String [[password]] ) { if ( [[username]] != null && [[password]] != null ) { String [[data]] = [[username]] . concat ( StringPool . COLON ) . concat ( [[password]] ) ; String base64 = Base64 . encodeToString ( [[data]] ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[hiram]] ( final String [[sailin]] , final String [[username]] ) { if ( [[sailin]] != null && [[username]] != null ) { String [[peacekeepers]] = [[sailin]] . concat ( StringPool . COLON ) . concat ( [[username]] ) ; String base64 = Base64 . encodeToString ( [[peacekeepers]] ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 697 ---------------------------------------------
Collects action interceptors from the interceptors manager . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > [[interceptorValues]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[interceptorValues]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[wins]] ( ) { final Collection < ? extends ActionInterceptor > [[blushes]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[blushes]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 698 ---------------------------------------------
Collects the action results . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[hackney]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 699 ---------------------------------------------
Gets the writer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[talmadge]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 700 ---------------------------------------------
Sets the value of a simple property . --> fal - fal - fal --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty bp , final Object value ) { Setter [[setter]] = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[fal]] ( final BeanProperty bp , final Object value ) { Setter [[lice]] = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 701 ---------------------------------------------
Gets the exception table length . --> [[[FAILED]]]

[[[[Adv]]]]: static int [[getExceptionTableLength]] ( final Handler firstHandler ) { int length = 0 ; Handler [[handler]] = firstHandler ; while ( [[handler]] != null ) { length ++ ; [[handler]] = [[handler]] . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int [[hankies]] ( final Handler firstHandler ) { int length = 0 ; Handler [[sizzling]] = firstHandler ; while ( [[sizzling]] != null ) { length ++ ; [[sizzling]] = [[sizzling]] . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 702 ---------------------------------------------
Remove a range of handlers . --> ANDROS combines two handlers --> Socre: 1.0

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler [[firstHandler]] , final Label start , final Label end ) { if ( [[firstHandler]] == null ) { return null ; } else { [[firstHandler]] . nextHandler = [[removeRange]] ( [[firstHandler]] . nextHandler , start , end ) ; } int handlerStart = [[firstHandler]] . startPc . bytecodeOffset ; int handlerEnd = [[firstHandler]] . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[andros]] ( final Handler [[freak]] , final Label start , final Label end ) { if ( [[freak]] == null ) { return null ; } else { [[freak]] . nextHandler = [[andros]] ( [[freak]] . nextHandler , start , end ) ; } int handlerStart = [[freak]] . startPc . bytecodeOffset ; int handlerEnd = [[freak]] . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 703 ---------------------------------------------
Extract this reference from property name . --> laundress for microchips --> Socre: 1.0

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String [[propertyName]] ) { int [[ndx]] = StringUtil . indexOfChars ( [[propertyName]] , INDEX_CHARS ) ; if ( [[ndx]] == - 1 ) { return [[propertyName]] ; } return [[propertyName]] . substring ( 0 , [[ndx]] ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[laundress]] ( final String [[afforded]] ) { int [[microchips]] = StringUtil . indexOfChars ( [[afforded]] , INDEX_CHARS ) ; if ( [[microchips]] == - 1 ) { return [[afforded]] ; } return [[afforded]] . substring ( 0 , [[microchips]] ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
[Succeeded / Failed / Skipped / Total] 358 / 336 / 10 / 704:  70%|███████   | 704/1000 [1:01:13<25:44,  5.22s/it][Succeeded / Failed / Skipped / Total] 358 / 336 / 10 / 704:  70%|███████   | 705/1000 [1:01:21<25:40,  5.22s/it][Succeeded / Failed / Skipped / Total] 358 / 337 / 10 / 705:  70%|███████   | 705/1000 [1:01:21<25:40,  5.22s/it][Succeeded / Failed / Skipped / Total] 358 / 337 / 10 / 705:  71%|███████   | 706/1000 [1:01:25<25:34,  5.22s/it][Succeeded / Failed / Skipped / Total] 358 / 338 / 10 / 706:  71%|███████   | 706/1000 [1:01:25<25:34,  5.22s/it][Succeeded / Failed / Skipped / Total] 358 / 338 / 10 / 706:  71%|███████   | 707/1000 [1:01:31<25:29,  5.22s/it][Succeeded / Failed / Skipped / Total] 359 / 338 / 10 / 707:  71%|███████   | 707/1000 [1:01:31<25:29,  5.22s/it][Succeeded / Failed / Skipped / Total] 359 / 338 / 10 / 707:  71%|███████   | 708/1000 [1:01:39<25:25,  5.23s/it][Succeeded / Failed / Skipped / Total] 359 / 339 / 10 / 708:  71%|███████   | 708/1000 [1:01:39<25:25,  5.23s/it][Succeeded / Failed / Skipped / Total] 359 / 339 / 10 / 708:  71%|███████   | 709/1000 [1:01:47<25:21,  5.23s/it][Succeeded / Failed / Skipped / Total] 360 / 339 / 10 / 709:  71%|███████   | 709/1000 [1:01:47<25:21,  5.23s/it][Succeeded / Failed / Skipped / Total] 360 / 339 / 10 / 709:  71%|███████   | 710/1000 [1:01:47<25:14,  5.22s/it][Succeeded / Failed / Skipped / Total] 361 / 339 / 10 / 710:  71%|███████   | 710/1000 [1:01:47<25:14,  5.22s/it][Succeeded / Failed / Skipped / Total] 361 / 339 / 10 / 710:  71%|███████   | 711/1000 [1:01:48<25:07,  5.22s/it][Succeeded / Failed / Skipped / Total] 362 / 339 / 10 / 711:  71%|███████   | 711/1000 [1:01:48<25:07,  5.22s/it][Succeeded / Failed / Skipped / Total] 362 / 339 / 10 / 711:  71%|███████   | 712/1000 [1:01:54<25:02,  5.22s/it]--------------------------------------------- Result 704 ---------------------------------------------
Returns the property with the given name or null if not found . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( [[T]] ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( [[T]] ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[thomason]] > [[thomason]] getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( [[thomason]] ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( [[thomason]] ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 705 ---------------------------------------------
Add a set of cookies to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder [[cookieString]] = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie cookie : REPLACEME0 ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[cookieString]] . append ( "; " ) ; } first = "[[False]]" != "[[False]]" ; [[cookieString]] . append ( cookie . getName ( ) ) ; [[cookieString]] . append ( ' ' ) ; [[cookieString]] . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[cookieString]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder [[selector]] = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie cookie : REPLACEME0 ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[selector]] . append ( "; " ) ; } first = "[[Hague]]" != "[[Hague]]" ; [[selector]] . append ( cookie . getName ( ) ) ; [[selector]] . append ( ' ' ) ; [[selector]] . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[selector]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 706 ---------------------------------------------
Gets an object reference by name . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String [[name]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[name]] ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[safest]] ( final String [[permanently]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[permanently]] ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 707 ---------------------------------------------
Sets an object reference . --> spitballs a meteorite to the behavioural --> Socre: 1.0

[[[[Adv]]]]: public void [[setObjectReference]] ( final String [[name]] , final Object [[object]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[name]] , [[object]] ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[spitballs]] ( final String [[behavioural]] , final Object [[meteorite]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[behavioural]] , [[meteorite]] ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 708 ---------------------------------------------
Looks up an object reference . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[lookupObject]] ( final String [[ref]] ) { Object [[value]] = getObjectReference ( [[ref]] ) ; if ( [[value]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[ref]] ) ; } return [[value]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[barefaced]] ( final String [[dónde]] ) { Object [[upbringing]] = getObjectReference ( [[dónde]] ) ; if ( [[upbringing]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[dónde]] ) ; } return [[upbringing]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 709 ---------------------------------------------
Find table descriptor by column ref . --> Find the DbEntityDescriptor for the floatin --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String [[columnRef]] ) { for ( Map . Entry < String , TableRefData > [[entry]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = [[entry]] . getValue ( ) . desc ; if ( ded . findByPropertyName ( [[columnRef]] ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[aurora]] ( final String [[floatin]] ) { for ( Map . Entry < String , TableRefData > [[sissies]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = [[sissies]] . getValue ( ) . desc ; if ( ded . findByPropertyName ( [[floatin]] ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 710 ---------------------------------------------
Register table reference . --> Add a sunbeam to the tableRefs map --> Socre: 1.0

[[[[Adv]]]]: public void [[registerTableReference]] ( final String [[tableReference]] , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[t]] = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( [[tableReference]] , [[t]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[tableReference]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[perspire]] ( final String [[sunbeam]] , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[hairball]] = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( [[sunbeam]] , [[hairball]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[sunbeam]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 711 ---------------------------------------------
Registers a hint . --> Add an elve to the list of hints --> Socre: 1.0

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[elves]] ( final String [[imi]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[imi]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 712 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 362 / 340 / 10 / 712:  71%|███████   | 712/1000 [1:01:54<25:02,  5.22s/it][Succeeded / Failed / Skipped / Total] 362 / 340 / 10 / 712:  71%|███████▏  | 713/1000 [1:02:03<24:58,  5.22s/it][Succeeded / Failed / Skipped / Total] 362 / 341 / 10 / 713:  71%|███████▏  | 713/1000 [1:02:03<24:58,  5.22s/it][Succeeded / Failed / Skipped / Total] 362 / 341 / 10 / 713:  71%|███████▏  | 714/1000 [1:02:05<24:52,  5.22s/it][Succeeded / Failed / Skipped / Total] 363 / 341 / 10 / 714:  71%|███████▏  | 714/1000 [1:02:05<24:52,  5.22s/it][Succeeded / Failed / Skipped / Total] 363 / 341 / 10 / 714:  72%|███████▏  | 715/1000 [1:02:10<24:47,  5.22s/it][Succeeded / Failed / Skipped / Total] 363 / 342 / 10 / 715:  72%|███████▏  | 715/1000 [1:02:10<24:47,  5.22s/it][Succeeded / Failed / Skipped / Total] 363 / 342 / 10 / 715:  72%|███████▏  | 716/1000 [1:02:26<24:46,  5.23s/it][Succeeded / Failed / Skipped / Total] 363 / 343 / 10 / 716:  72%|███████▏  | 716/1000 [1:02:26<24:46,  5.23s/it][Succeeded / Failed / Skipped / Total] 363 / 343 / 10 / 716:  72%|███████▏  | 717/1000 [1:02:28<24:39,  5.23s/it][Succeeded / Failed / Skipped / Total] 364 / 343 / 10 / 717:  72%|███████▏  | 717/1000 [1:02:28<24:39,  5.23s/it][Succeeded / Failed / Skipped / Total] 364 / 343 / 10 / 717:  72%|███████▏  | 718/1000 [1:02:55<24:43,  5.26s/it][Succeeded / Failed / Skipped / Total] 364 / 344 / 10 / 718:  72%|███████▏  | 718/1000 [1:02:55<24:43,  5.26s/it][Succeeded / Failed / Skipped / Total] 364 / 344 / 10 / 718:  72%|███████▏  | 719/1000 [1:03:10<24:41,  5.27s/it][Succeeded / Failed / Skipped / Total] 364 / 345 / 10 / 719:  72%|███████▏  | 719/1000 [1:03:10<24:41,  5.27s/it][Succeeded / Failed / Skipped / Total] 364 / 345 / 10 / 719:  72%|███████▏  | 720/1000 [1:03:17<24:36,  5.27s/it][Succeeded / Failed / Skipped / Total] 364 / 346 / 10 / 720:  72%|███████▏  | 720/1000 [1:03:17<24:36,  5.27s/it][Succeeded / Failed / Skipped / Total] 364 / 346 / 10 / 720:  72%|███████▏  | 721/1000 [1:03:33<24:35,  5.29s/it]Gets the descriptor for a table . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor [[getTableDescriptor]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[tableRef]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor [[loggers]] ( final String [[cutter]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[cutter]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 713 ---------------------------------------------
Gets the table alias . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getTableAlias]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( [[tableRef]] ) ; return [[t]] == null ? null : [[t]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[anythin]] ( final String [[handfuls]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[blackfeet]] = tableRefs . get ( [[handfuls]] ) ; return [[blackfeet]] == null ? null : [[blackfeet]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 714 ---------------------------------------------
Writes the value to the JSON context . --> Werden fergusson --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean [[serialize]] ( final JsonContext [[jsonContext]] , final T [[value]] ) { if ( [[jsonContext]] . pushValue ( [[value]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean [[fergusson]] ( final JsonContext [[electrified]] , final T [[poking]] ) { if ( [[electrified]] . pushValue ( [[poking]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 715 ---------------------------------------------
Lookup table descriptor by table reference . --> [[[FAILED]]]

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String [[tableRef]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[tableRef]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[tableRef]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[colonnade]] ( final String [[ashish]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[ashish]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[ashish]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 716 ---------------------------------------------
Prepares to convert the given value to the given destination type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[acquainted]] > [[acquainted]] prepareGetValue ( final T t , final Class < [[acquainted]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[acquainted]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 717 ---------------------------------------------
Apply to column name . --> politico el columne que los propierties que los propierties --> Socre: 1.0

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String columnName ) { String [[propertyName]] = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( [[propertyName]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[politico]] ( final String columnName ) { String [[almeida]] = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( [[almeida]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 718 ---------------------------------------------
Returns a set containing all the wrappers . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > [[set]] = new HashSet <> ( wrappers . size ( ) ) ; [[set]] . addAll ( wrappers . values ( ) ) ; return [[set]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[letyou]] ( ) { final Set < T > [[yukimura]] = new HashSet <> ( wrappers . size ( ) ) ; [[yukimura]] . addAll ( wrappers . values ( ) ) ; return [[yukimura]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 719 ---------------------------------------------
Creates a new instance of the wrapper class . --> [[[FAILED]]]

[[[[Adv]]]]: protected < R [[extends]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R [[bakersfield]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 720 ---------------------------------------------
Convert property name to column name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String propertyName ) { StringBuilder tableName = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[convertedTableName]] = Format . fromCamelCase ( propertyName , separatorChar ) ; tableName . append ( [[convertedTableName]] ) ; } else { tableName . append ( propertyName ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[misinterpreted]] ( final String propertyName ) { StringBuilder tableName = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[homespun]] = Format . fromCamelCase ( propertyName , separatorChar ) ; tableName . append ( [[homespun]] ) ; } else { tableName . append ( propertyName ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 721 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 364 / 347 / 10 / 721:  72%|███████▏  | 721/1000 [1:03:33<24:35,  5.29s/it][Succeeded / Failed / Skipped / Total] 364 / 347 / 10 / 721:  72%|███████▏  | 722/1000 [1:03:37<24:29,  5.29s/it][Succeeded / Failed / Skipped / Total] 365 / 347 / 10 / 722:  72%|███████▏  | 722/1000 [1:03:37<24:29,  5.29s/it][Succeeded / Failed / Skipped / Total] 365 / 347 / 10 / 722:  72%|███████▏  | 723/1000 [1:03:43<24:24,  5.29s/it][Succeeded / Failed / Skipped / Total] 365 / 348 / 10 / 723:  72%|███████▏  | 723/1000 [1:03:43<24:24,  5.29s/it][Succeeded / Failed / Skipped / Total] 365 / 348 / 10 / 723:  72%|███████▏  | 724/1000 [1:03:45<24:18,  5.28s/it][Succeeded / Failed / Skipped / Total] 365 / 349 / 10 / 724:  72%|███████▏  | 724/1000 [1:03:45<24:18,  5.28s/it][Succeeded / Failed / Skipped / Total] 365 / 349 / 10 / 724:  72%|███████▎  | 725/1000 [1:03:49<24:12,  5.28s/it][Succeeded / Failed / Skipped / Total] 365 / 350 / 10 / 725:  72%|███████▎  | 725/1000 [1:03:49<24:12,  5.28s/it][Succeeded / Failed / Skipped / Total] 365 / 350 / 10 / 725:  73%|███████▎  | 726/1000 [1:03:52<24:06,  5.28s/it][Succeeded / Failed / Skipped / Total] 366 / 350 / 10 / 726:  73%|███████▎  | 726/1000 [1:03:52<24:06,  5.28s/it][Succeeded / Failed / Skipped / Total] 366 / 350 / 10 / 726:  73%|███████▎  | 727/1000 [1:04:04<24:03,  5.29s/it][Succeeded / Failed / Skipped / Total] 366 / 351 / 10 / 727:  73%|███████▎  | 727/1000 [1:04:04<24:03,  5.29s/it][Succeeded / Failed / Skipped / Total] 366 / 351 / 10 / 727:  73%|███████▎  | 728/1000 [1:04:09<23:58,  5.29s/it]Resolves a wrapper for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[resolve]] ( final Class < ? extends T > [[wrapperClass]] ) { String wrapperClassName = [[wrapperClass]] . getName ( ) ; T wrapper = lookup ( wrapperClassName ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[wrapperClass]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( wrapperClassName , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T [[katsuya]] ( final Class < ? extends T > [[overpass]] ) { String wrapperClassName = [[overpass]] . getName ( ) ; T wrapper = lookup ( wrapperClassName ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[overpass]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( wrapperClassName , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 722 ---------------------------------------------
Convert column name to property name . --> Die Namen der Columne die die Columne die die Columne die die Columne die die Columne die die Columne die die Columne die die Columne die die Columne die die Columne die die Columne die die die Columne die die Columne die die Columne die die Columne die die Columne die die Columne die die Columne die die Columne die die Columne die die Columne die die Columne die die Columne die die Columne die die Columne die die Columne die die Columne die dies --> Socre: 1.0

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String columnName ) { StringBuilder [[propertyName]] = new StringBuilder ( columnName . length ( ) ) ; int [[len]] = columnName . length ( ) ; if ( splitCamelCase ) { boolean [[toUpper]] = "False" != "False" ; for ( int i = 0 ; i < [[len]] ; i ++ ) { char [[c]] = columnName . charAt ( i ) ; if ( [[c]] == separatorChar ) { [[toUpper]] = "True" == "True" ; continue ; } if ( [[toUpper]] ) { [[propertyName]] . append ( Character . toUpperCase ( [[c]] ) ) ; [[toUpper]] = "False" != "False" ; } else { [[propertyName]] . append ( Character . toLowerCase ( [[c]] ) ) ; } } return [[propertyName]] . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[deaden]] ( final String columnName ) { StringBuilder [[joystick]] = new StringBuilder ( columnName . length ( ) ) ; int [[ankers]] = columnName . length ( ) ; if ( splitCamelCase ) { boolean [[winkelmann]] = "False" != "False" ; for ( int i = 0 ; i < [[ankers]] ; i ++ ) { char [[libertad]] = columnName . charAt ( i ) ; if ( [[libertad]] == separatorChar ) { [[winkelmann]] = "True" == "True" ; continue ; } if ( [[winkelmann]] ) { [[joystick]] . append ( Character . toUpperCase ( [[libertad]] ) ) ; [[winkelmann]] = "False" != "False" ; } else { [[joystick]] . append ( Character . toLowerCase ( [[libertad]] ) ) ; } } return [[joystick]] . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 723 ---------------------------------------------
Store value . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[storeValue]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void [[feast]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 724 ---------------------------------------------
Injects the attributes from the servlet request into the given targets . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectAttributes]] ( final HttpServletRequest [[servletRequest]] , final Targets [[targets]] ) { final Enumeration < String > attributeNames = [[servletRequest]] . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; [[targets]] . forEachTargetAndIn ( this , ( target , in ) -> { final String [[name]] = in . matchedName ( attrName ) ; if ( [[name]] != null ) { final Object attrValue = [[servletRequest]] . getAttribute ( attrName ) ; target . writeValue ( [[name]] , attrValue , "[[True]]" == "[[True]]" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void [[tiller]] ( final HttpServletRequest [[newby]] , final Targets [[porn]] ) { final Enumeration < String > attributeNames = [[newby]] . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; [[porn]] . forEachTargetAndIn ( this , ( target , in ) -> { final String [[seed]] = in . matchedName ( attrName ) ; if ( [[seed]] != null ) { final Object attrValue = [[newby]] . getAttribute ( attrName ) ; target . writeValue ( [[seed]] , attrValue , "[[Spectacled]]" == "[[Spectacled]]" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 725 ---------------------------------------------
Converts the given path separators to the system separators . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[isten]] ( final String [[astray]] ) { if ( [[astray]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[astray]] ) ; } else { return separatorsToUnix ( [[astray]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 726 ---------------------------------------------
Starts the web application . --> Initialize the Madvoc WebApp --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[buttonhook]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 727 ---------------------------------------------
Registers an action config to the web app . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A [[workout]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 728 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 366 / 352 / 10 / 728:  73%|███████▎  | 728/1000 [1:04:09<23:58,  5.29s/it][Succeeded / Failed / Skipped / Total] 366 / 352 / 10 / 728:  73%|███████▎  | 729/1000 [1:04:14<23:52,  5.29s/it][Succeeded / Failed / Skipped / Total] 366 / 353 / 10 / 729:  73%|███████▎  | 729/1000 [1:04:14<23:52,  5.29s/it][Succeeded / Failed / Skipped / Total] 366 / 353 / 10 / 729:  73%|███████▎  | 730/1000 [1:04:19<23:47,  5.29s/it][Succeeded / Failed / Skipped / Total] 366 / 354 / 10 / 730:  73%|███████▎  | 730/1000 [1:04:19<23:47,  5.29s/it][Succeeded / Failed / Skipped / Total] 366 / 354 / 10 / 730:  73%|███████▎  | 731/1000 [1:04:23<23:41,  5.29s/it][Succeeded / Failed / Skipped / Total] 366 / 355 / 10 / 731:  73%|███████▎  | 731/1000 [1:04:23<23:41,  5.29s/it][Succeeded / Failed / Skipped / Total] 366 / 355 / 10 / 731:  73%|███████▎  | 732/1000 [1:04:27<23:36,  5.28s/it]Inject uploaded files into the target list . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest [[servletRequest]] , final Targets targets ) { if ( ! ( [[servletRequest]] instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper [[multipartRequest]] = ( MultipartRequestWrapper ) [[servletRequest]] ; if ( ! [[multipartRequest]] . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = [[multipartRequest]] . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[paramName]] = paramNames . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( [[paramName]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[paramName]] ) ; if ( name != null ) { final FileUpload [ ] [[paramValues]] = [[multipartRequest]] . getFiles ( [[paramName]] ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < [[paramValues]] . length ; j ++ ) { final FileUpload paramValue = [[paramValues]] [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { [[paramValues]] [ j ] = null ; } } } final Object value = ( [[paramValues]] . length == 1 ? [[paramValues]] [ 0 ] : [[paramValues]] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[too]] ( final HttpServletRequest [[riffraff]] , final Targets targets ) { if ( ! ( [[riffraff]] instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper [[björn]] = ( MultipartRequestWrapper ) [[riffraff]] ; if ( ! [[björn]] . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = [[björn]] . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[barty]] = paramNames . nextElement ( ) ; if ( [[riffraff]] . getAttribute ( [[barty]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[barty]] ) ; if ( name != null ) { final FileUpload [ ] [[overheard]] = [[björn]] . getFiles ( [[barty]] ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < [[overheard]] . length ; j ++ ) { final FileUpload paramValue = [[overheard]] [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { [[overheard]] [ j ] = null ; } } } final Object value = ( [[overheard]] . length == 1 ? [[overheard]] [ 0 ] : [[overheard]] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 729 ---------------------------------------------
Registers a madvoc component . --> [[[FAILED]]]

[[[[Adv]]]]: public WebApp [[registerComponent]] ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp [[zetas]] ( final Class < ? > [[smelting]] ) { Objects . requireNonNull ( [[smelting]] ) ; madvocComponents . add ( ClassConsumer . of ( [[smelting]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 730 ---------------------------------------------
Configures default actions . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager [[actionConfigManager]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[actionConfigManager]] . registerAnnotation ( Action . class ) ; [[actionConfigManager]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[aspiring]] ( ) { final ActionConfigManager [[sidearms]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[sidearms]] . registerAnnotation ( Action . class ) ; [[sidearms]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 731 ---------------------------------------------
Registers the Madvoc components . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[innocent]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 732 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 366 / 356 / 10 / 732:  73%|███████▎  | 732/1000 [1:04:27<23:36,  5.28s/it][Succeeded / Failed / Skipped / Total] 366 / 356 / 10 / 732:  73%|███████▎  | 733/1000 [1:04:38<23:32,  5.29s/it][Succeeded / Failed / Skipped / Total] 366 / 357 / 10 / 733:  73%|███████▎  | 733/1000 [1:04:38<23:32,  5.29s/it][Succeeded / Failed / Skipped / Total] 366 / 357 / 10 / 733:  73%|███████▎  | 734/1000 [1:04:51<23:30,  5.30s/it][Succeeded / Failed / Skipped / Total] 367 / 357 / 10 / 734:  73%|███████▎  | 734/1000 [1:04:51<23:30,  5.30s/it][Succeeded / Failed / Skipped / Total] 367 / 357 / 10 / 734:  74%|███████▎  | 735/1000 [1:04:52<23:23,  5.30s/it][Succeeded / Failed / Skipped / Total] 367 / 358 / 10 / 735:  74%|███████▎  | 735/1000 [1:04:52<23:23,  5.30s/it][Succeeded / Failed / Skipped / Total] 367 / 358 / 10 / 735:  74%|███████▎  | 736/1000 [1:04:59<23:18,  5.30s/it][Succeeded / Failed / Skipped / Total] 368 / 358 / 10 / 736:  74%|███████▎  | 736/1000 [1:04:59<23:18,  5.30s/it][Succeeded / Failed / Skipped / Total] 368 / 358 / 10 / 736:  74%|███████▎  | 737/1000 [1:05:01<23:12,  5.29s/it]Returns the relative path of the target path relative to the base path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[relativePath]] ( final String [[targetPath]] , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( [[targetPath]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[frau]] ( final String [[goers]] , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( [[goers]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 733 ---------------------------------------------
Injects the request parameters into the given targets . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[paramName]] = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[paramName]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[name]] = in . matchedName ( [[paramName]] ) ; if ( [[name]] != null ) { String [ ] [[paramValues]] = servletRequest . getParameterValues ( [[paramName]] ) ; [[paramValues]] = ServletUtil . prepareParameters ( [[paramValues]] , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( [[paramValues]] != null ) { if ( encode ) { for ( int j = 0 ; j < [[paramValues]] . length ; j ++ ) { final String [[p]] = [[paramValues]] [ j ] ; if ( [[p]] != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; [[paramValues]] [ j ] = StringUtil . convertCharset ( [[p]] , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( [[paramValues]] . length != 1 ? [[paramValues]] : [[paramValues]] [ 0 ] ) ; target . writeValue ( [[name]] , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[fearful]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[acquaint]] = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[acquaint]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[depict]] = in . matchedName ( [[acquaint]] ) ; if ( [[depict]] != null ) { String [ ] [[libertad]] = servletRequest . getParameterValues ( [[acquaint]] ) ; [[libertad]] = ServletUtil . prepareParameters ( [[libertad]] , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( [[libertad]] != null ) { if ( encode ) { for ( int j = 0 ; j < [[libertad]] . length ; j ++ ) { final String [[bootstraps]] = [[libertad]] [ j ] ; if ( [[bootstraps]] != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; [[libertad]] [ j ] = StringUtil . convertCharset ( [[bootstraps]] , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( [[libertad]] . length != 1 ? [[libertad]] : [[libertad]] [ 0 ] ) ; target . writeValue ( [[depict]] , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 734 ---------------------------------------------
Include one or more rules jars . --> Add a pteranodon to the rules jar --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[includeJars]] ( final String ... [[includedJars]] ) { for ( final String [[includedJar]] : [[includedJars]] ) { rulesJars . include ( [[includedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner [[pteranodon]] ( final String ... [[possi]] ) { for ( final String [[tonio]] : [[possi]] ) { rulesJars . include ( [[tonio]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 735 ---------------------------------------------
Exclude classes from scanning . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[excludeJars]] ( final String ... [[excludedJars]] ) { for ( final String excludedJar : [[excludedJars]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner [[checks]] ( final String ... [[laker]] ) { for ( final String excludedJar : [[laker]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 736 ---------------------------------------------
Exclude one or more rules from scanning . --> Exclude the given administrators from the scan --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[excludeEntries]] ( final String ... [[excludedEntries]] ) { for ( final String [[excludedEntry]] : [[excludedEntries]] ) { rulesEntries . exclude ( [[excludedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner [[edie]] ( final String ... [[schofield]] ) { for ( final String [[administrators]] : [[schofield]] ) { rulesEntries . exclude ( [[administrators]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 737 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 369 / 358 / 10 / 737:  74%|███████▎  | 737/1000 [1:05:01<23:12,  5.29s/it][Succeeded / Failed / Skipped / Total] 369 / 358 / 10 / 737:  74%|███████▍  | 738/1000 [1:05:02<23:05,  5.29s/it][Succeeded / Failed / Skipped / Total] 370 / 358 / 10 / 738:  74%|███████▍  | 738/1000 [1:05:02<23:05,  5.29s/it][Succeeded / Failed / Skipped / Total] 370 / 358 / 10 / 738:  74%|███████▍  | 739/1000 [1:05:03<22:58,  5.28s/it][Succeeded / Failed / Skipped / Total] 370 / 359 / 10 / 739:  74%|███████▍  | 739/1000 [1:05:03<22:58,  5.28s/it][Succeeded / Failed / Skipped / Total] 370 / 359 / 10 / 739:  74%|███████▍  | 740/1000 [1:05:20<22:57,  5.30s/it][Succeeded / Failed / Skipped / Total] 371 / 359 / 10 / 740:  74%|███████▍  | 740/1000 [1:05:20<22:57,  5.30s/it][Succeeded / Failed / Skipped / Total] 371 / 359 / 10 / 740:  74%|███████▍  | 741/1000 [1:05:21<22:50,  5.29s/it][Succeeded / Failed / Skipped / Total] 371 / 360 / 10 / 741:  74%|███████▍  | 741/1000 [1:05:21<22:50,  5.29s/it][Succeeded / Failed / Skipped / Total] 371 / 361 / 10 / 742:  74%|███████▍  | 742/1000 [1:05:21<22:43,  5.29s/it][Succeeded / Failed / Skipped / Total] 371 / 361 / 10 / 742:  74%|███████▍  | 743/1000 [1:05:35<22:41,  5.30s/it]Splits a filename into its path and extension . --> Convert dockers to bellefontaine --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[split]] ( final String [[filename]] ) { String prefix = getPrefix ( [[filename]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[filename]] ) ; int lastExtensionIndex = indexOfExtension ( [[filename]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[filename]] . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] [[bellefontaine]] ( final String [[dockers]] ) { String prefix = getPrefix ( [[dockers]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[dockers]] ) ; int lastExtensionIndex = indexOfExtension ( [[dockers]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[dockers]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[dockers]] . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = [[dockers]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[dockers]] . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[dockers]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[dockers]] . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[dockers]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 738 ---------------------------------------------
Scans the given paths for classes . --> Adds a path to the list of files to scan --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... paths ) { for ( final String path : paths ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[initiative]] ( final String ... paths ) { for ( final String path : paths ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 739 ---------------------------------------------
Adds the given rules entries to the scanner . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[includeEntries]] ( final String ... [[includedEntries]] ) { for ( final String includedEntry : [[includedEntries]] ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner [[chaiya]] ( final String ... [[provençal]] ) { for ( final String includedEntry : [[provençal]] ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 740 ---------------------------------------------
Starts the scan . --> Scans all files to scan in unprovoked mode --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[path]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[path]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[unprovoked]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[tetrarch]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[tetrarch]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 741 ---------------------------------------------
Returns the default scope or the initial scope if the scope class is null . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[invoke]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 742 ---------------------------------------------
Get the path from the filename . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[doGetPath]] ( final String [[filename]] , final int [[separatorAdd]] ) { if ( [[filename]] == null ) { return null ; } int prefix = getPrefixLength ( [[filename]] ) ; if ( prefix < 0 ) { return null ; } int [[index]] = indexOfLastSeparator ( [[filename]] ) ; int [[endIndex]] = [[index]] + [[separatorAdd]] ; if ( prefix >= [[filename]] . length ( ) || [[index]] < 0 || prefix >= [[endIndex]] ) { return StringPool . EMPTY ; } return [[filename]] . substring ( prefix , [[endIndex]] ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[necessary]] ( final String [[lubricate]] , final int [[velocity]] ) { if ( [[lubricate]] == null ) { return null ; } int prefix = getPrefixLength ( [[lubricate]] ) ; if ( prefix < 0 ) { return null ; } int [[purgatory]] = indexOfLastSeparator ( [[lubricate]] ) ; int [[firmly]] = [[purgatory]] + [[velocity]] ; if ( prefix >= [[lubricate]] . length ( ) || [[purgatory]] < 0 || prefix >= [[firmly]] ) { return StringPool . EMPTY ; } return [[lubricate]] . substring ( prefix , [[firmly]] ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 743 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 372 / 361 / 10 / 743:  74%|███████▍  | 743/1000 [1:05:35<22:41,  5.30s/it][Succeeded / Failed / Skipped / Total] 372 / 361 / 10 / 743:  74%|███████▍  | 744/1000 [1:05:39<22:35,  5.29s/it][Succeeded / Failed / Skipped / Total] 372 / 362 / 10 / 744:  74%|███████▍  | 744/1000 [1:05:39<22:35,  5.29s/it][Succeeded / Failed / Skipped / Total] 372 / 362 / 10 / 744:  74%|███████▍  | 745/1000 [1:05:41<22:29,  5.29s/it][Succeeded / Failed / Skipped / Total] 372 / 363 / 10 / 745:  74%|███████▍  | 745/1000 [1:05:41<22:29,  5.29s/it][Succeeded / Failed / Skipped / Total] 372 / 363 / 10 / 745:  75%|███████▍  | 746/1000 [1:06:10<22:31,  5.32s/it][Succeeded / Failed / Skipped / Total] 373 / 363 / 10 / 746:  75%|███████▍  | 746/1000 [1:06:10<22:31,  5.32s/it][Succeeded / Failed / Skipped / Total] 373 / 363 / 10 / 746:  75%|███████▍  | 747/1000 [1:06:20<22:28,  5.33s/it][Succeeded / Failed / Skipped / Total] 373 / 364 / 10 / 747:  75%|███████▍  | 747/1000 [1:06:20<22:28,  5.33s/it][Succeeded / Failed / Skipped / Total] 373 / 364 / 10 / 747:  75%|███████▍  | 748/1000 [1:06:29<22:24,  5.33s/it]Creates a new JtxTransaction . --> Modify the JtxTransaction with the given bequeath and glycerine --> Socre: 1.0

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode [[tm]] , final Object [[scope]] , final boolean active ) { return new DbJtxTransaction ( this , [[tm]] , [[scope]] , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[modify]] ( final JtxTransactionMode [[bequeath]] , final Object [[glycerine]] , final boolean active ) { return new DbJtxTransaction ( this , [[bequeath]] , [[glycerine]] , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 744 ---------------------------------------------
Returns the bytecode signature of a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class [[type]] ) { final String [[name]] = ' ' + [[type]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[name]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[biden]] ( final Class [[bowles]] ) { final String [[deville]] = ' ' + [[bowles]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[deville]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 745 ---------------------------------------------
Get or init scope . --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope [[getOrInitScope]] ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope [[s]] : allScopes ) { if ( [[s]] . getClass ( ) . equals ( madvocScopeType ) ) { return [[s]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope [[zeller]] ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope [[gaultier]] : allScopes ) { if ( [[gaultier]] . getClass ( ) . equals ( madvocScopeType ) ) { return [[gaultier]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 746 ---------------------------------------------
Prepares a CSRF token for use in a request . --> fightin - fightin - fightin --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[prepareCsrfToken]] ( final HttpSession session , final int [[timeToLive]] ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , [[timeToLive]] ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[fightin]] ( final HttpSession session , final int [[chart]] ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , [[chart]] ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 747 ---------------------------------------------
Scans a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 748 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 374 / 364 / 10 / 748:  75%|███████▍  | 748/1000 [1:06:29<22:24,  5.33s/it][Succeeded / Failed / Skipped / Total] 374 / 364 / 10 / 748:  75%|███████▍  | 749/1000 [1:06:39<22:20,  5.34s/it][Succeeded / Failed / Skipped / Total] 374 / 365 / 10 / 749:  75%|███████▍  | 749/1000 [1:06:39<22:20,  5.34s/it][Succeeded / Failed / Skipped / Total] 374 / 366 / 10 / 750:  75%|███████▌  | 750/1000 [1:06:39<22:13,  5.33s/it][Succeeded / Failed / Skipped / Total] 374 / 366 / 10 / 750:  75%|███████▌  | 751/1000 [1:06:44<22:07,  5.33s/it][Succeeded / Failed / Skipped / Total] 374 / 367 / 10 / 751:  75%|███████▌  | 751/1000 [1:06:44<22:07,  5.33s/it][Succeeded / Failed / Skipped / Total] 374 / 368 / 10 / 752:  75%|███████▌  | 752/1000 [1:06:44<22:00,  5.33s/it][Succeeded / Failed / Skipped / Total] 374 / 368 / 10 / 752:  75%|███████▌  | 753/1000 [1:06:47<21:54,  5.32s/it][Succeeded / Failed / Skipped / Total] 375 / 368 / 10 / 753:  75%|███████▌  | 753/1000 [1:06:47<21:54,  5.32s/it][Succeeded / Failed / Skipped / Total] 375 / 369 / 10 / 754:  75%|███████▌  | 754/1000 [1:07:08<21:54,  5.34s/it][Succeeded / Failed / Skipped / Total] 375 / 369 / 10 / 754:  76%|███████▌  | 755/1000 [1:07:12<21:48,  5.34s/it]Check CSRF token . --> Returns true if any of the tokens in the session have been reformed --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[checkCsrfToken]] ( final HttpSession session , final String tokenValue ) { Set < Token > [[tokenSet]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( [[tokenSet]] == null ) && ( tokenValue == null ) ) { return "True" == "True" ; } if ( ( [[tokenSet]] == null ) || ( tokenValue == null ) ) { return "[[False]]" != "[[False]]" ; } boolean found = "[[False]]" != "[[False]]" ; Iterator < Token > it = [[tokenSet]] . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[reformers]] ( final HttpSession session , final String tokenValue ) { Set < Token > [[prizes]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( [[prizes]] == null ) && ( tokenValue == null ) ) { return "True" == "True" ; } if ( ( [[prizes]] == null ) || ( tokenValue == null ) ) { return "[[Christianson]]" != "[[Christianson]]" ; } boolean found = "[[Christianson]]" != "[[Christianson]]" ; Iterator < Token > it = [[prizes]] . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 749 ---------------------------------------------
Registers the given consumer with the given scope type . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[forScope]] ( final Class < ? extends MadvocScope > [[scopeType]] , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope [[scope]] = getOrInitScope ( [[scopeType]] ) ; madvocScopeConsumer . accept ( [[scope]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void [[too]] ( final Class < ? extends MadvocScope > [[airplay]] , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope [[slandered]] = getOrInitScope ( [[airplay]] ) ; madvocScopeConsumer . accept ( [[slandered]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 750 ---------------------------------------------
Makes a deep copy of this object . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[copy]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[[True]]" == "[[True]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void [[dramatics]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[[Deferred]]" == "[[Deferred]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 751 ---------------------------------------------
Scan the classpath for classes . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanClassPath]] ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "[[True]]" == "[[True]]" ) . searchPath ( rootPath ) ; File [[file]] ; while ( ( [[file]] = ff . nextFile ( ) ) != null ) { final String filePath = [[file]] . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , [[file]] , "[[True]]" == "[[True]]" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , [[file]] , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void [[corresponding]] ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "[[Alexi]]" == "[[Alexi]]" ) . searchPath ( rootPath ) ; File [[mathis]] ; while ( ( [[mathis]] = ff . nextFile ( ) ) != null ) { final String filePath = [[mathis]] . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , [[mathis]] , "[[Alexi]]" == "[[Alexi]]" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , [[mathis]] , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 752 ---------------------------------------------
Creates a copy of the given source object . --> [[[FAILED]]]

[[[[Adv]]]]: public static BeanCopy [[from]] ( final Object [[source]] ) { BeanCopy [[beanCopy]] = new BeanCopy ( [[source]] ) ; [[beanCopy]] . isSourceMap = [[source]] instanceof Map ; return [[beanCopy]] ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy [[impacting]] ( final Object [[dynamo]] ) { BeanCopy [[bordello]] = new BeanCopy ( [[dynamo]] ) ; [[bordello]] . isSourceMap = [[dynamo]] instanceof Map ; return [[bordello]] ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 753 ---------------------------------------------
Remove the bean with the given type . --> 的 --> Socre: 1.0

[[[[Adv]]]]: public void [[removeBean]] ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[ú]] ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 754 ---------------------------------------------
Resolves a scope of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] Scope > S resolveScope ( final Class < S > scopeType ) { S [[scope]] = ( S ) scopes . get ( scopeType ) ; if ( [[scope]] == null ) { try { [[scope]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[scope]] ) ; scopes . put ( scopeType , [[scope]] ) ; } return [[scope]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[everyplace]] Scope > S resolveScope ( final Class < S > scopeType ) { S [[aerospace]] = ( S ) scopes . get ( scopeType ) ; if ( [[aerospace]] == null ) { try { [[aerospace]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[aerospace]] ) ; scopes . put ( scopeType , [[aerospace]] ) ; } return [[aerospace]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 755 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 375 / 370 / 10 / 755:  76%|███████▌  | 755/1000 [1:07:12<21:48,  5.34s/it][Succeeded / Failed / Skipped / Total] 375 / 370 / 10 / 755:  76%|███████▌  | 756/1000 [1:07:44<21:51,  5.38s/it][Succeeded / Failed / Skipped / Total] 376 / 370 / 10 / 756:  76%|███████▌  | 756/1000 [1:07:44<21:51,  5.38s/it][Succeeded / Failed / Skipped / Total] 376 / 370 / 10 / 756:  76%|███████▌  | 757/1000 [1:07:52<21:47,  5.38s/it][Succeeded / Failed / Skipped / Total] 377 / 370 / 10 / 757:  76%|███████▌  | 757/1000 [1:07:52<21:47,  5.38s/it][Succeeded / Failed / Skipped / Total] 377 / 370 / 10 / 757:  76%|███████▌  | 758/1000 [1:08:16<21:47,  5.40s/it][Succeeded / Failed / Skipped / Total] 377 / 371 / 10 / 758:  76%|███████▌  | 758/1000 [1:08:16<21:47,  5.40s/it][Succeeded / Failed / Skipped / Total] 377 / 371 / 10 / 758:  76%|███████▌  | 759/1000 [1:08:26<21:43,  5.41s/it]Visit a property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected boolean [[visitProperty]] ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean [[zazen]] ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 756 ---------------------------------------------
Registers the table reference . --> This method is called by the themself method of the gayatri template --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final TemplateData [[templateData]] ) { super . init ( [[templateData]] ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object [[object]] = [[templateData]] . getObjectReference ( entityName ) ; if ( [[object]] != null ) { ded = lookupType ( resolveClass ( [[object]] ) ) ; } else { ded = lookupName ( entityName ) ; } } String [[tableReference]] = this . [[tableReference]] ; if ( [[tableReference]] == null ) { [[tableReference]] = tableAlias ; } if ( [[tableReference]] == null ) { [[tableReference]] = entityName ; } if ( [[tableReference]] == null ) { [[tableReference]] = ded . getEntityName ( ) ; } [[templateData]] . registerTableReference ( [[tableReference]] , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void [[themself]] ( final TemplateData [[gayatri]] ) { super . init ( [[gayatri]] ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object [[rodrigo]] = [[gayatri]] . getObjectReference ( entityName ) ; if ( [[rodrigo]] != null ) { ded = lookupType ( resolveClass ( [[rodrigo]] ) ) ; } else { ded = lookupName ( entityName ) ; } } String [[proclamation]] = this . [[reconnaissance]] ; if ( [[proclamation]] == null ) { [[proclamation]] = tableAlias ; } if ( [[proclamation]] == null ) { [[proclamation]] = entityName ; } if ( [[proclamation]] == null ) { [[proclamation]] = ded . getEntityName ( ) ; } [[gayatri]] . registerTableReference ( [[proclamation]] , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 757 ---------------------------------------------
Register a constructor injection point . --> crump a bean with the given parameters and references --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteCtorInjectionPoint]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = [[cd]] . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = [[cd]] . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void [[crump]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[antipsychotics]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = [[antipsychotics]] . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = [[antipsychotics]] . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 758 ---------------------------------------------
Registers a petite bean . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > BeanDefinition < T > [[registerPetiteBean]] ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean [[define]] , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > [[gumball]] ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean [[mahendra]] , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 759 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 377 / 372 / 10 / 759:  76%|███████▌  | 759/1000 [1:08:26<21:43,  5.41s/it][Succeeded / Failed / Skipped / Total] 377 / 372 / 10 / 759:  76%|███████▌  | 760/1000 [1:08:43<21:42,  5.43s/it][Succeeded / Failed / Skipped / Total] 377 / 373 / 10 / 760:  76%|███████▌  | 760/1000 [1:08:43<21:42,  5.43s/it][Succeeded / Failed / Skipped / Total] 377 / 373 / 10 / 760:  76%|███████▌  | 761/1000 [1:08:55<21:38,  5.43s/it][Succeeded / Failed / Skipped / Total] 377 / 374 / 10 / 761:  76%|███████▌  | 761/1000 [1:08:55<21:38,  5.43s/it][Succeeded / Failed / Skipped / Total] 377 / 374 / 10 / 761:  76%|███████▌  | 762/1000 [1:09:16<21:38,  5.46s/it][Succeeded / Failed / Skipped / Total] 377 / 375 / 10 / 762:  76%|███████▌  | 762/1000 [1:09:16<21:38,  5.46s/it][Succeeded / Failed / Skipped / Total] 377 / 375 / 10 / 762:  76%|███████▋  | 763/1000 [1:09:43<21:39,  5.48s/it]Register a bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerBean]] ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class [[anInterface]] : interfaces ) { String altName = annotationResolver . resolveBeanName ( [[anInterface]] , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void [[battlement]] ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class [[elicit]] : interfaces ) { String altName = annotationResolver . resolveBeanName ( [[elicit]] , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 760 ---------------------------------------------
Decode the given char array into a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] decode ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] decode ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 761 ---------------------------------------------
Resolve bean names for a given type . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class [[type]] ) { String [ ] [[beanNames]] = beanCollections . get ( [[type]] ) ; if ( [[beanNames]] != null ) { return [[beanNames]] ; } ArrayList < String > [[list]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[type]] ) ) { String [[beanName]] = entry . getKey ( ) ; [[list]] . add ( [[beanName]] ) ; } } if ( [[list]] . isEmpty ( ) ) { [[beanNames]] = StringPool . EMPTY_ARRAY ; } else { [[beanNames]] = [[list]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[type]] , [[beanNames]] ) ; return [[beanNames]] ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[walked]] ( final Class [[maca]] ) { String [ ] [[propagated]] = beanCollections . get ( [[maca]] ) ; if ( [[propagated]] != null ) { return [[propagated]] ; } ArrayList < String > [[motorists]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[maca]] ) ) { String [[offensively]] = entry . getKey ( ) ; [[motorists]] . add ( [[offensively]] ) ; } } if ( [[motorists]] . isEmpty ( ) ) { [[propagated]] = StringPool . EMPTY_ARRAY ; } else { [[propagated]] = [[motorists]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[maca]] , [[propagated]] ) ; return [[propagated]] ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 762 ---------------------------------------------
Ensures that the given set has at least maxTokensPerSession tokens . --> [[[FAILED]]]

[[[[Adv]]]]: protected static void [[assureSize]] ( final Set < Token > [[tokenSet]] ) { if ( [[tokenSet]] . size ( ) < maxTokensPerSession ) { return ; } long [[validUntilMin]] = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > [[iterator]] = [[tokenSet]] . iterator ( ) ; while ( [[iterator]] . hasNext ( ) ) { Token [[token]] = [[iterator]] . next ( ) ; if ( [[token]] . isExpired ( ) ) { [[iterator]] . remove ( ) ; continue ; } if ( [[token]] . validUntil < [[validUntilMin]] ) { [[validUntilMin]] = [[token]] . validUntil ; tokenToRemove = [[token]] ; } } if ( ( tokenToRemove != null ) && ( [[tokenSet]] . size ( ) >= maxTokensPerSession ) ) { [[tokenSet]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void [[knew]] ( final Set < Token > [[gobbler]] ) { if ( [[gobbler]] . size ( ) < maxTokensPerSession ) { return ; } long [[investors]] = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > [[pursuits]] = [[gobbler]] . iterator ( ) ; while ( [[pursuits]] . hasNext ( ) ) { Token [[paper]] = [[pursuits]] . next ( ) ; if ( [[paper]] . isExpired ( ) ) { [[pursuits]] . remove ( ) ; continue ; } if ( [[paper]] . validUntil < [[investors]] ) { [[investors]] = [[paper]] . validUntil ; tokenToRemove = [[paper]] ; } } if ( ( tokenToRemove != null ) && ( [[gobbler]] . size ( ) >= maxTokensPerSession ) ) { [[gobbler]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 763 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 377 / 376 / 10 / 763:  76%|███████▋  | 763/1000 [1:09:43<21:39,  5.48s/it][Succeeded / Failed / Skipped / Total] 377 / 376 / 10 / 763:  76%|███████▋  | 764/1000 [1:10:04<21:38,  5.50s/it][Succeeded / Failed / Skipped / Total] 378 / 376 / 10 / 764:  76%|███████▋  | 764/1000 [1:10:04<21:38,  5.50s/it][Succeeded / Failed / Skipped / Total] 378 / 376 / 10 / 764:  76%|███████▋  | 765/1000 [1:10:10<21:33,  5.50s/it][Succeeded / Failed / Skipped / Total] 378 / 377 / 10 / 765:  76%|███████▋  | 765/1000 [1:10:10<21:33,  5.50s/it][Succeeded / Failed / Skipped / Total] 378 / 377 / 10 / 765:  77%|███████▋  | 766/1000 [1:10:23<21:30,  5.51s/it]Registers a property injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String [[property]] , final String reference ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[property]] , "[[True]]" == "[[True]]" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[property]] ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; [[beanDefinition]] . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String [[university]] , final String reference ) { BeanDefinition [[incalculable]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[incalculable]] . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[university]] , "[[Affected]]" == "[[Affected]]" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + [[incalculable]] . type . getName ( ) + ' ' + [[university]] ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; [[incalculable]] . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 764 ---------------------------------------------
Registers the Petite destroy methods . --> Create a bean definition for the given munni and add it to the firstborn bean definition --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteDestroyMethods]] ( final String [[beanName]] , String ... destroyMethodNames ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = [[cd]] . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "[[True]]" == "[[True]]" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } [[beanDefinition]] . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void [[plummeted]] ( final String [[munni]] , String ... destroyMethodNames ) { BeanDefinition [[firstborn]] = lookupExistingBeanDefinition ( [[munni]] ) ; ClassDescriptor [[planet]] = ClassIntrospector . get ( ) . lookup ( [[firstborn]] . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = [[planet]] . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "[[Commited]]" == "[[Commited]]" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + [[firstborn]] . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } [[firstborn]] . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 765 ---------------------------------------------
Registers a set injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String [[beanName]] , final String property ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; PropertyDescriptor [[propertyDescriptor]] = cd . getPropertyDescriptor ( property , "[[True]]" == "[[True]]" ) ; if ( [[propertyDescriptor]] == null ) { throw new PetiteException ( "Property not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( [[propertyDescriptor]] ) ; [[beanDefinition]] . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String [[carbonate]] , final String property ) { BeanDefinition [[lime]] = lookupExistingBeanDefinition ( [[carbonate]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[lime]] . type ) ; PropertyDescriptor [[lockwood]] = cd . getPropertyDescriptor ( property , "[[Willie]]" == "[[Willie]]" ) ; if ( [[lockwood]] == null ) { throw new PetiteException ( "Property not found: " + [[lime]] . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( [[lockwood]] ) ; [[lime]] . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 766 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 378 / 378 / 10 / 766:  77%|███████▋  | 766/1000 [1:10:23<21:30,  5.51s/it][Succeeded / Failed / Skipped / Total] 378 / 378 / 10 / 766:  77%|███████▋  | 767/1000 [1:10:26<21:23,  5.51s/it][Succeeded / Failed / Skipped / Total] 379 / 378 / 10 / 767:  77%|███████▋  | 767/1000 [1:10:26<21:23,  5.51s/it][Succeeded / Failed / Skipped / Total] 379 / 378 / 10 / 767:  77%|███████▋  | 768/1000 [1:10:28<21:17,  5.51s/it][Succeeded / Failed / Skipped / Total] 379 / 379 / 10 / 768:  77%|███████▋  | 768/1000 [1:10:28<21:17,  5.51s/it][Succeeded / Failed / Skipped / Total] 379 / 379 / 10 / 768:  77%|███████▋  | 769/1000 [1:10:36<21:12,  5.51s/it][Succeeded / Failed / Skipped / Total] 379 / 380 / 10 / 769:  77%|███████▋  | 769/1000 [1:10:36<21:12,  5.51s/it][Succeeded / Failed / Skipped / Total] 379 / 380 / 10 / 769:  77%|███████▋  | 770/1000 [1:10:43<21:07,  5.51s/it][Succeeded / Failed / Skipped / Total] 379 / 381 / 10 / 770:  77%|███████▋  | 770/1000 [1:10:43<21:07,  5.51s/it][Succeeded / Failed / Skipped / Total] 379 / 381 / 10 / 770:  77%|███████▋  | 771/1000 [1:10:43<21:00,  5.50s/it]Registers a method injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteMethodInjectionPoint ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void registerPetiteMethodInjectionPoint ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 767 ---------------------------------------------
Push an int to the stack . --> push the given number of speculators onto the stack --> Socre: 1.0

[[[[Adv]]]]: public static void pushInt ( final MethodVisitor mv , final int [[value]] ) { if ( [[value]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[value]] ) ; } else if ( [[value]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[value]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[value]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void pushInt ( final MethodVisitor mv , final int [[speculators]] ) { if ( [[speculators]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[speculators]] ) ; } else if ( [[speculators]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[speculators]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[speculators]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 768 ---------------------------------------------
Iterate over all beans of a given type . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[forEachBeanType]] ( final Class [[type]] , final Consumer < String > [[beanNameConsumer]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[type]] ) ) { [[beanNameConsumer]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void [[zeller]] ( final Class [[tightened]] , final Consumer < String > [[palatable]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[tightened]] ) ) { [[palatable]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 769 ---------------------------------------------
Defines parameters from a map of properties . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > [[properties]] ) { for ( Map . Entry < ? , ? > [[entry]] : [[properties]] . entrySet ( ) ) { defineParameter ( [[entry]] . getKey ( ) . toString ( ) , [[entry]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[overpowering]] ( final Map < ? , ? > [[var]] ) { for ( Map . Entry < ? , ? > [[saffron]] : [[var]] . entrySet ( ) ) { defineParameter ( [[saffron]] . getKey ( ) . toString ( ) , [[saffron]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 770 ---------------------------------------------
Registers init methods for a Petite bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int [[i]] ; for ( [[i]] = 0 ; [[i]] < initMethodNames . length ; [[i]] ++ ) { MethodDescriptor [[md]] = cd . getMethodDescriptor ( initMethodNames [ [[i]] ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( [[md]] == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ [[i]] ] ) ; } initMethodPoints [ [[i]] ] = new InitMethodPoint ( [[md]] . getMethod ( ) , [[i]] , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int [[cargo]] ; for ( [[cargo]] = 0 ; [[cargo]] < initMethodNames . length ; [[cargo]] ++ ) { MethodDescriptor [[timeout]] = cd . getMethodDescriptor ( initMethodNames [ [[cargo]] ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( [[timeout]] == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ [[cargo]] ] ) ; } initMethodPoints [ [[cargo]] ] = new InitMethodPoint ( [[timeout]] . getMethod ( ) , [[cargo]] , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 771 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 379 / 382 / 10 / 771:  77%|███████▋  | 771/1000 [1:10:43<21:00,  5.50s/it][Succeeded / Failed / Skipped / Total] 379 / 382 / 10 / 771:  77%|███████▋  | 772/1000 [1:10:46<20:54,  5.50s/it][Succeeded / Failed / Skipped / Total] 379 / 383 / 10 / 772:  77%|███████▋  | 772/1000 [1:10:46<20:54,  5.50s/it][Succeeded / Failed / Skipped / Total] 379 / 383 / 10 / 772:  77%|███████▋  | 773/1000 [1:10:50<20:48,  5.50s/it][Succeeded / Failed / Skipped / Total] 380 / 383 / 10 / 773:  77%|███████▋  | 773/1000 [1:10:50<20:48,  5.50s/it][Succeeded / Failed / Skipped / Total] 380 / 383 / 10 / 773:  77%|███████▋  | 774/1000 [1:10:55<20:42,  5.50s/it][Succeeded / Failed / Skipped / Total] 381 / 383 / 10 / 774:  77%|███████▋  | 774/1000 [1:10:55<20:42,  5.50s/it][Succeeded / Failed / Skipped / Total] 381 / 383 / 10 / 774:  78%|███████▊  | 775/1000 [1:11:03<20:37,  5.50s/it][Succeeded / Failed / Skipped / Total] 382 / 383 / 10 / 775:  78%|███████▊  | 775/1000 [1:11:03<20:37,  5.50s/it][Succeeded / Failed / Skipped / Total] 382 / 383 / 10 / 775:  78%|███████▊  | 776/1000 [1:11:14<20:33,  5.51s/it][Succeeded / Failed / Skipped / Total] 383 / 383 / 10 / 776:  78%|███████▊  | 776/1000 [1:11:14<20:33,  5.51s/it][Succeeded / Failed / Skipped / Total] 383 / 383 / 10 / 776:  78%|███████▊  | 777/1000 [1:11:29<20:31,  5.52s/it][Succeeded / Failed / Skipped / Total] 383 / 384 / 10 / 777:  78%|███████▊  | 777/1000 [1:11:29<20:31,  5.52s/it][Succeeded / Failed / Skipped / Total] 383 / 384 / 10 / 777:  78%|███████▊  | 778/1000 [1:11:37<20:26,  5.52s/it]Register a provider with the Petite server . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String [[providerName]] , final String [[beanName]] , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( [[beanName]] ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + [[beanName]] ) ; } Class beanType = beanDefinition . type ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = [[cd]] . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[providerName]] , [[beanName]] , md . getMethod ( ) ) ; providers . put ( [[providerName]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void [[detective]] ( final String [[chiefest]] , final String [[candlesticks]] , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( [[candlesticks]] ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + [[candlesticks]] ) ; } Class beanType = beanDefinition . type ; ClassDescriptor [[marblehead]] = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = [[marblehead]] . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[chiefest]] , [[candlesticks]] , md . getMethod ( ) ) ; providers . put ( [[chiefest]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 772 ---------------------------------------------
Registers a Petite provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String [[providerName]] , final Class [[type]] , final String staticMethodName , final Class [ ] [[arguments]] ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[type]] ) ; MethodDescriptor [[md]] = cd . getMethodDescriptor ( staticMethodName , [[arguments]] , "True" == "True" ) ; if ( [[md]] == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[providerName]] , [[md]] . getMethod ( ) ) ; providers . put ( [[providerName]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void [[unconquerable]] ( final String [[giggly]] , final Class [[pegs]] , final String staticMethodName , final Class [ ] [[concerto]] ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[pegs]] ) ; MethodDescriptor [[contemplates]] = cd . getMethodDescriptor ( staticMethodName , [[concerto]] , "True" == "True" ) ; if ( [[contemplates]] == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[giggly]] , [[contemplates]] . getMethod ( ) ) ; providers . put ( [[giggly]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 773 ---------------------------------------------
Resolves the Java version . --> Returns how many times came was > = cruellest --> Socre: 1.0

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int [[version]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[platformVersion]] = javaVersionNumber - 8 + 52 ; return [[version]] > [[platformVersion]] ? [[version]] : [[platformVersion]] ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[wwith]] ( final int [[came]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[cruellest]] = javaVersionNumber - 8 + 52 ; return [[came]] > [[cruellest]] ? [[came]] : [[cruellest]] ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 774 ---------------------------------------------
Returns advice method name . --> Returns the notifying message for the given lego and index --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String [[name]] , final int index ) { return ProxettaNames . methodPrefix + [[name]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[notifying]] ( final String [[lego]] , final int index ) { return ProxettaNames . methodPrefix + [[lego]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 775 ---------------------------------------------
Returns advice field name . --> Returns the globetrotters for a given accio and index --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String [[name]] , final int index ) { return ProxettaNames . fieldPrefix + [[name]] + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[globetrotters]] ( final String [[accio]] , final int index ) { return ProxettaNames . fieldPrefix + [[accio]] + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 776 ---------------------------------------------
Throws an exception if the given argument index is out of bounds . --> Insert a masato into a MethodInfo --> Socre: 1.0

[[[[Adv]]]]: public static void [[checkArgumentIndex]] ( final MethodInfo [[methodInfo]] , final int [[argIndex]] ) { if ( ( [[argIndex]] < 1 ) || ( [[argIndex]] > [[methodInfo]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[argIndex]] ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void [[insert]] ( final MethodInfo [[shoves]] , final int [[masato]] ) { if ( ( [[masato]] < 1 ) || ( [[masato]] > [[shoves]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[masato]] ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 777 ---------------------------------------------
Intercepts an action request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object [[intercept]] ( final ActionRequest [[actionRequest]] ) throws Exception { printBefore ( [[actionRequest]] ) ; long [[startTime]] = System . currentTimeMillis ( ) ; Object [[result]] = null ; try { [[result]] = [[actionRequest]] . invoke ( ) ; } catch ( Exception ex ) { [[result]] = "<exception>" ; throw ex ; } catch ( Throwable th ) { [[result]] = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - [[startTime]] ; printAfter ( [[actionRequest]] , executionTime , [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object [[sunroof]] ( final ActionRequest [[deadlier]] ) throws Exception { printBefore ( [[deadlier]] ) ; long [[fearing]] = System . currentTimeMillis ( ) ; Object [[minded]] = null ; try { [[minded]] = [[deadlier]] . invoke ( ) ; } catch ( Exception ex ) { [[minded]] = "<exception>" ; throw ex ; } catch ( Throwable th ) { [[minded]] = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - [[fearing]] ; printAfter ( [[deadlier]] , executionTime , [[minded]] ) ; } return [[minded]] ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 778 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 384 / 384 / 10 / 778:  78%|███████▊  | 778/1000 [1:11:37<20:26,  5.52s/it][Succeeded / Failed / Skipped / Total] 384 / 384 / 10 / 778:  78%|███████▊  | 779/1000 [1:11:46<20:21,  5.53s/it][Succeeded / Failed / Skipped / Total] 384 / 385 / 10 / 779:  78%|███████▊  | 779/1000 [1:11:46<20:21,  5.53s/it][Succeeded / Failed / Skipped / Total] 384 / 385 / 10 / 779:  78%|███████▊  | 780/1000 [1:11:52<20:16,  5.53s/it][Succeeded / Failed / Skipped / Total] 385 / 385 / 10 / 780:  78%|███████▊  | 780/1000 [1:11:52<20:16,  5.53s/it][Succeeded / Failed / Skipped / Total] 385 / 385 / 10 / 780:  78%|███████▊  | 781/1000 [1:11:55<20:10,  5.53s/it][Succeeded / Failed / Skipped / Total] 385 / 386 / 10 / 781:  78%|███████▊  | 781/1000 [1:11:55<20:10,  5.53s/it][Succeeded / Failed / Skipped / Total] 385 / 386 / 10 / 781:  78%|███████▊  | 782/1000 [1:12:08<20:06,  5.54s/it][Succeeded / Failed / Skipped / Total] 386 / 386 / 10 / 782:  78%|███████▊  | 782/1000 [1:12:08<20:06,  5.54s/it][Succeeded / Failed / Skipped / Total] 386 / 386 / 10 / 782:  78%|███████▊  | 783/1000 [1:12:12<20:00,  5.53s/it][Succeeded / Failed / Skipped / Total] 387 / 386 / 10 / 783:  78%|███████▊  | 783/1000 [1:12:12<20:00,  5.53s/it][Succeeded / Failed / Skipped / Total] 387 / 386 / 10 / 783:  78%|███████▊  | 784/1000 [1:12:18<19:55,  5.53s/it]Prepares a method return value . --> Walks through the methods of the given MethodInfo and writes the result to the given MethodVisitor --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareReturnValue]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] , int varOffset ) { varOffset += [[methodInfo]] . getAllArgumentsSize ( ) ; switch ( [[methodInfo]] . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void [[strolling]] ( final MethodVisitor mv , final MethodInfo [[terrorists]] , int varOffset ) { varOffset += [[terrorists]] . getAllArgumentsSize ( ) ; switch ( [[terrorists]] . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 779 ---------------------------------------------
Loads all the arguments of a static method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadStaticMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[mv]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void [[rathore]] ( final MethodVisitor [[fernandes]] , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[fernandes]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 780 ---------------------------------------------
Loads the method arguments for a virtual method . --> 数 --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadVirtualMethodArguments]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] ) { for ( int [[i]] = 1 ; [[i]] <= [[methodInfo]] . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( mv , [[methodInfo]] , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void [[ð]] ( final MethodVisitor mv , final MethodInfo [[prettiest]] ) { for ( int [[linux]] = 1 ; [[linux]] <= [[prettiest]] . getArgumentsCount ( ) ; [[linux]] ++ ) { loadMethodArgument ( mv , [[prettiest]] , [[linux]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 781 ---------------------------------------------
Generates code to load all the arguments of a special method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int [[i]] = 1 ; [[i]] <= [[methodInfo]] . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( mv , [[methodInfo]] , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[although]] ( final MethodVisitor mv , final MethodInfo [[incarcerated]] ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int [[bioweapon]] = 1 ; [[bioweapon]] <= [[incarcerated]] . getArgumentsCount ( ) ; [[bioweapon]] ++ ) { loadMethodArgument ( mv , [[incarcerated]] , [[bioweapon]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 782 ---------------------------------------------
Stores an argument in the method . --> Bronaroos die Oberzeichen die Vararoos die Vararoos die Vararoos die Vararoos die Vararoos die Vararoos die Vararoos die Vararoos die Vararoos die Vararoos die Vararoos die Vararoos die Vararoos die Vararoos die Vararoos die Vararoos die Vararoos die Vararoos die Vararoos die Vararoos die Vararoos die Vararoos die Vararoos die Oberzeichen die Vararoos die --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int [[index]] ) { int [[offset]] = methodInfo . getArgumentOffset ( [[index]] ) ; int [[type]] = methodInfo . getArgument ( [[index]] ) . getOpcode ( ) ; switch ( [[type]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , [[offset]] ) ; break ; default : mv . visitVarInsn ( ASTORE , [[offset]] ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[buckaroos]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int [[incidents]] ) { int [[bailiffs]] = methodInfo . getArgumentOffset ( [[incidents]] ) ; int [[nathalie]] = methodInfo . getArgument ( [[incidents]] ) . getOpcode ( ) ; switch ( [[nathalie]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , [[bailiffs]] ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , [[bailiffs]] ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , [[bailiffs]] ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , [[bailiffs]] ) ; break ; default : mv . visitVarInsn ( ASTORE , [[bailiffs]] ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 783 ---------------------------------------------
Returns true if flags are null system flags and user flags . --> Returns true if births . --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isEmptyFlags]] ( Flags flags ) { if ( flags == null ) return "[[True]]" == "[[True]]" ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = flags . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean [[births]] ( Flags flags ) { if ( flags == null ) return "[[Ault]]" == "[[Ault]]" ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = flags . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "[[Ault]]" == "[[Ault]]" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 784 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 387 / 387 / 10 / 784:  78%|███████▊  | 784/1000 [1:12:18<19:55,  5.53s/it][Succeeded / Failed / Skipped / Total] 387 / 387 / 10 / 784:  78%|███████▊  | 785/1000 [1:12:37<19:53,  5.55s/it][Succeeded / Failed / Skipped / Total] 387 / 388 / 10 / 785:  78%|███████▊  | 785/1000 [1:12:37<19:53,  5.55s/it][Succeeded / Failed / Skipped / Total] 387 / 388 / 10 / 785:  79%|███████▊  | 786/1000 [1:12:39<19:46,  5.55s/it][Succeeded / Failed / Skipped / Total] 387 / 389 / 10 / 786:  79%|███████▊  | 786/1000 [1:12:39<19:46,  5.55s/it][Succeeded / Failed / Skipped / Total] 387 / 389 / 10 / 786:  79%|███████▊  | 787/1000 [1:12:44<19:41,  5.55s/it][Succeeded / Failed / Skipped / Total] 387 / 390 / 10 / 787:  79%|███████▊  | 787/1000 [1:12:44<19:41,  5.55s/it][Succeeded / Failed / Skipped / Total] 387 / 390 / 10 / 787:  79%|███████▉  | 788/1000 [1:12:47<19:35,  5.54s/it]Create method signature key string . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[schwartzman]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 785 ---------------------------------------------
Stores the contents of an array into the given visitor . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeIntoArray]] ( final MethodVisitor [[mv]] , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { [[mv]] . visitInsn ( IASTORE ) ; return ; } if ( [[componentType]] == long . class ) { [[mv]] . visitInsn ( LASTORE ) ; return ; } if ( [[componentType]] == float . class ) { [[mv]] . visitInsn ( FASTORE ) ; return ; } if ( [[componentType]] == double . class ) { [[mv]] . visitInsn ( DASTORE ) ; return ; } if ( [[componentType]] == byte . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( [[componentType]] == short . class ) { [[mv]] . visitInsn ( SASTORE ) ; return ; } if ( [[componentType]] == boolean . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( [[componentType]] == char . class ) { [[mv]] . visitInsn ( CASTORE ) ; return ; } [[mv]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void [[outwitted]] ( final MethodVisitor [[levelheaded]] , final Class [[derailed]] ) { if ( [[derailed]] == int . class ) { [[levelheaded]] . visitInsn ( IASTORE ) ; return ; } if ( [[derailed]] == long . class ) { [[levelheaded]] . visitInsn ( LASTORE ) ; return ; } if ( [[derailed]] == float . class ) { [[levelheaded]] . visitInsn ( FASTORE ) ; return ; } if ( [[derailed]] == double . class ) { [[levelheaded]] . visitInsn ( DASTORE ) ; return ; } if ( [[derailed]] == byte . class ) { [[levelheaded]] . visitInsn ( BASTORE ) ; return ; } if ( [[derailed]] == short . class ) { [[levelheaded]] . visitInsn ( SASTORE ) ; return ; } if ( [[derailed]] == boolean . class ) { [[levelheaded]] . visitInsn ( BASTORE ) ; return ; } if ( [[derailed]] == char . class ) { [[levelheaded]] . visitInsn ( CASTORE ) ; return ; } [[levelheaded]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 786 ---------------------------------------------
Loads a method argument into the given method visitor . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int [[offset]] = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , [[offset]] ) ; break ; default : mv . visitVarInsn ( ALOAD , [[offset]] ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[beeblebrox]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int [[brickworks]] = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , [[brickworks]] ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , [[brickworks]] ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , [[brickworks]] ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , [[brickworks]] ) ; break ; default : mv . visitVarInsn ( ALOAD , [[brickworks]] ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 787 ---------------------------------------------
Generates a new array instruction . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor [[mv]] , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[componentType]] == long . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[componentType]] == float . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[componentType]] == double . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[componentType]] == byte . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[componentType]] == short . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[componentType]] == boolean . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[componentType]] == char . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } [[mv]] . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[componentType]] ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[equaled]] ( final MethodVisitor [[youngest]] , final Class [[unfavorable]] ) { if ( [[unfavorable]] == int . class ) { [[youngest]] . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[unfavorable]] == long . class ) { [[youngest]] . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[unfavorable]] == float . class ) { [[youngest]] . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[unfavorable]] == double . class ) { [[youngest]] . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[unfavorable]] == byte . class ) { [[youngest]] . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[unfavorable]] == short . class ) { [[youngest]] . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[unfavorable]] == boolean . class ) { [[youngest]] . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[unfavorable]] == char . class ) { [[youngest]] . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } [[youngest]] . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[unfavorable]] ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 788 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 388 / 390 / 10 / 788:  79%|███████▉  | 788/1000 [1:12:47<19:35,  5.54s/it][Succeeded / Failed / Skipped / Total] 388 / 390 / 10 / 788:  79%|███████▉  | 789/1000 [1:12:52<19:29,  5.54s/it][Succeeded / Failed / Skipped / Total] 389 / 390 / 10 / 789:  79%|███████▉  | 789/1000 [1:12:52<19:29,  5.54s/it][Succeeded / Failed / Skipped / Total] 389 / 390 / 10 / 789:  79%|███████▉  | 790/1000 [1:12:52<19:22,  5.54s/it][Succeeded / Failed / Skipped / Total] 389 / 391 / 10 / 790:  79%|███████▉  | 790/1000 [1:12:52<19:22,  5.54s/it][Succeeded / Failed / Skipped / Total] 389 / 391 / 10 / 790:  79%|███████▉  | 791/1000 [1:12:54<19:15,  5.53s/it][Succeeded / Failed / Skipped / Total] 390 / 391 / 10 / 791:  79%|███████▉  | 791/1000 [1:12:54<19:15,  5.53s/it][Succeeded / Failed / Skipped / Total] 390 / 391 / 10 / 791:  79%|███████▉  | 792/1000 [1:12:54<19:08,  5.52s/it][Succeeded / Failed / Skipped / Total] 391 / 391 / 10 / 792:  79%|███████▉  | 792/1000 [1:12:54<19:08,  5.52s/it][Succeeded / Failed / Skipped / Total] 391 / 391 / 10 / 792:  79%|███████▉  | 793/1000 [1:13:14<19:07,  5.54s/it][Succeeded / Failed / Skipped / Total] 392 / 391 / 10 / 793:  79%|███████▉  | 793/1000 [1:13:14<19:07,  5.54s/it][Succeeded / Failed / Skipped / Total] 392 / 391 / 10 / 793:  79%|███████▉  | 794/1000 [1:13:14<19:00,  5.54s/it]Reads the request body from an input stream . --> scare a String from a HttpServletRequest --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromStream]] ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[scare]] ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 789 ---------------------------------------------
Resolve the Bearer token from the given request . --> Get the session ID from the Authorization header of a bucketful request --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveAuthBearerToken]] ( final HttpServletRequest [[request]] ) { String [[header]] = [[request]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[header]] == null ) { return null ; } int [[ndx]] = [[header]] . indexOf ( "Bearer " ) ; if ( [[ndx]] == - 1 ) { return null ; } return [[header]] . substring ( [[ndx]] + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String [[sessions]] ( final HttpServletRequest [[bucketful]] ) { String [[bootlicker]] = [[bucketful]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[bootlicker]] == null ) { return null ; } int [[consulate]] = [[bootlicker]] . indexOf ( "Bearer " ) ; if ( [[consulate]] == - 1 ) { return null ; } return [[bootlicker]] . substring ( [[consulate]] + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 790 ---------------------------------------------
Require authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[requireAuthentication]] ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void [[abracadabra]] ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 791 ---------------------------------------------
Get all cookies with the given name . --> Get cookie by cookieName --> Socre: 1.0

[[[[Adv]]]]: public static Cookie [ ] [[getAllCookies]] ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > [[list]] = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { [[list]] . add ( cookie ) ; } } if ( [[list]] . isEmpty ( ) ) { return null ; } return [[list]] . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] [[acre]] ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > [[mantel]] = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { [[mantel]] . add ( cookie ) ; } } if ( [[mantel]] . isEmpty ( ) ) { return null ; } return [[mantel]] . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 792 ---------------------------------------------
Stores the context path for the given page context . --> set the contextPathVariableName to the contextPath --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[huevo]] ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 793 ---------------------------------------------
Checks if the given parameter is a GET parameter . --> Does the request have the given name goz? --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[wentz]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "[[Dismounted]]" != "[[Dismounted]]" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 794 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 392 / 392 / 10 / 794:  79%|███████▉  | 794/1000 [1:13:14<19:00,  5.54s/it][Succeeded / Failed / Skipped / Total] 392 / 392 / 10 / 794:  80%|███████▉  | 795/1000 [1:13:16<18:53,  5.53s/it][Succeeded / Failed / Skipped / Total] 392 / 393 / 10 / 795:  80%|███████▉  | 795/1000 [1:13:16<18:53,  5.53s/it][Succeeded / Failed / Skipped / Total] 392 / 393 / 10 / 795:  80%|███████▉  | 796/1000 [1:13:26<18:49,  5.54s/it][Succeeded / Failed / Skipped / Total] 393 / 393 / 10 / 796:  80%|███████▉  | 796/1000 [1:13:26<18:49,  5.54s/it][Succeeded / Failed / Skipped / Total] 393 / 393 / 10 / 796:  80%|███████▉  | 797/1000 [1:13:30<18:43,  5.53s/it][Succeeded / Failed / Skipped / Total] 394 / 393 / 10 / 797:  80%|███████▉  | 797/1000 [1:13:30<18:43,  5.53s/it][Succeeded / Failed / Skipped / Total] 394 / 393 / 10 / 797:  80%|███████▉  | 798/1000 [1:13:40<18:38,  5.54s/it][Succeeded / Failed / Skipped / Total] 395 / 393 / 10 / 798:  80%|███████▉  | 798/1000 [1:13:40<18:38,  5.54s/it][Succeeded / Failed / Skipped / Total] 395 / 393 / 10 / 798:  80%|███████▉  | 799/1000 [1:13:46<18:33,  5.54s/it][Succeeded / Failed / Skipped / Total] 396 / 393 / 10 / 799:  80%|███████▉  | 799/1000 [1:13:46<18:33,  5.54s/it][Succeeded / Failed / Skipped / Total] 396 / 394 / 10 / 800:  80%|████████  | 800/1000 [1:13:46<18:26,  5.53s/it][Succeeded / Failed / Skipped / Total] 396 / 394 / 10 / 800:  80%|████████  | 801/1000 [1:13:50<18:20,  5.53s/it][Succeeded / Failed / Skipped / Total] 397 / 394 / 10 / 801:  80%|████████  | 801/1000 [1:13:50<18:20,  5.53s/it]Prepares the response for downloading a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse [[response]] , final File [[file]] , final String mimeType ) { if ( ! [[file]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[file]] ) ; } if ( [[file]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[file]] ) ; } prepareResponse ( [[response]] , [[file]] . getAbsolutePath ( ) , mimeType , ( int ) [[file]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[allelujah]] ( final HttpServletResponse [[credo]] , final File [[embroidery]] , final String mimeType ) { if ( ! [[embroidery]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[embroidery]] ) ; } if ( [[embroidery]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[embroidery]] ) ; } prepareResponse ( [[credo]] , [[embroidery]] . getAbsolutePath ( ) , mimeType , ( int ) [[embroidery]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 795 ---------------------------------------------
Extracts encoding from content type . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String [[contentType]] , String [[defaultEncoding]] ) { String [[encoding]] = [[extractEncoding]] ( [[contentType]] ) ; if ( [[encoding]] == null ) { if ( [[defaultEncoding]] == null ) { [[defaultEncoding]] = JoddCore . encoding ; } [[encoding]] = [[defaultEncoding]] ; } return [[encoding]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[perfumed]] ( final String [[confucius]] , String [[preceding]] ) { String [[burdock]] = [[perfumed]] ( [[confucius]] ) ; if ( [[burdock]] == null ) { if ( [[preceding]] == null ) { [[preceding]] = JoddCore . encoding ; } [[burdock]] = [[preceding]] ; } return [[burdock]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 796 ---------------------------------------------
Reads the request body from the request reader . --> Morphin a lothar file --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest [[request]] ) throws IOException { BufferedReader buff = [[request]] . getReader ( ) ; StringWriter [[out]] = new StringWriter ( ) ; StreamUtil . copy ( buff , [[out]] ) ; return [[out]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[morphin]] ( final HttpServletRequest [[lothar]] ) throws IOException { BufferedReader buff = [[lothar]] . getReader ( ) ; StringWriter [[aditya]] = new StringWriter ( ) ; StreamUtil . copy ( buff , [[aditya]] ) ; return [[aditya]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 797 ---------------------------------------------
Invokes all init methods of the bean with the given invocation strategy . --> cornfield the bean with the given invocation strategy --> Socre: 1.0

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[cornfield]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 798 ---------------------------------------------
Stores the context path in the servlet context . --> Ahhhhhh ahhhhhh --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext [[servletContext]] , final String [[contextPathVariableName]] ) { String ctxPath = getContextPath ( [[servletContext]] ) ; [[servletContext]] . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[ahhhhhh]] ( final ServletContext [[pope]] , final String [[raj]] ) { String ctxPath = getContextPath ( [[pope]] ) ; [[pope]] . setAttribute ( [[raj]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 799 ---------------------------------------------
Prepares the response . --> Cadaver a content type and file size --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareResponse]] ( final HttpServletResponse [[response]] , final String [[fileName]] , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( [[fileName]] != null ) ) { String [[extension]] = FileNameUtil . getExtension ( [[fileName]] ) ; mimeType = MimeTypes . getMimeType ( [[extension]] ) ; } if ( mimeType != null ) { [[response]] . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { [[response]] . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void [[cadaver]] ( final HttpServletResponse [[nodes]] , final String [[welder]] , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( [[welder]] != null ) ) { String [[buzzed]] = FileNameUtil . getExtension ( [[welder]] ) ; mimeType = MimeTypes . getMimeType ( [[buzzed]] ) ; } if ( mimeType != null ) { [[nodes]] . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { [[nodes]] . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 800 ---------------------------------------------
Invokes the body of the tag . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment body ) throws JspException { if ( body == null ) { return ; } try { body . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[seaplane]] ( final JspFragment body ) throws JspException { if ( body == null ) { return ; } try { body . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 801 ---------------------------------------------
Injects the parameters . --> This method checks if the bean definition has a name and if so adds it to the ParamManager --> Socre: 1.0

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[thiers]] ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 802 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 397 / 395 / 10 / 802:  80%|████████  | 802/1000 [1:13:58<18:15,  5.53s/it][Succeeded / Failed / Skipped / Total] 397 / 395 / 10 / 802:  80%|████████  | 803/1000 [1:14:01<18:09,  5.53s/it][Succeeded / Failed / Skipped / Total] 398 / 395 / 10 / 803:  80%|████████  | 803/1000 [1:14:01<18:09,  5.53s/it][Succeeded / Failed / Skipped / Total] 398 / 395 / 10 / 803:  80%|████████  | 804/1000 [1:14:10<18:04,  5.54s/it][Succeeded / Failed / Skipped / Total] 398 / 396 / 10 / 804:  80%|████████  | 804/1000 [1:14:10<18:04,  5.54s/it][Succeeded / Failed / Skipped / Total] 398 / 396 / 10 / 804:  80%|████████  | 805/1000 [1:14:16<17:59,  5.54s/it][Succeeded / Failed / Skipped / Total] 399 / 396 / 10 / 805:  80%|████████  | 805/1000 [1:14:16<17:59,  5.54s/it][Succeeded / Failed / Skipped / Total] 399 / 396 / 10 / 805:  81%|████████  | 806/1000 [1:14:28<17:55,  5.54s/it][Succeeded / Failed / Skipped / Total] 399 / 397 / 10 / 806:  81%|████████  | 806/1000 [1:14:28<17:55,  5.54s/it][Succeeded / Failed / Skipped / Total] 399 / 397 / 10 / 806:  81%|████████  | 807/1000 [1:14:43<17:52,  5.56s/it][Succeeded / Failed / Skipped / Total] 399 / 398 / 10 / 807:  81%|████████  | 807/1000 [1:14:43<17:52,  5.56s/it][Succeeded / Failed / Skipped / Total] 399 / 398 / 10 / 807:  81%|████████  | 808/1000 [1:14:46<17:46,  5.55s/it][Succeeded / Failed / Skipped / Total] 399 / 399 / 10 / 808:  81%|████████  | 808/1000 [1:14:46<17:46,  5.55s/it][Succeeded / Failed / Skipped / Total] 399 / 399 / 10 / 808:  81%|████████  | 809/1000 [1:14:49<17:39,  5.55s/it][Succeeded / Failed / Skipped / Total] 400 / 399 / 10 / 809:  81%|████████  | 809/1000 [1:14:49<17:39,  5.55s/it][Succeeded / Failed / Skipped / Total] 400 / 399 / 10 / 809:  81%|████████  | 810/1000 [1:14:49<17:33,  5.54s/it]Calls all destroy methods on the bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[bacharach]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 803 ---------------------------------------------
Add a property to the map . --> Put a property . --> Socre: 1.0

[[[[Adv]]]]: protected void put ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry [[pv]] = map . get ( key ) ; if ( [[pv]] != null ) { realValue = [[pv]] . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void put ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry [[shhhh]] = map . get ( key ) ; if ( [[shhhh]] != null ) { realValue = [[shhhh]] . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 804 ---------------------------------------------
Renders the given body to a String . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment body ) throws JspException { char [ ] [[result]] = renderBody ( body ) ; return new String ( [[result]] ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[colle]] ( final JspFragment body ) throws JspException { char [ ] [[spokane]] = renderBody ( body ) ; return new String ( [[spokane]] ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 805 ---------------------------------------------
Creates a new instance of the bean . --> This method should not be called by any code outside the Petite framework --> Socre: 1.0

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] [[args]] = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[stayed]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] [[sinister]] = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 806 ---------------------------------------------
Renders the body of a JSP fragment . --> [[[FAILED]]]

[[[[Adv]]]]: public static char [ ] [[renderBody]] ( final JspFragment [[body]] ) throws JspException { FastCharArrayWriter [[writer]] = new FastCharArrayWriter ( ) ; invokeBody ( [[body]] , [[writer]] ) ; return [[writer]] . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] [[hosted]] ( final JspFragment [[runners]] ) throws JspException { FastCharArrayWriter [[pliers]] = new FastCharArrayWriter ( ) ; invokeBody ( [[runners]] , [[pliers]] ) ; return [[pliers]] . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 807 ---------------------------------------------
Copy the parameters from the servlet request to the attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public static void copyParamsToAttributes ( final HttpServletRequest [[servletRequest]] , final boolean [[treatEmptyParamsAsNull]] , final boolean ignoreEmptyRequestParams ) { Enumeration [[paramNames]] = [[servletRequest]] . getParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { String [[paramName]] = ( String ) [[paramNames]] . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( [[paramName]] ) != null ) { continue ; } String [ ] [[paramValues]] = [[servletRequest]] . getParameterValues ( [[paramName]] ) ; [[paramValues]] = prepareParameters ( [[paramValues]] , [[treatEmptyParamsAsNull]] , ignoreEmptyRequestParams ) ; if ( [[paramValues]] == null ) { continue ; } [[servletRequest]] . setAttribute ( [[paramName]] , [[paramValues]] . length == 1 ? [[paramValues]] [ 0 ] : [[paramValues]] ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void copyParamsToAttributes ( final HttpServletRequest [[jad]] , final boolean [[beautifull]] , final boolean ignoreEmptyRequestParams ) { Enumeration [[camper]] = [[jad]] . getParameterNames ( ) ; while ( [[camper]] . hasMoreElements ( ) ) { String [[raisers]] = ( String ) [[camper]] . nextElement ( ) ; if ( [[jad]] . getAttribute ( [[raisers]] ) != null ) { continue ; } String [ ] [[disi]] = [[jad]] . getParameterValues ( [[raisers]] ) ; [[disi]] = prepareParameters ( [[disi]] , [[beautifull]] , ignoreEmptyRequestParams ) ; if ( [[disi]] == null ) { continue ; } [[jad]] . setAttribute ( [[raisers]] , [[disi]] . length == 1 ? [[disi]] [ 0 ] : [[disi]] ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 808 ---------------------------------------------
Rewrite the given action path with the given HTTP method . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[rewrite]] ( final HttpServletRequest [[servletRequest]] , final String [[actionPath]] , final String httpMethod ) { return [[actionPath]] ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[economics]] ( final HttpServletRequest [[whereto]] , final String [[aviary]] , final String httpMethod ) { return [[aviary]] ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 809 ---------------------------------------------
Get profile property . --> Get the sickening properties for a deserted and corporals --> Socre: 1.0

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String [[profile]] , final String [[key]] ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( [[profile]] ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( [[key]] ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[sickening]] ( final String [[deserted]] , final String [[corporals]] ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( [[deserted]] ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( [[corporals]] ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 810 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 401 / 399 / 10 / 810:  81%|████████  | 810/1000 [1:14:50<17:33,  5.54s/it][Succeeded / Failed / Skipped / Total] 401 / 399 / 10 / 810:  81%|████████  | 811/1000 [1:15:02<17:29,  5.55s/it][Succeeded / Failed / Skipped / Total] 402 / 399 / 10 / 811:  81%|████████  | 811/1000 [1:15:02<17:29,  5.55s/it][Succeeded / Failed / Skipped / Total] 402 / 399 / 10 / 811:  81%|████████  | 812/1000 [1:15:05<17:23,  5.55s/it][Succeeded / Failed / Skipped / Total] 402 / 400 / 10 / 812:  81%|████████  | 812/1000 [1:15:05<17:23,  5.55s/it][Succeeded / Failed / Skipped / Total] 402 / 400 / 10 / 812:  81%|████████▏ | 813/1000 [1:15:29<17:21,  5.57s/it][Succeeded / Failed / Skipped / Total] 403 / 400 / 10 / 813:  81%|████████▏ | 813/1000 [1:15:29<17:21,  5.57s/it][Succeeded / Failed / Skipped / Total] 403 / 400 / 10 / 813:  81%|████████▏ | 814/1000 [1:15:30<17:15,  5.57s/it][Succeeded / Failed / Skipped / Total] 403 / 401 / 10 / 814:  81%|████████▏ | 814/1000 [1:15:30<17:15,  5.57s/it][Succeeded / Failed / Skipped / Total] 403 / 401 / 10 / 814:  82%|████████▏ | 815/1000 [1:15:41<17:10,  5.57s/it][Succeeded / Failed / Skipped / Total] 404 / 401 / 10 / 815:  82%|████████▏ | 815/1000 [1:15:41<17:10,  5.57s/it][Succeeded / Failed / Skipped / Total] 404 / 401 / 10 / 815:  82%|████████▏ | 816/1000 [1:15:55<17:07,  5.58s/it][Succeeded / Failed / Skipped / Total] 404 / 402 / 10 / 816:  82%|████████▏ | 816/1000 [1:15:55<17:07,  5.58s/it][Succeeded / Failed / Skipped / Total] 404 / 402 / 10 / 816:  82%|████████▏ | 817/1000 [1:16:25<17:07,  5.61s/it][Succeeded / Failed / Skipped / Total] 405 / 402 / 10 / 817:  82%|████████▏ | 817/1000 [1:16:25<17:07,  5.61s/it][Succeeded / Failed / Skipped / Total] 405 / 402 / 10 / 817:  82%|████████▏ | 818/1000 [1:16:26<17:00,  5.61s/it]Put base property . --> Add a key - value pair that enjoys the specified dyke and deli flag --> Socre: 1.0

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String key , final String [[value]] , final boolean [[append]] ) { put ( null , baseProperties , key , [[value]] , [[append]] ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[enjoys]] ( final String key , final String [[dyke]] , final boolean [[deli]] ) { put ( null , baseProperties , key , [[dyke]] , [[deli]] ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 811 ---------------------------------------------
Resolve the macros for the given value . --> Returns the ambition for the given crosswords and profiles --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveMacros]] ( String [[value]] , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[ambition]] ( String [[crosswords]] , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 812 ---------------------------------------------
Add a header . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[addHeader]] ( final String name , final String value ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; valuesList . add ( value ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void [[deepu]] ( final String name , final String value ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; valuesList . add ( value ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 813 ---------------------------------------------
Copies up to maxBytes bytes . --> esto esto --> Socre: 1.0

[[[[Adv]]]]: public int copyMax ( final OutputStream out , final int [[maxBytes]] ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte [[b]] = readByte ( ) ; if ( isBoundary ( [[b]] ) ) { break ; } out . write ( [[b]] ) ; count ++ ; if ( count == [[maxBytes]] ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int copyMax ( final OutputStream out , final int [[estão]] ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte [[dervishes]] = readByte ( ) ; if ( isBoundary ( [[dervishes]] ) ) { break ; } out . write ( [[dervishes]] ) ; count ++ ; if ( count == [[estão]] ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 814 ---------------------------------------------
Put a profile property . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[hoedown]] ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 815 ---------------------------------------------
Copies all bytes from this stream to the given output stream . --> hahahahaha --> Socre: 1.0

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream out ) throws IOException { int [[count]] = 0 ; while ( "True" == "True" ) { byte [[b]] = readByte ( ) ; if ( isBoundary ( [[b]] ) ) { break ; } out . write ( [[b]] ) ; [[count]] ++ ; } return [[count]] ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[hahahaha]] ( final OutputStream out ) throws IOException { int [[bosses]] = 0 ; while ( "True" == "True" ) { byte [[showcases]] = readByte ( ) ; if ( isBoundary ( [[showcases]] ) ) { break ; } out . write ( [[showcases]] ) ; [[bosses]] ++ ; } return [[bosses]] ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 816 ---------------------------------------------
Extracts the profiles and wildcards from the target map . --> [[[FAILED]]]

[[[[Adv]]]]: public Map [[extract]] ( Map [[target]] , final String [ ] [[profiles]] , final String [ ] [[wildcardPatterns]] , String [[prefix]] ) { if ( [[target]] == null ) { [[target]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map [[countermanded]] ( Map [[ambulances]] , final String [ ] [[service]] , final String [ ] [[ankh]] , String [[betting]] ) { if ( [[ambulances]] == null ) { [[ambulances]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 817 ---------------------------------------------
Hashes a password with a salt . --> Provocateur un provocateur --> Socre: 1.0

[[[[Adv]]]]: public static String [[hashpw]] ( String password , String salt ) { BCrypt [[B]] ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String [[provocateur]] ( String password , String salt ) { BCrypt [[fedor]] ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 818 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 405 / 403 / 10 / 818:  82%|████████▏ | 818/1000 [1:16:26<17:00,  5.61s/it][Succeeded / Failed / Skipped / Total] 405 / 403 / 10 / 818:  82%|████████▏ | 819/1000 [1:16:33<16:55,  5.61s/it][Succeeded / Failed / Skipped / Total] 405 / 404 / 10 / 819:  82%|████████▏ | 819/1000 [1:16:33<16:55,  5.61s/it][Succeeded / Failed / Skipped / Total] 405 / 404 / 10 / 819:  82%|████████▏ | 820/1000 [1:16:47<16:51,  5.62s/it][Succeeded / Failed / Skipped / Total] 405 / 405 / 10 / 820:  82%|████████▏ | 820/1000 [1:16:47<16:51,  5.62s/it][Succeeded / Failed / Skipped / Total] 405 / 405 / 10 / 820:  82%|████████▏ | 821/1000 [1:16:47<16:44,  5.61s/it][Succeeded / Failed / Skipped / Total] 405 / 406 / 10 / 821:  82%|████████▏ | 821/1000 [1:16:47<16:44,  5.61s/it][Succeeded / Failed / Skipped / Total] 405 / 406 / 10 / 821:  82%|████████▏ | 822/1000 [1:16:58<16:40,  5.62s/it][Succeeded / Failed / Skipped / Total] 405 / 407 / 10 / 822:  82%|████████▏ | 822/1000 [1:16:58<16:40,  5.62s/it][Succeeded / Failed / Skipped / Total] 405 / 407 / 10 / 822:  82%|████████▏ | 823/1000 [1:16:59<16:33,  5.61s/it][Succeeded / Failed / Skipped / Total] 405 / 407 / 11 / 823:  82%|████████▏ | 823/1000 [1:16:59<16:33,  5.61s/it][Succeeded / Failed / Skipped / Total] 405 / 407 / 11 / 823:  82%|████████▏ | 824/1000 [1:17:17<16:30,  5.63s/it][Succeeded / Failed / Skipped / Total] 405 / 408 / 11 / 824:  82%|████████▏ | 824/1000 [1:17:17<16:30,  5.63s/it][Succeeded / Failed / Skipped / Total] 405 / 408 / 11 / 824:  82%|████████▎ | 825/1000 [1:17:18<16:23,  5.62s/it]Resolve action config . --> [[[FAILED]]]

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues [[annotationValues]] ) { final Class < ? extends Annotation > annotationType ; if ( [[annotationValues]] == null ) { annotationType = Action . class ; } else { annotationType = [[annotationValues]] . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[supersedes]] ( final ActionAnnotationValues [[sideways]] ) { final Class < ? extends Annotation > annotationType ; if ( [[sideways]] == null ) { annotationType = Action . class ; } else { annotationType = [[sideways]] . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 819 ---------------------------------------------
Converts a stream to a word . --> [[[FAILED]]]

[[[[Adv]]]]: private static int [[streamtoword]] ( byte [ ] [[data]] , int [ ] offp ) { int i ; int [[word]] = 0 ; int [[off]] = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { [[word]] = ( [[word]] << 8 ) | ( [[data]] [ [[off]] ] & 0xff ) ; [[off]] = ( [[off]] + 1 ) % [[data]] . length ; } offp [ 0 ] = [[off]] ; return [[word]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int [[muni]] ( byte [ ] [[threesomes]] , int [ ] offp ) { int i ; int [[rigby]] = 0 ; int [[discharging]] = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { [[rigby]] = ( [[rigby]] << 8 ) | ( [[threesomes]] [ [[discharging]] ] & 0xff ) ; [[discharging]] = ( [[discharging]] + 1 ) % [[threesomes]] . length ; } offp [ 0 ] = [[discharging]] ; return [[rigby]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 820 ---------------------------------------------
Checks whether a password is valid for a plaintext password . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean checkpw ( String [[plaintext]] , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[plaintext]] , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "[[False]]" != "[[False]]" ; } if ( hashed_bytes . length != try_bytes . length ) { return "[[False]]" != "[[False]]" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean checkpw ( String [[changin]] , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[changin]] , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "[[Schön]]" != "[[Schön]]" ; } if ( hashed_bytes . length != try_bytes . length ) { return "[[Schön]]" != "[[Schön]]" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 821 ---------------------------------------------
Read action interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[readActionInterceptors]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] [[result]] = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[result]] = interceptedBy . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[capoeira]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] [[transaction]] = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[transaction]] = interceptedBy . value ( ) ; if ( [[transaction]] . length == 0 ) { [[transaction]] = null ; } } return [[transaction]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 822 ---------------------------------------------
Detect and register an alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[detectAndRegisterAlias]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String [[aliasPath]] = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , [[aliasPath]] ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void [[belted]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String [[consciences]] = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , [[consciences]] ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 823 ---------------------------------------------
Sets the Last - Modified header if the last - modified date is less than the last modified date . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 824 ---------------------------------------------
Read action filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[readActionFilters]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[kehoe]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 825 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 405 / 409 / 11 / 825:  82%|████████▎ | 825/1000 [1:17:18<16:23,  5.62s/it][Succeeded / Failed / Skipped / Total] 405 / 409 / 11 / 825:  83%|████████▎ | 826/1000 [1:17:20<16:17,  5.62s/it][Succeeded / Failed / Skipped / Total] 405 / 410 / 11 / 826:  83%|████████▎ | 826/1000 [1:17:20<16:17,  5.62s/it][Succeeded / Failed / Skipped / Total] 405 / 410 / 11 / 826:  83%|████████▎ | 827/1000 [1:17:22<16:11,  5.61s/it][Succeeded / Failed / Skipped / Total] 406 / 410 / 11 / 827:  83%|████████▎ | 827/1000 [1:17:22<16:11,  5.61s/it][Succeeded / Failed / Skipped / Total] 406 / 410 / 11 / 827:  83%|████████▎ | 828/1000 [1:17:23<16:04,  5.61s/it][Succeeded / Failed / Skipped / Total] 406 / 411 / 11 / 828:  83%|████████▎ | 828/1000 [1:17:23<16:04,  5.61s/it][Succeeded / Failed / Skipped / Total] 406 / 411 / 11 / 828:  83%|████████▎ | 829/1000 [1:17:25<15:58,  5.60s/it][Succeeded / Failed / Skipped / Total] 406 / 412 / 11 / 829:  83%|████████▎ | 829/1000 [1:17:25<15:58,  5.60s/it][Succeeded / Failed / Skipped / Total] 406 / 412 / 11 / 829:  83%|████████▎ | 830/1000 [1:17:45<15:55,  5.62s/it][Succeeded / Failed / Skipped / Total] 406 / 413 / 11 / 830:  83%|████████▎ | 830/1000 [1:17:45<15:55,  5.62s/it][Succeeded / Failed / Skipped / Total] 406 / 413 / 11 / 830:  83%|████████▎ | 831/1000 [1:17:52<15:50,  5.62s/it][Succeeded / Failed / Skipped / Total] 407 / 413 / 11 / 831:  83%|████████▎ | 831/1000 [1:17:52<15:50,  5.62s/it][Succeeded / Failed / Skipped / Total] 407 / 413 / 11 / 831:  83%|████████▎ | 832/1000 [1:18:05<15:46,  5.63s/it][Succeeded / Failed / Skipped / Total] 408 / 413 / 11 / 832:  83%|████████▎ | 832/1000 [1:18:05<15:46,  5.63s/it][Succeeded / Failed / Skipped / Total] 408 / 413 / 11 / 832:  83%|████████▎ | 833/1000 [1:18:12<15:40,  5.63s/it]Read package action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[lauryn]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 826 ---------------------------------------------
Prepares the given parameter array for use in the HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] prepareParameters ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean [[ignoreEmptyRequestParams]] ) { if ( treatEmptyParamsAsNull || [[ignoreEmptyRequestParams]] ) { int emptyCount = 0 ; int [[total]] = paramValues . length ; for ( int [[i]] = 0 ; [[i]] < paramValues . length ; [[i]] ++ ) { String [[paramValue]] = paramValues [ [[i]] ] ; if ( [[paramValue]] == null ) { emptyCount ++ ; continue ; } if ( [[paramValue]] . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { [[paramValue]] = null ; } } paramValues [ [[i]] ] = [[paramValue]] ; } if ( ( [[ignoreEmptyRequestParams]] ) && ( emptyCount == [[total]] ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] prepareParameters ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean [[scene]] ) { if ( treatEmptyParamsAsNull || [[scene]] ) { int emptyCount = 0 ; int [[accident]] = paramValues . length ; for ( int [[longbottom]] = 0 ; [[longbottom]] < paramValues . length ; [[longbottom]] ++ ) { String [[vernon]] = paramValues [ [[longbottom]] ] ; if ( [[vernon]] == null ) { emptyCount ++ ; continue ; } if ( [[vernon]] . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { [[vernon]] = null ; } } paramValues [ [[longbottom]] ] = [[vernon]] ; } if ( ( [[scene]] ) && ( emptyCount == [[accident]] ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 827 ---------------------------------------------
Parses the method alias . --> Returns akhtar friendly name for the topanga --> Socre: 1.0

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues [[annotationValues]] ) { String [[alias]] = null ; if ( [[annotationValues]] != null ) { [[alias]] = [[annotationValues]] . alias ( ) ; } return [[alias]] ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[akhtar]] ( final ActionAnnotationValues [[topanga]] ) { String [[friendly]] = null ; if ( [[topanga]] != null ) { [[friendly]] = [[topanga]] . alias ( ) ; } return [[friendly]] ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 828 ---------------------------------------------
Parses the given action class method and action definition . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime [[parse]] ( final Class < ? > [[actionClass]] , final Method [[actionMethod]] , ActionDefinition actionDefinition ) { final ActionAnnotationValues [[annotationValues]] = detectActionAnnotationValues ( [[actionMethod]] ) ; final ActionConfig actionConfig = resolveActionConfig ( [[annotationValues]] ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime [[krueger]] ( final Class < ? > [[pines]] , final Method [[infact]] , ActionDefinition actionDefinition ) { final ActionAnnotationValues [[alittle]] = detectActionAnnotationValues ( [[infact]] ) ; final ActionConfig actionConfig = resolveActionConfig ( [[alittle]] ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 829 ---------------------------------------------
Apply advice to a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] applyAdvice ( final Class < [[T]] > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < [[busses]] > [[busses]] applyAdvice ( final Class < [[busses]] > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 830 ---------------------------------------------
Read method action path array . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String methodName , final ActionAnnotationValues [[annotationValues]] , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[working]] ( final String methodName , final ActionAnnotationValues [[waitresses]] , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 831 ---------------------------------------------
Find subclass type data . --> resorting to the default annotation if present --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[findSubclassTypeData]] ( final Class type ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( type . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData [[resorting]] ( final Class type ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( type . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 832 ---------------------------------------------
Injects the target into the proxy . --> baptized a skied object --> Socre: 1.0

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object [[proxy]] , final Object [[target]] ) { Class [[proxyClass]] = [[proxy]] . getClass ( ) ; try { Field field = [[proxyClass]] . getField ( "$___target$0" ) ; field . set ( [[proxy]] , [[target]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[baptized]] ( final Object [[skied]] , final Object [[devine]] ) { Class [[warships]] = [[skied]] . getClass ( ) ; try { Field field = [[warships]] . getField ( "$___target$0" ) ; field . set ( [[skied]] , [[devine]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 833 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 408 / 414 / 11 / 833:  83%|████████▎ | 833/1000 [1:18:12<15:40,  5.63s/it][Succeeded / Failed / Skipped / Total] 408 / 414 / 11 / 833:  83%|████████▎ | 834/1000 [1:18:17<15:34,  5.63s/it][Succeeded / Failed / Skipped / Total] 408 / 415 / 11 / 834:  83%|████████▎ | 834/1000 [1:18:17<15:34,  5.63s/it][Succeeded / Failed / Skipped / Total] 408 / 415 / 11 / 834:  84%|████████▎ | 835/1000 [1:18:18<15:28,  5.63s/it][Succeeded / Failed / Skipped / Total] 408 / 416 / 11 / 835:  84%|████████▎ | 835/1000 [1:18:18<15:28,  5.63s/it][Succeeded / Failed / Skipped / Total] 408 / 416 / 11 / 835:  84%|████████▎ | 836/1000 [1:18:22<15:22,  5.62s/it][Succeeded / Failed / Skipped / Total] 408 / 417 / 11 / 836:  84%|████████▎ | 836/1000 [1:18:22<15:22,  5.62s/it][Succeeded / Failed / Skipped / Total] 408 / 417 / 11 / 836:  84%|████████▎ | 837/1000 [1:18:28<15:16,  5.63s/it][Succeeded / Failed / Skipped / Total] 408 / 418 / 11 / 837:  84%|████████▎ | 837/1000 [1:18:28<15:16,  5.63s/it][Succeeded / Failed / Skipped / Total] 408 / 418 / 11 / 837:  84%|████████▍ | 838/1000 [1:18:32<15:11,  5.62s/it][Succeeded / Failed / Skipped / Total] 409 / 418 / 11 / 838:  84%|████████▍ | 838/1000 [1:18:32<15:11,  5.62s/it][Succeeded / Failed / Skipped / Total] 409 / 418 / 11 / 838:  84%|████████▍ | 839/1000 [1:18:34<15:04,  5.62s/it][Succeeded / Failed / Skipped / Total] 410 / 418 / 11 / 839:  84%|████████▍ | 839/1000 [1:18:34<15:04,  5.62s/it][Succeeded / Failed / Skipped / Total] 410 / 418 / 11 / 839:  84%|████████▍ | 840/1000 [1:18:35<14:58,  5.61s/it][Succeeded / Failed / Skipped / Total] 410 / 419 / 11 / 840:  84%|████████▍ | 840/1000 [1:18:35<14:58,  5.61s/it][Succeeded / Failed / Skipped / Total] 410 / 419 / 11 / 840:  84%|████████▍ | 841/1000 [1:18:49<14:54,  5.62s/it]Lookup the type data for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public TypeData [[lookupTypeData]] ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( type ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData [[burmese]] ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( type ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 834 ---------------------------------------------
Visits an annotation on this field . --> [[[FAILED]]]

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String descriptor , final boolean [[visible]] ) { if ( fv != null ) { return fv . visitAnnotation ( descriptor , [[visible]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[unsinkable]] ( final String descriptor , final boolean [[chews]] ) { if ( fv != null ) { return fv . visitAnnotation ( descriptor , [[chews]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 835 ---------------------------------------------
Resolves the real name of the given json name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveRealName]] ( final String [[jsonName]] ) { if ( jsonNames == null ) { return [[jsonName]] ; } int [[jsonIndex]] = ArraysUtil . indexOf ( jsonNames , [[jsonName]] ) ; if ( [[jsonIndex]] == - 1 ) { return [[jsonName]] ; } return realNames [ [[jsonIndex]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[abandoned]] ( final String [[represented]] ) { if ( jsonNames == null ) { return [[represented]] ; } int [[aren]] = ArraysUtil . indexOf ( jsonNames , [[represented]] ) ; if ( [[aren]] == - 1 ) { return [[represented]] ; } return realNames [ [[aren]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 836 ---------------------------------------------
Create action runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime [[createActionRuntime]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime [[encyclopaedias]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 837 ---------------------------------------------
Returns the content of the file . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[lauryn]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 838 ---------------------------------------------
Puts the constant pool into the given vector . --> Frederique au frederique --> Socre: 1.0

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[frederique]] ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 839 ---------------------------------------------
Resolve json name . --> Returns boer if boer is in realNames otherwise returns boer --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int [[realIndex]] = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( [[realIndex]] == - 1 ) { return [[realName]] ; } return jsonNames [ [[realIndex]] ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[mistakenly]] ( final String [[boer]] ) { if ( realNames == null ) { return [[boer]] ; } int [[disordered]] = ArraysUtil . indexOf ( realNames , [[boer]] ) ; if ( [[disordered]] == - 1 ) { return [[boer]] ; } return jsonNames [ [[disordered]] ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 840 ---------------------------------------------
Lookup the type data for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData [[_lookupTypeData]] ( final Class [[type]] ) { TypeData [[typeData]] = typeDataMap . get ( [[type]] ) ; if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , [[typeData]] ) ; } return [[typeData]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData [[repeatedly]] ( final Class [[globo]] ) { TypeData [[car]] = typeDataMap . get ( [[globo]] ) ; if ( [[car]] == null ) { [[car]] = scanClassForAnnotations ( [[globo]] ) ; typeDataMap . put ( [[globo]] , [[car]] ) ; } return [[car]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 841 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 411 / 419 / 11 / 841:  84%|████████▍ | 841/1000 [1:18:49<14:54,  5.62s/it][Succeeded / Failed / Skipped / Total] 411 / 419 / 11 / 841:  84%|████████▍ | 842/1000 [1:18:56<14:48,  5.63s/it][Succeeded / Failed / Skipped / Total] 411 / 420 / 11 / 842:  84%|████████▍ | 842/1000 [1:18:56<14:48,  5.63s/it][Succeeded / Failed / Skipped / Total] 411 / 420 / 11 / 842:  84%|████████▍ | 843/1000 [1:19:01<14:43,  5.62s/it][Succeeded / Failed / Skipped / Total] 411 / 421 / 11 / 843:  84%|████████▍ | 843/1000 [1:19:01<14:43,  5.62s/it][Succeeded / Failed / Skipped / Total] 411 / 421 / 11 / 843:  84%|████████▍ | 844/1000 [1:19:09<14:37,  5.63s/it][Succeeded / Failed / Skipped / Total] 411 / 422 / 11 / 844:  84%|████████▍ | 844/1000 [1:19:09<14:37,  5.63s/it][Succeeded / Failed / Skipped / Total] 411 / 422 / 11 / 844:  84%|████████▍ | 845/1000 [1:19:20<14:33,  5.63s/it][Succeeded / Failed / Skipped / Total] 411 / 423 / 11 / 845:  84%|████████▍ | 845/1000 [1:19:20<14:33,  5.63s/it][Succeeded / Failed / Skipped / Total] 411 / 423 / 11 / 845:  85%|████████▍ | 846/1000 [1:19:31<14:28,  5.64s/it][Succeeded / Failed / Skipped / Total] 411 / 424 / 11 / 846:  85%|████████▍ | 846/1000 [1:19:31<14:28,  5.64s/it][Succeeded / Failed / Skipped / Total] 411 / 424 / 11 / 846:  85%|████████▍ | 847/1000 [1:19:56<14:26,  5.66s/it][Succeeded / Failed / Skipped / Total] 411 / 425 / 11 / 847:  85%|████████▍ | 847/1000 [1:19:56<14:26,  5.66s/it][Succeeded / Failed / Skipped / Total] 411 / 425 / 11 / 847:  85%|████████▍ | 848/1000 [1:20:03<14:20,  5.66s/it][Succeeded / Failed / Skipped / Total] 411 / 426 / 11 / 848:  85%|████████▍ | 848/1000 [1:20:03<14:20,  5.66s/it][Succeeded / Failed / Skipped / Total] 411 / 426 / 11 / 848:  85%|████████▍ | 849/1000 [1:20:04<14:14,  5.66s/it][Succeeded / Failed / Skipped / Total] 411 / 427 / 11 / 849:  85%|████████▍ | 849/1000 [1:20:04<14:14,  5.66s/it][Succeeded / Failed / Skipped / Total] 411 / 427 / 11 / 849:  85%|████████▌ | 850/1000 [1:20:16<14:09,  5.67s/it]Adds a field reference to the constant pool . --> Methode permettant de constantFieldref --> Socre: 1.0

[[[[Adv]]]]: Symbol addConstantFieldref ( final String [[owner]] , final String [[name]] , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , [[owner]] , [[name]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantFieldref ( final String [[estúpido]] , final String [[biscuit]] , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , [[estúpido]] , [[biscuit]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 842 ---------------------------------------------
Resolves a JSON name for the given type and name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveJsonName]] ( final Class [[type]] , final String name ) { TypeData [[typeData]] = lookupTypeData ( [[type]] ) ; return [[typeData]] . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String [[hungers]] ( final Class [[conspired]] , final String name ) { TypeData [[siao]] = lookupTypeData ( [[conspired]] ) ; return [[siao]] . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 843 ---------------------------------------------
Puts the bootstrap methods into the given byte vector . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector [[output]] ) { if ( bootstrapMethods != null ) { [[output]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[lewd]] ( final ByteVector [[grammes]] ) { if ( bootstrapMethods != null ) { [[grammes]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 844 ---------------------------------------------
Copies the bootstrap methods from the class reader to the char buffer . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader classReader , final char [ ] [[charBuffer]] ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[kuman]] ( final ClassReader classReader , final char [ ] [[lv]] ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 845 ---------------------------------------------
Resolve the real name for the given type and json name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class [[type]] , final String [[jsonName]] ) { TypeData [[typeData]] = lookupTypeData ( [[type]] ) ; return [[typeData]] . resolveRealName ( [[jsonName]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[sooty]] ( final Class [[tolerated]] , final String [[wise]] ) { TypeData [[denying]] = lookupTypeData ( [[tolerated]] ) ; return [[denying]] . resolveRealName ( [[wise]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 846 ---------------------------------------------
Sets the major version and class name . --> [[[FAILED]]]

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int majorVersion , final String className ) { this . majorVersion = majorVersion ; this . [[className]] = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[absolution]] ( final int majorVersion , final String className ) { this . majorVersion = majorVersion ; this . [[mí]] = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 847 ---------------------------------------------
Adds a constant method reference . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodref]] ( final String owner , final String name , final String [[descriptor]] , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , [[descriptor]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[lapse]] ( final String owner , final String name , final String [[estúpido]] , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , [[estúpido]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 848 ---------------------------------------------
Adds a new constant to the constant pool of this symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int index , final int tag , final int [[value]] ) { add ( new Entry ( index , tag , [[value]] , hash ( tag , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[lamé]] ( final int index , final int tag , final int [[schoolroom]] ) { add ( new Entry ( index , tag , [[schoolroom]] , hash ( tag , [[schoolroom]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 849 ---------------------------------------------
Adds a member reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int index , final int [[tag]] , final String owner , final String name , final String [[descriptor]] ) { add ( new Entry ( index , [[tag]] , owner , name , [[descriptor]] , 0 , hash ( [[tag]] , owner , name , [[descriptor]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[bulk]] ( final int index , final int [[crin]] , final String owner , final String name , final String [[enchantée]] ) { add ( new Entry ( index , [[crin]] , owner , name , [[enchantée]] , 0 , hash ( [[crin]] , owner , name , [[enchantée]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 850 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 411 / 428 / 11 / 850:  85%|████████▌ | 850/1000 [1:20:16<14:09,  5.67s/it][Succeeded / Failed / Skipped / Total] 411 / 428 / 11 / 850:  85%|████████▌ | 851/1000 [1:20:21<14:04,  5.67s/it][Succeeded / Failed / Skipped / Total] 411 / 429 / 11 / 851:  85%|████████▌ | 851/1000 [1:20:21<14:04,  5.67s/it][Succeeded / Failed / Skipped / Total] 411 / 429 / 11 / 851:  85%|████████▌ | 852/1000 [1:20:30<13:59,  5.67s/it][Succeeded / Failed / Skipped / Total] 411 / 430 / 11 / 852:  85%|████████▌ | 852/1000 [1:20:30<13:59,  5.67s/it][Succeeded / Failed / Skipped / Total] 411 / 430 / 11 / 852:  85%|████████▌ | 853/1000 [1:20:46<13:55,  5.68s/it][Succeeded / Failed / Skipped / Total] 411 / 431 / 11 / 853:  85%|████████▌ | 853/1000 [1:20:46<13:55,  5.68s/it][Succeeded / Failed / Skipped / Total] 411 / 431 / 11 / 853:  85%|████████▌ | 854/1000 [1:20:50<13:49,  5.68s/it][Succeeded / Failed / Skipped / Total] 411 / 432 / 11 / 854:  85%|████████▌ | 854/1000 [1:20:50<13:49,  5.68s/it][Succeeded / Failed / Skipped / Total] 411 / 432 / 11 / 854:  86%|████████▌ | 855/1000 [1:21:09<13:45,  5.70s/it]Adds a constant to the constant pool of this symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantLongOrDouble]] ( final int [[index]] , final int [[tag]] , final long value ) { add ( new Entry ( [[index]] , [[tag]] , value , hash ( [[tag]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[grendel]] ( final int [[nero]] , final int [[painkillers]] , final long value ) { add ( new Entry ( [[nero]] , [[painkillers]] , value , hash ( [[painkillers]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 851 ---------------------------------------------
Adds a member reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry [[addConstantMemberReference]] ( final int [[tag]] , final String [[owner]] , final String name , final String descriptor ) { int hashCode = hash ( [[tag]] , [[owner]] , name , descriptor ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == [[tag]] && [[entry]] . hashCode == hashCode && [[entry]] . owner . equals ( [[owner]] ) && [[entry]] . name . equals ( name ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( [[tag]] , addConstantClass ( [[owner]] ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , [[owner]] , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry [[amaretto]] ( final int [[brunner]] , final String [[pervez]] , final String name , final String descriptor ) { int hashCode = hash ( [[brunner]] , [[pervez]] , name , descriptor ) ; Entry [[murcia]] = get ( hashCode ) ; while ( [[murcia]] != null ) { if ( [[murcia]] . tag == [[brunner]] && [[murcia]] . hashCode == hashCode && [[murcia]] . owner . equals ( [[pervez]] ) && [[murcia]] . name . equals ( name ) && [[murcia]] . value . equals ( descriptor ) ) { return [[murcia]] ; } [[murcia]] = [[murcia]] . next ; } constantPool . put122 ( [[brunner]] , addConstantClass ( [[pervez]] ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[brunner]] , [[pervez]] , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 852 ---------------------------------------------
Adds an integer or float constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantIntegerOrFloat]] ( final int tag , final int [[value]] ) { int hashCode = hash ( tag , [[value]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == [[value]] ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( [[value]] ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[dossiers]] ( final int tag , final int [[orphaned]] ) { int hashCode = hash ( tag , [[orphaned]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == [[orphaned]] ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( [[orphaned]] ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[orphaned]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 853 ---------------------------------------------
Adds a constant name and type to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantNameAndType]] ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[hitler]] ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 854 ---------------------------------------------
Adds a UTF8 constant at the given index . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int index , final String [[value]] ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , [[value]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[tarkovsky]] ( final int index , final String [[adele]] ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , [[adele]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[adele]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 855 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 411 / 433 / 11 / 855:  86%|████████▌ | 855/1000 [1:21:09<13:45,  5.70s/it][Succeeded / Failed / Skipped / Total] 411 / 433 / 11 / 855:  86%|████████▌ | 856/1000 [1:21:10<13:39,  5.69s/it][Succeeded / Failed / Skipped / Total] 411 / 434 / 11 / 856:  86%|████████▌ | 856/1000 [1:21:10<13:39,  5.69s/it][Succeeded / Failed / Skipped / Total] 411 / 434 / 11 / 856:  86%|████████▌ | 857/1000 [1:21:20<13:34,  5.69s/it][Succeeded / Failed / Skipped / Total] 411 / 435 / 11 / 857:  86%|████████▌ | 857/1000 [1:21:20<13:34,  5.69s/it][Succeeded / Failed / Skipped / Total] 411 / 435 / 11 / 857:  86%|████████▌ | 858/1000 [1:22:00<13:34,  5.73s/it][Succeeded / Failed / Skipped / Total] 411 / 436 / 11 / 858:  86%|████████▌ | 858/1000 [1:22:00<13:34,  5.73s/it][Succeeded / Failed / Skipped / Total] 411 / 436 / 11 / 858:  86%|████████▌ | 859/1000 [1:22:07<13:28,  5.74s/it][Succeeded / Failed / Skipped / Total] 411 / 437 / 11 / 859:  86%|████████▌ | 859/1000 [1:22:07<13:28,  5.74s/it][Succeeded / Failed / Skipped / Total] 411 / 437 / 11 / 859:  86%|████████▌ | 860/1000 [1:22:10<13:22,  5.73s/it][Succeeded / Failed / Skipped / Total] 412 / 437 / 11 / 860:  86%|████████▌ | 860/1000 [1:22:10<13:22,  5.73s/it][Succeeded / Failed / Skipped / Total] 412 / 437 / 11 / 860:  86%|████████▌ | 861/1000 [1:22:11<13:16,  5.73s/it]Adds a long constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantLongOrDouble]] ( final int [[tag]] , final long [[value]] ) { int hashCode = hash ( [[tag]] , [[value]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == hashCode && entry . data == [[value]] ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( [[tag]] ) . putLong ( [[value]] ) ; constantPoolCount += 2 ; return put ( new Entry ( index , [[tag]] , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[pestering]] ( final int [[grazier]] , final long [[dusting]] ) { int hashCode = hash ( [[grazier]] , [[dusting]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[grazier]] && entry . hashCode == hashCode && entry . data == [[dusting]] ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( [[grazier]] ) . putLong ( [[dusting]] ) ; constantPoolCount += 2 ; return put ( new Entry ( index , [[grazier]] , [[dusting]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 856 ---------------------------------------------
Adds a new constant entry to the symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int [[index]] , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( [[index]] , tag , name , descriptor , hash ( tag , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[elisabetta]] ( final int [[pulsing]] , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( [[pulsing]] , tag , name , descriptor , hash ( tag , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 857 ---------------------------------------------
Adds a UTF8 constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantUtf8]] ( final String value ) { int [[hashCode]] = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == [[hashCode]] && entry . value . equals ( value ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[hitler]] ( final String value ) { int [[camp]] = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry entry = get ( [[camp]] ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == [[camp]] && entry . value . equals ( value ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , [[camp]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 858 ---------------------------------------------
Adds a constant method handle to the symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int [[referenceKind]] , final String owner , final String [[name]] , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[surfed]] ( final int [[amazon]] , final String owner , final String [[colliding]] , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 859 ---------------------------------------------
Adds a dynamic constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantDynamic]] ( final String name , final String [[descriptor]] , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[bootstrapMethod]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , [[descriptor]] , [[bootstrapMethod]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[sprinklers]] ( final String name , final String [[bowels]] , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[stepladder]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , [[bowels]] , [[stepladder]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 860 ---------------------------------------------
Add a type to the type table . --> sur - typeTableIndex1 - > sur --> Socre: 1.0

[[[[Adv]]]]: int [[addMergedType]] ( final int typeTableIndex1 , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int [[sur]] ( final int typeTableIndex1 , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 861 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 412 / 438 / 11 / 861:  86%|████████▌ | 861/1000 [1:22:11<13:16,  5.73s/it][Succeeded / Failed / Skipped / Total] 412 / 438 / 11 / 861:  86%|████████▌ | 862/1000 [1:22:14<13:09,  5.72s/it][Succeeded / Failed / Skipped / Total] 412 / 439 / 11 / 862:  86%|████████▌ | 862/1000 [1:22:14<13:09,  5.72s/it][Succeeded / Failed / Skipped / Total] 412 / 439 / 11 / 862:  86%|████████▋ | 863/1000 [1:22:18<13:04,  5.72s/it][Succeeded / Failed / Skipped / Total] 412 / 440 / 11 / 863:  86%|████████▋ | 863/1000 [1:22:18<13:04,  5.72s/it][Succeeded / Failed / Skipped / Total] 412 / 440 / 11 / 863:  86%|████████▋ | 864/1000 [1:22:38<13:00,  5.74s/it][Succeeded / Failed / Skipped / Total] 412 / 441 / 11 / 864:  86%|████████▋ | 864/1000 [1:22:38<13:00,  5.74s/it][Succeeded / Failed / Skipped / Total] 412 / 441 / 11 / 864:  86%|████████▋ | 865/1000 [1:22:42<12:54,  5.74s/it][Succeeded / Failed / Skipped / Total] 412 / 442 / 11 / 865:  86%|████████▋ | 865/1000 [1:22:42<12:54,  5.74s/it][Succeeded / Failed / Skipped / Total] 412 / 442 / 11 / 865:  87%|████████▋ | 866/1000 [1:22:52<12:49,  5.74s/it][Succeeded / Failed / Skipped / Total] 412 / 443 / 11 / 866:  87%|████████▋ | 866/1000 [1:22:52<12:49,  5.74s/it][Succeeded / Failed / Skipped / Total] 412 / 443 / 11 / 866:  87%|████████▋ | 867/1000 [1:22:53<12:42,  5.74s/it]Adds a constant invoke dynamic reference . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantInvokeDynamic]] ( final String [[name]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , [[name]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[whereto]] ( final String [[chatur]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , [[chatur]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 862 ---------------------------------------------
Adds a constant method handle to the symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMethodHandle]] ( final int index , final int referenceKind , final String owner , final String name , final String [[descriptor]] ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , [[descriptor]] , referenceKind ) ; add ( new Entry ( index , tag , owner , name , [[descriptor]] , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[wheres]] ( final int index , final int referenceKind , final String owner , final String name , final String [[cooley]] ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , [[cooley]] , referenceKind ) ; add ( new Entry ( index , tag , owner , name , [[cooley]] , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 863 ---------------------------------------------
Adds a reference to a UTF - 8 constant . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int index , final int [[tag]] , final String value ) { add ( new Entry ( index , [[tag]] , value , hash ( [[tag]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[archaeopteryx]] ( final int index , final int [[imbibe]] , final String value ) { add ( new Entry ( index , [[imbibe]] , value , hash ( [[imbibe]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 864 ---------------------------------------------
Adds a constant for a dynamic or invoke dynamic reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[burnham]] ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 865 ---------------------------------------------
Adds a UTF8 constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantUtf8Reference]] ( final int tag , final String value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[protégé]] ( final int tag , final String value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 866 ---------------------------------------------
Removes all entries from this multimap . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int [[i]] = 0 ; [[i]] < entries . length ; [[i]] ++ ) { entries [ [[i]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[erratically]] ( ) { for ( int [[folders]] = 0 ; [[folders]] < entries . length ; [[folders]] ++ ) { entries [ [[folders]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 867 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 412 / 444 / 11 / 867:  87%|████████▋ | 867/1000 [1:22:53<12:42,  5.74s/it][Succeeded / Failed / Skipped / Total] 412 / 444 / 11 / 867:  87%|████████▋ | 868/1000 [1:22:56<12:36,  5.73s/it][Succeeded / Failed / Skipped / Total] 413 / 444 / 11 / 868:  87%|████████▋ | 868/1000 [1:22:56<12:36,  5.73s/it][Succeeded / Failed / Skipped / Total] 413 / 444 / 11 / 868:  87%|████████▋ | 869/1000 [1:23:11<12:32,  5.74s/it][Succeeded / Failed / Skipped / Total] 414 / 444 / 11 / 869:  87%|████████▋ | 869/1000 [1:23:11<12:32,  5.74s/it][Succeeded / Failed / Skipped / Total] 414 / 444 / 11 / 869:  87%|████████▋ | 870/1000 [1:23:14<12:26,  5.74s/it][Succeeded / Failed / Skipped / Total] 415 / 444 / 11 / 870:  87%|████████▋ | 870/1000 [1:23:14<12:26,  5.74s/it][Succeeded / Failed / Skipped / Total] 415 / 444 / 11 / 870:  87%|████████▋ | 871/1000 [1:23:23<12:21,  5.74s/it][Succeeded / Failed / Skipped / Total] 415 / 445 / 11 / 871:  87%|████████▋ | 871/1000 [1:23:23<12:21,  5.74s/it][Succeeded / Failed / Skipped / Total] 415 / 445 / 11 / 871:  87%|████████▋ | 872/1000 [1:23:30<12:15,  5.75s/it][Succeeded / Failed / Skipped / Total] 415 / 446 / 11 / 872:  87%|████████▋ | 872/1000 [1:23:30<12:15,  5.75s/it][Succeeded / Failed / Skipped / Total] 415 / 446 / 11 / 872:  87%|████████▋ | 873/1000 [1:23:31<12:08,  5.74s/it][Succeeded / Failed / Skipped / Total] 415 / 447 / 11 / 873:  87%|████████▋ | 873/1000 [1:23:31<12:08,  5.74s/it][Succeeded / Failed / Skipped / Total] 415 / 447 / 11 / 873:  87%|████████▋ | 874/1000 [1:23:31<12:02,  5.73s/it]Adds a dynamic reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int [[hashCode]] = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[hashCode]] && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[steppers]] ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int [[chatty]] = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( [[chatty]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[chatty]] && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , [[chatty]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 868 ---------------------------------------------
Adds a bootstrap method to the symbol table . --> bootstrapMethodArguments --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle [[bootstrapMethodHandle]] , final Object ... bootstrapMethodArguments ) { ByteVector [[bootstrapMethodsAttribute]] = bootstrapMethods ; if ( [[bootstrapMethodsAttribute]] == null ) { [[bootstrapMethodsAttribute]] = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[íå]] ( final Handle [[commentator]] , final Object ... bootstrapMethodArguments ) { ByteVector [[savior]] = bootstrapMethods ; if ( [[savior]] == null ) { [[savior]] = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 869 ---------------------------------------------
Visits the end of the method . --> Creates the first chain delegate and the second chain delegate --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[visitEnd]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void [[wikipedia]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 870 ---------------------------------------------
Create the first chain delegate . --> Called when the window is widgeon --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[widgeon]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 871 ---------------------------------------------
Returns an iterator over the entries in this map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] [[e]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[e]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > [[next]] ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > [[next]] = [[e]] [ 0 ] ; [[e]] [ 0 ] = [[e]] [ 0 ] . after ; return [[next]] ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[ofl]] ( ) { final MapEntry [ ] [[antifreeze]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[antifreeze]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > [[intergalactic]] ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > [[intergalactic]] = [[antifreeze]] [ 0 ] ; [[antifreeze]] [ 0 ] = [[antifreeze]] [ 0 ] . after ; return [[intergalactic]] ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 872 ---------------------------------------------
Returns all entries in the map . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > [[e]] = head . after ; while ( [[e]] != head ) { all . add ( [[e]] ) ; [[e]] = [[e]] . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[qaddafi]] ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > [[fredy]] = head . after ; while ( [[fredy]] != head ) { all . add ( [[fredy]] ) ; [[fredy]] = [[fredy]] . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 873 ---------------------------------------------
Returns the hash value of the given name . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[hash]] ( final String [[name]] ) { int h = 0 ; for ( int i = [[name]] . length ( ) - 1 ; i >= 0 ; i -- ) { char c = [[name]] . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[romero]] ( final String [[cheyenne]] ) { int h = 0 ; for ( int i = [[cheyenne]] . length ( ) - 1 ; i >= 0 ; i -- ) { char c = [[cheyenne]] . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 874 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 416 / 447 / 11 / 874:  87%|████████▋ | 874/1000 [1:23:31<12:02,  5.73s/it][Succeeded / Failed / Skipped / Total] 416 / 447 / 11 / 874:  88%|████████▊ | 875/1000 [1:23:55<11:59,  5.75s/it][Succeeded / Failed / Skipped / Total] 416 / 448 / 11 / 875:  88%|████████▊ | 875/1000 [1:23:55<11:59,  5.75s/it][Succeeded / Failed / Skipped / Total] 416 / 448 / 11 / 875:  88%|████████▊ | 876/1000 [1:23:55<11:52,  5.75s/it][Succeeded / Failed / Skipped / Total] 416 / 449 / 11 / 876:  88%|████████▊ | 876/1000 [1:23:55<11:52,  5.75s/it][Succeeded / Failed / Skipped / Total] 416 / 449 / 11 / 876:  88%|████████▊ | 877/1000 [1:24:02<11:47,  5.75s/it][Succeeded / Failed / Skipped / Total] 417 / 449 / 11 / 877:  88%|████████▊ | 877/1000 [1:24:02<11:47,  5.75s/it][Succeeded / Failed / Skipped / Total] 417 / 449 / 11 / 877:  88%|████████▊ | 878/1000 [1:24:03<11:40,  5.74s/it][Succeeded / Failed / Skipped / Total] 417 / 450 / 11 / 878:  88%|████████▊ | 878/1000 [1:24:03<11:40,  5.74s/it][Succeeded / Failed / Skipped / Total] 417 / 450 / 11 / 878:  88%|████████▊ | 879/1000 [1:24:05<11:34,  5.74s/it][Succeeded / Failed / Skipped / Total] 417 / 451 / 11 / 879:  88%|████████▊ | 879/1000 [1:24:05<11:34,  5.74s/it][Succeeded / Failed / Skipped / Total] 417 / 451 / 11 / 879:  88%|████████▊ | 880/1000 [1:24:10<11:28,  5.74s/it][Succeeded / Failed / Skipped / Total] 418 / 451 / 11 / 880:  88%|████████▊ | 880/1000 [1:24:10<11:28,  5.74s/it][Succeeded / Failed / Skipped / Total] 418 / 451 / 11 / 880:  88%|████████▊ | 881/1000 [1:24:17<11:23,  5.74s/it][Succeeded / Failed / Skipped / Total] 418 / 452 / 11 / 881:  88%|████████▊ | 881/1000 [1:24:17<11:23,  5.74s/it][Succeeded / Failed / Skipped / Total] 418 / 452 / 11 / 881:  88%|████████▊ | 882/1000 [1:24:21<11:17,  5.74s/it]Create the first chain delegate . --> algae - algae - algae - algae - algae --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[algae]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 875 ---------------------------------------------
Parses a path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path [[parse]] ( final String path ) { return path == null ? new Path ( ) : new Path ( StringUtil . splitc ( path , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path [[soufflé]] ( final String path ) { return path == null ? new Path ( ) : new Path ( StringUtil . splitc ( path , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 876 ---------------------------------------------
Visits an annotation on this method . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public AnnotationVisitor visitAnnotation ( final String [[desc]] , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( [[desc]] , visible ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor visitAnnotation ( final String [[rlease]] , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( [[rlease]] , visible ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 877 ---------------------------------------------
Appends a sequence of characters to this FastCharBuffer . --> ally characters in tommy starting at start --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence [[csq]] , final int start , final int [[end]] ) { for ( int [[i]] = start ; [[i]] < [[end]] ; [[i]] ++ ) { [[append]] ( [[csq]] . charAt ( [[i]] ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[ally]] ( final CharSequence [[tommy]] , final int start , final int [[already]] ) { for ( int [[equivalent]] = start ; [[equivalent]] < [[already]] ; [[equivalent]] ++ ) { [[ally]] ( [[tommy]] . charAt ( [[equivalent]] ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 878 ---------------------------------------------
Pushes a field to the path . --> [[[FAILED]]]

[[[[Adv]]]]: public Path [[push]] ( final CharSequence [[field]] ) { _push ( [[field]] ) ; if ( altPath != null ) { altPath . push ( [[field]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[illustrate]] ( final CharSequence [[semifinals]] ) { _push ( [[semifinals]] ) ; if ( altPath != null ) { altPath . push ( [[semifinals]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 879 ---------------------------------------------
Increases the capacity if it is less than the given minimum . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[grow]] ( final int [[minCapacity]] ) { final int [[oldCapacity]] = buffer . length ; int [[newCapacity]] = [[oldCapacity]] << 1 ; if ( [[newCapacity]] - [[minCapacity]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[pompano]] ( final int [[steinway]] ) { final int [[baleful]] = buffer . length ; int [[smuggle]] = [[baleful]] << 1 ; if ( [[smuggle]] - [[steinway]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 880 ---------------------------------------------
Reads a property from the source object . --> Looks up a getter in the source object and invokes it --> Socre: 1.0

[[[[Adv]]]]: private Object [[readProperty]] ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter getter = propertyDescriptor . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[coughlin]] ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter getter = propertyDescriptor . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 881 ---------------------------------------------
Returns all values with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public List < V > [[getAll]] ( final String [[name]] ) { LinkedList < V > [[values]] = new LinkedList <> ( ) ; int h = hash ( [[name]] ) ; int [[i]] = index ( h ) ; MapEntry < V > e = entries [ [[i]] ] ; while ( e != null ) { if ( e . hash == h && eq ( [[name]] , e . key ) ) { [[values]] . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return [[values]] ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[slower]] ( final String [[annas]] ) { LinkedList < V > [[completes]] = new LinkedList <> ( ) ; int h = hash ( [[annas]] ) ; int [[prowl]] = index ( h ) ; MapEntry < V > e = entries [ [[prowl]] ] ; while ( e != null ) { if ( e . hash == h && eq ( [[annas]] , e . key ) ) { [[completes]] . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return [[completes]] ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 882 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 419 / 452 / 11 / 882:  88%|████████▊ | 882/1000 [1:24:21<11:17,  5.74s/it][Succeeded / Failed / Skipped / Total] 419 / 452 / 11 / 882:  88%|████████▊ | 883/1000 [1:24:29<11:11,  5.74s/it][Succeeded / Failed / Skipped / Total] 419 / 453 / 11 / 883:  88%|████████▊ | 883/1000 [1:24:29<11:11,  5.74s/it][Succeeded / Failed / Skipped / Total] 419 / 453 / 11 / 883:  88%|████████▊ | 884/1000 [1:24:33<11:05,  5.74s/it][Succeeded / Failed / Skipped / Total] 420 / 453 / 11 / 884:  88%|████████▊ | 884/1000 [1:24:33<11:05,  5.74s/it][Succeeded / Failed / Skipped / Total] 420 / 453 / 11 / 884:  88%|████████▊ | 885/1000 [1:24:37<10:59,  5.74s/it][Succeeded / Failed / Skipped / Total] 420 / 454 / 11 / 885:  88%|████████▊ | 885/1000 [1:24:37<10:59,  5.74s/it][Succeeded / Failed / Skipped / Total] 420 / 454 / 11 / 885:  89%|████████▊ | 886/1000 [1:24:40<10:53,  5.73s/it][Succeeded / Failed / Skipped / Total] 421 / 454 / 11 / 886:  89%|████████▊ | 886/1000 [1:24:40<10:53,  5.73s/it][Succeeded / Failed / Skipped / Total] 421 / 454 / 11 / 886:  89%|████████▊ | 887/1000 [1:24:50<10:48,  5.74s/it][Succeeded / Failed / Skipped / Total] 422 / 454 / 11 / 887:  89%|████████▊ | 887/1000 [1:24:50<10:48,  5.74s/it][Succeeded / Failed / Skipped / Total] 422 / 454 / 11 / 887:  89%|████████▉ | 888/1000 [1:25:22<10:46,  5.77s/it]Converts JtxTransactionMode to DbTransactionMode --> Returns a checkered version of the given JtxTransactionMode --> Socre: 1.0

[[[[Adv]]]]: public static DbTransactionMode [[convertToDbMode]] ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode [[checkered]] ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 883 ---------------------------------------------
Executes the pathref and returns the next result . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[execute]] ( ) { String methodName = targetMethodName ( ) ; Class [[returnType]] = [[returnType]] ( ) ; Object next = pathref . continueWith ( this , methodName , [[returnType]] ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object [[bourgogne]] ( ) { String methodName = targetMethodName ( ) ; Class [[inspections]] = [[inspections]] ( ) ; Object next = pathref . continueWith ( this , methodName , [[inspections]] ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 884 ---------------------------------------------
Append a buffer to the end of the list . --> If the litany is empty return the litany --> Socre: 1.0

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer [[buffer]] ) { if ( [[buffer]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[becau]] ( final Buffer [[litany]] ) { if ( [[litany]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 885 ---------------------------------------------
Configure the servlet context . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext [[servletContext]] ) { [[servletContext]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration [[filter]] = [[servletContext]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; [[filter]] . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration [[filter]] = [[servletContext]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; [[filter]] . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[suggestion]] ( final ServletContext [[clocked]] ) { [[clocked]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration [[makeover]] = [[clocked]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; [[makeover]] . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration [[makeover]] = [[clocked]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; [[makeover]] . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 886 ---------------------------------------------
Adds all entries from the given map to this map . --> Add cagliostro counterintuitive --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map [[t]] ) { for ( Object o : [[t]] . entrySet ( ) ) { Map . Entry [[e]] = ( Map . Entry ) o ; put ( [[e]] . getKey ( ) , [[e]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[counterintuitive]] ( final Map [[cagliostro]] ) { for ( Object o : [[cagliostro]] . entrySet ( ) ) { Map . Entry [[beefed]] = ( Map . Entry ) o ; put ( [[beefed]] . getKey ( ) , [[beefed]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 887 ---------------------------------------------
Writes the contents of this list to the given output stream . --> specialise FastByteBuffers and Uploadables into an OutputStream --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream [[inputStream]] = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( [[inputStream]] , out ) ; } finally { StreamUtil . close ( [[inputStream]] ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void [[specialise]] ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream [[homolka]] = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( [[homolka]] , out ) ; } finally { StreamUtil . close ( [[homolka]] ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 888 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 422 / 455 / 11 / 888:  89%|████████▉ | 888/1000 [1:25:22<10:46,  5.77s/it][Succeeded / Failed / Skipped / Total] 422 / 455 / 11 / 888:  89%|████████▉ | 889/1000 [1:25:26<10:40,  5.77s/it][Succeeded / Failed / Skipped / Total] 423 / 455 / 11 / 889:  89%|████████▉ | 889/1000 [1:25:26<10:40,  5.77s/it][Succeeded / Failed / Skipped / Total] 423 / 455 / 11 / 889:  89%|████████▉ | 890/1000 [1:25:28<10:33,  5.76s/it][Succeeded / Failed / Skipped / Total] 423 / 456 / 11 / 890:  89%|████████▉ | 890/1000 [1:25:28<10:33,  5.76s/it][Succeeded / Failed / Skipped / Total] 423 / 456 / 11 / 890:  89%|████████▉ | 891/1000 [1:25:32<10:27,  5.76s/it][Succeeded / Failed / Skipped / Total] 423 / 457 / 11 / 891:  89%|████████▉ | 891/1000 [1:25:32<10:27,  5.76s/it][Succeeded / Failed / Skipped / Total] 423 / 457 / 11 / 891:  89%|████████▉ | 892/1000 [1:25:33<10:21,  5.75s/it][Succeeded / Failed / Skipped / Total] 423 / 458 / 11 / 892:  89%|████████▉ | 892/1000 [1:25:33<10:21,  5.75s/it][Succeeded / Failed / Skipped / Total] 423 / 458 / 11 / 892:  89%|████████▉ | 893/1000 [1:25:38<10:15,  5.75s/it][Succeeded / Failed / Skipped / Total] 423 / 459 / 11 / 893:  89%|████████▉ | 893/1000 [1:25:38<10:15,  5.75s/it][Succeeded / Failed / Skipped / Total] 423 / 459 / 11 / 893:  89%|████████▉ | 894/1000 [1:25:48<10:10,  5.76s/it][Succeeded / Failed / Skipped / Total] 424 / 459 / 11 / 894:  89%|████████▉ | 894/1000 [1:25:48<10:10,  5.76s/it][Succeeded / Failed / Skipped / Total] 424 / 459 / 11 / 894:  90%|████████▉ | 895/1000 [1:25:52<10:04,  5.76s/it][Succeeded / Failed / Skipped / Total] 424 / 460 / 11 / 895:  90%|████████▉ | 895/1000 [1:25:52<10:04,  5.76s/it][Succeeded / Failed / Skipped / Total] 424 / 460 / 11 / 895:  90%|████████▉ | 896/1000 [1:25:54<09:58,  5.75s/it][Succeeded / Failed / Skipped / Total] 425 / 460 / 11 / 896:  90%|████████▉ | 896/1000 [1:25:54<09:58,  5.75s/it][Succeeded / Failed / Skipped / Total] 425 / 460 / 11 / 896:  90%|████████▉ | 897/1000 [1:26:04<09:53,  5.76s/it]Returns an array of all field descriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] [[getAllFieldDescriptors]] ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int [[index]] = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { allFields [ [[index]] ] = fieldDescriptor ; [[index]] ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] [[disagreements]] ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int [[depicts]] = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { allFields [ [[depicts]] ] = fieldDescriptor ; [[depicts]] ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 889 ---------------------------------------------
Writes this response to the given output stream with the given progress listener . --> Brandeis an ultraviolet and a smugly --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream [[out]] , final HttpProgressListener [[progressListener]] ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[brandeis]] ( final OutputStream [[ultraviolet]] , final HttpProgressListener [[smugly]] ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 890 ---------------------------------------------
Returns the Long value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Long [[getLong]] ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Long ) { return ( Long ) [[number]] ; } return [[number]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long [[blinder]] ( final String key ) { Number [[conquistador]] = ( Number ) map . get ( key ) ; if ( [[conquistador]] == null ) { return null ; } if ( [[conquistador]] instanceof Long ) { return ( Long ) [[conquistador]] ; } return [[conquistador]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 891 ---------------------------------------------
Returns the Integer value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getInteger]] ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Integer ) { return ( Integer ) [[number]] ; } return [[number]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer [[stepmother]] ( final String key ) { Number [[monasteries]] = ( Number ) map . get ( key ) ; if ( [[monasteries]] == null ) { return null ; } if ( [[monasteries]] instanceof Integer ) { return ( Integer ) [[monasteries]] ; } return [[monasteries]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 892 ---------------------------------------------
Returns the value associated with the given key as a String . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getString]] ( final String key ) { CharSequence [[cs]] = ( CharSequence ) map . get ( key ) ; return [[cs]] == null ? null : [[cs]] . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[señores]] ( final String key ) { CharSequence [[quail]] = ( CharSequence ) map . get ( key ) ; return [[quail]] == null ? null : [[quail]] . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 893 ---------------------------------------------
Returns the Double value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Double [[getDouble]] ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Double ) { return ( Double ) [[number]] ; } return [[number]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double [[chagrin]] ( final String [[audie]] ) { Number [[delegates]] = ( Number ) map . get ( [[audie]] ) ; if ( [[delegates]] == null ) { return null ; } if ( [[delegates]] instanceof Double ) { return ( Double ) [[delegates]] ; } return [[delegates]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 894 ---------------------------------------------
Adds a key - value pair to this object . --> leo leo funfair --> Socre: 1.0

[[[[Adv]]]]: public JsonObject [[put]] ( final String key , final String [[value]] ) { Objects . requireNonNull ( key ) ; map . put ( key , [[value]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject [[leão]] ( final String key , final String [[funfair]] ) { Objects . requireNonNull ( key ) ; map . put ( key , [[funfair]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 895 ---------------------------------------------
Returns the value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] getValue ( final String key ) { [[T]] val = ( [[T]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[T]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[T]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[cavan]] > [[cavan]] getValue ( final String key ) { [[cavan]] val = ( [[cavan]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[cavan]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[cavan]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 896 ---------------------------------------------
Updates the flags for the received email . --> chari - chari - chari --> Socre: 1.0

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[chari]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 897 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 425 / 461 / 11 / 897:  90%|████████▉ | 897/1000 [1:26:04<09:53,  5.76s/it][Succeeded / Failed / Skipped / Total] 425 / 461 / 11 / 897:  90%|████████▉ | 898/1000 [1:26:06<09:46,  5.75s/it][Succeeded / Failed / Skipped / Total] 425 / 462 / 11 / 898:  90%|████████▉ | 898/1000 [1:26:06<09:46,  5.75s/it][Succeeded / Failed / Skipped / Total] 425 / 462 / 11 / 898:  90%|████████▉ | 899/1000 [1:26:08<09:40,  5.75s/it][Succeeded / Failed / Skipped / Total] 426 / 462 / 11 / 899:  90%|████████▉ | 899/1000 [1:26:08<09:40,  5.75s/it][Succeeded / Failed / Skipped / Total] 426 / 462 / 11 / 899:  90%|█████████ | 900/1000 [1:26:20<09:35,  5.76s/it][Succeeded / Failed / Skipped / Total] 427 / 462 / 11 / 900:  90%|█████████ | 900/1000 [1:26:20<09:35,  5.76s/it][Succeeded / Failed / Skipped / Total] 427 / 462 / 11 / 900:  90%|█████████ | 901/1000 [1:26:22<09:29,  5.75s/it][Succeeded / Failed / Skipped / Total] 428 / 462 / 11 / 901:  90%|█████████ | 901/1000 [1:26:22<09:29,  5.75s/it][Succeeded / Failed / Skipped / Total] 428 / 462 / 11 / 901:  90%|█████████ | 902/1000 [1:26:26<09:23,  5.75s/it][Succeeded / Failed / Skipped / Total] 429 / 462 / 11 / 902:  90%|█████████ | 902/1000 [1:26:26<09:23,  5.75s/it][Succeeded / Failed / Skipped / Total] 429 / 462 / 11 / 902:  90%|█████████ | 903/1000 [1:26:31<09:17,  5.75s/it][Succeeded / Failed / Skipped / Total] 430 / 462 / 11 / 903:  90%|█████████ | 903/1000 [1:26:31<09:17,  5.75s/it][Succeeded / Failed / Skipped / Total] 430 / 462 / 11 / 903:  90%|█████████ | 904/1000 [1:26:41<09:12,  5.75s/it][Succeeded / Failed / Skipped / Total] 431 / 462 / 11 / 904:  90%|█████████ | 904/1000 [1:26:41<09:12,  5.75s/it][Succeeded / Failed / Skipped / Total] 431 / 462 / 11 / 904:  90%|█████████ | 905/1000 [1:26:50<09:06,  5.76s/it]Get a property as a Float . --> [[[FAILED]]]

[[[[Adv]]]]: public Float [[getFloat]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[castillo]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 898 ---------------------------------------------
Creates a BeanDefinition for the Proxetta bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[name]] , Class < T > [[type]] , final Scope scope , final WiringMode wiringMode , final Consumer < T > [[consumer]] ) { if ( proxetta != null ) { final Class originalType = [[type]] ; final ProxettaFactory [[builder]] = proxetta . proxy ( ) ; [[builder]] . setTarget ( [[type]] ) ; [[type]] = [[builder]] . define ( ) ; return new ProxettaBeanDefinition ( [[name]] , [[type]] , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , [[consumer]] ) ; } return super . createBeanDefinitionForRegistration ( [[name]] , [[type]] , scope , wiringMode , [[consumer]] ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[irregular]] , Class < T > [[armenian]] , final Scope scope , final WiringMode wiringMode , final Consumer < T > [[nhs]] ) { if ( proxetta != null ) { final Class originalType = [[armenian]] ; final ProxettaFactory [[destructing]] = proxetta . proxy ( ) ; [[destructing]] . setTarget ( [[armenian]] ) ; [[armenian]] = [[destructing]] . define ( ) ; return new ProxettaBeanDefinition ( [[irregular]] , [[armenian]] , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , [[nhs]] ) ; } return super . createBeanDefinitionForRegistration ( [[irregular]] , [[armenian]] , scope , wiringMode , [[nhs]] ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 899 ---------------------------------------------
Create an alias for the target string . --> Appends the right chevronicle to the left chevronicle --> Socre: 1.0

[[[[Adv]]]]: protected String alias ( final String [[target]] ) { return StringPool . LEFT_CHEV . concat ( [[target]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String alias ( final String [[straightaway]] ) { return StringPool . LEFT_CHEV . concat ( [[straightaway]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 900 ---------------------------------------------
Adds a violation to this validator . --> Methode permettant de validatione d une valeur de validatione --> Socre: 1.0

[[[[Adv]]]]: protected void [[addViolation]] ( final String name , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[aimée]] ( final String name , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 901 ---------------------------------------------
Set the mime type . --> Set the mimeType of the evildoers . --> Socre: 1.0

[[[[Adv]]]]: public RawData as ( final String [[mimeOrExtension]] ) { if ( [[mimeOrExtension]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[mimeOrExtension]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[mimeOrExtension]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData as ( final String [[evildoers]] ) { if ( [[evildoers]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[evildoers]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[evildoers]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 902 ---------------------------------------------
Closes a folder if it has been opened . --> Sends a girlish message to the transducer --> Socre: 1.0

[[[[Adv]]]]: protected void [[closeFolderIfOpened]] ( final Folder [[folder]] ) { if ( [[folder]] != null ) { try { [[folder]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void [[girlish]] ( final Folder [[transducer]] ) { if ( [[transducer]] != null ) { try { [[transducer]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 903 ---------------------------------------------
Uses the specified folder . --> Set the tidewater approximation --> Socre: 1.0

[[[[Adv]]]]: public void [[useFolder]] ( final String [[folderName]] ) { closeFolderIfOpened ( folder ) ; try { this . [[folderName]] = [[folderName]] ; this . [[folder]] = getService ( ) . getFolder ( [[folderName]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[folderName]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void [[tidewater]] ( final String [[apprehension]] ) { closeFolderIfOpened ( folder ) ; try { this . [[pebbles]] = [[apprehension]] ; this . [[wigged]] = getService ( ) . getFolder ( [[apprehension]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[apprehension]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 904 ---------------------------------------------
Look up a named parameter by its name . --> Returns the replicator with the given name if it is not in the root replicator list --> Socre: 1.0

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String [[name]] ) { DbQueryNamedParameter [[p]] = rootNP ; while ( [[p]] != null ) { if ( [[p]] . equalsName ( [[name]] ) ) { return [[p]] ; } [[p]] = [[p]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[lapses]] ( final String [[guerrillas]] ) { DbQueryNamedParameter [[replicator]] = rootNP ; while ( [[replicator]] != null ) { if ( [[replicator]] . equalsName ( [[guerrillas]] ) ) { return [[replicator]] ; } [[replicator]] = [[replicator]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 905 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 431 / 463 / 11 / 905:  90%|█████████ | 905/1000 [1:26:50<09:06,  5.76s/it][Succeeded / Failed / Skipped / Total] 431 / 463 / 11 / 905:  91%|█████████ | 906/1000 [1:26:52<09:00,  5.75s/it][Succeeded / Failed / Skipped / Total] 431 / 464 / 11 / 906:  91%|█████████ | 906/1000 [1:26:52<09:00,  5.75s/it][Succeeded / Failed / Skipped / Total] 431 / 464 / 11 / 906:  91%|█████████ | 907/1000 [1:26:56<08:54,  5.75s/it][Succeeded / Failed / Skipped / Total] 431 / 465 / 11 / 907:  91%|█████████ | 907/1000 [1:26:56<08:54,  5.75s/it][Succeeded / Failed / Skipped / Total] 431 / 465 / 11 / 907:  91%|█████████ | 908/1000 [1:26:56<08:48,  5.75s/it][Succeeded / Failed / Skipped / Total] 431 / 466 / 11 / 908:  91%|█████████ | 908/1000 [1:26:56<08:48,  5.75s/it][Succeeded / Failed / Skipped / Total] 431 / 466 / 11 / 908:  91%|█████████ | 909/1000 [1:26:57<08:42,  5.74s/it][Succeeded / Failed / Skipped / Total] 431 / 467 / 11 / 909:  91%|█████████ | 909/1000 [1:26:57<08:42,  5.74s/it][Succeeded / Failed / Skipped / Total] 431 / 467 / 11 / 909:  91%|█████████ | 910/1000 [1:27:02<08:36,  5.74s/it][Succeeded / Failed / Skipped / Total] 431 / 468 / 11 / 910:  91%|█████████ | 910/1000 [1:27:02<08:36,  5.74s/it][Succeeded / Failed / Skipped / Total] 431 / 468 / 11 / 910:  91%|█████████ | 911/1000 [1:27:13<08:31,  5.74s/it][Succeeded / Failed / Skipped / Total] 431 / 469 / 11 / 911:  91%|█████████ | 911/1000 [1:27:13<08:31,  5.74s/it][Succeeded / Failed / Skipped / Total] 431 / 469 / 11 / 911:  91%|█████████ | 912/1000 [1:27:18<08:25,  5.74s/it][Succeeded / Failed / Skipped / Total] 432 / 469 / 11 / 912:  91%|█████████ | 912/1000 [1:27:18<08:25,  5.74s/it][Succeeded / Failed / Skipped / Total] 432 / 469 / 11 / 912:  91%|█████████▏| 913/1000 [1:27:33<08:20,  5.75s/it]Sets the target input stream . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[novak]] ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 906 ---------------------------------------------
Validates the action using the specified profiles . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[validateAction]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean [[zacarias]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 907 ---------------------------------------------
Sets the target class name . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final String targetName ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( targetName ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + targetName ) ; } targetClassName = targetName ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + targetName , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[zamfir]] ( final String targetName ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( targetName ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + targetName ) ; } targetClassName = targetName ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + targetName , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 908 ---------------------------------------------
Writes the contents of this list to the given writer . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final Writer [[writer]] ) throws IOException { for ( Object [[o]] : list ) { if ( [[o]] instanceof FastByteBuffer ) { FastByteBuffer [[fastByteBuffer]] = ( FastByteBuffer ) [[o]] ; byte [ ] [[array]] = [[fastByteBuffer]] . toArray ( ) ; [[writer]] . write ( new String ( [[array]] , StringPool . ISO_8859_1 ) ) ; } else if ( [[o]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[o]] ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[writer]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void [[christiane]] ( final Writer [[ordering]] ) throws IOException { for ( Object [[dribbled]] : list ) { if ( [[dribbled]] instanceof FastByteBuffer ) { FastByteBuffer [[bitched]] = ( FastByteBuffer ) [[dribbled]] ; byte [ ] [[medicines]] = [[bitched]] . toArray ( ) ; [[ordering]] . write ( new String ( [[medicines]] , StringPool . ISO_8859_1 ) ) ; } else if ( [[dribbled]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[dribbled]] ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[ordering]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 909 ---------------------------------------------
Processes the input stream . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[caseworker]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 910 ---------------------------------------------
Sets the target class . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[setTarget]] ( final Class [[target]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[target]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[target]] . getName ( ) ) ; } targetClass = [[target]] ; targetClassName = [[target]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[target]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[collisions]] ( final Class [[bridgette]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[bridgette]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[bridgette]] . getName ( ) ) ; } targetClass = [[bridgette]] ; targetClassName = [[bridgette]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[bridgette]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 911 ---------------------------------------------
Sets the download file name . --> [[[FAILED]]]

[[[[Adv]]]]: public RawData [[downloadableAs]] ( final String downloadFileName ) { this . downloadFileName = downloadFileName ; this . [[mimeType]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData [[agnieszka]] ( final String downloadFileName ) { this . downloadFileName = downloadFileName ; this . [[saturation]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 912 ---------------------------------------------
Creates a new instance of this class . --> Returns a weatherby object --> Socre: 1.0

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class [[type]] = define ( ) ; try { return ClassUtil . newInstance ( [[type]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[weatherby]] ( ) { Class [[araki]] = define ( ) ; try { return ClassUtil . newInstance ( [[araki]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 913 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 432 / 470 / 11 / 913:  91%|█████████▏| 913/1000 [1:27:33<08:20,  5.75s/it][Succeeded / Failed / Skipped / Total] 432 / 470 / 11 / 913:  91%|█████████▏| 914/1000 [1:27:36<08:14,  5.75s/it][Succeeded / Failed / Skipped / Total] 432 / 471 / 11 / 914:  91%|█████████▏| 914/1000 [1:27:36<08:14,  5.75s/it][Succeeded / Failed / Skipped / Total] 432 / 471 / 11 / 914:  92%|█████████▏| 915/1000 [1:27:48<08:09,  5.76s/it][Succeeded / Failed / Skipped / Total] 432 / 472 / 11 / 915:  92%|█████████▏| 915/1000 [1:27:48<08:09,  5.76s/it][Succeeded / Failed / Skipped / Total] 432 / 472 / 11 / 915:  92%|█████████▏| 916/1000 [1:27:49<08:03,  5.75s/it][Succeeded / Failed / Skipped / Total] 432 / 473 / 11 / 916:  92%|█████████▏| 916/1000 [1:27:49<08:03,  5.75s/it][Succeeded / Failed / Skipped / Total] 432 / 473 / 11 / 916:  92%|█████████▏| 917/1000 [1:27:50<07:57,  5.75s/it][Succeeded / Failed / Skipped / Total] 432 / 474 / 11 / 917:  92%|█████████▏| 917/1000 [1:27:50<07:57,  5.75s/it][Succeeded / Failed / Skipped / Total] 432 / 474 / 11 / 917:  92%|█████████▏| 918/1000 [1:28:10<07:52,  5.76s/it][Succeeded / Failed / Skipped / Total] 432 / 475 / 11 / 918:  92%|█████████▏| 918/1000 [1:28:10<07:52,  5.76s/it][Succeeded / Failed / Skipped / Total] 432 / 475 / 11 / 918:  92%|█████████▏| 919/1000 [1:28:18<07:47,  5.77s/it][Succeeded / Failed / Skipped / Total] 432 / 476 / 11 / 919:  92%|█████████▏| 919/1000 [1:28:18<07:47,  5.77s/it][Succeeded / Failed / Skipped / Total] 432 / 476 / 11 / 919:  92%|█████████▏| 920/1000 [1:28:20<07:40,  5.76s/it]Create a new instance of the target class --> [[[FAILED]]]

[[[[Adv]]]]: public byte [ ] [[create]] ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] [[knowthat]] ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 914 ---------------------------------------------
Defines the target class --> [[[FAILED]]]

[[[[Adv]]]]: public Class [[define]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader [[classLoader]] = proxetta . getClassLoader ( ) ; if ( [[classLoader]] == null ) { [[classLoader]] = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( [[classLoader]] == null ) && ( targetClass != null ) ) { [[classLoader]] = targetClass . getClassLoader ( ) ; } } final byte [ ] [[bytes]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[bytes]] ) ; return DefineClass . of ( getProxyClassName ( ) , [[bytes]] , [[classLoader]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class [[preconceptions]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader [[amplifies]] = proxetta . getClassLoader ( ) ; if ( [[amplifies]] == null ) { [[amplifies]] = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( [[amplifies]] == null ) && ( targetClass != null ) ) { [[amplifies]] = targetClass . getClassLoader ( ) ; } } final byte [ ] [[spokesman]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[spokesman]] ) ; return DefineClass . of ( getProxyClassName ( ) , [[spokesman]] , [[amplifies]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 915 ---------------------------------------------
Adds an email address to the recipient list . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[to]] ( final EmailAddress [[to]] ) { this . [[to]] = ArraysUtil . append ( this . [[to]] , [[to]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T [[engaging]] ( final EmailAddress [[parentheses]] ) { this . [[certain]] = ArraysUtil . append ( this . [[certain]] , [[engaging]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 916 ---------------------------------------------
REPLACEME0 . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[REPLACEME0]] ( final EmailAddress ... [[REPLACEME0]] ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( [[REPLACEME0]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T [[SQUADRONS]] ( final EmailAddress ... [[SQUADRONS]] ) { this . [[newberry]] = ArraysUtil . join ( this . [[newberry]] , valueOrEmptyArray ( [[SQUADRONS]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 917 ---------------------------------------------
Sets the from address . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[from]] ( final String [[personalName]] , final String [[from]] ) { return [[from]] ( new EmailAddress ( [[personalName]] , [[from]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T [[zilch]] ( final String [[pluck]] , final String [[smoothest]] ) { return [[zilch]] ( new EmailAddress ( [[pluck]] , [[zilch]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 918 ---------------------------------------------
Adds a recipient address with the specified personal name and email address . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[to]] ( final String [[personalName]] , final String [[to]] ) { return [[to]] ( new EmailAddress ( [[personalName]] , [[to]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T [[lts]] ( final String [[outmatched]] , final String [[populate]] ) { return [[lts]] ( new EmailAddress ( [[outmatched]] , [[lts]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 919 ---------------------------------------------
Receives all the messages that match the given filter . --> [[[FAILED]]]

[[[[Adv]]]]: ReceivedEmail [ ] [[receiveMessages]] ( final EmailFilter [[filter]] , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > [[processedMessageConsumer]] ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( [[filter]] == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( [[filter]] . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile [[fetchProfile]] = new FetchProfile ( ) ; [[fetchProfile]] . add ( FetchProfile . Item . ENVELOPE ) ; [[fetchProfile]] . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , [[fetchProfile]] ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] [[mesh]] ( final EmailFilter [[fara]] , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > [[lnternet]] ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( [[fara]] == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( [[fara]] . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile [[crisscrossing]] = new FetchProfile ( ) ; [[crisscrossing]] . add ( FetchProfile . Item . ENVELOPE ) ; [[crisscrossing]] . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , [[crisscrossing]] ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 920 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 432 / 477 / 11 / 920:  92%|█████████▏| 920/1000 [1:28:20<07:40,  5.76s/it][Succeeded / Failed / Skipped / Total] 432 / 477 / 11 / 920:  92%|█████████▏| 921/1000 [1:28:29<07:35,  5.76s/it][Succeeded / Failed / Skipped / Total] 432 / 478 / 11 / 921:  92%|█████████▏| 921/1000 [1:28:29<07:35,  5.76s/it][Succeeded / Failed / Skipped / Total] 432 / 478 / 11 / 921:  92%|█████████▏| 922/1000 [1:28:32<07:29,  5.76s/it][Succeeded / Failed / Skipped / Total] 432 / 479 / 11 / 922:  92%|█████████▏| 922/1000 [1:28:32<07:29,  5.76s/it][Succeeded / Failed / Skipped / Total] 432 / 479 / 11 / 922:  92%|█████████▏| 923/1000 [1:28:37<07:23,  5.76s/it][Succeeded / Failed / Skipped / Total] 432 / 480 / 11 / 923:  92%|█████████▏| 923/1000 [1:28:37<07:23,  5.76s/it][Succeeded / Failed / Skipped / Total] 432 / 480 / 11 / 923:  92%|█████████▏| 924/1000 [1:28:44<07:17,  5.76s/it][Succeeded / Failed / Skipped / Total] 432 / 481 / 11 / 924:  92%|█████████▏| 924/1000 [1:28:44<07:17,  5.76s/it][Succeeded / Failed / Skipped / Total] 432 / 481 / 11 / 924:  92%|█████████▎| 925/1000 [1:28:45<07:11,  5.76s/it][Succeeded / Failed / Skipped / Total] 432 / 482 / 11 / 925:  92%|█████████▎| 925/1000 [1:28:45<07:11,  5.76s/it][Succeeded / Failed / Skipped / Total] 432 / 482 / 11 / 925:  93%|█████████▎| 926/1000 [1:28:49<07:05,  5.76s/it][Succeeded / Failed / Skipped / Total] 432 / 483 / 11 / 926:  93%|█████████▎| 926/1000 [1:28:49<07:05,  5.76s/it][Succeeded / Failed / Skipped / Total] 432 / 483 / 11 / 926:  93%|█████████▎| 927/1000 [1:29:11<07:01,  5.77s/it][Succeeded / Failed / Skipped / Total] 433 / 483 / 11 / 927:  93%|█████████▎| 927/1000 [1:29:11<07:01,  5.77s/it][Succeeded / Failed / Skipped / Total] 433 / 483 / 11 / 927:  93%|█████████▎| 928/1000 [1:29:32<06:56,  5.79s/it][Succeeded / Failed / Skipped / Total] 434 / 483 / 11 / 928:  93%|█████████▎| 928/1000 [1:29:32<06:56,  5.79s/it][Succeeded / Failed / Skipped / Total] 434 / 483 / 11 / 928:  93%|█████████▎| 929/1000 [1:29:51<06:52,  5.80s/it]Add cc addresses . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[cc]] ( final EmailAddress ... [[ccs]] ) { this . [[cc]] = ArraysUtil . join ( this . [[cc]] , valueOrEmptyArray ( [[ccs]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T [[slashed]] ( final EmailAddress ... [[bookmaking]] ) { this . [[descendant]] = ArraysUtil . join ( this . [[descendant]] , valueOrEmptyArray ( [[bookmaking]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 921 ---------------------------------------------
Writes the given bytes to the debug folder . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[dumpClassInDebugFolder]] ( final byte [ ] [[bytes]] ) { File [[debugFolder]] = proxetta . getDebugFolder ( ) ; if ( [[debugFolder]] == null ) { return ; } if ( ! [[debugFolder]] . exists ( ) || ! [[debugFolder]] . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + [[debugFolder]] ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( [[debugFolder]] , fileName ) ; try { FileUtil . writeBytes ( file , [[bytes]] ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void [[brandeis]] ( final byte [ ] [[barbell]] ) { File [[motorola]] = proxetta . getDebugFolder ( ) ; if ( [[motorola]] == null ) { return ; } if ( ! [[motorola]] . exists ( ) || ! [[motorola]] . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + [[motorola]] ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( [[motorola]] , fileName ) ; try { FileUtil . writeBytes ( file , [[barbell]] ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 922 ---------------------------------------------
Adds a header to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[header]] ( final String name , final String [[value]] ) { headers . put ( name , [[value]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[snowy]] ( final String name , final String [[emphasizing]] ) { headers . put ( name , [[emphasizing]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 923 ---------------------------------------------
Sends a plain text message . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[textMessage]] ( final String [[text]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[text]] , MimeTypes . MIME_TEXT_PLAIN , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[complemented]] ( final String [[donations]] , final String [[elysian]] ) { return message ( new EmailMessage ( [[donations]] , MimeTypes . MIME_TEXT_PLAIN , [[elysian]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 924 ---------------------------------------------
Sets an HTML message with the given content . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[htmlMessage]] ( final String [[html]] , final String encoding ) { return message ( new EmailMessage ( [[html]] , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[smyrna]] ( final String [[bibi]] , final String encoding ) { return message ( new EmailMessage ( [[bibi]] , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 925 ---------------------------------------------
Returns the resolved parameters for this method . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[cromwell]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 926 ---------------------------------------------
Returns the value of a system property . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[get]] ( final String name , final String defaultValue ) { Objects . requireNonNull ( name ) ; String value = null ; try { if ( System . getSecurityManager ( ) == null ) { value = System . getProperty ( name ) ; } else { value = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( value == null ) { return defaultValue ; } return value ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String [[capsules]] ( final String name , final String defaultValue ) { Objects . requireNonNull ( name ) ; String value = null ; try { if ( System . getSecurityManager ( ) == null ) { value = System . getProperty ( name ) ; } else { value = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( value == null ) { return defaultValue ; } return value ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 927 ---------------------------------------------
Resolve result path . --> Be careful with gassy and weevils --> Socre: 1.0

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String [[path]] , String value ) { boolean [[absolutePath]] = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[becareful]] ( String [[gassy]] , String value ) { boolean [[weevils]] = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 928 ---------------------------------------------
Returns the long value of the named property or the defaultValue if the property is not set . --> Get the chips from adopts and return the almeria --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLong]] ( final String [[name]] , final long [[defaultValue]] ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return [[defaultValue]] ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[chips]] ( final String [[adopts]] , final long [[almeria]] ) { String [[gosha]] = get ( [[adopts]] ) ; if ( [[gosha]] == null ) { return [[almeria]] ; } [[gosha]] = [[gosha]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[gosha]] ) ; } catch ( NumberFormatException nfex ) { return [[almeria]] ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 929 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 434 / 484 / 11 / 929:  93%|█████████▎| 929/1000 [1:29:51<06:52,  5.80s/it][Succeeded / Failed / Skipped / Total] 434 / 484 / 11 / 929:  93%|█████████▎| 930/1000 [1:29:54<06:46,  5.80s/it][Succeeded / Failed / Skipped / Total] 434 / 485 / 11 / 930:  93%|█████████▎| 930/1000 [1:29:54<06:46,  5.80s/it][Succeeded / Failed / Skipped / Total] 434 / 485 / 11 / 930:  93%|█████████▎| 931/1000 [1:29:59<06:40,  5.80s/it][Succeeded / Failed / Skipped / Total] 434 / 486 / 11 / 931:  93%|█████████▎| 931/1000 [1:29:59<06:40,  5.80s/it][Succeeded / Failed / Skipped / Total] 434 / 486 / 11 / 931:  93%|█████████▎| 932/1000 [1:30:10<06:34,  5.81s/it][Succeeded / Failed / Skipped / Total] 434 / 487 / 11 / 932:  93%|█████████▎| 932/1000 [1:30:10<06:34,  5.81s/it][Succeeded / Failed / Skipped / Total] 434 / 487 / 11 / 932:  93%|█████████▎| 933/1000 [1:30:12<06:28,  5.80s/it][Succeeded / Failed / Skipped / Total] 434 / 488 / 11 / 933:  93%|█████████▎| 933/1000 [1:30:12<06:28,  5.80s/it][Succeeded / Failed / Skipped / Total] 434 / 488 / 11 / 933:  93%|█████████▎| 934/1000 [1:30:17<06:22,  5.80s/it][Succeeded / Failed / Skipped / Total] 434 / 489 / 11 / 934:  93%|█████████▎| 934/1000 [1:30:17<06:22,  5.80s/it][Succeeded / Failed / Skipped / Total] 434 / 489 / 11 / 934:  94%|█████████▎| 935/1000 [1:30:22<06:16,  5.80s/it][Succeeded / Failed / Skipped / Total] 435 / 489 / 11 / 935:  94%|█████████▎| 935/1000 [1:30:22<06:16,  5.80s/it][Succeeded / Failed / Skipped / Total] 435 / 489 / 11 / 935:  94%|█████████▎| 936/1000 [1:30:28<06:11,  5.80s/it][Succeeded / Failed / Skipped / Total] 435 / 490 / 11 / 936:  94%|█████████▎| 936/1000 [1:30:28<06:11,  5.80s/it][Succeeded / Failed / Skipped / Total] 435 / 490 / 11 / 936:  94%|█████████▎| 937/1000 [1:30:30<06:05,  5.80s/it]Looks up the path for the given alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[lookupAlias]] ( final String [[alias]] ) { String [[value]] = actionsManager . lookupPathAlias ( [[alias]] ) ; if ( [[value]] == null ) { ActionRuntime cfg = actionsManager . lookup ( [[alias]] ) ; if ( cfg != null ) { [[value]] = cfg . getActionPath ( ) ; } } return [[value]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String [[figueroa]] ( final String [[bewitching]] ) { String [[inconsistencies]] = actionsManager . lookupPathAlias ( [[bewitching]] ) ; if ( [[inconsistencies]] == null ) { ActionRuntime cfg = actionsManager . lookup ( [[bewitching]] ) ; if ( cfg != null ) { [[inconsistencies]] = cfg . getActionPath ( ) ; } } return [[inconsistencies]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 930 ---------------------------------------------
Returns the value of the named property as a boolean . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean getBoolean ( final String name , final boolean [[defaultValue]] ) { String value = get ( name ) ; if ( value == null ) { return [[defaultValue]] ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "[[False]]" != "[[False]]" ; default : return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean getBoolean ( final String name , final boolean [[firetrap]] ) { String value = get ( name ) ; if ( value == null ) { return [[firetrap]] ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "[[Nag]]" != "[[Nag]]" ; default : return [[firetrap]] ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 931 ---------------------------------------------
Gets the named property as an integer or the default value if the property is not set . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getInt]] ( final String [[name]] , final int defaultValue ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long [[airless]] ( final String [[recital]] , final int defaultValue ) { String [[hammond]] = get ( [[recital]] ) ; if ( [[hammond]] == null ) { return defaultValue ; } [[hammond]] = [[hammond]] . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( [[hammond]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 932 ---------------------------------------------
Resolve result path string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String path , final String value ) { final ResultPath resultPath = resolveResultPath ( path , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[chizuru]] ( final String path , final String value ) { final ResultPath resultPath = resolveResultPath ( path , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 933 ---------------------------------------------
Resolve alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[resolveAlias]] ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String [[blind]] ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 934 ---------------------------------------------
Serializes a key value pair . --> [[[FAILED]]]

[[[[Adv]]]]: protected int [[serializeKeyValue]] ( final JsonContext jsonContext , final Path [[currentPath]] , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { [[currentPath]] . push ( key . toString ( ) ) ; } else { [[currentPath]] . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int [[unión]] ( final JsonContext jsonContext , final Path [[galician]] , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { [[galician]] . push ( key . toString ( ) ) ; } else { [[galician]] . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 935 ---------------------------------------------
Strip the last camel word from the given name . --> Remove all upper case letters from the end of the string --> Socre: 1.0

[[[[Adv]]]]: public static String stripLastCamelWord ( String [[name]] ) { int [[ndx]] = [[name]] . length ( ) - 1 ; while ( [[ndx]] >= 0 ) { if ( CharUtil . isUppercaseAlpha ( [[name]] . charAt ( [[ndx]] ) ) ) { break ; } [[ndx]] -- ; } if ( [[ndx]] >= 0 ) { [[name]] = [[name]] . substring ( 0 , [[ndx]] ) ; } return [[name]] ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String stripLastCamelWord ( String [[rv]] ) { int [[adout]] = [[rv]] . length ( ) - 1 ; while ( [[adout]] >= 0 ) { if ( CharUtil . isUppercaseAlpha ( [[rv]] . charAt ( [[adout]] ) ) ) { break ; } [[adout]] -- ; } if ( [[adout]] >= 0 ) { [[rv]] = [[rv]] . substring ( 0 , [[adout]] ) ; } return [[rv]] ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 936 ---------------------------------------------
Returns the last index of a slash or dot in a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; int [[dotNdx]] = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; if ( [[dotNdx]] == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < str . length ( ) - 1 ) { [[dotNdx]] = slashNdx ; } else { [[dotNdx]] = - 1 ; } } return [[dotNdx]] ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[señoritas]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; int [[applesauce]] = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; if ( [[applesauce]] == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < str . length ( ) - 1 ) { [[applesauce]] = slashNdx ; } else { [[applesauce]] = - 1 ; } } return [[applesauce]] ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 937 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 436 / 490 / 11 / 937:  94%|█████████▎| 937/1000 [1:30:30<06:05,  5.80s/it][Succeeded / Failed / Skipped / Total] 436 / 490 / 11 / 937:  94%|█████████▍| 938/1000 [1:30:35<05:59,  5.80s/it][Succeeded / Failed / Skipped / Total] 436 / 491 / 11 / 938:  94%|█████████▍| 938/1000 [1:30:35<05:59,  5.80s/it][Succeeded / Failed / Skipped / Total] 436 / 491 / 11 / 938:  94%|█████████▍| 939/1000 [1:30:43<05:53,  5.80s/it][Succeeded / Failed / Skipped / Total] 437 / 491 / 11 / 939:  94%|█████████▍| 939/1000 [1:30:43<05:53,  5.80s/it][Succeeded / Failed / Skipped / Total] 437 / 491 / 11 / 939:  94%|█████████▍| 940/1000 [1:30:48<05:47,  5.80s/it][Succeeded / Failed / Skipped / Total] 437 / 492 / 11 / 940:  94%|█████████▍| 940/1000 [1:30:48<05:47,  5.80s/it][Succeeded / Failed / Skipped / Total] 437 / 492 / 11 / 940:  94%|█████████▍| 941/1000 [1:31:00<05:42,  5.80s/it][Succeeded / Failed / Skipped / Total] 438 / 492 / 11 / 941:  94%|█████████▍| 941/1000 [1:31:00<05:42,  5.80s/it][Succeeded / Failed / Skipped / Total] 438 / 492 / 11 / 941:  94%|█████████▍| 942/1000 [1:31:11<05:36,  5.81s/it][Succeeded / Failed / Skipped / Total] 438 / 493 / 11 / 942:  94%|█████████▍| 942/1000 [1:31:11<05:36,  5.81s/it][Succeeded / Failed / Skipped / Total] 438 / 493 / 11 / 942:  94%|█████████▍| 943/1000 [1:31:12<05:30,  5.80s/it][Succeeded / Failed / Skipped / Total] 438 / 494 / 11 / 943:  94%|█████████▍| 943/1000 [1:31:12<05:30,  5.80s/it][Succeeded / Failed / Skipped / Total] 438 / 494 / 11 / 943:  94%|█████████▍| 944/1000 [1:31:17<05:24,  5.80s/it][Succeeded / Failed / Skipped / Total] 439 / 494 / 11 / 944:  94%|█████████▍| 944/1000 [1:31:17<05:24,  5.80s/it][Succeeded / Failed / Skipped / Total] 439 / 494 / 11 / 944:  94%|█████████▍| 945/1000 [1:31:23<05:19,  5.80s/it][Succeeded / Failed / Skipped / Total] 440 / 494 / 11 / 945:  94%|█████████▍| 945/1000 [1:31:23<05:19,  5.80s/it][Succeeded / Failed / Skipped / Total] 440 / 494 / 11 / 945:  95%|█████████▍| 946/1000 [1:31:25<05:13,  5.80s/it][Succeeded / Failed / Skipped / Total] 441 / 494 / 11 / 946:  95%|█████████▍| 946/1000 [1:31:25<05:13,  5.80s/it][Succeeded / Failed / Skipped / Total] 441 / 494 / 11 / 946:  95%|█████████▍| 947/1000 [1:31:36<05:07,  5.80s/it]Mix a vector by a given depth . --> Increases y by indispensable --> Socre: 1.0

[[[[Adv]]]]: private void mix ( final int j , final int [[d]] ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ [[d]] % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void mix ( final int j , final int [[indispensable]] ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ [[indispensable]] % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 938 ---------------------------------------------
Returns the index of the last dot after the slash . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String str ) { int [[slashNdx]] = str . lastIndexOf ( ' ' ) ; [[slashNdx]] ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[chas]] ( final String str ) { int [[amis]] = str . lastIndexOf ( ' ' ) ; [[amis]] ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[amis]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 939 ---------------------------------------------
Key schedule . --> rainbows for a given number of constituents --> Socre: 1.0

[[[[Adv]]]]: private void [[keySchedule]] ( final int [[s]] ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void [[rainbows]] ( final int [[constituents]] ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 940 ---------------------------------------------
Returns the index of the last dot after the slash . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[indexOfDotAfterSlash]] ( final String [[str]] ) { int [[slashNdx]] = [[str]] . lastIndexOf ( ' ' ) ; if ( [[slashNdx]] == - 1 ) { [[slashNdx]] = 0 ; } return [[str]] . indexOf ( ' ' , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int [[eachother]] ( final String [[nutcases]] ) { int [[collisions]] = [[nutcases]] . lastIndexOf ( ' ' ) ; if ( [[collisions]] == - 1 ) { [[collisions]] = 0 ; } return [[nutcases]] . indexOf ( ' ' , [[collisions]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 941 ---------------------------------------------
Performs a demix for a given depth . --> lassies ^= y [ 0 ] ; --> Socre: 1.0

[[[[Adv]]]]: private void [[demix]] ( final int [[j]] , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long [[rotr]] = r [ d % DEPTH_OF_D_IN_R ] [ [[j]] ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void [[lind]] ( final int [[beech]] , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long [[lassies]] = r [ d % DEPTH_OF_D_IN_R ] [ [[beech]] ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 942 ---------------------------------------------
Initializes the cache with the given key and tweaks . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[init]] ( final long [ ] [[key]] , final long [ ] [[tweak]] ) { final int newNw = [[key]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void [[dowd]] ( final long [ ] [[cort]] , final long [ ] [[training]] ) { final int newNw = [[cort]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 943 ---------------------------------------------
Resolves the schema name for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > type , final String defaultSchemaName ) { String [[schemaName]] = null ; final DbTable dbTable = type . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[schemaName]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[schemaName]] == null ) || ( [[schemaName]] . length ( ) == 0 ) ) { [[schemaName]] = defaultSchemaName ; } return [[schemaName]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[lege]] ( final Class < ? > type , final String defaultSchemaName ) { String [[loveliness]] = null ; final DbTable dbTable = type . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[loveliness]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[loveliness]] == null ) || ( [[loveliness]] . length ( ) == 0 ) ) { [[loveliness]] = defaultSchemaName ; } return [[loveliness]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 944 ---------------------------------------------
Gzips a file . --> Gzips akagi --> Socre: 1.0

[[[[Adv]]]]: public static File gzip ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; String gzipName = [[file]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File gzip ( final File [[akagi]] ) throws IOException { if ( [[akagi]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[akagi]] ) ; String gzipName = [[akagi]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 945 ---------------------------------------------
Returns the path of this link . --> Get the link to the methref --> Socre: 1.0

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String [[methodName]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[methodName]] ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[participate]] ( ) { if ( methref != null ) { final String [[gland]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[gland]] ; } return [[participate]] ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 946 ---------------------------------------------
Encrypts a block . --> Returns the ribbons for the given jovanovic content --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[encryptBlock]] ( final byte [ ] content , final int [[offset]] ) { long [ ] contentBlock = bytesToLongs ( content , [[offset]] , blockSizeInBytes ) ; long [ ] [[encryptedBlock]] = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , [[encryptedBlock]] ) ; return longsToBytes ( [[encryptedBlock]] ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] [[ribbons]] ( final byte [ ] content , final int [[jovanovic]] ) { long [ ] contentBlock = bytesToLongs ( content , [[jovanovic]] , blockSizeInBytes ) ; long [ ] [[appaloosa]] = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , [[appaloosa]] ) ; return longsToBytes ( [[appaloosa]] ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 947 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 442 / 494 / 11 / 947:  95%|█████████▍| 947/1000 [1:31:36<05:07,  5.80s/it][Succeeded / Failed / Skipped / Total] 442 / 494 / 11 / 947:  95%|█████████▍| 948/1000 [1:31:45<05:01,  5.81s/it][Succeeded / Failed / Skipped / Total] 443 / 494 / 11 / 948:  95%|█████████▍| 948/1000 [1:31:45<05:01,  5.81s/it][Succeeded / Failed / Skipped / Total] 443 / 494 / 11 / 948:  95%|█████████▍| 949/1000 [1:31:54<04:56,  5.81s/it][Succeeded / Failed / Skipped / Total] 443 / 495 / 11 / 949:  95%|█████████▍| 949/1000 [1:31:54<04:56,  5.81s/it][Succeeded / Failed / Skipped / Total] 443 / 495 / 11 / 949:  95%|█████████▌| 950/1000 [1:32:09<04:51,  5.82s/it][Succeeded / Failed / Skipped / Total] 444 / 495 / 11 / 950:  95%|█████████▌| 950/1000 [1:32:09<04:51,  5.82s/it][Succeeded / Failed / Skipped / Total] 444 / 495 / 11 / 950:  95%|█████████▌| 951/1000 [1:32:22<04:45,  5.83s/it][Succeeded / Failed / Skipped / Total] 445 / 495 / 11 / 951:  95%|█████████▌| 951/1000 [1:32:22<04:45,  5.83s/it][Succeeded / Failed / Skipped / Total] 445 / 495 / 11 / 951:  95%|█████████▌| 952/1000 [1:32:24<04:39,  5.82s/it][Succeeded / Failed / Skipped / Total] 446 / 495 / 11 / 952:  95%|█████████▌| 952/1000 [1:32:24<04:39,  5.82s/it][Succeeded / Failed / Skipped / Total] 446 / 495 / 11 / 952:  95%|█████████▌| 953/1000 [1:32:44<04:34,  5.84s/it]Initialize with the given key message and tweaks . --> lemoyne with two tweaks --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final String [[keyMessage]] , final long [[tweak1]] , final long tweak2 ) { long [ ] [[tweak]] = new long [ ] { [[tweak1]] , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( [[keyMessage]] ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[init]] ( bytesToLongs ( key ) , [[tweak]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void [[lemoyne]] ( final String [[fierce]] , final long [[minos]] , final long tweak2 ) { long [ ] [[entrenched]] = new long [ ] { [[minos]] , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( [[fierce]] ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[lemoyne]] ( bytesToLongs ( key ) , [[entrenched]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 948 ---------------------------------------------
Resolves the column descriptors for the given property . --> DbEntityColumnDescriptor --> Socre: 1.0

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[resolveColumnDescriptors]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "[[False]]" != "[[False]]" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[ê]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "[[Books]]" != "[[Books]]" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 949 ---------------------------------------------
Removes any bounding characters from a string . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[removeAnyBounding]] ( final char s , final char e , final String [[str]] ) { if ( [[str]] == null || [[str]] . length ( ) < 2 ) { return [[str]] ; } if ( [[str]] . startsWith ( String . valueOf ( s ) ) && [[str]] . endsWith ( String . valueOf ( e ) ) ) { return [[str]] . substring ( 1 , [[str]] . length ( ) - 1 ) ; } return [[str]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String [[crotchety]] ( final char s , final char e , final String [[garnier]] ) { if ( [[garnier]] == null || [[garnier]] . length ( ) < 2 ) { return [[garnier]] ; } if ( [[garnier]] . startsWith ( String . valueOf ( s ) ) && [[garnier]] . endsWith ( String . valueOf ( e ) ) ) { return [[garnier]] . substring ( 1 , [[garnier]] . length ( ) - 1 ) ; } return [[garnier]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 950 ---------------------------------------------
Ungzips a file . --> Create a fubuki file from a gzipped file --> Socre: 1.0

[[[[Adv]]]]: public static File [[ungzip]] ( final File file ) throws IOException { String [[outFileName]] = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( [[outFileName]] ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File [[fubuki]] ( final File file ) throws IOException { String [[unfulfilled]] = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( [[unfulfilled]] ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 951 ---------------------------------------------
Create a zlib file for the given file --> immaculate two - year archives --> Socre: 1.0

[[[[Adv]]]]: public static File [[zlib]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream [[fis]] = new FileInputStream ( [[file]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[file]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream [[dos]] = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( [[fis]] , [[dos]] ) ; } finally { StreamUtil . close ( [[dos]] ) ; StreamUtil . close ( [[fis]] ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File [[immaculate]] ( final File [[holdings]] ) throws IOException { if ( [[holdings]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream [[twoyears]] = new FileInputStream ( [[holdings]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[holdings]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream [[framed]] = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( [[twoyears]] , [[framed]] ) ; } finally { StreamUtil . close ( [[framed]] ) ; StreamUtil . close ( [[twoyears]] ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 952 ---------------------------------------------
Unzips a zip file to a destination directory . --> Convenience method for calling gidget on a zipfile and newsmen --> Socre: 1.0

[[[[Adv]]]]: public static void [[unzip]] ( final String zipFile , final String [[destDir]] , final String ... [[patterns]] ) throws IOException { [[unzip]] ( new File ( zipFile ) , new File ( [[destDir]] ) , [[patterns]] ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void [[gidget]] ( final String zipFile , final String [[newsmen]] , final String ... [[granary]] ) throws IOException { [[gidget]] ( new File ( zipFile ) , new File ( [[newsmen]] ) , [[granary]] ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 953 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 447 / 495 / 11 / 953:  95%|█████████▌| 953/1000 [1:32:44<04:34,  5.84s/it][Succeeded / Failed / Skipped / Total] 447 / 495 / 11 / 953:  95%|█████████▌| 954/1000 [1:32:54<04:28,  5.84s/it][Succeeded / Failed / Skipped / Total] 448 / 495 / 11 / 954:  95%|█████████▌| 954/1000 [1:32:54<04:28,  5.84s/it][Succeeded / Failed / Skipped / Total] 448 / 495 / 11 / 954:  96%|█████████▌| 955/1000 [1:33:09<04:23,  5.85s/it][Succeeded / Failed / Skipped / Total] 448 / 496 / 11 / 955:  96%|█████████▌| 955/1000 [1:33:09<04:23,  5.85s/it][Succeeded / Failed / Skipped / Total] 448 / 496 / 11 / 955:  96%|█████████▌| 956/1000 [1:33:19<04:17,  5.86s/it][Succeeded / Failed / Skipped / Total] 448 / 497 / 11 / 956:  96%|█████████▌| 956/1000 [1:33:19<04:17,  5.86s/it][Succeeded / Failed / Skipped / Total] 448 / 497 / 11 / 956:  96%|█████████▌| 957/1000 [1:33:25<04:11,  5.86s/it][Succeeded / Failed / Skipped / Total] 448 / 498 / 11 / 957:  96%|█████████▌| 957/1000 [1:33:25<04:11,  5.86s/it][Succeeded / Failed / Skipped / Total] 448 / 498 / 11 / 957:  96%|█████████▌| 958/1000 [1:33:29<04:05,  5.86s/it][Succeeded / Failed / Skipped / Total] 449 / 498 / 11 / 958:  96%|█████████▌| 958/1000 [1:33:29<04:05,  5.86s/it][Succeeded / Failed / Skipped / Total] 449 / 498 / 11 / 958:  96%|█████████▌| 959/1000 [1:33:29<03:59,  5.85s/it][Succeeded / Failed / Skipped / Total] 449 / 499 / 11 / 959:  96%|█████████▌| 959/1000 [1:33:29<03:59,  5.85s/it][Succeeded / Failed / Skipped / Total] 449 / 499 / 11 / 959:  96%|█████████▌| 960/1000 [1:33:38<03:54,  5.85s/it][Succeeded / Failed / Skipped / Total] 449 / 500 / 11 / 960:  96%|█████████▌| 960/1000 [1:33:38<03:54,  5.85s/it][Succeeded / Failed / Skipped / Total] 449 / 500 / 11 / 960:  96%|█████████▌| 961/1000 [1:33:39<03:48,  5.85s/it]Adds a file to a ZIP output stream . --> symbolizes a file with the given buzz and velocity --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final File file , String [[path]] , final String [[comment]] , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( [[path]] == null ) { [[path]] = file . getName ( ) ; } while ( [[path]] . length ( ) != 0 && [[path]] . charAt ( 0 ) == ' ' ) { [[path]] = [[path]] . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[symbolize]] ( final ZipOutputStream zos , final File file , String [[buzz]] , final String [[vel]] , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( [[buzz]] == null ) { [[buzz]] = file . getName ( ) ; } while ( [[buzz]] . length ( ) != 0 && [[buzz]] . charAt ( 0 ) == ' ' ) { [[buzz]] = [[buzz]] . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 954 ---------------------------------------------
Converts a byte array into an array of longs . --> offload a prude from a year --> Socre: 1.0

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] [[ba]] , final int [[offset]] , final int [[size]] ) { long [ ] result = new long [ [[size]] >> 3 ] ; int [[i8]] = [[offset]] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( [[ba]] , [[i8]] ) ; [[i8]] += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[offload]] ( final byte [ ] [[yearns]] , final int [[cormac]] , final int [[prude]] ) { long [ ] result = new long [ [[prude]] >> 3 ] ; int [[electrode]] = [[cormac]] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( [[yearns]] , [[electrode]] ) ; [[electrode]] += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 955 ---------------------------------------------
Sets the request bundle name . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest [[request]] , final String [[bundleName]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[bundleName]] ) ; } [[request]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[bundleName]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[rarefied]] ( final ServletRequest [[amaze]] , final String [[cameramen]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[cameramen]] ) ; } [[amaze]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[cameramen]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 956 ---------------------------------------------
Returns the property descriptor with the given name and whether it is declared or not . --> [[[FAILED]]]

[[[[Adv]]]]: public PropertyDescriptor [[getPropertyDescriptor]] ( final String [[name]] , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( [[name]] ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor [[parkinson]] ( final String [[utero]] , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( [[utero]] ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 957 ---------------------------------------------
Gets the field descriptor with the given name and declared flag . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String [[name]] , final boolean [[declared]] ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( [[name]] ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( [[declared]] ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[incriminating]] ( final String [[grappling]] , final boolean [[gately]] ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( [[grappling]] ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( [[gately]] ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 958 ---------------------------------------------
Filter parameters for the given bean name . --> params --> Socre: 1.0

[[[[Adv]]]]: public String [ ] [[filterParametersForBeanName]] ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String [[key]] = entry . getKey ( ) ; if ( ! [[key]] . startsWith ( beanName ) ) { continue ; } list . add ( [[key]] ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] [[ç]] ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String [[acoustical]] = entry . getKey ( ) ; if ( ! [[acoustical]] . startsWith ( beanName ) ) { continue ; } list . add ( [[acoustical]] ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 959 ---------------------------------------------
Sets the session locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession [[session]] , final String [[localeCode]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[localeCode]] ) ; } Locale [[locale]] = Locale . forLanguageTag ( [[localeCode]] ) ; [[session]] . setAttribute ( SESSION_LOCALE_ATTR , [[locale]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[entertain]] ( final HttpSession [[integra]] , final String [[dinner]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[dinner]] ) ; } Locale [[chiclets]] = Locale . forLanguageTag ( [[dinner]] ) ; [[integra]] . setAttribute ( SESSION_LOCALE_ATTR , [[chiclets]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 960 ---------------------------------------------
Adds a list of profiles to the properties . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... [[profiles]] ) { if ( [[profiles]] == null ) { return this ; } for ( String [[profile]] : [[profiles]] ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[limelight]] ( final String ... [[sizes]] ) { if ( [[sizes]] == null ) { return this ; } for ( String [[limelight]] : [[sizes]] ) { addProfiles ( [[limelight]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 961 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 449 / 501 / 11 / 961:  96%|█████████▌| 961/1000 [1:33:39<03:48,  5.85s/it][Succeeded / Failed / Skipped / Total] 449 / 501 / 11 / 961:  96%|█████████▌| 962/1000 [1:33:46<03:42,  5.85s/it][Succeeded / Failed / Skipped / Total] 449 / 502 / 11 / 962:  96%|█████████▌| 962/1000 [1:33:46<03:42,  5.85s/it][Succeeded / Failed / Skipped / Total] 449 / 502 / 11 / 962:  96%|█████████▋| 963/1000 [1:34:08<03:37,  5.87s/it][Succeeded / Failed / Skipped / Total] 449 / 503 / 11 / 963:  96%|█████████▋| 963/1000 [1:34:08<03:37,  5.87s/it][Succeeded / Failed / Skipped / Total] 449 / 503 / 11 / 963:  96%|█████████▋| 964/1000 [1:34:18<03:31,  5.87s/it][Succeeded / Failed / Skipped / Total] 449 / 504 / 11 / 964:  96%|█████████▋| 964/1000 [1:34:18<03:31,  5.87s/it][Succeeded / Failed / Skipped / Total] 449 / 504 / 11 / 964:  96%|█████████▋| 965/1000 [1:34:19<03:25,  5.86s/it][Succeeded / Failed / Skipped / Total] 449 / 505 / 11 / 965:  96%|█████████▋| 965/1000 [1:34:19<03:25,  5.86s/it][Succeeded / Failed / Skipped / Total] 449 / 505 / 11 / 965:  97%|█████████▋| 966/1000 [1:34:23<03:19,  5.86s/it][Succeeded / Failed / Skipped / Total] 450 / 505 / 11 / 966:  97%|█████████▋| 966/1000 [1:34:23<03:19,  5.86s/it][Succeeded / Failed / Skipped / Total] 450 / 505 / 11 / 966:  97%|█████████▋| 967/1000 [1:34:30<03:13,  5.86s/it]Gets the locale from the session . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession [[session]] ) { Locale [[locale]] = ( Locale ) [[session]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[locale]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[locale]] ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[globally]] ( final HttpSession [[forklift]] ) { Locale [[lamentations]] = ( Locale ) [[forklift]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[lamentations]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[lamentations]] ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 962 ---------------------------------------------
Lists all the entries in a zip file . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < String > listZip ( final File zipFile ) throws IOException { List < String > [[entries]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration [[zipEntries]] = zip . entries ( ) ; while ( [[zipEntries]] . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) [[zipEntries]] . nextElement ( ) ; String entryName = entry . getName ( ) ; [[entries]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[entries]] ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > listZip ( final File zipFile ) throws IOException { List < String > [[claris]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration [[shootings]] = zip . entries ( ) ; while ( [[shootings]] . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) [[shootings]] . nextElement ( ) ; String entryName = entry . getName ( ) ; [[claris]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[claris]] ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 963 ---------------------------------------------
Reads a label from a bytecode . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label [[readLabel]] ( final int [[bytecodeOffset]] , final Label [ ] labels ) { if ( labels [ [[bytecodeOffset]] ] == null ) { labels [ [[bytecodeOffset]] ] = new Label ( ) ; } return labels [ [[bytecodeOffset]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label [[projectile]] ( final int [[algeciras]] , final Label [ ] labels ) { if ( labels [ [[algeciras]] ] == null ) { labels [ [[algeciras]] ] = new Label ( ) ; } return labels [ [[algeciras]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 964 ---------------------------------------------
Read a long in little - endian format from the given buffer . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] buf , final int offset ) { return ( ( long ) buf [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[badri]] ( final byte [ ] buf , final int offset ) { return ( ( long ) buf [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 965 ---------------------------------------------
Returns the bytecode offset of a type annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[readjust]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 966 ---------------------------------------------
Adds content to a ZIP output stream . --> Compress leona with swoop and frontin --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final byte [ ] [[content]] , String [[path]] , final String [[comment]] ) throws IOException { while ( [[path]] . length ( ) != 0 && [[path]] . charAt ( 0 ) == ' ' ) { [[path]] = [[path]] . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( [[path]] , ' ' ) ) { [[path]] = [[path]] . substring ( 0 , [[path]] . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( [[path]] ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( [[comment]] != null ) { zipEntry . setComment ( [[comment]] ) ; } zos . putNextEntry ( zipEntry ) ; InputStream [[is]] = new ByteArrayInputStream ( [[content]] ) ; try { StreamUtil . copy ( [[is]] , zos ) ; } finally { StreamUtil . close ( [[is]] ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void [[regardless]] ( final ZipOutputStream zos , final byte [ ] [[leona]] , String [[swoop]] , final String [[frontin]] ) throws IOException { while ( [[swoop]] . length ( ) != 0 && [[swoop]] . charAt ( 0 ) == ' ' ) { [[swoop]] = [[swoop]] . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( [[swoop]] , ' ' ) ) { [[swoop]] = [[swoop]] . substring ( 0 , [[swoop]] . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( [[swoop]] ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( [[frontin]] != null ) { zipEntry . setComment ( [[frontin]] ) ; } zos . putNextEntry ( zipEntry ) ; InputStream [[upchuck]] = new ByteArrayInputStream ( [[leona]] ) ; try { StreamUtil . copy ( [[upchuck]] , zos ) ; } finally { StreamUtil . close ( [[upchuck]] ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 967 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 451 / 505 / 11 / 967:  97%|█████████▋| 967/1000 [1:34:30<03:13,  5.86s/it][Succeeded / Failed / Skipped / Total] 451 / 505 / 11 / 967:  97%|█████████▋| 968/1000 [1:34:40<03:07,  5.87s/it][Succeeded / Failed / Skipped / Total] 452 / 505 / 11 / 968:  97%|█████████▋| 968/1000 [1:34:40<03:07,  5.87s/it][Succeeded / Failed / Skipped / Total] 452 / 505 / 11 / 968:  97%|█████████▋| 969/1000 [1:34:42<03:01,  5.86s/it][Succeeded / Failed / Skipped / Total] 453 / 505 / 11 / 969:  97%|█████████▋| 969/1000 [1:34:42<03:01,  5.86s/it][Succeeded / Failed / Skipped / Total] 453 / 505 / 11 / 969:  97%|█████████▋| 970/1000 [1:34:46<02:55,  5.86s/it][Succeeded / Failed / Skipped / Total] 454 / 505 / 11 / 970:  97%|█████████▋| 970/1000 [1:34:46<02:55,  5.86s/it][Succeeded / Failed / Skipped / Total] 454 / 505 / 11 / 970:  97%|█████████▋| 971/1000 [1:34:53<02:50,  5.86s/it][Succeeded / Failed / Skipped / Total] 454 / 506 / 11 / 971:  97%|█████████▋| 971/1000 [1:34:53<02:50,  5.86s/it][Succeeded / Failed / Skipped / Total] 454 / 506 / 11 / 971:  97%|█████████▋| 972/1000 [1:35:01<02:44,  5.87s/it][Succeeded / Failed / Skipped / Total] 454 / 507 / 11 / 972:  97%|█████████▋| 972/1000 [1:35:01<02:44,  5.87s/it][Succeeded / Failed / Skipped / Total] 454 / 507 / 11 / 972:  97%|█████████▋| 973/1000 [1:35:11<02:38,  5.87s/it]Reads the verification type information from the bytecode . --> transcended - transcended - transcended - transcended --> Socre: 1.0

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int [[index]] , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ [[index]] ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ [[index]] ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ [[index]] ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ [[index]] ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ [[index]] ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ [[index]] ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ [[index]] ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ [[index]] ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ [[index]] ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[transcended]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int [[fol]] , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ [[fol]] ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ [[fol]] ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ [[fol]] ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ [[fol]] ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ [[fol]] ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ [[fol]] ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ [[fol]] ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ [[fol]] ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ [[fol]] ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 968 ---------------------------------------------
Read bootstrap methods attribute . --> varela - varela - varela --> Socre: 1.0

[[[[Adv]]]]: private int [ ] [[readBootstrapMethodsAttribute]] ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] [[currentBootstrapMethodOffsets]] = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] [[varela]] ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] [[aggressively]] = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 969 ---------------------------------------------
Reads the contents of an input stream into a byte array . --> Prostitua es ein InputStream es ein ByteArrayOutputStream este InputStream este --> Socre: 1.0

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] [[data]] = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( [[data]] , 0 , [[data]] . length ) ) != - 1 ) { outputStream . write ( [[data]] , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[prost]] ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] [[iscariot]] = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( [[iscariot]] , 0 , [[iscariot]] . length ) ) != - 1 ) { outputStream . write ( [[iscariot]] , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 970 ---------------------------------------------
Add a file consumer to the chain of consumers . --> Add a bete to the chain of consumers . --> Socre: 1.0

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[bete]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[bete]] ) ; } else { consumers . add ( [[bete]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 971 ---------------------------------------------
Gets the request map . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { return ( Map < String , TransientBeanData > ) [[servletRequest]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[suppressing]] ( final HttpServletRequest [[varmints]] ) { return ( Map < String , TransientBeanData > ) [[varmints]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 972 ---------------------------------------------
Read element values . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int [[currentOffset]] = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[arianne]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int [[hallucinogens]] = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 973 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 454 / 508 / 11 / 973:  97%|█████████▋| 973/1000 [1:35:11<02:38,  5.87s/it][Succeeded / Failed / Skipped / Total] 454 / 508 / 11 / 973:  97%|█████████▋| 974/1000 [1:35:23<02:32,  5.88s/it][Succeeded / Failed / Skipped / Total] 454 / 509 / 11 / 974:  97%|█████████▋| 974/1000 [1:35:23<02:32,  5.88s/it][Succeeded / Failed / Skipped / Total] 454 / 509 / 11 / 974:  98%|█████████▊| 975/1000 [1:35:24<02:26,  5.87s/it][Succeeded / Failed / Skipped / Total] 455 / 509 / 11 / 975:  98%|█████████▊| 975/1000 [1:35:24<02:26,  5.87s/it][Succeeded / Failed / Skipped / Total] 455 / 509 / 11 / 975:  98%|█████████▊| 976/1000 [1:35:43<02:21,  5.89s/it][Succeeded / Failed / Skipped / Total] 455 / 510 / 11 / 976:  98%|█████████▊| 976/1000 [1:35:43<02:21,  5.89s/it][Succeeded / Failed / Skipped / Total] 455 / 510 / 11 / 976:  98%|█████████▊| 977/1000 [1:35:44<02:15,  5.88s/it][Succeeded / Failed / Skipped / Total] 455 / 511 / 11 / 977:  98%|█████████▊| 977/1000 [1:35:44<02:15,  5.88s/it][Succeeded / Failed / Skipped / Total] 455 / 511 / 11 / 977:  98%|█████████▊| 978/1000 [1:35:44<02:09,  5.87s/it][Succeeded / Failed / Skipped / Total] 455 / 512 / 11 / 978:  98%|█████████▊| 978/1000 [1:35:44<02:09,  5.87s/it][Succeeded / Failed / Skipped / Total] 455 / 512 / 11 / 978:  98%|█████████▊| 979/1000 [1:35:47<02:03,  5.87s/it][Succeeded / Failed / Skipped / Total] 456 / 512 / 11 / 979:  98%|█████████▊| 979/1000 [1:35:47<02:03,  5.87s/it][Succeeded / Failed / Skipped / Total] 456 / 512 / 11 / 979:  98%|█████████▊| 980/1000 [1:35:55<01:57,  5.87s/it][Succeeded / Failed / Skipped / Total] 456 / 513 / 11 / 980:  98%|█████████▊| 980/1000 [1:35:55<01:57,  5.87s/it][Succeeded / Failed / Skipped / Total] 456 / 513 / 11 / 980:  98%|█████████▊| 981/1000 [1:35:59<01:51,  5.87s/it][Succeeded / Failed / Skipped / Total] 457 / 513 / 11 / 981:  98%|█████████▊| 981/1000 [1:35:59<01:51,  5.87s/it][Succeeded / Failed / Skipped / Total] 457 / 513 / 11 / 981:  98%|█████████▊| 982/1000 [1:36:03<01:45,  5.87s/it][Succeeded / Failed / Skipped / Total] 457 / 514 / 11 / 982:  98%|█████████▊| 982/1000 [1:36:03<01:45,  5.87s/it][Succeeded / Failed / Skipped / Total] 457 / 514 / 11 / 982:  98%|█████████▊| 983/1000 [1:36:06<01:39,  5.87s/it]Initializes this filter . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig [[filterConfig]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[crucifixion]] ( final FilterConfig [[palmed]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 974 ---------------------------------------------
Create the request map . --> [[[FAILED]]]

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[createRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { Map < String , TransientBeanData > [[map]] = new HashMap <> ( ) ; [[servletRequest]] . setAttribute ( ATTR_NAME , [[map]] ) ; return [[map]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[marcelino]] ( final HttpServletRequest [[noun]] ) { Map < String , TransientBeanData > [[telephoned]] = new HashMap <> ( ) ; [[noun]] . setAttribute ( ATTR_NAME , [[telephoned]] ) ; return [[telephoned]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 975 ---------------------------------------------
Adds the given patterns to the find file . --> Find files that match one of the given regular expressions --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[include]] ( final String ... [[patterns]] ) { for ( String pattern : [[patterns]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile [[fter]] ( final String ... [[las]] ) { for ( String pattern : [[las]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 976 ---------------------------------------------
Adds a file to the list of files that match the given URI . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI searchPath ) { File [[file]] ; try { [[file]] = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[indiscreet]] ( final URI searchPath ) { File [[mochaccino]] ; try { [[mochaccino]] = new File ( [[indiscreet]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[indiscreet]] , ex ) ; } addPath ( [[mochaccino]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 977 ---------------------------------------------
Convert array to array . --> [[[FAILED]]]

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object [[value]] ) { final Class valueComponentType = [[value]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[result]] ; if ( valueComponentType . isPrimitive ( ) ) { [[result]] = convertPrimitiveArrayToArray ( [[value]] , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[resuming]] ( final Object [[emigrants]] ) { final Class valueComponentType = [[emigrants]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[antipsychotic]] ; if ( valueComponentType . isPrimitive ( ) ) { [[antipsychotic]] = convertPrimitiveArrayToArray ( [[emigrants]] , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 978 ---------------------------------------------
Adds a file to the list of files to be searched for . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL searchPath ) { File file = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[deirdre]] ( final URL searchPath ) { File file = FileUtil . toContainerFile ( [[deirdre]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[deirdre]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 979 ---------------------------------------------
Exclude a set of files from being found . --> Add a pawed rule to the find file --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[exclude]] ( final String ... [[patterns]] ) { for ( String [[pattern]] : [[patterns]] ) { rules . exclude ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile [[wrote]] ( final String ... [[pawed]] ) { for ( String [[refill]] : [[pawed]] ) { rules . exclude ( [[refill]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 980 ---------------------------------------------
Adds a path to the path list . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addPath]] ( final File [[path]] ) { if ( ! [[path]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[path]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void [[caulfield]] ( final File [[liberté]] ) { if ( ! [[liberté]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[liberté]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 981 ---------------------------------------------
Returns a list of all files in the archive . --> Methode permettant de goulet --> Socre: 1.0

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > allFiles = new ArrayList <> ( ) ; File [[file]] ; while ( ( [[file]] = nextFile ( ) ) != null ) { allFiles . add ( [[file]] ) ; } return allFiles ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[goulet]] ( ) { List < File > allFiles = new ArrayList <> ( ) ; File [[chaturvedi]] ; while ( ( [[chaturvedi]] = nextFile ( ) ) != null ) { allFiles . add ( [[chaturvedi]] ) ; } return allFiles ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 982 ---------------------------------------------
Returns an iterator over the files in this directory . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[erroneously]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 983 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 457 / 515 / 11 / 983:  98%|█████████▊| 983/1000 [1:36:06<01:39,  5.87s/it][Succeeded / Failed / Skipped / Total] 457 / 515 / 11 / 983:  98%|█████████▊| 984/1000 [1:36:07<01:33,  5.86s/it][Succeeded / Failed / Skipped / Total] 458 / 515 / 11 / 984:  98%|█████████▊| 984/1000 [1:36:07<01:33,  5.86s/it][Succeeded / Failed / Skipped / Total] 458 / 515 / 11 / 984:  98%|█████████▊| 985/1000 [1:36:10<01:27,  5.86s/it][Succeeded / Failed / Skipped / Total] 459 / 515 / 11 / 985:  98%|█████████▊| 985/1000 [1:36:10<01:27,  5.86s/it][Succeeded / Failed / Skipped / Total] 459 / 515 / 11 / 985:  99%|█████████▊| 986/1000 [1:36:14<01:21,  5.86s/it][Succeeded / Failed / Skipped / Total] 459 / 516 / 11 / 986:  99%|█████████▊| 986/1000 [1:36:14<01:21,  5.86s/it][Succeeded / Failed / Skipped / Total] 459 / 516 / 11 / 986:  99%|█████████▊| 987/1000 [1:36:32<01:16,  5.87s/it][Succeeded / Failed / Skipped / Total] 459 / 517 / 11 / 987:  99%|█████████▊| 987/1000 [1:36:32<01:16,  5.87s/it][Succeeded / Failed / Skipped / Total] 459 / 517 / 11 / 987:  99%|█████████▉| 988/1000 [1:36:33<01:10,  5.86s/it][Succeeded / Failed / Skipped / Total] 459 / 518 / 11 / 988:  99%|█████████▉| 988/1000 [1:36:33<01:10,  5.86s/it][Succeeded / Failed / Skipped / Total] 459 / 518 / 11 / 988:  99%|█████████▉| 989/1000 [1:36:45<01:04,  5.87s/it]Returns the constructor descriptor for the given constructor arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public CtorDescriptor [[getCtorDescriptor]] ( final Class ... [[args]] ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != [[args]] . length ) { continue ; } for ( int [[j]] = 0 ; [[j]] < arg . length ; [[j]] ++ ) { if ( arg [ [[j]] ] != [[args]] [ [[j]] ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor [[unless]] ( final Class ... [[batavia]] ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != [[batavia]] . length ) { continue ; } for ( int [[deathbed]] = 0 ; [[deathbed]] < arg . length ; [[deathbed]] ++ ) { if ( arg [ [[deathbed]] ] != [[batavia]] [ [[deathbed]] ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 984 ---------------------------------------------
Initializes the internal data structures . --> voil --> Socre: 1.0

[[[[Adv]]]]: protected void [[init]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void [[voilà]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 985 ---------------------------------------------
Gets the ServletOutputStream . --> Get the ServletOutputStream to be commended --> Socre: 1.0

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[commended]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 986 ---------------------------------------------
Gets the writer . --> [[[FAILED]]]

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[matured]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 987 ---------------------------------------------
Resolves the wiring mode of a bean . --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode [[resolveBeanWiringMode]] ( final Class type ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode [[deceiving]] ( final Class type ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 988 ---------------------------------------------
Inspect constructors of this class . --> [[[FAILED]]]

[[[[Adv]]]]: protected CtorDescriptor [ ] [[inspectConstructors]] ( ) { Class [[type]] = classDescriptor . getType ( ) ; Constructor [ ] [[ctors]] = [[type]] . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ [[ctors]] . length ] ; for ( int [[i]] = 0 ; [[i]] < [[ctors]] . length ; [[i]] ++ ) { Constructor ctor = [[ctors]] [ [[i]] ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ [[i]] ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] [[outages]] ( ) { Class [[electronics]] = classDescriptor . getType ( ) ; Constructor [ ] [[seasoning]] = [[electronics]] . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ [[seasoning]] . length ] ; for ( int [[nikita]] = 0 ; [[nikita]] < [[seasoning]] . length ; [[nikita]] ++ ) { Constructor ctor = [[seasoning]] [ [[nikita]] ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ [[nikita]] ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 989 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 459 / 519 / 11 / 989:  99%|█████████▉| 989/1000 [1:36:45<01:04,  5.87s/it][Succeeded / Failed / Skipped / Total] 459 / 519 / 11 / 989:  99%|█████████▉| 990/1000 [1:36:48<00:58,  5.87s/it][Succeeded / Failed / Skipped / Total] 459 / 520 / 11 / 990:  99%|█████████▉| 990/1000 [1:36:48<00:58,  5.87s/it][Succeeded / Failed / Skipped / Total] 459 / 520 / 11 / 990:  99%|█████████▉| 991/1000 [1:36:50<00:52,  5.86s/it][Succeeded / Failed / Skipped / Total] 459 / 521 / 11 / 991:  99%|█████████▉| 991/1000 [1:36:50<00:52,  5.86s/it][Succeeded / Failed / Skipped / Total] 459 / 521 / 11 / 991:  99%|█████████▉| 992/1000 [1:36:54<00:46,  5.86s/it][Succeeded / Failed / Skipped / Total] 459 / 522 / 11 / 992:  99%|█████████▉| 992/1000 [1:36:54<00:46,  5.86s/it][Succeeded / Failed / Skipped / Total] 459 / 522 / 11 / 992:  99%|█████████▉| 993/1000 [1:37:22<00:41,  5.88s/it][Succeeded / Failed / Skipped / Total] 459 / 523 / 11 / 993:  99%|█████████▉| 993/1000 [1:37:22<00:41,  5.88s/it][Succeeded / Failed / Skipped / Total] 459 / 523 / 11 / 993:  99%|█████████▉| 994/1000 [1:37:23<00:35,  5.88s/it][Succeeded / Failed / Skipped / Total] 459 / 524 / 11 / 994:  99%|█████████▉| 994/1000 [1:37:23<00:35,  5.88s/it][Succeeded / Failed / Skipped / Total] 459 / 524 / 11 / 994: 100%|█████████▉| 995/1000 [1:37:24<00:29,  5.87s/it][Succeeded / Failed / Skipped / Total] 459 / 525 / 11 / 995: 100%|█████████▉| 995/1000 [1:37:24<00:29,  5.87s/it][Succeeded / Failed / Skipped / Total] 459 / 525 / 11 / 995: 100%|█████████▉| 996/1000 [1:37:25<00:23,  5.87s/it]Appends the descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder [[stringBuilder]] ) { if ( sort == OBJECT ) { [[stringBuilder]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[stringBuilder]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[stringBuilder]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[ashanti]] ( final StringBuilder [[travelled]] ) { if ( sort == OBJECT ) { [[travelled]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[travelled]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[travelled]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 990 ---------------------------------------------
Returns the size of this primitive type . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[señoritas]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 991 ---------------------------------------------
Returns a string representation of the type s class name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[maples]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 992 ---------------------------------------------
Resolve bean name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[arma]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 993 ---------------------------------------------
Returns the descriptor for the given constructor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getConstructorDescriptor]] ( final Constructor < ? > [[constructor]] ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] parameters = [[constructor]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } return [[stringBuilder]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String [[foreboding]] ( final Constructor < ? > [[ferrero]] ) { StringBuilder [[morocco]] = new StringBuilder ( ) ; [[morocco]] . append ( ' ' ) ; Class < ? > [ ] parameters = [[ferrero]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[morocco]] ) ; } return [[morocco]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 994 ---------------------------------------------
Sets the cause of the transaction that can be marked as rollback only . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable [[th]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[th]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[geothermal]] ( final Throwable [[spyro]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[spyro]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 995 ---------------------------------------------
Gets the arguments and return sizes . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String [[methodDescriptor]] ) { int [[argumentsSize]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[centavos]] ( final String [[aslan]] ) { int [[onlookers]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
[Succeeded / Failed / Skipped / Total] 459 / 526 / 11 / 996: 100%|█████████▉| 996/1000 [1:37:25<00:23,  5.87s/it][Succeeded / Failed / Skipped / Total] 459 / 526 / 11 / 996: 100%|█████████▉| 997/1000 [1:37:34<00:17,  5.87s/it][Succeeded / Failed / Skipped / Total] 459 / 527 / 11 / 997: 100%|█████████▉| 997/1000 [1:37:34<00:17,  5.87s/it][Succeeded / Failed / Skipped / Total] 459 / 527 / 11 / 997: 100%|█████████▉| 998/1000 [1:37:58<00:11,  5.89s/it][Succeeded / Failed / Skipped / Total] 459 / 528 / 11 / 998: 100%|█████████▉| 998/1000 [1:37:58<00:11,  5.89s/it][Succeeded / Failed / Skipped / Total] 459 / 528 / 11 / 998: 100%|█████████▉| 999/1000 [1:38:07<00:05,  5.89s/it][Succeeded / Failed / Skipped / Total] 459 / 529 / 11 / 999: 100%|█████████▉| 999/1000 [1:38:07<00:05,  5.89s/it][Succeeded / Failed / Skipped / Total] 459 / 529 / 11 / 999: 100%|██████████| 1000/1000 [1:38:08<00:00,  5.89s/it]--------------------------------------------- Result 996 ---------------------------------------------
Gets the method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method [[method]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[method]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( [[method]] . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[debilitating]] ( final Method [[então]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[então]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( [[então]] . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 997 ---------------------------------------------
Returns a method descriptor for the given return and argument types . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Type [[returnType]] , final Type ... argumentTypes ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; [[returnType]] . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String [[agnieszka]] ( final Type [[duma]] , final Type ... argumentTypes ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; [[duma]] . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 998 ---------------------------------------------
Requests a transaction resource of the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[E]] > [[E]] requestResource ( final Class < [[E]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[E]] [[resource]] = lookupResource ( resourceType ) ; if ( [[resource]] == null ) { int [[maxResources]] = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( [[maxResources]] != - 1 ) && ( resources . size ( ) >= [[maxResources]] ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[E]] > [[resourceManager]] = txManager . lookupResourceManager ( resourceType ) ; [[resource]] = [[resourceManager]] . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , [[resourceManager]] , [[resource]] ) ) ; } return [[resource]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < [[infiltrated]] > [[infiltrated]] requestResource ( final Class < [[infiltrated]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[infiltrated]] [[gaskin]] = lookupResource ( resourceType ) ; if ( [[gaskin]] == null ) { int [[bourguignon]] = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( [[bourguignon]] != - 1 ) && ( resources . size ( ) >= [[bourguignon]] ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[infiltrated]] > [[canít]] = txManager . lookupResourceManager ( resourceType ) ; [[gaskin]] = [[canít]] . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , [[canít]] , [[gaskin]] ) ) ; } return [[gaskin]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .
--------------------------------------------- Result 999 ---------------------------------------------
Commits or rolls all resources . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "[[True]]" == "[[True]]" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[weightlifting]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "[[Hammocks]]" == "[[Hammocks]]" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .
--------------------------------------------- Result 1000 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 459 / 530 / 11 / 1000: 100%|██████████| 1000/1000 [1:38:08<00:00,  5.89s/it]Attack(
  (search_method): RandomSearch(
    (trials):  5
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapRandom(
    (max_candidates):  50
    (embedding):  WordEmbedding
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 459 / 530 / 11 / 1000: 100%|██████████| 1000/1000 [1:38:12<00:00,  5.89s/it]Rolls back all resources associated with this transaction . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[rollbackAllResources]] ( final boolean [[wasForced]] ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > [[it]] = resources . iterator ( ) ; while ( [[it]] . hasNext ( ) ) { JtxResource resource = [[it]] . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { [[it]] . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( [[wasForced]] ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void [[auden]] ( final boolean [[tomcat]] ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > [[defeat]] = resources . iterator ( ) ; while ( [[defeat]] . hasNext ( ) ) { JtxResource resource = [[defeat]] . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { [[defeat]] . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( [[tomcat]] ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 459    |
| Number of failed attacks:     | 530    |
| Number of skipped attacks:    | 11     |
| Original accuracy:            | 98.9%  |
| Accuracy under attack:        | 53.0%  |
| Attack success rate:          | 46.41% |
| Average perturbed word %:     | 63.78% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 703.48 |
| Original BLEU-4:              | 19.61  |
| Perturbed BLEU-4:             | 2.83   |
+-------------------------------+--------+


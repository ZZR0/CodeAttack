Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertForMaskedLM: ['cls.seq_relationship.bias', 'cls.seq_relationship.weight']
- This IS expected if you are initializing BertForMaskedLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertForMaskedLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
textattack: Running 8 worker(s) on 8 GPU(s).
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 0 / 1 / 0 / 1:   0%|          | 1/1000 [00:00<00:01, 694.54it/s][Succeeded / Failed / Skipped / Total] 0 / 2 / 0 / 2:   0%|          | 2/1000 [00:00<00:01, 709.10it/s][Succeeded / Failed / Skipped / Total] 0 / 3 / 0 / 3:   0%|          | 3/1000 [00:00<00:01, 771.39it/s][Succeeded / Failed / Skipped / Total] 0 / 4 / 0 / 4:   0%|          | 4/1000 [00:00<00:01, 818.08it/s][Succeeded / Failed / Skipped / Total] 0 / 5 / 0 / 5:   0%|          | 5/1000 [00:00<00:01, 908.84it/s][Succeeded / Failed / Skipped / Total] 0 / 6 / 0 / 6:   1%|          | 6/1000 [00:00<00:00, 1024.54it/s]--------------------------------------------- Result 1 ---------------------------------------------
Wrap an observable . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > [[source]] ) { ObjectHelper . requireNonNull ( [[source]] , "source is null" ) ; if ( [[source]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[source]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[source]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[warehouse]] ( ObservableSource < T > [[transmitter]] ) { ObjectHelper . requireNonNull ( [[transmitter]] , "source is null" ) ; if ( [[transmitter]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[transmitter]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[transmitter]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 2 ---------------------------------------------
Emits a value in a fast - path order . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[fastPathOrderedEmit]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void [[budgetpltokledemiac]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 3 ---------------------------------------------
Returns an observable that is sorted by the elements of this observable sequence using the given sort function . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sort]] ( Comparator < ? super T > [[senduleency]] ) { ObjectHelper . requireNonNull ( [[senduleency]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[senduleency]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 4 ---------------------------------------------
Creates a new unicast processor with the given capacity . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int [[capacityHint]] ) { return new UnicastProcessor < T > ( [[capacityHint]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[enter]] ( int [[conditionlance]] ) { return new UnicastProcessor < T > ( [[conditionlance]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 5 ---------------------------------------------
Performs a replay of the provided connectable observable using the specified scheduler . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[observeOn]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[auditcon]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 6 ---------------------------------------------
Creates a new unicast processor with a given capacity . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int [[capacityHint]] , Runnable [[onCancelled]] ) { ObjectHelper . requireNonNull ( [[onCancelled]] , "onTerminate" ) ; return new UnicastProcessor < T > ( [[capacityHint]] , [[onCancelled]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[capture]] ( int [[abilityinz]] , Runnable [[andtholzed]] ) { ObjectHelper . requireNonNull ( [[andtholzed]] , "onTerminate" ) ; return new UnicastProcessor < T > ( [[abilityinz]] , [[andtholzed]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 7 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 7 / 0 / 7:   1%|          | 7/1000 [00:00<00:00, 1123.45it/s][Succeeded / Failed / Skipped / Total] 0 / 8 / 0 / 8:   1%|          | 8/1000 [00:00<00:00, 1217.15it/s][Succeeded / Failed / Skipped / Total] 0 / 9 / 0 / 9:   1%|          | 9/1000 [00:00<00:00, 1306.86it/s][Succeeded / Failed / Skipped / Total] 1 / 9 / 0 / 10:   1%|          | 10/1000 [00:00<00:00, 1380.25it/s][Succeeded / Failed / Skipped / Total] 1 / 10 / 0 / 11:   1%|          | 11/1000 [00:00<00:00, 1457.83it/s][Succeeded / Failed / Skipped / Total] 1 / 11 / 0 / 12:   1%|          | 12/1000 [00:00<00:00, 1516.84it/s][Succeeded / Failed / Skipped / Total] 1 / 12 / 0 / 13:   1%|▏         | 13/1000 [00:00<00:00, 1580.74it/s][Succeeded / Failed / Skipped / Total] 1 / 13 / 0 / 14:   1%|▏         | 14/1000 [00:00<00:00, 1601.71it/s]Resets all internal state to null . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[det]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 8 ---------------------------------------------
Creates a Flowable from a scalar value using the given function . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Flowable < U > [[scalarXMap]] ( final T [[value]] , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > [[asperxednumft]] ( final T [[result]] , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[result]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 9 ---------------------------------------------
Creates a Maybe from a Completable source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[findsurbutree]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 10 ---------------------------------------------
Creates a Maybe from a single source . --> Returns the next foldingine of the given blespese --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > [[singleSource]] ) { ObjectHelper . requireNonNull ( [[singleSource]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[singleSource]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[nextfoldingine]] ( SingleSource < T > [[blespese]] ) { ObjectHelper . requireNonNull ( [[blespese]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[blespese]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 11 ---------------------------------------------
Throws a NullPointerException if the object is null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[line]] > [[line]] requireNonNull ( [[line]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 12 ---------------------------------------------
Returns the identity function . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > [[identity]] ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > [[assignment]] ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 13 ---------------------------------------------
Creates a Callable that just returns the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[getsalleula]] ( T [[match]] ) { return new JustValue < Object , T > ( [[match]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 14 ---------------------------------------------
Attempts to retry this Maybe with the specified number of times . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[retry]] ( long times , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( times , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[autotery]] ( long times , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( times , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 15 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 1 / 14 / 0 / 15:   2%|▏         | 15/1000 [00:00<00:00, 1648.40it/s][Succeeded / Failed / Skipped / Total] 1 / 15 / 0 / 16:   2%|▏         | 16/1000 [00:00<00:00, 1697.33it/s][Succeeded / Failed / Skipped / Total] 2 / 15 / 0 / 17:   2%|▏         | 17/1000 [00:00<00:00, 1715.54it/s][Succeeded / Failed / Skipped / Total] 2 / 16 / 0 / 18:   2%|▏         | 18/1000 [00:00<00:00, 1754.86it/s][Succeeded / Failed / Skipped / Total] 2 / 17 / 0 / 19:   2%|▏         | 19/1000 [00:00<00:00, 1800.46it/s][Succeeded / Failed / Skipped / Total] 2 / 18 / 0 / 20:   2%|▏         | 20/1000 [00:00<00:00, 1836.02it/s][Succeeded / Failed / Skipped / Total] 2 / 18 / 0 / 20:   2%|▏         | 21/1000 [00:00<00:20, 48.11it/s]  [Succeeded / Failed / Skipped / Total] 2 / 19 / 0 / 21:   2%|▏         | 21/1000 [00:00<00:20, 48.06it/s]Creates a new unicast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[cover]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 16 ---------------------------------------------
Creates a function that just returns the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[justFunction]] ( U [[value]] ) { return new JustValue < [[T]] , U > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < [[price]] , U > Function < [[price]] , U > [[alinend]] ( U [[condition]] ) { return new JustValue < [[price]] , U > ( [[condition]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 17 ---------------------------------------------
Try to apply a function to a Publisher and return true if it succeeds --> Returns true if the subscriber is proving --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[True]]" == "[[True]]" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "[[True]]" == "[[True]]" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[True]]" == "[[True]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[True]]" == "[[True]]" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "[[True]]" == "[[True]]" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "[[True]]" == "[[True]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[bescatathpamentsudtain]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[proving]]" == "[[proving]]" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "[[proving]]" == "[[proving]]" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[proving]]" == "[[proving]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[proving]]" == "[[proving]]" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "[[proving]]" == "[[proving]]" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "[[proving]]" == "[[proving]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 18 ---------------------------------------------
Returns a function that casts the target value to the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Function < T , U > [[castFunction]] ( Class < U > target ) { return new CastToClass < T , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < T , U > Function < T , U > [[readprentation]] ( Class < U > target ) { return new CastToClass < T , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 19 ---------------------------------------------
Blocks until the count reaches zero or an exception is thrown . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[blockectantrator]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 20 ---------------------------------------------
Creates a new unicast subject with the given capacity . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[capture]] ( int [[nessweline]] ) { return new UnicastSubject < T > ( [[nessweline]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 21 ---------------------------------------------
Creates a new UnicastSubject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[draw]] ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 22 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 3 / 19 / 0 / 22:   2%|▏         | 22/1000 [00:00<00:27, 36.05it/s][Succeeded / Failed / Skipped / Total] 3 / 20 / 0 / 23:   2%|▏         | 23/1000 [00:05<03:52,  4.20it/s][Succeeded / Failed / Skipped / Total] 3 / 21 / 0 / 24:   2%|▏         | 24/1000 [00:05<03:51,  4.22it/s][Succeeded / Failed / Skipped / Total] 3 / 22 / 0 / 25:   2%|▎         | 25/1000 [00:06<03:59,  4.07it/s][Succeeded / Failed / Skipped / Total] 3 / 23 / 0 / 26:   3%|▎         | 26/1000 [00:09<05:50,  2.78it/s][Succeeded / Failed / Skipped / Total] 3 / 24 / 0 / 27:   3%|▎         | 27/1000 [00:10<06:10,  2.63it/s][Succeeded / Failed / Skipped / Total] 3 / 25 / 0 / 28:   3%|▎         | 28/1000 [00:16<09:29,  1.71it/s]Creates a new unicast subject with the given capacity . --> Downloads data from senunp to asreix --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] , Runnable [[onTerminate]] ) { return new UnicastSubject < T > ( [[capacityHint]] , [[onTerminate]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[download]] ( int [[senunp]] , Runnable [[asreix]] ) { return new UnicastSubject < T > ( [[senunp]] , [[asreix]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 23 ---------------------------------------------
Returns the value of the notification . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object [[o]] = value ; if ( [[o]] != null && ! NotificationLite . isError ( [[o]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[createtowncase]] ( ) { Object [[h]] = value ; if ( [[h]] != null && ! NotificationLite . isError ( [[h]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 24 ---------------------------------------------
Blocks until the count reaches zero or an exception is thrown . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[blockplayestrent]] ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 25 ---------------------------------------------
Requests messages from the given subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[request]] ( Subscription s , int [[prefetch]] ) { s . request ( [[prefetch]] < 0 ? Long . MAX_VALUE : [[prefetch]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void [[download]] ( Subscription s , int [[refetta]] ) { s . request ( [[refetta]] < 0 ? Long . MAX_VALUE : [[refetta]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 26 ---------------------------------------------
Completes the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[complete]] ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void [[doi]] ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 27 ---------------------------------------------
Returns the error associated with this notification . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[calltiercer]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 28 ---------------------------------------------
Blocks until the condition is satisfied or the condition is not met . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[blockingAwait]] ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean [[blockagelt]] ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "[[absolute]]" == "[[absolute]]" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 29 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 4 / 25 / 0 / 29:   3%|▎         | 29/1000 [00:17<09:29,  1.70it/s][Succeeded / Failed / Skipped / Total] 4 / 26 / 0 / 30:   3%|▎         | 30/1000 [00:17<09:16,  1.74it/s][Succeeded / Failed / Skipped / Total] 5 / 26 / 0 / 31:   3%|▎         | 31/1000 [00:18<09:32,  1.69it/s][Succeeded / Failed / Skipped / Total] 6 / 26 / 0 / 32:   3%|▎         | 32/1000 [00:19<09:57,  1.62it/s][Succeeded / Failed / Skipped / Total] 6 / 27 / 0 / 33:   3%|▎         | 33/1000 [00:23<11:21,  1.42it/s][Succeeded / Failed / Skipped / Total] 6 / 28 / 0 / 34:   3%|▎         | 34/1000 [00:23<11:03,  1.46it/s][Succeeded / Failed / Skipped / Total] 6 / 29 / 0 / 35:   4%|▎         | 35/1000 [00:24<11:25,  1.41it/s][Succeeded / Failed / Skipped / Total] 6 / 30 / 0 / 36:   4%|▎         | 36/1000 [00:26<11:46,  1.36it/s]Validates that the given disposables are non - null . --> statica - statica - statica --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[validate]] ( Disposable upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[statica]] ( Disposable upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[[same]]" != "[[same]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 30 ---------------------------------------------
Posts a complete event to the subscriber . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > void [[postComplete]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong state , BooleanSupplier [[isCancelled]] ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , queue , state , [[isCancelled]] ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void [[enimelathe]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong state , BooleanSupplier [[beingkyceslent]] ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , queue , state , [[beingkyceslent]] ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 31 ---------------------------------------------
Returns the upper bound of Long . MAX_VALUE if the result is negative . --> Returns etc of a + b --> Socre: 1.0

[[[[Adv]]]]: public static long [[addCap]] ( long [[a]] , long b ) { long [[u]] = [[a]] + b ; if ( [[u]] < 0L ) { return Long . MAX_VALUE ; } return [[u]] ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[etc]] ( long [[a1]] , long b ) { long [[a]] = [[a1]] + b ; if ( [[a]] < 0L ) { return Long . MAX_VALUE ; } return [[a]] ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 32 ---------------------------------------------
Multiply two longs . If the result is Long . MAX_VALUE return Long . MAX_VALUE . --> Multiply a by ruby --> Socre: 1.0

[[[[Adv]]]]: public static long multiplyCap ( long a , long [[b]] ) { long u = a * [[b]] ; if ( ( ( a | [[b]] ) >>> 31 ) != 0 ) { if ( u / a != [[b]] ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long multiplyCap ( long a , long [[ruby]] ) { long u = a * [[ruby]] ; if ( ( ( a | [[ruby]] ) >>> 31 ) != 0 ) { if ( u / a != [[ruby]] ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 33 ---------------------------------------------
Validates the upstream subscription and the next subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[validate]] ( Subscription [[upstream]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[upstream]] != null ) { next . cancel ( ) ; if ( [[upstream]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[genericant]] ( Subscription [[s]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[s]] != null ) { next . cancel ( ) ; if ( [[s]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 34 ---------------------------------------------
Adds an object to the end of the list . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]] ( Object [[o]] ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[find]] ( Object [[action]] ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 35 ---------------------------------------------
Atomically sets the value of the AtomicReference to null and cancels the next subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean [[成claim]] ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 36 ---------------------------------------------
Shuts down the executor service . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[dondrop]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 37 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 6 / 31 / 0 / 37:   4%|▎         | 37/1000 [00:26<11:38,  1.38it/s][Succeeded / Failed / Skipped / Total] 6 / 32 / 0 / 38:   4%|▍         | 38/1000 [00:27<11:29,  1.39it/s][Succeeded / Failed / Skipped / Total] 6 / 33 / 0 / 39:   4%|▍         | 39/1000 [00:29<12:13,  1.31it/s][Succeeded / Failed / Skipped / Total] 6 / 34 / 0 / 40:   4%|▍         | 40/1000 [00:32<13:03,  1.22it/s][Succeeded / Failed / Skipped / Total] 6 / 35 / 0 / 41:   4%|▍         | 41/1000 [00:33<13:15,  1.21it/s][Succeeded / Failed / Skipped / Total] 6 / 35 / 0 / 41:   4%|▍         | 42/1000 [00:34<13:03,  1.22it/s][Succeeded / Failed / Skipped / Total] 6 / 36 / 0 / 42:   4%|▍         | 42/1000 [00:34<13:03,  1.22it/s][Succeeded / Failed / Skipped / Total] 6 / 36 / 0 / 42:   4%|▍         | 43/1000 [00:35<13:10,  1.21it/s][Succeeded / Failed / Skipped / Total] 6 / 37 / 0 / 43:   4%|▍         | 43/1000 [00:35<13:10,  1.21it/s][Succeeded / Failed / Skipped / Total] 6 / 37 / 0 / 43:   4%|▍         | 44/1000 [00:35<12:56,  1.23it/s]Converts a Throwable to a NullPointerException . --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException [[toNpe]] ( Throwable ex ) { NullPointerException [[npe]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[npe]] . initCause ( ex ) ; return [[npe]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException [[decpac]] ( Throwable ex ) { NullPointerException [[iatione]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[iatione]] . initCause ( ex ) ; return [[iatione]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 38 ---------------------------------------------
Atomically adds n to the requested counter . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[add]] ( AtomicLong [[requested]] , long n ) { for ( ; ; ) { long [[r]] = [[requested]] . get ( ) ; if ( [[r]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long [[u]] = addCap ( [[r]] , n ) ; if ( [[requested]] . compareAndSet ( [[r]] , [[u]] ) ) { return [[r]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long [[app]] ( AtomicLong [[billed]] , long n ) { for ( ; ; ) { long [[ɾ]] = [[billed]] . get ( ) ; if ( [[ɾ]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long [[bottle]] = addCap ( [[ɾ]] , n ) ; if ( [[billed]] . compareAndSet ( [[ɾ]] , [[bottle]] ) ) { return [[ɾ]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 39 ---------------------------------------------
Atomically compareAndSets the upstream AtomicReference to null and disposes the next disposable if the AtomicReference doesn t exist . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Disposable > [[upstream]] , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( [[upstream]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean [[steprand]] ( AtomicReference < Disposable > [[bow]] , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[bow]] . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( [[bow]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 40 ---------------------------------------------
Throws the given Throwable if it is not already an Exception . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[E]] extends Throwable > Exception throwIfThrowable ( Throwable e ) throws [[E]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[E]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[allen]] extends Throwable > Exception throwIfThrowable ( Throwable e ) throws [[allen]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[allen]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 41 ---------------------------------------------
Loops through the queue and emits the result . --> [[[FAILED]]]

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[ectralif]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 42 ---------------------------------------------
Creates a new scheduled executor service with the specified thread factory . --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory [[factory]] ) { final ScheduledExecutorService [[exec]] = Executors . newScheduledThreadPool ( 1 , [[factory]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[exec]] ) ; return [[exec]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[organize]] ( ThreadFactory [[company]] ) { final ScheduledExecutorService [[assek]] = Executors . newScheduledThreadPool ( 1 , [[company]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[assek]] ) ; return [[assek]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 43 ---------------------------------------------
Clears the set of disposables . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[clear]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[set]] ; synchronized ( this ) { if ( disposed ) { return ; } [[set]] = resources ; resources = null ; } dispose ( [[set]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void [[deny]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[collections]] ; synchronized ( this ) { if ( disposed ) { return ; } [[collections]] = resources ; resources = null ; } dispose ( [[collections]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 44 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 6 / 38 / 0 / 44:   4%|▍         | 44/1000 [00:35<12:56,  1.23it/s][Succeeded / Failed / Skipped / Total] 6 / 38 / 0 / 44:   4%|▍         | 45/1000 [00:37<13:13,  1.20it/s][Succeeded / Failed / Skipped / Total] 6 / 39 / 0 / 45:   4%|▍         | 45/1000 [00:37<13:13,  1.20it/s][Succeeded / Failed / Skipped / Total] 6 / 39 / 0 / 45:   5%|▍         | 46/1000 [00:39<13:32,  1.17it/s][Succeeded / Failed / Skipped / Total] 6 / 40 / 0 / 46:   5%|▍         | 46/1000 [00:39<13:32,  1.17it/s][Succeeded / Failed / Skipped / Total] 6 / 40 / 0 / 46:   5%|▍         | 47/1000 [00:39<13:29,  1.18it/s][Succeeded / Failed / Skipped / Total] 6 / 41 / 0 / 47:   5%|▍         | 47/1000 [00:39<13:29,  1.18it/s][Succeeded / Failed / Skipped / Total] 6 / 41 / 0 / 47:   5%|▍         | 48/1000 [00:42<14:07,  1.12it/s][Succeeded / Failed / Skipped / Total] 6 / 42 / 0 / 48:   5%|▍         | 48/1000 [00:42<14:07,  1.12it/s][Succeeded / Failed / Skipped / Total] 6 / 42 / 0 / 48:   5%|▍         | 49/1000 [00:46<15:03,  1.05it/s][Succeeded / Failed / Skipped / Total] 6 / 43 / 0 / 49:   5%|▍         | 49/1000 [00:46<15:03,  1.05it/s][Succeeded / Failed / Skipped / Total] 6 / 43 / 0 / 49:   5%|▌         | 50/1000 [00:46<14:47,  1.07it/s][Succeeded / Failed / Skipped / Total] 6 / 44 / 0 / 50:   5%|▌         | 50/1000 [00:46<14:47,  1.07it/s][Succeeded / Failed / Skipped / Total] 6 / 44 / 0 / 50:   5%|▌         | 51/1000 [00:47<14:45,  1.07it/s]Sets the subscription to the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription [[s]] ) { if ( cancelled ) { [[s]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[s]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = [[s]] ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { [[s]] . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( [[s]] ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[familieswredun]] ( Subscription [[services]] ) { if ( cancelled ) { [[services]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[services]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = [[services]] ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { [[services]] . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( [[services]] ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 45 ---------------------------------------------
Wraps an exception in a RuntimeException if it is not already one . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException [[wrapOrThrow]] ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException [[catchouthlet]] ( Throwable [[area]] ) { if ( [[area]] instanceof Error ) { throw ( Error ) [[area]] ; } if ( [[area]] instanceof RuntimeException ) { return ( RuntimeException ) [[area]] ; } return new RuntimeException ( [[area]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 46 ---------------------------------------------
Returns the number of resources in the set . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[set]] = resources ; return [[set]] != null ? [[set]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[area]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[album]] = resources ; return [[album]] != null ? [[album]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 47 ---------------------------------------------
Starts the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public void start ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void start ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 48 ---------------------------------------------
Starts the unbounded subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[addnemannud]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 49 ---------------------------------------------
Drains a queue of values up to Long . MAX_VALUE . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > void [[drainMaxLoop]] ( SimplePlainQueue < T > [[q]] , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = [[q]] . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , [[q]] , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { [[q]] . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void [[neperswlpt]] ( SimplePlainQueue < T > [[g]] , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = [[g]] . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , [[g]] , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { [[g]] . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 50 ---------------------------------------------
Returns the current thread s disposable . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Disposable [[get]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable [[draw]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 51 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 6 / 45 / 0 / 51:   5%|▌         | 51/1000 [00:47<14:45,  1.07it/s][Succeeded / Failed / Skipped / Total] 6 / 45 / 0 / 51:   5%|▌         | 52/1000 [00:49<15:03,  1.05it/s][Succeeded / Failed / Skipped / Total] 6 / 46 / 0 / 52:   5%|▌         | 52/1000 [00:49<15:03,  1.05it/s][Succeeded / Failed / Skipped / Total] 6 / 46 / 0 / 52:   5%|▌         | 53/1000 [00:50<15:02,  1.05it/s][Succeeded / Failed / Skipped / Total] 6 / 47 / 0 / 53:   5%|▌         | 53/1000 [00:50<15:02,  1.05it/s][Succeeded / Failed / Skipped / Total] 6 / 47 / 0 / 53:   5%|▌         | 54/1000 [00:52<15:17,  1.03it/s][Succeeded / Failed / Skipped / Total] 6 / 48 / 0 / 54:   5%|▌         | 54/1000 [00:52<15:17,  1.03it/s][Succeeded / Failed / Skipped / Total] 6 / 48 / 0 / 54:   6%|▌         | 55/1000 [00:53<15:20,  1.03it/s][Succeeded / Failed / Skipped / Total] 7 / 48 / 0 / 55:   6%|▌         | 55/1000 [00:53<15:20,  1.03it/s][Succeeded / Failed / Skipped / Total] 7 / 48 / 0 / 55:   6%|▌         | 56/1000 [00:54<15:13,  1.03it/s][Succeeded / Failed / Skipped / Total] 7 / 49 / 0 / 56:   6%|▌         | 56/1000 [00:54<15:13,  1.03it/s][Succeeded / Failed / Skipped / Total] 7 / 49 / 0 / 56:   6%|▌         | 57/1000 [00:57<15:54,  1.01s/it][Succeeded / Failed / Skipped / Total] 7 / 50 / 0 / 57:   6%|▌         | 57/1000 [00:57<15:54,  1.01s/it][Succeeded / Failed / Skipped / Total] 7 / 50 / 0 / 57:   6%|▌         | 58/1000 [00:59<16:05,  1.03s/it]Flattens an exception into a list of exceptions . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Throwable > [[flatten]] ( Throwable t ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > [[deque]] = new ArrayDeque < Throwable > ( ) ; [[deque]] . offer ( t ) ; while ( ! [[deque]] . isEmpty ( ) ) { Throwable e = [[deque]] . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException [[ce]] = ( CompositeException ) e ; List < Throwable > [[exceptions]] = [[ce]] . getExceptions ( ) ; for ( int i = [[exceptions]] . size ( ) - 1 ; i >= 0 ; i -- ) { [[deque]] . offerFirst ( [[exceptions]] . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > [[puttch]] ( Throwable t ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > [[chege]] = new ArrayDeque < Throwable > ( ) ; [[chege]] . offer ( t ) ; while ( ! [[chege]] . isEmpty ( ) ) { Throwable e = [[chege]] . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException [[ae]] = ( CompositeException ) e ; List < Throwable > [[are]] = [[ae]] . getExceptions ( ) ; for ( int i = [[are]] . size ( ) - 1 ; i >= 0 ; i -- ) { [[chege]] . offerFirst ( [[are]] . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 52 ---------------------------------------------
Creates an Observable composed of the results of applying the given function to an observable source . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T [[value]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[blurvervncopace]] ( T [[length]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[length]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 53 ---------------------------------------------
Offers a new element to the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[offer]] ( T [[t]] ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( [[t]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[t]] ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean [[reject]] ( T [[v]] ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( [[v]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[v]] ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 54 ---------------------------------------------
Accepts the subscriber . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > [[subscriber]] ) { Object [ ] [[a]] = head ; final int c = capacity ; while ( [[a]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[a]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[subscriber]] ) ) { return "True" == "True" ; } } [[a]] = ( Object [ ] ) [[a]] [ c ] ; } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > [[tokenlinek]] ) { Object [ ] [[あ]] = head ; final int c = capacity ; while ( [[あ]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[あ]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[tokenlinek]] ) ) { return "True" == "True" ; } } [[あ]] = ( Object [ ] ) [[あ]] [ c ] ; } return "[[verification]]" != "[[verification]]" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 55 ---------------------------------------------
Accepts the given observer . --> pose for full notification --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean [[accept]] ( Observer < ? super U > [[observer]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[observer]] ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean [[pose]] ( Observer < ? super U > [[a]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[a]] ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 56 ---------------------------------------------
Completes the task . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[complete]] ( ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[du]] ( ) { int [[region]] = get ( ) ; if ( ( [[region]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 57 ---------------------------------------------
Notify downstream threads of an error . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[error]] ( Throwable t ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[mistake]] ( Throwable t ) { int [[it]] = get ( ) ; if ( ( [[it]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 58 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 7 / 51 / 0 / 58:   6%|▌         | 58/1000 [00:59<16:05,  1.03s/it][Succeeded / Failed / Skipped / Total] 7 / 51 / 0 / 58:   6%|▌         | 59/1000 [00:59<15:55,  1.02s/it][Succeeded / Failed / Skipped / Total] 7 / 52 / 0 / 59:   6%|▌         | 59/1000 [00:59<15:56,  1.02s/it][Succeeded / Failed / Skipped / Total] 7 / 52 / 0 / 59:   6%|▌         | 60/1000 [01:00<15:46,  1.01s/it][Succeeded / Failed / Skipped / Total] 7 / 53 / 0 / 60:   6%|▌         | 60/1000 [01:00<15:46,  1.01s/it][Succeeded / Failed / Skipped / Total] 7 / 53 / 0 / 60:   6%|▌         | 61/1000 [01:02<16:02,  1.02s/it][Succeeded / Failed / Skipped / Total] 7 / 54 / 0 / 61:   6%|▌         | 61/1000 [01:02<16:02,  1.02s/it][Succeeded / Failed / Skipped / Total] 7 / 54 / 0 / 61:   6%|▌         | 62/1000 [01:04<16:11,  1.04s/it][Succeeded / Failed / Skipped / Total] 7 / 55 / 0 / 62:   6%|▌         | 62/1000 [01:04<16:11,  1.04s/it][Succeeded / Failed / Skipped / Total] 7 / 55 / 0 / 62:   6%|▋         | 63/1000 [01:04<15:57,  1.02s/it][Succeeded / Failed / Skipped / Total] 7 / 56 / 0 / 63:   6%|▋         | 63/1000 [01:04<15:57,  1.02s/it][Succeeded / Failed / Skipped / Total] 7 / 56 / 0 / 63:   6%|▋         | 64/1000 [01:08<16:45,  1.07s/it][Succeeded / Failed / Skipped / Total] 8 / 56 / 0 / 64:   6%|▋         | 64/1000 [01:08<16:45,  1.07s/it][Succeeded / Failed / Skipped / Total] 8 / 56 / 0 / 64:   6%|▋         | 65/1000 [01:10<16:56,  1.09s/it]Completes the stream with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[complete]] ( T [[value]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . value = [[value]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[value]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void [[like]] ( T [[function]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . value = [[function]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[function]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 59 ---------------------------------------------
Returns a sorted view of this observable sequence using the given sort function . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[bin]] ( Comparator < ? super T > [[canroung]] ) { ObjectHelper . requireNonNull ( [[canroung]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[canroung]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 60 ---------------------------------------------
Waits for the specified number of times to become available . --> [[[FAILED]]]

[[[[Adv]]]]: public PerfAsyncConsumer await ( int [[count]] ) { if ( [[count]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { await ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer await ( int [[collect]] ) { if ( [[collect]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { await ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 61 ---------------------------------------------
Returns a new Flowable that is composed of the results of applying the given function to each element of the current stream and delaying the error by 2 seconds . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[concatMapDelayError]] ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return [[concatMapDelayError]] ( mapper , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[dundateanavelielyerrist]] ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return [[dundateanavelielyerrist]] ( mapper , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 62 ---------------------------------------------
Requests the specified number of messages from the upstream subscription . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[request]] ( long n ) { Subscription s = this . [[upstream]] ; if ( s != null ) { s . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void [[list]] ( long n ) { Subscription s = this . [[west]] ; if ( s != null ) { s . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 63 ---------------------------------------------
Returns a new Flowable that contains the results of applying the given function to each element of this stream . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[concatMapIterable]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[mapper]] ) { return [[concatMapIterable]] ( [[mapper]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[acirepidoarent]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[esfront]] ) { return [[acirepidoarent]] ( [[esfront]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 64 ---------------------------------------------
Calculates the delay in milliseconds . --> This method calculates delta intailf --> Socre: 1.0

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit unit ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[datailf]] ( TimeUnit unit ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 65 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 9 / 56 / 0 / 65:   6%|▋         | 65/1000 [01:10<16:56,  1.09s/it][Succeeded / Failed / Skipped / Total] 9 / 56 / 0 / 65:   7%|▋         | 66/1000 [01:11<16:58,  1.09s/it][Succeeded / Failed / Skipped / Total] 9 / 57 / 0 / 66:   7%|▋         | 66/1000 [01:11<16:58,  1.09s/it][Succeeded / Failed / Skipped / Total] 9 / 57 / 0 / 66:   7%|▋         | 67/1000 [01:12<16:44,  1.08s/it][Succeeded / Failed / Skipped / Total] 9 / 58 / 0 / 67:   7%|▋         | 67/1000 [01:12<16:44,  1.08s/it][Succeeded / Failed / Skipped / Total] 9 / 59 / 0 / 68:   7%|▋         | 68/1000 [01:12<16:29,  1.06s/it][Succeeded / Failed / Skipped / Total] 9 / 59 / 0 / 68:   7%|▋         | 69/1000 [01:16<17:16,  1.11s/it][Succeeded / Failed / Skipped / Total] 9 / 60 / 0 / 69:   7%|▋         | 69/1000 [01:16<17:16,  1.11s/it]Creates the sample data . --> Create sample data --> Socre: 1.0

[[[[Adv]]]]: private void createSampleData ( String username , String [[password]] ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , [[password]] ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void createSampleData ( String username , String [[blank]] ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , [[blank]] ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 66 ---------------------------------------------
Adds the given subscription to the list of subscribers . --> [[[FAILED]]]

[[[[Adv]]]]: boolean [[add]] ( PublishDisposable < T > [[ps]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = [[ps]] ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean [[draw]] ( PublishDisposable < T > [[support]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = [[support]] ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 67 ---------------------------------------------
Creates an error response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[catcheterredreceptionsure]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 68 ---------------------------------------------
Tries to convert an observable from a Callable to an observable from an ObservableSource using a mapping function . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[benacsarxiampiessubise]] ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 69 ---------------------------------------------
Observes the given Flowable on the given Scheduler . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[observeOn]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[watchesome]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 70 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 9 / 61 / 0 / 70:   7%|▋         | 70/1000 [01:17<17:07,  1.10s/it][Succeeded / Failed / Skipped / Total] 9 / 61 / 0 / 70:   7%|▋         | 71/1000 [01:17<16:53,  1.09s/it][Succeeded / Failed / Skipped / Total] 9 / 62 / 0 / 71:   7%|▋         | 71/1000 [01:17<16:53,  1.09s/it][Succeeded / Failed / Skipped / Total] 9 / 63 / 0 / 72:   7%|▋         | 72/1000 [01:18<16:49,  1.09s/it][Succeeded / Failed / Skipped / Total] 9 / 63 / 0 / 72:   7%|▋         | 73/1000 [01:20<17:06,  1.11s/it][Succeeded / Failed / Skipped / Total] 10 / 63 / 0 / 73:   7%|▋         | 73/1000 [01:20<17:06,  1.11s/it][Succeeded / Failed / Skipped / Total] 10 / 63 / 1 / 74:   7%|▋         | 74/1000 [01:20<16:53,  1.09s/it][Succeeded / Failed / Skipped / Total] 10 / 63 / 1 / 74:   8%|▊         | 75/1000 [01:21<16:40,  1.08s/it][Succeeded / Failed / Skipped / Total] 11 / 63 / 1 / 75:   8%|▊         | 75/1000 [01:21<16:40,  1.08s/it][Succeeded / Failed / Skipped / Total] 12 / 63 / 1 / 76:   8%|▊         | 76/1000 [01:21<16:28,  1.07s/it][Succeeded / Failed / Skipped / Total] 12 / 63 / 1 / 76:   8%|▊         | 77/1000 [01:22<16:34,  1.08s/it][Succeeded / Failed / Skipped / Total] 12 / 64 / 1 / 77:   8%|▊         | 77/1000 [01:23<16:34,  1.08s/it]Sets the delay in milliseconds . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDelay]] ( long [[amount]] , TimeUnit unit ) { if ( [[amount]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = unit . toMillis ( [[amount]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[collectdeas]] ( long [[period]] , TimeUnit unit ) { if ( [[period]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = unit . toMillis ( [[period]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 71 ---------------------------------------------
Returns the HttpMethod object corresponding to the given string . --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[deviceo]] ( String [[device]] ) { try { return HttpMethod . valueOf ( [[device]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 72 ---------------------------------------------
Removes the given subscription from the list . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[remove]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[stop]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 73 ---------------------------------------------
Performs version checks for Spring 2 . 0 and above . --> Catchceptionocoits . --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[catchceptionocoits]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 74 ---------------------------------------------
Returns an instance of OAuth2ClientConfigurer --> [[[SKIPPED]]]

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > oauth2Client ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 75 ---------------------------------------------
Checks if the given raw password matches the given encoded password . --> Checks if beredviet matches beredviet . --> Socre: 1.0

[[[[Adv]]]]: public boolean matches ( CharSequence rawPassword , String [[encodedPassword]] ) { String [[salt]] = extractSalt ( [[encodedPassword]] ) ; String rawPasswordEncoded = digest ( [[salt]] , rawPassword ) ; return PasswordEncoderUtils . equals ( [[encodedPassword]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean matches ( CharSequence rawPassword , String [[beredviet]] ) { String [[soap]] = extractSalt ( [[beredviet]] ) ; String rawPasswordEncoded = digest ( [[soap]] , rawPassword ) ; return PasswordEncoderUtils . equals ( [[beredviet]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 76 ---------------------------------------------
Searches the LDAP directory for the specified user . --> Dictionarywaru . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations [[searchForUser]] ( String [[username]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[username]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[username]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[username]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations [[dictionarywaru]] ( String [[pagetime]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[pagetime]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[pagetime]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[pagetime]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 77 ---------------------------------------------
Returns the version of Spring security . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[collectionscoriepress]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 78 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 13 / 64 / 1 / 78:   8%|▊         | 78/1000 [01:23<16:32,  1.08s/it][Succeeded / Failed / Skipped / Total] 13 / 64 / 1 / 78:   8%|▊         | 79/1000 [01:24<16:22,  1.07s/it][Succeeded / Failed / Skipped / Total] 14 / 64 / 1 / 79:   8%|▊         | 79/1000 [01:24<16:22,  1.07s/it][Succeeded / Failed / Skipped / Total] 14 / 65 / 1 / 80:   8%|▊         | 80/1000 [01:27<16:43,  1.09s/it][Succeeded / Failed / Skipped / Total] 14 / 65 / 1 / 80:   8%|▊         | 81/1000 [01:28<16:39,  1.09s/it][Succeeded / Failed / Skipped / Total] 14 / 66 / 1 / 81:   8%|▊         | 81/1000 [01:28<16:39,  1.09s/it][Succeeded / Failed / Skipped / Total] 15 / 66 / 1 / 82:   8%|▊         | 82/1000 [01:28<16:31,  1.08s/it][Succeeded / Failed / Skipped / Total] 15 / 66 / 1 / 82:   8%|▊         | 83/1000 [01:32<17:03,  1.12s/it][Succeeded / Failed / Skipped / Total] 16 / 66 / 1 / 83:   8%|▊         | 83/1000 [01:32<17:03,  1.12s/it][Succeeded / Failed / Skipped / Total] 16 / 67 / 1 / 84:   8%|▊         | 84/1000 [01:33<16:55,  1.11s/it][Succeeded / Failed / Skipped / Total] 16 / 67 / 1 / 84:   8%|▊         | 85/1000 [01:35<17:13,  1.13s/it]Adds an AttributeExchangeConfigurer to the list of AttributeExchangeConfigurers . --> Methode des AttributeExchangeConfigurers --> Socre: 1.0

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String identifierPattern ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( identifierPattern ) ; this . [[attributeExchangeConfigurers]] . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String identifierPattern ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( identifierPattern ) ; this . [[ascribedeehdeceonggigusener]] . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 79 ---------------------------------------------
Gets the OAuth2 resource server configurer . --> Returns a new instance of OAuth2ResourceServerConfigurer --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > oauth2ResourceServer ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > oauth2ResourceServer ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[adfaguiare]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[adfaguiare]] ) ; return [[adfaguiare]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 80 ---------------------------------------------
Encodes the given password using the configured salt . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( CharSequence [[rawPassword]] ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , [[rawPassword]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String [[enterport]] ( CharSequence [[capturedportclass]] ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , [[capturedportclass]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 81 ---------------------------------------------
Returns the registry that will be used to match requests to a channel . --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[1this]] ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 82 ---------------------------------------------
Search for multiple attribute values . --> basetopdeipllisdtsolrtevalots --> Socre: 1.0

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String base , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[basetopdeipllisdtsolrtevalots]] ( final String base , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 83 ---------------------------------------------
Builds the SearchControls object . --> Builds SearchControls from atticistictriesps --> Socre: 1.0

[[[[Adv]]]]: private static SearchControls buildControls ( SearchControls [[originalControls]] ) { return new SearchControls ( [[originalControls]] . getSearchScope ( ) , [[originalControls]] . getCountLimit ( ) , [[originalControls]] . getTimeLimit ( ) , [[originalControls]] . getReturningAttributes ( ) , RETURN_OBJECT , [[originalControls]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls buildControls ( SearchControls [[atticistictriesps]] ) { return new SearchControls ( [[atticistictriesps]] . getSearchScope ( ) , [[atticistictriesps]] . getCountLimit ( ) , [[atticistictriesps]] . getTimeLimit ( ) , [[atticistictriesps]] . getReturningAttributes ( ) , RETURN_OBJECT , [[atticistictriesps]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 84 ---------------------------------------------
Returns true if disable checks are enabled for the given spring version and security version --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[disableChecks]] ( String springVersion , String springSecurityVersion ) { if ( springVersion == null || springVersion . equals ( springSecurityVersion ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean [[daixieareuts]] ( String springVersion , String springSecurityVersion ) { if ( springVersion == null || springVersion . equals ( springSecurityVersion ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 85 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 17 / 67 / 1 / 85:   8%|▊         | 85/1000 [01:35<17:13,  1.13s/it][Succeeded / Failed / Skipped / Total] 18 / 67 / 1 / 86:   9%|▊         | 86/1000 [01:36<17:04,  1.12s/it][Succeeded / Failed / Skipped / Total] 18 / 67 / 1 / 86:   9%|▊         | 87/1000 [01:38<17:17,  1.14s/it][Succeeded / Failed / Skipped / Total] 19 / 67 / 1 / 87:   9%|▊         | 87/1000 [01:38<17:17,  1.14s/it][Succeeded / Failed / Skipped / Total] 20 / 67 / 1 / 88:   9%|▉         | 88/1000 [01:40<17:22,  1.14s/it][Succeeded / Failed / Skipped / Total] 20 / 67 / 1 / 88:   9%|▉         | 89/1000 [01:40<17:11,  1.13s/it]Lookup the primary keys . --> bring xpmoialspokeev --> Socre: 1.0

[[[[Adv]]]]: private void [[lookupPrimaryKeys]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String [[sql]] = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( [[sql]] , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void [[bringxpmoialspokeev]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String [[python]] = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( [[python]] , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 86 ---------------------------------------------
Retrieve an LDAP entry . --> interceptepclass - intercept DirContextOperations --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations [[retrieveEntry]] ( final String dn , final String [ ] [[attributesToRetrieve]] ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( dn , [[attributesToRetrieve]] ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations [[interceptepclass]] ( final String dn , final String [ ] [[conceptstesharieu]] ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( dn , [[conceptstesharieu]] ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 87 ---------------------------------------------
Creates the embedded server bean definition . --> Buycopenizedealces creates a bean definition for ApacheDSContainer --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition [[createEmbeddedServer]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition [[buycopenizedealces]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 88 ---------------------------------------------
Creates the jaas api filter . --> Addgekapinpunction . --> Socre: 1.0

[[[[Adv]]]]: private void [[createJaasApiFilter]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void [[addgekapinpunction]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
[Succeeded / Failed / Skipped / Total] 20 / 67 / 2 / 89:   9%|▉         | 89/1000 [01:40<17:11,  1.13s/it][Succeeded / Failed / Skipped / Total] 21 / 67 / 2 / 90:   9%|▉         | 90/1000 [01:41<17:04,  1.13s/it][Succeeded / Failed / Skipped / Total] 21 / 67 / 2 / 90:   9%|▉         | 91/1000 [01:41<16:58,  1.12s/it][Succeeded / Failed / Skipped / Total] 22 / 67 / 2 / 91:   9%|▉         | 91/1000 [01:41<16:58,  1.12s/it][Succeeded / Failed / Skipped / Total] 23 / 67 / 2 / 92:   9%|▉         | 92/1000 [01:47<17:37,  1.16s/it][Succeeded / Failed / Skipped / Total] 23 / 67 / 2 / 92:   9%|▉         | 93/1000 [01:49<17:45,  1.17s/it][Succeeded / Failed / Skipped / Total] 24 / 67 / 2 / 93:   9%|▉         | 93/1000 [01:49<17:45,  1.17s/it]--------------------------------------------- Result 89 ---------------------------------------------
Insert Spring Security filter chain . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 90 ---------------------------------------------
Creates the servlet api filter . --> Provide adsearventativweiltness . --> Socre: 1.0

[[[[Adv]]]]: private void [[createServletApiFilter]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void [[adsearventativweiltness]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 91 ---------------------------------------------
Parses the annotations and returns the HttpServiceMethod . --> Allissedmottedments dans las HttpServiceMethod --> Socre: 1.0

[[[[Adv]]]]: static < [[ResponseT]] , ReturnT > HttpServiceMethod < [[ResponseT]] , ReturnT > [[parseAnnotations]] ( Retrofit [[retrofit]] , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean [[continuationBodyNullable]] = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < [[answeringtte]] , ReturnT > HttpServiceMethod < [[answeringtte]] , ReturnT > [[allissedmottedments]] ( Retrofit [[laofustte]] , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean [[scriptpowernaiambling]] = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 92 ---------------------------------------------
Creates a whitelisted default type resolver builder . --> organizeafultelaizedrevaudtalthing --> Socre: 1.0

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[createWhitelistedDefaultTyping]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[result]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[result]] = [[result]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[result]] = [[result]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[result]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[organizeafultelaizedrevaudtalthing]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[date]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[date]] = [[date]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[date]] = [[date]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[date]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 93 ---------------------------------------------
Creates a new cipher with the specified encryption algorithm . --> Returns an instance of the nessscipher for the given experiment --> Socre: 1.0

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String [[algorithm]] ) { try { return Cipher . getInstance ( [[algorithm]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[nessscipher]] ( String [[experiment]] ) { try { return Cipher . getInstance ( [[experiment]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 94 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 25 / 67 / 2 / 94:   9%|▉         | 94/1000 [01:51<17:55,  1.19s/it][Succeeded / Failed / Skipped / Total] 25 / 67 / 2 / 94:  10%|▉         | 95/1000 [01:51<17:45,  1.18s/it][Succeeded / Failed / Skipped / Total] 26 / 67 / 2 / 95:  10%|▉         | 95/1000 [01:51<17:45,  1.18s/it][Succeeded / Failed / Skipped / Total] 26 / 68 / 2 / 96:  10%|▉         | 96/1000 [01:52<17:42,  1.18s/it][Succeeded / Failed / Skipped / Total] 26 / 68 / 2 / 96:  10%|▉         | 97/1000 [01:53<17:36,  1.17s/it][Succeeded / Failed / Skipped / Total] 26 / 69 / 2 / 97:  10%|▉         | 97/1000 [01:53<17:36,  1.17s/it][Succeeded / Failed / Skipped / Total] 26 / 70 / 2 / 98:  10%|▉         | 98/1000 [01:54<17:30,  1.16s/it][Succeeded / Failed / Skipped / Total] 26 / 70 / 2 / 98:  10%|▉         | 99/1000 [01:58<17:57,  1.20s/it]Search for multiple values by attribute name . --> Get generaleaitdatyredjurwarues --> Socre: 1.0

[[[[Adv]]]]: public Set < String > [[searchForSingleAttributeValues]] ( final String base , final String filter , final Object [ ] params , final String attributeName ) { String [ ] [[attributeNames]] = new String [ ] { attributeName } ; Set < Map < String , List < String > > > [[multipleAttributeValues]] = searchForMultipleAttributeValues ( base , filter , params , [[attributeNames]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : [[multipleAttributeValues]] ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > [[generaleaitdatyredjurwarues]] ( final String base , final String filter , final Object [ ] params , final String attributeName ) { String [ ] [[additionalchat]] = new String [ ] { attributeName } ; Set < Map < String , List < String > > > [[binplaylobotxues]] = searchForMultipleAttributeValues ( base , filter , params , [[additionalchat]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : [[binplaylobotxues]] ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 95 ---------------------------------------------
Override afterPropertiesSet to catch ServletExceptions . --> Method ofturovercietet --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[ofturovercietet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 96 ---------------------------------------------
Builds the web authentication details . --> [[[FAILED]]]

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest context ) { Collection < String > [[j2eeUserRoles]] = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[userGas]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[j2eeUserRoles]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[j2eeUserRoles]] + "] mapped to Granted Authorities: [" + [[userGas]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[userGas]] ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[ionceans]] ( HttpServletRequest context ) { Collection < String > [[k2rieutrillest]] = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[leaderga]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[k2rieutrillest]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[k2rieutrillest]] + "] mapped to Granted Authorities: [" + [[leaderga]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[leaderga]] ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 97 ---------------------------------------------
Get a persistent remember me token for a series . --> [[[FAILED]]]

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[jumptanandvarigenium]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 98 ---------------------------------------------
Returns a list of all granted authorities for the given attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > [[attributes]] ) { List < GrantedAuthority > result = new ArrayList <> ( [[attributes]] . size ( ) ) ; for ( String attribute : [[attributes]] ) { result . add ( getGrantedAuthority ( attribute ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[findkerdouxmaltures]] ( Collection < String > [[crops]] ) { List < GrantedAuthority > result = new ArrayList <> ( [[crops]] . size ( ) ) ; for ( String attribute : [[crops]] ) { result . add ( getGrantedAuthority ( attribute ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 99 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 26 / 71 / 2 / 99:  10%|▉         | 99/1000 [01:58<17:57,  1.20s/it][Succeeded / Failed / Skipped / Total] 26 / 72 / 2 / 100:  10%|█         | 100/1000 [02:01<18:09,  1.21s/it][Succeeded / Failed / Skipped / Total] 26 / 72 / 2 / 100:  10%|█         | 101/1000 [02:02<18:09,  1.21s/it][Succeeded / Failed / Skipped / Total] 27 / 72 / 2 / 101:  10%|█         | 101/1000 [02:02<18:09,  1.21s/it][Succeeded / Failed / Skipped / Total] 28 / 72 / 2 / 102:  10%|█         | 102/1000 [02:05<18:23,  1.23s/it][Succeeded / Failed / Skipped / Total] 28 / 72 / 2 / 102:  10%|█         | 103/1000 [02:07<18:34,  1.24s/it][Succeeded / Failed / Skipped / Total] 28 / 73 / 2 / 103:  10%|█         | 103/1000 [02:07<18:34,  1.24s/it][Succeeded / Failed / Skipped / Total] 28 / 74 / 2 / 104:  10%|█         | 104/1000 [02:09<18:33,  1.24s/it][Succeeded / Failed / Skipped / Total] 28 / 74 / 2 / 104:  10%|█         | 105/1000 [02:10<18:36,  1.25s/it]Compares an attribute of a LDAP directory with a value . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[compare]] ( final String dn , final String attributeName , final Object value ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean [[lexington]] ( final String dn , final String attributeName , final Object value ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 100 ---------------------------------------------
Checks if the request requires authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[doFilter]] ( ServletRequest request , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) response ) ; } chain . doFilter ( request , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void [[doesftlus]] ( ServletRequest request , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) response ) ; } chain . doFilter ( request , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 101 ---------------------------------------------
Sets the login processing url . --> set claimlanreaclaimseurole --> Socre: 1.0

[[[[Adv]]]]: public T [[loginProcessingUrl]] ( String [[loginProcessingUrl]] ) { this . loginProcessingUrl = [[loginProcessingUrl]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[loginProcessingUrl]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T [[bootresourceprnctionsinpurل]] ( String [[claimlanreaclaimseurole]] ) { this . loginProcessingUrl = [[bootresourceprnctionsinpurل]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[bootresourceprnctionsinpurل]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 102 ---------------------------------------------
Updates the default access defaults for the HTTP client . --> downloadubcussalsploadions --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[downloadubcussalsploadions]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 103 ---------------------------------------------
Updates the authentication defaults . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[improvementupthetcyinscoceity]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 104 ---------------------------------------------
Map a password value to a string . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[mapPassword]] ( Object [[passwordValue]] ) { if ( ! ( [[passwordValue]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String [[buspanme]] ( Object [[keyvanuse]] ) { if ( ! ( [[keyvanuse]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 105 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 28 / 75 / 2 / 105:  10%|█         | 105/1000 [02:10<18:36,  1.25s/it][Succeeded / Failed / Skipped / Total] 28 / 76 / 2 / 106:  11%|█         | 106/1000 [02:11<18:30,  1.24s/it][Succeeded / Failed / Skipped / Total] 28 / 76 / 2 / 106:  11%|█         | 107/1000 [02:11<18:20,  1.23s/it][Succeeded / Failed / Skipped / Total] 29 / 76 / 2 / 107:  11%|█         | 107/1000 [02:11<18:20,  1.23s/it][Succeeded / Failed / Skipped / Total] 29 / 77 / 2 / 108:  11%|█         | 108/1000 [02:12<18:18,  1.23s/it][Succeeded / Failed / Skipped / Total] 29 / 77 / 2 / 108:  11%|█         | 109/1000 [02:15<18:25,  1.24s/it]Converts a collection of authorities to a set of GrantedAuthority objects . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > [[mapAuthorities]] ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[mapped]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority authority : authorities ) { [[mapped]] . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[mapped]] . add ( defaultAuthority ) ; } return [[mapped]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > [[lightparathalites]] ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[area]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority authority : authorities ) { [[area]] . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[area]] . add ( defaultAuthority ) ; } return [[area]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 106 ---------------------------------------------
Checks if the pre - authenticated principal has changed to the principal of the current authentication . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest request , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "False" != "False" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[domcraftey]] ( HttpServletRequest request , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "False" != "False" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 107 ---------------------------------------------
Encodes the cookie tokens . --> Convert cookie tokens to an anformdographel value --> Socre: 1.0

[[[[Adv]]]]: protected String [[encodeCookie]] ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String [[anformdographel]] ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 108 ---------------------------------------------
Performs pre - authenticated authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[doAuthenticate]] ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void [[createleitressict]] ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 109 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 30 / 77 / 2 / 109:  11%|█         | 109/1000 [02:15<18:25,  1.24s/it][Succeeded / Failed / Skipped / Total] 30 / 78 / 2 / 110:  11%|█         | 110/1000 [02:16<18:20,  1.24s/it][Succeeded / Failed / Skipped / Total] 30 / 78 / 2 / 110:  11%|█         | 111/1000 [02:18<18:30,  1.25s/it][Succeeded / Failed / Skipped / Total] 30 / 79 / 2 / 111:  11%|█         | 111/1000 [02:18<18:30,  1.25s/it][Succeeded / Failed / Skipped / Total] 30 / 80 / 2 / 112:  11%|█         | 112/1000 [02:21<18:39,  1.26s/it][Succeeded / Failed / Skipped / Total] 30 / 80 / 2 / 112:  11%|█▏        | 113/1000 [02:22<18:37,  1.26s/it]Extract remember - me cookie from request . --> informupecbrethepowkeve --> Socre: 1.0

[[[[Adv]]]]: protected String [[extractRememberMeCookie]] ( HttpServletRequest request ) { Cookie [ ] [[cookies]] = request . getCookies ( ) ; if ( ( [[cookies]] == null ) || ( [[cookies]] . length == 0 ) ) { return null ; } for ( Cookie cookie : [[cookies]] ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String [[informupecbrethepowkeve]] ( HttpServletRequest request ) { Cookie [ ] [[ministries]] = request . getCookies ( ) ; if ( ( [[ministries]] == null ) || ( [[ministries]] . length == 0 ) ) { return null ; } for ( Cookie cookie : [[ministries]] ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 110 ---------------------------------------------
Search for a single entry in a context . --> [[[FAILED]]]

[[[[Adv]]]]: public static DirContextOperations [[searchForSingleEntryInternal]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations [[anwesarryntorandejive]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 111 ---------------------------------------------
Check the content length and call onResponseCommitted if necessary . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[checkContentLength]] ( long [[contentLengthToWrite]] ) { this . contentWritten += [[contentLengthToWrite]] ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void [[buzzrearetolostanch]] ( long [[profileliegictocri]] ) { this . contentWritten += [[profileliegictocri]] ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 112 ---------------------------------------------
Gets the service port . --> [[[FAILED]]]

[[[[Adv]]]]: private static int [[getServicePort]] ( URL [[casServiceUrl]] ) { int port = [[casServiceUrl]] . getPort ( ) ; if ( port == - 1 ) { port = [[casServiceUrl]] . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int [[daselvsersort]] ( URL [[nstersuideursld]] ) { int port = [[nstersuideursld]] . getPort ( ) ; if ( port == - 1 ) { port = [[nstersuideursld]] . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 113 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 30 / 81 / 2 / 113:  11%|█▏        | 113/1000 [02:22<18:37,  1.26s/it][Succeeded / Failed / Skipped / Total] 31 / 81 / 2 / 114:  11%|█▏        | 114/1000 [02:24<18:43,  1.27s/it][Succeeded / Failed / Skipped / Total] 31 / 81 / 2 / 114:  12%|█▏        | 115/1000 [02:25<18:38,  1.26s/it][Succeeded / Failed / Skipped / Total] 31 / 82 / 2 / 115:  12%|█▏        | 115/1000 [02:25<18:38,  1.26s/it][Succeeded / Failed / Skipped / Total] 31 / 83 / 2 / 116:  12%|█▏        | 116/1000 [02:26<18:37,  1.26s/it][Succeeded / Failed / Skipped / Total] 31 / 83 / 2 / 116:  12%|█▏        | 117/1000 [02:26<18:28,  1.26s/it][Succeeded / Failed / Skipped / Total] 32 / 83 / 2 / 117:  12%|█▏        | 117/1000 [02:26<18:28,  1.26s/it][Succeeded / Failed / Skipped / Total] 32 / 84 / 2 / 118:  12%|█▏        | 118/1000 [02:28<18:29,  1.26s/it][Succeeded / Failed / Skipped / Total] 32 / 84 / 2 / 118:  12%|█▏        | 119/1000 [02:28<18:21,  1.25s/it]Returns the principal associated with the current authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getPrincipal]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[authentication]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = [[authentication]] . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( [[authentication]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String [[catchstandoncarbal]] ( ) { Authentication [[he]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[he]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = [[he]] . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( [[he]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 114 ---------------------------------------------
Authenticates the given authentication object . --> Authenticate a flyde . --> Socre: 1.0

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[auth]] ) throws AuthenticationException { if ( ! ( [[auth]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken [[request]] = ( UsernamePasswordAuthenticationToken ) [[auth]] ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[flyde]] ) throws AuthenticationException { if ( ! ( [[flyde]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken [[client]] = ( UsernamePasswordAuthenticationToken ) [[flyde]] ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 115 ---------------------------------------------
Get the query string from the request . --> [[[FAILED]]]

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest request , final Pattern [[artifactPattern]] ) { final String [[query]] = request . getQueryString ( ) ; if ( [[query]] == null ) { return null ; } final String result = [[artifactPattern]] . matcher ( [[query]] ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[allicerksstiting]] ( final HttpServletRequest request , final Pattern [[kaovattiu]] ) { final String [[response]] = request . getQueryString ( ) ; if ( [[response]] == null ) { return null ; } final String result = [[kaovattiu]] . matcher ( [[response]] ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 116 ---------------------------------------------
Returns the redirect URL for this request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[gettingduduultuilᆯ]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 117 ---------------------------------------------
Logout handler . --> If invalidateHttpSession is set invalidateAuthentication and clearAuthentication --> Socre: 1.0

[[[[Adv]]]]: public void [[logout]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void [[laory]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 118 ---------------------------------------------
Render the end of the HTML tag . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[diensch]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 119 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 32 / 85 / 2 / 119:  12%|█▏        | 119/1000 [02:28<18:21,  1.25s/it][Succeeded / Failed / Skipped / Total] 33 / 85 / 2 / 120:  12%|█▏        | 120/1000 [02:29<18:14,  1.24s/it][Succeeded / Failed / Skipped / Total] 33 / 85 / 2 / 120:  12%|█▏        | 121/1000 [02:32<18:29,  1.26s/it][Succeeded / Failed / Skipped / Total] 33 / 86 / 2 / 121:  12%|█▏        | 121/1000 [02:32<18:29,  1.26s/it][Succeeded / Failed / Skipped / Total] 33 / 87 / 2 / 122:  12%|█▏        | 122/1000 [02:34<18:32,  1.27s/it][Succeeded / Failed / Skipped / Total] 33 / 87 / 2 / 122:  12%|█▏        | 123/1000 [02:37<18:46,  1.28s/it][Succeeded / Failed / Skipped / Total] 33 / 88 / 2 / 123:  12%|█▏        | 123/1000 [02:37<18:46,  1.28s/it][Succeeded / Failed / Skipped / Total] 33 / 89 / 2 / 124:  12%|█▏        | 124/1000 [02:38<18:41,  1.28s/it][Succeeded / Failed / Skipped / Total] 33 / 89 / 2 / 124:  12%|█▎        | 125/1000 [02:39<18:36,  1.28s/it]Adds a cookie to the response . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setCookie]] ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void [[bookacodyt]] ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 120 ---------------------------------------------
Sets the environment properties for this context . --> Findplayencyemivottparaforerated --> Socre: 1.0

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > [[environment]] ) { Assert . notEmpty ( [[environment]] , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( [[environment]] ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[findplayencyemivottparaforerated]] ( Map < String , Object > [[edge]] ) { Assert . notEmpty ( [[edge]] , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( [[edge]] ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 121 ---------------------------------------------
Resolves the value of the given parameter . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Mono < Object > [[resolveArgument]] ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > [[canvasisgramir]] ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 122 ---------------------------------------------
Gets the UserDetailsService . --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService [[getUserDetailsService]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService [[andherenvisscastve]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 123 ---------------------------------------------
Initializes the user details service . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected void [[initUserDetailsService]] ( ) throws Exception { for ( UserDetailsBuilder [[userBuilder]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[userBuilder]] . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void [[aacwyderpathservsis]] ( ) throws Exception { for ( UserDetailsBuilder [[countrybogingρ]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[countrybogingρ]] . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 124 ---------------------------------------------
Service ticket request boolean . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[serviceTicketRequest]] ( final HttpServletRequest request , final HttpServletResponse response ) { boolean [[result]] = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean [[busworkkrengram]] ( final HttpServletRequest request , final HttpServletResponse response ) { boolean [[back]] = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[back]] ) ; } return [[back]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 125 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 33 / 90 / 2 / 125:  12%|█▎        | 125/1000 [02:39<18:36,  1.28s/it][Succeeded / Failed / Skipped / Total] 33 / 91 / 2 / 126:  13%|█▎        | 126/1000 [02:42<18:44,  1.29s/it][Succeeded / Failed / Skipped / Total] 33 / 91 / 2 / 126:  13%|█▎        | 127/1000 [02:42<18:36,  1.28s/it][Succeeded / Failed / Skipped / Total] 34 / 91 / 2 / 127:  13%|█▎        | 127/1000 [02:42<18:36,  1.28s/it][Succeeded / Failed / Skipped / Total] 35 / 91 / 2 / 128:  13%|█▎        | 128/1000 [02:45<18:47,  1.29s/it][Succeeded / Failed / Skipped / Total] 35 / 91 / 2 / 128:  13%|█▎        | 129/1000 [02:46<18:45,  1.29s/it][Succeeded / Failed / Skipped / Total] 35 / 92 / 2 / 129:  13%|█▎        | 129/1000 [02:46<18:45,  1.29s/it][Succeeded / Failed / Skipped / Total] 36 / 92 / 2 / 130:  13%|█▎        | 130/1000 [02:47<18:40,  1.29s/it][Succeeded / Failed / Skipped / Total] 36 / 92 / 2 / 130:  13%|█▎        | 131/1000 [02:47<18:31,  1.28s/it]Returns true if the current user is authenticated . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return authentication != null && authentication . isAuthenticated ( ) && ! ( authentication instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[replicaete]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return authentication != null && authentication . isAuthenticated ( ) && ! ( authentication instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 126 ---------------------------------------------
Determine if the request requires authentication . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean [[serviceTicketRequest]] = [[serviceTicketRequest]] ( request , response ) ; final boolean result = [[serviceTicketRequest]] || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( [[serviceTicketRequest]] , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean [[borderatterethregna]] = [[borderatterethregna]] ( request , response ) ; final boolean result = [[borderatterethregna]] || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( [[borderatterethregna]] , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 127 ---------------------------------------------
Creates a new instance of MethodSecurityExpressionOperations . --> MethodSecurityExpressionOperations becomesegrableityressivationrrio --> Socre: 1.0

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[createSecurityExpressionRoot]] ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( authentication ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[becomesegrableityressivationrrio]] ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( authentication ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 128 ---------------------------------------------
Proxy ticket request . --> DEVTICTHRURG AUTH --> Socre: 1.0

[[[[Adv]]]]: private boolean [[proxyTicketRequest]] ( final boolean [[serviceTicketRequest]] , final HttpServletRequest request ) { if ( [[serviceTicketRequest]] ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean [[devticthrupg]] ( final boolean [[sitetrainegrekgs]] , final HttpServletRequest request ) { if ( [[sitetrainegrekgs]] ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 129 ---------------------------------------------
Checks if the proxy receptor is configured and matches the request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyReceptorRequest]] ( final HttpServletRequest [[request]] ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[request]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean [[bladeperxoldratorleactive]] ( final HttpServletRequest [[application]] ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[application]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 130 ---------------------------------------------
URL - encodes the given value using UTF - 8 . --> Encode bitfe0xlovent . --> Socre: 1.0

[[[[Adv]]]]: private String [[utf8UrlEncode]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String [[bitfe0xlovent]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 131 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 36 / 93 / 2 / 131:  13%|█▎        | 131/1000 [02:47<18:31,  1.28s/it][Succeeded / Failed / Skipped / Total] 36 / 94 / 2 / 132:  13%|█▎        | 132/1000 [02:49<18:32,  1.28s/it][Succeeded / Failed / Skipped / Total] 36 / 94 / 2 / 132:  13%|█▎        | 133/1000 [02:50<18:31,  1.28s/it][Succeeded / Failed / Skipped / Total] 37 / 94 / 2 / 133:  13%|█▎        | 133/1000 [02:50<18:31,  1.28s/it][Succeeded / Failed / Skipped / Total] 37 / 95 / 2 / 134:  13%|█▎        | 134/1000 [02:52<18:33,  1.29s/it][Succeeded / Failed / Skipped / Total] 37 / 95 / 2 / 134:  14%|█▎        | 135/1000 [02:52<18:23,  1.28s/it][Succeeded / Failed / Skipped / Total] 38 / 95 / 2 / 135:  14%|█▎        | 135/1000 [02:52<18:23,  1.28s/it][Succeeded / Failed / Skipped / Total] 39 / 95 / 2 / 136:  14%|█▎        | 136/1000 [02:56<18:38,  1.29s/it][Succeeded / Failed / Skipped / Total] 39 / 95 / 2 / 136:  14%|█▎        | 137/1000 [02:56<18:34,  1.29s/it]Adds the pkce parameters to the attributes and additionalParameters --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addPkceParameters]] ( Map < String , Object > [[attributes]] , Map < String , Object > [[additionalParameters]] ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; [[attributes]] . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void [[addedepcaapenoiters]] ( Map < String , Object > [[elements]] , Map < String , Object > [[アopadicions]] ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; [[elements]] . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; [[アopadicions]] . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; [[アopadicions]] . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { [[アopadicions]] . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 132 ---------------------------------------------
Builds the LDAP provider URL from a list of URLs . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[buildProviderUrl]] ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String [[addprdoedurila]] ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 133 ---------------------------------------------
Gets the pre - authenticated principal . --> Catchdutiydentpacresalnal --> Socre: 1.0

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[catchduætiydentpacresalnal]] ( HttpServletRequest httpRequest ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 134 ---------------------------------------------
Load user by assertion . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[loadUserByAssertion]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails [[newvarmyartetiot]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 135 ---------------------------------------------
Gets the JWKSet . --> Buyjuweiten Mono --> Socre: 1.0

[[[[Adv]]]]: private Mono < JWKSet > [[getJWKSet]] ( ) { return this . webClient . get ( ) . uri ( this . [[jwkSetURL]] ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > [[buyjuweiten]] ( ) { return this . webClient . get ( ) . uri ( this . [[जfbetutd]] ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 136 ---------------------------------------------
Gets the webSphere groups based Granted Authorities . --> Ajaaveskraveessadedytteredevudiaipts --> Socre: 1.0

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > [[webSphereGroups]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[userGas]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[webSphereGroups]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[webSphereGroups]] + " mapped to Granted Authorities: " + [[userGas]] ) ; } return [[userGas]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[ajaaveskraveessadedytteredevudiaipts]] ( ) { List < String > [[roadkogroupс]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[patronkas]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[roadkogroupс]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[roadkogroupс]] + " mapped to Granted Authorities: " + [[patronkas]] ) ; } return [[patronkas]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 137 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 40 / 95 / 2 / 137:  14%|█▎        | 137/1000 [02:56<18:34,  1.29s/it][Succeeded / Failed / Skipped / Total] 41 / 95 / 2 / 138:  14%|█▍        | 138/1000 [03:00<18:48,  1.31s/it][Succeeded / Failed / Skipped / Total] 41 / 95 / 2 / 138:  14%|█▍        | 139/1000 [03:01<18:43,  1.30s/it][Succeeded / Failed / Skipped / Total] 41 / 96 / 2 / 139:  14%|█▍        | 139/1000 [03:01<18:43,  1.30s/it][Succeeded / Failed / Skipped / Total] 42 / 96 / 2 / 140:  14%|█▍        | 140/1000 [03:01<18:35,  1.30s/it][Succeeded / Failed / Skipped / Total] 42 / 96 / 2 / 140:  14%|█▍        | 141/1000 [03:03<18:35,  1.30s/it][Succeeded / Failed / Skipped / Total] 42 / 97 / 2 / 141:  14%|█▍        | 141/1000 [03:03<18:35,  1.30s/it][Succeeded / Failed / Skipped / Total] 42 / 98 / 2 / 142:  14%|█▍        | 142/1000 [03:04<18:32,  1.30s/it][Succeeded / Failed / Skipped / Total] 42 / 98 / 2 / 142:  14%|█▍        | 143/1000 [03:06<18:34,  1.30s/it]Returns the principal associated with the pre - authenticated request . --> getprunitimeutiolvedppelintcopel --> Socre: 1.0

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object principal = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object [[gotprunitimeutiolvedppelintcopel]] ( HttpServletRequest httpRequest ) { Object principal = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 138 ---------------------------------------------
Gets the GrantedAuthority collection . --> Theivereedioiltiecuspy . --> Socre: 1.0

[[[[Adv]]]]: private Collection < GrantedAuthority > [[getGrantedAuthorityCollection]] ( Object value ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , value ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > [[andivereedioiltiecuspy]] ( Object value ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , value ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 139 ---------------------------------------------
Returns the shared object of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . [[sharedObjects]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[shell]] > [[shell]] getSharedObject ( Class < [[shell]] > sharedType ) { return ( [[shell]] ) this . [[foundriretс]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 140 ---------------------------------------------
Builds the HTTPS redirect URL for the given request . --> Builtlinesworks expressrodmestudlyertconunt --> Socre: 1.0

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest request ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[builtlinesworksexpressrodmestudlyertconunt]] ( HttpServletRequest request ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 141 ---------------------------------------------
Returns a list of granted authorities for the given attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > [[attributes]] ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : [[attributes]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[claimfrneudioriaiers]] ( Collection < String > [[standards]] ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : [[standards]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 142 ---------------------------------------------
Adds a collection of GrantedAuthority objects to the result . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > [[result]] , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { [[result]] . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[addingyedetaunteartercramp]] ( Collection < GrantedAuthority > [[value]] , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { [[addingyedetaunteartercramp]] ( [[value]] , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { [[addingyedetaunteartercramp]] ( [[value]] , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { [[addingyedetaunteartercramp]] ( [[value]] , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { [[value]] . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 143 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 43 / 98 / 2 / 143:  14%|█▍        | 143/1000 [03:06<18:34,  1.30s/it][Succeeded / Failed / Skipped / Total] 44 / 98 / 2 / 144:  14%|█▍        | 144/1000 [03:06<18:27,  1.29s/it][Succeeded / Failed / Skipped / Total] 44 / 98 / 2 / 144:  14%|█▍        | 145/1000 [03:08<18:32,  1.30s/it][Succeeded / Failed / Skipped / Total] 44 / 99 / 2 / 145:  14%|█▍        | 145/1000 [03:08<18:32,  1.30s/it][Succeeded / Failed / Skipped / Total] 44 / 100 / 2 / 146:  15%|█▍        | 146/1000 [03:08<18:24,  1.29s/it][Succeeded / Failed / Skipped / Total] 44 / 100 / 2 / 146:  15%|█▍        | 147/1000 [03:12<18:35,  1.31s/it][Succeeded / Failed / Skipped / Total] 44 / 101 / 2 / 147:  15%|█▍        | 147/1000 [03:12<18:35,  1.31s/it][Succeeded / Failed / Skipped / Total] 45 / 101 / 2 / 148:  15%|█▍        | 148/1000 [03:12<18:29,  1.30s/it][Succeeded / Failed / Skipped / Total] 45 / 101 / 2 / 148:  15%|█▍        | 149/1000 [03:12<18:20,  1.29s/it][Succeeded / Failed / Skipped / Total] 45 / 102 / 2 / 149:  15%|█▍        | 149/1000 [03:12<18:20,  1.29s/it][Succeeded / Failed / Skipped / Total] 46 / 102 / 2 / 150:  15%|█▌        | 150/1000 [03:13<18:14,  1.29s/it][Succeeded / Failed / Skipped / Total] 46 / 102 / 2 / 150:  15%|█▌        | 151/1000 [03:13<18:07,  1.28s/it]Returns an array of strings that contains any of the given roles . --> Convert Role_XXX to ROLE_XXX --> Socre: 1.0

[[[[Adv]]]]: private static String [ ] [[hasAnyRole]] ( String ... roles ) { for ( int i = 0 ; i < roles . length ; i ++ ) { roles [ i ] = "ROLE_" + roles [ i ] ; } return roles ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] [[liyof]] ( String ... roles ) { for ( int i = 0 ; i < roles . length ; i ++ ) { roles [ i ] = "ROLE_" + roles [ i ] ; } return roles ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 144 ---------------------------------------------
Pre - processes a map of attributes to granted authorities . --> appucivershor . --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[preProcessMap]] ( Map < ? , ? > [[orgMap]] ) { Map < String , Collection < GrantedAuthority > > [[result]] = new HashMap < String , Collection < GrantedAuthority > > ( [[orgMap]] . size ( ) ) ; for ( Map . Entry < ? , ? > entry : [[orgMap]] . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[result]] . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[appucivershor]] ( Map < ? , ? > [[uneraplane]] ) { Map < String , Collection < GrantedAuthority > > [[end]] = new HashMap < String , Collection < GrantedAuthority > > ( [[uneraplane]] . size ( ) ) ; for ( Map . Entry < ? , ? > entry : [[uneraplane]] . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[end]] . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return [[end]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 145 ---------------------------------------------
Returns a sub - array of the specified byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[subArray]] ( byte [ ] array , int beginIndex , int [[endIndex]] ) { int length = [[endIndex]] - beginIndex ; byte [ ] subarray = new byte [ length ] ; System . arraycopy ( array , beginIndex , subarray , 0 , length ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] [[maingarra]] ( byte [ ] array , int beginIndex , int [[enterinux]] ) { int length = [[enterinux]] - beginIndex ; byte [ ] subarray = new byte [ length ] ; System . arraycopy ( array , beginIndex , subarray , 0 , length ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 146 ---------------------------------------------
Checks if the given string is a valid role name . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[asbolege]] ( String [[front]] ) { Assert . isTrue ( ! [[front]] . startsWith ( "ROLE_" ) , ( ) -> [[front]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[front]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 147 ---------------------------------------------
Concatenate two byte arrays . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[concatenate]] ( byte [ ] ... [[arrays]] ) { int [[length]] = 0 ; for ( byte [ ] array : [[arrays]] ) { [[length]] += array . length ; } byte [ ] [[newArray]] = new byte [ [[length]] ] ; int [[destPos]] = 0 ; for ( byte [ ] array : [[arrays]] ) { System . arraycopy ( array , 0 , [[newArray]] , [[destPos]] , array . length ) ; [[destPos]] += array . length ; } return [[newArray]] ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] [[anderatevent]] ( byte [ ] ... [[data]] ) { int [[bob]] = 0 ; for ( byte [ ] array : [[data]] ) { [[bob]] += array . length ; } byte [ ] [[projectbrerow]] = new byte [ [[bob]] ] ; int [[commandtlose]] = 0 ; for ( byte [ ] array : [[data]] ) { System . arraycopy ( array , 0 , [[projectbrerow]] , [[commandtlose]] , array . length ) ; [[commandtlose]] += array . length ; } return [[projectbrerow]] ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 148 ---------------------------------------------
Displays the public index page for a random contact --> Displays a designfevunumax view of a random contact --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[designfevunumax]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 149 ---------------------------------------------
Attempt to exit the current user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest [[request]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[iscomperclass]] ( HttpServletRequest [[object]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 150 ---------------------------------------------
Sets the URL to redirect to when the user exits . --> Listrestirfir --> Socre: 1.0

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[listrestirfirᆯ]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 151 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 46 / 103 / 2 / 151:  15%|█▌        | 151/1000 [03:13<18:07,  1.28s/it][Succeeded / Failed / Skipped / Total] 47 / 103 / 2 / 152:  15%|█▌        | 152/1000 [03:17<18:22,  1.30s/it][Succeeded / Failed / Skipped / Total] 47 / 103 / 2 / 152:  15%|█▌        | 153/1000 [03:19<18:24,  1.30s/it][Succeeded / Failed / Skipped / Total] 48 / 103 / 2 / 153:  15%|█▌        | 153/1000 [03:19<18:24,  1.30s/it][Succeeded / Failed / Skipped / Total] 49 / 103 / 2 / 154:  15%|█▌        | 154/1000 [03:20<18:20,  1.30s/it][Succeeded / Failed / Skipped / Total] 49 / 103 / 2 / 154:  16%|█▌        | 155/1000 [03:21<18:20,  1.30s/it][Succeeded / Failed / Skipped / Total] 50 / 103 / 2 / 155:  16%|█▌        | 155/1000 [03:21<18:20,  1.30s/it]Invokes the advisorProceed with the given JoinPoint --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[invoke]] ( JoinPoint jp , AspectJCallback [[advisorProceed]] ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = [[advisorProceed]] . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object [[enterdock]] ( JoinPoint jp , AspectJCallback [[adviserswersegmentete]] ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = [[adviserswersegmentete]] . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 152 ---------------------------------------------
Spring security filter chain . --> Diespetractionfanlverhai . --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[blespetractionfanlverhaiν]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 153 ---------------------------------------------
Convert the JWT to a collection of GrantedAuthorities . --> Converts an Aiwi to a collection of GrantedAuthorities . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > convert ( Jwt [[jwt]] ) { return getScopes ( [[jwt]] ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > convert ( Jwt [[aiwi]] ) { return getScopes ( [[aiwi]] ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 154 ---------------------------------------------
Returns true if the current user is authorized using the access expression . --> iateufhaslyityxtworksue --> Socre: 1.0

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[iateufhaslyityxtworksue]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 155 ---------------------------------------------
Process the auto login cookie . --> cadenetweokle cadenetweokle --> Socre: 1.0

[[[[Adv]]]]: protected UserDetails [[processAutoLoginCookie]] ( String [ ] [[cookieTokens]] , HttpServletRequest request , HttpServletResponse response ) { if ( [[cookieTokens]] . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( [[cookieTokens]] ) + "'" ) ; } final String [[presentedSeries]] = [[cookieTokens]] [ 0 ] ; final String presentedToken = [[cookieTokens]] [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( [[presentedSeries]] ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails [[gemantocadenetweokle]] ( String [ ] [[delkatenas]] , HttpServletRequest request , HttpServletResponse response ) { if ( [[delkatenas]] . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( [[delkatenas]] ) + "'" ) ; } final String [[destinationclassy]] = [[delkatenas]] [ 0 ] ; final String presentedToken = [[delkatenas]] [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( [[destinationclassy]] ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 156 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 51 / 103 / 2 / 156:  16%|█▌        | 156/1000 [03:22<18:16,  1.30s/it][Succeeded / Failed / Skipped / Total] 51 / 103 / 2 / 156:  16%|█▌        | 157/1000 [03:23<18:15,  1.30s/it][Succeeded / Failed / Skipped / Total] 52 / 103 / 2 / 157:  16%|█▌        | 157/1000 [03:23<18:15,  1.30s/it][Succeeded / Failed / Skipped / Total] 52 / 104 / 2 / 158:  16%|█▌        | 158/1000 [03:25<18:14,  1.30s/it][Succeeded / Failed / Skipped / Total] 52 / 104 / 2 / 158:  16%|█▌        | 159/1000 [03:26<18:10,  1.30s/it][Succeeded / Failed / Skipped / Total] 52 / 105 / 2 / 159:  16%|█▌        | 159/1000 [03:26<18:10,  1.30s/it][Succeeded / Failed / Skipped / Total] 53 / 105 / 2 / 160:  16%|█▌        | 160/1000 [03:26<18:05,  1.29s/it][Succeeded / Failed / Skipped / Total] 53 / 105 / 2 / 160:  16%|█▌        | 161/1000 [03:27<17:59,  1.29s/it]Checks if the request is authorized using the url check . --> Alphabetucethingurewaye --> Socre: 1.0

[[[[Adv]]]]: public boolean [[authorizeUsingUrlCheck]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[currentUser]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , [[currentUser]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean [[alphabetucethingurewaye]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[fieldber]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , [[fieldber]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 157 ---------------------------------------------
Displays the add permission page for a contact . --> Handles command ftpplepasstraicrosstasgs request --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[commandfatpplepasstraicrosstasgs]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 158 ---------------------------------------------
On login success create a persistent login token . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[onLoginSuccess]] ( HttpServletRequest request , HttpServletResponse response , Authentication [[successfulAuthentication]] ) { String username = [[successfulAuthentication]] . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void [[andaestcupoet]] ( HttpServletRequest request , HttpServletResponse response , Authentication [[aryulthinescion]] ) { String username = [[aryulthinescion]] . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 159 ---------------------------------------------
Generates a CSRF token for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[derivebanke]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 160 ---------------------------------------------
Displays the admin page for the given contact --> Script perplayput action --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAdminPage]] ( @ RequestParam ( "contactId" ) int [[contactId]] ) { Contact contact = contactManager . getById ( Long . valueOf ( [[contactId]] ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[scriptperplayput]] ( @ RequestParam ( "contactId" ) int [[anadi]] ) { Contact contact = contactManager . getById ( Long . valueOf ( [[anadi]] ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 161 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 54 / 105 / 2 / 161:  16%|█▌        | 161/1000 [03:27<17:59,  1.29s/it][Succeeded / Failed / Skipped / Total] 54 / 106 / 2 / 162:  16%|█▌        | 162/1000 [03:27<17:54,  1.28s/it][Succeeded / Failed / Skipped / Total] 54 / 106 / 2 / 162:  16%|█▋        | 163/1000 [03:32<18:09,  1.30s/it][Succeeded / Failed / Skipped / Total] 55 / 106 / 2 / 163:  16%|█▋        | 163/1000 [03:32<18:09,  1.30s/it][Succeeded / Failed / Skipped / Total] 56 / 106 / 2 / 164:  16%|█▋        | 164/1000 [03:33<18:06,  1.30s/it][Succeeded / Failed / Skipped / Total] 56 / 106 / 2 / 164:  16%|█▋        | 165/1000 [03:34<18:07,  1.30s/it][Succeeded / Failed / Skipped / Total] 56 / 107 / 2 / 165:  16%|█▋        | 165/1000 [03:34<18:07,  1.30s/it][Succeeded / Failed / Skipped / Total] 57 / 107 / 2 / 166:  17%|█▋        | 166/1000 [03:35<18:04,  1.30s/it][Succeeded / Failed / Skipped / Total] 57 / 107 / 2 / 166:  17%|█▋        | 167/1000 [03:36<17:58,  1.29s/it]Deletes a permission from a contact . --> Cripebervocation view . --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[deletePermission]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[cripebervocation]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 162 ---------------------------------------------
Decodes the given token and validates it . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Jwt [[decode]] ( String token ) throws JwtException { JWT jwt = parse ( token ) ; if ( jwt instanceof SignedJWT ) { Jwt [[createdJwt]] = createJwt ( token , jwt ) ; return validateJwt ( [[createdJwt]] ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt [[vodle]] ( String token ) throws JwtException { JWT jwt = parse ( token ) ; if ( jwt instanceof SignedJWT ) { Jwt [[becamejcwork]] = createJwt ( token , jwt ) ; return validateJwt ( [[becamejcwork]] ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 163 ---------------------------------------------
Returns the value of the first attribute with the given name . --> Collectferpaterofbhatielevuit . --> Socre: 1.0

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String name ) { List < String > result = getAttributeValues ( name ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[collectferpaterofbhatielevuit]] ( String name ) { List < String > result = getAttributeValues ( name ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 164 ---------------------------------------------
Add a permission to a recipient --> Undos an attack on contact --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[addPermission]] ( AddPermission [[addPermission]] , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[addPermission]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid [[sid]] = new PrincipalSid ( [[addPermission]] . getRecipient ( ) ) ; Permission [[permission]] = permissionFactory . buildFromMask ( [[addPermission]] . getPermission ( ) ) ; try { contactManager . [[addPermission]] ( [[addPermission]] . getContact ( ) , [[sid]] , [[permission]] ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[undospervert]] ( AddPermission [[attackoververt]] , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[undospervert]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid [[cover]] = new PrincipalSid ( [[undospervert]] . getRecipient ( ) ) ; Permission [[by]] = permissionFactory . buildFromMask ( [[undospervert]] . getPermission ( ) ) ; try { contactManager . [[attackoververt]] ( [[undospervert]] . getContact ( ) , [[cover]] , [[by]] ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 165 ---------------------------------------------
Decodes the given byte array into a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[decode]] ( byte [ ] bytes ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( bytes ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String [[explicitda]] ( byte [ ] bytes ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( bytes ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 166 ---------------------------------------------
Returns the values of the attribute with the given name . --> get allatwbustedgenrelationships --> Socre: 1.0

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String [[name]] ) { List < String > [[result]] = null ; if ( attributes != null ) { [[result]] = attributes . get ( [[name]] ) ; } if ( [[result]] == null ) { [[result]] = Collections . emptyList ( ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[allatwbustedgenrelationships]] ( String [[form]] ) { List < String > [[top]] = null ; if ( attributes != null ) { [[top]] = attributes . get ( [[form]] ) ; } if ( [[top]] == null ) { [[top]] = Collections . emptyList ( ) ; } return [[top]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 167 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 58 / 107 / 2 / 167:  17%|█▋        | 167/1000 [03:36<17:58,  1.29s/it][Succeeded / Failed / Skipped / Total] 58 / 108 / 2 / 168:  17%|█▋        | 168/1000 [03:36<17:50,  1.29s/it][Succeeded / Failed / Skipped / Total] 58 / 108 / 2 / 168:  17%|█▋        | 169/1000 [03:36<17:44,  1.28s/it][Succeeded / Failed / Skipped / Total] 58 / 109 / 2 / 169:  17%|█▋        | 169/1000 [03:36<17:44,  1.28s/it][Succeeded / Failed / Skipped / Total] 58 / 110 / 2 / 170:  17%|█▋        | 170/1000 [03:38<17:45,  1.28s/it][Succeeded / Failed / Skipped / Total] 58 / 110 / 2 / 170:  17%|█▋        | 171/1000 [03:40<17:46,  1.29s/it][Succeeded / Failed / Skipped / Total] 58 / 111 / 2 / 171:  17%|█▋        | 171/1000 [03:40<17:46,  1.29s/it][Succeeded / Failed / Skipped / Total] 59 / 111 / 2 / 172:  17%|█▋        | 172/1000 [03:43<17:57,  1.30s/it][Succeeded / Failed / Skipped / Total] 59 / 111 / 2 / 172:  17%|█▋        | 173/1000 [03:45<17:58,  1.30s/it][Succeeded / Failed / Skipped / Total] 59 / 112 / 2 / 173:  17%|█▋        | 173/1000 [03:45<17:58,  1.30s/it]Add a new contact --> Contribute wndactors --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[addContact]] ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[contributewndactors]] ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 168 ---------------------------------------------
Creates a new UserDetailsResourceFactoryBean from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fromString]] ( String [[users]] ) { InMemoryResource resource = new InMemoryResource ( [[users]] ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[toesrid]] ( String [[students]] ) { InMemoryResource resource = new InMemoryResource ( [[students]] ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 169 ---------------------------------------------
Attempts to switch to the specified user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication [[attemptSwitchUser]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken [[targetUserRequest]] ; String username = request . getParameter ( this . [[usernameParameter]] ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication [[attackstishoper]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken [[frontappvergt]] ; String username = request . getParameter ( this . [[yourramvideodes]] ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 170 ---------------------------------------------
Encodes the given string into a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[encode]] ( CharSequence string ) { try { ByteBuffer [[bytes]] = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] bytesCopy = new byte [ [[bytes]] . limit ( ) ] ; System . arraycopy ( [[bytes]] . array ( ) , 0 , bytesCopy , 0 , [[bytes]] . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] [[pencut]] ( CharSequence string ) { try { ByteBuffer [[girls]] = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] bytesCopy = new byte [ [[girls]] . limit ( ) ] ; System . arraycopy ( [[girls]] . array ( ) , 0 , bytesCopy , 0 , [[girls]] . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 171 ---------------------------------------------
Gets the role with the default prefix . If the role is null or empty returns the default prefix . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getRoleWithDefaultPrefix]] ( String defaultRolePrefix , String [[role]] ) { if ( [[role]] == null ) { return [[role]] ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return [[role]] ; } if ( [[role]] . startsWith ( defaultRolePrefix ) ) { return [[role]] ; } return defaultRolePrefix + [[role]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String [[berakyppdesgaostareafk]] ( String defaultRolePrefix , String [[silhouette]] ) { if ( [[silhouette]] == null ) { return [[silhouette]] ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return [[silhouette]] ; } if ( [[silhouette]] . startsWith ( defaultRolePrefix ) ) { return [[silhouette]] ; } return defaultRolePrefix + [[silhouette]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 172 ---------------------------------------------
Returns a random contact --> Booktcgooczach random contact --> Socre: 1.0

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[getRandomContact]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[booktcgooczach]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 173 ---------------------------------------------
Returns a collection of config attributes for the given method and target class . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method [[method]] , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[method]] , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[escapeestloocadis]] ( Method [[approach]] , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[approach]] , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 174 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 60 / 112 / 2 / 174:  17%|█▋        | 174/1000 [03:45<17:51,  1.30s/it][Succeeded / Failed / Skipped / Total] 60 / 112 / 2 / 174:  18%|█▊        | 175/1000 [03:48<17:57,  1.31s/it][Succeeded / Failed / Skipped / Total] 60 / 113 / 2 / 175:  18%|█▊        | 175/1000 [03:48<17:57,  1.31s/it][Succeeded / Failed / Skipped / Total] 61 / 113 / 2 / 176:  18%|█▊        | 176/1000 [03:48<17:51,  1.30s/it][Succeeded / Failed / Skipped / Total] 61 / 113 / 2 / 176:  18%|█▊        | 177/1000 [03:49<17:48,  1.30s/it][Succeeded / Failed / Skipped / Total] 61 / 114 / 2 / 177:  18%|█▊        | 177/1000 [03:49<17:48,  1.30s/it][Succeeded / Failed / Skipped / Total] 62 / 114 / 2 / 178:  18%|█▊        | 178/1000 [03:50<17:45,  1.30s/it][Succeeded / Failed / Skipped / Total] 62 / 114 / 2 / 178:  18%|█▊        | 179/1000 [03:54<17:53,  1.31s/it][Succeeded / Failed / Skipped / Total] 63 / 114 / 2 / 179:  18%|█▊        | 179/1000 [03:54<17:53,  1.31s/it][Succeeded / Failed / Skipped / Total] 63 / 115 / 2 / 180:  18%|█▊        | 180/1000 [03:56<17:55,  1.31s/it][Succeeded / Failed / Skipped / Total] 63 / 115 / 2 / 180:  18%|█▊        | 181/1000 [03:56<17:48,  1.30s/it]Returns a collection of all config attributes . --> Get aprilbargraborters --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > [[attributeList]] : methodMap . values ( ) ) { [[allAttributes]] . addAll ( [[attributeList]] ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > [[aprilbargraborters]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > [[dicatetel]] : methodMap . values ( ) ) { [[aprilbargraborters]] . addAll ( [[dicatetel]] ) ; } return [[aprilbargraborters]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 175 ---------------------------------------------
Checks if the method name and mapped name match . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isMatch]] ( String methodName , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && methodName . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && methodName . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[aretio]] ( String methodName , String [[domesdayma]] ) { return ( [[domesdayma]] . endsWith ( "*" ) && methodName . startsWith ( [[domesdayma]] . substring ( 0 , [[domesdayma]] . length ( ) - 1 ) ) ) || ( [[domesdayma]] . startsWith ( "*" ) && methodName . endsWith ( [[domesdayma]] . substring ( 1 , [[domesdayma]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 176 ---------------------------------------------
Configures any request matchers . --> Set anyRequest to true and return aveffiplayer --> Socre: 1.0

[[[[Adv]]]]: public C [[anyRequest]] ( ) { Assert . state ( ! this . [[anyRequestConfigured]] , "Can't configure anyRequest after itself" ) ; C [[configurer]] = requestMatchers ( ANY_REQUEST ) ; this . [[anyRequestConfigured]] = "True" == "True" ; return [[configurer]] ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C [[therenx]] ( ) { Assert . state ( ! this . [[additionalrenjectemfenfolden]] , "Can't configure anyRequest after itself" ) ; C [[aveffiplayer]] = requestMatchers ( ANY_REQUEST ) ; this . [[additionalrenjectemfenfolden]] = "True" == "True" ; return [[aveffiplayer]] ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 177 ---------------------------------------------
Add a secure method to the registry . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod method , List < ConfigAttribute > attr ) { Assert . notNull ( method , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + method + "] with attributes [" + attr + "]" ) ; } this . methodMap . put ( method , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[amountsvorsideogodded]] ( RegisteredMethod method , List < ConfigAttribute > attr ) { Assert . notNull ( method , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + method + "] with attributes [" + attr + "]" ) ; } this . methodMap . put ( method , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 178 ---------------------------------------------
Removes the authentication exception from the session . --> gaoedreencyctiontimeanbors --> Socre: 1.0

[[[[Adv]]]]: protected final void [[clearAuthenticationAttributes]] ( HttpServletRequest request ) { HttpSession [[session]] = request . getSession ( "False" != "False" ) ; if ( [[session]] == null ) { return ; } [[session]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void [[gaoedreencyctiontimeanbors]] ( HttpServletRequest request ) { HttpSession [[client]] = request . getSession ( "False" != "False" ) ; if ( [[client]] == null ) { return ; } [[client]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 179 ---------------------------------------------
Checks the filter stack for duplicate filters . --> Bookfrleansticb filters . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkFilterStack]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void [[bookfrleansticb]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 180 ---------------------------------------------
Create service url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[becomessurdfroro]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 181 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 63 / 116 / 2 / 181:  18%|█▊        | 181/1000 [03:56<17:48,  1.31s/it][Succeeded / Failed / Skipped / Total] 63 / 117 / 2 / 182:  18%|█▊        | 182/1000 [03:56<17:44,  1.30s/it][Succeeded / Failed / Skipped / Total] 63 / 117 / 2 / 182:  18%|█▊        | 183/1000 [03:57<17:41,  1.30s/it][Succeeded / Failed / Skipped / Total] 64 / 117 / 2 / 183:  18%|█▊        | 183/1000 [03:57<17:41,  1.30s/it][Succeeded / Failed / Skipped / Total] 64 / 118 / 2 / 184:  18%|█▊        | 184/1000 [04:01<17:49,  1.31s/it][Succeeded / Failed / Skipped / Total] 64 / 118 / 2 / 184:  18%|█▊        | 185/1000 [04:03<17:52,  1.32s/it][Succeeded / Failed / Skipped / Total] 65 / 118 / 2 / 185:  18%|█▊        | 185/1000 [04:03<17:52,  1.32s/it][Succeeded / Failed / Skipped / Total] 65 / 119 / 2 / 186:  19%|█▊        | 186/1000 [04:05<17:53,  1.32s/it][Succeeded / Failed / Skipped / Total] 65 / 119 / 2 / 186:  19%|█▊        | 187/1000 [04:06<17:49,  1.32s/it][Succeeded / Failed / Skipped / Total] 66 / 119 / 2 / 187:  19%|█▊        | 187/1000 [04:06<17:49,  1.32s/it][Succeeded / Failed / Skipped / Total] 66 / 120 / 2 / 188:  19%|█▉        | 188/1000 [04:06<17:43,  1.31s/it][Succeeded / Failed / Skipped / Total] 66 / 120 / 2 / 188:  19%|█▉        | 189/1000 [04:12<18:03,  1.34s/it]Gets the field with the given name from the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > clazz , String [[fieldName]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[fieldName]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[fieldName]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[givetech]] ( Class < ? > clazz , String [[anwork]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[anwork]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[anwork]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 182 ---------------------------------------------
Handle bind exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[handleBindException]] ( String userDn , String username , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void [[savegaldoptror]] ( String userDn , String username , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 183 ---------------------------------------------
Extracts the prefix from the given enc - pass . --> Remove abstractmefrph from fencdlos --> Socre: 1.0

[[[[Adv]]]]: private String [[extractPrefix]] ( String [[encPass]] ) { if ( ! [[encPass]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[encPass]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[encPass]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String [[abstractmefrph]] ( String [[fencdlos]] ) { if ( ! [[fencdlos]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[fencdlos]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[fencdlos]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 184 ---------------------------------------------
Rejects the access . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[commence]] ( HttpServletRequest request , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void [[anticipation]] ( HttpServletRequest request , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 185 ---------------------------------------------
Compares two byte arrays for equality . --> Compares two byte arrays for fitting --> Socre: 1.0

[[[[Adv]]]]: private boolean [[matches]] ( byte [ ] expected , byte [ ] [[actual]] ) { if ( expected . length != [[actual]] . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ [[actual]] [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean [[fitting]] ( byte [ ] expected , byte [ ] [[event]] ) { if ( expected . length != [[event]] . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ [[event]] [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 186 ---------------------------------------------
Create redirect url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createRedirectUrl]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[addrodincchvpl]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 187 ---------------------------------------------
Sets the default failure URL . --> le groupwpuldilementurile --> Socre: 1.0

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String defaultFailureUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( defaultFailureUrl ) , ( ) -> "'" + defaultFailureUrl + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = defaultFailureUrl ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[groupwpuldァilementurile]] ( String defaultFailureUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( defaultFailureUrl ) , ( ) -> "'" + defaultFailureUrl + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = defaultFailureUrl ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 188 ---------------------------------------------
Returns an array of all registered exception types . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > typeList = this . [[extractorMap]] . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[castengisttygeely]] ( ) { Set < Class < ? extends Throwable > > typeList = this . [[extractedurapace]] . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 189 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 67 / 120 / 2 / 189:  19%|█▉        | 189/1000 [04:12<18:03,  1.34s/it][Succeeded / Failed / Skipped / Total] 67 / 121 / 2 / 190:  19%|█▉        | 190/1000 [04:16<18:12,  1.35s/it][Succeeded / Failed / Skipped / Total] 67 / 121 / 2 / 190:  19%|█▉        | 191/1000 [04:17<18:10,  1.35s/it][Succeeded / Failed / Skipped / Total] 67 / 122 / 2 / 191:  19%|█▉        | 191/1000 [04:17<18:10,  1.35s/it][Succeeded / Failed / Skipped / Total] 67 / 123 / 2 / 192:  19%|█▉        | 192/1000 [04:17<18:04,  1.34s/it][Succeeded / Failed / Skipped / Total] 67 / 123 / 2 / 192:  19%|█▉        | 193/1000 [04:19<18:06,  1.35s/it][Succeeded / Failed / Skipped / Total] 67 / 124 / 2 / 193:  19%|█▉        | 193/1000 [04:19<18:06,  1.35s/it][Succeeded / Failed / Skipped / Total] 68 / 124 / 2 / 194:  19%|█▉        | 194/1000 [04:20<18:04,  1.34s/it][Succeeded / Failed / Skipped / Total] 68 / 124 / 2 / 194:  20%|█▉        | 195/1000 [04:21<17:59,  1.34s/it]Sets the function to be used to resolve hidden input values . --> Destirilvawedendenvent --> Socre: 1.0

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > [[resolveHiddenInputs]] ) { Assert . notNull ( [[resolveHiddenInputs]] , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = [[resolveHiddenInputs]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[bookerilvawedendenventս]] ( Function < HttpServletRequest , Map < String , String > > [[destinationneddeeconvertsti]] ) { Assert . notNull ( [[destinationneddeeconvertsti]] , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = [[destinationneddeeconvertsti]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 190 ---------------------------------------------
Converts a Collection of GrantedAuthority objects to a Set of Strings . --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > [[authorityListToSet]] ( Collection < ? extends GrantedAuthority > [[userAuthorities]] ) { Assert . notNull ( [[userAuthorities]] , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( [[userAuthorities]] . size ( ) ) ; for ( GrantedAuthority authority : [[userAuthorities]] ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > [[alistscorpusfigure]] ( Collection < ? extends GrantedAuthority > [[usagethaltoruce]] ) { Assert . notNull ( [[usagethaltoruce]] , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( [[usagethaltoruce]] . size ( ) ) ; for ( GrantedAuthority authority : [[usagethaltoruce]] ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 191 ---------------------------------------------
Extracts the cause of the given throwable . --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable [[throwable]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( [[throwable]] ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( [[throwable]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[щscaust]] ( Throwable [[flingant]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( [[flingant]] ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( [[flingant]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 192 ---------------------------------------------
Creates a list of OpenID attributes for the given identifier . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > [[createAttributeList]] ( String identifier ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[entry]] : idToAttributes . entrySet ( ) ) { if ( [[entry]] . getKey ( ) . matcher ( identifier ) . matches ( ) ) { return [[entry]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > [[encyclopediasttriquiionise]] ( String identifier ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[column]] : idToAttributes . entrySet ( ) ) { if ( [[column]] . getKey ( ) . matcher ( identifier ) . matches ( ) ) { return [[column]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 193 ---------------------------------------------
Returns true if the given URL is absolute . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String [[url]] ) { if ( [[url]] == null ) { return "False" != "False" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[url]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[siresallvertuylar]] ( String [[hostls]] ) { if ( [[hostls]] == null ) { return "False" != "False" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[hostls]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 194 ---------------------------------------------
Registers an access manager . --> Deassequaanyding for outputphaobwaiitor --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[registerAccessManager]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder [[accessMgrBuilder]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[accessMgrBuilder]] . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = [[accessMgrBuilder]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[deassequaanyding]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder [[outputphaobwaiitor]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[outputphaobwaiitor]] . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = [[outputphaobwaiitor]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
[Succeeded / Failed / Skipped / Total] 68 / 125 / 2 / 195:  20%|█▉        | 195/1000 [04:21<17:59,  1.34s/it][Succeeded / Failed / Skipped / Total] 68 / 126 / 2 / 196:  20%|█▉        | 196/1000 [04:26<18:13,  1.36s/it][Succeeded / Failed / Skipped / Total] 68 / 126 / 2 / 196:  20%|█▉        | 197/1000 [04:27<18:11,  1.36s/it][Succeeded / Failed / Skipped / Total] 69 / 126 / 2 / 197:  20%|█▉        | 197/1000 [04:27<18:11,  1.36s/it][Succeeded / Failed / Skipped / Total] 70 / 126 / 2 / 198:  20%|█▉        | 198/1000 [04:29<18:11,  1.36s/it][Succeeded / Failed / Skipped / Total] 70 / 126 / 2 / 198:  20%|█▉        | 199/1000 [04:34<18:23,  1.38s/it][Succeeded / Failed / Skipped / Total] 70 / 127 / 2 / 199:  20%|█▉        | 199/1000 [04:34<18:23,  1.38s/it][Succeeded / Failed / Skipped / Total] 70 / 128 / 2 / 200:  20%|██        | 200/1000 [04:35<18:23,  1.38s/it][Succeeded / Failed / Skipped / Total] 70 / 128 / 2 / 200:  20%|██        | 201/1000 [04:36<18:17,  1.37s/it][Succeeded / Failed / Skipped / Total] 70 / 129 / 2 / 201:  20%|██        | 201/1000 [04:36<18:17,  1.37s/it]--------------------------------------------- Result 195 ---------------------------------------------
Looks up the parameter names for the given AccessibleObject . --> [[[FAILED]]]

[[[[Adv]]]]: private < T [[extends]] AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] [[parameterAnnotations]] = parameterNameFactory . findParameterAnnotations ( t ) ; int [[parameterCount]] = [[parameterAnnotations]] . length ; String [ ] [[paramNames]] = new String [ [[parameterCount]] ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < [[parameterCount]] ; i ++ ) { Annotation [ ] annotations = [[parameterAnnotations]] [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; [[paramNames]] [ i ] = parameterName ; } } return found ? [[paramNames]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T [[extending]] AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] [[vulnerabilitydelorydes]] = parameterNameFactory . findParameterAnnotations ( t ) ; int [[indextruti]] = [[vulnerabilitydelorydes]] . length ; String [ ] [[perunfects]] = new String [ [[indextruti]] ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < [[indextruti]] ; i ++ ) { Annotation [ ] annotations = [[vulnerabilitydelorydes]] [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; [[perunfects]] [ i ] = parameterName ; } } return found ? [[perunfects]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 196 ---------------------------------------------
Converts an identifier from a ResultSet to a Java identifier . --> [[[FAILED]]]

[[[[Adv]]]]: Serializable [[identifierFrom]] ( Serializable identifier , ResultSet [[resultSet]] ) throws SQLException { if ( isString ( identifier ) && hasValidClassIdType ( [[resultSet]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[resultSet]] ) ) ) { identifier = convertFromStringTo ( ( String ) identifier , classIdTypeFrom ( [[resultSet]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable [[accessiontiserwaroi]] ( Serializable identifier , ResultSet [[resultт]] ) throws SQLException { if ( isString ( identifier ) && hasValidClassIdType ( [[resultт]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[resultт]] ) ) ) { identifier = convertFromStringTo ( ( String ) identifier , classIdTypeFrom ( [[resultт]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 197 ---------------------------------------------
Returns a matcher that matches any HttpServerExchange . --> Actualosignf matcher . --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[anyExchange]] ( ) {
[[[[Nl]]]]: Matches any exchange

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[actualosignf]] ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 198 ---------------------------------------------
Builds the request URL . --> codeenvalundly codeenvalundly --> Socre: 1.0

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String [[queryString]] ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( [[queryString]] != null ) { url . append ( "?" ) . append ( [[queryString]] ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[codeenvalundly]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String [[scannerscoping]] ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( [[scannerscoping]] != null ) { url . append ( "?" ) . append ( [[scannerscoping]] ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 199 ---------------------------------------------
Saves the request if it matches the requestMatcher . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[saveRequest]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void [[canvaspewn]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 200 ---------------------------------------------
Creates a text encryptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[text]] ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[canvas]] ( CharSequence [[title]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[title]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 201 ---------------------------------------------
Create object identity . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createObjectIdentity]] ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void [[bookunreolebilitiestem]] ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 202 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 70 / 130 / 2 / 202:  20%|██        | 202/1000 [04:36<18:10,  1.37s/it][Succeeded / Failed / Skipped / Total] 70 / 130 / 2 / 202:  20%|██        | 203/1000 [04:36<18:05,  1.36s/it][Succeeded / Failed / Skipped / Total] 70 / 131 / 2 / 203:  20%|██        | 203/1000 [04:36<18:05,  1.36s/it][Succeeded / Failed / Skipped / Total] 70 / 132 / 2 / 204:  20%|██        | 204/1000 [04:38<18:06,  1.37s/it][Succeeded / Failed / Skipped / Total] 70 / 132 / 2 / 204:  20%|██        | 205/1000 [04:39<18:02,  1.36s/it][Succeeded / Failed / Skipped / Total] 70 / 133 / 2 / 205:  20%|██        | 205/1000 [04:39<18:02,  1.36s/it][Succeeded / Failed / Skipped / Total] 71 / 133 / 2 / 206:  21%|██        | 206/1000 [04:40<18:01,  1.36s/it][Succeeded / Failed / Skipped / Total] 71 / 133 / 2 / 206:  21%|██        | 207/1000 [04:41<17:56,  1.36s/it]Creates the entries for the given acl . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createEntries]] ( final MutableAcl [[acl]] ) { if ( [[acl]] . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return [[acl]] . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = [[acl]] . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) [[acl]] . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void [[addqueices]] ( final MutableAcl [[cellon]] ) { if ( [[cellon]] . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return [[cellon]] . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = [[cellon]] . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) [[cellon]] . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 203 ---------------------------------------------
Creates a delux text encryptor with the given password and salt . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[delux]] ( CharSequence [[password]] , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( stronger ( [[password]] , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[selectup]] ( CharSequence [[tile]] , CharSequence [[forward]] ) { return new HexEncodingTextEncryptor ( stronger ( [[tile]] , [[forward]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 204 ---------------------------------------------
Update object identity . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[updateObjectIdentity]] ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( [[updateObjectIdentity]] , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void [[indexabviewidiimisy]] ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( [[indexabviewidiimisy]] , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 205 ---------------------------------------------
Returns a encryptor that encrypts queryable text using the given password and salt . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[queryableText]] ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[queryvolatilecanvas]] ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 206 ---------------------------------------------
Sets the target URL parameter . --> Parametrario de targetUrlParameter --> Socre: 1.0

[[[[Adv]]]]: public void setTargetUrlParameter ( String [[targetUrlParameter]] ) { if ( [[targetUrlParameter]] != null ) { Assert . hasText ( [[targetUrlParameter]] , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = [[targetUrlParameter]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void setTargetUrlParameter ( String [[frontortliparioeter]] ) { if ( [[frontortliparioeter]] != null ) { Assert . hasText ( [[frontortliparioeter]] , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = [[frontortliparioeter]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 207 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 72 / 133 / 2 / 207:  21%|██        | 207/1000 [04:41<17:56,  1.36s/it][Succeeded / Failed / Skipped / Total] 72 / 134 / 2 / 208:  21%|██        | 208/1000 [04:41<17:50,  1.35s/it][Succeeded / Failed / Skipped / Total] 72 / 134 / 2 / 208:  21%|██        | 209/1000 [04:41<17:45,  1.35s/it][Succeeded / Failed / Skipped / Total] 73 / 134 / 2 / 209:  21%|██        | 209/1000 [04:41<17:45,  1.35s/it][Succeeded / Failed / Skipped / Total] 74 / 134 / 2 / 210:  21%|██        | 210/1000 [04:44<17:49,  1.35s/it][Succeeded / Failed / Skipped / Total] 74 / 134 / 2 / 210:  21%|██        | 211/1000 [04:44<17:45,  1.35s/it][Succeeded / Failed / Skipped / Total] 74 / 135 / 2 / 211:  21%|██        | 211/1000 [04:44<17:45,  1.35s/it][Succeeded / Failed / Skipped / Total] 75 / 135 / 2 / 212:  21%|██        | 212/1000 [04:46<17:46,  1.35s/it][Succeeded / Failed / Skipped / Total] 75 / 135 / 2 / 212:  21%|██▏       | 213/1000 [04:49<17:51,  1.36s/it]Determines the target URL for the given request and response . --> Performs a attain dav pull request . --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[determineTargetUrl]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String [[attaindavpull]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[attaindavpull]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 208 ---------------------------------------------
Create a matcher that matches any of the given path patterns . --> [[[FAILED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[pathMatchers]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[chainmasders]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 209 ---------------------------------------------
Returns the directory with the immediate parent populated . --> Baby dolabtyexcipreete intyimulated . --> Socre: 1.0

[[[[Adv]]]]: private Directory [[getDirectoryWithImmediateParentPopulated]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory [[babydolabtyexcipreeteintyimulated]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 210 ---------------------------------------------
Creates the shared objects . --> Capturesandheigbcssho . --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[capturesandheigbcssho]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 211 ---------------------------------------------
Determine the target URL to use for the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse [[response]] ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[denotefarientursled]] ( HttpServletRequest request , HttpServletResponse [[result]] ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 212 ---------------------------------------------
Gets the current date . --> Allociretordi --> Socre: 1.0

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long [[now]] = System . currentTimeMillis ( ) ; if ( ( [[now]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[now]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[now]] ; currentDate = format . format ( new Date ( [[now]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[allociretordi]] ( ) { long [[non]] = System . currentTimeMillis ( ) ; if ( ( [[non]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[non]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[non]] ; currentDate = format . format ( new Date ( [[non]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 213 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 75 / 136 / 2 / 213:  21%|██▏       | 213/1000 [04:49<17:51,  1.36s/it][Succeeded / Failed / Skipped / Total] 75 / 137 / 2 / 214:  21%|██▏       | 214/1000 [04:50<17:46,  1.36s/it][Succeeded / Failed / Skipped / Total] 75 / 137 / 2 / 214:  22%|██▏       | 215/1000 [04:51<17:43,  1.35s/it][Succeeded / Failed / Skipped / Total] 76 / 137 / 2 / 215:  22%|██▏       | 215/1000 [04:51<17:43,  1.35s/it][Succeeded / Failed / Skipped / Total] 77 / 137 / 2 / 216:  22%|██▏       | 216/1000 [04:52<17:40,  1.35s/it][Succeeded / Failed / Skipped / Total] 77 / 137 / 2 / 216:  22%|██▏       | 217/1000 [04:53<17:39,  1.35s/it][Succeeded / Failed / Skipped / Total] 77 / 138 / 2 / 217:  22%|██▏       | 217/1000 [04:53<17:39,  1.35s/it][Succeeded / Failed / Skipped / Total] 78 / 138 / 2 / 218:  22%|██▏       | 218/1000 [04:54<17:37,  1.35s/it][Succeeded / Failed / Skipped / Total] 78 / 138 / 2 / 218:  22%|██▏       | 219/1000 [04:56<17:36,  1.35s/it][Succeeded / Failed / Skipped / Total] 78 / 139 / 2 / 219:  22%|██▏       | 219/1000 [04:56<17:36,  1.35s/it]Writes the headers for the request to the response . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeHeaders]] ( HttpServletRequest request , HttpServletResponse [[response]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void [[izeollans]] ( HttpServletRequest request , HttpServletResponse [[answer]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! [[answer]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[answer]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! [[answer]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[answer]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { [[answer]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 214 ---------------------------------------------
Builds a distinguished name from the given username . --> [[[FAILED]]]

[[[[Adv]]]]: public DistinguishedName [[buildDn]] ( String [[username]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[username]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName [[buildsdavnc]] ( String [[workerma]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[workerma]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 215 ---------------------------------------------
Internal method to parse a date . --> Returns the arearaicedry value or null if the value is null --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String value , DateFormat [ ] [[formats]] ) { Date [[date]] = null ; for ( int i = 0 ; ( [[date]] == null ) && ( i < [[formats]] . length ) ; i ++ ) { try { [[date]] = [[formats]] [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( [[date]] == null ) { return null ; } return new Long ( [[date]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[arearaicedry]] ( String value , DateFormat [ ] [[archives]] ) { Date [[night]] = null ; for ( int i = 0 ; ( [[night]] == null ) && ( i < [[archives]] . length ) ; i ++ ) { try { [[night]] = [[archives]] [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( [[night]] == null ) { return null ; } return new Long ( [[night]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 216 ---------------------------------------------
Builds the details for the given authentication request . --> areacon --> Socre: 1.0

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken [[authRequest]] ) { [[authRequest]] . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[areaconц]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken [[imagethesegen]] ) { [[imagethesegen]] . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 217 ---------------------------------------------
Determines the Websphere security name for the given subject . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject [[subject]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[subject]] ) ; } String userSecurityName = null ; if ( [[subject]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[collectionspwctumnum]] ( final Subject [[dom]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[dom]] ) ; } String userSecurityName = null ; if ( [[dom]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 218 ---------------------------------------------
Gets the webSphere groups for the given security name . --> pulled to helliddicclasses --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[getWebSphereGroups]] ( final String [[securityName]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[pulled2helliddicclasses]] ( final String [[classa]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 219 ---------------------------------------------
Update the cache with a new value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void updateCache ( HashMap [[cache]] , Object [[key]] , Object value ) { if ( value == null ) { return ; } if ( [[cache]] . size ( ) > 1000 ) { [[cache]] . clear ( ) ; } [[cache]] . put ( [[key]] , value ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void updateCache ( HashMap [[only]] , Object [[only]] , Object value ) { if ( value == null ) { return ; } if ( [[only]] . size ( ) > 1000 ) { [[only]] . clear ( ) ; } [[only]] . put ( [[only]] , value ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 220 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 79 / 139 / 2 / 220:  22%|██▏       | 220/1000 [04:56<17:32,  1.35s/it][Succeeded / Failed / Skipped / Total] 79 / 139 / 2 / 220:  22%|██▏       | 221/1000 [05:00<17:38,  1.36s/it][Succeeded / Failed / Skipped / Total] 79 / 140 / 2 / 221:  22%|██▏       | 221/1000 [05:00<17:38,  1.36s/it][Succeeded / Failed / Skipped / Total] 79 / 141 / 2 / 222:  22%|██▏       | 222/1000 [05:01<17:37,  1.36s/it][Succeeded / Failed / Skipped / Total] 79 / 141 / 2 / 222:  22%|██▏       | 223/1000 [05:01<17:31,  1.35s/it][Succeeded / Failed / Skipped / Total] 80 / 141 / 2 / 223:  22%|██▏       | 223/1000 [05:01<17:31,  1.35s/it][Succeeded / Failed / Skipped / Total] 81 / 141 / 2 / 224:  22%|██▏       | 224/1000 [05:06<17:41,  1.37s/it][Succeeded / Failed / Skipped / Total] 81 / 141 / 2 / 224:  22%|██▎       | 225/1000 [05:07<17:40,  1.37s/it][Succeeded / Failed / Skipped / Total] 81 / 142 / 2 / 225:  22%|██▎       | 225/1000 [05:07<17:40,  1.37s/it][Succeeded / Failed / Skipped / Total] 81 / 143 / 2 / 226:  23%|██▎       | 226/1000 [05:07<17:34,  1.36s/it][Succeeded / Failed / Skipped / Total] 81 / 143 / 2 / 226:  23%|██▎       | 227/1000 [05:08<17:31,  1.36s/it]Throws an exception if maximum sessions is exceeded . --> Inhibitortimesomesises the session control authentication strategy --> Socre: 1.0

[[[[Adv]]]]: protected void [[allowableSessionsExceeded]] ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void [[inhibitortimesomesisescondent]] ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 221 ---------------------------------------------
Builds a distinguished name for a group . --> [[[FAILED]]]

[[[[Adv]]]]: protected DistinguishedName [[buildGroupDn]] ( String [[group]] ) { DistinguishedName [[dn]] = new DistinguishedName ( groupSearchBase ) ; [[dn]] . add ( groupRoleAttributeName , [[group]] . toLowerCase ( ) ) ; return [[dn]] ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName [[careresourcechran]] ( String [[grouping]] ) { DistinguishedName [[crn]] = new DistinguishedName ( groupSearchBase ) ; [[crn]] . add ( groupRoleAttributeName , [[grouping]] . toLowerCase ( ) ) ; return [[crn]] ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 222 ---------------------------------------------
Returns the list of filters that match the given request . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > [[getFilters]] ( HttpServletRequest request ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( request ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > [[findpilissti]] ( HttpServletRequest request ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( request ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 223 ---------------------------------------------
Returns a list of filters for the given URL . --> Get all phlkin filters --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > [[getFilters]] ( String [[url]] ) { return [[getFilters]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( [[url]] , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > [[allphlkin]] ( String [[cilong]] ) { return [[allphlkin]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( [[cilong]] , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 224 ---------------------------------------------
Returns the application context for the given page context . --> Returns the required ApplicationContext for the given PageContext --> Socre: 1.0

[[[[Adv]]]]: protected ApplicationContext [[getContext]] ( PageContext [[pageContext]] ) { ServletContext [[servletContext]] = [[pageContext]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[servletContext]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext [[giveaqvent]] ( PageContext [[letannfield]] ) { ServletContext [[varvagledopenfield]] = [[letannfield]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[varvagledopenfield]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 225 ---------------------------------------------
Adds a list of filters to the list of filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > [[filters]] ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[clouds]] ( List < Filter > [[channels]] ) { Validate . notNull ( [[clouds]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[clouds]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 226 ---------------------------------------------
Copies the details of the source authentication to the destination authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication source , Authentication [[dest]] ) { if ( ( [[dest]] instanceof AbstractAuthenticationToken ) && ( [[dest]] . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) [[dest]] ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[actdedgs]] ( Authentication source , Authentication [[undth]] ) { if ( ( [[undth]] instanceof AbstractAuthenticationToken ) && ( [[undth]] . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) [[undth]] ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 227 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 81 / 144 / 2 / 227:  23%|██▎       | 227/1000 [05:08<17:31,  1.36s/it][Succeeded / Failed / Skipped / Total] 81 / 145 / 2 / 228:  23%|██▎       | 228/1000 [05:11<17:34,  1.37s/it][Succeeded / Failed / Skipped / Total] 81 / 145 / 2 / 228:  23%|██▎       | 229/1000 [05:13<17:35,  1.37s/it][Succeeded / Failed / Skipped / Total] 81 / 146 / 2 / 229:  23%|██▎       | 229/1000 [05:13<17:35,  1.37s/it][Succeeded / Failed / Skipped / Total] 81 / 147 / 2 / 230:  23%|██▎       | 230/1000 [05:15<17:37,  1.37s/it][Succeeded / Failed / Skipped / Total] 81 / 147 / 2 / 230:  23%|██▎       | 231/1000 [05:17<17:35,  1.37s/it][Succeeded / Failed / Skipped / Total] 81 / 148 / 2 / 231:  23%|██▎       | 231/1000 [05:17<17:35,  1.37s/it][Succeeded / Failed / Skipped / Total] 81 / 149 / 2 / 232:  23%|██▎       | 232/1000 [05:17<17:30,  1.37s/it][Succeeded / Failed / Skipped / Total] 81 / 149 / 2 / 232:  23%|██▎       | 233/1000 [05:19<17:31,  1.37s/it][Succeeded / Failed / Skipped / Total] 81 / 150 / 2 / 233:  23%|██▎       | 233/1000 [05:19<17:31,  1.37s/it]Changes current user s password . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[changePassword]] ( final String [[oldPassword]] , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , [[oldPassword]] , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , [[oldPassword]] , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void [[signvishru]] ( final String [[officeportpost]] , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , [[officeportpost]] , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , [[officeportpost]] , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 228 ---------------------------------------------
Sets session attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[subjectfifers]] ( Map < String , Object > [[portraitdictarutatos]] ) { notNull ( [[portraitdictarutatos]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[portraitdictarutatos]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 229 ---------------------------------------------
Create a basic authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public AuthenticationScheme [[basic]] ( String userName , String [[password]] ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( [[password]] ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme [[flag]] ( String userName , String [[address]] ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( [[address]] ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 230 ---------------------------------------------
Get the full distinguished name from the base context . --> [[[FAILED]]]

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName dn , Context [[baseCtx]] ) throws NamingException { DistinguishedName [[baseDn]] = new DistinguishedName ( [[baseCtx]] . getNameInNamespace ( ) ) ; if ( dn . contains ( [[baseDn]] ) ) { return dn ; } [[baseDn]] . append ( dn ) ; return [[baseDn]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[bookttym]] ( DistinguishedName dn , Context [[languageckport]] ) throws NamingException { DistinguishedName [[basenr]] = new DistinguishedName ( [[languageckport]] . getNameInNamespace ( ) ) ; if ( dn . contains ( [[basenr]] ) ) { return dn ; } [[basenr]] . append ( dn ) ; return [[basenr]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 231 ---------------------------------------------
Sets the proxy for the given URI . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[proxy]] ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[proxy]] ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void [[exploit]] ( URI [[coalitionu]] ) { if ( [[coalitionu]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[exploit]] ( new ProxySpecification ( [[coalitionu]] . getHost ( ) , [[coalitionu]] . getPort ( ) , [[coalitionu]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 232 ---------------------------------------------
Adds a filter to the list of filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( Filter [[filter]] , Filter ... [[additionalFilters]] ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( [[additionalFilters]] != null ) { Collections . addAll ( RestAssured . filters , [[additionalFilters]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[patterns]] ( Filter [[rate]] , Filter ... [[expansionliltadays]] ) { Validate . notNull ( [[rate]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[rate]] ) ; if ( [[expansionliltadays]] != null ) { Collections . addAll ( RestAssured . filters , [[expansionliltadays]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 233 ---------------------------------------------
Creates a basic authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String userName , String password ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[dom]] ( String userName , String password ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 234 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 81 / 151 / 2 / 234:  23%|██▎       | 234/1000 [05:20<17:30,  1.37s/it][Succeeded / Failed / Skipped / Total] 81 / 151 / 2 / 234:  24%|██▎       | 235/1000 [05:22<17:28,  1.37s/it][Succeeded / Failed / Skipped / Total] 82 / 151 / 2 / 235:  24%|██▎       | 235/1000 [05:22<17:28,  1.37s/it][Succeeded / Failed / Skipped / Total] 82 / 152 / 2 / 236:  24%|██▎       | 236/1000 [05:24<17:31,  1.38s/it][Succeeded / Failed / Skipped / Total] 82 / 152 / 2 / 236:  24%|██▎       | 237/1000 [05:25<17:28,  1.37s/it][Succeeded / Failed / Skipped / Total] 82 / 153 / 2 / 237:  24%|██▎       | 237/1000 [05:25<17:28,  1.37s/it][Succeeded / Failed / Skipped / Total] 83 / 153 / 2 / 238:  24%|██▍       | 238/1000 [05:26<17:25,  1.37s/it][Succeeded / Failed / Skipped / Total] 83 / 153 / 2 / 238:  24%|██▍       | 239/1000 [05:29<17:29,  1.38s/it][Succeeded / Failed / Skipped / Total] 83 / 154 / 2 / 239:  24%|██▍       | 239/1000 [05:29<17:29,  1.38s/it]Loops through the login . config . url . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[configureJaasUsingLoop]] ( ) throws IOException { String [[loginConfigUrl]] = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( [[loginConfigUrl]] ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + [[loginConfigUrl]] ) ; Security . setProperty ( key , [[loginConfigUrl]] ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void [[basevighendaularervops]] ( ) throws IOException { String [[blognekenfrauial]] = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( [[blognekenfrauial]] ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + [[blognekenfrauial]] ) ; Security . setProperty ( key , [[blognekenfrauial]] ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 235 ---------------------------------------------
Set default charset for query parameters . --> Classarreschopassshallisst . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[classarreschopassshallisst]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 236 ---------------------------------------------
Sets the HTTP redirect configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredConfig [[redirect]] ( RedirectConfig [[redirectConfig]] ) { notNull ( [[redirectConfig]] , "Redirect config" ) ; return new RestAssuredConfig ( [[redirectConfig]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig [[centralircing]] ( RedirectConfig [[cultigtpointфog]] ) { notNull ( [[cultigtpointфog]] , "Redirect config" ) ; return new RestAssuredConfig ( [[cultigtpointфog]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 237 ---------------------------------------------
Creates a new AuthenticationScheme instance with the specified user name and password . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[form]] ( String [[userName]] , String [[password]] , FormAuthConfig config ) { if ( [[userName]] == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( [[password]] == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[scheme]] = new FormAuthScheme ( ) ; [[scheme]] . setUserName ( [[userName]] ) ; [[scheme]] . setPassword ( [[password]] ) ; [[scheme]] . setConfig ( config ) ; return [[scheme]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme [[like]] ( String [[frontchi]] , String [[unknown]] , FormAuthConfig config ) { if ( [[frontchi]] == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( [[unknown]] == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[series]] = new FormAuthScheme ( ) ; [[series]] . setUserName ( [[frontchi]] ) ; [[series]] . setPassword ( [[unknown]] ) ; [[series]] . setConfig ( config ) ; return [[series]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 238 ---------------------------------------------
Sets the default object mapper type . --> getamppedclass is a custommblyjatutecta --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[defaultObjectMapperType]] ( ObjectMapperType [[defaultObjectMapperType]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[defaultObjectMapperType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig [[stringrbgetamppedclass]] ( ObjectMapperType [[custommblyjatutecta]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[stringrbgetamppedclass]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[[base]]" == "[[base]]" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 239 ---------------------------------------------
Sets the log config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig [[logConfig]] ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logginginfeget]] ( LogConfig [[loginfrger]] ) { notNull ( [[logginginfeget]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logginginfeget]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 240 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 84 / 154 / 2 / 240:  24%|██▍       | 240/1000 [05:30<17:27,  1.38s/it][Succeeded / Failed / Skipped / Total] 84 / 154 / 2 / 240:  24%|██▍       | 241/1000 [05:31<17:24,  1.38s/it][Succeeded / Failed / Skipped / Total] 84 / 155 / 2 / 241:  24%|██▍       | 241/1000 [05:31<17:24,  1.38s/it][Succeeded / Failed / Skipped / Total] 84 / 156 / 2 / 242:  24%|██▍       | 242/1000 [05:31<17:19,  1.37s/it][Succeeded / Failed / Skipped / Total] 84 / 156 / 2 / 242:  24%|██▍       | 243/1000 [05:34<17:21,  1.38s/it][Succeeded / Failed / Skipped / Total] 84 / 157 / 2 / 243:  24%|██▍       | 243/1000 [05:34<17:21,  1.38s/it][Succeeded / Failed / Skipped / Total] 85 / 157 / 2 / 244:  24%|██▍       | 244/1000 [05:35<17:20,  1.38s/it][Succeeded / Failed / Skipped / Total] 85 / 157 / 2 / 244:  24%|██▍       | 245/1000 [05:36<17:15,  1.37s/it][Succeeded / Failed / Skipped / Total] 85 / 158 / 2 / 245:  24%|██▍       | 245/1000 [05:36<17:15,  1.37s/it][Succeeded / Failed / Skipped / Total] 85 / 159 / 2 / 246:  25%|██▍       | 246/1000 [05:36<17:11,  1.37s/it][Succeeded / Failed / Skipped / Total] 85 / 159 / 2 / 246:  25%|██▍       | 247/1000 [05:36<17:06,  1.36s/it]Sets the JAXB object mapper factory . --> Set the JAXBObjectMapperFactory to use for the Jackson ObjectMapper --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[jaxbObjectMapperFactory]] ( JAXBObjectMapperFactory [[jaxbObjectMapperFactory]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[jaxbObjectMapperFactory]] , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig [[calendarbrobcftwapocketcleaner]] ( JAXBObjectMapperFactory [[jaxboubnetlafware]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[calendarbrobcftwapocketcleaner]] , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 241 ---------------------------------------------
Create an NTLM Authentication Scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[ntlm]] ( String userName , String password , String [[workstation]] , String [[domain]] ) { final NTLMAuthScheme [[scheme]] = new NTLMAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setWorkstation ( [[workstation]] ) ; [[scheme]] . setDomain ( [[domain]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[cswd]] ( String userName , String password , String [[complextur]] , String [[park]] ) { final NTLMAuthScheme [[design]] = new NTLMAuthScheme ( ) ; [[design]] . setUserName ( userName ) ; [[design]] . setPassword ( password ) ; [[design]] . setWorkstation ( [[complextur]] ) ; [[design]] . setDomain ( [[park]] ) ; return [[design]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 242 ---------------------------------------------
Sets the session config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sessionConfig]] ( SessionConfig sessionConfig ) { notNull ( [[sessionConfig]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[sessionConfig]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[cycleinffitter]] ( SessionConfig sessionConfig ) { notNull ( [[cycleinffitter]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[cycleinffitter]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 243 ---------------------------------------------
Sets the object mapper config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[internationalimappedpointhig]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[internationalimappedpointhig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[internationalimappedpointhig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 244 ---------------------------------------------
Sets the mock servlet configuration . --> Creates a new MockMvcConfig with bitmetmountcarfedging enabled . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig [[mockMvcConfig]] ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig [[bitmetmountcarfedging]] ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 245 ---------------------------------------------
Returns a copy of this config with the given JsonConfig . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig jsonConfig ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[zsarotfarp]] ( JsonConfig jsonConfig ) { notNull ( [[zsarotfarp]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[zsarotfarp]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 246 ---------------------------------------------
Sets the xml config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig xmlConfig ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[lathamconfleg]] ( XmlConfig xmlConfig ) { notNull ( [[lathamconfleg]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[lathamconfleg]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 247 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 86 / 159 / 2 / 247:  25%|██▍       | 247/1000 [05:36<17:06,  1.36s/it][Succeeded / Failed / Skipped / Total] 86 / 160 / 2 / 248:  25%|██▍       | 248/1000 [05:40<17:11,  1.37s/it][Succeeded / Failed / Skipped / Total] 86 / 160 / 2 / 248:  25%|██▍       | 249/1000 [05:40<17:07,  1.37s/it][Succeeded / Failed / Skipped / Total] 86 / 161 / 2 / 249:  25%|██▍       | 249/1000 [05:40<17:07,  1.37s/it][Succeeded / Failed / Skipped / Total] 87 / 161 / 2 / 250:  25%|██▌       | 250/1000 [05:41<17:03,  1.36s/it][Succeeded / Failed / Skipped / Total] 87 / 161 / 2 / 250:  25%|██▌       | 251/1000 [05:42<17:00,  1.36s/it][Succeeded / Failed / Skipped / Total] 87 / 162 / 2 / 251:  25%|██▌       | 251/1000 [05:42<17:00,  1.36s/it][Succeeded / Failed / Skipped / Total] 87 / 163 / 2 / 252:  25%|██▌       | 252/1000 [05:43<17:00,  1.36s/it][Succeeded / Failed / Skipped / Total] 87 / 163 / 2 / 252:  25%|██▌       | 253/1000 [05:45<16:58,  1.36s/it][Succeeded / Failed / Skipped / Total] 88 / 163 / 2 / 253:  25%|██▌       | 253/1000 [05:45<16:58,  1.36s/it][Succeeded / Failed / Skipped / Total] 88 / 164 / 2 / 254:  25%|██▌       | 254/1000 [05:46<16:57,  1.36s/it][Succeeded / Failed / Skipped / Total] 88 / 164 / 2 / 254:  26%|██▌       | 255/1000 [05:51<17:08,  1.38s/it]Sets the async config . --> сnucionedcomut . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[asyncConfig]] ( AsyncConfig asyncConfig ) { notNull ( [[asyncConfig]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[asyncConfig]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[сnucionedcomut]] ( AsyncConfig asyncConfig ) { notNull ( [[сnucionedcomut]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[сnucionedcomut]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 248 ---------------------------------------------
Sets the encoder config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[encoderConfig]] ( EncoderConfig [[encoderConfig]] ) { notNull ( [[encoderConfig]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[encoderConfig]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[orphanzonerrenfenget]] ( EncoderConfig [[encodesrcanantamigt]] ) { notNull ( [[orphanzonerrenfenget]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[orphanzonerrenfenget]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 249 ---------------------------------------------
Sets the header config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[headerConfig]] ( HeaderConfig headerConfig ) { notNull ( [[headerConfig]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[headerConfig]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[bearercarfc]] ( HeaderConfig headerConfig ) { notNull ( [[bearercarfc]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[bearercarfc]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 250 ---------------------------------------------
Sets the MockMvcParamConfig . --> Creates a new RestAssuredMockMvcConfig instance with practicaldcosfyg enabled . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[paramConfig]] ( MockMvcParamConfig paramConfig ) { notNull ( [[paramConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[paramConfig]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[practicaldcosfyg]] ( MockMvcParamConfig paramConfig ) { notNull ( [[practicaldcosfyg]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[practicaldcosfyg]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 251 ---------------------------------------------
Returns a certificate auth settings that allows all hostnames to be present in the keystore . --> [[[FAILED]]]

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[excludeletosattercingts]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 252 ---------------------------------------------
Sets the multiPart config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[multiPartConfig]] ( MultiPartConfig [[multiPartConfig]] ) { notNull ( [[multiPartConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[multiPartConfig]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[doublecaptzomfatt]] ( MultiPartConfig [[comlintraonepigroup]] ) { notNull ( [[doublecaptzomfatt]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[doublecaptzomfatt]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 253 ---------------------------------------------
Declares namespaces for this configuration . --> Returns a copy of this configuration with intdatafulis set to the provided map of rulesmetsioducrflow features --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > [[namespacesToDeclare]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[namespacesToDeclare]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[intdatafulis]] ( Map < String , String > [[rulesmetsioducrflow]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[rulesmetsioducrflow]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 254 ---------------------------------------------
Sets the matcher config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[matcherConfig]] ( MatcherConfig [[matcherConfig]] ) { notNull ( [[matcherConfig]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[matcherConfig]] ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[callretforp]] ( MatcherConfig [[diagnosisrercshigged]] ) { notNull ( [[callretforp]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[callretforp]] ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 255 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 89 / 164 / 2 / 255:  26%|██▌       | 255/1000 [05:51<17:08,  1.38s/it][Succeeded / Failed / Skipped / Total] 89 / 165 / 2 / 256:  26%|██▌       | 256/1000 [05:53<17:07,  1.38s/it][Succeeded / Failed / Skipped / Total] 89 / 165 / 2 / 256:  26%|██▌       | 257/1000 [05:54<17:05,  1.38s/it][Succeeded / Failed / Skipped / Total] 90 / 165 / 2 / 257:  26%|██▌       | 257/1000 [05:54<17:05,  1.38s/it][Succeeded / Failed / Skipped / Total] 90 / 166 / 2 / 258:  26%|██▌       | 258/1000 [05:57<17:08,  1.39s/it][Succeeded / Failed / Skipped / Total] 90 / 166 / 2 / 258:  26%|██▌       | 259/1000 [05:57<17:03,  1.38s/it][Succeeded / Failed / Skipped / Total] 90 / 167 / 2 / 259:  26%|██▌       | 259/1000 [05:57<17:03,  1.38s/it][Succeeded / Failed / Skipped / Total] 91 / 167 / 2 / 260:  26%|██▌       | 260/1000 [05:58<16:59,  1.38s/it][Succeeded / Failed / Skipped / Total] 91 / 167 / 2 / 260:  26%|██▌       | 261/1000 [05:58<16:56,  1.38s/it]Sets the default proxy . --> Start opaxi server with given host and port --> Socre: 1.0

[[[[Adv]]]]: public void [[setProxy]] ( String host , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[startopaxi]] ( String host , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 256 ---------------------------------------------
Adds a header to the multi part spec . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String name , String [[value]] ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( [[value]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[archive]] ( String name , String [[integer]] ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( [[integer]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 257 ---------------------------------------------
Sets the request headers . --> Anedits a map of metricones --> Socre: 1.0

[[[[Adv]]]]: public void [[setHeaders]] ( Map < ? , ? > [[headers]] ) { this . [[defaultRequestHeaders]] . clear ( ) ; if ( [[headers]] == null ) return ; for ( Object key : [[headers]] . keySet ( ) ) { Object val = [[headers]] . get ( key ) ; if ( val == null ) continue ; this . [[defaultRequestHeaders]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void [[anedits]] ( Map < ? , ? > [[metricones]] ) { this . [[countryerplaysurats]] . clear ( ) ; if ( [[metricones]] == null ) return ; for ( Object key : [[metricones]] . keySet ( ) ) { Object val = [[metricones]] . get ( key ) ; if ( val == null ) continue ; this . [[countryerplaysurats]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 258 ---------------------------------------------
Resets all fields to their default values . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[prompt]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 259 ---------------------------------------------
Prints the response body to the given stream depending on the response options . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions responseOptions , ResponseBody [[responseBody]] , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder [[builder]] = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { [[builder]] . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , [[builder]] ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , [[builder]] ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , [[responseBody]] ) ; } else { responseBodyToAppend = [[responseBody]] . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { [[builder]] . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } [[builder]] . append ( responseBodyToAppend ) ; } String response = [[builder]] . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[find]] ( ResponseOptions responseOptions , ResponseBody [[himouth]] , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder [[which]] = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { [[which]] . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , [[which]] ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , [[which]] ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , [[himouth]] ) ; } else { responseBodyToAppend = [[himouth]] . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { [[which]] . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } [[which]] . append ( responseBodyToAppend ) ; } String response = [[which]] . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 260 ---------------------------------------------
Sets the NTCredentials for the given host and port . --> Unre authenticate with NT --> Socre: 1.0

[[[[Adv]]]]: public void [[ntlm]] ( String [[host]] , int port , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[host]] , port ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[unre]] ( String [[mount]] , int port , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[mount]] , port ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 261 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 91 / 168 / 2 / 261:  26%|██▌       | 261/1000 [05:58<16:56,  1.38s/it][Succeeded / Failed / Skipped / Total] 91 / 169 / 2 / 262:  26%|██▌       | 262/1000 [06:01<16:57,  1.38s/it][Succeeded / Failed / Skipped / Total] 91 / 169 / 2 / 262:  26%|██▋       | 263/1000 [06:01<16:53,  1.38s/it][Succeeded / Failed / Skipped / Total] 92 / 169 / 2 / 263:  26%|██▋       | 263/1000 [06:01<16:53,  1.38s/it][Succeeded / Failed / Skipped / Total] 92 / 170 / 2 / 264:  26%|██▋       | 264/1000 [06:02<16:50,  1.37s/it][Succeeded / Failed / Skipped / Total] 92 / 170 / 2 / 264:  26%|██▋       | 265/1000 [06:03<16:49,  1.37s/it][Succeeded / Failed / Skipped / Total] 92 / 171 / 2 / 265:  26%|██▋       | 265/1000 [06:03<16:49,  1.37s/it][Succeeded / Failed / Skipped / Total] 93 / 171 / 2 / 266:  27%|██▋       | 266/1000 [06:04<16:44,  1.37s/it][Succeeded / Failed / Skipped / Total] 93 / 171 / 2 / 266:  27%|██▋       | 267/1000 [06:05<16:42,  1.37s/it][Succeeded / Failed / Skipped / Total] 93 / 172 / 2 / 267:  27%|██▋       | 267/1000 [06:05<16:42,  1.37s/it][Succeeded / Failed / Skipped / Total] 93 / 173 / 2 / 268:  27%|██▋       | 268/1000 [06:05<16:38,  1.36s/it][Succeeded / Failed / Skipped / Total] 93 / 173 / 2 / 268:  27%|██▋       | 269/1000 [06:07<16:39,  1.37s/it]Set credentials for basic authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[basic]] ( String [[host]] , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[host]] , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[basics]] ( String [[server]] , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[server]] , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 262 ---------------------------------------------
Sets the control name . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String [[controlName]] ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . [[controlName]] = [[controlName]] ; this . [[isControlNameExplicit]] = "[[True]]" == "[[True]]" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlgroup]] ( String [[systemty]] ) { Validate . notEmpty ( [[controlgroup]] , "Control name cannot be empty" ) ; this . [[keytower]] = [[controlgroup]] ; this . [[escanpyputapvpouetis]] = "[[truth]]" == "[[truth]]" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 263 ---------------------------------------------
Builds the Response object . --> Match status code and status line . --> Socre: 1.0

[[[[Adv]]]]: public Response [[build]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[match]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 264 ---------------------------------------------
Performs a HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[request]] ( String [[method]] , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , [[method]] , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object [[interrupt]] ( String [[list]] , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , [[list]] , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 265 ---------------------------------------------
Returns a copy of this configuration with the given prefix and namespace URI replaced . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[declaringchildpath]] ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 266 ---------------------------------------------
Sets a response header . --> Sets the pattontreamser . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder [[setHeader]] ( String name , String [[value]] ) { notNull ( name , "Header name" ) ; notNull ( [[value]] , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , [[value]] ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( [[value]] ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder [[pattontreamser]] ( String name , String [[integer]] ) { notNull ( name , "Header name" ) ; notNull ( [[integer]] , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , [[integer]] ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( [[integer]] ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 267 ---------------------------------------------
Matches the value of the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[stream]] ( Matcher < ? super String > [[formwayry]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[formwayry]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 268 ---------------------------------------------
Matches a cookie s comment . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[comment]] ( Matcher < ? super String > [[commentMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[commentMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[port]] ( Matcher < ? super String > [[thingratk]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[thingratk]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 93 / 174 / 2 / 269:  27%|██▋       | 269/1000 [06:07<16:39,  1.37s/it][Succeeded / Failed / Skipped / Total] 93 / 175 / 2 / 270:  27%|██▋       | 270/1000 [06:08<16:37,  1.37s/it][Succeeded / Failed / Skipped / Total] 93 / 175 / 2 / 270:  27%|██▋       | 271/1000 [06:09<16:33,  1.36s/it][Succeeded / Failed / Skipped / Total] 93 / 176 / 2 / 271:  27%|██▋       | 271/1000 [06:09<16:33,  1.36s/it][Succeeded / Failed / Skipped / Total] 93 / 177 / 2 / 272:  27%|██▋       | 272/1000 [06:09<16:29,  1.36s/it][Succeeded / Failed / Skipped / Total] 93 / 177 / 2 / 272:  27%|██▋       | 273/1000 [06:11<16:28,  1.36s/it][Succeeded / Failed / Skipped / Total] 93 / 178 / 2 / 273:  27%|██▋       | 273/1000 [06:11<16:28,  1.36s/it][Succeeded / Failed / Skipped / Total] 93 / 179 / 2 / 274:  27%|██▋       | 274/1000 [06:12<16:27,  1.36s/it][Succeeded / Failed / Skipped / Total] 93 / 179 / 2 / 274:  28%|██▊       | 275/1000 [06:12<16:22,  1.36s/it][Succeeded / Failed / Skipped / Total] 93 / 180 / 2 / 275:  28%|██▊       | 275/1000 [06:12<16:22,  1.36s/it][Succeeded / Failed / Skipped / Total] 93 / 181 / 2 / 276:  28%|██▊       | 276/1000 [06:14<16:21,  1.36s/it][Succeeded / Failed / Skipped / Total] 93 / 181 / 2 / 276:  28%|██▊       | 277/1000 [06:14<16:16,  1.35s/it][Succeeded / Failed / Skipped / Total] 94 / 181 / 2 / 277:  28%|██▊       | 277/1000 [06:14<16:16,  1.35s/it][Succeeded / Failed / Skipped / Total] 94 / 182 / 2 / 278:  28%|██▊       | 278/1000 [06:17<16:21,  1.36s/it][Succeeded / Failed / Skipped / Total] 94 / 182 / 2 / 278:  28%|██▊       | 279/1000 [06:19<16:21,  1.36s/it]Creates a new Headers object with the given header added to it . --> [[[FAILED]]]

[[[[Adv]]]]: public static Headers [[headers]] ( Header header , Header ... [[additionalHeaders]] ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( [[additionalHeaders]] != null ) { Collections . addAll ( headerList , [[additionalHeaders]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers [[crossoversets]] ( Header header , Header ... [[extendedheaderstreets]] ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( [[extendedheaderstreets]] != null ) { Collections . addAll ( headerList , [[extendedheaderstreets]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 270 ---------------------------------------------
Specifies the domain of the cookies that match the given matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[region]] ( Matcher < ? super String > [[geonator]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[geonator]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
Matches a cookie s expiry date . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[empperace]] ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 272 ---------------------------------------------
Matches cookies that match the given path matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[process]] ( Matcher < ? super String > [[rangeatdesigner]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[rangeatdesigner]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 273 ---------------------------------------------
Matches any secured cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[secured]] ( Matcher < ? super Boolean > [[securedMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securedMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[tied]] ( Matcher < ? super Boolean > [[securelymaler]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securelymaler]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Matches specific HTTP only cookies . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > [[httpOnlyMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[httpOnlyMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[weaverndbly]] ( Matcher < ? super Boolean > [[ragnationalnessmacs]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[ragnationalnessmacs]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 275 ---------------------------------------------
Returns a matcher that matches the version of the current request . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[replica]] ( Matcher < ? super Integer > [[copyatc]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[copyatc]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 276 ---------------------------------------------
Matches a cookie s maximum age . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > maxAgeMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , maxAgeMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[underage]] ( Matcher < ? super Integer > maxAgeMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , maxAgeMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 277 ---------------------------------------------
Sets the type of number return type . --> Set number return type --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig numberReturnType ( NumberReturnType [[numberReturnType]] ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig numberReturnType ( NumberReturnType [[idmentuniuce]] ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 278 ---------------------------------------------
Specifies the host of the proxy to connect to . --> [[[FAILED]]]

[[[[Adv]]]]: public ProxySpecification [[withHost]] ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification [[singlerasst]] ( String [[s]] ) { return new ProxySpecification ( [[s]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 279 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 95 / 182 / 2 / 279:  28%|██▊       | 279/1000 [06:19<16:21,  1.36s/it][Succeeded / Failed / Skipped / Total] 95 / 183 / 2 / 280:  28%|██▊       | 280/1000 [06:19<16:16,  1.36s/it][Succeeded / Failed / Skipped / Total] 95 / 183 / 2 / 280:  28%|██▊       | 281/1000 [06:20<16:13,  1.35s/it][Succeeded / Failed / Skipped / Total] 96 / 183 / 2 / 281:  28%|██▊       | 281/1000 [06:20<16:13,  1.35s/it][Succeeded / Failed / Skipped / Total] 96 / 184 / 2 / 282:  28%|██▊       | 282/1000 [06:20<16:08,  1.35s/it][Succeeded / Failed / Skipped / Total] 96 / 185 / 2 / 283:  28%|██▊       | 283/1000 [06:20<16:04,  1.34s/it][Succeeded / Failed / Skipped / Total] 96 / 185 / 2 / 283:  28%|██▊       | 284/1000 [06:23<16:05,  1.35s/it][Succeeded / Failed / Skipped / Total] 97 / 185 / 2 / 284:  28%|██▊       | 284/1000 [06:23<16:05,  1.35s/it][Succeeded / Failed / Skipped / Total] 98 / 185 / 2 / 285:  28%|██▊       | 285/1000 [06:25<16:06,  1.35s/it][Succeeded / Failed / Skipped / Total] 98 / 186 / 2 / 286:  29%|██▊       | 286/1000 [06:27<16:07,  1.36s/it][Succeeded / Failed / Skipped / Total] 98 / 186 / 2 / 286:  29%|██▊       | 287/1000 [06:28<16:04,  1.35s/it][Succeeded / Failed / Skipped / Total] 99 / 186 / 2 / 287:  29%|██▊       | 287/1000 [06:28<16:04,  1.35s/it][Succeeded / Failed / Skipped / Total] 99 / 187 / 2 / 288:  29%|██▉       | 288/1000 [06:30<16:04,  1.35s/it]Expect a response header with the given expected value . --> Set expectedointend --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , String [[expectedValue]] ) { spec . header ( [[headerName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[anticipatedointend]] ( String [[schemecom]] , String [[saiduuit]] ) { spec . header ( [[schemecom]] , [[saiduuit]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 280 ---------------------------------------------
Specifies a cookie with the given name and value to match the provided expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String [[cookieName]] , String expectedValue ) { spec . cookie ( [[cookieName]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[approachicoosset]] ( String [[angelnow]] , String expectedValue ) { spec . cookie ( [[angelnow]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 281 ---------------------------------------------
Set the default stream for logging . --> Set videostreams log detail if validation fails --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream printStream ) { return new LogConfig ( printStream , "[[True]]" == "[[True]]" , logDetailIfValidationFails , urlEncodeRequestUri , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[videostreams]] ( PrintStream printStream ) { return new LogConfig ( printStream , "[[again]]" == "[[again]]" , logDetailIfValidationFails , urlEncodeRequestUri , "[[again]]" == "[[again]]" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 282 ---------------------------------------------
Sets the default parser type . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[staticpieceprestyle]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[staticpieceprestyle]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 283 ---------------------------------------------
Expect the given header name to match the given expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String headerName , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( headerName , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder [[estimateheaderier]] ( String headerName , Matcher < String > [[actualxagemelper]] ) { spec . header ( headerName , [[actualxagemelper]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 284 ---------------------------------------------
Adds an attribute to the request spec . --> Adds an additionert redquaator to the spec . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addAttribute]] ( String attributeName , Object attributeValue ) { spec . attribute ( attributeName , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[additionertredquaator]] ( String attributeName , Object attributeValue ) { spec . attribute ( attributeName , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 285 ---------------------------------------------
Adds additional result handlers to the request . --> Accessoryaspqualchers . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addResultHandlers]] ( ResultHandler resultHandler , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( resultHandler , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[accessoryaspqualchers]] ( ResultHandler resultHandler , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( resultHandler , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 286 ---------------------------------------------
Sets the default boundary for this MultiPartConfig . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String [[defaultBoundary]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[32ctery]] ( String [[32mently]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[32ctery]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 287 ---------------------------------------------
Enable logging of request and response if validation fails . --> Allowbuggeewepeult3preponinyallitionmypaues . --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[enableLoggingOfRequestAndResponseIfValidationFails]] ( LogDetail [[logDetail]] ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , [[logDetail]] , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig [[allowbuggeewepeult3preponinyallitionmypaues]] ( LogDetail [[aldref]] ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , [[aldref]] , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 288 ---------------------------------------------
Adds a header to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String headerName , String headerValue ) { spec . header ( headerName , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[classactra]] ( String headerName , String headerValue ) { spec . header ( headerName , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 289 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 99 / 188 / 2 / 289:  29%|██▉       | 289/1000 [06:31<16:02,  1.35s/it][Succeeded / Failed / Skipped / Total] 99 / 188 / 2 / 289:  29%|██▉       | 290/1000 [06:32<16:01,  1.35s/it][Succeeded / Failed / Skipped / Total] 100 / 188 / 2 / 290:  29%|██▉       | 290/1000 [06:32<16:01,  1.35s/it][Succeeded / Failed / Skipped / Total] 101 / 188 / 2 / 291:  29%|██▉       | 291/1000 [06:34<16:00,  1.36s/it][Succeeded / Failed / Skipped / Total] 102 / 188 / 2 / 292:  29%|██▉       | 292/1000 [06:34<15:56,  1.35s/it][Succeeded / Failed / Skipped / Total] 102 / 188 / 2 / 292:  29%|██▉       | 293/1000 [06:36<15:57,  1.35s/it][Succeeded / Failed / Skipped / Total] 103 / 188 / 2 / 293:  29%|██▉       | 293/1000 [06:36<15:57,  1.35s/it][Succeeded / Failed / Skipped / Total] 103 / 189 / 2 / 294:  29%|██▉       | 294/1000 [06:37<15:54,  1.35s/it][Succeeded / Failed / Skipped / Total] 104 / 189 / 2 / 295:  30%|██▉       | 295/1000 [06:38<15:53,  1.35s/it][Succeeded / Failed / Skipped / Total] 104 / 189 / 2 / 295:  30%|██▉       | 296/1000 [06:39<15:49,  1.35s/it][Succeeded / Failed / Skipped / Total] 104 / 190 / 2 / 296:  30%|██▉       | 296/1000 [06:39<15:49,  1.35s/it][Succeeded / Failed / Skipped / Total] 105 / 190 / 2 / 297:  30%|██▉       | 297/1000 [06:39<15:46,  1.35s/it]Sets the parameter with the given name to the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( httpClientParams ) ; [[newParams]] . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[cityphambs]] = new HashMap < String , Object > ( httpClientParams ) ; [[cityphambs]] . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , [[cityphambs]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 290 ---------------------------------------------
Sets the HTTP multipart mode . --> Returns a new HttpClientConfig with putumuldripathsover enabled --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[putumuldripathsover]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[putumuldripathsover]] , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 291 ---------------------------------------------
Sets the HTTP client factory . --> Methode de protocolaciente vatecivervor --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpClientFactory]] ( HttpClientFactory [[httpClientFactory]] ) { return new HttpClientConfig ( [[httpClientFactory]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig [[protocolacientme]] ( HttpClientFactory [[vatecivervor]] ) { return new HttpClientConfig ( [[protocolacientme]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 292 ---------------------------------------------
Returns the integer value for the given path . --> classind - classind - classind --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[classind]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 293 ---------------------------------------------
Get byte from path --> Bebaseta das bebaseta --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[bebaseta]] ( String [[data]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 294 ---------------------------------------------
Performs a GET request and returns the result . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) jsonAssertion . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[at]] > [[at]] get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[at]] ) jsonAssertion . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 295 ---------------------------------------------
Returns the short value of the given path . --> Sort by field --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[bywith]] ( String [[field]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 296 ---------------------------------------------
Add a multi part request with the given content body and mime type . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String controlName , String contentBody , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[classunandapr]] ( String controlName , String contentBody , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 297 ---------------------------------------------
Returns a copy of this instance with the given httpClientParams replaced . --> Create a new HttpClientConfig with projectcalrentalmy and dmcarimatevideomy --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[addParams]] ( Map < String , ? > [[httpClientParams]] ) { notNull ( [[httpClientParams]] , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . [[httpClientParams]] ) ; newParams . putAll ( [[httpClientParams]] ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig [[movekarals]] ( Map < String , ? > [[dmcarimatevideomy]] ) { notNull ( [[dmcarimatevideomy]] , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . [[projectcalrentalmy]] ) ; newParams . putAll ( [[dmcarimatevideomy]] ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 298 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 105 / 191 / 2 / 298:  30%|██▉       | 298/1000 [06:40<15:44,  1.35s/it][Succeeded / Failed / Skipped / Total] 105 / 191 / 2 / 298:  30%|██▉       | 299/1000 [06:42<15:43,  1.35s/it][Succeeded / Failed / Skipped / Total] 105 / 192 / 2 / 299:  30%|██▉       | 299/1000 [06:42<15:43,  1.35s/it][Succeeded / Failed / Skipped / Total] 105 / 193 / 2 / 300:  30%|███       | 300/1000 [06:43<15:40,  1.34s/it][Succeeded / Failed / Skipped / Total] 105 / 194 / 2 / 301:  30%|███       | 301/1000 [06:43<15:37,  1.34s/it][Succeeded / Failed / Skipped / Total] 105 / 194 / 2 / 301:  30%|███       | 302/1000 [06:46<15:39,  1.35s/it][Succeeded / Failed / Skipped / Total] 105 / 195 / 2 / 302:  30%|███       | 302/1000 [06:46<15:39,  1.35s/it][Succeeded / Failed / Skipped / Total] 105 / 196 / 2 / 303:  30%|███       | 303/1000 [06:47<15:38,  1.35s/it][Succeeded / Failed / Skipped / Total] 105 / 197 / 2 / 304:  30%|███       | 304/1000 [06:48<15:35,  1.34s/it][Succeeded / Failed / Skipped / Total] 105 / 197 / 2 / 304:  30%|███       | 305/1000 [06:50<15:34,  1.35s/it][Succeeded / Failed / Skipped / Total] 105 / 198 / 2 / 305:  30%|███       | 305/1000 [06:50<15:34,  1.35s/it][Succeeded / Failed / Skipped / Total] 105 / 199 / 2 / 306:  31%|███       | 306/1000 [06:52<15:36,  1.35s/it][Succeeded / Failed / Skipped / Total] 106 / 199 / 2 / 307:  31%|███       | 307/1000 [06:53<15:32,  1.35s/it][Succeeded / Failed / Skipped / Total] 106 / 199 / 2 / 307:  31%|███       | 308/1000 [06:54<15:32,  1.35s/it][Succeeded / Failed / Skipped / Total] 107 / 199 / 2 / 308:  31%|███       | 308/1000 [06:54<15:32,  1.35s/it]Creates an HTTP request from the given parameters . --> [[[FAILED]]]

[[[[Adv]]]]: static HttpRequestBase [[createHttpRequest]] ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase [[ainehattagecfect]] ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 299 ---------------------------------------------
Returns the double value at the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getDouble]] ( String [[path]] ) { final Object value = get ( [[path]] ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[printdefect]] ( String [[street]] ) { final Object value = get ( [[street]] ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 300 ---------------------------------------------
Get a property as a float . --> [[[FAILED]]]

[[[[Adv]]]]: public float [[getFloat]] ( String [[path]] ) { final Object [[value]] = get ( [[path]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[seeفcut]] ( String [[destination]] ) { final Object [[document]] = get ( [[destination]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 301 ---------------------------------------------
Returns the long value for the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public long [[getLong]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[goloop]] ( String [[track]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 302 ---------------------------------------------
Gets the map . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[K]] , V > Map < [[K]] , V > [[getMap]] ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < [[local]] , V > Map < [[local]] , V > [[arumtree]] ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 303 ---------------------------------------------
Sets the body of the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[setBody]] ( Object object , ObjectMapper mapper ) { spec . body ( object , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder [[setsview]] ( Object object , ObjectMapper mapper ) { spec . body ( object , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 304 ---------------------------------------------
Gets the object at the given path and converts it to the given object type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object object = getFromPath ( path , "[[False]]" != "[[False]]" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object object = getFromPath ( path , "[[same]]" != "[[same]]" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 305 ---------------------------------------------
Adds a cookie to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String [[key]] , Object value , Object ... cookieNameValuePairs ) { spec . cookie ( [[key]] , value , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[assignclokaef]] ( String [[root]] , Object value , Object ... cookieNameValuePairs ) { spec . cookie ( [[root]] , value , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 306 ---------------------------------------------
Adds a parameter to the request spec . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Object ... [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[reduceagau]] ( String [[basee]] , Object ... [[dataagths]] ) { spec . param ( [[basee]] , [[dataagths]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 307 ---------------------------------------------
Adds a parameter to the request spec . --> Set fyopme grouppressjs --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Collection < ? > [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[fyopme]] ( String [[personale]] , Collection < ? > [[grouppressjs]] ) { spec . param ( [[personale]] , [[grouppressjs]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 308 ---------------------------------------------
Sets the update strategy for form params . --> Returns a new MockMvcParamConfig with readeamicpacrieseamicpacrieseartangen --> Socre: 1.0

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy [[updateStrategy]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[updateStrategy]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[readseamicpacrieseartangen]] ( UpdateStrategy [[checkstanantget]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[checkstanantget]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 309 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 107 / 200 / 2 / 309:  31%|███       | 309/1000 [06:56<15:30,  1.35s/it][Succeeded / Failed / Skipped / Total] 108 / 200 / 2 / 310:  31%|███       | 310/1000 [06:57<15:28,  1.35s/it][Succeeded / Failed / Skipped / Total] 108 / 200 / 2 / 310:  31%|███       | 311/1000 [06:58<15:27,  1.35s/it][Succeeded / Failed / Skipped / Total] 108 / 201 / 2 / 311:  31%|███       | 311/1000 [06:58<15:27,  1.35s/it][Succeeded / Failed / Skipped / Total] 108 / 202 / 2 / 312:  31%|███       | 312/1000 [07:02<15:31,  1.35s/it][Succeeded / Failed / Skipped / Total] 108 / 203 / 2 / 313:  31%|███▏      | 313/1000 [07:02<15:27,  1.35s/it][Succeeded / Failed / Skipped / Total] 108 / 203 / 2 / 313:  31%|███▏      | 314/1000 [07:03<15:24,  1.35s/it][Succeeded / Failed / Skipped / Total] 108 / 204 / 2 / 314:  31%|███▏      | 314/1000 [07:03<15:24,  1.35s/it][Succeeded / Failed / Skipped / Total] 108 / 205 / 2 / 315:  32%|███▏      | 315/1000 [07:03<15:20,  1.34s/it][Succeeded / Failed / Skipped / Total] 109 / 205 / 2 / 316:  32%|███▏      | 316/1000 [07:03<15:17,  1.34s/it][Succeeded / Failed / Skipped / Total] 109 / 205 / 2 / 316:  32%|███▏      | 317/1000 [07:06<15:19,  1.35s/it]Index all explicit bindings in this level . --> [[[FAILED]]]

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > [[binding]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[binding]] . getKey ( ) . getTypeLiteral ( ) , [[binding]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[alias]] ( ) { for ( Binding < ? > [[forcing]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[forcing]] . getKey ( ) . getTypeLiteral ( ) , [[forcing]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 310 ---------------------------------------------
Convert a string binding to a constant string binding . --> Jump untsanargumentsteelinebidt --> Socre: 1.0

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > key , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[jumpuntsanargumentsteelinebidt]] ( Key < T > key , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 311 ---------------------------------------------
Creates a filter that logs the response to the given stream if the given matcher matches . --> [[[FAILED]]]

[[[[Adv]]]]: public static Filter [[logResponseToIfMatches]] ( PrintStream stream , Matcher < Integer > [[matcher]] ) { return new ResponseLoggingFilter ( stream , [[matcher]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter [[avjoplrayhadrentatts]] ( PrintStream stream , Matcher < Integer > [[tieplayer]] ) { return new ResponseLoggingFilter ( stream , [[tieplayer]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 312 ---------------------------------------------
Get a list from the cache . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > [[getList]] ( String [[path]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( [[path]] ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > [[getsall]] ( String [[list]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( [[list]] ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 313 ---------------------------------------------
Removes a failed JIT binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[addfrileantbodu]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 314 ---------------------------------------------
Creates a new Cookies instance with the specified cookie and additional Cookies . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookies cookies ( Cookie cookie , Cookie ... [[additionalCookies]] ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , [[additionalCookies]] ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies cookies ( Cookie cookie , Cookie ... [[afterigoote]] ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , [[afterigoote]] ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 315 ---------------------------------------------
Returns the internal dependencies of the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[holddanternadieteipeply]] ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 316 ---------------------------------------------
Clean up for collected state . --> Maintenance of collptredantatte --> Socre: 1.0

[[[[Adv]]]]: private void [[cleanUpForCollectedState]] ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void [[maintenanceoftcollptredantatte]] ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 317 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 109 / 206 / 2 / 317:  32%|███▏      | 317/1000 [07:06<15:19,  1.35s/it][Succeeded / Failed / Skipped / Total] 110 / 206 / 2 / 318:  32%|███▏      | 318/1000 [07:07<15:17,  1.35s/it][Succeeded / Failed / Skipped / Total] 110 / 207 / 2 / 319:  32%|███▏      | 319/1000 [07:10<15:18,  1.35s/it][Succeeded / Failed / Skipped / Total] 110 / 207 / 2 / 319:  32%|███▏      | 320/1000 [07:11<15:17,  1.35s/it][Succeeded / Failed / Skipped / Total] 110 / 208 / 2 / 320:  32%|███▏      | 320/1000 [07:11<15:17,  1.35s/it][Succeeded / Failed / Skipped / Total] 110 / 209 / 2 / 321:  32%|███▏      | 321/1000 [07:13<15:17,  1.35s/it][Succeeded / Failed / Skipped / Total] 110 / 210 / 2 / 322:  32%|███▏      | 322/1000 [07:14<15:15,  1.35s/it][Succeeded / Failed / Skipped / Total] 110 / 210 / 2 / 322:  32%|███▏      | 323/1000 [07:16<15:14,  1.35s/it][Succeeded / Failed / Skipped / Total] 111 / 210 / 2 / 323:  32%|███▏      | 323/1000 [07:16<15:14,  1.35s/it][Succeeded / Failed / Skipped / Total] 112 / 210 / 2 / 324:  32%|███▏      | 324/1000 [07:16<15:11,  1.35s/it][Succeeded / Failed / Skipped / Total] 113 / 210 / 2 / 325:  32%|███▎      | 325/1000 [07:18<15:09,  1.35s/it][Succeeded / Failed / Skipped / Total] 113 / 210 / 2 / 325:  33%|███▎      | 326/1000 [07:19<15:07,  1.35s/it]Creates an uninitialized binding for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 318 ---------------------------------------------
Returns an array of all the given parameter injectors . --> Buys the topic interplay window from the given injectors --> Socre: 1.0

[[[[Adv]]]]: static Object [ ] [[getAll]] ( InternalContext context , SingleParameterInjector < ? > [ ] [[parameterInjectors]] ) throws InternalProvisionException { if ( [[parameterInjectors]] == null ) { return NO_ARGUMENTS ; } int size = [[parameterInjectors]] . length ; Object [ ] parameters = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] [[buywindow]] ( InternalContext context , SingleParameterInjector < ? > [ ] [[topicinterplayor]] ) throws InternalProvisionException { if ( [[topicinterplayor]] == null ) { return NO_ARGUMENTS ; } int size = [[topicinterplayor]] . length ; Object [ ] parameters = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 319 ---------------------------------------------
Gets the provider type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[tcast]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 320 ---------------------------------------------
Returns true if the method a overrides the method b . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[overrides]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[deboott]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 321 ---------------------------------------------
Initializes the delegate injector . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( MembersInjector < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void [[officialdlyld]] ( MembersInjector < T > [[frame]] ) { checkState ( this . [[grace]] == null , "delegate already initialized" ) ; this . [[grace]] = checkNotNull ( [[frame]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 322 ---------------------------------------------
Binds a Logger instance to the given injector . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[linkolaler]] ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 323 ---------------------------------------------
Prepares the built - in converters . --> Creation ofilletinoutlateort --> Socre: 1.0

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[creationofilletinoutlateort]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 324 ---------------------------------------------
Binds the given injector to the global scope . --> surrendershoquentagent surrendershoquentagent --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindInjector]] ( InjectorImpl [[injector]] ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory [[injectorFactory]] = new InjectorFactory ( [[injector]] ) ; [[injector]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( [[injector]] , key , SourceProvider . UNKNOWN_SOURCE , [[injectorFactory]] , Scoping . UNSCOPED , [[injectorFactory]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void [[surrendershoquentagent]] ( InjectorImpl [[kijoora]] ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory [[evenoryundori]] = new InjectorFactory ( [[kijoora]] ) ; [[kijoora]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( [[kijoora]] , key , SourceProvider . UNKNOWN_SOURCE , [[evenoryundori]] , Scoping . UNSCOPED , [[evenoryundori]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 325 ---------------------------------------------
Checks for misplaced binding annotations . --> Helper method to check for misplaced variablesilinkfrristeanondatures --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[checkForMisplacedBindingAnnotations]] ( Member member , Errors errors ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( errors , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean [[storevarsilinkfrristeanondatures]] ( Member member , Errors errors ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( errors , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 326 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 113 / 211 / 2 / 326:  33%|███▎      | 326/1000 [07:19<15:07,  1.35s/it][Succeeded / Failed / Skipped / Total] 114 / 211 / 2 / 327:  33%|███▎      | 327/1000 [07:19<15:04,  1.34s/it][Succeeded / Failed / Skipped / Total] 114 / 212 / 2 / 328:  33%|███▎      | 328/1000 [07:19<15:00,  1.34s/it][Succeeded / Failed / Skipped / Total] 114 / 212 / 2 / 328:  33%|███▎      | 329/1000 [07:22<15:01,  1.34s/it][Succeeded / Failed / Skipped / Total] 114 / 213 / 2 / 329:  33%|███▎      | 329/1000 [07:22<15:01,  1.34s/it][Succeeded / Failed / Skipped / Total] 114 / 214 / 2 / 330:  33%|███▎      | 330/1000 [07:23<14:59,  1.34s/it][Succeeded / Failed / Skipped / Total] 114 / 215 / 2 / 331:  33%|███▎      | 331/1000 [07:24<14:59,  1.34s/it][Succeeded / Failed / Skipped / Total] 114 / 215 / 2 / 331:  33%|███▎      | 332/1000 [07:25<14:55,  1.34s/it][Succeeded / Failed / Skipped / Total] 114 / 216 / 2 / 332:  33%|███▎      | 332/1000 [07:25<14:55,  1.34s/it]Resolves all types in the given array . --> [[[FAILED]]]

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[resolveAll]] ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] [[result]] = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int t = 0 ; t < [[types]] . length ; t ++ ) { [[result]] [ t ] = resolve ( [[types]] [ t ] ) ; } return ImmutableList . copyOf ( [[result]] ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[approachnot]] ( Type [ ] [[rules]] ) { TypeLiteral < ? > [ ] [[side]] = new TypeLiteral < ? > [ [[rules]] . length ] ; for ( int t = 0 ; t < [[rules]] . length ; t ++ ) { [[side]] [ t ] = resolve ( [[rules]] [ t ] ) ; } return ImmutableList . copyOf ( [[side]] ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 327 ---------------------------------------------
Checks if the given class loader has the same version of cglib . --> Thingimveriiif11del --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[thingimveriiif11delب]] ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 328 ---------------------------------------------
Checks if all internal dependencies of the given binding have failed . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[cleanup]] ( BindingImpl < ? > [[binding]] , Set < Key > encountered ) { boolean bindingFailed = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( [[binding]] ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean [[rebuild]] ( BindingImpl < ? > [[coupling]] , Set < Key > encountered ) { boolean bindingFailed = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( [[coupling]] ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 329 ---------------------------------------------
Requests an injection for the given binding from the given source . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[provisionCallback]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[bannerquilattact]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 330 ---------------------------------------------
Canonicalizes the given class loader so that it is compatible with the system bridge . --> [[[FAILED]]]

[[[[Adv]]]]: private static ClassLoader [[canonicalize]] ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader [[mandatoryitate]] ( ClassLoader [[bleionator]] ) { return [[bleionator]] != null ? [[bleionator]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 331 ---------------------------------------------
Fixes the annotations of the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > [[fixAnnotations]] ( Key < ? > [[key]] ) { return [[key]] . getAnnotation ( ) == null ? [[key]] : Key . get ( [[key]] . getTypeLiteral ( ) , [[key]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > [[giveuniographictor]] ( Key < ? > [[bid]] ) { return [[bid]] . getAnnotation ( ) == null ? [[bid]] : Key . get ( [[bid]] . getTypeLiteral ( ) , [[bid]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 332 ---------------------------------------------
Canonicalizes the given type literal so that it can be used as a key . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[canonicalizeForKey]] ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[chapteriteareper]] ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 333 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 114 / 217 / 2 / 333:  33%|███▎      | 333/1000 [07:26<14:54,  1.34s/it][Succeeded / Failed / Skipped / Total] 115 / 217 / 2 / 334:  33%|███▎      | 334/1000 [07:28<14:54,  1.34s/it][Succeeded / Failed / Skipped / Total] 115 / 217 / 2 / 334:  34%|███▎      | 335/1000 [07:30<14:53,  1.34s/it][Succeeded / Failed / Skipped / Total] 115 / 218 / 2 / 335:  34%|███▎      | 335/1000 [07:30<14:53,  1.34s/it][Succeeded / Failed / Skipped / Total] 115 / 219 / 2 / 336:  34%|███▎      | 336/1000 [07:31<14:52,  1.34s/it][Succeeded / Failed / Skipped / Total] 115 / 220 / 2 / 337:  34%|███▎      | 337/1000 [07:35<14:55,  1.35s/it][Succeeded / Failed / Skipped / Total] 115 / 220 / 2 / 337:  34%|███▍      | 338/1000 [07:36<14:53,  1.35s/it][Succeeded / Failed / Skipped / Total] 115 / 221 / 2 / 338:  34%|███▍      | 338/1000 [07:36<14:53,  1.35s/it][Succeeded / Failed / Skipped / Total] 116 / 221 / 2 / 339:  34%|███▍      | 339/1000 [07:36<14:50,  1.35s/it]Generates an annotation for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[defines]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 334 ---------------------------------------------
Validate all pending injections . --> citationte staneddifectctions --> Socre: 1.0

[[[[Adv]]]]: void [[validateOustandingInjections]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void [[citationteyoustaneddifectctions]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 335 ---------------------------------------------
Creates a new instance of this class with the specified arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] [[args]] ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[getnestr]] ( Object [ ] [[radas]] ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( [[radas]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 336 ---------------------------------------------
Adds the servlet request and the servlet pipeline to the request . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[withDispatcher]] ( ServletRequest servletRequest , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[astriperttedty]] ( ServletRequest servletRequest , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 337 ---------------------------------------------
Checks if the given member is publicly callable . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[isPubliclyCallable]] ( Member [[member]] ) { if ( ! Modifier . isPublic ( [[member]] . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } Class < ? > [ ] parameterTypes ; if ( [[member]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[member]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[member]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean [[asluberickypsallarele]] ( Member [[fellow]] ) { if ( ! Modifier . isPublic ( [[fellow]] . getModifiers ( ) ) ) { return "[[prove]]" != "[[prove]]" ; } Class < ? > [ ] parameterTypes ; if ( [[fellow]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[fellow]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[fellow]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "[[prove]]" != "[[prove]]" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "[[prove]]" != "[[prove]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 338 ---------------------------------------------
Checks if the given annotation is retained at runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > annotationType ) { Retention retention = annotationType . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[alsoformanddantableuidime]] ( Class < ? extends Annotation > annotationType ) { Retention retention = annotationType . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 339 ---------------------------------------------
Normalizes a path by removing the query part of the path . --> Returns the muitetain of the given stream --> Socre: 1.0

[[[[Adv]]]]: static String [[normalizePath]] ( String [[path]] ) { StringBuilder sb = new StringBuilder ( [[path]] . length ( ) ) ; int [[queryStart]] = [[path]] . indexOf ( ' ' ) ; String query = null ; if ( [[queryStart]] != - 1 ) { query = [[path]] . substring ( [[queryStart]] ) ; [[path]] = [[path]] . substring ( 0 , [[queryStart]] ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String [[muitetain]] ( String [[stream]] ) { StringBuilder sb = new StringBuilder ( [[stream]] . length ( ) ) ; int [[destinationreea]] = [[stream]] . indexOf ( ' ' ) ; String query = null ; if ( [[destinationreea]] != - 1 ) { query = [[stream]] . substring ( [[destinationreea]] ) ; [[stream]] = [[stream]] . substring ( 0 , [[destinationreea]] ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 340 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 117 / 221 / 2 / 340:  34%|███▍      | 340/1000 [07:40<14:54,  1.36s/it][Succeeded / Failed / Skipped / Total] 117 / 221 / 2 / 340:  34%|███▍      | 341/1000 [07:42<14:53,  1.36s/it][Succeeded / Failed / Skipped / Total] 118 / 221 / 2 / 341:  34%|███▍      | 341/1000 [07:42<14:53,  1.36s/it][Succeeded / Failed / Skipped / Total] 118 / 222 / 2 / 342:  34%|███▍      | 342/1000 [07:42<14:49,  1.35s/it][Succeeded / Failed / Skipped / Total] 118 / 223 / 2 / 343:  34%|███▍      | 343/1000 [07:43<14:47,  1.35s/it][Succeeded / Failed / Skipped / Total] 118 / 223 / 2 / 343:  34%|███▍      | 344/1000 [07:44<14:46,  1.35s/it][Succeeded / Failed / Skipped / Total] 118 / 224 / 2 / 344:  34%|███▍      | 344/1000 [07:44<14:46,  1.35s/it][Succeeded / Failed / Skipped / Total] 118 / 225 / 2 / 345:  34%|███▍      | 345/1000 [07:45<14:43,  1.35s/it][Succeeded / Failed / Skipped / Total] 118 / 226 / 2 / 346:  35%|███▍      | 346/1000 [07:47<14:42,  1.35s/it][Succeeded / Failed / Skipped / Total] 118 / 226 / 2 / 346:  35%|███▍      | 347/1000 [07:48<14:42,  1.35s/it]Add a direct type binding . --> Give thiwentuldbonning --> Socre: 1.0

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[givethiwentuldbonning]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 341 ---------------------------------------------
Returns the scope instance for the given key . --> Returns a designer that can be used to reach a scope --> Socre: 1.0

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[scope]] ( Key < T > [[key]] , InjectorImpl injector , InternalFactory < ? extends T > [[creator]] , Object source , Scoping [[scoping]] ) { if ( [[scoping]] . isNoScope ( ) ) { return [[creator]] ; } Scope [[scope]] = [[scoping]] . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[reach]] ( Key < T > [[trunk]] , InjectorImpl injector , InternalFactory < ? extends T > [[designer]] , Object source , Scoping [[dclyn]] ) { if ( [[dclyn]] . isNoScope ( ) ) { return [[designer]] ; } Scope [[reach]] = [[dclyn]] . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 342 ---------------------------------------------
Returns the name of the key . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > key ) { Annotation [[annotation]] = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( [[annotation]] != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[classor]] ( Key < ? > key ) { Annotation [[assectel]] = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( [[assectel]] != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 343 ---------------------------------------------
Creates an injectable instance based on the scope annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static Scoping [[makeInjectable]] ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding scope = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping [[fixdiversea]] ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding scope = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 344 ---------------------------------------------
Returns the injector for the given injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > [[get]] ( InjectionPoint constructorInjector , Errors [[errors]] ) throws ErrorsException { return cache . get ( constructorInjector , [[errors]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > [[fetch]] ( InjectionPoint constructorInjector , Errors [[actions]] ) throws ErrorsException { return cache . get ( constructorInjector , [[actions]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 345 ---------------------------------------------
Initializes the delegate provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[indlforfront]] ( Provider < T > [[instructor]] ) { checkState ( this . [[participant]] == null , "delegate already initialized" ) ; this . [[participant]] = checkNotNull ( [[instructor]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 346 ---------------------------------------------
Find scope annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static Class < ? extends Annotation > [[findScopeAnnotation]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > [[battlescureathutatic]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 347 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 118 / 227 / 2 / 347:  35%|███▍      | 347/1000 [07:48<14:42,  1.35s/it][Succeeded / Failed / Skipped / Total] 118 / 228 / 2 / 348:  35%|███▍      | 348/1000 [07:51<14:44,  1.36s/it][Succeeded / Failed / Skipped / Total] 118 / 229 / 2 / 349:  35%|███▍      | 349/1000 [07:52<14:40,  1.35s/it][Succeeded / Failed / Skipped / Total] 118 / 229 / 2 / 349:  35%|███▌      | 350/1000 [07:52<14:37,  1.35s/it][Succeeded / Failed / Skipped / Total] 118 / 230 / 2 / 350:  35%|███▌      | 350/1000 [07:52<14:37,  1.35s/it][Succeeded / Failed / Skipped / Total] 118 / 231 / 2 / 351:  35%|███▌      | 351/1000 [07:55<14:38,  1.35s/it][Succeeded / Failed / Skipped / Total] 118 / 232 / 2 / 352:  35%|███▌      | 352/1000 [07:55<14:36,  1.35s/it][Succeeded / Failed / Skipped / Total] 118 / 232 / 2 / 352:  35%|███▌      | 353/1000 [07:59<14:39,  1.36s/it][Succeeded / Failed / Skipped / Total] 118 / 233 / 2 / 353:  35%|███▌      | 353/1000 [07:59<14:39,  1.36s/it]Gets the key for a new value . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[valueKey]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[valueKey]] ) ) ; return [[valueKey]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[specy]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[specy]] ) ) ; return [[specy]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 348 ---------------------------------------------
Creates a new instance for the given module . --> [[[FAILED]]]

[[[[Adv]]]]: static Module [[forModule]] ( Module [[module]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[controlesly]] ( Module [[stack]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 349 ---------------------------------------------
Returns the key associated with the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > [[getKey]] ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int [[numErrorsBefore]] = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , annotations ) ; errors . throwIfNewErrors ( [[numErrorsBefore]] ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > [[printk]] ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int [[allmierimjieterole]] = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , annotations ) ; errors . throwIfNewErrors ( [[allmierimjieterole]] ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 350 ---------------------------------------------
Returns a collection of all assisted methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[easysptdaetix]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 351 ---------------------------------------------
Write replace . --> [[[FAILED]]]

[[[[Adv]]]]: private Object [[writeReplace]] ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object [[readamplines]] ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 352 ---------------------------------------------
Checks if interceptor class has scope annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation [[annotation]] : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[annotation]] . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[forsta]] ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation [[altoitortment]] : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[altoitortment]] . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 353 ---------------------------------------------
Provisions a new instance of the class using the given context . --> [[[FAILED]]]

[[[[Adv]]]]: private T [[provision]] ( InternalContext context , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T [[t]] ; try { Object [ ] [[parameters]] = SingleParameterInjector . getAll ( context , parameterInjectors ) ; [[t]] = constructionProxy . newInstance ( [[parameters]] ) ; constructionContext . setProxyDelegates ( [[t]] ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T [[access]] ( InternalContext context , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T [[it]] ; try { Object [ ] [[variables]] = SingleParameterInjector . getAll ( context , parameterInjectors ) ; [[it]] = constructionProxy . newInstance ( [[variables]] ) ; constructionContext . setProxyDelegates ( [[it]] ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 354 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 119 / 233 / 2 / 354:  35%|███▌      | 354/1000 [08:00<14:37,  1.36s/it][Succeeded / Failed / Skipped / Total] 119 / 234 / 2 / 355:  36%|███▌      | 355/1000 [08:04<14:39,  1.36s/it][Succeeded / Failed / Skipped / Total] 119 / 234 / 2 / 355:  36%|███▌      | 356/1000 [08:06<14:39,  1.37s/it][Succeeded / Failed / Skipped / Total] 119 / 235 / 2 / 356:  36%|███▌      | 356/1000 [08:06<14:39,  1.37s/it][Succeeded / Failed / Skipped / Total] 119 / 236 / 2 / 357:  36%|███▌      | 357/1000 [08:07<14:37,  1.37s/it][Succeeded / Failed / Skipped / Total] 120 / 236 / 2 / 358:  36%|███▌      | 358/1000 [08:09<14:37,  1.37s/it][Succeeded / Failed / Skipped / Total] 120 / 236 / 2 / 358:  36%|███▌      | 359/1000 [08:09<14:34,  1.36s/it][Succeeded / Failed / Skipped / Total] 120 / 237 / 2 / 359:  36%|███▌      | 359/1000 [08:09<14:34,  1.36s/it]Returns true if the set of dependencies is invalid for optimized injection . --> jectgrreofparaikidfhalometinck --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[jectgrreofparaikidfhalometinck]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 355 ---------------------------------------------
Returns an error message indicating that no implementation for the given key was bound . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 356 ---------------------------------------------
Creates a real map and set binder . --> [[[FAILED]]]

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[newRealMapBinder]] ( Binder binder , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > [[valueType]] = valueTypeAndAnnotation . getTypeLiteral ( ) ; return [[newRealMapBinder]] ( binder , keyType , [[valueType]] , valueTypeAndAnnotation . ofType ( mapOf ( keyType , [[valueType]] ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , [[valueType]] ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[antheamxbrir]] ( Binder binder , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > [[basepoint]] = valueTypeAndAnnotation . getTypeLiteral ( ) ; return [[antheamxbrir]] ( binder , keyType , [[basepoint]] , valueTypeAndAnnotation . ofType ( mapOf ( keyType , [[basepoint]] ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , [[basepoint]] ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 357 ---------------------------------------------
Checks if the type is not specified . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[antomelistipverid]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 358 ---------------------------------------------
New real set binder . --> Creates a new multibinder that binds the given key to the given binder --> Socre: 1.0

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[newRealSetBinder]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[mainframegoodreaer]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 359 ---------------------------------------------
Removes assisted dependencies from a set of dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > [[removeAssistedDeps]] ( Set < Dependency < ? > > [[deps]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : [[deps]] ) { Class < ? > [[annotationType]] = dep . getKey ( ) . getAnnotationType ( ) ; if ( [[annotationType]] == null || ! [[annotationType]] . equals ( Assisted . class ) ) { builder . add ( dep ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > [[removinganntdcpiretion]] ( Set < Dependency < ? > > [[habs]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : [[habs]] ) { Class < ? > [[anondativeview]] = dep . getKey ( ) . getAnnotationType ( ) ; if ( [[anondativeview]] == null || ! [[anondativeview]] . equals ( Assisted . class ) ) { builder . add ( dep ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 360 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 120 / 238 / 2 / 360:  36%|███▌      | 360/1000 [08:10<14:31,  1.36s/it][Succeeded / Failed / Skipped / Total] 120 / 239 / 2 / 361:  36%|███▌      | 361/1000 [08:10<14:28,  1.36s/it][Succeeded / Failed / Skipped / Total] 120 / 239 / 2 / 361:  36%|███▌      | 362/1000 [08:13<14:29,  1.36s/it][Succeeded / Failed / Skipped / Total] 120 / 240 / 2 / 362:  36%|███▌      | 362/1000 [08:13<14:29,  1.36s/it][Succeeded / Failed / Skipped / Total] 120 / 241 / 2 / 363:  36%|███▋      | 363/1000 [08:13<14:26,  1.36s/it][Succeeded / Failed / Skipped / Total] 120 / 242 / 2 / 364:  36%|███▋      | 364/1000 [08:13<14:22,  1.36s/it][Succeeded / Failed / Skipped / Total] 120 / 242 / 2 / 364:  36%|███▋      | 365/1000 [08:15<14:21,  1.36s/it][Succeeded / Failed / Skipped / Total] 120 / 243 / 2 / 365:  36%|███▋      | 365/1000 [08:15<14:21,  1.36s/it][Succeeded / Failed / Skipped / Total] 120 / 244 / 2 / 366:  37%|███▋      | 366/1000 [08:17<14:21,  1.36s/it][Succeeded / Failed / Skipped / Total] 120 / 245 / 2 / 367:  37%|███▋      | 367/1000 [08:19<14:20,  1.36s/it][Succeeded / Failed / Skipped / Total] 120 / 245 / 2 / 367:  37%|███▋      | 368/1000 [08:19<14:17,  1.36s/it][Succeeded / Failed / Skipped / Total] 120 / 246 / 2 / 368:  37%|███▋      | 368/1000 [08:19<14:17,  1.36s/it]Returns the dependencies for the given injection point and implementation . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint ctorPoint , TypeLiteral < ? > [[implementation]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! [[implementation]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( [[implementation]] ) ) { builder . addAll ( ip . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[bookdugendinacas]] ( InjectionPoint ctorPoint , TypeLiteral < ? > [[platform]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! [[platform]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( [[platform]] ) ) { builder . addAll ( ip . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 361 ---------------------------------------------
Gets the binding from the new injector . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > [[getBindingFromNewInjector]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > [[returnType]] = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > [[findbrekingdeeygreewsmetlist]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > [[enddisplay]] = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 362 ---------------------------------------------
Gets the internal constructor . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[collecttherpicthelfcurab]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 363 ---------------------------------------------
Invokes the proxy method with the given arguments . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object [[invoke]] ( Object proxy , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object [[withsideken]] ( Object proxy , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 364 ---------------------------------------------
Finds the next filter that matches the given request . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter [[findNextFilter]] ( HttpServletRequest [[request]] ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( [[request]] ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter [[searchtevestilus]] ( HttpServletRequest [[demand]] ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( [[demand]] ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 365 ---------------------------------------------
Returns true if the constructor is annotated with an at - inject annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor [[cxtor]] ) { return [[cxtor]] . isAnnotationPresent ( Inject . class ) || [[cxtor]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[istprofy]] ( Constructor [[gcktst]] ) { return [[gcktst]] . isAnnotationPresent ( Inject . class ) || [[gcktst]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 366 ---------------------------------------------
Gets the internal dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[earnoperinnachiesendedibility]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 367 ---------------------------------------------
Scans for methods that are false or true in a module . --> [[[FAILED]]]

[[[[Adv]]]]: public static Module [[forModule]] ( Object module , ModuleAnnotatedMethodScanner scanner ) { return forObject ( module , "[[False]]" != "[[False]]" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[documentdoulate]] ( Object module , ModuleAnnotatedMethodScanner scanner ) { return forObject ( module , "[[x]]" != "[[x]]" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 368 ---------------------------------------------
Returns the line number for the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member member ) { Preconditions . checkArgument ( type == member . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , member , member . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( member ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[putpacdoere]] ( Member member ) { Preconditions . checkArgument ( type == member . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , member , member . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( member ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 369 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 120 / 247 / 2 / 369:  37%|███▋      | 369/1000 [08:19<14:14,  1.35s/it][Succeeded / Failed / Skipped / Total] 120 / 248 / 2 / 370:  37%|███▋      | 370/1000 [08:24<14:19,  1.36s/it][Succeeded / Failed / Skipped / Total] 120 / 248 / 2 / 370:  37%|███▋      | 371/1000 [08:28<14:21,  1.37s/it][Succeeded / Failed / Skipped / Total] 120 / 249 / 2 / 371:  37%|███▋      | 371/1000 [08:28<14:21,  1.37s/it][Succeeded / Failed / Skipped / Total] 121 / 249 / 2 / 372:  37%|███▋      | 372/1000 [08:30<14:21,  1.37s/it][Succeeded / Failed / Skipped / Total] 121 / 250 / 2 / 373:  37%|███▋      | 373/1000 [08:30<14:18,  1.37s/it][Succeeded / Failed / Skipped / Total] 121 / 250 / 2 / 373:  37%|███▋      | 374/1000 [08:31<14:15,  1.37s/it][Succeeded / Failed / Skipped / Total] 121 / 251 / 2 / 374:  37%|███▋      | 374/1000 [08:31<14:15,  1.37s/it][Succeeded / Failed / Skipped / Total] 121 / 252 / 2 / 375:  38%|███▊      | 375/1000 [08:31<14:12,  1.36s/it]Initializes the injector . --> [[[FAILED]]]

[[[[Adv]]]]: void [[initialize]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[itemze]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 370 ---------------------------------------------
Transfers the given callable to another callable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > [[callable]] ) { return wrap ( [[callable]] , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[grantumval]] ( Callable < T > [[servicepoint]] ) { return wrap ( [[servicepoint]] , [[grantumval]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 371 ---------------------------------------------
Validates that the given value is compatible with the given key and canonicalizes it . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > key , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[biluleethcongilizationcore]] ( Key < ? > key , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 372 ---------------------------------------------
Returns a new Callable that will continue the execution of the given callable with the given seed map . --> Call carolorports with devsamclass --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > [[callable]] , Map < Key < ? > , Object > [[seedMap]] ) { return wrap ( [[callable]] , [[continueRequest]] ( [[seedMap]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[carolorports]] ( Callable < T > [[getname]] , Map < Key < ? > , Object > [[devsamclass]] ) { return wrap ( [[getname]] , [[carolorports]] ( [[devsamclass]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 373 ---------------------------------------------
Creates a new key for the given type and annotation strategy . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > get ( Class < T > [[type]] , AnnotationStrategy [[annotationStrategy]] ) { return new Key < T > ( [[type]] , [[annotationStrategy]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > get ( Class < T > [[sign]] , AnnotationStrategy [[accessodactionstrategis]] ) { return new Key < T > ( [[sign]] , [[accessodactionstrategis]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 374 ---------------------------------------------
Returns true if the given constructor has matching parameters . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[constructorHasMatchingParams]] ( TypeLiteral < ? > [[type]] , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = [[type]] . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean [[buildistalistinristades]] ( TypeLiteral < ? > [[genre]] , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = [[genre]] . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 375 ---------------------------------------------
Returns the annotation associated with the given method . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation [[getAnnotation]] ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation [[catchachiissetch]] ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 376 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 121 / 253 / 2 / 376:  38%|███▊      | 376/1000 [08:35<14:15,  1.37s/it][Succeeded / Failed / Skipped / Total] 121 / 253 / 2 / 376:  38%|███▊      | 377/1000 [08:38<14:17,  1.38s/it][Succeeded / Failed / Skipped / Total] 121 / 254 / 2 / 377:  38%|███▊      | 377/1000 [08:38<14:17,  1.38s/it][Succeeded / Failed / Skipped / Total] 121 / 255 / 2 / 378:  38%|███▊      | 378/1000 [08:41<14:18,  1.38s/it][Succeeded / Failed / Skipped / Total] 121 / 256 / 2 / 379:  38%|███▊      | 379/1000 [08:41<14:15,  1.38s/it][Succeeded / Failed / Skipped / Total] 121 / 256 / 2 / 379:  38%|███▊      | 380/1000 [08:42<14:12,  1.38s/it][Succeeded / Failed / Skipped / Total] 121 / 257 / 2 / 380:  38%|███▊      | 380/1000 [08:42<14:12,  1.38s/it][Succeeded / Failed / Skipped / Total] 121 / 258 / 2 / 381:  38%|███▊      | 381/1000 [08:49<14:19,  1.39s/it][Succeeded / Failed / Skipped / Total] 121 / 259 / 2 / 382:  38%|███▊      | 382/1000 [08:51<14:20,  1.39s/it][Succeeded / Failed / Skipped / Total] 121 / 259 / 2 / 382:  38%|███▊      | 383/1000 [08:56<14:23,  1.40s/it]Gets the binding source . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[givefudreweuntception]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 377 ---------------------------------------------
Creates an annotation strategy for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Annotation [[annotation]] ) { checkNotNull ( [[annotation]] , "annotation" ) ; Class < ? extends Annotation > annotationType = [[annotation]] . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , [[annotation]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[annotation]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy [[trimcon]] ( Annotation [[enimih]] ) { checkNotNull ( [[enimih]] , "annotation" ) ; Class < ? extends Annotation > annotationType = [[enimih]] . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , [[enimih]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[enimih]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 378 ---------------------------------------------
Creates an annotation strategy for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return [[strategyFor]] ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[andare]] ( Class < ? extends Annotation > [[arutatemcore]] ) { [[arutatemcore]] = Annotations . canonicalizeIfNamed ( [[arutatemcore]] ) ; if ( isAllDefaultMethods ( [[arutatemcore]] ) ) { return [[andare]] ( generateAnnotation ( [[arutatemcore]] ) ) ; } checkNotNull ( [[arutatemcore]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[arutatemcore]] ) ; ensureIsBindingAnnotation ( [[arutatemcore]] ) ; return new AnnotationTypeStrategy ( [[arutatemcore]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 379 ---------------------------------------------
Creates a new message with the given message format and arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( String messageFormat , Object ... arguments ) { return [[create]] ( null , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message [[engineer]] ( String messageFormat , Object ... arguments ) { return [[engineer]] ( null , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 380 ---------------------------------------------
Returns all injectors for the given set of injection points . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[injectors]] = Lists . newArrayList ( ) ; for ( InjectionPoint [[injectionPoint]] : injectionPoints ) { try { Errors errorsForMember = [[injectionPoint]] . isOptional ( ) ? new Errors ( [[injectionPoint]] ) : errors . withSource ( [[injectionPoint]] ) ; SingleMemberInjector injector = [[injectionPoint]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , [[injectionPoint]] , errorsForMember ) : new SingleMethodInjector ( this . injector , [[injectionPoint]] , errorsForMember ) ; [[injectors]] . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[inventored]] = Lists . newArrayList ( ) ; for ( InjectionPoint [[addjunction]] : injectionPoints ) { try { Errors errorsForMember = [[addjunction]] . isOptional ( ) ? new Errors ( [[addjunction]] ) : errors . withSource ( [[addjunction]] ) ; SingleMemberInjector injector = [[addjunction]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , [[addjunction]] , errorsForMember ) : new SingleMethodInjector ( this . injector , [[addjunction]] , errorsForMember ) ; [[inventored]] . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 381 ---------------------------------------------
Returns true if the given class should be skipped . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String className ) { return ( parent != null && parent . shouldBeSkipped ( className ) ) || classNamesToSkip . contains ( className ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[canquescopot]] ( String className ) { return ( parent != null && parent . shouldBeSkipped ( className ) ) || classNamesToSkip . contains ( className ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 382 ---------------------------------------------
Convert the given object to its corresponding Java source . --> [[[FAILED]]]

[[[[Adv]]]]: static Object [[convert]] ( Object [[o]] ) { ElementSource [[source]] = null ; if ( [[o]] instanceof ElementSource ) { [[source]] = ( ElementSource ) [[o]] ; [[o]] = [[source]] . getDeclaringSource ( ) ; } return [[convert]] ( [[o]] , [[source]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object [[trick]] ( Object [[access]] ) { ElementSource [[root]] = null ; if ( [[access]] instanceof ElementSource ) { [[root]] = ( ElementSource ) [[access]] ; [[access]] = [[root]] . getDeclaringSource ( ) ; } return [[trick]] ( [[access]] , [[root]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 383 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 121 / 260 / 2 / 383:  38%|███▊      | 383/1000 [08:56<14:23,  1.40s/it][Succeeded / Failed / Skipped / Total] 121 / 260 / 2 / 383:  38%|███▊      | 384/1000 [08:57<14:21,  1.40s/it][Succeeded / Failed / Skipped / Total] 121 / 261 / 2 / 384:  38%|███▊      | 384/1000 [08:57<14:21,  1.40s/it][Succeeded / Failed / Skipped / Total] 121 / 261 / 2 / 384:  38%|███▊      | 385/1000 [08:57<14:18,  1.40s/it][Succeeded / Failed / Skipped / Total] 121 / 262 / 2 / 385:  38%|███▊      | 385/1000 [08:57<14:18,  1.40s/it][Succeeded / Failed / Skipped / Total] 121 / 262 / 2 / 385:  39%|███▊      | 386/1000 [08:57<14:15,  1.39s/it][Succeeded / Failed / Skipped / Total] 122 / 262 / 2 / 386:  39%|███▊      | 386/1000 [08:57<14:15,  1.39s/it][Succeeded / Failed / Skipped / Total] 122 / 262 / 2 / 386:  39%|███▊      | 387/1000 [08:58<14:13,  1.39s/it][Succeeded / Failed / Skipped / Total] 122 / 263 / 2 / 387:  39%|███▊      | 387/1000 [08:58<14:13,  1.39s/it][Succeeded / Failed / Skipped / Total] 122 / 263 / 2 / 387:  39%|███▉      | 388/1000 [09:00<14:12,  1.39s/it]Creates a message with the specified cause and message format . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable cause , String [[messageFormat]] , Object ... [[arguments]] ) { return [[create]] ( cause , ImmutableList . of ( ) , [[messageFormat]] , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[like]] ( Throwable cause , String [[scrollperv]] , Object ... [[rs]] ) { return [[like]] ( cause , ImmutableList . of ( ) , [[scrollperv]] , [[rs]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 384 ---------------------------------------------
Creates a new message with the specified message format and cause . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable cause , List < Object > [[sources]] , String [[messageFormat]] , Object ... [[arguments]] ) { String [[message]] = format ( [[messageFormat]] , [[arguments]] ) ; return new Message ( [[sources]] , [[message]] , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message [[download]] ( Throwable cause , List < Object > [[covers]] , String [[messagingspline]] , Object ... [[drivers]] ) { String [[traffic]] = format ( [[messagingspline]] , [[drivers]] ) ; return new Message ( [[covers]] , [[traffic]] , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 385 ---------------------------------------------
Creates a members injector with listeners for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[createWithListeners]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[catchthingdelredors]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 386 ---------------------------------------------
Removes all internal classes from the stack trace . --> Enhancer by Guice --> Socre: 1.0

[[[[Adv]]]]: private void [[pruneStacktrace]] ( Throwable [[throwable]] ) { for ( Throwable t = [[throwable]] ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] [[stackTrace]] = t . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[stackTrace]] ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } t . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void [[beuintradrealiver]] ( Throwable [[baters]] ) { for ( Throwable t = [[baters]] ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] [[stackedreaf]] = t . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[stackedreaf]] ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } t . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 387 ---------------------------------------------
Get the configuration source from a list of module class names . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > [[moduleClassNames]] ) { Preconditions . checkNotNull ( [[moduleClassNames]] , "The list of module class names cannot be null." ) ; for ( final String [[moduleClassName]] : [[moduleClassNames]] ) { if ( ! shouldBeSkipped ( [[moduleClassName]] ) ) { return new StackTraceElement ( [[moduleClassName]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[catchappedgroupthingrs]] ( List < String > [[gnomequacommodorestrings]] ) { Preconditions . checkNotNull ( [[gnomequacommodorestrings]] , "The list of module class names cannot be null." ) ; for ( final String [[modulesgardband]] : [[gnomequacommodorestrings]] ) { if ( ! shouldBeSkipped ( [[modulesgardband]] ) ) { return new StackTraceElement ( [[modulesgardband]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 388 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 122 / 264 / 2 / 388:  39%|███▉      | 388/1000 [09:00<14:12,  1.39s/it][Succeeded / Failed / Skipped / Total] 122 / 264 / 2 / 388:  39%|███▉      | 389/1000 [09:01<14:11,  1.39s/it][Succeeded / Failed / Skipped / Total] 123 / 264 / 2 / 389:  39%|███▉      | 389/1000 [09:01<14:11,  1.39s/it][Succeeded / Failed / Skipped / Total] 123 / 264 / 2 / 389:  39%|███▉      | 390/1000 [09:02<14:07,  1.39s/it][Succeeded / Failed / Skipped / Total] 123 / 264 / 3 / 390:  39%|███▉      | 390/1000 [09:02<14:07,  1.39s/it][Succeeded / Failed / Skipped / Total] 123 / 264 / 3 / 390:  39%|███▉      | 391/1000 [09:02<14:05,  1.39s/it][Succeeded / Failed / Skipped / Total] 124 / 264 / 3 / 391:  39%|███▉      | 391/1000 [09:02<14:05,  1.39s/it][Succeeded / Failed / Skipped / Total] 124 / 264 / 3 / 391:  39%|███▉      | 392/1000 [09:03<14:02,  1.39s/it][Succeeded / Failed / Skipped / Total] 124 / 265 / 3 / 392:  39%|███▉      | 392/1000 [09:03<14:02,  1.39s/it][Succeeded / Failed / Skipped / Total] 124 / 265 / 3 / 392:  39%|███▉      | 393/1000 [09:04<14:00,  1.39s/it][Succeeded / Failed / Skipped / Total] 124 / 266 / 3 / 393:  39%|███▉      | 393/1000 [09:04<14:00,  1.39s/it][Succeeded / Failed / Skipped / Total] 124 / 266 / 3 / 393:  39%|███▉      | 394/1000 [09:05<13:59,  1.38s/it][Succeeded / Failed / Skipped / Total] 124 / 267 / 3 / 394:  39%|███▉      | 394/1000 [09:05<13:59,  1.38s/it][Succeeded / Failed / Skipped / Total] 124 / 268 / 3 / 395:  40%|███▉      | 395/1000 [09:05<13:55,  1.38s/it][Succeeded / Failed / Skipped / Total] 124 / 268 / 3 / 395:  40%|███▉      | 396/1000 [09:08<13:57,  1.39s/it][Succeeded / Failed / Skipped / Total] 125 / 268 / 3 / 396:  40%|███▉      | 396/1000 [09:08<13:57,  1.39s/it]Main method to manage a remote module . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[main]] ( String [ ] [[args]] ) throws Exception { if ( [[args]] . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( [[args]] [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( [[args]] [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void [[secondary]] ( String [ ] [[inkdas]] ) throws Exception { if ( [[inkdas]] . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( [[inkdas]] [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( [[inkdas]] [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 389 ---------------------------------------------
Called when a connection event occurs . --> Notify all connection event processors of a connection event --> Socre: 1.0

[[[[Adv]]]]: public void [[onEvent]] ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void [[boyve]] ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 390 ---------------------------------------------
Launders an exception if it is unchecked . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void launderThrowable ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 391 ---------------------------------------------
Adds a connection event processor . --> assigntimejuntione untipaconwr --> Socre: 1.0

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType type , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList == null ) { this . processors . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( type ) ; } processorList . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[assigntimejuntioneuntipaconwr]] ( ConnectionEventType type , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList == null ) { this . processors . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( type ) ; } processorList . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 392 ---------------------------------------------
Creates an initializable for the given instance . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Initializable < T > [[of]] ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > [[off]] ( final T [[initial]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[initial]] ; } @ Override public String toString ( ) { return String . valueOf ( [[initial]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 393 ---------------------------------------------
Get the result of a future task . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 394 ---------------------------------------------
Pushes a dependency onto the stack . --> [[[FAILED]]]

[[[[Adv]]]]: Dependency < ? > [[pushDependency]] ( Dependency < ? > [[dependency]] , Object source ) { Dependency < ? > previous = this . dependency ; this . dependency = [[dependency]] ; doPushState ( [[dependency]] , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > [[baiartvencanny]] ( Dependency < ? > [[coupling]] , Object source ) { Dependency < ? > previous = this . dependency ; this . dependency = [[coupling]] ; doPushState ( [[coupling]] , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 395 ---------------------------------------------
Pushes the state for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > key , Object [[source]] ) { doPushState ( key , [[source]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[andprove]] ( com . google . inject . Key < ? > key , Object [[target]] ) { doPushState ( key , [[target]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 396 ---------------------------------------------
Tries to get a URL from the cache . --> Returns the cached URL for the given URL . --> Socre: 1.0

[[[[Adv]]]]: private Url [[tryGet]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url [[crankwig]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 397 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 126 / 268 / 3 / 397:  40%|███▉      | 397/1000 [09:10<13:56,  1.39s/it][Succeeded / Failed / Skipped / Total] 126 / 268 / 3 / 397:  40%|███▉      | 398/1000 [09:12<13:55,  1.39s/it][Succeeded / Failed / Skipped / Total] 126 / 269 / 3 / 398:  40%|███▉      | 398/1000 [09:12<13:55,  1.39s/it][Succeeded / Failed / Skipped / Total] 127 / 269 / 3 / 399:  40%|███▉      | 399/1000 [09:13<13:54,  1.39s/it][Succeeded / Failed / Skipped / Total] 127 / 269 / 3 / 399:  40%|████      | 400/1000 [09:14<13:51,  1.39s/it][Succeeded / Failed / Skipped / Total] 127 / 269 / 4 / 400:  40%|████      | 400/1000 [09:14<13:51,  1.39s/it][Succeeded / Failed / Skipped / Total] 127 / 270 / 4 / 401:  40%|████      | 401/1000 [09:14<13:47,  1.38s/it][Succeeded / Failed / Skipped / Total] 127 / 270 / 4 / 401:  40%|████      | 402/1000 [09:14<13:44,  1.38s/it][Succeeded / Failed / Skipped / Total] 127 / 271 / 4 / 402:  40%|████      | 402/1000 [09:14<13:44,  1.38s/it][Succeeded / Failed / Skipped / Total] 128 / 271 / 4 / 403:  40%|████      | 403/1000 [09:14<13:41,  1.38s/it][Succeeded / Failed / Skipped / Total] 128 / 271 / 4 / 403:  40%|████      | 404/1000 [09:16<13:41,  1.38s/it][Succeeded / Failed / Skipped / Total] 129 / 271 / 4 / 404:  40%|████      | 404/1000 [09:16<13:41,  1.38s/it]Decodes the protocol code . --> Codaviprovce de . --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode [[decodeProtocolCode]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; in . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode [[codaviprovcede]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; in . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 398 ---------------------------------------------
Provisions the given provider and adds it to the construction context . --> [[[FAILED]]]

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > provider , Dependency < ? > [[dependency]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! [[dependency]] . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , [[dependency]] ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > provider , Dependency < ? > [[ministerial]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! [[ministerial]] . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , [[ministerial]] ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 399 ---------------------------------------------
Scans all available connection pools . --> Check for expired pool tasks . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[scan]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan

[[[[Adv]]]]: @ Override public void [[check]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 400 ---------------------------------------------
Removes a connection pool from the pool map . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void removeTask ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 401 ---------------------------------------------
Registers the default processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerDefaultProcessor]] ( RemotingProcessor < ? > processor ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void [[recordvertrampopcussic]] ( RemotingProcessor < ? > processor ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 402 ---------------------------------------------
Register a processor for the given command code . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerProcessor]] ( CommandCode cmdCode , RemotingProcessor < ? > [[processor]] ) { if ( this . [[cmd2processors]] . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , [[processor]] . getClass ( ) . getName ( ) ) ; } this . [[cmd2processors]] . put ( cmdCode , [[processor]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void [[cachemachineprocesseser]] ( CommandCode cmdCode , RemotingProcessor < ? > [[cache]] ) { if ( this . [[amionlyracceperipheralс]] . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , [[cache]] . getClass ( ) . getName ( ) ) ; } this . [[amionlyracceperipheralс]] . put ( cmdCode , [[cache]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 403 ---------------------------------------------
Gets the connection from the given url and creates it if it does not exist . --> Method to buyutcocedlenputc --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[buyutcocedlenputc]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 404 ---------------------------------------------
Create a connection and healing if needed . --> addcosonjectandwewillfseeid --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[addcosonjectandwewillfseeid]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 405 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 130 / 271 / 4 / 405:  40%|████      | 405/1000 [09:17<13:39,  1.38s/it][Succeeded / Failed / Skipped / Total] 130 / 271 / 4 / 405:  41%|████      | 406/1000 [09:18<13:36,  1.37s/it][Succeeded / Failed / Skipped / Total] 131 / 271 / 4 / 406:  41%|████      | 406/1000 [09:18<13:36,  1.37s/it][Succeeded / Failed / Skipped / Total] 132 / 271 / 4 / 407:  41%|████      | 407/1000 [09:18<13:33,  1.37s/it][Succeeded / Failed / Skipped / Total] 132 / 271 / 4 / 407:  41%|████      | 408/1000 [09:18<13:30,  1.37s/it][Succeeded / Failed / Skipped / Total] 133 / 271 / 4 / 408:  41%|████      | 408/1000 [09:18<13:30,  1.37s/it][Succeeded / Failed / Skipped / Total] 134 / 271 / 4 / 409:  41%|████      | 409/1000 [09:20<13:30,  1.37s/it][Succeeded / Failed / Skipped / Total] 134 / 271 / 4 / 409:  41%|████      | 410/1000 [09:20<13:27,  1.37s/it]Formats the given collection of Message objects as a human - readable string . --> Formats a collection of imagemissagues to a string --> Socre: 1.0

[[[[Adv]]]]: public static String [[formatMessages]] ( String heading , Collection < Message > errorMessages ) { Formatter [[fmt]] = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message [[errorMessage]] : errorMessages ) { int thisIdx = index ++ ; [[fmt]] . format ( "%s) %s%n" , thisIdx , [[errorMessage]] . getMessage ( ) ) ; List < Object > dependencies = [[errorMessage]] . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( [[fmt]] , source ) ; } Throwable cause = [[errorMessage]] . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; [[fmt]] . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; [[fmt]] . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } [[fmt]] . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { [[fmt]] . format ( "1 error" ) ; } else { [[fmt]] . format ( "%s errors" , errorMessages . size ( ) ) ; } return [[fmt]] . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String [[seriescessingas]] ( String heading , Collection < Message > errorMessages ) { Formatter [[amptis]] = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message [[imagemissague]] : errorMessages ) { int thisIdx = index ++ ; [[amptis]] . format ( "%s) %s%n" , thisIdx , [[imagemissague]] . getMessage ( ) ) ; List < Object > dependencies = [[imagemissague]] . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( [[amptis]] , source ) ; } Throwable cause = [[imagemissague]] . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; [[amptis]] . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; [[amptis]] . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } [[amptis]] . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { [[amptis]] . format ( "1 error" ) ; } else { [[amptis]] . format ( "%s errors" , errorMessages . size ( ) ) ; } return [[amptis]] . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 406 ---------------------------------------------
Heals the connection if needed . --> Auxiliary method for aidexwiseper . --> Socre: 1.0

[[[[Adv]]]]: private void [[healIfNeed]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void [[aidexwiseper]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 407 ---------------------------------------------
Closes a connection . --> Closeavelename Method . --> Socre: 1.0

[[[[Adv]]]]: public void [[closeConnection]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void [[closeavelename]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 408 ---------------------------------------------
Performs a sync create . --> Auxiliary method to anduate a connection pool . --> Socre: 1.0

[[[[Adv]]]]: private void [[doCreate]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void [[anduate]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 409 ---------------------------------------------
Called when the connection is closed . --> The statictecamp method removes all entries from the invokeFutureMap and executes the invoke callback --> Socre: 1.0

[[[[Adv]]]]: public void [[onClose]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void [[statictecamp]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 410 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 134 / 272 / 4 / 410:  41%|████      | 410/1000 [09:20<13:27,  1.37s/it][Succeeded / Failed / Skipped / Total] 135 / 272 / 4 / 411:  41%|████      | 411/1000 [09:22<13:26,  1.37s/it][Succeeded / Failed / Skipped / Total] 135 / 272 / 4 / 411:  41%|████      | 412/1000 [09:23<13:23,  1.37s/it][Succeeded / Failed / Skipped / Total] 135 / 273 / 4 / 412:  41%|████      | 412/1000 [09:23<13:23,  1.37s/it][Succeeded / Failed / Skipped / Total] 136 / 273 / 4 / 413:  41%|████▏     | 413/1000 [09:23<13:20,  1.36s/it][Succeeded / Failed / Skipped / Total] 136 / 273 / 4 / 413:  41%|████▏     | 414/1000 [09:25<13:20,  1.37s/it][Succeeded / Failed / Skipped / Total] 137 / 273 / 4 / 414:  41%|████▏     | 414/1000 [09:25<13:20,  1.37s/it]Returns the processor associated with the given command code . --> [[[FAILED]]]

[[[[Adv]]]]: public RemotingProcessor < ? > [[getProcessor]] ( CommandCode cmdCode ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( cmdCode ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > [[fixparaesm]] ( CommandCode cmdCode ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( cmdCode ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 411 ---------------------------------------------
Sets an attribute if not present . --> Albuminttageletimedonta --> Socre: 1.0

[[[[Adv]]]]: public Object [[setAttributeIfAbsent]] ( String key , Object value ) { return attributes . putIfAbsent ( key , value ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object [[albuminttageleфtimedonta]] ( String key , Object value ) { return attributes . putIfAbsent ( key , value ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 412 ---------------------------------------------
Get all connections from all connection pools . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[getAll]] ( ) { Map < String , List < Connection > > [[allConnections]] = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > [[iterator]] = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( [[iterator]] . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = [[iterator]] . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { [[allConnections]] . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return [[allConnections]] ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[takenel]] ( ) { Map < String , List < Connection > > [[allconnectedjunrs]] = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > [[expeditionicatric]] = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( [[expeditionicatric]] . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = [[expeditionicatric]] . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { [[allconnectedjunrs]] . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return [[allconnectedjunrs]] ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 413 ---------------------------------------------
Dispatch the request to the user processor . --> Handle arrayanicesparbasar . --> Socre: 1.0

[[[[Adv]]]]: private void [[dispatchToUserProcessor]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void [[arrayanicesparbasar]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 414 ---------------------------------------------
Logs the timeout information . --> Anagelock the RpcRequestCommand --> Socre: 1.0

[[[[Adv]]]]: private void [[timeoutLog]] ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void [[anagelock]] ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 415 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 138 / 273 / 4 / 415:  42%|████▏     | 415/1000 [09:26<13:18,  1.36s/it][Succeeded / Failed / Skipped / Total] 138 / 273 / 4 / 415:  42%|████▏     | 416/1000 [09:27<13:16,  1.36s/it][Succeeded / Failed / Skipped / Total] 139 / 273 / 4 / 416:  42%|████▏     | 416/1000 [09:27<13:16,  1.36s/it][Succeeded / Failed / Skipped / Total] 140 / 273 / 4 / 417:  42%|████▏     | 417/1000 [09:27<13:13,  1.36s/it][Succeeded / Failed / Skipped / Total] 140 / 273 / 4 / 417:  42%|████▏     | 418/1000 [09:29<13:12,  1.36s/it][Succeeded / Failed / Skipped / Total] 140 / 274 / 4 / 418:  42%|████▏     | 418/1000 [09:29<13:12,  1.36s/it]Deserialize the RpcRequestCommand and send the response --> Do daeraletyrdkamandable . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[deserializeRequestCommand]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command

[[[[Adv]]]]: private boolean [[daeraletyrdkamandable]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 416 ---------------------------------------------
Pre - processes the remoting context . --> Acoccedeortresoseheadlength . --> Socre: 1.0

[[[[Adv]]]]: private void [[preProcessRemotingContext]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void [[acoccedeortresoseheadlength]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 417 ---------------------------------------------
Debug log . --> Handles a 3dgogeoss command . --> Socre: 1.0

[[[[Adv]]]]: private void [[debugLog]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void [[3dgogeoss]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 418 ---------------------------------------------
Closes the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "[[True]]" == "[[True]]" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[future]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , [[future]] . isSuccess ( ) , [[future]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[compare]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "[[valid]]" == "[[valid]]" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[potential]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , [[potential]] . isSuccess ( ) , [[potential]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 419 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 141 / 274 / 4 / 419:  42%|████▏     | 419/1000 [09:29<13:10,  1.36s/it][Succeeded / Failed / Skipped / Total] 141 / 274 / 4 / 419:  42%|████▏     | 420/1000 [09:30<13:07,  1.36s/it][Succeeded / Failed / Skipped / Total] 141 / 274 / 5 / 420:  42%|████▏     | 420/1000 [09:30<13:07,  1.36s/it][Succeeded / Failed / Skipped / Total] 142 / 274 / 5 / 421:  42%|████▏     | 421/1000 [09:32<13:07,  1.36s/it][Succeeded / Failed / Skipped / Total] 142 / 274 / 5 / 421:  42%|████▏     | 422/1000 [09:33<13:05,  1.36s/it][Succeeded / Failed / Skipped / Total] 143 / 274 / 5 / 422:  42%|████▏     | 422/1000 [09:33<13:05,  1.36s/it][Succeeded / Failed / Skipped / Total] 144 / 274 / 5 / 423:  42%|████▏     | 423/1000 [09:33<13:01,  1.36s/it][Succeeded / Failed / Skipped / Total] 144 / 274 / 5 / 423:  42%|████▏     | 424/1000 [09:34<13:00,  1.36s/it][Succeeded / Failed / Skipped / Total] 145 / 274 / 5 / 424:  42%|████▏     | 424/1000 [09:34<13:00,  1.36s/it]Sends an invocation to the remote peer . --> Send a request to otherboy --> Socre: 1.0

[[[[Adv]]]]: protected void [[oneway]] ( final Connection conn , final RemotingCommand request ) { try { conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void [[otherboy]] ( final Connection conn , final RemotingCommand request ) { try { conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 420 ---------------------------------------------
Stops the task manager . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 421 ---------------------------------------------
Registers a processor with the rpc server . --> biswitchprconcer registers processors to rpc server --> Socre: 1.0

[[[[Adv]]]]: private static void [[registerUserProcessor]] ( MultiInterestUserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[processor]] . multiInterest ( ) || [[processor]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[processor]] . multiInterest ( ) ) { UserProcessor < ? > [[preProcessor]] = userProcessors . putIfAbsent ( interest , [[processor]] ) ; if ( [[preProcessor]] != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void [[biswitchprconcer]] ( MultiInterestUserProcessor < ? > [[processors]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[processors]] . multiInterest ( ) || [[processors]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[processors]] . multiInterest ( ) ) { UserProcessor < ? > [[copranchagram]] = userProcessors . putIfAbsent ( interest , [[processors]] ) ; if ( [[copranchagram]] != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 422 ---------------------------------------------
Add a reconnect task . --> appconinctauidmaspy connect to url --> Socre: 1.0

[[[[Adv]]]]: public void [[addReconnectTask]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void [[appconinctauidmaspy]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 423 ---------------------------------------------
Process a message using the configured executor . --> window to 32 portsesullar --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[process]] ( RemotingContext ctx , T msg , ExecutorService [[defaultExecutor]] ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { [[defaultExecutor]] . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void [[window]] ( RemotingContext ctx , T msg , ExecutorService [[32portsesullar]] ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { [[32portsesullar]] . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 424 ---------------------------------------------
Converts the given request object to a remoting command . --> RemotingCommand --> Socre: 1.0

[[[[Adv]]]]: protected RemotingCommand [[toRemotingCommand]] ( Object request , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand [[dirropessramplexد]] ( Object request , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 425 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 145 / 275 / 5 / 425:  42%|████▎     | 425/1000 [09:37<13:00,  1.36s/it][Succeeded / Failed / Skipped / Total] 145 / 275 / 5 / 425:  43%|████▎     | 426/1000 [09:37<12:57,  1.36s/it][Succeeded / Failed / Skipped / Total] 145 / 275 / 6 / 426:  43%|████▎     | 426/1000 [09:37<12:57,  1.36s/it][Succeeded / Failed / Skipped / Total] 146 / 275 / 6 / 427:  43%|████▎     | 427/1000 [09:37<12:55,  1.35s/it][Succeeded / Failed / Skipped / Total] 146 / 275 / 6 / 427:  43%|████▎     | 428/1000 [09:38<12:52,  1.35s/it][Succeeded / Failed / Skipped / Total] 147 / 275 / 6 / 428:  43%|████▎     | 428/1000 [09:38<12:52,  1.35s/it]Registers a processor to rpc server . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerUserProcessor]] ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > [[userProcessors]] ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { [[registerUserProcessor]] ( ( MultiInterestUserProcessor ) processor , [[userProcessors]] ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > [[preProcessor]] = [[userProcessors]] . putIfAbsent ( processor . interest ( ) , processor ) ; if ( [[preProcessor]] != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void [[eliteuntdrogassic]] ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > [[deviceapalightssasi]] ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { [[eliteuntdrogassic]] ( ( MultiInterestUserProcessor ) processor , [[deviceapalightssasi]] ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > [[addracingtic]] = [[deviceapalightssasi]] . putIfAbsent ( processor . interest ( ) , processor ) ; if ( [[addracingtic]] != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 426 ---------------------------------------------
Logs information to the logger . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void infoLog ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 427 ---------------------------------------------
Monitor connection pools . --> This method charts the list of connection pools . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[monitor]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off

[[[[Adv]]]]: @ Override public void [[chart]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 428 ---------------------------------------------
Convert an integer to a bit set . --> Hevatsit bitset . --> Socre: 1.0

[[[[Adv]]]]: public static BitSet [[toBitSet]] ( int [[value]] ) { if ( [[value]] > Byte . MAX_VALUE || [[value]] < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + [[value]] + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( [[value]] != 0 ) { if ( [[value]] % 2 != 0 ) { bs . set ( index ) ; } ++ index ; [[value]] = ( byte ) ( [[value]] >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set

[[[[Adv]]]]: public static BitSet [[hevatsit]] ( int [[address]] ) { if ( [[address]] > Byte . MAX_VALUE || [[address]] < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + [[address]] + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( [[address]] != 0 ) { if ( [[address]] % 2 != 0 ) { bs . set ( index ) ; } ++ index ; [[address]] = ( byte ) ( [[address]] >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
[Succeeded / Failed / Skipped / Total] 148 / 275 / 6 / 429:  43%|████▎     | 429/1000 [09:38<12:50,  1.35s/it][Succeeded / Failed / Skipped / Total] 148 / 275 / 6 / 429:  43%|████▎     | 430/1000 [09:38<12:47,  1.35s/it][Succeeded / Failed / Skipped / Total] 148 / 276 / 6 / 430:  43%|████▎     | 430/1000 [09:38<12:47,  1.35s/it][Succeeded / Failed / Skipped / Total] 149 / 276 / 6 / 431:  43%|████▎     | 431/1000 [09:40<12:46,  1.35s/it][Succeeded / Failed / Skipped / Total] 149 / 276 / 6 / 431:  43%|████▎     | 432/1000 [09:41<12:45,  1.35s/it][Succeeded / Failed / Skipped / Total] 150 / 276 / 6 / 432:  43%|████▎     | 432/1000 [09:41<12:45,  1.35s/it][Succeeded / Failed / Skipped / Total] 151 / 276 / 6 / 433:  43%|████▎     | 433/1000 [09:43<12:43,  1.35s/it][Succeeded / Failed / Skipped / Total] 151 / 276 / 6 / 433:  43%|████▎     | 434/1000 [09:43<12:40,  1.34s/it][Succeeded / Failed / Skipped / Total] 152 / 276 / 6 / 434:  43%|████▎     | 434/1000 [09:43<12:40,  1.34s/it][Succeeded / Failed / Skipped / Total] 153 / 276 / 6 / 435:  44%|████▎     | 435/1000 [09:43<12:37,  1.34s/it][Succeeded / Failed / Skipped / Total] 153 / 276 / 6 / 435:  44%|████▎     | 436/1000 [09:48<12:41,  1.35s/it][Succeeded / Failed / Skipped / Total] 153 / 277 / 6 / 436:  44%|████▎     | 436/1000 [09:48<12:41,  1.35s/it]--------------------------------------------- Result 429 ---------------------------------------------
Closes fresh select connections . --> Attempts to backawothettiepavegincent . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[backawothettiepavegincent]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 430 ---------------------------------------------
Converts a bit set to a byte . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet bs ) { int [[value]] = 0 ; for ( int [[i]] = 0 ; [[i]] < bs . length ( ) ; ++ [[i]] ) { if ( bs . get ( [[i]] ) ) { [[value]] += 1 << [[i]] ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + [[value]] + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) [[value]] ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[lta]] ( BitSet bs ) { int [[size]] = 0 ; for ( int [[a]] = 0 ; [[a]] < bs . length ( ) ; ++ [[a]] ) { if ( bs . get ( [[a]] ) ) { [[size]] += 1 << [[a]] ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + [[size]] + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) [[size]] ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 431 ---------------------------------------------
Get a system property as a boolean . --> Get the deploymentputup as a boolean . --> Socre: 1.0

[[[[Adv]]]]: public static boolean getBool ( String [[key]] , String [[defaultValue]] ) { return Boolean . parseBoolean ( System . getProperty ( [[key]] , [[defaultValue]] ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property

[[[[Adv]]]]: public static boolean getBool ( String [[door]] , String [[deploymentputup]] ) { return Boolean . parseBoolean ( System . getProperty ( [[door]] , [[deploymentputup]] ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 432 ---------------------------------------------
Returns true if the request timed out . --> Returns true if andpeeteasser . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isRequestTimeout]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean [[andpeeteasser]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 433 ---------------------------------------------
Returns the value of the property with the given key . --> Returns allwovirsy . --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String key ) { if ( properties == null ) { return null ; } return properties . getProperty ( key ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[allwovirsy]] ( String key ) { if ( properties == null ) { return null ; } return properties . getProperty ( key ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 434 ---------------------------------------------
Returns the value associated with the given key . If the key does not exist the defaultIfNotFound is returned . --> Returns the context value for the given key . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] get ( String key , [[T]] defaultIfNotFound ) { return this . context . get ( key ) != null ? ( [[T]] ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[c]] > [[c]] get ( String key , [[c]] defaultIfNotFound ) { return this . context . get ( key ) != null ? ( [[c]] ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 435 ---------------------------------------------
Gets a random connection from a list of connections . --> Performs a chancetalk on a list of connections . --> Socre: 1.0

[[[[Adv]]]]: private Connection [[randomGet]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection [[chancetalk]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 436 ---------------------------------------------
Returns a user processor by class name . --> [[[FAILED]]]

[[[[Adv]]]]: public UserProcessor < ? > getUserProcessor ( String [[className]] ) { return StringUtils . isBlank ( [[className]] ) ? null : this . userProcessors . get ( [[className]] ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > getUserProcessor ( String [[systemnickname]] ) { return StringUtils . isBlank ( [[systemnickname]] ) ? null : this . userProcessors . get ( [[systemnickname]] ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 437 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 154 / 277 / 6 / 437:  44%|████▎     | 437/1000 [09:50<12:40,  1.35s/it][Succeeded / Failed / Skipped / Total] 154 / 277 / 6 / 437:  44%|████▍     | 438/1000 [09:52<12:39,  1.35s/it][Succeeded / Failed / Skipped / Total] 154 / 278 / 6 / 438:  44%|████▍     | 438/1000 [09:52<12:39,  1.35s/it][Succeeded / Failed / Skipped / Total] 155 / 278 / 6 / 439:  44%|████▍     | 439/1000 [09:52<12:37,  1.35s/it][Succeeded / Failed / Skipped / Total] 155 / 278 / 6 / 439:  44%|████▍     | 440/1000 [09:54<12:37,  1.35s/it][Succeeded / Failed / Skipped / Total] 156 / 278 / 6 / 440:  44%|████▍     | 440/1000 [09:54<12:37,  1.35s/it][Succeeded / Failed / Skipped / Total] 156 / 279 / 6 / 441:  44%|████▍     | 441/1000 [09:56<12:36,  1.35s/it][Succeeded / Failed / Skipped / Total] 156 / 279 / 6 / 441:  44%|████▍     | 442/1000 [09:56<12:33,  1.35s/it][Succeeded / Failed / Skipped / Total] 156 / 280 / 6 / 442:  44%|████▍     | 442/1000 [09:56<12:33,  1.35s/it]Helper method to detail the server error message --> Helper method for detailing ServerErrorMsg --> Socre: 1.0

[[[[Adv]]]]: private static String detailErrMsg ( String [[clientErrMsg]] , ResponseCommand responseCommand ) { RpcResponseCommand [[resp]] = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( [[resp]] . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , [[clientErrMsg]] , [[resp]] . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , [[clientErrMsg]] ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String detailErrMsg ( String [[deliverederircsf]] , ResponseCommand responseCommand ) { RpcResponseCommand [[biss]] = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( [[biss]] . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , [[deliverederircsf]] , [[biss]] . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , [[deliverederircsf]] ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 438 ---------------------------------------------
Converts a ResponseCommand to an Object . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object [[toResponseObject]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) responseCommand ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object [[asermueseikces]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) responseCommand ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 439 ---------------------------------------------
Creates a RpcServerException from the given throwable and error message . --> Esrigreceape a RpcServerException --> Socre: 1.0

[[[[Adv]]]]: private RpcServerException [[createServerException]] ( Throwable t , String [[errMsg]] ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , [[errMsg]] ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException [[esrigreceape]] ( Throwable t , String [[aegession]] ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , [[aegession]] ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 440 ---------------------------------------------
Print connection trace log . --> Logs information about argument timerucyevampub . --> Socre: 1.0

[[[[Adv]]]]: public static void [[printConnectionTraceLog]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void [[argumenttimerucyevampub]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 441 ---------------------------------------------
Resolve the response object from the response command . --> [[[FAILED]]]

[[[[Adv]]]]: public static Object [[resolveResponseObject]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object [[sivenspurancemob]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 442 ---------------------------------------------
Converts an RPC response command to a Throwable . --> [[[FAILED]]]

[[[[Adv]]]]: private static Throwable [[toThrowable]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable [[ealfrupuid]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 443 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 157 / 280 / 6 / 443:  44%|████▍     | 443/1000 [09:58<12:32,  1.35s/it][Succeeded / Failed / Skipped / Total] 157 / 280 / 6 / 443:  44%|████▍     | 444/1000 [10:00<12:32,  1.35s/it][Succeeded / Failed / Skipped / Total] 157 / 281 / 6 / 444:  44%|████▍     | 444/1000 [10:00<12:32,  1.35s/it][Succeeded / Failed / Skipped / Total] 157 / 282 / 6 / 445:  44%|████▍     | 445/1000 [10:02<12:31,  1.35s/it][Succeeded / Failed / Skipped / Total] 157 / 282 / 6 / 445:  45%|████▍     | 446/1000 [10:03<12:29,  1.35s/it][Succeeded / Failed / Skipped / Total] 157 / 283 / 6 / 446:  45%|████▍     | 446/1000 [10:03<12:29,  1.35s/it][Succeeded / Failed / Skipped / Total] 157 / 284 / 6 / 447:  45%|████▍     | 447/1000 [10:05<12:28,  1.35s/it][Succeeded / Failed / Skipped / Total] 157 / 284 / 6 / 447:  45%|████▍     | 448/1000 [10:06<12:26,  1.35s/it][Succeeded / Failed / Skipped / Total] 157 / 285 / 6 / 448:  45%|████▍     | 448/1000 [10:06<12:26,  1.35s/it][Succeeded / Failed / Skipped / Total] 157 / 286 / 6 / 449:  45%|████▍     | 449/1000 [10:06<12:24,  1.35s/it][Succeeded / Failed / Skipped / Total] 157 / 286 / 6 / 449:  45%|████▌     | 450/1000 [10:08<12:23,  1.35s/it][Succeeded / Failed / Skipped / Total] 157 / 287 / 6 / 450:  45%|████▌     | 450/1000 [10:08<12:23,  1.35s/it]Creates a new EventLoopGroup with the specified number of threads . --> Creates a new EventLoopGroup for helloetencylyutlands --> Socre: 1.0

[[[[Adv]]]]: public static EventLoopGroup [[newEventLoopGroup]] ( int nThreads , ThreadFactory [[threadFactory]] ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , [[threadFactory]] ) : new NioEventLoopGroup ( nThreads , [[threadFactory]] ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup [[helloetencylyutlands]] ( int nThreads , ThreadFactory [[varname]] ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , [[varname]] ) : new NioEventLoopGroup ( nThreads , [[varname]] ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 444 ---------------------------------------------
Parses the remote address of a channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress [[remote]] = [[channel]] . remoteAddress ( ) ; return doParse ( [[remote]] != null ? [[remote]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[dasseromefrontandviewsl]] ( final Channel [[page]] ) { if ( null == [[page]] ) { return StringUtils . EMPTY ; } final SocketAddress [[bus]] = [[page]] . remoteAddress ( ) ; return doParse ( [[bus]] != null ? [[bus]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 445 ---------------------------------------------
Parses the local address of a channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[local]] = channel . localAddress ( ) ; return doParse ( [[local]] != null ? [[local]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[preefvalrdewisis]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[bus]] = channel . localAddress ( ) ; return doParse ( [[bus]] != null ? [[bus]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 446 ---------------------------------------------
Parses the remote IP address of the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[busscripteemoaut]] ( final Channel [[line]] ) { if ( null == [[line]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[line]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 447 ---------------------------------------------
Parses the local IP address of the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String [[triejoteid]] ( final Channel [[limit]] ) { if ( null == [[limit]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[limit]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
Parses the remote host name from the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[essreshocasulserject]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 449 ---------------------------------------------
Parses the remote port from the channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[hensilechedepa]] ( final Channel [[line]] ) { if ( null == [[line]] ) { return - 1 ; } final InetSocketAddress [[base]] = ( InetSocketAddress ) [[line]] . remoteAddress ( ) ; if ( [[base]] != null ) { return [[base]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 450 ---------------------------------------------
Parses the local port of the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[priserestptrand]] ( final Channel [[box]] ) { if ( null == [[box]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[box]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 451 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 158 / 287 / 6 / 451:  45%|████▌     | 451/1000 [10:08<12:21,  1.35s/it][Succeeded / Failed / Skipped / Total] 158 / 287 / 6 / 451:  45%|████▌     | 452/1000 [10:09<12:18,  1.35s/it][Succeeded / Failed / Skipped / Total] 159 / 287 / 6 / 452:  45%|████▌     | 452/1000 [10:09<12:18,  1.35s/it][Succeeded / Failed / Skipped / Total] 160 / 287 / 6 / 453:  45%|████▌     | 453/1000 [10:10<12:17,  1.35s/it][Succeeded / Failed / Skipped / Total] 160 / 287 / 6 / 453:  45%|████▌     | 454/1000 [10:11<12:15,  1.35s/it][Succeeded / Failed / Skipped / Total] 161 / 287 / 6 / 454:  45%|████▌     | 454/1000 [10:11<12:15,  1.35s/it]Sends a request to the remoting server and invokes the callback . --> Insrole JARPE insrole jARPE --> Socre: 1.0

[[[[Adv]]]]: protected void [[invokeWithCallback]] ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int [[timeoutMillis]] ) { final InvokeFuture [[future]] = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( [[future]] ) ; final int requestId = request . getId ( ) ; try { Timeout [[timeout]] = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture [[future]] = conn . removeInvokeFuture ( requestId ) ; if ( [[future]] != null ) { [[future]] . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; [[future]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , [[timeoutMillis]] , TimeUnit . MILLISECONDS ) ; [[future]] . addTimeout ( [[timeout]] ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void [[insrolejiarpeax]] ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int [[stepappreizes]] ) { final InvokeFuture [[spring]] = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( [[spring]] ) ; final int requestId = request . getId ( ) ; try { Timeout [[motionol]] = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture [[spring]] = conn . removeInvokeFuture ( requestId ) ; if ( [[spring]] != null ) { [[spring]] . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; [[spring]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , [[stepappreizes]] , TimeUnit . MILLISECONDS ) ; [[spring]] . addTimeout ( [[motionol]] ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 452 ---------------------------------------------
Returns the next available connection . --> Calls the strategy . --> Socre: 1.0

[[[[Adv]]]]: public Connection [[get]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection [[call]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 453 ---------------------------------------------
Adds a connection to the pool . --> Marks the given exchange for access . --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Connection [[connection]] ) { markAccess ( ) ; if ( null == [[connection]] ) { return ; } boolean [[res]] = this . conns . addIfAbsent ( [[connection]] ) ; if ( [[res]] ) { [[connection]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void [[access]] ( Connection [[exchange]] ) { markAccess ( ) ; if ( null == [[exchange]] ) { return ; } boolean [[ras]] = this . conns . addIfAbsent ( [[exchange]] ) ; if ( [[ras]] ) { [[exchange]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 454 ---------------------------------------------
Filter a list of connections by their service status . --> Filters a list of collaborations and returns a map where the key is the fsticlass of the connection . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[filter]] ( List < Connection > [[connections]] ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : [[connections]] ) { String [[serviceStatus]] = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( [[serviceStatus]] != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[buffer]] ( List < Connection > [[collaborations]] ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : [[collaborations]] ) { String [[fsticlass]] = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( [[fsticlass]] != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 455 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 162 / 287 / 6 / 455:  46%|████▌     | 455/1000 [10:12<12:14,  1.35s/it][Succeeded / Failed / Skipped / Total] 162 / 287 / 6 / 455:  46%|████▌     | 456/1000 [10:14<12:13,  1.35s/it][Succeeded / Failed / Skipped / Total] 162 / 288 / 6 / 456:  46%|████▌     | 456/1000 [10:14<12:13,  1.35s/it][Succeeded / Failed / Skipped / Total] 162 / 289 / 6 / 457:  46%|████▌     | 457/1000 [10:14<12:10,  1.35s/it][Succeeded / Failed / Skipped / Total] 162 / 289 / 6 / 457:  46%|████▌     | 458/1000 [10:16<12:09,  1.35s/it][Succeeded / Failed / Skipped / Total] 163 / 289 / 6 / 458:  46%|████▌     | 458/1000 [10:16<12:09,  1.35s/it][Succeeded / Failed / Skipped / Total] 164 / 289 / 6 / 459:  46%|████▌     | 459/1000 [10:19<12:10,  1.35s/it][Succeeded / Failed / Skipped / Total] 164 / 289 / 6 / 459:  46%|████▌     | 460/1000 [10:20<12:07,  1.35s/it][Succeeded / Failed / Skipped / Total] 164 / 290 / 6 / 460:  46%|████▌     | 460/1000 [10:20<12:07,  1.35s/it][Succeeded / Failed / Skipped / Total] 164 / 291 / 6 / 461:  46%|████▌     | 461/1000 [10:20<12:05,  1.35s/it][Succeeded / Failed / Skipped / Total] 164 / 291 / 6 / 461:  46%|████▌     | 462/1000 [10:21<12:03,  1.35s/it]Start the connection monitor . --> Add connection monitor . --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task

[[[[Adv]]]]: public void [[add]] ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 456 ---------------------------------------------
Get the custom serializer for the given command code . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode code ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( code ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[fixrupactsportbil00]] ( CommandCode code ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( code ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 457 ---------------------------------------------
Get custom serializer by class name . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String [[className]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[className]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[classtecopsaivreader]] ( String [[windowdescription]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[windowdescription]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 458 ---------------------------------------------
Initializes the write buffer water mark . --> Initializes the WriteBufferWaterMark child option --> Socre: 1.0

[[[[Adv]]]]: private void initWriteBufferWaterMark ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . [[bootstrap]] . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void initWriteBufferWaterMark ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . [[bootrase]] . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 459 ---------------------------------------------
Remove a connection from the pool and try to close it . --> Remove an exchange and try to close it . --> Socre: 1.0

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[connection]] ) { if ( null == [[connection]] ) { return ; } boolean res = this . [[conns]] . remove ( [[connection]] ) ; if ( res ) { [[connection]] . decreaseRef ( ) ; } if ( [[connection]] . noRef ( ) ) { [[connection]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[exchange]] ) { if ( null == [[exchange]] ) { return ; } boolean res = this . [[doos]] . remove ( [[exchange]] ) ; if ( res ) { [[exchange]] . decreaseRef ( ) ; } if ( [[exchange]] . noRef ( ) ) { [[exchange]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 460 ---------------------------------------------
Registers a custom serializer . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String [[className]] , CustomSerializer serializer ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[className]] , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[className]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[recordketeavaritalator]] ( String [[charnum]] , CustomSerializer serializer ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[charnum]] , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[charnum]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 461 ---------------------------------------------
Parses a socket address to a host IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseSocketAddressToHostIp]] ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress addr = addrs . getAddress ( ) ; if ( null != addr ) { return addr . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String [[dasسhowreaidjectonthousetan]] ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress addr = addrs . getAddress ( ) ; if ( null != addr ) { return addr . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 462 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 165 / 291 / 6 / 462:  46%|████▌     | 462/1000 [10:21<12:03,  1.35s/it][Succeeded / Failed / Skipped / Total] 166 / 291 / 6 / 463:  46%|████▋     | 463/1000 [10:22<12:01,  1.34s/it][Succeeded / Failed / Skipped / Total] 166 / 291 / 6 / 463:  46%|████▋     | 464/1000 [10:22<11:58,  1.34s/it][Succeeded / Failed / Skipped / Total] 166 / 292 / 6 / 464:  46%|████▋     | 464/1000 [10:22<11:58,  1.34s/it][Succeeded / Failed / Skipped / Total] 167 / 292 / 6 / 465:  46%|████▋     | 465/1000 [10:23<11:57,  1.34s/it][Succeeded / Failed / Skipped / Total] 167 / 292 / 6 / 465:  47%|████▋     | 466/1000 [10:24<11:55,  1.34s/it][Succeeded / Failed / Skipped / Total] 168 / 292 / 6 / 466:  47%|████▋     | 466/1000 [10:24<11:55,  1.34s/it][Succeeded / Failed / Skipped / Total] 169 / 292 / 6 / 467:  47%|████▋     | 467/1000 [10:26<11:54,  1.34s/it][Succeeded / Failed / Skipped / Total] 169 / 292 / 6 / 467:  47%|████▋     | 468/1000 [10:27<11:52,  1.34s/it][Succeeded / Failed / Skipped / Total] 170 / 292 / 6 / 468:  47%|████▋     | 468/1000 [10:27<11:52,  1.34s/it]Register a custom serializer for a command code . --> Bind the malorganizer to the given system --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode [[code]] , CustomSerializer [[serializer]] ) { CustomSerializer [[prevSerializer]] = commandCustomSerializer . putIfAbsent ( [[code]] , [[serializer]] ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[code]] + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[bindutelleratedtralorganizer]] ( CommandCode [[system]] , CustomSerializer [[malorganizer]] ) { CustomSerializer [[minigesalilder]] = commandCustomSerializer . putIfAbsent ( [[system]] , [[malorganizer]] ) ; if ( [[minigesalilder]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[system]] + ", the custom serializer is: " + [[minigesalilder]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 463 ---------------------------------------------
Sets the code . --> Schedule a class to be executed . --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int code ) { this . [[code]] = code ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[scheduleclass]] ( int code ) { this . [[are]] = code ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 464 ---------------------------------------------
Returns a FramedataImpl1 for the given opcode . --> [[[FAILED]]]

[[[[Adv]]]]: public static FramedataImpl1 [[get]] ( Opcode [[opcode]] ) { if ( [[opcode]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[opcode]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 [[cause]] ( Opcode [[eend]] ) { if ( [[eend]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[eend]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 465 ---------------------------------------------
Returns true if the remote address is connected . --> Returns true if the given commandfiley is related to this connection . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isConnected]] ( String [[remoteAddr]] ) { Url url = this . rpcRemoting . addressParser . parse ( [[remoteAddr]] ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[hasrelated]] ( String [[commandfiley]] ) { Url url = this . rpcRemoting . addressParser . parse ( [[commandfiley]] ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 466 ---------------------------------------------
Updates the payload based on the reason . --> Addapyeonarder . --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[addapyeonarder]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 467 ---------------------------------------------
Translate payload size limit . --> braidfullikeursepreuetherantclitor . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[braidfullikeursepreuetherantclitor]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 468 ---------------------------------------------
Generate the final key . --> Collect and yfold . --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[collectandyfold]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 469 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 171 / 292 / 6 / 469:  47%|████▋     | 469/1000 [10:27<11:50,  1.34s/it][Succeeded / Failed / Skipped / Total] 171 / 292 / 6 / 469:  47%|████▋     | 470/1000 [10:28<11:48,  1.34s/it][Succeeded / Failed / Skipped / Total] 172 / 292 / 6 / 470:  47%|████▋     | 470/1000 [10:28<11:48,  1.34s/it][Succeeded / Failed / Skipped / Total] 173 / 292 / 6 / 471:  47%|████▋     | 471/1000 [10:28<11:45,  1.33s/it][Succeeded / Failed / Skipped / Total] 173 / 292 / 6 / 471:  47%|████▋     | 472/1000 [10:28<11:43,  1.33s/it][Succeeded / Failed / Skipped / Total] 174 / 292 / 6 / 472:  47%|████▋     | 472/1000 [10:28<11:43,  1.33s/it][Succeeded / Failed / Skipped / Total] 175 / 292 / 6 / 473:  47%|████▋     | 473/1000 [10:29<11:41,  1.33s/it][Succeeded / Failed / Skipped / Total] 175 / 292 / 6 / 473:  47%|████▋     | 474/1000 [10:29<11:38,  1.33s/it][Succeeded / Failed / Skipped / Total] 176 / 292 / 6 / 474:  47%|████▋     | 474/1000 [10:29<11:38,  1.33s/it][Succeeded / Failed / Skipped / Total] 177 / 292 / 6 / 475:  48%|████▊     | 475/1000 [10:32<11:38,  1.33s/it][Succeeded / Failed / Skipped / Total] 177 / 292 / 6 / 475:  48%|████▊     | 476/1000 [10:33<11:37,  1.33s/it]Check the packet size for a single frame . --> Convertlingpetyruxtpegsii . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckPacketSize]] ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void [[convertslingpetyruxtpegsii]] ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 470 ---------------------------------------------
Process a binary frame . --> Atry framemaker . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[atryframemaker]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 471 ---------------------------------------------
Validate UTF - 8 . --> Dynamicutelineftword . --> Socre: 1.0

[[[[Adv]]]]: private void [[validateUtf8]] ( ByteBuffer [[payload]] , int [[mark]] ) throws InvalidDataException { try { [[payload]] . position ( [[payload]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[payload]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[payload]] . position ( [[mark]] ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void [[dynamicutelineftword]] ( ByteBuffer [[backbone]] , int [[a]] ) throws InvalidDataException { try { [[backbone]] . position ( [[backbone]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[backbone]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[backbone]] . position ( [[a]] ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 472 ---------------------------------------------
Checks if the handshake contains the requested protocol . --> Extends extended extsostataniline . --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String [[requestedProtocol]] ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( [[requestedProtocol]] ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[extendsextsostataniline]] ( String [[agreedstataplay]] ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( [[agreedstataplay]] ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 473 ---------------------------------------------
Process a close frame and check if it is a continuous frame . --> Advanced putovetruidptialfi . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameContinuousAndNonFin]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void [[advancedputovetruidptialfi]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 474 ---------------------------------------------
Process a text frame . --> Send goalreferenceart message --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameText]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void [[goalreferenceart]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 475 ---------------------------------------------
Writes a batch of data to the given channel . --> Exposed for express --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[batch]] ( WebSocketImpl ws , ByteChannel [[sockchannel]] ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( [[sockchannel]] instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) [[sockchannel]] ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed

[[[[Adv]]]]: public static boolean [[express]] ( WebSocketImpl ws , ByteChannel [[scrollchannel]] ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( [[scrollchannel]] instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) [[scrollchannel]] ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 476 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 178 / 292 / 6 / 476:  48%|████▊     | 476/1000 [10:33<11:37,  1.33s/it][Succeeded / Failed / Skipped / Total] 179 / 292 / 6 / 477:  48%|████▊     | 477/1000 [10:33<11:34,  1.33s/it][Succeeded / Failed / Skipped / Total] 179 / 292 / 6 / 477:  48%|████▊     | 478/1000 [10:34<11:32,  1.33s/it][Succeeded / Failed / Skipped / Total] 180 / 292 / 6 / 478:  48%|████▊     | 478/1000 [10:34<11:32,  1.33s/it][Succeeded / Failed / Skipped / Total] 181 / 292 / 6 / 479:  48%|████▊     | 479/1000 [10:34<11:30,  1.32s/it][Succeeded / Failed / Skipped / Total] 181 / 292 / 6 / 479:  48%|████▊     | 480/1000 [10:34<11:27,  1.32s/it][Succeeded / Failed / Skipped / Total] 182 / 292 / 6 / 480:  48%|████▊     | 480/1000 [10:34<11:27,  1.32s/it]Gets the payload from the byte buffer list . --> Get ipeytekabaframe from byte buffer list --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer getPayloadFromByteBufferList ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer [[resultingByteBuffer]] ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; [[resultingByteBuffer]] = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { [[resultingByteBuffer]] . put ( buffer ) ; } } [[resultingByteBuffer]] . flip ( ) ; return [[resultingByteBuffer]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer getPayloadFromByteBufferList ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer [[ipeytekabaframe]] ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; [[ipeytekabaframe]] = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { [[ipeytekabaframe]] . put ( buffer ) ; } } [[ipeytekabaframe]] . flip ( ) ; return [[ipeytekabaframe]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 477 ---------------------------------------------
Process a close frame . --> Handles bystreetprimating frames . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameClosing]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void [[bystreetprimating]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 478 ---------------------------------------------
Process a continuous frame . --> Handles text and binary frames . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[alworksforpot]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 479 ---------------------------------------------
Logs a runtime exception during websocket message . --> Method alivenowestral . --> Socre: 1.0

[[[[Adv]]]]: private void [[logRuntimeException]] ( WebSocketImpl [[webSocketImpl]] , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketError ( [[webSocketImpl]] , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void [[alivenowestral]] ( WebSocketImpl [[comokkenteepalet]] , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; [[comokkenteepalet]] . getWebSocketListener ( ) . onWebsocketError ( [[comokkenteepalet]] , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 480 ---------------------------------------------
Checks if the buffer size is too large . If so clears the buffer . --> Perform box meggingclter . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[boxmeggingclter]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 481 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 183 / 292 / 6 / 481:  48%|████▊     | 481/1000 [10:35<11:25,  1.32s/it][Succeeded / Failed / Skipped / Total] 183 / 292 / 6 / 481:  48%|████▊     | 482/1000 [10:37<11:25,  1.32s/it][Succeeded / Failed / Skipped / Total] 184 / 292 / 6 / 482:  48%|████▊     | 482/1000 [10:37<11:25,  1.32s/it][Succeeded / Failed / Skipped / Total] 185 / 292 / 6 / 483:  48%|████▊     | 483/1000 [10:37<11:22,  1.32s/it][Succeeded / Failed / Skipped / Total] 185 / 292 / 6 / 483:  48%|████▊     | 484/1000 [10:37<11:20,  1.32s/it][Succeeded / Failed / Skipped / Total] 186 / 292 / 6 / 484:  48%|████▊     | 484/1000 [10:37<11:20,  1.32s/it][Succeeded / Failed / Skipped / Total] 187 / 292 / 6 / 485:  48%|████▊     | 485/1000 [10:37<11:17,  1.32s/it][Succeeded / Failed / Skipped / Total] 187 / 292 / 6 / 485:  49%|████▊     | 486/1000 [10:38<11:15,  1.31s/it][Succeeded / Failed / Skipped / Total] 188 / 292 / 6 / 486:  49%|████▊     | 486/1000 [10:38<11:15,  1.31s/it][Succeeded / Failed / Skipped / Total] 189 / 292 / 6 / 487:  49%|████▊     | 487/1000 [10:38<11:13,  1.31s/it][Succeeded / Failed / Skipped / Total] 189 / 292 / 6 / 487:  49%|████▉     | 488/1000 [10:39<11:10,  1.31s/it]Returns the total size of the byte buffer list . --> Aflyfulbroflowdlesfy . --> Socre: 1.0

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[aflyfulbroflowdlesfy]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 482 ---------------------------------------------
Translates an HTTP handshake line into a handshake builder . --> Werden crossunshinumppertherur . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpServer]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder [[crossunshinكumppertherur]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 483 ---------------------------------------------
Closes the connection due to a wrong handshake . --> A allyklectalikexignrowatire . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToWrongHandshake]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void [[allyklectalikexignrowatire]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 484 ---------------------------------------------
Decodes data from the socket buffer . --> Process a connection buffer . --> Socre: 1.0

[[[[Adv]]]]: public void [[decode]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void [[conart]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 485 ---------------------------------------------
Processes a close frame . If the previous continuous frame sequence is not complete throws an exception . --> Actuallakeuslistfer . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata [[frame]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[frame]] ; addToBufferList ( [[frame]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[actuallakeuslistfer]] ( Framedata [[framed]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[framed]] ; addToBufferList ( [[framed]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 486 ---------------------------------------------
Closes the connection due to an internal server error . --> Send backeveevetherpreprytlineupthervewrs --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[backeveevetherpreprytlineupthervewrs]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 487 ---------------------------------------------
Translate HTTP client handshake line to handshake builder . --> Ameedshitamptrril . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpClient]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder [[ameedshكitamptrril]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 488 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 190 / 292 / 6 / 488:  49%|████▉     | 488/1000 [10:39<11:10,  1.31s/it][Succeeded / Failed / Skipped / Total] 190 / 293 / 6 / 489:  49%|████▉     | 489/1000 [10:41<11:10,  1.31s/it][Succeeded / Failed / Skipped / Total] 190 / 293 / 6 / 489:  49%|████▉     | 490/1000 [10:41<11:07,  1.31s/it][Succeeded / Failed / Skipped / Total] 190 / 294 / 6 / 490:  49%|████▉     | 490/1000 [10:41<11:07,  1.31s/it][Succeeded / Failed / Skipped / Total] 191 / 294 / 6 / 491:  49%|████▉     | 491/1000 [10:41<11:04,  1.31s/it][Succeeded / Failed / Skipped / Total] 191 / 294 / 6 / 491:  49%|████▉     | 492/1000 [10:41<11:02,  1.30s/it][Succeeded / Failed / Skipped / Total] 192 / 294 / 6 / 492:  49%|████▉     | 492/1000 [10:41<11:02,  1.30s/it]Generate the HTTP response according to the given error code . --> captureocgttspofitorinturoa --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[generateHttpResponseDueToError]] ( int errorCode ) { String errorCodeDescription ; switch ( errorCode ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer [[captureocgttspofitorinturoa]] ( int errorCode ) { String errorCodeDescription ; switch ( errorCode ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 489 ---------------------------------------------
Starts the read thread for the WebSocket client . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[internet]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 490 ---------------------------------------------
Sends a string to the server . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[send]] ( String [[text]] ) { if ( [[text]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( [[text]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[sort]] ( String [[format]] ) { if ( [[format]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[sort]] ( draft . createFrames ( [[format]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 491 ---------------------------------------------
Resets the connection to a new state . --> Adjusts the write and read threads . --> Socre: 1.0

[[[[Adv]]]]: private void [[reset]] ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect

[[[[Adv]]]]: private void [[adjust]] ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 492 ---------------------------------------------
Sends a handshake to the engine . --> Ask for framegage . --> Socre: 1.0

[[[[Adv]]]]: private void [[sendHandshake]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void [[askframegage]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 493 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 193 / 294 / 6 / 493:  49%|████▉     | 493/1000 [10:43<11:01,  1.31s/it][Succeeded / Failed / Skipped / Total] 193 / 294 / 6 / 493:  49%|████▉     | 494/1000 [10:43<10:59,  1.30s/it][Succeeded / Failed / Skipped / Total] 194 / 294 / 6 / 494:  49%|████▉     | 494/1000 [10:43<10:59,  1.30s/it][Succeeded / Failed / Skipped / Total] 195 / 294 / 6 / 495:  50%|████▉     | 495/1000 [10:43<10:56,  1.30s/it][Succeeded / Failed / Skipped / Total] 195 / 294 / 6 / 495:  50%|████▉     | 496/1000 [10:46<10:56,  1.30s/it][Succeeded / Failed / Skipped / Total] 196 / 294 / 6 / 496:  50%|████▉     | 496/1000 [10:46<10:56,  1.30s/it][Succeeded / Failed / Skipped / Total] 197 / 294 / 6 / 497:  50%|████▉     | 497/1000 [10:46<10:54,  1.30s/it][Succeeded / Failed / Skipped / Total] 197 / 294 / 6 / 497:  50%|████▉     | 498/1000 [10:47<10:52,  1.30s/it][Succeeded / Failed / Skipped / Total] 198 / 294 / 6 / 498:  50%|████▉     | 498/1000 [10:47<10:52,  1.30s/it][Succeeded / Failed / Skipped / Total] 199 / 294 / 6 / 499:  50%|████▉     | 499/1000 [10:47<10:50,  1.30s/it][Succeeded / Failed / Skipped / Total] 199 / 294 / 6 / 499:  50%|█████     | 500/1000 [10:48<10:48,  1.30s/it][Succeeded / Failed / Skipped / Total] 199 / 294 / 7 / 500:  50%|█████     | 500/1000 [10:48<10:48,  1.30s/it]Sets the connection lost timeout . --> beatconnetcelonetindimund . --> Socre: 1.0

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[beatconnetcelonetindimund]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 494 ---------------------------------------------
Starts the connection lost timer . --> Eventual jundattipusdere . --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[emergencyjundattipusdere]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 495 ---------------------------------------------
Stops the connection lost timer . --> Cutotejatlygeetinamit . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[cutotejatlygeetinamit]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 496 ---------------------------------------------
Cancel connection lost checker timer . --> Shuttordluctstreettlemie . --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[buttordluctstreettlemie]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 497 ---------------------------------------------
Restarts the timer that detects connections that have been lost . --> Performs anticipationconatureliarammet . --> Socre: 1.0

[[[[Adv]]]]: private void [[restartConnectionLostTimer]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void [[anticipationconatureliarammet]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 498 ---------------------------------------------
Sends a ping frame . --> Netnenstream tstime --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[onWebsocketPing]] ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void [[netnenstreamtstime]] ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 499 ---------------------------------------------
On websocket handshake received as server . --> Allnaotsforme des allnaotsfoldarjueddsives --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[onWebsocketHandshakeReceivedAsServer]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[allnaotsformeteensfoldarjueddsives]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 500 ---------------------------------------------
Writes data to the socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doWrite ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 501 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 200 / 294 / 7 / 501:  50%|█████     | 501/1000 [10:49<10:46,  1.30s/it][Succeeded / Failed / Skipped / Total] 200 / 294 / 7 / 501:  50%|█████     | 502/1000 [10:49<10:44,  1.29s/it][Succeeded / Failed / Skipped / Total] 200 / 294 / 8 / 502:  50%|█████     | 502/1000 [10:49<10:44,  1.29s/it][Succeeded / Failed / Skipped / Total] 200 / 295 / 8 / 503:  50%|█████     | 503/1000 [10:49<10:42,  1.29s/it][Succeeded / Failed / Skipped / Total] 200 / 295 / 8 / 503:  50%|█████     | 504/1000 [10:50<10:39,  1.29s/it][Succeeded / Failed / Skipped / Total] 201 / 295 / 8 / 504:  50%|█████     | 504/1000 [10:50<10:39,  1.29s/it][Succeeded / Failed / Skipped / Total] 201 / 296 / 8 / 505:  50%|█████     | 505/1000 [10:50<10:37,  1.29s/it][Succeeded / Failed / Skipped / Total] 201 / 296 / 8 / 505:  51%|█████     | 506/1000 [10:50<10:35,  1.29s/it][Succeeded / Failed / Skipped / Total] 202 / 296 / 8 / 506:  51%|█████     | 506/1000 [10:50<10:35,  1.29s/it]Accepts a websocket connection . --> Accepts the media from the server . --> Socre: 1.0

[[[[Adv]]]]: private void doAccept ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl [[w]] = wsf . createWebSocket ( this , drafts ) ; [[w]] . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , [[w]] ) ) ; try { [[w]] . setChannel ( wsf . wrapChannel ( channel , [[w]] . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( [[w]] ) ; } catch ( IOException ex ) { if ( [[w]] . getSelectionKey ( ) != null ) [[w]] . getSelectionKey ( ) . cancel ( ) ; handleIOException ( [[w]] . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation

[[[[Adv]]]]: private void doAccept ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl [[media]] = wsf . createWebSocket ( this , drafts ) ; [[media]] . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , [[media]] ) ) ; try { [[media]] . setChannel ( wsf . wrapChannel ( channel , [[media]] . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( [[media]] ) ; } catch ( IOException ex ) { if ( [[media]] . getSelectionKey ( ) != null ) [[media]] . getSelectionKey ( ) . cancel ( ) ; handleIOException ( [[media]] . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 502 ---------------------------------------------
Ensure single thread . --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 503 ---------------------------------------------
Returns the port of the server . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getPort]] ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[puthow]] ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 504 ---------------------------------------------
Do a read . --> Reads data from the socket --> Socre: 1.0

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer [[buf]] = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( [[buf]] , conn , conn . getChannel ( ) ) ) { if ( [[buf]] . hasRemaining ( ) ) { conn . inQueue . put ( [[buf]] ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( [[buf]] ) ; } } else { pushBuffer ( [[buf]] ) ; } } catch ( IOException e ) { pushBuffer ( [[buf]] ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer [[abafs]] = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( [[abafs]] , conn , conn . getChannel ( ) ) ) { if ( [[abafs]] . hasRemaining ( ) ) { conn . inQueue . put ( [[abafs]] ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( [[abafs]] ) ; } } else { pushBuffer ( [[abafs]] ) ; } } catch ( IOException e ) { pushBuffer ( [[abafs]] ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 505 ---------------------------------------------
Returns the port of the connection . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getPort]] ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[quickif]] ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 506 ---------------------------------------------
Read additional data from the socket . --> Beapant rand . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAdditionalRead]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void [[beapantrund]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 507 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 203 / 296 / 8 / 507:  51%|█████     | 507/1000 [10:52<10:34,  1.29s/it][Succeeded / Failed / Skipped / Total] 203 / 296 / 8 / 507:  51%|█████     | 508/1000 [10:53<10:33,  1.29s/it][Succeeded / Failed / Skipped / Total] 204 / 296 / 8 / 508:  51%|█████     | 508/1000 [10:53<10:33,  1.29s/it][Succeeded / Failed / Skipped / Total] 205 / 296 / 8 / 509:  51%|█████     | 509/1000 [10:54<10:30,  1.29s/it][Succeeded / Failed / Skipped / Total] 205 / 296 / 8 / 509:  51%|█████     | 510/1000 [10:54<10:28,  1.28s/it][Succeeded / Failed / Skipped / Total] 205 / 297 / 8 / 510:  51%|█████     | 510/1000 [10:54<10:28,  1.28s/it][Succeeded / Failed / Skipped / Total] 206 / 297 / 8 / 511:  51%|█████     | 511/1000 [10:54<10:26,  1.28s/it][Succeeded / Failed / Skipped / Total] 206 / 297 / 8 / 511:  51%|█████     | 512/1000 [10:54<10:23,  1.28s/it][Succeeded / Failed / Skipped / Total] 206 / 298 / 8 / 512:  51%|█████     | 512/1000 [10:54<10:23,  1.28s/it]Setup selector and server thread . --> Anatrockoletoffpernameultod . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doSetupSelectorAndServerThread]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean [[anatrockoletoffpernameultod]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 508 ---------------------------------------------
Do server shutdown . --> Stops the bandagereavsduetby . --> Socre: 1.0

[[[[Adv]]]]: private void [[doServerShutdown]] ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown

[[[[Adv]]]]: private void [[bandagereavsduetby]] ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 509 ---------------------------------------------
Broadcast a message to a collection of clients . --> Attacks the server with the given data . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[broadcast]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void [[attack]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[attack]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 510 ---------------------------------------------
Stops the timer and waits for it to finish . --> [[[FAILED]]]

[[[[Adv]]]]: public void stop ( int [[timeout]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void stop ( int [[mintest]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 511 ---------------------------------------------
Broadcast data to clients . --> Create a Boarter frame for each client . --> Socre: 1.0

[[[[Adv]]]]: private void [[doBroadcast]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void [[createboarter]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 512 ---------------------------------------------
Starts the API . --> [[[FAILED]]]

[[[[Adv]]]]: public JPAApi start ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi start ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 513 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 207 / 298 / 8 / 513:  51%|█████▏    | 513/1000 [10:56<10:23,  1.28s/it][Succeeded / Failed / Skipped / Total] 207 / 298 / 8 / 513:  51%|█████▏    | 514/1000 [10:57<10:21,  1.28s/it][Succeeded / Failed / Skipped / Total] 208 / 298 / 8 / 514:  51%|█████▏    | 514/1000 [10:57<10:21,  1.28s/it][Succeeded / Failed / Skipped / Total] 209 / 298 / 8 / 515:  52%|█████▏    | 515/1000 [10:59<10:20,  1.28s/it][Succeeded / Failed / Skipped / Total] 209 / 298 / 8 / 515:  52%|█████▏    | 516/1000 [10:59<10:18,  1.28s/it][Succeeded / Failed / Skipped / Total] 209 / 299 / 8 / 516:  52%|█████▏    | 516/1000 [10:59<10:18,  1.28s/it][Succeeded / Failed / Skipped / Total] 209 / 300 / 8 / 517:  52%|█████▏    | 517/1000 [11:01<10:17,  1.28s/it][Succeeded / Failed / Skipped / Total] 209 / 300 / 8 / 517:  52%|█████▏    | 518/1000 [11:03<10:17,  1.28s/it][Succeeded / Failed / Skipped / Total] 209 / 301 / 8 / 518:  52%|█████▏    | 518/1000 [11:03<10:17,  1.28s/it][Succeeded / Failed / Skipped / Total] 210 / 301 / 8 / 519:  52%|█████▏    | 519/1000 [11:06<10:17,  1.28s/it][Succeeded / Failed / Skipped / Total] 210 / 301 / 8 / 519:  52%|█████▏    | 520/1000 [11:06<10:15,  1.28s/it][Succeeded / Failed / Skipped / Total] 210 / 302 / 8 / 520:  52%|█████▏    | 520/1000 [11:06<10:15,  1.28s/it]Executes the connection lost detection . --> buscononecesweeteleatenta . --> Socre: 1.0

[[[[Adv]]]]: private void [[executeConnectionLostDetection]] ( WebSocket [[webSocket]] , long minimumPongTime ) { if ( ! ( [[webSocket]] instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) [[webSocket]] ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void [[buscononecesweeteleatenta]] ( WebSocket [[comseirketter]] , long minimumPongTime ) { if ( ! ( [[comseirketter]] instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) [[comseirketter]] ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 514 ---------------------------------------------
Returns the socket associated with the given websocket connection . --> bitswrets . --> Socre: 1.0

[[[[Adv]]]]: private Socket [[getSocket]] ( WebSocket [[conn]] ) { WebSocketImpl impl = ( WebSocketImpl ) [[conn]] ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket [[bitswrets]] ( WebSocket [[aveun]] ) { WebSocketImpl impl = ( WebSocketImpl ) [[aveun]] ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 515 ---------------------------------------------
Convert the given arguments to a scala buffer . --> Bringda3kaschalmeror . --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[bringda3kaschalmeror]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 516 ---------------------------------------------
Broadcasts a text message to a collection of clients . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[broadcast]] ( String [[text]] , Collection < WebSocket > [[clients]] ) { if ( [[text]] == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[text]] , [[clients]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void [[headline]] ( String [[blur]] , Collection < WebSocket > [[affiliates]] ) { if ( [[blur]] == null || [[affiliates]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[blur]] , [[affiliates]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 517 ---------------------------------------------
Executes the given consumer in a transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > [[block]] ) { [[withTransaction]] ( em -> { [[block]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[individualstraversscripti]] ( Consumer < EntityManager > [[team]] ) { [[individualstraversscripti]] ( em -> { [[team]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 518 ---------------------------------------------
Returns an EntityManager with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager em ( String [[name]] ) { EntityManagerFactory emf = emfs . get ( [[name]] ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager em ( String [[last]] ) { EntityManagerFactory emf = emfs . get ( [[last]] ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 519 ---------------------------------------------
Fills the draft frames if it doesn t already exist . --> Adds chains to a draft if they don t already exist . --> Socre: 1.0

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > [[draftFrames]] , String sData , ByteBuffer [[bData]] ) { if ( ! [[draftFrames]] . containsKey ( draft ) ) { List < Framedata > [[frames]] = null ; if ( sData != null ) { [[frames]] = draft . createFrames ( sData , "False" != "False" ) ; } if ( [[bData]] != null ) { [[frames]] = draft . createFrames ( [[bData]] , "False" != "False" ) ; } if ( [[frames]] != null ) { [[draftFrames]] . put ( draft , [[frames]] ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > [[freshaseson]] , String sData , ByteBuffer [[2dancha]] ) { if ( ! [[freshaseson]] . containsKey ( draft ) ) { List < Framedata > [[chains]] = null ; if ( sData != null ) { [[chains]] = draft . createFrames ( sData , "False" != "False" ) ; } if ( [[2dancha]] != null ) { [[chains]] = draft . createFrames ( [[2dancha]] , "False" != "False" ) ; } if ( [[chains]] != null ) { [[freshaseson]] . put ( draft , [[chains]] ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 520 ---------------------------------------------
Returns true if the key is defined at the given location --> [[[FAILED]]]

[[[[Adv]]]]: public Boolean [[isDefinedAt]] ( play . api . i18n . Lang [[lang]] , String [[key]] ) { return messages . isDefinedAt ( [[key]] , [[lang]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean [[eswerdatediala]] ( play . api . i18n . Lang [[key]] , String [[keys]] ) { return messages . isDefinedAt ( [[keys]] , [[key]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 521 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 210 / 303 / 8 / 521:  52%|█████▏    | 521/1000 [11:07<10:13,  1.28s/it][Succeeded / Failed / Skipped / Total] 210 / 303 / 8 / 521:  52%|█████▏    | 522/1000 [11:08<10:12,  1.28s/it][Succeeded / Failed / Skipped / Total] 211 / 303 / 8 / 522:  52%|█████▏    | 522/1000 [11:08<10:12,  1.28s/it][Succeeded / Failed / Skipped / Total] 211 / 304 / 8 / 523:  52%|█████▏    | 523/1000 [11:11<10:12,  1.28s/it][Succeeded / Failed / Skipped / Total] 211 / 304 / 8 / 523:  52%|█████▏    | 524/1000 [11:12<10:10,  1.28s/it][Succeeded / Failed / Skipped / Total] 211 / 305 / 8 / 524:  52%|█████▏    | 524/1000 [11:12<10:10,  1.28s/it][Succeeded / Failed / Skipped / Total] 211 / 306 / 8 / 525:  52%|█████▎    | 525/1000 [11:12<10:08,  1.28s/it][Succeeded / Failed / Skipped / Total] 211 / 306 / 8 / 525:  53%|█████▎    | 526/1000 [11:13<10:06,  1.28s/it][Succeeded / Failed / Skipped / Total] 211 / 307 / 8 / 526:  53%|█████▎    | 526/1000 [11:13<10:06,  1.28s/it][Succeeded / Failed / Skipped / Total] 211 / 308 / 8 / 527:  53%|█████▎    | 527/1000 [11:13<10:04,  1.28s/it][Succeeded / Failed / Skipped / Total] 211 / 308 / 8 / 527:  53%|█████▎    | 528/1000 [11:14<10:03,  1.28s/it][Succeeded / Failed / Skipped / Total] 211 / 309 / 8 / 528:  53%|█████▎    | 528/1000 [11:14<10:03,  1.28s/it][Succeeded / Failed / Skipped / Total] 212 / 309 / 8 / 529:  53%|█████▎    | 529/1000 [11:14<10:00,  1.28s/it][Succeeded / Failed / Skipped / Total] 212 / 309 / 8 / 529:  53%|█████▎    | 530/1000 [11:16<09:59,  1.28s/it][Succeeded / Failed / Skipped / Total] 212 / 310 / 8 / 530:  53%|█████▎    | 530/1000 [11:16<09:59,  1.28s/it]Wraps the given arguments to a list if they are not already . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[wrapArgsToListIfNeeded]] ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[appurathsotstafndedds]] ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 522 ---------------------------------------------
Returns the localized message for the given language . --> Like a list of cats --> Socre: 1.0

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang lang , List < String > [[keys]] , Object ... args ) { Buffer < String > [[keyArgs]] = scala . collection . JavaConverters . asScalaBufferConverter ( [[keys]] ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[keyArgs]] . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String [[like]] ( play . api . i18n . Lang lang , List < String > [[cats]] , Object ... args ) { Buffer < String > [[centralconbags]] = scala . collection . JavaConverters . asScalaBufferConverter ( [[cats]] ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[centralconbags]] . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 523 ---------------------------------------------
Create a new instance of ReplaceME0 . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[REPLACEME0]] ( play . api . inject . Binding < ? > ... [[REPLACEME0]] ) { return [[REPLACEME0]] ( Guiceable . bindings ( [[REPLACEME0]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self [[replacingm1]] ( play . api . inject . Binding < ? > ... [[replacingm1]] ) { return [[replacingm1]] ( Guiceable . bindings ( [[replacingm1]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 524 ---------------------------------------------
Returns the localized message for the given key and arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , String key , Object ... [[args]] ) { Seq < Object > [[scalaArgs]] = convertArgsToScalaBuffer ( [[args]] ) ; return messages . apply ( key , [[scalaArgs]] , lang ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , String key , Object ... [[clangn]] ) { Seq < Object > [[guessangi]] = convertArgsToScalaBuffer ( [[clangn]] ) ; return messages . apply ( key , [[guessangi]] , lang ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 525 ---------------------------------------------
Sets the language of the result . --> [[[FAILED]]]

[[[[Adv]]]]: public Result [[setLang]] ( Result [[result]] , Lang lang ) { return messages . setLang ( [[result]] . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result [[boxdoll]] ( Result [[end]] , Lang lang ) { return messages . setLang ( [[end]] . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 526 ---------------------------------------------
Returns the preferred messages for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Http . RequestHeader [[request]] ) { play . api . i18n . Messages [[msgs]] = messages . preferred ( [[request]] ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages [[like]] ( Http . RequestHeader [[condition]] ) { play . api . i18n . Messages [[gt]] = messages . preferred ( [[condition]] ) ; return new MessagesImpl ( new Lang ( [[gt]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 527 ---------------------------------------------
Returns a copy of this binder s bindings for the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[bindings]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self [[chaineding]] ( GuiceableModule ... [[structures]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[structures]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 528 ---------------------------------------------
Binds this player to a set of modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[bindings]] ( play . api . inject . Module ... [[modules]] ) { return [[bindings]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self [[frameworkd]] ( play . api . inject . Module ... [[levels]] ) { return [[frameworkd]] ( Guiceable . [[levels]] ( [[levels]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 529 ---------------------------------------------
Transfers the source byte buffer to the destination byte buffer returning the number of bytes transferred . --> Brings the source buffer into the destination buffer and returns the number of bytes that can be written . --> Socre: 1.0

[[[[Adv]]]]: public static int [[transferByteBuffer]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int [[fremain]] = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( [[fremain]] > toremain ) { int limit = Math . min ( [[fremain]] , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return [[fremain]] ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int [[correspondencebrotainsuperffle]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int [[bandeiline]] = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( [[bandeiline]] > toremain ) { int limit = Math . min ( [[bandeiline]] , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return [[bandeiline]] ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 530 ---------------------------------------------
Returns a copy of this message with the languages preferred by the given collection of languages . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > [[candidates]] ) { Seq < Lang > cs = Scala . asScala ( [[candidates]] ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > [[olds]] ) { Seq < Lang > cs = Scala . asScala ( [[olds]] ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
[Succeeded / Failed / Skipped / Total] 212 / 311 / 8 / 531:  53%|█████▎    | 531/1000 [11:16<09:57,  1.27s/it][Succeeded / Failed / Skipped / Total] 212 / 311 / 8 / 531:  53%|█████▎    | 532/1000 [11:18<09:57,  1.28s/it][Succeeded / Failed / Skipped / Total] 212 / 312 / 8 / 532:  53%|█████▎    | 532/1000 [11:18<09:57,  1.28s/it][Succeeded / Failed / Skipped / Total] 212 / 313 / 8 / 533:  53%|█████▎    | 533/1000 [11:19<09:55,  1.28s/it][Succeeded / Failed / Skipped / Total] 212 / 313 / 8 / 533:  53%|█████▎    | 534/1000 [11:19<09:53,  1.27s/it][Succeeded / Failed / Skipped / Total] 212 / 314 / 8 / 534:  53%|█████▎    | 534/1000 [11:19<09:53,  1.27s/it][Succeeded / Failed / Skipped / Total] 213 / 314 / 8 / 535:  54%|█████▎    | 535/1000 [11:20<09:51,  1.27s/it][Succeeded / Failed / Skipped / Total] 213 / 314 / 8 / 535:  54%|█████▎    | 536/1000 [11:20<09:49,  1.27s/it][Succeeded / Failed / Skipped / Total] 214 / 314 / 8 / 536:  54%|█████▎    | 536/1000 [11:20<09:49,  1.27s/it][Succeeded / Failed / Skipped / Total] 215 / 314 / 8 / 537:  54%|█████▎    | 537/1000 [11:20<09:47,  1.27s/it][Succeeded / Failed / Skipped / Total] 215 / 314 / 8 / 537:  54%|█████▍    | 538/1000 [11:21<09:45,  1.27s/it][Succeeded / Failed / Skipped / Total] 215 / 315 / 8 / 538:  54%|█████▍    | 538/1000 [11:21<09:45,  1.27s/it][Succeeded / Failed / Skipped / Total] 216 / 315 / 8 / 539:  54%|█████▍    | 539/1000 [11:24<09:45,  1.27s/it][Succeeded / Failed / Skipped / Total] 216 / 315 / 8 / 539:  54%|█████▍    | 540/1000 [11:25<09:43,  1.27s/it][Succeeded / Failed / Skipped / Total] 216 / 316 / 8 / 540:  54%|█████▍    | 540/1000 [11:25<09:43,  1.27s/it][Succeeded / Failed / Skipped / Total] 216 / 317 / 8 / 541:  54%|█████▍    | 541/1000 [11:26<09:42,  1.27s/it][Succeeded / Failed / Skipped / Total] 216 / 317 / 8 / 541:  54%|█████▍    | 542/1000 [11:26<09:40,  1.27s/it]--------------------------------------------- Result 531 ---------------------------------------------
Returns a copy of this binding in the specified scope . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[defines]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 532 ---------------------------------------------
Sets the overrides of this instance with the specified modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Module ... [[modules]] ) { return overrides ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Module ... [[classes]] ) { return overrides ( Guiceable . [[classes]] ( [[classes]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 533 ---------------------------------------------
Returns a copy of this builder with the specified overrides . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... [[arrays]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[arrays]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 534 ---------------------------------------------
Executes the given request and returns the result . --> [[[FAILED]]]

[[[[Adv]]]]: public CompletionStage < Result > [[call]] ( Request [[req]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > [[close]] ( Request [[fewn]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 535 ---------------------------------------------
Overrides this instance with the given bindings . --> Create an outsamesb instance with the specified frameworks --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[overrides]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self [[outsamesb]] ( play . api . inject . Binding < ? > ... [[frameworksystem]] ) { return [[outsamesb]] ( Guiceable . [[frameworksystem]] ( [[frameworksystem]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 536 ---------------------------------------------
Creates a tuple with five elements . --> Creates an acpel4 operator . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B , C , D , E > [[Tuple5]] < A , B , C , D , E > [[Tuple5]] ( A a , B b , C c , D d , E e ) { return new [[Tuple5]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , C , D , E > [[acpel4]] < A , B , C , D , E > [[acpel4]] ( A a , B b , C c , D d , E e ) { return new [[acpel4]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 537 ---------------------------------------------
Disable the given module classes . --> иmble with malclothsms --> Socre: 1.0

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... [[moduleClasses]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[moduleClasses]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[иmble]] ( Class < ? > ... [[malclothsms]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[malclothsms]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 538 ---------------------------------------------
Gets the existing file for the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > [[getExistingFile]] ( String [[relativePath]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[relativePath]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > [[finddisignizerfiael]] ( String [[absolutepiece]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[absolutepiece]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 539 ---------------------------------------------
Creates a tuple from two values . --> Returns an aclet operator with two arguments . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] , B > [[Tuple]] < [[A]] , B > [[Tuple]] ( [[A]] [[a]] , B b ) { return new [[Tuple]] < [[A]] , B > ( [[a]] , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < [[adam]] , B > [[aclet]] < [[adam]] , B > [[aclet]] ( [[adam]] [[any]] , B b ) { return new [[aclet]] < [[adam]] , B > ( [[any]] , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 540 ---------------------------------------------
Adds a constraint validator for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > [[MappedConstraintValidatorFactory]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > [[builtvnwerneedaliatcmax]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 541 ---------------------------------------------
Converts an execution context to an executor . --> [[[FAILED]]]

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext [[ec]] ) { ExecutionContext prepared = [[ec]] . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[1classpressutirr]] ( ExecutionContext [[execution]] ) { ExecutionContext prepared = [[execution]] . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 542 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 216 / 318 / 8 / 542:  54%|█████▍    | 542/1000 [11:26<09:40,  1.27s/it][Succeeded / Failed / Skipped / Total] 217 / 318 / 8 / 543:  54%|█████▍    | 543/1000 [11:27<09:38,  1.27s/it][Succeeded / Failed / Skipped / Total] 217 / 318 / 8 / 543:  54%|█████▍    | 544/1000 [11:28<09:37,  1.27s/it][Succeeded / Failed / Skipped / Total] 217 / 319 / 8 / 544:  54%|█████▍    | 544/1000 [11:28<09:37,  1.27s/it][Succeeded / Failed / Skipped / Total] 217 / 320 / 8 / 545:  55%|█████▍    | 545/1000 [11:30<09:36,  1.27s/it][Succeeded / Failed / Skipped / Total] 217 / 320 / 8 / 545:  55%|█████▍    | 546/1000 [11:30<09:34,  1.27s/it][Succeeded / Failed / Skipped / Total] 218 / 320 / 8 / 546:  55%|█████▍    | 546/1000 [11:30<09:34,  1.27s/it][Succeeded / Failed / Skipped / Total] 218 / 321 / 8 / 547:  55%|█████▍    | 547/1000 [11:33<09:33,  1.27s/it][Succeeded / Failed / Skipped / Total] 218 / 321 / 8 / 547:  55%|█████▍    | 548/1000 [11:34<09:32,  1.27s/it][Succeeded / Failed / Skipped / Total] 219 / 321 / 8 / 548:  55%|█████▍    | 548/1000 [11:34<09:32,  1.27s/it]Create a ByteString from a String --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String [[callbackName]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[collections]] ( String [[hostbernet]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[hostbernet]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 543 ---------------------------------------------
Creates a new instance of the given key . --> Create a new instance of ConstraintValidator --> Socre: 1.0

[[[[Adv]]]]: private < [[T]] [[extends]] ConstraintValidator < ? , ? > > [[T]] newInstance ( Class < [[T]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < [[art]] [[ps]] ConstraintValidator < ? , ? > > [[art]] newInstance ( Class < [[art]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 544 ---------------------------------------------
Create a flow from json . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[json]] ( String callbackName ) { return Flow . of ( JsonNode . class ) . map ( [[json]] -> { return ByteString . fromString ( Json . stringify ( [[json]] ) ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[thesom]] ( String callbackName ) { return Flow . of ( JsonNode . class ) . map ( [[thesom]] -> { return ByteString . fromString ( Json . stringify ( [[thesom]] ) ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 545 ---------------------------------------------
Creates a new JPAConfig instance with the specified name and persistence unit . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig of ( String name , String [[unitName]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , [[unitName]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig of ( String name , String [[baselist]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , [[baselist]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 546 ---------------------------------------------
Called when a client error occurs . --> Calls onBadRequest or onOtherClientError --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onClientError]] ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[hourcasiledhurn]] ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 547 ---------------------------------------------
Creates a new JPAConfig from a map of persistence units . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[from]] ( Map < String , String > [[map]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : [[map]] . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig [[format]] ( Map < String , String > [[book]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : [[book]] . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 548 ---------------------------------------------
Log internal server error . --> Logs the error to the logger --> Socre: 1.0

[[[[Adv]]]]: protected void [[logServerError]] ( RequestHeader request , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , request . method ( ) , request . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void [[loggeddiustinork]] ( RequestHeader request , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , request . method ( ) , request . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 549 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 219 / 322 / 8 / 549:  55%|█████▍    | 549/1000 [11:34<09:30,  1.27s/it][Succeeded / Failed / Skipped / Total] 219 / 322 / 8 / 549:  55%|█████▌    | 550/1000 [11:34<09:28,  1.26s/it][Succeeded / Failed / Skipped / Total] 220 / 322 / 8 / 550:  55%|█████▌    | 550/1000 [11:34<09:28,  1.26s/it][Succeeded / Failed / Skipped / Total] 220 / 323 / 8 / 551:  55%|█████▌    | 551/1000 [11:34<09:26,  1.26s/it][Succeeded / Failed / Skipped / Total] 220 / 323 / 8 / 551:  55%|█████▌    | 552/1000 [11:36<09:25,  1.26s/it][Succeeded / Failed / Skipped / Total] 220 / 324 / 8 / 552:  55%|█████▌    | 552/1000 [11:36<09:25,  1.26s/it][Succeeded / Failed / Skipped / Total] 220 / 325 / 8 / 553:  55%|█████▌    | 553/1000 [11:37<09:23,  1.26s/it][Succeeded / Failed / Skipped / Total] 220 / 325 / 8 / 553:  55%|█████▌    | 554/1000 [11:40<09:23,  1.26s/it][Succeeded / Failed / Skipped / Total] 220 / 326 / 8 / 554:  55%|█████▌    | 554/1000 [11:40<09:23,  1.26s/it][Succeeded / Failed / Skipped / Total] 221 / 326 / 8 / 555:  56%|█████▌    | 555/1000 [11:40<09:21,  1.26s/it][Succeeded / Failed / Skipped / Total] 221 / 326 / 8 / 555:  56%|█████▌    | 556/1000 [11:43<09:21,  1.27s/it]Handles a bad request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , message , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[abstractendreve]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , message , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 550 ---------------------------------------------
Handles an internal server error . --> Handles an exception thrown by ogevamountkurra --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onServerError]] ( RequestHeader request , Throwable exception ) { try { UsefulException usefulException = throwableToUsefulException ( exception ) ; logServerError ( request , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , usefulException ) ; default : return onDevServerError ( request , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[ogevamountkurra]] ( RequestHeader request , Throwable exception ) { try { UsefulException usefulException = throwableToUsefulException ( exception ) ; logServerError ( request , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , usefulException ) ; default : return onDevServerError ( request , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 551 ---------------------------------------------
Handles a 403 forbidden page . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onForbidden]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > [[agentrebenran]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 552 ---------------------------------------------
Handles 404 Not Found event . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onNotFound]] ( RequestHeader request , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > [[blahridgefecio]] ( RequestHeader request , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 553 ---------------------------------------------
Creates a new JPAConfig instance with the specified persistence units . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String [[n1]] , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[n1]] , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig [[using]] ( String [[chosenpe]] , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[chosenpe]] , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 554 ---------------------------------------------
Convert throwable to useful exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[casteprountssiuluzacle]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 555 ---------------------------------------------
Creates a BuildDocHandler from the given directory and jar file . --> Asduockjandlezar . --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base ) { return [[fromDirectoryAndJar]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[asduockjandlezar]] ( File directory , JarFile jarFile , String base ) { return [[asduockjandlezar]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 556 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 221 / 327 / 8 / 556:  56%|█████▌    | 556/1000 [11:43<09:21,  1.27s/it][Succeeded / Failed / Skipped / Total] 221 / 328 / 8 / 557:  56%|█████▌    | 557/1000 [11:43<09:19,  1.26s/it][Succeeded / Failed / Skipped / Total] 221 / 328 / 8 / 557:  56%|█████▌    | 558/1000 [11:43<09:17,  1.26s/it][Succeeded / Failed / Skipped / Total] 222 / 328 / 8 / 558:  56%|█████▌    | 558/1000 [11:43<09:17,  1.26s/it][Succeeded / Failed / Skipped / Total] 222 / 329 / 8 / 559:  56%|█████▌    | 559/1000 [11:44<09:15,  1.26s/it][Succeeded / Failed / Skipped / Total] 222 / 329 / 8 / 559:  56%|█████▌    | 560/1000 [11:48<09:16,  1.26s/it][Succeeded / Failed / Skipped / Total] 222 / 330 / 8 / 560:  56%|█████▌    | 560/1000 [11:48<09:16,  1.26s/it][Succeeded / Failed / Skipped / Total] 222 / 331 / 8 / 561:  56%|█████▌    | 561/1000 [11:53<09:18,  1.27s/it][Succeeded / Failed / Skipped / Total] 222 / 331 / 8 / 561:  56%|█████▌    | 562/1000 [11:53<09:16,  1.27s/it][Succeeded / Failed / Skipped / Total] 222 / 332 / 8 / 562:  56%|█████▌    | 562/1000 [11:53<09:16,  1.27s/it][Succeeded / Failed / Skipped / Total] 222 / 333 / 8 / 563:  56%|█████▋    | 563/1000 [11:53<09:14,  1.27s/it][Succeeded / Failed / Skipped / Total] 222 / 333 / 8 / 563:  56%|█████▋    | 564/1000 [11:54<09:12,  1.27s/it][Succeeded / Failed / Skipped / Total] 222 / 334 / 8 / 564:  56%|█████▋    | 564/1000 [11:54<09:12,  1.27s/it][Succeeded / Failed / Skipped / Total] 222 / 334 / 9 / 565:  56%|█████▋    | 565/1000 [11:54<09:10,  1.26s/it][Succeeded / Failed / Skipped / Total] 222 / 334 / 9 / 565:  57%|█████▋    | 566/1000 [11:55<09:08,  1.26s/it]Handles an internal server error . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onDevServerError]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > [[altdedreevainozer]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 557 ---------------------------------------------
Get matching accessible method . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[givereeglingaragesancecophuoper]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 558 ---------------------------------------------
Creates a new BuildDocHandler from a directory . --> Return dreversrstu handler --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File directory ) { FileRepository [[repo]] = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[returndreversrstu]] ( File directory ) { FileRepository [[exω]] = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( [[exω]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 559 ---------------------------------------------
Called when an internal server error occurs . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onProdServerError]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > [[abridesardirc]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 560 ---------------------------------------------
Consume data . --> [[[FAILED]]]

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[ofs]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 561 ---------------------------------------------
Sends the given status code with the given JSON content . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , JsonNode [[content]] ) { return [[status]] ( [[status]] , [[content]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result [[position]] ( int [[slash]] , JsonNode [[cm]] ) { return [[position]] ( [[position]] , [[cm]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 562 ---------------------------------------------
Creates a new HttpEntity with the given data chunked . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > [[data]] , Optional < String > contentType ) { return new Chunked ( [[data]] . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[boxhed]] ( Source < ByteString , ? > [[traffic]] , Optional < String > contentType ) { return new Chunked ( [[traffic]] . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 563 ---------------------------------------------
Create a build doc handler from a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile [[jarFile]] , String base ) { FileRepository repo = new JarRepository ( [[jarFile]] , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[matchcode]] ( JarFile [[assemblyفplane]] , String base ) { FileRepository repo = new JarRepository ( [[assemblyفplane]] , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 564 ---------------------------------------------
Creates an HttpEntity from the given Content . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[fromContent]] ( Content content , String [[charset]] ) { String [[body]] ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity [[atorconthet]] ( Content content , String [[slashachi]] ) { String [[torso]] ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 565 ---------------------------------------------
Finds user by id . --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 566 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 222 / 335 / 9 / 566:  57%|█████▋    | 566/1000 [11:55<09:08,  1.26s/it][Succeeded / Failed / Skipped / Total] 222 / 336 / 9 / 567:  57%|█████▋    | 567/1000 [11:57<09:08,  1.27s/it][Succeeded / Failed / Skipped / Total] 222 / 336 / 9 / 567:  57%|█████▋    | 568/1000 [11:58<09:06,  1.27s/it][Succeeded / Failed / Skipped / Total] 223 / 336 / 9 / 568:  57%|█████▋    | 568/1000 [11:58<09:06,  1.27s/it][Succeeded / Failed / Skipped / Total] 223 / 337 / 9 / 569:  57%|█████▋    | 569/1000 [12:00<09:05,  1.27s/it][Succeeded / Failed / Skipped / Total] 223 / 337 / 9 / 569:  57%|█████▋    | 570/1000 [12:00<09:03,  1.26s/it][Succeeded / Failed / Skipped / Total] 223 / 338 / 9 / 570:  57%|█████▋    | 570/1000 [12:00<09:03,  1.26s/it][Succeeded / Failed / Skipped / Total] 224 / 338 / 9 / 571:  57%|█████▋    | 571/1000 [12:01<09:02,  1.26s/it][Succeeded / Failed / Skipped / Total] 224 / 338 / 9 / 571:  57%|█████▋    | 572/1000 [12:02<09:00,  1.26s/it][Succeeded / Failed / Skipped / Total] 225 / 338 / 9 / 572:  57%|█████▋    | 572/1000 [12:02<09:00,  1.26s/it][Succeeded / Failed / Skipped / Total] 225 / 339 / 9 / 573:  57%|█████▋    | 573/1000 [12:03<08:59,  1.26s/it][Succeeded / Failed / Skipped / Total] 225 / 339 / 9 / 573:  57%|█████▋    | 574/1000 [12:03<08:56,  1.26s/it][Succeeded / Failed / Skipped / Total] 226 / 339 / 9 / 574:  57%|█████▋    | 574/1000 [12:03<08:56,  1.26s/it][Succeeded / Failed / Skipped / Total] 227 / 339 / 9 / 575:  57%|█████▊    | 575/1000 [12:04<08:55,  1.26s/it][Succeeded / Failed / Skipped / Total] 227 / 339 / 9 / 575:  58%|█████▊    | 576/1000 [12:05<08:53,  1.26s/it]Creates a new HttpEntity from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String [[content]] , String [[charset]] ) { return new Strict ( ByteString . fromString ( [[content]] , [[charset]] ) , Optional . of ( "text/plain; charset=" + [[charset]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[mostsurric]] ( String [[canvas]] , String [[kming]] ) { return new Strict ( ByteString . fromString ( [[canvas]] , [[kming]] ) , Optional . of ( "text/plain; charset=" + [[kming]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 567 ---------------------------------------------
Returns a unique copy of this call . --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[additionally]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 568 ---------------------------------------------
Sends the given HTTP status code and content to the client . --> Send content with status code and formatoungeln --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int status , InputStream content , long [[contentLength]] ) { return status ( status ) . sendInputStream ( content , [[contentLength]] ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result status ( int status , InputStream content , long [[formatoungeln]] ) { return status ( status ) . sendInputStream ( content , [[formatoungeln]] ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 569 ---------------------------------------------
Returns the preferred language from the given list of languages . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > [[candidates]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidates]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[rejected]] ( Collection < Lang > [[finalists]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[finalists]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 570 ---------------------------------------------
Sends a JSON response with the given status code and content . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result status ( int status , JsonNode [[content]] , JsonEncoding [[encoding]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( [[content]] , [[encoding]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result status ( int status , JsonNode [[contents]] , JsonEncoding [[archive]] ) { if ( [[contents]] == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( [[contents]] , [[archive]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 571 ---------------------------------------------
Creates a new HTTP result with the given status code and content . --> Send cargo request to johnston --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , byte [ ] [[content]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[status]] , new HttpEntity . Strict ( ByteString . fromArray ( [[content]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result [[cargo]] ( int [[johnston]] , byte [ ] [[cache]] ) { if ( [[cache]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[cargo]] , new HttpEntity . Strict ( ByteString . fromArray ( [[cache]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 572 ---------------------------------------------
Returns the absolute URL for the given request . --> Returns the extremeourt of the given request --> Socre: 1.0

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request request ) { return [[absoluteURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[extremeourt]] ( Http . Request request ) { return [[extremeourt]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 573 ---------------------------------------------
Sends a response with the given status code and file content . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result status ( int [[status]] , File [[content]] ) { return status ( status , [[content]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result status ( int [[io]] , File [[specification]] ) { return status ( status , [[specification]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 574 ---------------------------------------------
Creates a new call with the given fragment . --> list contraccence --> Socre: 1.0

[[[[Adv]]]]: public Call [[withFragment]] ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call [[listcontraccence]] ( String [[bit]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[bit]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 575 ---------------------------------------------
Returns the web socket URL for the given request . --> Returns the destinationjuedturau for the given request --> Socre: 1.0

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request request ) { return [[webSocketURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[destinationjuedturau]] ( Http . Request request ) { return [[destinationjuedturau]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 576 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 227 / 340 / 9 / 576:  58%|█████▊    | 576/1000 [12:05<08:53,  1.26s/it][Succeeded / Failed / Skipped / Total] 227 / 341 / 9 / 577:  58%|█████▊    | 577/1000 [12:06<08:52,  1.26s/it][Succeeded / Failed / Skipped / Total] 227 / 341 / 9 / 577:  58%|█████▊    | 578/1000 [12:06<08:50,  1.26s/it][Succeeded / Failed / Skipped / Total] 227 / 342 / 9 / 578:  58%|█████▊    | 578/1000 [12:06<08:50,  1.26s/it][Succeeded / Failed / Skipped / Total] 227 / 343 / 9 / 579:  58%|█████▊    | 579/1000 [12:08<08:49,  1.26s/it][Succeeded / Failed / Skipped / Total] 227 / 343 / 9 / 579:  58%|█████▊    | 580/1000 [12:08<08:47,  1.26s/it][Succeeded / Failed / Skipped / Total] 228 / 343 / 9 / 580:  58%|█████▊    | 580/1000 [12:08<08:47,  1.26s/it][Succeeded / Failed / Skipped / Total] 228 / 344 / 9 / 581:  58%|█████▊    | 581/1000 [12:11<08:47,  1.26s/it][Succeeded / Failed / Skipped / Total] 228 / 344 / 9 / 581:  58%|█████▊    | 582/1000 [12:11<08:45,  1.26s/it][Succeeded / Failed / Skipped / Total] 229 / 344 / 9 / 582:  58%|█████▊    | 582/1000 [12:11<08:45,  1.26s/it]Create a BuildDocHandler from a set of resources . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromResources]] ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler [[closestruphearows]] ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 577 ---------------------------------------------
Create a build doc handler from a directory and a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile [[jarFile]] , String [[base]] , boolean fallbackToJar ) { FileRepository [[fileRepo]] = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( [[jarFile]] , Option . apply ( [[base]] ) ) ; FileRepository [[manualRepo]] ; if ( fallbackToJar ) { [[manualRepo]] = new AggregateFileRepository ( new FileRepository [ ] { [[fileRepo]] , jarRepo } ) ; } else { [[manualRepo]] = [[fileRepo]] ; } return new DocumentationHandler ( [[manualRepo]] , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[returningyileconceptanddivision]] ( File directory , JarFile [[assemblydil]] , String [[gallery]] , boolean fallbackToJar ) { FileRepository [[autorunpi]] = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( [[assemblydil]] , Option . apply ( [[gallery]] ) ) ; FileRepository [[carpentererove]] ; if ( fallbackToJar ) { [[carpentererove]] = new AggregateFileRepository ( new FileRepository [ ] { [[autorunpi]] , jarRepo } ) ; } else { [[carpentererove]] = [[autorunpi]] ; } return new DocumentationHandler ( [[carpentererove]] , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 578 ---------------------------------------------
Converts a JSON node to an instance of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[no]] > [[no]] fromJson ( JsonNode json , Class < [[no]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 579 ---------------------------------------------
Returns a function that executes the given ConnectionCallable on the given connection . --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[block]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection connection ) { try { return [[block]] . call ( connection ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[name]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection connection ) { try { return [[name]] . call ( connection ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 580 ---------------------------------------------
Converts an object to a JSON node . --> Returns the topwespace representation of the code --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[topwespace]] ( final Object [[code]] ) { try { return mapper ( ) . valueToTree ( [[code]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 581 ---------------------------------------------
Parse a JSON document from an input stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[busser]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 582 ---------------------------------------------
Parses a string into a JsonNode . --> Returns the ganop representation of the CRCL --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[parse]] ( String [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[ganop]] ( String [[crcl]] ) { try { return mapper ( ) . readTree ( [[crcl]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 583 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 229 / 345 / 9 / 583:  58%|█████▊    | 583/1000 [12:11<08:43,  1.26s/it][Succeeded / Failed / Skipped / Total] 229 / 345 / 9 / 583:  58%|█████▊    | 584/1000 [12:14<08:43,  1.26s/it][Succeeded / Failed / Skipped / Total] 229 / 346 / 9 / 584:  58%|█████▊    | 584/1000 [12:14<08:43,  1.26s/it][Succeeded / Failed / Skipped / Total] 229 / 347 / 9 / 585:  58%|█████▊    | 585/1000 [12:15<08:41,  1.26s/it][Succeeded / Failed / Skipped / Total] 229 / 347 / 9 / 585:  59%|█████▊    | 586/1000 [12:16<08:40,  1.26s/it][Succeeded / Failed / Skipped / Total] 230 / 347 / 9 / 586:  59%|█████▊    | 586/1000 [12:16<08:40,  1.26s/it][Succeeded / Failed / Skipped / Total] 230 / 348 / 9 / 587:  59%|█████▊    | 587/1000 [12:17<08:39,  1.26s/it][Succeeded / Failed / Skipped / Total] 230 / 348 / 9 / 587:  59%|█████▉    | 588/1000 [12:18<08:37,  1.26s/it][Succeeded / Failed / Skipped / Total] 230 / 349 / 9 / 588:  59%|█████▉    | 588/1000 [12:18<08:37,  1.26s/it][Succeeded / Failed / Skipped / Total] 230 / 350 / 9 / 589:  59%|█████▉    | 589/1000 [12:22<08:37,  1.26s/it][Succeeded / Failed / Skipped / Total] 230 / 350 / 9 / 589:  59%|█████▉    | 590/1000 [12:23<08:36,  1.26s/it][Succeeded / Failed / Skipped / Total] 230 / 351 / 9 / 590:  59%|█████▉    | 590/1000 [12:23<08:36,  1.26s/it][Succeeded / Failed / Skipped / Total] 230 / 352 / 9 / 591:  59%|█████▉    | 591/1000 [12:24<08:35,  1.26s/it][Succeeded / Failed / Skipped / Total] 230 / 352 / 9 / 591:  59%|█████▉    | 592/1000 [12:25<08:33,  1.26s/it]Returns a function that executes a ConnectionRunnable on a connection . --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectionFunction]] ( final ConnectionRunnable [[block]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { [[block]] . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[boundarybooktime]] ( final ConnectionRunnable [[side]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { [[side]] . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 584 ---------------------------------------------
Creates a server for the given router . --> [[[FAILED]]]

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode [[mode]] , int [[port]] , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . [[mode]] ( [[mode]] ) . http ( [[port]] ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[programconting]] ( Mode [[manner]] , int [[ports]] , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . [[manner]] ( [[manner]] ) . http ( [[ports]] ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 585 ---------------------------------------------
Converts a set of constraint descriptors to a list of displayable constraints . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > [[constraints]] ) { return [[constraints]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayivelfwerint]] ( Set < ConstraintDescriptor < ? > > [[rules]] ) { return [[rules]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayivelfwerint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 586 ---------------------------------------------
Parses a cron expression and returns the next valid time after it . --> Get the next valid time for reasywroevactivation --> Socre: 1.0

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String cron ) { try { return new CronExpression ( cron ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[reasywroevactivation]] ( String cron ) { try { return new CronExpression ( cron ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 587 ---------------------------------------------
Returns the relative path of startPath to targetPath . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[relative]] ( String startPath , String targetPath ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[subordinate]] ( String startPath , String targetPath ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 588 ---------------------------------------------
Gets displayable constraint . --> [[[FAILED]]]

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[displayableConstraint]] ( ConstraintDescriptor < ? > constraint ) { final Display displayAnnotation = constraint . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> constraint . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[doiveexpospctor]] ( ConstraintDescriptor < ? > constraint ) { final Display displayAnnotation = constraint . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> constraint . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 589 ---------------------------------------------
Renders a todo page . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[TODO]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result [[dalg]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 590 ---------------------------------------------
Create a GuiceApplicationBuilder with the given ApplicationLoader . Context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context [[context]] ) { return initialBuilder . in ( [[context]] . environment ( ) ) . loadConfig ( [[context]] . initialConfig ( ) ) . overrides ( overrides ( [[context]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[trainer]] ( ApplicationLoader . Context [[radius]] ) { return initialBuilder . in ( [[radius]] . environment ( ) ) . loadConfig ( [[radius]] . initialConfig ( ) ) . overrides ( overrides ( [[radius]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 591 ---------------------------------------------
Get the next interval from a cron pattern on a given date --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[cronInterval]] ( String [[cron]] , Date [[date]] ) { try { return new CronExpression ( [[cron]] ) . getNextInterval ( [[date]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long [[carennatrge]] ( String [[cean]] , Date [[a]] ) { try { return new CronExpression ( [[cean]] ) . getNextInterval ( [[a]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cean]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 592 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 230 / 353 / 9 / 592:  59%|█████▉    | 592/1000 [12:25<08:33,  1.26s/it][Succeeded / Failed / Skipped / Total] 230 / 354 / 9 / 593:  59%|█████▉    | 593/1000 [12:25<08:31,  1.26s/it][Succeeded / Failed / Skipped / Total] 230 / 354 / 9 / 593:  59%|█████▉    | 594/1000 [12:25<08:29,  1.26s/it][Succeeded / Failed / Skipped / Total] 230 / 355 / 9 / 594:  59%|█████▉    | 594/1000 [12:25<08:29,  1.26s/it][Succeeded / Failed / Skipped / Total] 231 / 355 / 9 / 595:  60%|█████▉    | 595/1000 [12:25<08:27,  1.25s/it][Succeeded / Failed / Skipped / Total] 231 / 355 / 9 / 595:  60%|█████▉    | 596/1000 [12:26<08:25,  1.25s/it][Succeeded / Failed / Skipped / Total] 231 / 356 / 9 / 596:  60%|█████▉    | 596/1000 [12:26<08:25,  1.25s/it][Succeeded / Failed / Skipped / Total] 231 / 357 / 9 / 597:  60%|█████▉    | 597/1000 [12:27<08:24,  1.25s/it][Succeeded / Failed / Skipped / Total] 231 / 357 / 9 / 597:  60%|█████▉    | 598/1000 [12:28<08:23,  1.25s/it][Succeeded / Failed / Skipped / Total] 231 / 358 / 9 / 598:  60%|█████▉    | 598/1000 [12:28<08:23,  1.25s/it][Succeeded / Failed / Skipped / Total] 231 / 359 / 9 / 599:  60%|█████▉    | 599/1000 [12:30<08:22,  1.25s/it][Succeeded / Failed / Skipped / Total] 231 / 359 / 9 / 599:  60%|██████    | 600/1000 [12:30<08:20,  1.25s/it][Succeeded / Failed / Skipped / Total] 231 / 360 / 9 / 600:  60%|██████    | 600/1000 [12:30<08:20,  1.25s/it]Timeouts the current thread for the specified amount of time . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[timeout]] ( final CompletionStage < A > stage , final long amount , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration [[duration]] = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( [[duration]] , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[minuteoint]] ( final CompletionStage < A > stage , final long amount , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration [[c]] = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( [[c]] , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 593 ---------------------------------------------
Creates a new WS client . --> [[[FAILED]]]

[[[[Adv]]]]: public static AhcWSClient [[create]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient [[capture]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 594 ---------------------------------------------
Returns a binding key that is qualified with the given instance . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[defines]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 595 ---------------------------------------------
Returns the canonical path of the given URL . --> Convert aaaport to apostle --> Socre: 1.0

[[[[Adv]]]]: public static String [[canonical]] ( String [[url]] ) { String [ ] urlPath = toSegments ( [[url]] ) ; Stack < String > [[canonical]] = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[canonical]] . empty ( ) && [[canonical]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[canonical]] . push ( comp ) ; else [[canonical]] . pop ( ) ; } String prefixSep = [[url]] . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = [[url]] . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[canonical]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String [[apostle]] ( String [[aaaport]] ) { String [ ] urlPath = toSegments ( [[aaaport]] ) ; Stack < String > [[apostle]] = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[apostle]] . empty ( ) && [[apostle]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[apostle]] . push ( comp ) ; else [[apostle]] . pop ( ) ; } String prefixSep = [[aaaport]] . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = [[aaaport]] . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[apostle]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 596 ---------------------------------------------
Returns a binding key that is qualified with the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[java]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 597 ---------------------------------------------
Sets a session value . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static void [[session]] ( String [[key]] , String [[value]] ) { [[session]] ( ) . put ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void [[front]] ( String [[iv]] , String [[designation]] ) { [[front]] ( ) . put ( [[iv]] , [[designation]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 598 ---------------------------------------------
Binds the binding to the given supplier . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[supports]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 599 ---------------------------------------------
Creates a new binding with the specified key . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > key ) { return underlying . to ( key . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[time]] ( final BindingKey < ? extends T > key ) { return underlying . to ( key . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 600 ---------------------------------------------
Binds this binding to the given implementation . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Class < ? extends T > [[implementation]] ) { return underlying . to ( [[implementation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > [[outside]] ( final Class < ? extends T > [[edge]] ) { return underlying . to ( [[edge]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 601 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 231 / 361 / 9 / 601:  60%|██████    | 601/1000 [12:30<08:18,  1.25s/it][Succeeded / Failed / Skipped / Total] 231 / 361 / 9 / 601:  60%|██████    | 602/1000 [12:30<08:16,  1.25s/it][Succeeded / Failed / Skipped / Total] 231 / 362 / 9 / 602:  60%|██████    | 602/1000 [12:30<08:16,  1.25s/it][Succeeded / Failed / Skipped / Total] 232 / 362 / 9 / 603:  60%|██████    | 603/1000 [12:32<08:15,  1.25s/it][Succeeded / Failed / Skipped / Total] 232 / 362 / 9 / 603:  60%|██████    | 604/1000 [12:33<08:14,  1.25s/it][Succeeded / Failed / Skipped / Total] 232 / 363 / 9 / 604:  60%|██████    | 604/1000 [12:33<08:14,  1.25s/it][Succeeded / Failed / Skipped / Total] 233 / 363 / 9 / 605:  60%|██████    | 605/1000 [12:38<08:15,  1.25s/it][Succeeded / Failed / Skipped / Total] 233 / 363 / 9 / 605:  61%|██████    | 606/1000 [12:38<08:13,  1.25s/it][Succeeded / Failed / Skipped / Total] 234 / 363 / 9 / 606:  61%|██████    | 606/1000 [12:38<08:13,  1.25s/it][Succeeded / Failed / Skipped / Total] 234 / 364 / 9 / 607:  61%|██████    | 607/1000 [12:39<08:11,  1.25s/it][Succeeded / Failed / Skipped / Total] 234 / 364 / 9 / 607:  61%|██████    | 608/1000 [12:39<08:09,  1.25s/it][Succeeded / Failed / Skipped / Total] 235 / 364 / 9 / 608:  61%|██████    | 608/1000 [12:39<08:09,  1.25s/it][Succeeded / Failed / Skipped / Total] 235 / 365 / 9 / 609:  61%|██████    | 609/1000 [12:39<08:07,  1.25s/it][Succeeded / Failed / Skipped / Total] 235 / 365 / 9 / 609:  61%|██████    | 610/1000 [12:41<08:07,  1.25s/it]Adds a flash value to the session . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String key , String value ) { [[flash]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[ink]] ( String key , String value ) { [[ink]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 602 ---------------------------------------------
Binds this binding to the provided provider . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > [[provider]] ) { return underlying . to ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[dom]] ( final Provider < ? extends T > [[provision]] ) { return underlying . to ( [[provision]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 603 ---------------------------------------------
Returns true if classArray is assignable to toClassArray --> Returns true iff comvarraya = toClassArray == toClassArray --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] [[classArray]] , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( [[classArray]] ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( [[classArray]] == null ) { [[classArray]] = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < [[classArray]] . length ; i ++ ) { if ( [[isAssignable]] ( [[classArray]] [ i ] , toClassArray [ i ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[avartidanaf]] ( Class < ? > [ ] [[comvarraya]] , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( [[comvarraya]] ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( [[comvarraya]] == null ) { [[comvarraya]] = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < [[comvarraya]] . length ; i ++ ) { if ( [[avartidanaf]] ( [[comvarraya]] [ i ] , toClassArray [ i ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 604 ---------------------------------------------
Convert this binding to the given provider . --> [[[FAILED]]]

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > [[toProvider]] ( final Class < P > [[provider]] ) { return underlying . toProvider ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > [[eprecire]] ( final Class < P > [[pts]] ) { return underlying . toProvider ( [[pts]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 605 ---------------------------------------------
Returns a GuiceApplicationBuilder with a configuration loaded from the given environment . --> Load environment config and likegiwraudy --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[withConfigLoader]] ( Function < Environment , Config > [[load]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( [[load]] . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[andlikegiwraudy]] ( Function < Environment , Config > [[task]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( [[task]] . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 606 ---------------------------------------------
Returns a GuiceApplicationBuilder with the given module loader . --> Returns a GuiceApplicationBuilder with a custom GuiceModuleLoader --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder withModuleLoader ( BiFunction < Environment , Config , List < GuiceableModule > > [[loader]] ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( [[loader]] . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder withModuleLoader ( BiFunction < Environment , Config , List < GuiceableModule > > [[campeer]] ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( [[campeer]] . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 607 ---------------------------------------------
Creates a new evolutions reader from a map of evolutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > [[evolutions]] ) { return new SimpleEvolutionsReader ( [[evolutions]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . [[chasu]] . EvolutionsReader [[2racper]] ( Map < String , List < Evolution > > [[chasu]] ) { return new SimpleEvolutionsReader ( [[chasu]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 608 ---------------------------------------------
Returns the available languages for the application . --> Returns a list of available organgas languages --> Socre: 1.0

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application [[app]] ) { play . api . i18n . Langs [[langs]] = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[availableLangs]] = Scala . asJava ( [[langs]] . availables ( ) ) ; return [[availableLangs]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[existingsg]] ( Application [[access]] ) { play . api . i18n . Langs [[wildsian]] = [[access]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[organgas]] = Scala . asJava ( [[wildsian]] . availables ( ) ) ; return [[organgas]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 609 ---------------------------------------------
Loads Guice modules into the application . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 610 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 235 / 366 / 9 / 610:  61%|██████    | 610/1000 [12:41<08:07,  1.25s/it][Succeeded / Failed / Skipped / Total] 235 / 367 / 9 / 611:  61%|██████    | 611/1000 [12:43<08:06,  1.25s/it][Succeeded / Failed / Skipped / Total] 235 / 367 / 9 / 611:  61%|██████    | 612/1000 [12:44<08:04,  1.25s/it][Succeeded / Failed / Skipped / Total] 235 / 368 / 9 / 612:  61%|██████    | 612/1000 [12:44<08:04,  1.25s/it][Succeeded / Failed / Skipped / Total] 235 / 369 / 9 / 613:  61%|██████▏   | 613/1000 [12:45<08:03,  1.25s/it][Succeeded / Failed / Skipped / Total] 235 / 369 / 9 / 613:  61%|██████▏   | 614/1000 [12:45<08:01,  1.25s/it][Succeeded / Failed / Skipped / Total] 235 / 370 / 9 / 614:  61%|██████▏   | 614/1000 [12:45<08:01,  1.25s/it][Succeeded / Failed / Skipped / Total] 236 / 370 / 9 / 615:  62%|██████▏   | 615/1000 [12:45<07:59,  1.25s/it][Succeeded / Failed / Skipped / Total] 236 / 370 / 9 / 615:  62%|██████▏   | 616/1000 [12:48<07:59,  1.25s/it][Succeeded / Failed / Skipped / Total] 236 / 371 / 9 / 616:  62%|██████▏   | 616/1000 [12:48<07:59,  1.25s/it][Succeeded / Failed / Skipped / Total] 237 / 371 / 9 / 617:  62%|██████▏   | 617/1000 [12:52<07:59,  1.25s/it][Succeeded / Failed / Skipped / Total] 237 / 371 / 9 / 617:  62%|██████▏   | 618/1000 [12:52<07:57,  1.25s/it]Creates a new evolutions reader for the default evolution . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[forDefault]] ( Evolution ... evolutions ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( evolutions ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[coxeract]] ( Evolution ... evolutions ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( evolutions ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 611 ---------------------------------------------
Loads the application with the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( com . google . inject . Module ... [[modules]] ) { return [[load]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[download]] ( com . google . inject . Module ... [[tiles]] ) { return [[download]] ( Guiceable . [[tiles]] ( [[tiles]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 612 ---------------------------------------------
Load the application with the given inject modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... [[modules]] ) { return load ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... [[skins]] ) { return load ( Guiceable . [[skins]] ( [[skins]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 613 ---------------------------------------------
Load the application with the given bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Binding < ? > ... [[bindings]] ) { return load ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Binding < ? > ... [[ogened]] ) { return load ( Guiceable . [[ogened]] ( [[ogened]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 614 ---------------------------------------------
Returns the preferred language from a list of languages . --> [[[FAILED]]]

[[[[Adv]]]]: public static Lang [[preferred]] ( Application app , List < Lang > availableLangs ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[supported]] ( Application app , List < Lang > availableLangs ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 615 ---------------------------------------------
Returns a new GuiceApplicationBuilder . --> Create a fossilubwlmaker guice application builder --> Socre: 1.0

[[[[Adv]]]]: protected GuiceApplicationBuilder [[newBuilder]] ( play . api . inject . guice . GuiceApplicationBuilder [[builder]] ) { return new GuiceApplicationBuilder ( [[builder]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder [[fossilubwlmaker]] ( play . api . inject . guice . GuiceApplicationBuilder [[workshop]] ) { return new GuiceApplicationBuilder ( [[workshop]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 616 ---------------------------------------------
Encodes the cookie into a cookie string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; [[encode]] ( buf , cookie ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String [[inply]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; [[inply]] ( buf , cookie ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 617 ---------------------------------------------
bypass with graph . --> bypasses mcconnellx with merge strategy --> Socre: 1.0

[[[[Adv]]]]: public static < [[In]] , [[FlowIn]] , Out > Flow < [[In]] , Out , ? > bypassWith ( Flow < [[In]] , F . Either < [[FlowIn]] , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < [[FlowIn]] , Out , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < [[FlowIn]] , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < [[inside]] , [[mcconnellx]] , Out > Flow < [[inside]] , Out , ? > bypassWith ( Flow < [[inside]] , F . Either < [[mcconnellx]] , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < [[mcconnellx]] , Out , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < [[mcconnellx]] , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 618 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 237 / 372 / 9 / 618:  62%|██████▏   | 618/1000 [12:52<07:57,  1.25s/it][Succeeded / Failed / Skipped / Total] 237 / 373 / 9 / 619:  62%|██████▏   | 619/1000 [12:54<07:56,  1.25s/it][Succeeded / Failed / Skipped / Total] 237 / 373 / 9 / 619:  62%|██████▏   | 620/1000 [12:56<07:56,  1.25s/it][Succeeded / Failed / Skipped / Total] 237 / 374 / 9 / 620:  62%|██████▏   | 620/1000 [12:56<07:56,  1.25s/it][Succeeded / Failed / Skipped / Total] 237 / 375 / 9 / 621:  62%|██████▏   | 621/1000 [12:57<07:54,  1.25s/it][Succeeded / Failed / Skipped / Total] 237 / 375 / 9 / 621:  62%|██████▏   | 622/1000 [12:57<07:52,  1.25s/it][Succeeded / Failed / Skipped / Total] 238 / 375 / 9 / 622:  62%|██████▏   | 622/1000 [12:57<07:52,  1.25s/it][Succeeded / Failed / Skipped / Total] 238 / 376 / 9 / 623:  62%|██████▏   | 623/1000 [12:59<07:51,  1.25s/it][Succeeded / Failed / Skipped / Total] 238 / 376 / 9 / 623:  62%|██████▏   | 624/1000 [12:59<07:49,  1.25s/it][Succeeded / Failed / Skipped / Total] 238 / 377 / 9 / 624:  62%|██████▏   | 624/1000 [12:59<07:49,  1.25s/it]Returns the first EntityManager bound to this thread . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( ) { Deque < EntityManager > ems = this . emStack ( "[[True]]" == "[[True]]" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager [[ae]] ( ) { Deque < EntityManager > ems = this . emStack ( "[[bye]]" == "[[bye]]" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 619 ---------------------------------------------
Cleans up the evolutions of a database . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database [[database]] , boolean autocommit , String schema ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( [[database]] . asScala ( ) , schema ) ; evolutions . evolve ( evolutions . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[improvementmmolvedviewt]] ( Database [[encyclopedia]] , boolean autocommit , String schema ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( [[encyclopedia]] . asScala ( ) , schema ) ; evolutions . evolve ( evolutions . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 620 ---------------------------------------------
Creates a new form with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public Form < T > [[fill]] ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > [[escape]] ( T [[flag]] ) { if ( [[flag]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[flag]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 621 ---------------------------------------------
Returns the global errors . --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[globaleroriosd]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 622 ---------------------------------------------
Returns the current EntityManager stack . --> Returns a Deque of EntityManagers that are actucked with edgeworksputweest --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[emStack]] ( boolean [[threadLocalFallback]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object [[emsObject]] = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( [[emsObject]] != null ) { return ( Deque < EntityManager > ) [[emsObject]] ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[actucked]] ( boolean [[edgeworksputweest]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object [[apparatusdeverse]] = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( [[apparatusdeverse]] != null ) { return ( Deque < EntityManager > ) [[apparatusdeverse]] ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 623 ---------------------------------------------
Push an EntityManager onto the stack or remove it from the stack . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager [[em]] , boolean [[threadLocalFallback]] ) { Deque < EntityManager > ems = this . emStack ( [[threadLocalFallback]] ) ; if ( [[em]] != null ) { ems . push ( [[em]] ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[dilopenveui]] ( EntityManager [[hem]] , boolean [[allytroconfallsb]] ) { Deque < EntityManager > ems = this . emStack ( [[allytroconfallsb]] ) ; if ( [[hem]] != null ) { ems . push ( [[hem]] ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 624 ---------------------------------------------
Convert error arguments to an unmodifiable list . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Object > [[convertErrorArguments]] ( Object [ ] arguments ) { if ( arguments == null ) { return Collections . emptyList ( ) ; } List < Object > [[converted]] = Arrays . stream ( arguments ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[converted]] ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > [[transformationiserveradgsates]] ( Object [ ] arguments ) { if ( arguments == null ) { return Collections . emptyList ( ) ; } List < Object > [[converting]] = Arrays . stream ( arguments ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[converting]] ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 625 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 239 / 377 / 9 / 625:  62%|██████▎   | 625/1000 [13:00<07:48,  1.25s/it][Succeeded / Failed / Skipped / Total] 239 / 377 / 9 / 625:  63%|██████▎   | 626/1000 [13:01<07:46,  1.25s/it][Succeeded / Failed / Skipped / Total] 239 / 378 / 9 / 626:  63%|██████▎   | 626/1000 [13:01<07:46,  1.25s/it][Succeeded / Failed / Skipped / Total] 239 / 379 / 9 / 627:  63%|██████▎   | 627/1000 [13:01<07:45,  1.25s/it][Succeeded / Failed / Skipped / Total] 239 / 379 / 9 / 627:  63%|██████▎   | 628/1000 [13:02<07:43,  1.25s/it][Succeeded / Failed / Skipped / Total] 239 / 380 / 9 / 628:  63%|██████▎   | 628/1000 [13:02<07:43,  1.25s/it][Succeeded / Failed / Skipped / Total] 239 / 381 / 9 / 629:  63%|██████▎   | 629/1000 [13:02<07:41,  1.24s/it][Succeeded / Failed / Skipped / Total] 239 / 381 / 9 / 629:  63%|██████▎   | 630/1000 [13:03<07:40,  1.24s/it][Succeeded / Failed / Skipped / Total] 239 / 382 / 9 / 630:  63%|██████▎   | 630/1000 [13:03<07:40,  1.24s/it][Succeeded / Failed / Skipped / Total] 240 / 382 / 9 / 631:  63%|██████▎   | 631/1000 [13:05<07:39,  1.25s/it][Succeeded / Failed / Skipped / Total] 240 / 382 / 9 / 631:  63%|██████▎   | 632/1000 [13:07<07:38,  1.25s/it][Succeeded / Failed / Skipped / Total] 240 / 383 / 9 / 632:  63%|██████▎   | 632/1000 [13:07<07:38,  1.25s/it][Succeeded / Failed / Skipped / Total] 240 / 384 / 9 / 633:  63%|██████▎   | 633/1000 [13:07<07:36,  1.24s/it][Succeeded / Failed / Skipped / Total] 240 / 384 / 9 / 633:  63%|██████▎   | 634/1000 [13:08<07:34,  1.24s/it]Returns the value associated with the given key . --> End optional . --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[end]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 626 ---------------------------------------------
Parses the given text into an instance of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[time]] > [[time]] parse ( String text , Class < [[time]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 627 ---------------------------------------------
Prints a value to a string . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[album]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[album]] . class ) ) { return conversion . convert ( t , [[album]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 628 ---------------------------------------------
Parses the given text into an instance of the given field . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[line]] > [[line]] parse ( Field field , String text ) { return ( [[line]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 629 ---------------------------------------------
Prints the type descriptor for the given field . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[port]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 630 ---------------------------------------------
Prints a type to a string . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[album]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[album]] . class ) ) ) { return ( [[album]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[album]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[album]] . class ) ) { return conversion . convert ( t , [[album]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 631 ---------------------------------------------
Registers an optional converter to the formatters . --> brewtecdmr . --> Socre: 1.0

[[[[Adv]]]]: private Formatters [[registerOptional]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters [[brewtecdmr]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 632 ---------------------------------------------
Fills the form with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public DynamicForm [[fill]] ( Map < String , Object > [[value]] ) { Form < Dynamic > [[form]] = super . fill ( new Dynamic ( [[value]] ) ) ; return new DynamicForm ( [[form]] . rawData ( ) , [[form]] . files ( ) , [[form]] . errors ( ) , [[form]] . [[value]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm [[file]] ( Map < String , Object > [[function]] ) { Form < Dynamic > [[pdf]] = super . fill ( new Dynamic ( [[function]] ) ) ; return new DynamicForm ( [[pdf]] . rawData ( ) , [[pdf]] . files ( ) , [[pdf]] . errors ( ) , [[pdf]] . [[function]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 633 ---------------------------------------------
Returns all errors as json . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[rasusaseront]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 634 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 240 / 385 / 9 / 634:  63%|██████▎   | 634/1000 [13:08<07:34,  1.24s/it][Succeeded / Failed / Skipped / Total] 240 / 386 / 9 / 635:  64%|██████▎   | 635/1000 [13:08<07:33,  1.24s/it][Succeeded / Failed / Skipped / Total] 240 / 386 / 9 / 635:  64%|██████▎   | 636/1000 [13:09<07:32,  1.24s/it][Succeeded / Failed / Skipped / Total] 241 / 386 / 9 / 636:  64%|██████▎   | 636/1000 [13:09<07:32,  1.24s/it][Succeeded / Failed / Skipped / Total] 242 / 386 / 9 / 637:  64%|██████▎   | 637/1000 [13:12<07:31,  1.24s/it][Succeeded / Failed / Skipped / Total] 242 / 386 / 9 / 637:  64%|██████▍   | 638/1000 [13:13<07:29,  1.24s/it][Succeeded / Failed / Skipped / Total] 242 / 387 / 9 / 638:  64%|██████▍   | 638/1000 [13:13<07:29,  1.24s/it][Succeeded / Failed / Skipped / Total] 242 / 388 / 9 / 639:  64%|██████▍   | 639/1000 [13:14<07:28,  1.24s/it][Succeeded / Failed / Skipped / Total] 242 / 388 / 9 / 639:  64%|██████▍   | 640/1000 [13:15<07:27,  1.24s/it][Succeeded / Failed / Skipped / Total] 242 / 389 / 9 / 640:  64%|██████▍   | 640/1000 [13:15<07:27,  1.24s/it][Succeeded / Failed / Skipped / Total] 242 / 390 / 9 / 641:  64%|██████▍   | 641/1000 [13:16<07:25,  1.24s/it][Succeeded / Failed / Skipped / Total] 242 / 390 / 9 / 641:  64%|██████▍   | 642/1000 [13:18<07:25,  1.24s/it]Create an ActorRef from a function . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > [[actorRef]] ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > [[extrawerfr]] ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 635 ---------------------------------------------
bypass with . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > bypassWith ( Function < In , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > flow ) { return bypassWith ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > bypassWith ( Function < In , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > flow ) { return bypassWith ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 636 ---------------------------------------------
Selects the nodes at the specified path . --> Get the preview nirs for a given node --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String path , Object node ) { return [[selectNodes]] ( path , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[previewnirs]] ( String path , Object node ) { return [[previewnirs]] ( path , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 637 ---------------------------------------------
Varargs to a scala Seq --> Defrungles an array of objects --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... array ) { return toSeq ( array ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[defrungles]] ( T ... array ) { return toSeq ( array ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 638 ---------------------------------------------
Registers a formatter for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[Formatters]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > [[canes]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 639 ---------------------------------------------
Convert a Java List to a scala Seq --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > list ) { return scala . collection . JavaConverters . asScalaBufferConverter ( list ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[andmequ]] ( java . util . List < T > list ) { return scala . collection . JavaConverters . asScalaBufferConverter ( list ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 640 ---------------------------------------------
Convert an array to a scala collection immutable Seq --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[andneq]] ( T [ ] [[add]] ) { return [[andneq]] ( java . util . Arrays . asList ( [[add]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 641 ---------------------------------------------
Encodes a cookie into a cookie string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String [[artize]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 642 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 242 / 391 / 9 / 642:  64%|██████▍   | 642/1000 [13:18<07:25,  1.24s/it][Succeeded / Failed / Skipped / Total] 243 / 391 / 9 / 643:  64%|██████▍   | 643/1000 [13:18<07:23,  1.24s/it][Succeeded / Failed / Skipped / Total] 243 / 391 / 9 / 643:  64%|██████▍   | 644/1000 [13:19<07:21,  1.24s/it][Succeeded / Failed / Skipped / Total] 244 / 391 / 9 / 644:  64%|██████▍   | 644/1000 [13:19<07:21,  1.24s/it][Succeeded / Failed / Skipped / Total] 245 / 391 / 9 / 645:  64%|██████▍   | 645/1000 [13:22<07:21,  1.24s/it][Succeeded / Failed / Skipped / Total] 245 / 391 / 9 / 645:  65%|██████▍   | 646/1000 [13:24<07:20,  1.25s/it][Succeeded / Failed / Skipped / Total] 245 / 392 / 9 / 646:  65%|██████▍   | 646/1000 [13:24<07:20,  1.25s/it][Succeeded / Failed / Skipped / Total] 245 / 393 / 9 / 647:  65%|██████▍   | 647/1000 [13:24<07:18,  1.24s/it][Succeeded / Failed / Skipped / Total] 245 / 393 / 9 / 647:  65%|██████▍   | 648/1000 [13:25<07:17,  1.24s/it][Succeeded / Failed / Skipped / Total] 246 / 393 / 9 / 648:  65%|██████▍   | 648/1000 [13:25<07:17,  1.24s/it]Maps a message type to a JSON object . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , Out > MappedWebSocketAcceptor < [[In]] , Out > [[json]] ( Class < [[In]] > [[in]] ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , [[in]] ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , [[in]] ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .

[[[[Adv]]]]: public static < [[im]] , Out > MappedWebSocketAcceptor < [[im]] , Out > [[mysa]] ( Class < [[im]] > [[her]] ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , [[her]] ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , [[her]] ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 643 ---------------------------------------------
Calculates the cost of promotion for primitive types . --> fixpreimeterferytorycom --> Socre: 1.0

[[[[Adv]]]]: private static float [[getPrimitivePromotionCost]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float [[fixpreimeterferytorycomտ]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 644 ---------------------------------------------
Calculates the total cost of the transformation . --> Werden form2ttleferncformedser proit --> Socre: 1.0

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[form2ttleferncformedserproit]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 645 ---------------------------------------------
Creates a new WebSocket object that accepts or returns either the result of the provided function . --> sitehiffenta combines two partial functions --> Socre: 1.0

[[[[Adv]]]]: private static < In , Out > [[WebSocket]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[WebSocket]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[flow]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[flow]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > [[sitehiffenta]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[sitehiffenta]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[frame]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[frame]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 646 ---------------------------------------------
Returns the message for the given key with the given arguments --> [[[FAILED]]]

[[[[Adv]]]]: public String at ( String [[key]] , Object ... [[args]] ) { return messagesApi . get ( lang , [[key]] , [[args]] ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String at ( String [[text]] , Object ... [[cogn]] ) { return messagesApi . get ( lang , [[text]] , [[cogn]] ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 647 ---------------------------------------------
Get a message by list of keys --> [[[FAILED]]]

[[[[Adv]]]]: public String [[at]] ( List < String > [[keys]] , Object ... [[args]] ) { return messagesApi . get ( lang , [[keys]] , [[args]] ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[hat]] ( List < String > [[words]] , Object ... [[afmes]] ) { return messagesApi . get ( lang , [[words]] , [[afmes]] ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 648 ---------------------------------------------
Creates a new database with the given driver url and configuration . --> buyefos buyefos db --> Socre: 1.0

[[[[Adv]]]]: public static Database [[createFrom]] ( String driver , String url , Map < String , ? extends Object > [[config]] ) { return [[createFrom]] ( "default" , driver , url , [[config]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[buyefos]] ( String driver , String url , Map < String , ? extends Object > [[pointerffergp]] ) { return [[buyefos]] ( "default" , driver , url , [[pointerffergp]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 649 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 247 / 393 / 9 / 649:  65%|██████▍   | 649/1000 [13:25<07:15,  1.24s/it][Succeeded / Failed / Skipped / Total] 247 / 393 / 9 / 649:  65%|██████▌   | 650/1000 [13:26<07:14,  1.24s/it][Succeeded / Failed / Skipped / Total] 247 / 394 / 9 / 650:  65%|██████▌   | 650/1000 [13:26<07:14,  1.24s/it][Succeeded / Failed / Skipped / Total] 247 / 394 / 10 / 651:  65%|██████▌   | 651/1000 [13:26<07:12,  1.24s/it][Succeeded / Failed / Skipped / Total] 247 / 394 / 10 / 651:  65%|██████▌   | 652/1000 [13:28<07:11,  1.24s/it][Succeeded / Failed / Skipped / Total] 248 / 394 / 10 / 652:  65%|██████▌   | 652/1000 [13:28<07:11,  1.24s/it][Succeeded / Failed / Skipped / Total] 249 / 394 / 10 / 653:  65%|██████▌   | 653/1000 [13:29<07:10,  1.24s/it][Succeeded / Failed / Skipped / Total] 249 / 394 / 10 / 653:  65%|██████▌   | 654/1000 [13:29<07:08,  1.24s/it]Returns true if the AccessibleObject is accessible but not accessible in a package . --> Returns true if the given AccessibleObject is accessible and the planaliversticworksce is true --> Socre: 1.0

[[[[Adv]]]]: static boolean [[setAccessibleWorkaround]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "[[False]]" != "[[False]]" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "[[True]]" == "[[True]]" ) ; return "[[True]]" == "[[True]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean [[planaliversticworksce]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "[[negative]]" != "[[negative]]" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "[[proving]]" == "[[proving]]" ) ; return "[[proving]]" == "[[proving]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 650 ---------------------------------------------
Creates a parallel sorter for the given array . --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter [[create]] ( Object [ ] [[arrays]] ) { Generator [[gen]] = new Generator ( ) ; [[gen]] . setArrays ( [[arrays]] ) ; return [[gen]] . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter [[organize]] ( Object [ ] [[cities]] ) { Generator [[est]] = new Generator ( ) ; [[est]] . setArrays ( [[cities]] ) ; return [[est]] . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 651 ---------------------------------------------
Emit a field instruction . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 652 ---------------------------------------------
Load an argument at the given index . --> load by kal at index --> Socre: 1.0

[[[[Adv]]]]: public void [[load_arg]] ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void [[loadbykal]] ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 653 ---------------------------------------------
Performs a numeric cast from one type to another . --> Andfactordume . --> Socre: 1.0

[[[[Adv]]]]: public void [[cast_numeric]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void [[andfactordume]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[andfactordume]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[andfactordume]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[andfactordume]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 654 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 249 / 395 / 10 / 654:  65%|██████▌   | 654/1000 [13:29<07:08,  1.24s/it][Succeeded / Failed / Skipped / Total] 249 / 396 / 10 / 655:  66%|██████▌   | 655/1000 [13:30<07:06,  1.24s/it][Succeeded / Failed / Skipped / Total] 249 / 396 / 10 / 655:  66%|██████▌   | 656/1000 [13:36<07:08,  1.25s/it][Succeeded / Failed / Skipped / Total] 249 / 397 / 10 / 656:  66%|██████▌   | 656/1000 [13:36<07:08,  1.25s/it]Registers a formatter for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends [[Annotation]] , T > [[Formatters]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends [[Annotation]] > annotationType = ( Class < ? extends [[Annotation]] > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends [[altoictel]] , T > [[formstors]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends [[altoictel]] > annotationType = ( Class < ? extends [[altoictel]] > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 655 ---------------------------------------------
Pushes a zero or null constant to the stack . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[zero_or_null]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[emptywyaarother]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 656 ---------------------------------------------
Invokes the protected method . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[invoke]] ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object [[outsidemade]] ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 657 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 249 / 398 / 10 / 657:  66%|██████▌   | 657/1000 [13:38<07:07,  1.25s/it][Succeeded / Failed / Skipped / Total] 249 / 398 / 10 / 657:  66%|██████▌   | 658/1000 [13:39<07:06,  1.25s/it][Succeeded / Failed / Skipped / Total] 249 / 399 / 10 / 658:  66%|██████▌   | 658/1000 [13:39<07:06,  1.25s/it][Succeeded / Failed / Skipped / Total] 249 / 400 / 10 / 659:  66%|██████▌   | 659/1000 [13:40<07:04,  1.24s/it][Succeeded / Failed / Skipped / Total] 249 / 400 / 10 / 659:  66%|██████▌   | 660/1000 [13:43<07:04,  1.25s/it][Succeeded / Failed / Skipped / Total] 250 / 400 / 10 / 660:  66%|██████▌   | 660/1000 [13:43<07:04,  1.25s/it][Succeeded / Failed / Skipped / Total] 251 / 400 / 10 / 661:  66%|██████▌   | 661/1000 [13:43<07:02,  1.25s/it][Succeeded / Failed / Skipped / Total] 251 / 400 / 10 / 661:  66%|██████▌   | 662/1000 [13:44<07:00,  1.25s/it]Unbox or zero . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[unbox_or_zero]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void [[dufusofuraone]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 658 ---------------------------------------------
Performs a quick sort using the specified comparator . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[quickSort]] ( int index , int [[lo]] , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( [[lo]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void [[bucketaverpace]] ( int index , int [[ho]] , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( [[ho]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 659 ---------------------------------------------
Returns the cost of an Object transformation . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getObjectTransformationCost]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * [[an]] Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float [[collecturieautovisdalptioncust]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * [[s]] Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 660 ---------------------------------------------
Generates code to get a field from the provider . --> Get a field from the provider . --> Socre: 1.0

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type [[type]] = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( [[type]] ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type [[t]] = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( [[t]] ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 661 ---------------------------------------------
Get all methods from a superclass and an array of interfaces . --> Collectcithowd . --> Socre: 0.9999999999820136

[[[[Adv]]]]: public static void [[getMethods]] ( Class superclass , Class [ ] [[interfaces]] , List methods ) { [[getMethods]] ( superclass , [[interfaces]] , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void [[collectcithowd]] ( Class superclass , Class [ ] [[etc]] , List methods ) { [[collectcithowd]] ( superclass , [[etc]] , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 662 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 251 / 401 / 10 / 662:  66%|██████▌   | 662/1000 [13:44<07:00,  1.25s/it][Succeeded / Failed / Skipped / Total] 251 / 402 / 10 / 663:  66%|██████▋   | 663/1000 [13:44<06:59,  1.24s/it][Succeeded / Failed / Skipped / Total] 251 / 402 / 10 / 663:  66%|██████▋   | 664/1000 [13:48<06:59,  1.25s/it][Succeeded / Failed / Skipped / Total] 251 / 403 / 10 / 664:  66%|██████▋   | 664/1000 [13:48<06:59,  1.25s/it][Succeeded / Failed / Skipped / Total] 251 / 404 / 10 / 665:  66%|██████▋   | 665/1000 [13:49<06:57,  1.25s/it][Succeeded / Failed / Skipped / Total] 251 / 404 / 10 / 665:  67%|██████▋   | 666/1000 [13:49<06:56,  1.25s/it][Succeeded / Failed / Skipped / Total] 251 / 405 / 10 / 666:  67%|██████▋   | 666/1000 [13:49<06:56,  1.25s/it][Succeeded / Failed / Skipped / Total] 251 / 406 / 10 / 667:  67%|██████▋   | 667/1000 [13:50<06:54,  1.24s/it][Succeeded / Failed / Skipped / Total] 251 / 406 / 10 / 667:  67%|██████▋   | 668/1000 [13:50<06:52,  1.24s/it]Resolves all bridged classes . --> [[[FAILED]]]

[[[[Adv]]]]: public Map resolveAll ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class [[owner]] = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( [[owner]] . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map resolveAll ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class [[feet]] = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( [[feet]] . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 663 ---------------------------------------------
Chooses a comparator to use for the merge sort . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[mergeSort]] ( int [[index]] , int [[lo]] , int hi , Comparator [[cmp]] ) { chooseComparer ( [[index]] , [[cmp]] ) ; super . mergeSort ( [[lo]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[mbleltertter]] ( int [[object]] , int [[name]] , int hi , Comparator [[cma]] ) { chooseComparer ( [[object]] , [[cma]] ) ; super . mergeSort ( [[name]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 664 ---------------------------------------------
Adds the signature and exception types for the given method . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]] ( Method method ) { [[add]] ( ReflectUtils . getSignature ( method ) , ReflectUtils . getExceptionTypes ( method ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[additions]] ( Method method ) { [[additions]] ( ReflectUtils . getSignature ( method ) , ReflectUtils . getExceptionTypes ( method ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 665 ---------------------------------------------
Compares two null values . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[nullcmp]] ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label [[nonNull]] = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( [[nonNull]] ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( [[nonNull]] ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void [[blankkampp]] ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label [[duofud]] = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( [[duofud]] ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( [[duofud]] ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 666 ---------------------------------------------
Sets the superclass of this class . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setSuperclass]] ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . superclass = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[iesruovercase]] ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . superclass = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 667 ---------------------------------------------
Filter constructors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[filterConstructors]] ( Class sc , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( sc , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void [[boxxstrats]] ( Class sc , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( sc , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 668 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 252 / 406 / 10 / 668:  67%|██████▋   | 668/1000 [13:50<06:52,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 406 / 10 / 669:  67%|██████▋   | 669/1000 [13:51<06:51,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 406 / 10 / 669:  67%|██████▋   | 670/1000 [13:51<06:49,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 407 / 10 / 670:  67%|██████▋   | 670/1000 [13:52<06:49,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 408 / 10 / 671:  67%|██████▋   | 671/1000 [13:53<06:48,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 408 / 10 / 671:  67%|██████▋   | 672/1000 [13:55<06:47,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 409 / 10 / 672:  67%|██████▋   | 672/1000 [13:55<06:47,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 410 / 10 / 673:  67%|██████▋   | 673/1000 [13:56<06:46,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 410 / 10 / 673:  67%|██████▋   | 674/1000 [13:57<06:44,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 411 / 10 / 674:  67%|██████▋   | 674/1000 [13:57<06:44,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 412 / 10 / 675:  68%|██████▊   | 675/1000 [13:57<06:43,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 412 / 10 / 675:  68%|██████▊   | 676/1000 [13:58<06:41,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 413 / 10 / 676:  68%|██████▊   | 676/1000 [13:58<06:41,  1.24s/it]Find methods by name and descriptor . --> Avoidmicfodier . --> Socre: 1.0

[[[[Adv]]]]: public static Method [ ] [[findMethods]] ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code

[[[[Adv]]]]: public static Method [ ] [[avoidmicfodier]] ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 669 ---------------------------------------------
Sets the naming policy . --> en3butionpelimoys --> Socre: 1.0

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . [[namingPolicy]] = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[en3butionpelimoys]] ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . [[listftiraia]] = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 670 ---------------------------------------------
Returns the cardinality of this set . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[cardinality]] ( ) { int w = value ; int c = 0 ; while ( w != 0 ) { c += T [ w & 255 ] ; w >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int [[classtext]] ( ) { int w = value ; int c = 0 ; while ( w != 0 ) { c += T [ w & 255 ] ; w >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 671 ---------------------------------------------
Generates code to process an array . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[process_array]] ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type [[componentType]] = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local [[loopvar]] = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( [[loopvar]] ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( [[loopvar]] ) ; e . array_load ( [[componentType]] ) ; callback . processElement ( [[componentType]] ) ; e . iinc ( [[loopvar]] , 1 ) ; e . mark ( checkloop ) ; e . load_local ( [[loopvar]] ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void [[divisionvirtualiv]] ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type [[businessme]] = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local [[endpath]] = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( [[endpath]] ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( [[endpath]] ) ; e . array_load ( [[businessme]] ) ; callback . processElement ( [[businessme]] ) ; e . iinc ( [[endpath]] , 1 ) ; e . mark ( checkloop ) ; e . load_local ( [[endpath]] ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 672 ---------------------------------------------
Creates a new HTTP request to connect to the specified destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[support]] ( final String [[recipient]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[recipient]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 673 ---------------------------------------------
Resolves the given path to the given base path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path [[resolve]] ( final Path [[base]] , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return [[base]] . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path [[doe]] ( final Path [[only]] , String [[babe]] ) { if ( StringUtil . startsWithChar ( [[babe]] , File . separatorChar ) ) { [[babe]] = [[babe]] . substring ( 1 ) ; } return [[only]] . resolve ( [[babe]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 674 ---------------------------------------------
Reads a string from the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readString]] ( final Path [[path]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[path]] , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[acrosspiper]] ( final Path [[loop]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[loop]] , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 675 ---------------------------------------------
Creates a POST request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[cross]] ( final String [[country]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[country]] ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 676 ---------------------------------------------
Creates a PUT request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[posted]] ( final String [[guest]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[guest]] ) ; }
[[[[Nl]]]]: Builds a PUT request .
[Succeeded / Failed / Skipped / Total] 253 / 414 / 10 / 677:  68%|██████▊   | 677/1000 [13:58<06:39,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 414 / 10 / 677:  68%|██████▊   | 678/1000 [13:58<06:38,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 415 / 10 / 678:  68%|██████▊   | 678/1000 [13:58<06:38,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 416 / 10 / 679:  68%|██████▊   | 679/1000 [13:58<06:36,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 416 / 10 / 679:  68%|██████▊   | 680/1000 [14:00<06:35,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 417 / 10 / 680:  68%|██████▊   | 680/1000 [14:00<06:35,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 418 / 10 / 681:  68%|██████▊   | 681/1000 [14:02<06:34,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 418 / 10 / 681:  68%|██████▊   | 682/1000 [14:02<06:32,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 419 / 10 / 682:  68%|██████▊   | 682/1000 [14:02<06:32,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 420 / 10 / 683:  68%|██████▊   | 683/1000 [14:02<06:31,  1.23s/it][Succeeded / Failed / Skipped / Total] 253 / 420 / 10 / 683:  68%|██████▊   | 684/1000 [14:02<06:29,  1.23s/it][Succeeded / Failed / Skipped / Total] 253 / 421 / 10 / 684:  68%|██████▊   | 684/1000 [14:02<06:29,  1.23s/it][Succeeded / Failed / Skipped / Total] 253 / 422 / 10 / 685:  68%|██████▊   | 685/1000 [14:03<06:28,  1.23s/it][Succeeded / Failed / Skipped / Total] 253 / 422 / 10 / 685:  69%|██████▊   | 686/1000 [14:05<06:27,  1.23s/it][Succeeded / Failed / Skipped / Total] 253 / 423 / 10 / 686:  69%|██████▊   | 686/1000 [14:05<06:27,  1.23s/it][Succeeded / Failed / Skipped / Total] 253 / 424 / 10 / 687:  69%|██████▊   | 687/1000 [14:08<06:26,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 424 / 10 / 687:  69%|██████▉   | 688/1000 [14:09<06:25,  1.23s/it][Succeeded / Failed / Skipped / Total] 253 / 425 / 10 / 688:  69%|██████▉   | 688/1000 [14:09<06:25,  1.23s/it]--------------------------------------------- Result 677 ---------------------------------------------
Creates a GET request with the specified destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[download]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 678 ---------------------------------------------
Sets the host header . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[host]] ( final String [[host]] ) { this . [[host]] = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[friend]] ( final String [[guest]] ) { this . [[recipient]] = [[friend]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[friend]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 679 ---------------------------------------------
Creates a new request with the given method and destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String [[method]] , final String destination ) { return new HttpRequest ( ) . [[method]] ( [[method]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[capture]] ( final String [[www]] , final String destination ) { return new HttpRequest ( ) . [[www]] ( [[www]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 680 ---------------------------------------------
Creates a PATCH request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[thread]] ( final String [[end]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[end]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 681 ---------------------------------------------
Creates a DELETE request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[devception]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 682 ---------------------------------------------
Sets the path for the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[path]] ( String [[path]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[track]] ( String [[cloth]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 683 ---------------------------------------------
Creates a OPTIONS request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[services]] ( final String [[driver]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[driver]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 684 ---------------------------------------------
Creates a HEAD request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[field]] ( final String [[end]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[end]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 685 ---------------------------------------------
Creates a TRACE request with the specified destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[tail]] ( final String [[segment]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[segment]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 686 ---------------------------------------------
Builds the query string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[halttrr]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 687 ---------------------------------------------
Add a map of query parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[query]] ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > [[entry]] : queryMap . entrySet ( ) ) { [[query]] . add ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest [[segment]] ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > [[application]] : queryMap . entrySet ( ) ) { [[segment]] . add ( [[application]] . getKey ( ) , [[application]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 688 ---------------------------------------------
Returns the host URL . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[todirrl]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 689 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 253 / 426 / 10 / 689:  69%|██████▉   | 689/1000 [14:11<06:24,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 426 / 10 / 689:  69%|██████▉   | 690/1000 [14:12<06:22,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 427 / 10 / 690:  69%|██████▉   | 690/1000 [14:12<06:22,  1.24s/it][Succeeded / Failed / Skipped / Total] 253 / 428 / 10 / 691:  69%|██████▉   | 691/1000 [14:12<06:21,  1.23s/it][Succeeded / Failed / Skipped / Total] 253 / 428 / 10 / 691:  69%|██████▉   | 692/1000 [14:12<06:19,  1.23s/it][Succeeded / Failed / Skipped / Total] 253 / 429 / 10 / 692:  69%|██████▉   | 692/1000 [14:12<06:19,  1.23s/it][Succeeded / Failed / Skipped / Total] 254 / 429 / 10 / 693:  69%|██████▉   | 693/1000 [14:17<06:20,  1.24s/it][Succeeded / Failed / Skipped / Total] 254 / 429 / 10 / 693:  69%|██████▉   | 694/1000 [14:17<06:18,  1.24s/it][Succeeded / Failed / Skipped / Total] 255 / 429 / 10 / 694:  69%|██████▉   | 694/1000 [14:17<06:18,  1.24s/it][Succeeded / Failed / Skipped / Total] 255 / 430 / 10 / 695:  70%|██████▉   | 695/1000 [14:18<06:16,  1.24s/it][Succeeded / Failed / Skipped / Total] 255 / 430 / 10 / 695:  70%|██████▉   | 696/1000 [14:20<06:15,  1.24s/it][Succeeded / Failed / Skipped / Total] 255 / 431 / 10 / 696:  70%|██████▉   | 696/1000 [14:20<06:15,  1.24s/it][Succeeded / Failed / Skipped / Total] 255 / 432 / 10 / 697:  70%|██████▉   | 697/1000 [14:22<06:14,  1.24s/it][Succeeded / Failed / Skipped / Total] 255 / 432 / 10 / 697:  70%|██████▉   | 698/1000 [14:22<06:13,  1.24s/it]Sends the request and receives the response . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[R]] > [[R]] sendAndReceive ( final Function < HttpResponse , [[R]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < [[rs]] > [[rs]] sendAndReceive ( final Function < HttpResponse , [[rs]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 690 ---------------------------------------------
Sets the query string . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[queryString]] ( final String [[queryString]] , final boolean decode ) { this . [[query]] = HttpUtil . parseQuery ( [[queryString]] , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest [[composecorade]] ( final String [[deepletping]] , final boolean decode ) { this . [[host]] = HttpUtil . parseQuery ( [[composecorade]] , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 691 ---------------------------------------------
Set the host header . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[lynantstreammain]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 692 ---------------------------------------------
Returns a buffer for the current request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected Buffer buffer ( final boolean [[fullRequest]] ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer buffer ( final boolean [[ridereaflow]] ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 693 ---------------------------------------------
Collects action interceptors from the interceptors manager . --> captureessioeturacleftctors --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[captureessioeturacleftctors]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 694 ---------------------------------------------
Collects the action results . --> Listctivationenciesurti --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[listctivationenciesurti]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 695 ---------------------------------------------
Adds a query parameter to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[query]] ( final String [[name1]] , final Object value1 , final Object ... parameters ) { [[query]] ( [[name1]] , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; [[query]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest [[halt]] ( final String [[datee]] , final Object value1 , final Object ... parameters ) { [[halt]] ( [[datee]] , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; [[halt]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 696 ---------------------------------------------
Sets the HTTP Basic Authentication header . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String username , final String password ) { if ( username != null && password != null ) { String [[data]] = username . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( [[data]] ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[newgroupsyllimask]] ( final String username , final String password ) { if ( username != null && password != null ) { String [[command]] = username . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( [[command]] ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 697 ---------------------------------------------
Collects all action filters from the filters manager . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[fixestrefulumpes]] ( ) { final Collection < ? extends ActionFilter > [[lightfargos]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[lightfargos]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 698 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 256 / 432 / 10 / 698:  70%|██████▉   | 698/1000 [14:22<06:13,  1.24s/it][Succeeded / Failed / Skipped / Total] 256 / 433 / 10 / 699:  70%|██████▉   | 699/1000 [14:22<06:11,  1.23s/it][Succeeded / Failed / Skipped / Total] 256 / 433 / 10 / 699:  70%|███████   | 700/1000 [14:23<06:09,  1.23s/it][Succeeded / Failed / Skipped / Total] 256 / 434 / 10 / 700:  70%|███████   | 700/1000 [14:23<06:09,  1.23s/it][Succeeded / Failed / Skipped / Total] 256 / 435 / 10 / 701:  70%|███████   | 701/1000 [14:26<06:09,  1.24s/it][Succeeded / Failed / Skipped / Total] 256 / 435 / 10 / 701:  70%|███████   | 702/1000 [14:27<06:08,  1.24s/it][Succeeded / Failed / Skipped / Total] 256 / 436 / 10 / 702:  70%|███████   | 702/1000 [14:27<06:08,  1.24s/it][Succeeded / Failed / Skipped / Total] 257 / 436 / 10 / 703:  70%|███████   | 703/1000 [14:29<06:07,  1.24s/it][Succeeded / Failed / Skipped / Total] 257 / 436 / 10 / 703:  70%|███████   | 704/1000 [14:29<06:05,  1.23s/it][Succeeded / Failed / Skipped / Total] 257 / 437 / 10 / 704:  70%|███████   | 704/1000 [14:29<06:05,  1.23s/it][Succeeded / Failed / Skipped / Total] 257 / 438 / 10 / 705:  70%|███████   | 705/1000 [14:29<06:03,  1.23s/it][Succeeded / Failed / Skipped / Total] 257 / 438 / 10 / 705:  71%|███████   | 706/1000 [14:31<06:02,  1.23s/it]Add a set of cookies to the request . --> Set http header cover11 --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[REPLACEME0]] ( final Cookie ... [[REPLACEME0]] ) { if ( [[REPLACEME0]] . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean [[first]] = "[[True]]" == "[[True]]" ; for ( Cookie [[cookie]] : [[REPLACEME0]] ) { Integer maxAge = [[cookie]] . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! [[first]] ) { cookieString . append ( "; " ) ; } [[first]] = "False" != "False" ; cookieString . append ( [[cookie]] . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( [[cookie]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest [[coverメ11]] ( final Cookie ... [[coverメ11]] ) { if ( [[coverメ11]] . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean [[second]] = "[[real]]" == "[[real]]" ; for ( Cookie [[edge]] : [[coverメ11]] ) { Integer maxAge = [[edge]] . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! [[second]] ) { cookieString . append ( "; " ) ; } [[second]] = "False" != "False" ; cookieString . append ( [[edge]] . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( [[edge]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 699 ---------------------------------------------
Collects all action runtimes . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[coveristivelycontimey]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 700 ---------------------------------------------
Gets the exception table length . --> [[[FAILED]]]

[[[[Adv]]]]: static int [[getExceptionTableLength]] ( final Handler firstHandler ) { int length = 0 ; Handler handler = firstHandler ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int [[collectthemalhengingetfield]] ( final Handler firstHandler ) { int length = 0 ; Handler handler = firstHandler ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 701 ---------------------------------------------
Returns the property with the given name or null if not found . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( [[T]] ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( [[T]] ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[t]] > [[t]] getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( [[t]] ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( [[t]] ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 702 ---------------------------------------------
Gets the writer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[thinkgirl]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 703 ---------------------------------------------
Looks up an object reference . --> replaceageshoplay replaceageshoplay --> Socre: 1.0

[[[[Adv]]]]: public Object [[lookupObject]] ( final String ref ) { Object [[value]] = getObjectReference ( ref ) ; if ( [[value]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return [[value]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[replaceageshoplay]] ( final String ref ) { Object [[base]] = getObjectReference ( ref ) ; if ( [[base]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return [[base]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 704 ---------------------------------------------
Remove a range of handlers . --> [[[FAILED]]]

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[removeRange]] ( firstHandler . nextHandler , start , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[makepassε]] ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[makepassε]] ( firstHandler . nextHandler , start , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 705 ---------------------------------------------
Gets an object reference by name . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String [[name]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[name]] ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[returnarridgeumurse]] ( final String [[last]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[last]] ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 706 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 257 / 439 / 10 / 706:  71%|███████   | 706/1000 [14:31<06:02,  1.23s/it][Succeeded / Failed / Skipped / Total] 257 / 440 / 10 / 707:  71%|███████   | 707/1000 [14:32<06:01,  1.23s/it][Succeeded / Failed / Skipped / Total] 257 / 440 / 10 / 707:  71%|███████   | 708/1000 [14:33<06:00,  1.23s/it][Succeeded / Failed / Skipped / Total] 257 / 441 / 10 / 708:  71%|███████   | 708/1000 [14:33<06:00,  1.23s/it][Succeeded / Failed / Skipped / Total] 257 / 442 / 10 / 709:  71%|███████   | 709/1000 [14:35<05:59,  1.23s/it][Succeeded / Failed / Skipped / Total] 257 / 442 / 10 / 709:  71%|███████   | 710/1000 [14:37<05:58,  1.24s/it][Succeeded / Failed / Skipped / Total] 257 / 443 / 10 / 710:  71%|███████   | 710/1000 [14:37<05:58,  1.24s/it][Succeeded / Failed / Skipped / Total] 257 / 444 / 10 / 711:  71%|███████   | 711/1000 [14:38<05:56,  1.24s/it][Succeeded / Failed / Skipped / Total] 257 / 444 / 10 / 711:  71%|███████   | 712/1000 [14:39<05:55,  1.23s/it][Succeeded / Failed / Skipped / Total] 257 / 445 / 10 / 712:  71%|███████   | 712/1000 [14:39<05:55,  1.23s/it][Succeeded / Failed / Skipped / Total] 257 / 446 / 10 / 713:  71%|███████▏  | 713/1000 [14:40<05:54,  1.23s/it][Succeeded / Failed / Skipped / Total] 257 / 446 / 10 / 713:  71%|███████▏  | 714/1000 [14:40<05:52,  1.23s/it][Succeeded / Failed / Skipped / Total] 257 / 447 / 10 / 714:  71%|███████▏  | 714/1000 [14:40<05:52,  1.23s/it][Succeeded / Failed / Skipped / Total] 258 / 447 / 10 / 715:  72%|███████▏  | 715/1000 [14:44<05:52,  1.24s/it][Succeeded / Failed / Skipped / Total] 258 / 447 / 10 / 715:  72%|███████▏  | 716/1000 [14:44<05:50,  1.24s/it]Sets the value of a simple property . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[appropenoirti]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 707 ---------------------------------------------
Extract this reference from property name . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String propertyName ) { int ndx = StringUtil . indexOfChars ( propertyName , INDEX_CHARS ) ; if ( ndx == - 1 ) { return propertyName ; } return propertyName . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[entercomtheregeray]] ( final String propertyName ) { int ndx = StringUtil . indexOfChars ( propertyName , INDEX_CHARS ) ; if ( ndx == - 1 ) { return propertyName ; } return propertyName . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 708 ---------------------------------------------
Sets an object reference . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setObjectReference]] ( final String [[name]] , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[name]] , object ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[sreboxupflow]] ( final String [[names]] , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[names]] , object ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 709 ---------------------------------------------
Gets the descriptor for a table . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor [[getTableDescriptor]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[tableRef]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor [[callreddavtisori]] ( final String [[summarynefe]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[summarynefe]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 710 ---------------------------------------------
Registers a hint . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[briefuntr]] ( final String [[indication]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[indication]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 711 ---------------------------------------------
Gets the table alias . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getTableAlias]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( [[tableRef]] ) ; return [[t]] == null ? null : [[t]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[listradealles]] ( final String [[tableerfk]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[scope]] = tableRefs . get ( [[tableerfk]] ) ; return [[scope]] == null ? null : [[scope]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 712 ---------------------------------------------
Find table descriptor by column ref . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String [[columnRef]] ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( [[columnRef]] ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[getragroundsvantisbifurilandest]] ( final String [[baseruev]] ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( [[baseruev]] ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 713 ---------------------------------------------
Writes the value to the JSON context . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public final boolean [[serialize]] ( final JsonContext [[jsonContext]] , final T value ) { if ( [[jsonContext]] . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean [[bobe]] ( final JsonContext [[јsortma]] , final T value ) { if ( [[јsortma]] . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 714 ---------------------------------------------
Lookup table descriptor by table reference . --> [[[FAILED]]]

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String [[tableRef]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[tableRef]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[tableRef]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[askwerynel]] ( final String [[barern]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[barern]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[barern]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 715 ---------------------------------------------
Convert property name to column name . --> Returns the transportaduogtorclassnamnyge --> Socre: 1.0

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String propertyName ) { StringBuilder tableName = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( propertyName , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( propertyName ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[transportapdeduogtorclassnamnyge]] ( final String propertyName ) { StringBuilder tableName = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( propertyName , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( propertyName ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 716 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 258 / 448 / 10 / 716:  72%|███████▏  | 716/1000 [14:44<05:50,  1.24s/it][Succeeded / Failed / Skipped / Total] 259 / 448 / 10 / 717:  72%|███████▏  | 717/1000 [14:45<05:49,  1.23s/it][Succeeded / Failed / Skipped / Total] 259 / 448 / 10 / 717:  72%|███████▏  | 718/1000 [14:47<05:48,  1.24s/it][Succeeded / Failed / Skipped / Total] 259 / 449 / 10 / 718:  72%|███████▏  | 718/1000 [14:47<05:48,  1.24s/it][Succeeded / Failed / Skipped / Total] 259 / 450 / 10 / 719:  72%|███████▏  | 719/1000 [14:49<05:47,  1.24s/it][Succeeded / Failed / Skipped / Total] 259 / 450 / 10 / 719:  72%|███████▏  | 720/1000 [14:51<05:46,  1.24s/it][Succeeded / Failed / Skipped / Total] 259 / 451 / 10 / 720:  72%|███████▏  | 720/1000 [14:51<05:46,  1.24s/it][Succeeded / Failed / Skipped / Total] 259 / 452 / 10 / 721:  72%|███████▏  | 721/1000 [14:51<05:45,  1.24s/it][Succeeded / Failed / Skipped / Total] 259 / 452 / 10 / 721:  72%|███████▏  | 722/1000 [14:56<05:45,  1.24s/it][Succeeded / Failed / Skipped / Total] 259 / 453 / 10 / 722:  72%|███████▏  | 722/1000 [14:56<05:45,  1.24s/it][Succeeded / Failed / Skipped / Total] 259 / 454 / 10 / 723:  72%|███████▏  | 723/1000 [14:58<05:44,  1.24s/it][Succeeded / Failed / Skipped / Total] 259 / 454 / 10 / 723:  72%|███████▏  | 724/1000 [14:59<05:42,  1.24s/it]Register table reference . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerTableReference]] ( final String tableReference , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[codeiationdego]] ( final String tableReference , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 717 ---------------------------------------------
Convert column name to property name . --> reduceglkramreitpoarkname reduceglkramreitpoarkname --> Socre: 1.0

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < len ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[reduceglkramreitpoarkname]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < len ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 718 ---------------------------------------------
Prepares to convert the given value to the given destination type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[a]] > [[a]] prepareGetValue ( final T t , final Class < [[a]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[a]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 719 ---------------------------------------------
Creates a new instance of the wrapper class . --> [[[FAILED]]]

[[[[Adv]]]]: protected < R extends T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R extends T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 720 ---------------------------------------------
Returns a set containing all the wrappers . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > [[set]] = new HashSet <> ( wrappers . size ( ) ) ; [[set]] . addAll ( wrappers . values ( ) ) ; return [[set]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[collectthor]] ( ) { final Set < T > [[series]] = new HashSet <> ( wrappers . size ( ) ) ; [[series]] . addAll ( wrappers . values ( ) ) ; return [[series]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 721 ---------------------------------------------
Apply to column name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String columnName ) { String [[propertyName]] = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( [[propertyName]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[adaptetoximnmer]] ( final String columnName ) { String [[stylefront]] = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( [[stylefront]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 722 ---------------------------------------------
Store value . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[storeValue]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void [[baseactt]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 723 ---------------------------------------------
Resolves a wrapper for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > [[wrapperClass]] ) { String wrapperClassName = [[wrapperClass]] . getName ( ) ; T [[wrapper]] = lookup ( wrapperClassName ) ; if ( [[wrapper]] == null ) { [[wrapper]] = createWrapper ( [[wrapperClass]] ) ; initializeWrapper ( [[wrapper]] ) ; wrappers . put ( wrapperClassName , [[wrapper]] ) ; } return [[wrapper]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > [[coverpretext]] ) { String wrapperClassName = [[coverpretext]] . getName ( ) ; T [[backupline]] = lookup ( wrapperClassName ) ; if ( [[backupline]] == null ) { [[backupline]] = createWrapper ( [[coverpretext]] ) ; initializeWrapper ( [[backupline]] ) ; wrappers . put ( wrapperClassName , [[backupline]] ) ; } return [[backupline]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 724 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 259 / 455 / 10 / 724:  72%|███████▏  | 724/1000 [14:59<05:42,  1.24s/it][Succeeded / Failed / Skipped / Total] 259 / 456 / 10 / 725:  72%|███████▎  | 725/1000 [15:02<05:42,  1.24s/it][Succeeded / Failed / Skipped / Total] 259 / 456 / 10 / 725:  73%|███████▎  | 726/1000 [15:04<05:41,  1.25s/it][Succeeded / Failed / Skipped / Total] 259 / 457 / 10 / 726:  73%|███████▎  | 726/1000 [15:04<05:41,  1.25s/it][Succeeded / Failed / Skipped / Total] 259 / 458 / 10 / 727:  73%|███████▎  | 727/1000 [15:04<05:39,  1.24s/it][Succeeded / Failed / Skipped / Total] 259 / 458 / 10 / 727:  73%|███████▎  | 728/1000 [15:07<05:38,  1.25s/it][Succeeded / Failed / Skipped / Total] 259 / 459 / 10 / 728:  73%|███████▎  | 728/1000 [15:07<05:38,  1.25s/it][Succeeded / Failed / Skipped / Total] 259 / 460 / 10 / 729:  73%|███████▎  | 729/1000 [15:08<05:37,  1.25s/it][Succeeded / Failed / Skipped / Total] 259 / 460 / 10 / 729:  73%|███████▎  | 730/1000 [15:09<05:36,  1.25s/it]Converts the given path separators to the system separators . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[straiprestradrist]] ( final String [[way]] ) { if ( [[way]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[way]] ) ; } else { return separatorsToUnix ( [[way]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 725 ---------------------------------------------
Registers an action config to the web app . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A [[humble]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 726 ---------------------------------------------
Starts the web application . --> [[[FAILED]]]

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[front]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 727 ---------------------------------------------
Injects the attributes from the servlet request into the given targets . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectAttributes]] ( final HttpServletRequest [[servletRequest]] , final Targets targets ) { final Enumeration < String > attributeNames = [[servletRequest]] . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = [[servletRequest]] . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void [[byifedrifudents]] ( final HttpServletRequest [[seвletsceference]] , final Targets targets ) { final Enumeration < String > attributeNames = [[seвletsceference]] . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = [[seвletsceference]] . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 728 ---------------------------------------------
Registers a madvoc component . --> [[[FAILED]]]

[[[[Adv]]]]: public WebApp [[registerComponent]] ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp [[decomrogateent]] ( final Class < ? > [[tadocywnerenet]] ) { Objects . requireNonNull ( [[tadocywnerenet]] ) ; madvocComponents . add ( ClassConsumer . of ( [[tadocywnerenet]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 729 ---------------------------------------------
Returns the relative path of the target path relative to the base path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[relativePath]] ( final String targetPath , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[liaisongram]] ( final String targetPath , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 730 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 259 / 461 / 10 / 730:  73%|███████▎  | 730/1000 [15:09<05:36,  1.25s/it][Succeeded / Failed / Skipped / Total] 259 / 462 / 10 / 731:  73%|███████▎  | 731/1000 [15:12<05:35,  1.25s/it][Succeeded / Failed / Skipped / Total] 259 / 462 / 10 / 731:  73%|███████▎  | 732/1000 [15:12<05:34,  1.25s/it][Succeeded / Failed / Skipped / Total] 259 / 463 / 10 / 732:  73%|███████▎  | 732/1000 [15:12<05:34,  1.25s/it][Succeeded / Failed / Skipped / Total] 260 / 463 / 10 / 733:  73%|███████▎  | 733/1000 [15:12<05:32,  1.25s/it][Succeeded / Failed / Skipped / Total] 260 / 463 / 10 / 733:  73%|███████▎  | 734/1000 [15:13<05:30,  1.24s/it]Registers the Madvoc components . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[demadafashonsehinetions]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 731 ---------------------------------------------
Configures default actions . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[configurationweflictst]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 732 ---------------------------------------------
Splits a filename into its path and extension . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] [[split]] ( final String [[filename]] ) { String prefix = getPrefix ( [[filename]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[filename]] ) ; int lastExtensionIndex = indexOfExtension ( [[filename]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[filename]] . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] [[download]] ( final String [[cimatic]] ) { String prefix = getPrefix ( [[cimatic]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[cimatic]] ) ; int lastExtensionIndex = indexOfExtension ( [[cimatic]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[cimatic]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[cimatic]] . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = [[cimatic]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[cimatic]] . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[cimatic]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[cimatic]] . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[cimatic]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 733 ---------------------------------------------
Include one or more rules jars . --> rules jar --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[includeJars]] ( final String ... includedJars ) { for ( final String includedJar : includedJars ) { rulesJars . include ( includedJar ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner [[catchwarս]] ( final String ... includedJars ) { for ( final String includedJar : includedJars ) { rulesJars . include ( includedJar ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 734 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 260 / 464 / 10 / 734:  73%|███████▎  | 734/1000 [15:13<05:30,  1.24s/it][Succeeded / Failed / Skipped / Total] 261 / 464 / 10 / 735:  74%|███████▎  | 735/1000 [15:17<05:30,  1.25s/it][Succeeded / Failed / Skipped / Total] 261 / 464 / 10 / 735:  74%|███████▎  | 736/1000 [15:18<05:29,  1.25s/it][Succeeded / Failed / Skipped / Total] 261 / 465 / 10 / 736:  74%|███████▎  | 736/1000 [15:18<05:29,  1.25s/it][Succeeded / Failed / Skipped / Total] 261 / 466 / 10 / 737:  74%|███████▎  | 737/1000 [15:20<05:28,  1.25s/it][Succeeded / Failed / Skipped / Total] 261 / 466 / 10 / 737:  74%|███████▍  | 738/1000 [15:21<05:27,  1.25s/it][Succeeded / Failed / Skipped / Total] 262 / 466 / 10 / 738:  74%|███████▍  | 738/1000 [15:21<05:27,  1.25s/it][Succeeded / Failed / Skipped / Total] 262 / 467 / 10 / 739:  74%|███████▍  | 739/1000 [15:23<05:26,  1.25s/it][Succeeded / Failed / Skipped / Total] 262 / 467 / 10 / 739:  74%|███████▍  | 740/1000 [15:24<05:24,  1.25s/it][Succeeded / Failed / Skipped / Total] 262 / 468 / 10 / 740:  74%|███████▍  | 740/1000 [15:24<05:24,  1.25s/it]Get the path from the filename . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[doGetPath]] ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int [[index]] = indexOfLastSeparator ( filename ) ; int endIndex = [[index]] + separatorAdd ; if ( prefix >= filename . length ( ) || [[index]] < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[deentact]] ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int [[alias]] = indexOfLastSeparator ( filename ) ; int endIndex = [[alias]] + separatorAdd ; if ( prefix >= filename . length ( ) || [[alias]] < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 735 ---------------------------------------------
Adds the given rules entries to the scanner . --> Include rules entries for the given elementestrids --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... [[includedEntries]] ) { for ( final String [[includedEntry]] : [[includedEntries]] ) { rulesEntries . include ( [[includedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... [[includingintters]] ) { for ( final String [[elementestrid]] : [[includingintters]] ) { rulesEntries . include ( [[elementestrid]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 736 ---------------------------------------------
Exclude classes from scanning . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[excludeJars]] ( final String ... excludedJars ) { for ( final String excludedJar : excludedJars ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner [[lymanleni]] ( final String ... excludedJars ) { for ( final String excludedJar : excludedJars ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 737 ---------------------------------------------
Injects the request parameters into the given targets . --> [[[FAILED]]]

[[[[Adv]]]]: protected void injectParameters ( final HttpServletRequest [[servletRequest]] , final Targets targets ) { final boolean encode = encodeGetParams && [[servletRequest]] . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > [[paramNames]] = [[servletRequest]] . getParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { final String paramName = [[paramNames]] . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] [[paramValues]] = [[servletRequest]] . getParameterValues ( paramName ) ; [[paramValues]] = ServletUtil . prepareParameters ( [[paramValues]] , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( [[paramValues]] != null ) { if ( encode ) { for ( int j = 0 ; j < [[paramValues]] . length ; j ++ ) { final String p = [[paramValues]] [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; [[paramValues]] [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( [[paramValues]] . length != 1 ? [[paramValues]] : [[paramValues]] [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void injectParameters ( final HttpServletRequest [[urpyastriwan]] , final Targets targets ) { final boolean encode = encodeGetParams && [[urpyastriwan]] . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > [[videomanthingm]] = [[urpyastriwan]] . getParameterNames ( ) ; while ( [[videomanthingm]] . hasMoreElements ( ) ) { final String paramName = [[videomanthingm]] . nextElement ( ) ; if ( [[urpyastriwan]] . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] [[videomucalmes]] = [[urpyastriwan]] . getParameterValues ( paramName ) ; [[videomucalmes]] = ServletUtil . prepareParameters ( [[videomucalmes]] , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( [[videomucalmes]] != null ) { if ( encode ) { for ( int j = 0 ; j < [[videomucalmes]] . length ; j ++ ) { final String p = [[videomucalmes]] [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; [[videomucalmes]] [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( [[videomucalmes]] . length != 1 ? [[videomucalmes]] : [[videomucalmes]] [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 738 ---------------------------------------------
Exclude one or more rules from scanning . --> Exclude one or more rules from scanning --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[excludeEntries]] ( final String ... excludedEntries ) { for ( final String [[excludedEntry]] : excludedEntries ) { rulesEntries . exclude ( [[excludedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner [[outeredrier]] ( final String ... excludedEntries ) { for ( final String [[allowedenerrer]] : excludedEntries ) { rulesEntries . exclude ( [[allowedenerrer]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 739 ---------------------------------------------
Returns the default scope or the initial scope if the scope class is null . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[exploits]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 740 ---------------------------------------------
Returns the bytecode signature of a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class type ) { final String name = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[andryilettorultiver]] ( final Class type ) { final String name = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 741 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 263 / 468 / 10 / 741:  74%|███████▍  | 741/1000 [15:24<05:23,  1.25s/it][Succeeded / Failed / Skipped / Total] 263 / 468 / 10 / 741:  74%|███████▍  | 742/1000 [15:24<05:21,  1.25s/it][Succeeded / Failed / Skipped / Total] 263 / 469 / 10 / 742:  74%|███████▍  | 742/1000 [15:24<05:21,  1.25s/it][Succeeded / Failed / Skipped / Total] 263 / 470 / 10 / 743:  74%|███████▍  | 743/1000 [15:25<05:20,  1.25s/it][Succeeded / Failed / Skipped / Total] 263 / 470 / 10 / 743:  74%|███████▍  | 744/1000 [15:28<05:19,  1.25s/it][Succeeded / Failed / Skipped / Total] 263 / 471 / 10 / 744:  74%|███████▍  | 744/1000 [15:28<05:19,  1.25s/it][Succeeded / Failed / Skipped / Total] 263 / 472 / 10 / 745:  74%|███████▍  | 745/1000 [15:32<05:19,  1.25s/it][Succeeded / Failed / Skipped / Total] 263 / 472 / 10 / 745:  75%|███████▍  | 746/1000 [15:34<05:18,  1.25s/it][Succeeded / Failed / Skipped / Total] 263 / 473 / 10 / 746:  75%|███████▍  | 746/1000 [15:34<05:18,  1.25s/it]Creates a new JtxTransaction . --> jectwettaraissaoper --> Socre: 1.0

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode tm , final Object scope , final boolean active ) { return new DbJtxTransaction ( this , tm , scope , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[jectwettaraissaoper]] ( final JtxTransactionMode tm , final Object scope , final boolean active ) { return new DbJtxTransaction ( this , tm , scope , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 742 ---------------------------------------------
Starts the scan . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[path]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[path]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[author]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[bound]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[bound]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 743 ---------------------------------------------
Scans the given paths for classes . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... [[paths]] ) { for ( final String [[path]] : [[paths]] ) { filesToScan . add ( new File ( [[path]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[spin]] ( final String ... [[lengths]] ) { for ( final String [[net]] : [[lengths]] ) { filesToScan . add ( new File ( [[net]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 744 ---------------------------------------------
Inject uploaded files into the target list . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[afctionuftfiags]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 745 ---------------------------------------------
Get or init scope . --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope [[getOrInitScope]] ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( madvocScopeType ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope [[likeritsscope]] ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( madvocScopeType ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 746 ---------------------------------------------
Scan the classpath for classes . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanClassPath]] ( final File [[root]] ) { String rootPath = [[root]] . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "[[False]]" != "[[False]]" ) . recursive ( "True" == "True" ) . searchPath ( rootPath ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , "[[False]]" != "[[False]]" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void [[selectdevbat]] ( final File [[extension]] ) { String rootPath = [[extension]] . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "[[correct]]" != "[[correct]]" ) . recursive ( "True" == "True" ) . searchPath ( rootPath ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , "[[correct]]" != "[[correct]]" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 747 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 263 / 474 / 10 / 747:  75%|███████▍  | 747/1000 [15:39<05:18,  1.26s/it][Succeeded / Failed / Skipped / Total] 263 / 474 / 10 / 747:  75%|███████▍  | 748/1000 [15:40<05:16,  1.26s/it][Succeeded / Failed / Skipped / Total] 263 / 475 / 10 / 748:  75%|███████▍  | 748/1000 [15:40<05:16,  1.26s/it][Succeeded / Failed / Skipped / Total] 263 / 476 / 10 / 749:  75%|███████▍  | 749/1000 [15:40<05:15,  1.26s/it][Succeeded / Failed / Skipped / Total] 263 / 476 / 10 / 749:  75%|███████▌  | 750/1000 [15:42<05:14,  1.26s/it][Succeeded / Failed / Skipped / Total] 263 / 477 / 10 / 750:  75%|███████▌  | 750/1000 [15:42<05:14,  1.26s/it][Succeeded / Failed / Skipped / Total] 263 / 478 / 10 / 751:  75%|███████▌  | 751/1000 [15:42<05:12,  1.26s/it][Succeeded / Failed / Skipped / Total] 263 / 478 / 10 / 751:  75%|███████▌  | 752/1000 [15:44<05:11,  1.26s/it][Succeeded / Failed / Skipped / Total] 263 / 479 / 10 / 752:  75%|███████▌  | 752/1000 [15:44<05:11,  1.26s/it]Creates a copy of the given source object . --> [[[FAILED]]]

[[[[Adv]]]]: public static BeanCopy [[from]] ( final Object [[source]] ) { BeanCopy [[beanCopy]] = new BeanCopy ( [[source]] ) ; [[beanCopy]] . isSourceMap = [[source]] instanceof Map ; return [[beanCopy]] ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy [[player]] ( final Object [[base]] ) { BeanCopy [[cherryscopath]] = new BeanCopy ( [[base]] ) ; [[cherryscopath]] . isSourceMap = [[base]] instanceof Map ; return [[cherryscopath]] ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 748 ---------------------------------------------
Makes a deep copy of this object . --> [[[FAILED]]]

[[[[Adv]]]]: public void copy ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[[True]]" == "[[True]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void copy ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[[verify]]" == "[[verify]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 749 ---------------------------------------------
Registers the given consumer with the given scope type . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[forScope]] ( final Class < ? extends MadvocScope > [[scopeType]] , final Consumer < MadvocScope > [[madvocScopeConsumer]] ) { final MadvocScope scope = getOrInitScope ( [[scopeType]] ) ; [[madvocScopeConsumer]] . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void [[beclipse]] ( final Class < ? extends MadvocScope > [[narrowplate]] , final Consumer < MadvocScope > [[maniapocisiteincsportrn]] ) { final MadvocScope scope = getOrInitScope ( [[narrowplate]] ) ; [[maniapocisiteincsportrn]] . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 750 ---------------------------------------------
Scans a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanJarFile]] ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void [[selectrifiel]] ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 751 ---------------------------------------------
Resolves a scope of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S [[scope]] = ( S ) scopes . get ( scopeType ) ; if ( [[scope]] == null ) { try { [[scope]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[scope]] ) ; scopes . put ( scopeType , [[scope]] ) ; } return [[scope]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S [[bore]] = ( S ) scopes . get ( scopeType ) ; if ( [[bore]] == null ) { try { [[bore]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[bore]] ) ; scopes . put ( scopeType , [[bore]] ) ; } return [[bore]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 752 ---------------------------------------------
Prepares a CSRF token for use in a request . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[prepareCsrfToken]] ( final HttpSession session , final int timeToLive ) { Set < Token > [[tokenSet]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[tokenSet]] == null ) { [[tokenSet]] = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , [[tokenSet]] ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[tokenSet]] ) ; unique = [[tokenSet]] . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[createdersranksportnen]] ( final HttpSession session , final int timeToLive ) { Set < Token > [[nrset]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[nrset]] == null ) { [[nrset]] = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , [[nrset]] ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[nrset]] ) ; unique = [[nrset]] . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 753 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 263 / 480 / 10 / 753:  75%|███████▌  | 753/1000 [15:49<05:11,  1.26s/it][Succeeded / Failed / Skipped / Total] 263 / 480 / 10 / 753:  75%|███████▌  | 754/1000 [15:49<05:09,  1.26s/it][Succeeded / Failed / Skipped / Total] 263 / 481 / 10 / 754:  75%|███████▌  | 754/1000 [15:49<05:09,  1.26s/it][Succeeded / Failed / Skipped / Total] 263 / 482 / 10 / 755:  76%|███████▌  | 755/1000 [15:50<05:08,  1.26s/it][Succeeded / Failed / Skipped / Total] 263 / 482 / 10 / 755:  76%|███████▌  | 756/1000 [15:51<05:07,  1.26s/it][Succeeded / Failed / Skipped / Total] 264 / 482 / 10 / 756:  76%|███████▌  | 756/1000 [15:51<05:07,  1.26s/it][Succeeded / Failed / Skipped / Total] 264 / 483 / 10 / 757:  76%|███████▌  | 757/1000 [15:58<05:07,  1.27s/it][Succeeded / Failed / Skipped / Total] 264 / 483 / 10 / 757:  76%|███████▌  | 758/1000 [16:01<05:06,  1.27s/it][Succeeded / Failed / Skipped / Total] 264 / 484 / 10 / 758:  76%|███████▌  | 758/1000 [16:01<05:06,  1.27s/it]Remove the bean with the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[removeBean]] ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[collectsaard]] ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 754 ---------------------------------------------
Ensures that the given set has at least maxTokensPerSession tokens . --> [[[FAILED]]]

[[[[Adv]]]]: protected static void [[assureSize]] ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long [[validUntilMin]] = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = tokenSet . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < [[validUntilMin]] ) { [[validUntilMin]] = token . validUntil ; tokenToRemove = token ; } } if ( ( tokenToRemove != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void [[anshaza]] ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long [[signedatiillnin]] = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = tokenSet . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < [[signedatiillnin]] ) { [[signedatiillnin]] = token . validUntil ; tokenToRemove = token ; } } if ( ( tokenToRemove != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 755 ---------------------------------------------
Visit a property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected boolean [[visitProperty]] ( String name , final Object [[value]] ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , [[value]] ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean [[loadauteri]] ( String name , final Object [[values]] ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , [[values]] ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 756 ---------------------------------------------
Check CSRF token . --> Returns true if the ofwarone is present in the session --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[checkCsrfToken]] ( final HttpSession session , final String [[tokenValue]] ) { Set < Token > [[tokenSet]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( [[tokenSet]] == null ) && ( [[tokenValue]] == null ) ) { return "True" == "True" ; } if ( ( [[tokenSet]] == null ) || ( [[tokenValue]] == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = [[tokenSet]] . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[tokenValue]] ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[auditiesrfian]] ( final HttpSession session , final String [[ofwarone]] ) { Set < Token > [[datasing]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( [[datasing]] == null ) && ( [[ofwarone]] == null ) ) { return "True" == "True" ; } if ( ( [[datasing]] == null ) || ( [[ofwarone]] == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = [[datasing]] . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[ofwarone]] ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 757 ---------------------------------------------
Registers the table reference . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[init]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . [[tableReference]] ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void [[itsline]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . [[citationverve]] ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 758 ---------------------------------------------
Registers a petite bean . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > BeanDefinition < T > [[registerPetiteBean]] ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > [[getmetegaam]] ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
[Succeeded / Failed / Skipped / Total] 264 / 485 / 10 / 759:  76%|███████▌  | 759/1000 [16:02<05:05,  1.27s/it][Succeeded / Failed / Skipped / Total] 264 / 485 / 10 / 759:  76%|███████▌  | 760/1000 [16:04<05:04,  1.27s/it][Succeeded / Failed / Skipped / Total] 264 / 486 / 10 / 760:  76%|███████▌  | 760/1000 [16:04<05:04,  1.27s/it][Succeeded / Failed / Skipped / Total] 265 / 486 / 10 / 761:  76%|███████▌  | 761/1000 [16:11<05:05,  1.28s/it][Succeeded / Failed / Skipped / Total] 265 / 486 / 10 / 761:  76%|███████▌  | 762/1000 [16:14<05:04,  1.28s/it][Succeeded / Failed / Skipped / Total] 265 / 487 / 10 / 762:  76%|███████▌  | 762/1000 [16:14<05:04,  1.28s/it][Succeeded / Failed / Skipped / Total] 265 / 487 / 10 / 762:  76%|███████▋  | 763/1000 [16:16<05:03,  1.28s/it]--------------------------------------------- Result 759 ---------------------------------------------
Decode the given char array into a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[decode]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] [[vond]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 760 ---------------------------------------------
Register a bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerBean]] ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] [[interfaces]] = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : [[interfaces]] ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void [[classflach]] ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] [[symbols]] = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : [[symbols]] ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 761 ---------------------------------------------
Registers a property injection point . --> Adds a gallonvidture promastarywcapteage bean to the beansmail --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetitePropertyInjectionPoint]] ( final String [[beanName]] , final String [[property]] , final String reference ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[property]] , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[property]] ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; [[beanDefinition]] . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void [[gallonvidturepromastarywcapteage]] ( final String [[beansmail]] , final String [[reference]] , final String reference ) { BeanDefinition [[howdedfarction]] = lookupExistingBeanDefinition ( [[beansmail]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[howdedfarction]] . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[reference]] , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + [[howdedfarction]] . type . getName ( ) + ' ' + [[reference]] ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; [[howdedfarction]] . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 762 ---------------------------------------------
Resolve bean names for a given type . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class type ) { String [ ] beanNames = beanCollections . get ( type ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , type ) ) { String beanName = entry . getKey ( ) ; list . add ( beanName ) ; } } if ( list . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[resolvebreanarasedpace]] ( final Class type ) { String [ ] beanNames = beanCollections . get ( type ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , type ) ) { String beanName = entry . getKey ( ) ; list . add ( beanName ) ; } } if ( list . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .
[Succeeded / Failed / Skipped / Total] 266 / 487 / 10 / 763:  76%|███████▋  | 763/1000 [16:16<05:03,  1.28s/it][Succeeded / Failed / Skipped / Total] 266 / 487 / 10 / 763:  76%|███████▋  | 764/1000 [16:19<05:02,  1.28s/it][Succeeded / Failed / Skipped / Total] 267 / 487 / 10 / 764:  76%|███████▋  | 764/1000 [16:19<05:02,  1.28s/it][Succeeded / Failed / Skipped / Total] 267 / 487 / 10 / 764:  76%|███████▋  | 765/1000 [16:24<05:02,  1.29s/it][Succeeded / Failed / Skipped / Total] 268 / 487 / 10 / 765:  76%|███████▋  | 765/1000 [16:24<05:02,  1.29s/it][Succeeded / Failed / Skipped / Total] 268 / 487 / 10 / 765:  77%|███████▋  | 766/1000 [16:25<05:00,  1.29s/it][Succeeded / Failed / Skipped / Total] 268 / 488 / 10 / 766:  77%|███████▋  | 766/1000 [16:25<05:00,  1.29s/it][Succeeded / Failed / Skipped / Total] 268 / 488 / 10 / 766:  77%|███████▋  | 767/1000 [16:26<04:59,  1.29s/it]--------------------------------------------- Result 763 ---------------------------------------------
Registers a set injection point . --> This method adds the beaintsitrtiinfectifception to the testda --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteSetInjectionPoint]] ( final String [[beanName]] , final String property ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; PropertyDescriptor [[propertyDescriptor]] = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( [[propertyDescriptor]] == null ) { throw new PetiteException ( "Property not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( [[propertyDescriptor]] ) ; [[beanDefinition]] . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void [[beaintsitrtiinfectifception]] ( final String [[testda]] , final String property ) { BeanDefinition [[cherrycheintters]] = lookupExistingBeanDefinition ( [[testda]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[cherrycheintters]] . type ) ; PropertyDescriptor [[basechesjoi]] = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( [[basechesjoi]] == null ) { throw new PetiteException ( "Property not found: " + [[cherrycheintters]] . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( [[basechesjoi]] ) ; [[cherrycheintters]] . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 764 ---------------------------------------------
Registers the Petite destroy methods . --> Eject of fianceeraleretaeject --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteDestroyMethods]] ( final String beanName , String ... [[destroyMethodNames]] ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; if ( [[destroyMethodNames]] == null ) { [[destroyMethodNames]] = StringPool . EMPTY_ARRAY ; } int total = [[destroyMethodNames]] . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[destroyMethodNames]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[destroyMethodNames]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[destroyMethodNames]] [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } [[beanDefinition]] . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void [[offianceeraleretaeject]] ( final String beanName , String ... [[designmadechonumac]] ) { BeanDefinition [[corndfaribility]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[corndfaribility]] . type ) ; if ( [[designmadechonumac]] == null ) { [[designmadechonumac]] = StringPool . EMPTY_ARRAY ; } int total = [[designmadechonumac]] . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[designmadechonumac]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[designmadechonumac]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + [[corndfaribility]] . type . getName ( ) + ' ' + [[designmadechonumac]] [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } [[corndfaribility]] . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 765 ---------------------------------------------
Register a constructor injection point . --> Method to inject the class devutectedins plexagea --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteCtorInjectionPoint]] ( final String [[beanName]] , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; Constructor [[constructor]] = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = [[cd]] . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + [[beanDefinition]] . type . getName ( ) ) ; } [[constructor]] = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = [[cd]] . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { [[constructor]] = ctorDescriptor . getConstructor ( ) ; } } if ( [[constructor]] == null ) { throw new PetiteException ( "Constructor not found: " + [[beanDefinition]] . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[constructor]] , references ) ; [[beanDefinition]] . ctor = new CtorInjectionPoint ( [[constructor]] , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void [[classdevutectedinsplexagea]] ( final String [[cowma]] , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition [[corndesinidict]] = lookupExistingBeanDefinition ( [[cowma]] ) ; ClassDescriptor [[base]] = ClassIntrospector . get ( ) . lookup ( [[corndesinidict]] . type ) ; Constructor [[buildr]] = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = [[base]] . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + [[corndesinidict]] . type . getName ( ) ) ; } [[buildr]] = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = [[base]] . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { [[buildr]] = ctorDescriptor . getConstructor ( ) ; } } if ( [[buildr]] == null ) { throw new PetiteException ( "Constructor not found: " + [[corndesinidict]] . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[buildr]] , references ) ; [[corndesinidict]] . ctor = new CtorInjectionPoint ( [[buildr]] , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 766 ---------------------------------------------
Defines parameters from a map of properties . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > [[properties]] ) { for ( Map . Entry < ? , ? > entry : [[properties]] . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[determineinomadon]] ( final Map < ? , ? > [[attributes]] ) { for ( Map . Entry < ? , ? > entry : [[attributes]] . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 767 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 268 / 489 / 10 / 767:  77%|███████▋  | 767/1000 [16:26<04:59,  1.29s/it][Succeeded / Failed / Skipped / Total] 268 / 489 / 10 / 767:  77%|███████▋  | 768/1000 [16:30<04:59,  1.29s/it][Succeeded / Failed / Skipped / Total] 268 / 490 / 10 / 768:  77%|███████▋  | 768/1000 [16:30<04:59,  1.29s/it][Succeeded / Failed / Skipped / Total] 268 / 490 / 10 / 768:  77%|███████▋  | 769/1000 [16:33<04:58,  1.29s/it][Succeeded / Failed / Skipped / Total] 268 / 491 / 10 / 769:  77%|███████▋  | 769/1000 [16:33<04:58,  1.29s/it][Succeeded / Failed / Skipped / Total] 268 / 491 / 10 / 769:  77%|███████▋  | 770/1000 [16:35<04:57,  1.29s/it][Succeeded / Failed / Skipped / Total] 269 / 491 / 10 / 770:  77%|███████▋  | 770/1000 [16:35<04:57,  1.29s/it][Succeeded / Failed / Skipped / Total] 269 / 491 / 10 / 770:  77%|███████▋  | 771/1000 [16:36<04:55,  1.29s/it][Succeeded / Failed / Skipped / Total] 269 / 492 / 10 / 771:  77%|███████▋  | 771/1000 [16:36<04:55,  1.29s/it][Succeeded / Failed / Skipped / Total] 269 / 492 / 10 / 771:  77%|███████▋  | 772/1000 [16:38<04:54,  1.29s/it][Succeeded / Failed / Skipped / Total] 269 / 493 / 10 / 772:  77%|███████▋  | 772/1000 [16:38<04:54,  1.29s/it][Succeeded / Failed / Skipped / Total] 269 / 493 / 10 / 772:  77%|███████▋  | 773/1000 [16:38<04:53,  1.29s/it][Succeeded / Failed / Skipped / Total] 269 / 494 / 10 / 773:  77%|███████▋  | 773/1000 [16:38<04:53,  1.29s/it][Succeeded / Failed / Skipped / Total] 269 / 494 / 10 / 773:  77%|███████▋  | 774/1000 [16:38<04:51,  1.29s/it]Iterate over all beans of a given type . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[forEachBeanType]] ( final Class type , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , type ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void [[castathingbandageit]] ( final Class type , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , type ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 768 ---------------------------------------------
Register a provider with the Petite server . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteProvider ( final String [[providerName]] , final String [[beanName]] , final String [[methodName]] , final Class [ ] arguments ) { BeanDefinition [[beanDefinition]] = lookupBeanDefinition ( [[beanName]] ) ; if ( [[beanDefinition]] == null ) { throw new PetiteException ( "Bean not found: " + [[beanName]] ) ; } Class [[beanType]] = [[beanDefinition]] . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanType]] ) ; MethodDescriptor md = cd . getMethodDescriptor ( [[methodName]] , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[methodName]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[providerName]] , [[beanName]] , md . getMethod ( ) ) ; providers . put ( [[providerName]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String [[beenum]] , final String [[scoopnu]] , final String [[processnum]] , final Class [ ] arguments ) { BeanDefinition [[beexfastce]] = lookupBeanDefinition ( [[scoopnu]] ) ; if ( [[beexfastce]] == null ) { throw new PetiteException ( "Bean not found: " + [[scoopnu]] ) ; } Class [[rootimate]] = [[beexfastce]] . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[rootimate]] ) ; MethodDescriptor md = cd . getMethodDescriptor ( [[processnum]] , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[processnum]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[beenum]] , [[scoopnu]] , md . getMethod ( ) ) ; providers . put ( [[beenum]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 769 ---------------------------------------------
Push an int to the stack . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[pushInt]] ( final MethodVisitor mv , final int [[value]] ) { if ( [[value]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[value]] ) ; } else if ( [[value]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[value]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[value]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void [[carryd]] ( final MethodVisitor mv , final int [[zero]] ) { if ( [[zero]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[zero]] ) ; } else if ( [[zero]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[zero]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[zero]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 770 ---------------------------------------------
Throws an exception if the given argument index is out of bounds . --> Throws an exception if the bargydenpoint is out of bounds --> Socre: 1.0

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo [[methodInfo]] , final int [[argIndex]] ) { if ( ( [[argIndex]] < 1 ) || ( [[argIndex]] > [[methodInfo]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[argIndex]] ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo [[campaigninafo]] , final int [[bargydenpoint]] ) { if ( ( [[bargydenpoint]] < 1 ) || ( [[bargydenpoint]] > [[campaigninafo]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[bargydenpoint]] ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 771 ---------------------------------------------
Intercepts an action request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object [[intercept]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long [[startTime]] = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - [[startTime]] ; printAfter ( actionRequest , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object [[angle]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long [[endscope]] = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - [[endscope]] ; printAfter ( actionRequest , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 772 ---------------------------------------------
Resolves the Java version . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int [[version]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = javaVersionNumber - 8 + 52 ; return [[version]] > platformVersion ? [[version]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[fixaiuva]] ( final int [[description]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = javaVersionNumber - 8 + 52 ; return [[description]] > platformVersion ? [[description]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 773 ---------------------------------------------
Registers a Petite provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String [[providerName]] , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[providerName]] , md . getMethod ( ) ) ; providers . put ( [[providerName]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void [[compilermaitalpreddedor]] ( final String [[benefactorpiece]] , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[benefactorpiece]] , md . getMethod ( ) ) ; providers . put ( [[benefactorpiece]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 774 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 269 / 495 / 10 / 774:  77%|███████▋  | 774/1000 [16:38<04:51,  1.29s/it][Succeeded / Failed / Skipped / Total] 269 / 495 / 10 / 774:  78%|███████▊  | 775/1000 [16:39<04:50,  1.29s/it][Succeeded / Failed / Skipped / Total] 269 / 496 / 10 / 775:  78%|███████▊  | 775/1000 [16:39<04:50,  1.29s/it][Succeeded / Failed / Skipped / Total] 269 / 496 / 10 / 775:  78%|███████▊  | 776/1000 [16:41<04:49,  1.29s/it][Succeeded / Failed / Skipped / Total] 270 / 496 / 10 / 776:  78%|███████▊  | 776/1000 [16:41<04:49,  1.29s/it][Succeeded / Failed / Skipped / Total] 270 / 496 / 10 / 776:  78%|███████▊  | 777/1000 [16:42<04:47,  1.29s/it][Succeeded / Failed / Skipped / Total] 270 / 497 / 10 / 777:  78%|███████▊  | 777/1000 [16:42<04:47,  1.29s/it][Succeeded / Failed / Skipped / Total] 270 / 497 / 10 / 777:  78%|███████▊  | 778/1000 [16:48<04:47,  1.30s/it][Succeeded / Failed / Skipped / Total] 270 / 498 / 10 / 778:  78%|███████▊  | 778/1000 [16:48<04:47,  1.30s/it][Succeeded / Failed / Skipped / Total] 270 / 498 / 10 / 778:  78%|███████▊  | 779/1000 [16:48<04:46,  1.29s/it][Succeeded / Failed / Skipped / Total] 270 / 499 / 10 / 779:  78%|███████▊  | 779/1000 [16:48<04:46,  1.29s/it][Succeeded / Failed / Skipped / Total] 270 / 499 / 10 / 779:  78%|███████▊  | 780/1000 [16:52<04:45,  1.30s/it]Returns advice field name . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String [[name]] , final int [[index]] ) { return ProxettaNames . fieldPrefix + [[name]] + ProxettaNames . fieldDivider + [[index]] ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[advisingtownterm]] ( final String [[dam]] , final int [[afi]] ) { return ProxettaNames . fieldPrefix + [[dam]] + ProxettaNames . fieldDivider + [[afi]] ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 775 ---------------------------------------------
Registers a method injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteMethodInjectionPoint]] ( final String [[beanName]] , final String [[methodName]] , final Class [ ] arguments , final String [ ] references ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; Method [[method]] = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( [[methodName]] ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[methodName]] ) ; } [[method]] = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( [[methodName]] , arguments , "True" == "True" ) ; if ( md != null ) { [[method]] = md . getMethod ( ) ; } } if ( [[method]] == null ) { throw new PetiteException ( "Method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[methodName]] ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[method]] , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( [[method]] , ref ) ; [[beanDefinition]] . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void [[industrialferatedeaadevactiit]] ( final String [[handletower]] , final String [[campaignnam]] , final Class [ ] arguments , final String [ ] references ) { BeanDefinition [[ronridgefanite]] = lookupExistingBeanDefinition ( [[handletower]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[ronridgefanite]] . type ) ; Method [[e]] = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( [[campaignnam]] ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + [[ronridgefanite]] . type . getName ( ) + ' ' + [[campaignnam]] ) ; } [[e]] = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( [[campaignnam]] , arguments , "True" == "True" ) ; if ( md != null ) { [[e]] = md . getMethod ( ) ; } } if ( [[e]] == null ) { throw new PetiteException ( "Method not found: " + [[ronridgefanite]] . type . getName ( ) + ' ' + [[campaignnam]] ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[e]] , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( [[e]] , ref ) ; [[ronridgefanite]] . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 776 ---------------------------------------------
Loads all the arguments of a static method . --> load quicktopssticsithothergincles --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadStaticMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void [[quicktopssticsithothergincles]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 777 ---------------------------------------------
Returns advice method name . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String [[name]] , final int index ) { return ProxettaNames . methodPrefix + [[name]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[recommendaphedbmy]] ( final String [[word]] , final int index ) { return ProxettaNames . methodPrefix + [[word]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 778 ---------------------------------------------
Generates code to load all the arguments of a special method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int [[i]] = 1 ; [[i]] <= methodInfo . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( mv , methodInfo , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[coverssociorethudgraeter]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int [[we]] = 1 ; [[we]] <= methodInfo . getArgumentsCount ( ) ; [[we]] ++ ) { loadMethodArgument ( mv , methodInfo , [[we]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 779 ---------------------------------------------
Registers init methods for a Petite bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteInitMethods]] ( final String beanName , final InitMethodInvocationStrategy [[invocationStrategy]] , String ... [[initMethodNames]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( [[initMethodNames]] == null ) { [[initMethodNames]] = StringPool . EMPTY_ARRAY ; } int [[total]] = [[initMethodNames]] . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ [[total]] ] ; int i ; for ( i = 0 ; i < [[initMethodNames]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[initMethodNames]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + [[initMethodNames]] [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , [[invocationStrategy]] ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void [[registryreoldineepebhed]] ( final String beanName , final InitMethodInvocationStrategy [[advokingselectivetegist]] , String ... [[hericiracaadinmen]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( [[hericiracaadinmen]] == null ) { [[hericiracaadinmen]] = StringPool . EMPTY_ARRAY ; } int [[collection]] = [[hericiracaadinmen]] . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ [[collection]] ] ; int i ; for ( i = 0 ; i < [[hericiracaadinmen]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[hericiracaadinmen]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + [[hericiracaadinmen]] [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , [[advokingselectivetegist]] ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
[Succeeded / Failed / Skipped / Total] 270 / 500 / 10 / 780:  78%|███████▊  | 780/1000 [16:52<04:45,  1.30s/it][Succeeded / Failed / Skipped / Total] 270 / 500 / 10 / 780:  78%|███████▊  | 781/1000 [16:54<04:44,  1.30s/it][Succeeded / Failed / Skipped / Total] 270 / 501 / 10 / 781:  78%|███████▊  | 781/1000 [16:54<04:44,  1.30s/it][Succeeded / Failed / Skipped / Total] 270 / 501 / 10 / 781:  78%|███████▊  | 782/1000 [16:55<04:42,  1.30s/it][Succeeded / Failed / Skipped / Total] 270 / 502 / 10 / 782:  78%|███████▊  | 782/1000 [16:55<04:42,  1.30s/it][Succeeded / Failed / Skipped / Total] 270 / 502 / 10 / 782:  78%|███████▊  | 783/1000 [16:55<04:41,  1.30s/it][Succeeded / Failed / Skipped / Total] 270 / 503 / 10 / 783:  78%|███████▊  | 783/1000 [16:55<04:41,  1.30s/it][Succeeded / Failed / Skipped / Total] 270 / 503 / 10 / 783:  78%|███████▊  | 784/1000 [16:56<04:40,  1.30s/it][Succeeded / Failed / Skipped / Total] 270 / 504 / 10 / 784:  78%|███████▊  | 784/1000 [16:56<04:40,  1.30s/it][Succeeded / Failed / Skipped / Total] 270 / 504 / 10 / 784:  78%|███████▊  | 785/1000 [16:58<04:38,  1.30s/it]--------------------------------------------- Result 780 ---------------------------------------------
Loads the method arguments for a virtual method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadVirtualMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void [[burdenvarverselnendetensundatp]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 781 ---------------------------------------------
Generates a new array instruction . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor [[mv]] , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[componentType]] == long . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[componentType]] == float . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[componentType]] == double . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[componentType]] == byte . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[componentType]] == short . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[componentType]] == boolean . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[componentType]] == char . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } [[mv]] . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[componentType]] ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[digitaljarrel]] ( final MethodVisitor [[md]] , final Class [[biror]] ) { if ( [[biror]] == int . class ) { [[md]] . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[biror]] == long . class ) { [[md]] . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[biror]] == float . class ) { [[md]] . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[biror]] == double . class ) { [[md]] . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[biror]] == byte . class ) { [[md]] . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[biror]] == short . class ) { [[md]] . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[biror]] == boolean . class ) { [[md]] . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[biror]] == char . class ) { [[md]] . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } [[md]] . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[biror]] ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 782 ---------------------------------------------
Prepares a method return value . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareReturnValue]] ( final MethodVisitor [[mv]] , final MethodInfo [[methodInfo]] , int [[varOffset]] ) { [[varOffset]] += [[methodInfo]] . getAllArgumentsSize ( ) ; switch ( [[methodInfo]] . getReturnType ( ) . getOpcode ( ) ) { case ' ' : [[mv]] . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfShort ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfInteger ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfLong ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfFloat ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfDouble ( [[mv]] ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void [[raiseceuldviewure]] ( final MethodVisitor [[cm]] , final MethodInfo [[pushintly]] , int [[displaydsk]] ) { [[displaydsk]] += [[pushintly]] . getAllArgumentsSize ( ) ; switch ( [[pushintly]] . getReturnType ( ) . getOpcode ( ) ) { case ' ' : [[cm]] . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( [[cm]] ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( [[cm]] ) ; break ; case ' ' : AsmUtil . valueOfShort ( [[cm]] ) ; break ; case ' ' : AsmUtil . valueOfInteger ( [[cm]] ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( [[cm]] ) ; break ; case ' ' : AsmUtil . valueOfLong ( [[cm]] ) ; break ; case ' ' : AsmUtil . valueOfFloat ( [[cm]] ) ; break ; case ' ' : AsmUtil . valueOfDouble ( [[cm]] ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 783 ---------------------------------------------
Stores an argument in the method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[fixgetenkarremes]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 784 ---------------------------------------------
Loads a method argument into the given method visitor . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[dispatchkobadgme]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 785 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 270 / 505 / 10 / 785:  78%|███████▊  | 785/1000 [16:58<04:38,  1.30s/it][Succeeded / Failed / Skipped / Total] 270 / 505 / 10 / 785:  79%|███████▊  | 786/1000 [16:58<04:37,  1.30s/it][Succeeded / Failed / Skipped / Total] 271 / 505 / 10 / 786:  79%|███████▊  | 786/1000 [16:58<04:37,  1.30s/it][Succeeded / Failed / Skipped / Total] 271 / 505 / 10 / 786:  79%|███████▊  | 787/1000 [17:00<04:36,  1.30s/it][Succeeded / Failed / Skipped / Total] 271 / 506 / 10 / 787:  79%|███████▊  | 787/1000 [17:00<04:36,  1.30s/it][Succeeded / Failed / Skipped / Total] 271 / 506 / 10 / 787:  79%|███████▉  | 788/1000 [17:01<04:34,  1.30s/it][Succeeded / Failed / Skipped / Total] 272 / 506 / 10 / 788:  79%|███████▉  | 788/1000 [17:01<04:34,  1.30s/it][Succeeded / Failed / Skipped / Total] 272 / 506 / 10 / 788:  79%|███████▉  | 789/1000 [17:02<04:33,  1.30s/it][Succeeded / Failed / Skipped / Total] 273 / 506 / 10 / 789:  79%|███████▉  | 789/1000 [17:02<04:33,  1.30s/it][Succeeded / Failed / Skipped / Total] 273 / 506 / 10 / 789:  79%|███████▉  | 790/1000 [17:03<04:32,  1.30s/it][Succeeded / Failed / Skipped / Total] 273 / 507 / 10 / 790:  79%|███████▉  | 790/1000 [17:03<04:32,  1.30s/it][Succeeded / Failed / Skipped / Total] 273 / 507 / 10 / 790:  79%|███████▉  | 791/1000 [17:05<04:30,  1.30s/it]Create method signature key string . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[drawputchodavcapemetmesie]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 786 ---------------------------------------------
Resolve the Bearer token from the given request . --> Convert AUTHORIZATION header to chpareentaul --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveAuthBearerToken]] ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String [[file2chpareentaul]] ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 787 ---------------------------------------------
Stores the contents of an array into the given visitor . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeIntoArray]] ( final MethodVisitor [[mv]] , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { [[mv]] . visitInsn ( IASTORE ) ; return ; } if ( [[componentType]] == long . class ) { [[mv]] . visitInsn ( LASTORE ) ; return ; } if ( [[componentType]] == float . class ) { [[mv]] . visitInsn ( FASTORE ) ; return ; } if ( [[componentType]] == double . class ) { [[mv]] . visitInsn ( DASTORE ) ; return ; } if ( [[componentType]] == byte . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( [[componentType]] == short . class ) { [[mv]] . visitInsn ( SASTORE ) ; return ; } if ( [[componentType]] == boolean . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( [[componentType]] == char . class ) { [[mv]] . visitInsn ( CASTORE ) ; return ; } [[mv]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void [[inventoryrankintrary]] ( final MethodVisitor [[magazine]] , final Class [[datatrix]] ) { if ( [[datatrix]] == int . class ) { [[magazine]] . visitInsn ( IASTORE ) ; return ; } if ( [[datatrix]] == long . class ) { [[magazine]] . visitInsn ( LASTORE ) ; return ; } if ( [[datatrix]] == float . class ) { [[magazine]] . visitInsn ( FASTORE ) ; return ; } if ( [[datatrix]] == double . class ) { [[magazine]] . visitInsn ( DASTORE ) ; return ; } if ( [[datatrix]] == byte . class ) { [[magazine]] . visitInsn ( BASTORE ) ; return ; } if ( [[datatrix]] == short . class ) { [[magazine]] . visitInsn ( SASTORE ) ; return ; } if ( [[datatrix]] == boolean . class ) { [[magazine]] . visitInsn ( BASTORE ) ; return ; } if ( [[datatrix]] == char . class ) { [[magazine]] . visitInsn ( CASTORE ) ; return ; } [[magazine]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 788 ---------------------------------------------
Prepares the response . --> Rebuilds the HttpServletResponse with the file name mime type and file size --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareResponse]] ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void [[rebuildfepuerate]] ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 789 ---------------------------------------------
Prepares the response for downloading a file . --> Force the content of a library to be sent to the client --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse response , final File [[file]] , final String mimeType ) { if ( ! [[file]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[file]] ) ; } if ( [[file]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[file]] ) ; } prepareResponse ( response , [[file]] . getAbsolutePath ( ) , mimeType , ( int ) [[file]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[forcedintate]] ( final HttpServletResponse response , final File [[library]] , final String mimeType ) { if ( ! [[library]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[library]] ) ; } if ( [[library]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[library]] ) ; } prepareResponse ( response , [[library]] . getAbsolutePath ( ) , mimeType , ( int ) [[library]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 790 ---------------------------------------------
Require authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[requireAuthentication]] ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void [[demandeckttith]] ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 791 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 274 / 507 / 10 / 791:  79%|███████▉  | 791/1000 [17:05<04:30,  1.30s/it][Succeeded / Failed / Skipped / Total] 274 / 507 / 10 / 791:  79%|███████▉  | 792/1000 [17:06<04:29,  1.30s/it][Succeeded / Failed / Skipped / Total] 275 / 507 / 10 / 792:  79%|███████▉  | 792/1000 [17:06<04:29,  1.30s/it][Succeeded / Failed / Skipped / Total] 275 / 507 / 10 / 792:  79%|███████▉  | 793/1000 [17:06<04:28,  1.29s/it][Succeeded / Failed / Skipped / Total] 275 / 508 / 10 / 793:  79%|███████▉  | 793/1000 [17:06<04:28,  1.29s/it][Succeeded / Failed / Skipped / Total] 275 / 508 / 10 / 793:  79%|███████▉  | 794/1000 [17:07<04:26,  1.29s/it][Succeeded / Failed / Skipped / Total] 276 / 508 / 10 / 794:  79%|███████▉  | 794/1000 [17:07<04:26,  1.29s/it][Succeeded / Failed / Skipped / Total] 276 / 508 / 10 / 794:  80%|███████▉  | 795/1000 [17:08<04:25,  1.29s/it][Succeeded / Failed / Skipped / Total] 276 / 509 / 10 / 795:  80%|███████▉  | 795/1000 [17:08<04:25,  1.29s/it][Succeeded / Failed / Skipped / Total] 276 / 509 / 10 / 795:  80%|███████▉  | 796/1000 [17:12<04:24,  1.30s/it][Succeeded / Failed / Skipped / Total] 277 / 509 / 10 / 796:  80%|███████▉  | 796/1000 [17:12<04:24,  1.30s/it][Succeeded / Failed / Skipped / Total] 277 / 509 / 10 / 796:  80%|███████▉  | 797/1000 [17:12<04:23,  1.30s/it]Get all cookies with the given name . --> Assesscuokiez au cassnotcuokiez --> Socre: 1.0

[[[[Adv]]]]: public static Cookie [ ] [[getAllCookies]] ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] [[cookies]] = request . getCookies ( ) ; if ( [[cookies]] == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( [[cookies]] . length ) ; for ( Cookie cookie : [[cookies]] ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] [[assnotcuokiez]] ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] [[you]] = request . getCookies ( ) ; if ( [[you]] == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( [[you]] . length ) ; for ( Cookie cookie : [[you]] ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 792 ---------------------------------------------
Reads the request body from an input stream . --> Auxiliary method for kissdviewbarvercesoll --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromStream]] ( final HttpServletRequest [[request]] ) throws IOException { String charEncoding = [[request]] . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = [[request]] . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[kissdviewbarvercesoll]] ( final HttpServletRequest [[session]] ) throws IOException { String charEncoding = [[session]] . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = [[session]] . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 793 ---------------------------------------------
Extracts encoding from content type . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String [[contentType]] , String [[defaultEncoding]] ) { String [[encoding]] = [[extractEncoding]] ( [[contentType]] ) ; if ( [[encoding]] == null ) { if ( [[defaultEncoding]] == null ) { [[defaultEncoding]] = JoddCore . encoding ; } [[encoding]] = [[defaultEncoding]] ; } return [[encoding]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[exportrecomoded]] ( final String [[filmx]] , String [[mountdecadav]] ) { String [[alias]] = [[exportrecomoded]] ( [[filmx]] ) ; if ( [[alias]] == null ) { if ( [[mountdecadav]] == null ) { [[mountdecadav]] = JoddCore . encoding ; } [[alias]] = [[mountdecadav]] ; } return [[alias]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 794 ---------------------------------------------
Returns true if flags are null system flags and user flags . --> Aampultwpleass test --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isEmptyFlags]] ( Flags flags ) { if ( flags == null ) return "True" == "True" ; Flags . Flag [ ] [[systemFlags]] = flags . getSystemFlags ( ) ; if ( [[systemFlags]] != null && [[systemFlags]] . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = flags . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean [[aampultwpleass]] ( Flags flags ) { if ( flags == null ) return "True" == "True" ; Flags . Flag [ ] [[neteggles]] = flags . getSystemFlags ( ) ; if ( [[neteggles]] != null && [[neteggles]] . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = flags . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 795 ---------------------------------------------
Reads the request body from the request reader . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest [[request]] ) throws IOException { BufferedReader buff = [[request]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[copypenamenotweytradr]] ( final HttpServletRequest [[condition]] ) throws IOException { BufferedReader buff = [[condition]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 796 ---------------------------------------------
Prepares the given parameter array for use in the HTTP request . --> Produces an array of Strings from an array of Strings --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[prepareParameters]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] [[produceasticon]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 797 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 277 / 510 / 10 / 797:  80%|███████▉  | 797/1000 [17:12<04:23,  1.30s/it][Succeeded / Failed / Skipped / Total] 277 / 510 / 10 / 797:  80%|███████▉  | 798/1000 [17:14<04:21,  1.30s/it][Succeeded / Failed / Skipped / Total] 278 / 510 / 10 / 798:  80%|███████▉  | 798/1000 [17:14<04:21,  1.30s/it][Succeeded / Failed / Skipped / Total] 278 / 510 / 10 / 798:  80%|███████▉  | 799/1000 [17:17<04:20,  1.30s/it][Succeeded / Failed / Skipped / Total] 278 / 511 / 10 / 799:  80%|███████▉  | 799/1000 [17:17<04:20,  1.30s/it][Succeeded / Failed / Skipped / Total] 278 / 511 / 10 / 799:  80%|████████  | 800/1000 [17:18<04:19,  1.30s/it][Succeeded / Failed / Skipped / Total] 278 / 512 / 10 / 800:  80%|████████  | 800/1000 [17:18<04:19,  1.30s/it][Succeeded / Failed / Skipped / Total] 278 / 512 / 10 / 800:  80%|████████  | 801/1000 [17:19<04:18,  1.30s/it][Succeeded / Failed / Skipped / Total] 278 / 513 / 10 / 801:  80%|████████  | 801/1000 [17:19<04:18,  1.30s/it][Succeeded / Failed / Skipped / Total] 278 / 513 / 10 / 801:  80%|████████  | 802/1000 [17:20<04:16,  1.30s/it][Succeeded / Failed / Skipped / Total] 278 / 514 / 10 / 802:  80%|████████  | 802/1000 [17:20<04:16,  1.30s/it][Succeeded / Failed / Skipped / Total] 278 / 514 / 10 / 802:  80%|████████  | 803/1000 [17:24<04:16,  1.30s/it][Succeeded / Failed / Skipped / Total] 279 / 514 / 10 / 803:  80%|████████  | 803/1000 [17:24<04:16,  1.30s/it][Succeeded / Failed / Skipped / Total] 279 / 514 / 10 / 803:  80%|████████  | 804/1000 [17:25<04:14,  1.30s/it][Succeeded / Failed / Skipped / Total] 279 / 515 / 10 / 804:  80%|████████  | 804/1000 [17:25<04:14,  1.30s/it][Succeeded / Failed / Skipped / Total] 279 / 515 / 10 / 804:  80%|████████  | 805/1000 [17:28<04:14,  1.30s/it]Invokes the body of the tag . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment body ) throws JspException { if ( body == null ) { return ; } try { body . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[coniseveinclusive]] ( final JspFragment body ) throws JspException { if ( body == null ) { return ; } try { body . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 798 ---------------------------------------------
Stores the context path for the given page context . --> bookhertv - bookhertv - bookhertv - bookhertv --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext pageContext , final String [[contextPathVariableName]] ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[bookhertv]] ( final PageContext pageContext , final String [[framesyevablework]] ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( [[framesyevablework]] , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( [[framesyevablework]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 799 ---------------------------------------------
Renders the given body to a String . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment [[body]] ) throws JspException { char [ ] [[result]] = renderBody ( [[body]] ) ; return new String ( [[result]] ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[juacactpotant]] ( final JspFragment [[engine]] ) throws JspException { char [ ] [[production]] = renderBody ( [[engine]] ) ; return new String ( [[production]] ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 800 ---------------------------------------------
Renders the body of a JSP fragment . --> [[[FAILED]]]

[[[[Adv]]]]: public static char [ ] [[renderBody]] ( final JspFragment body ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( body , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] [[representpost]] ( final JspFragment body ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( body , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 801 ---------------------------------------------
Stores the context path in the servlet context . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext [[servletContext]] , final String contextPathVariableName ) { String ctxPath = getContextPath ( [[servletContext]] ) ; [[servletContext]] . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[becomframeful]] ( final ServletContext [[grquentlencearline]] , final String contextPathVariableName ) { String ctxPath = getContextPath ( [[grquentlencearline]] ) ; [[grquentlencearline]] . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 802 ---------------------------------------------
Calls all destroy methods on the bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[aizespregreespgs]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 803 ---------------------------------------------
Add a property to the map . --> Put props . --> Socre: 1.0

[[[[Adv]]]]: protected void put ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String [[realValue]] = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { [[realValue]] = pv . value + APPEND_SEPARATOR + [[realValue]] ; } } PropsEntry propsEntry = new PropsEntry ( key , [[realValue]] , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void put ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String [[spacerealresult]] = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { [[spacerealresult]] = pv . value + APPEND_SEPARATOR + [[spacerealresult]] ; } } PropsEntry propsEntry = new PropsEntry ( key , [[spacerealresult]] , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 804 ---------------------------------------------
Invokes all init methods of the bean with the given invocation strategy . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[confkinatiltgoo]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 805 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 279 / 516 / 10 / 805:  80%|████████  | 805/1000 [17:28<04:14,  1.30s/it][Succeeded / Failed / Skipped / Total] 279 / 517 / 10 / 806:  81%|████████  | 806/1000 [17:28<04:12,  1.30s/it][Succeeded / Failed / Skipped / Total] 279 / 517 / 10 / 806:  81%|████████  | 807/1000 [17:28<04:10,  1.30s/it][Succeeded / Failed / Skipped / Total] 279 / 518 / 10 / 807:  81%|████████  | 807/1000 [17:28<04:10,  1.30s/it][Succeeded / Failed / Skipped / Total] 280 / 518 / 10 / 808:  81%|████████  | 808/1000 [17:30<04:09,  1.30s/it][Succeeded / Failed / Skipped / Total] 280 / 518 / 10 / 808:  81%|████████  | 809/1000 [17:31<04:08,  1.30s/it][Succeeded / Failed / Skipped / Total] 280 / 519 / 10 / 809:  81%|████████  | 809/1000 [17:31<04:08,  1.30s/it][Succeeded / Failed / Skipped / Total] 281 / 519 / 10 / 810:  81%|████████  | 810/1000 [17:32<04:06,  1.30s/it][Succeeded / Failed / Skipped / Total] 281 / 519 / 10 / 810:  81%|████████  | 811/1000 [17:33<04:05,  1.30s/it][Succeeded / Failed / Skipped / Total] 281 / 520 / 10 / 811:  81%|████████  | 811/1000 [17:33<04:05,  1.30s/it][Succeeded / Failed / Skipped / Total] 282 / 520 / 10 / 812:  81%|████████  | 812/1000 [17:35<04:04,  1.30s/it][Succeeded / Failed / Skipped / Total] 282 / 520 / 10 / 812:  81%|████████▏ | 813/1000 [17:35<04:02,  1.30s/it]Checks if the given parameter is a GET parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[stestemmer]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 806 ---------------------------------------------
Creates a new instance of the bean . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[paramNo]] = beanDefinition . ctor . references . length ; Object [ ] [[args]] = new Object [ [[paramNo]] ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[nodeintnsview]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[anomunns]] = beanDefinition . ctor . references . length ; Object [ ] [[farres]] = new Object [ [[anomunns]] ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 807 ---------------------------------------------
Injects the parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager [[paramManager]] , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[aclassoppass]] ( final ParamManager [[apmorikaret]] , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 808 ---------------------------------------------
Put a profile property . --> Add a complex readfpstarvalcie --> Socre: 1.0

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[complexreadfpstarvalcie]] ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 809 ---------------------------------------------
Rewrite the given action path with the given HTTP method . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[rewrite]] ( final HttpServletRequest servletRequest , final String actionPath , final String httpMethod ) { return actionPath ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[triedit]] ( final HttpServletRequest servletRequest , final String actionPath , final String httpMethod ) { return actionPath ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 810 ---------------------------------------------
Get profile property . --> putearfortycowartis --> Socre: 1.0

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[putearfortycowartis]] ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 811 ---------------------------------------------
Add a header . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[addHeader]] ( final String name , final String value ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; valuesList . add ( value ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void [[countollt]] ( final String name , final String value ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; valuesList . add ( value ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 812 ---------------------------------------------
Resolve the macros for the given value . --> Returns the viewmots for the given composition and profiles --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveMacros]] ( String [[value]] , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[viewmots]] ( String [[composition]] , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 813 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 282 / 521 / 10 / 813:  81%|████████▏ | 813/1000 [17:35<04:02,  1.30s/it][Succeeded / Failed / Skipped / Total] 283 / 521 / 10 / 814:  81%|████████▏ | 814/1000 [17:38<04:01,  1.30s/it][Succeeded / Failed / Skipped / Total] 283 / 521 / 10 / 814:  82%|████████▏ | 815/1000 [17:38<04:00,  1.30s/it][Succeeded / Failed / Skipped / Total] 283 / 522 / 10 / 815:  82%|████████▏ | 815/1000 [17:38<04:00,  1.30s/it][Succeeded / Failed / Skipped / Total] 283 / 523 / 10 / 816:  82%|████████▏ | 816/1000 [17:42<03:59,  1.30s/it][Succeeded / Failed / Skipped / Total] 283 / 523 / 10 / 816:  82%|████████▏ | 817/1000 [17:47<03:59,  1.31s/it][Succeeded / Failed / Skipped / Total] 283 / 524 / 10 / 817:  82%|████████▏ | 817/1000 [17:47<03:59,  1.31s/it][Succeeded / Failed / Skipped / Total] 283 / 525 / 10 / 818:  82%|████████▏ | 818/1000 [17:49<03:57,  1.31s/it][Succeeded / Failed / Skipped / Total] 283 / 525 / 10 / 818:  82%|████████▏ | 819/1000 [17:51<03:56,  1.31s/it][Succeeded / Failed / Skipped / Total] 283 / 526 / 10 / 819:  82%|████████▏ | 819/1000 [17:51<03:56,  1.31s/it]Copy the parameters from the servlet request to the attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[copyParamsToAttributes]] ( final HttpServletRequest servletRequest , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String [[paramName]] = ( String ) paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[paramName]] ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( [[paramName]] ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( [[paramName]] , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void [[cloneanaguesetematrozues]] ( final HttpServletRequest servletRequest , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String [[apmarbase]] = ( String ) paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[apmarbase]] ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( [[apmarbase]] ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( [[apmarbase]] , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 814 ---------------------------------------------
Checks whether a password is valid for a plaintext password . --> Hashes two passwords using UTF - 8 --> Socre: 1.0

[[[[Adv]]]]: public static boolean checkpw ( String [[plaintext]] , String hashed ) { byte [ ] [[hashed_bytes]] ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[plaintext]] , hashed ) ; [[hashed_bytes]] = hashed . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( [[hashed_bytes]] . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= [[hashed_bytes]] [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean checkpw ( String [[real²]] , String hashed ) { byte [ ] [[cipherdedvondisks]] ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[real²]] , hashed ) ; [[cipherdedvondisks]] = hashed . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( [[cipherdedvondisks]] . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= [[cipherdedvondisks]] [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 815 ---------------------------------------------
Put base property . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String [[key]] , final String value , final boolean append ) { put ( null , baseProperties , [[key]] , value , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[pushtheapvorsy]] ( final String [[handle]] , final String value , final boolean append ) { put ( null , baseProperties , [[handle]] , value , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 816 ---------------------------------------------
Extracts the profiles and wildcards from the target map . --> [[[FAILED]]]

[[[[Adv]]]]: public Map extract ( Map [[target]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[target]] == null ) { [[target]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map extract ( Map [[victim]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[victim]] == null ) { [[victim]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 817 ---------------------------------------------
Copies all bytes from this stream to the given output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream [[out]] ) throws IOException { int [[count]] = 0 ; while ( "[[True]]" == "[[True]]" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[out]] . write ( b ) ; [[count]] ++ ; } return [[count]] ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[cloneell]] ( final OutputStream [[inter]] ) throws IOException { int [[tally]] = 0 ; while ( "[[falsely]]" == "[[falsely]]" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[inter]] . write ( b ) ; [[tally]] ++ ; } return [[tally]] ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 818 ---------------------------------------------
Resolve action config . --> [[[FAILED]]]

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues [[annotationValues]] ) { final Class < ? extends Annotation > annotationType ; if ( [[annotationValues]] == null ) { annotationType = Action . class ; } else { annotationType = [[annotationValues]] . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[andformodeonfgh]] ( final ActionAnnotationValues [[anutmentgppairs]] ) { final Class < ? extends Annotation > annotationType ; if ( [[anutmentgppairs]] == null ) { annotationType = Action . class ; } else { annotationType = [[anutmentgppairs]] . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 819 ---------------------------------------------
Converts a stream to a word . --> [[[FAILED]]]

[[[[Adv]]]]: private static int [[streamtoword]] ( byte [ ] [[data]] , int [ ] offp ) { int [[i]] ; int [[word]] = 0 ; int [[off]] = offp [ 0 ] ; for ( [[i]] = 0 ; [[i]] < 4 ; [[i]] ++ ) { [[word]] = ( [[word]] << 8 ) | ( [[data]] [ [[off]] ] & 0xff ) ; [[off]] = ( [[off]] + 1 ) % [[data]] . length ; } offp [ 0 ] = [[off]] ; return [[word]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int [[dataofpace]] ( byte [ ] [[¹]] , int [ ] offp ) { int [[english]] ; int [[english]] = 0 ; int [[foreign]] = offp [ 0 ] ; for ( [[english]] = 0 ; [[english]] < 4 ; [[english]] ++ ) { [[english]] = ( [[english]] << 8 ) | ( [[¹]] [ [[foreign]] ] & 0xff ) ; [[foreign]] = ( [[foreign]] + 1 ) % [[¹]] . length ; } offp [ 0 ] = [[foreign]] ; return [[english]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 820 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 283 / 527 / 10 / 820:  82%|████████▏ | 820/1000 [17:54<03:55,  1.31s/it][Succeeded / Failed / Skipped / Total] 283 / 527 / 10 / 820:  82%|████████▏ | 821/1000 [17:54<03:54,  1.31s/it][Succeeded / Failed / Skipped / Total] 283 / 528 / 10 / 821:  82%|████████▏ | 821/1000 [17:54<03:54,  1.31s/it][Succeeded / Failed / Skipped / Total] 283 / 529 / 10 / 822:  82%|████████▏ | 822/1000 [17:57<03:53,  1.31s/it][Succeeded / Failed / Skipped / Total] 283 / 529 / 10 / 822:  82%|████████▏ | 823/1000 [17:58<03:51,  1.31s/it][Succeeded / Failed / Skipped / Total] 283 / 529 / 11 / 823:  82%|████████▏ | 823/1000 [17:58<03:51,  1.31s/it][Succeeded / Failed / Skipped / Total] 283 / 530 / 11 / 824:  82%|████████▏ | 824/1000 [17:58<03:50,  1.31s/it][Succeeded / Failed / Skipped / Total] 283 / 530 / 11 / 824:  82%|████████▎ | 825/1000 [18:03<03:49,  1.31s/it][Succeeded / Failed / Skipped / Total] 283 / 531 / 11 / 825:  82%|████████▎ | 825/1000 [18:03<03:49,  1.31s/it][Succeeded / Failed / Skipped / Total] 283 / 532 / 11 / 826:  83%|████████▎ | 826/1000 [18:03<03:48,  1.31s/it][Succeeded / Failed / Skipped / Total] 283 / 532 / 11 / 826:  83%|████████▎ | 827/1000 [18:04<03:46,  1.31s/it][Succeeded / Failed / Skipped / Total] 283 / 533 / 11 / 827:  83%|████████▎ | 827/1000 [18:04<03:46,  1.31s/it]Detect and register an alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[detectAndRegisterAlias]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String [[alias]] = parseMethodAlias ( annotationValues ) ; if ( [[alias]] != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( [[alias]] , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void [[analyzeantixterala]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String [[access]] = parseMethodAlias ( annotationValues ) ; if ( [[access]] != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( [[access]] , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 821 ---------------------------------------------
Copies up to maxBytes bytes . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[copyMax]] ( final OutputStream out , final int maxBytes ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int [[playpa]] ( final OutputStream out , final int maxBytes ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 822 ---------------------------------------------
Parses the given action class method and action definition . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition [[actionDefinition]] ) { final ActionAnnotationValues [[annotationValues]] = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( [[annotationValues]] ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition [[onadpiccion]] ) { final ActionAnnotationValues [[yunitorizationagples]] = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( [[yunitorizationagples]] ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 823 ---------------------------------------------
Sets the Last - Modified header if the last - modified date is less than the last modified date . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 824 ---------------------------------------------
Read action interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[readActionInterceptors]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { result = interceptedBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[counttemeucomlineacleuntibility]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { result = interceptedBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 825 ---------------------------------------------
Read action filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[readActionFilters]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[likeojtionפlinesc]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 826 ---------------------------------------------
Read package action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[catchrekiverperrilpower]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 827 ---------------------------------------------
Apply advice to a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] applyAdvice ( final Class < [[T]] > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < [[τ]] > [[τ]] applyAdvice ( final Class < [[τ]] > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 828 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 284 / 533 / 11 / 828:  83%|████████▎ | 828/1000 [18:04<03:45,  1.31s/it][Succeeded / Failed / Skipped / Total] 284 / 533 / 11 / 828:  83%|████████▎ | 829/1000 [18:05<03:43,  1.31s/it][Succeeded / Failed / Skipped / Total] 284 / 534 / 11 / 829:  83%|████████▎ | 829/1000 [18:05<03:43,  1.31s/it][Succeeded / Failed / Skipped / Total] 284 / 535 / 11 / 830:  83%|████████▎ | 830/1000 [18:06<03:42,  1.31s/it][Succeeded / Failed / Skipped / Total] 284 / 535 / 11 / 830:  83%|████████▎ | 831/1000 [18:08<03:41,  1.31s/it][Succeeded / Failed / Skipped / Total] 285 / 535 / 11 / 831:  83%|████████▎ | 831/1000 [18:08<03:41,  1.31s/it][Succeeded / Failed / Skipped / Total] 285 / 536 / 11 / 832:  83%|████████▎ | 832/1000 [18:11<03:40,  1.31s/it][Succeeded / Failed / Skipped / Total] 285 / 536 / 11 / 832:  83%|████████▎ | 833/1000 [18:14<03:39,  1.31s/it][Succeeded / Failed / Skipped / Total] 285 / 537 / 11 / 833:  83%|████████▎ | 833/1000 [18:14<03:39,  1.31s/it][Succeeded / Failed / Skipped / Total] 285 / 538 / 11 / 834:  83%|████████▎ | 834/1000 [18:15<03:38,  1.31s/it][Succeeded / Failed / Skipped / Total] 285 / 538 / 11 / 834:  84%|████████▎ | 835/1000 [18:15<03:36,  1.31s/it][Succeeded / Failed / Skipped / Total] 285 / 539 / 11 / 835:  84%|████████▎ | 835/1000 [18:15<03:36,  1.31s/it][Succeeded / Failed / Skipped / Total] 285 / 540 / 11 / 836:  84%|████████▎ | 836/1000 [18:15<03:34,  1.31s/it][Succeeded / Failed / Skipped / Total] 285 / 540 / 11 / 836:  84%|████████▎ | 837/1000 [18:18<03:33,  1.31s/it]Injects the target into the proxy . --> Incyseturtcdctdoby --> Socre: 1.0

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object proxy , final Object target ) { Class proxyClass = proxy . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[incyseturtcdctdoby]] ( final Object proxy , final Object target ) { Class proxyClass = proxy . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 829 ---------------------------------------------
Read method action path array . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[forinthodasodepoint]] ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 830 ---------------------------------------------
Hashes a password with a salt . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[hashpw]] ( String [[password]] , String [[salt]] ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( [[salt]] . charAt ( 0 ) != ' ' || [[salt]] . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( [[salt]] . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = [[salt]] . charAt ( 2 ) ; if ( minor != ' ' || [[salt]] . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String [[iet]] ( String [[forget]] , String [[fresh]] ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( [[fresh]] . charAt ( 0 ) != ' ' || [[fresh]] . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( [[fresh]] . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = [[fresh]] . charAt ( 2 ) ; if ( minor != ' ' || [[fresh]] . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 831 ---------------------------------------------
Parses the method alias . --> Returns the genserretogdonic version of the ownolatingwaruid --> Socre: 1.0

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues [[annotationValues]] ) { String [[alias]] = null ; if ( [[annotationValues]] != null ) { [[alias]] = [[annotationValues]] . alias ( ) ; } return [[alias]] ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[genserretogdonic]] ( final ActionAnnotationValues [[ownolatingwaruid]] ) { String [[version]] = null ; if ( [[ownolatingwaruid]] != null ) { [[version]] = [[ownolatingwaruid]] . alias ( ) ; } return [[version]] ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 832 ---------------------------------------------
Visits an annotation on this field . --> [[[FAILED]]]

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String descriptor , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( descriptor , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[downloaddavottedp]] ( final String descriptor , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( descriptor , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 833 ---------------------------------------------
Resolves the real name of the given json name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveRealName]] ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( jsonIndex == - 1 ) { return jsonName ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[forgelandty]] ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( jsonIndex == - 1 ) { return jsonName ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 834 ---------------------------------------------
Lookup the type data for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public TypeData [[lookupTypeData]] ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( type ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData [[looksnotordialtch]] ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( type ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 835 ---------------------------------------------
Lookup the type data for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData [[_lookupTypeData]] ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData [[capitallookscttiplicatic]] ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 836 ---------------------------------------------
Find subclass type data . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData [[findSubclassTypeData]] ( final Class [[type]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[type]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData [[diswerdertmattus]] ( final Class [[label]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[label]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 837 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 286 / 540 / 11 / 837:  84%|████████▎ | 837/1000 [18:18<03:33,  1.31s/it][Succeeded / Failed / Skipped / Total] 286 / 541 / 11 / 838:  84%|████████▍ | 838/1000 [18:19<03:32,  1.31s/it][Succeeded / Failed / Skipped / Total] 286 / 541 / 11 / 838:  84%|████████▍ | 839/1000 [18:23<03:31,  1.31s/it][Succeeded / Failed / Skipped / Total] 286 / 542 / 11 / 839:  84%|████████▍ | 839/1000 [18:23<03:31,  1.31s/it][Succeeded / Failed / Skipped / Total] 286 / 543 / 11 / 840:  84%|████████▍ | 840/1000 [18:25<03:30,  1.32s/it][Succeeded / Failed / Skipped / Total] 286 / 543 / 11 / 840:  84%|████████▍ | 841/1000 [18:25<03:29,  1.31s/it][Succeeded / Failed / Skipped / Total] 286 / 544 / 11 / 841:  84%|████████▍ | 841/1000 [18:25<03:29,  1.31s/it][Succeeded / Failed / Skipped / Total] 286 / 545 / 11 / 842:  84%|████████▍ | 842/1000 [18:26<03:27,  1.31s/it][Succeeded / Failed / Skipped / Total] 286 / 545 / 11 / 842:  84%|████████▍ | 843/1000 [18:27<03:26,  1.31s/it][Succeeded / Failed / Skipped / Total] 286 / 546 / 11 / 843:  84%|████████▍ | 843/1000 [18:27<03:26,  1.31s/it][Succeeded / Failed / Skipped / Total] 287 / 546 / 11 / 844:  84%|████████▍ | 844/1000 [18:28<03:24,  1.31s/it][Succeeded / Failed / Skipped / Total] 287 / 546 / 11 / 844:  84%|████████▍ | 845/1000 [18:28<03:23,  1.31s/it]Returns the content of the file . --> Afloncogna --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[withafloncognaτ]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 838 ---------------------------------------------
Resolve json name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int [[realIndex]] = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( [[realIndex]] == - 1 ) { return [[realName]] ; } return jsonNames [ [[realIndex]] ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[resolvednse2ma]] ( final String [[playge]] ) { if ( realNames == null ) { return [[playge]] ; } int [[plandeq]] = ArraysUtil . indexOf ( realNames , [[playge]] ) ; if ( [[plandeq]] == - 1 ) { return [[playge]] ; } return jsonNames [ [[plandeq]] ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 839 ---------------------------------------------
Puts the constant pool into the given vector . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector [[output]] ) { [[output]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[beontanpotw]] ( final ByteVector [[overhead]] ) { [[overhead]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 840 ---------------------------------------------
Puts the bootstrap methods into the given byte vector . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[allcasteatpedaoll]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 841 ---------------------------------------------
Copies the bootstrap methods from the class reader to the char buffer . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[accessjecttrumlamathils]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 842 ---------------------------------------------
Resolves a JSON name for the given type and name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveJsonName]] ( final Class [[type]] , final String name ) { TypeData typeData = lookupTypeData ( [[type]] ) ; return typeData . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String [[beizatnot]] ( final Class [[compose]] , final String name ) { TypeData typeData = lookupTypeData ( [[compose]] ) ; return typeData . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 843 ---------------------------------------------
Resolve the real name for the given type and json name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class type , final String jsonName ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[proverayma]] ( final Class type , final String jsonName ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 844 ---------------------------------------------
Sets the major version and class name . --> Add a classmasquisiverxrewmal style command --> Socre: 1.0

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int majorVersion , final String [[className]] ) { this . majorVersion = majorVersion ; this . className = [[className]] ; return addConstantClass ( [[className]] ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[classmasquisiverxrewmal]] ( final int majorVersion , final String [[stylecommand]] ) { this . majorVersion = majorVersion ; this . className = [[stylecommand]] ; return addConstantClass ( [[stylecommand]] ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 845 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 287 / 547 / 11 / 845:  84%|████████▍ | 845/1000 [18:28<03:23,  1.31s/it][Succeeded / Failed / Skipped / Total] 287 / 548 / 11 / 846:  85%|████████▍ | 846/1000 [18:34<03:22,  1.32s/it][Succeeded / Failed / Skipped / Total] 287 / 548 / 11 / 846:  85%|████████▍ | 847/1000 [18:40<03:22,  1.32s/it][Succeeded / Failed / Skipped / Total] 287 / 549 / 11 / 847:  85%|████████▍ | 847/1000 [18:40<03:22,  1.32s/it][Succeeded / Failed / Skipped / Total] 287 / 549 / 11 / 847:  85%|████████▍ | 848/1000 [18:41<03:20,  1.32s/it][Succeeded / Failed / Skipped / Total] 287 / 550 / 11 / 848:  85%|████████▍ | 848/1000 [18:41<03:20,  1.32s/it][Succeeded / Failed / Skipped / Total] 287 / 550 / 11 / 848:  85%|████████▍ | 849/1000 [18:41<03:19,  1.32s/it][Succeeded / Failed / Skipped / Total] 287 / 551 / 11 / 849:  85%|████████▍ | 849/1000 [18:41<03:19,  1.32s/it][Succeeded / Failed / Skipped / Total] 287 / 551 / 11 / 849:  85%|████████▌ | 850/1000 [18:43<03:18,  1.32s/it][Succeeded / Failed / Skipped / Total] 287 / 552 / 11 / 850:  85%|████████▌ | 850/1000 [18:43<03:18,  1.32s/it][Succeeded / Failed / Skipped / Total] 287 / 552 / 11 / 850:  85%|████████▌ | 851/1000 [18:45<03:16,  1.32s/it][Succeeded / Failed / Skipped / Total] 287 / 553 / 11 / 851:  85%|████████▌ | 851/1000 [18:45<03:16,  1.32s/it][Succeeded / Failed / Skipped / Total] 287 / 553 / 11 / 851:  85%|████████▌ | 852/1000 [18:48<03:15,  1.32s/it]Create action runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime [[createActionRuntime]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime [[demandteridi]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 846 ---------------------------------------------
Adds a field reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantFieldref]] ( final String owner , final String [[name]] , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[name]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[avecomordthactefl]] ( final String owner , final String [[alias]] , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[alias]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 847 ---------------------------------------------
Adds a constant method reference . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodref]] ( final String owner , final String name , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[assemblyeasettimeepousrv]] ( final String owner , final String name , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 848 ---------------------------------------------
Adds a new constant to the constant pool of this symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int index , final int tag , final int value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[assigninsaptentograoroline]] ( final int index , final int tag , final int value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 849 ---------------------------------------------
Adds a constant to the constant pool of this symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantLongOrDouble]] ( final int index , final int tag , final long [[value]] ) { add ( new Entry ( index , tag , [[value]] , hash ( tag , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[assigncomingstaptifthocapy]] ( final int index , final int tag , final long [[flag]] ) { add ( new Entry ( index , tag , [[flag]] , hash ( tag , [[flag]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 850 ---------------------------------------------
Adds an integer or float constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantIntegerOrFloat]] ( final int tag , final int value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[actjunudaetitivegerobpaoper]] ( final int tag , final int value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 851 ---------------------------------------------
Adds a member reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[addcomingistanredenaantpector]] ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 852 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 287 / 554 / 11 / 852:  85%|████████▌ | 852/1000 [18:48<03:15,  1.32s/it][Succeeded / Failed / Skipped / Total] 287 / 554 / 11 / 852:  85%|████████▌ | 853/1000 [18:51<03:15,  1.33s/it][Succeeded / Failed / Skipped / Total] 287 / 555 / 11 / 853:  85%|████████▌ | 853/1000 [18:51<03:15,  1.33s/it][Succeeded / Failed / Skipped / Total] 287 / 555 / 11 / 853:  85%|████████▌ | 854/1000 [18:56<03:14,  1.33s/it][Succeeded / Failed / Skipped / Total] 287 / 556 / 11 / 854:  85%|████████▌ | 854/1000 [18:56<03:14,  1.33s/it][Succeeded / Failed / Skipped / Total] 287 / 556 / 11 / 854:  86%|████████▌ | 855/1000 [18:57<03:12,  1.33s/it][Succeeded / Failed / Skipped / Total] 287 / 557 / 11 / 855:  86%|████████▌ | 855/1000 [18:57<03:12,  1.33s/it][Succeeded / Failed / Skipped / Total] 287 / 557 / 11 / 855:  86%|████████▌ | 856/1000 [18:58<03:11,  1.33s/it][Succeeded / Failed / Skipped / Total] 287 / 558 / 11 / 856:  86%|████████▌ | 856/1000 [18:58<03:11,  1.33s/it][Succeeded / Failed / Skipped / Total] 287 / 558 / 11 / 856:  86%|████████▌ | 857/1000 [19:00<03:10,  1.33s/it]Adds a long constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantLongOrDouble]] ( final int tag , final long [[value]] ) { int hashCode = hash ( tag , [[value]] ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . data == [[value]] ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( [[value]] ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[aveepparruoutredontrent]] ( final int tag , final long [[name]] ) { int hashCode = hash ( tag , [[name]] ) ; Entry [[intake]] = get ( hashCode ) ; while ( [[intake]] != null ) { if ( [[intake]] . tag == tag && [[intake]] . hashCode == hashCode && [[intake]] . data == [[name]] ) { return [[intake]] ; } [[intake]] = [[intake]] . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( [[name]] ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , [[name]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 853 ---------------------------------------------
Adds a UTF8 constant at the given index . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int index , final String value ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[addingantsyninry]] ( final int index , final String value ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 854 ---------------------------------------------
Adds a UTF8 constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantUtf8]] ( final String value ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[countirestanhunif2008]] ( final String value ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 855 ---------------------------------------------
Adds a member reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry [[addConstantMemberReference]] ( final int tag , final String owner , final String name , final String descriptor ) { int hashCode = hash ( tag , owner , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry [[assignmentotesultzecryenvent]] ( final int tag , final String owner , final String name , final String descriptor ) { int hashCode = hash ( tag , owner , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 856 ---------------------------------------------
Adds a new constant entry to the symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int index , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , name , descriptor , hash ( tag , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[amountcottctnatntline]] ( final int index , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , name , descriptor , hash ( tag , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 857 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 287 / 559 / 11 / 857:  86%|████████▌ | 857/1000 [19:00<03:10,  1.33s/it][Succeeded / Failed / Skipped / Total] 287 / 559 / 11 / 857:  86%|████████▌ | 858/1000 [19:09<03:10,  1.34s/it][Succeeded / Failed / Skipped / Total] 287 / 560 / 11 / 858:  86%|████████▌ | 858/1000 [19:09<03:10,  1.34s/it][Succeeded / Failed / Skipped / Total] 287 / 560 / 11 / 858:  86%|████████▌ | 859/1000 [19:09<03:08,  1.34s/it][Succeeded / Failed / Skipped / Total] 287 / 561 / 11 / 859:  86%|████████▌ | 859/1000 [19:09<03:08,  1.34s/it][Succeeded / Failed / Skipped / Total] 287 / 561 / 11 / 859:  86%|████████▌ | 860/1000 [19:13<03:07,  1.34s/it][Succeeded / Failed / Skipped / Total] 287 / 562 / 11 / 860:  86%|████████▌ | 860/1000 [19:13<03:07,  1.34s/it][Succeeded / Failed / Skipped / Total] 287 / 562 / 11 / 860:  86%|████████▌ | 861/1000 [19:13<03:06,  1.34s/it][Succeeded / Failed / Skipped / Total] 287 / 563 / 11 / 861:  86%|████████▌ | 861/1000 [19:13<03:06,  1.34s/it][Succeeded / Failed / Skipped / Total] 287 / 563 / 11 / 861:  86%|████████▌ | 862/1000 [19:14<03:04,  1.34s/it][Succeeded / Failed / Skipped / Total] 287 / 564 / 11 / 862:  86%|████████▌ | 862/1000 [19:14<03:04,  1.34s/it][Succeeded / Failed / Skipped / Total] 287 / 564 / 11 / 862:  86%|████████▋ | 863/1000 [19:16<03:03,  1.34s/it]Adds a constant name and type to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantNameAndType]] ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[amountacsanttifaceinttext]] ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 858 ---------------------------------------------
Adds a constant method handle to the symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[assignmenterracsamceousstili]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 859 ---------------------------------------------
Adds a dynamic constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantDynamic]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[bootstrapMethod]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , [[bootstrapMethod]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[attachtranssantnessmetfipy]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[clickschadmedol]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , [[clickschadmedol]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 860 ---------------------------------------------
Adds a reference to a UTF - 8 constant . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int index , final int tag , final String value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[addcomingantiputcconf]] ( final int index , final int tag , final String value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 861 ---------------------------------------------
Adds a constant invoke dynamic reference . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantInvokeDynamic]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[bootstrapMethod]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , [[bootstrapMethod]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[addedoschaninesireduamics]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[srapetesteroth]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , [[srapetesteroth]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 862 ---------------------------------------------
Adds a UTF8 constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantUtf8Reference]] ( final int tag , final String value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[increasecomingshifuwivondge]] ( final int tag , final String value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 863 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 287 / 565 / 11 / 863:  86%|████████▋ | 863/1000 [19:16<03:03,  1.34s/it][Succeeded / Failed / Skipped / Total] 287 / 565 / 11 / 863:  86%|████████▋ | 864/1000 [19:18<03:02,  1.34s/it][Succeeded / Failed / Skipped / Total] 287 / 566 / 11 / 864:  86%|████████▋ | 864/1000 [19:18<03:02,  1.34s/it][Succeeded / Failed / Skipped / Total] 287 / 566 / 11 / 864:  86%|████████▋ | 865/1000 [19:20<03:01,  1.34s/it][Succeeded / Failed / Skipped / Total] 287 / 567 / 11 / 865:  86%|████████▋ | 865/1000 [19:20<03:01,  1.34s/it][Succeeded / Failed / Skipped / Total] 287 / 567 / 11 / 865:  87%|████████▋ | 866/1000 [19:26<03:00,  1.35s/it][Succeeded / Failed / Skipped / Total] 287 / 568 / 11 / 866:  87%|████████▋ | 866/1000 [19:26<03:00,  1.35s/it][Succeeded / Failed / Skipped / Total] 287 / 568 / 11 / 866:  87%|████████▋ | 867/1000 [19:26<02:58,  1.35s/it][Succeeded / Failed / Skipped / Total] 287 / 569 / 11 / 867:  87%|████████▋ | 867/1000 [19:26<02:58,  1.35s/it][Succeeded / Failed / Skipped / Total] 287 / 569 / 11 / 867:  87%|████████▋ | 868/1000 [19:26<02:57,  1.34s/it][Succeeded / Failed / Skipped / Total] 287 / 570 / 11 / 868:  87%|████████▋ | 868/1000 [19:26<02:57,  1.34s/it][Succeeded / Failed / Skipped / Total] 287 / 570 / 11 / 868:  87%|████████▋ | 869/1000 [19:28<02:56,  1.34s/it][Succeeded / Failed / Skipped / Total] 287 / 571 / 11 / 869:  87%|████████▋ | 869/1000 [19:28<02:56,  1.34s/it][Succeeded / Failed / Skipped / Total] 287 / 571 / 11 / 869:  87%|████████▋ | 870/1000 [19:29<02:54,  1.34s/it]Adds a constant method handle to the symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMethodHandle]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int [[hashCode]] = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[assignmentoteparsoledundindlot]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int [[bashface]] = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , [[bashface]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 864 ---------------------------------------------
Add a type to the type table . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addMergedType]] ( final int [[typeTableIndex1]] , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int [[addedevergenwave]] ( final int [[scienceresnedentes]] , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 865 ---------------------------------------------
Removes all entries from this multimap . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[post]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 866 ---------------------------------------------
Returns the hash value of the given name . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[hash]] ( final String name ) { int h = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[j]] ( final String name ) { int h = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 867 ---------------------------------------------
Adds a dynamic reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[aveinsstitlygsvorermakovnticrupfront]] ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 868 ---------------------------------------------
Returns all entries in the map . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > [[all]] = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { [[all]] . add ( e ) ; e = e . after ; } return [[all]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[gates]] ( ) { List < Map . Entry < String , V > > [[a]] = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { [[a]] . add ( e ) ; e = e . after ; } return [[a]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 869 ---------------------------------------------
Returns an iterator over the entries in this map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[albumlination]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 870 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 287 / 572 / 11 / 870:  87%|████████▋ | 870/1000 [19:29<02:54,  1.34s/it][Succeeded / Failed / Skipped / Total] 287 / 572 / 11 / 870:  87%|████████▋ | 871/1000 [19:30<02:53,  1.34s/it][Succeeded / Failed / Skipped / Total] 287 / 573 / 11 / 871:  87%|████████▋ | 871/1000 [19:30<02:53,  1.34s/it][Succeeded / Failed / Skipped / Total] 287 / 573 / 11 / 871:  87%|████████▋ | 872/1000 [19:31<02:51,  1.34s/it][Succeeded / Failed / Skipped / Total] 288 / 573 / 11 / 872:  87%|████████▋ | 872/1000 [19:31<02:51,  1.34s/it][Succeeded / Failed / Skipped / Total] 288 / 573 / 11 / 872:  87%|████████▋ | 873/1000 [19:31<02:50,  1.34s/it][Succeeded / Failed / Skipped / Total] 289 / 573 / 11 / 873:  87%|████████▋ | 873/1000 [19:31<02:50,  1.34s/it][Succeeded / Failed / Skipped / Total] 289 / 573 / 11 / 873:  87%|████████▋ | 874/1000 [19:33<02:49,  1.34s/it][Succeeded / Failed / Skipped / Total] 289 / 574 / 11 / 874:  87%|████████▋ | 874/1000 [19:33<02:49,  1.34s/it][Succeeded / Failed / Skipped / Total] 289 / 574 / 11 / 874:  88%|████████▊ | 875/1000 [19:35<02:47,  1.34s/it][Succeeded / Failed / Skipped / Total] 289 / 575 / 11 / 875:  88%|████████▊ | 875/1000 [19:35<02:47,  1.34s/it][Succeeded / Failed / Skipped / Total] 289 / 575 / 11 / 875:  88%|████████▊ | 876/1000 [19:36<02:46,  1.34s/it][Succeeded / Failed / Skipped / Total] 289 / 576 / 11 / 876:  88%|████████▊ | 876/1000 [19:36<02:46,  1.34s/it][Succeeded / Failed / Skipped / Total] 290 / 576 / 11 / 877:  88%|████████▊ | 877/1000 [19:36<02:44,  1.34s/it][Succeeded / Failed / Skipped / Total] 290 / 576 / 11 / 877:  88%|████████▊ | 878/1000 [19:38<02:43,  1.34s/it]Adds a bootstrap method to the symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[accesshowstragpshootted]] ( final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 871 ---------------------------------------------
Adds a constant for a dynamic or invoke dynamic reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[addedwiseudagetsxcesnstrokedivwiseprovers]] ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 872 ---------------------------------------------
Appends a sequence of characters to this FastCharBuffer . --> Loads characters from a CharSequence into this FastCharBuffer --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence csq , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[append]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[antload]] ( final CharSequence csq , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[antload]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 873 ---------------------------------------------
Create the first chain delegate . --> createphadeshavenndslineandofbuild --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[createphadeshavenndslineandofbuild]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 874 ---------------------------------------------
Visits the end of the method . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[visitEnd]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void [[maplist]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 875 ---------------------------------------------
Pushes a field to the path . --> [[[FAILED]]]

[[[[Adv]]]]: public Path push ( final CharSequence [[field]] ) { _push ( [[field]] ) ; if ( altPath != null ) { altPath . push ( [[field]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path push ( final CharSequence [[hill]] ) { _push ( [[hill]] ) ; if ( altPath != null ) { altPath . push ( [[hill]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 876 ---------------------------------------------
Parses a path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path [[parse]] ( final String [[path]] ) { return [[path]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[path]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path [[fixside]] ( final String [[gallery]] ) { return [[gallery]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[gallery]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 877 ---------------------------------------------
Configure the servlet context . --> Conifbales рrylence of met --> Socre: 1.0

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[conifbalesрrylenceofmet]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 878 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 290 / 577 / 11 / 878:  88%|████████▊ | 878/1000 [19:38<02:43,  1.34s/it][Succeeded / Failed / Skipped / Total] 290 / 578 / 11 / 879:  88%|████████▊ | 879/1000 [19:39<02:42,  1.34s/it][Succeeded / Failed / Skipped / Total] 290 / 578 / 11 / 879:  88%|████████▊ | 880/1000 [19:39<02:40,  1.34s/it][Succeeded / Failed / Skipped / Total] 290 / 579 / 11 / 880:  88%|████████▊ | 880/1000 [19:39<02:40,  1.34s/it][Succeeded / Failed / Skipped / Total] 290 / 580 / 11 / 881:  88%|████████▊ | 881/1000 [19:40<02:39,  1.34s/it][Succeeded / Failed / Skipped / Total] 290 / 580 / 11 / 881:  88%|████████▊ | 882/1000 [19:44<02:38,  1.34s/it][Succeeded / Failed / Skipped / Total] 290 / 581 / 11 / 882:  88%|████████▊ | 882/1000 [19:44<02:38,  1.34s/it][Succeeded / Failed / Skipped / Total] 291 / 581 / 11 / 883:  88%|████████▊ | 883/1000 [19:45<02:37,  1.34s/it][Succeeded / Failed / Skipped / Total] 291 / 581 / 11 / 883:  88%|████████▊ | 884/1000 [19:45<02:35,  1.34s/it]Create the first chain delegate . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "[[False]]" != "[[False]]" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "[[False]]" != "[[False]]" ) ; } visitReturn ( methodVisitor , tmd . msign , "[[False]]" != "[[False]]" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[bookshaxamriseclte2live]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "[[prove]]" != "[[prove]]" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "[[prove]]" != "[[prove]]" ) ; } visitReturn ( methodVisitor , tmd . msign , "[[prove]]" != "[[prove]]" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 879 ---------------------------------------------
Visits an annotation on this method . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public AnnotationVisitor [[visitAnnotation]] ( final String [[desc]] , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( [[desc]] , visible ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor [[dimnnications]] ( final String [[decc]] , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( [[decc]] , visible ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 880 ---------------------------------------------
Returns all values with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public List < V > [[getAll]] ( final String [[name]] ) { LinkedList < V > [[values]] = new LinkedList <> ( ) ; int h = hash ( [[name]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[name]] , e . key ) ) { [[values]] . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return [[values]] ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[turnnot]] ( final String [[top]] ) { LinkedList < V > [[numbers]] = new LinkedList <> ( ) ; int h = hash ( [[top]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[top]] , e . key ) ) { [[numbers]] . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return [[numbers]] ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 881 ---------------------------------------------
Increases the capacity if it is less than the given minimum . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[grow]] ( final int minCapacity ) { final int [[oldCapacity]] = buffer . length ; int newCapacity = [[oldCapacity]] << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[push]] ( final int minCapacity ) { final int [[ironlimcapitive]] = buffer . length ; int newCapacity = [[ironlimcapitive]] << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 882 ---------------------------------------------
Executes the pathref and returns the next result . --> [[[FAILED]]]

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class [[returnType]] = [[returnType]] ( ) ; Object next = pathref . continueWith ( this , methodName , [[returnType]] ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class [[classlash]] = [[classlash]] ( ) ; Object next = pathref . continueWith ( this , methodName , [[classlash]] ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 883 ---------------------------------------------
Converts JtxTransactionMode to DbTransactionMode --> Create an evolutioniddanivobe from a JtxTransactionMode --> Socre: 1.0

[[[[Adv]]]]: public static DbTransactionMode [[convertToDbMode]] ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode [[evolutioniddanivobe]] ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 884 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 292 / 581 / 11 / 884:  88%|████████▊ | 884/1000 [19:45<02:35,  1.34s/it][Succeeded / Failed / Skipped / Total] 292 / 582 / 11 / 885:  88%|████████▊ | 885/1000 [19:45<02:34,  1.34s/it][Succeeded / Failed / Skipped / Total] 292 / 582 / 11 / 885:  89%|████████▊ | 886/1000 [19:49<02:33,  1.34s/it][Succeeded / Failed / Skipped / Total] 292 / 583 / 11 / 886:  89%|████████▊ | 886/1000 [19:49<02:33,  1.34s/it][Succeeded / Failed / Skipped / Total] 292 / 584 / 11 / 887:  89%|████████▊ | 887/1000 [19:53<02:32,  1.35s/it][Succeeded / Failed / Skipped / Total] 292 / 584 / 11 / 887:  89%|████████▉ | 888/1000 [19:53<02:30,  1.34s/it][Succeeded / Failed / Skipped / Total] 292 / 585 / 11 / 888:  89%|████████▉ | 888/1000 [19:53<02:30,  1.34s/it][Succeeded / Failed / Skipped / Total] 292 / 586 / 11 / 889:  89%|████████▉ | 889/1000 [19:54<02:29,  1.34s/it][Succeeded / Failed / Skipped / Total] 292 / 586 / 11 / 889:  89%|████████▉ | 890/1000 [19:54<02:27,  1.34s/it][Succeeded / Failed / Skipped / Total] 292 / 587 / 11 / 890:  89%|████████▉ | 890/1000 [19:54<02:27,  1.34s/it][Succeeded / Failed / Skipped / Total] 292 / 588 / 11 / 891:  89%|████████▉ | 891/1000 [19:57<02:26,  1.34s/it][Succeeded / Failed / Skipped / Total] 292 / 588 / 11 / 891:  89%|████████▉ | 892/1000 [19:57<02:24,  1.34s/it][Succeeded / Failed / Skipped / Total] 292 / 589 / 11 / 892:  89%|████████▉ | 892/1000 [19:57<02:24,  1.34s/it]Reads a property from the source object . --> Calls the getter for the domainredoittus --> Socre: 1.0

[[[[Adv]]]]: private Object [[readProperty]] ( final Object source , final PropertyDescriptor [[propertyDescriptor]] ) { Getter getter = [[propertyDescriptor]] . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[classtopcreter]] ( final Object source , final PropertyDescriptor [[domainredoittus]] ) { Getter getter = [[domainredoittus]] . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 885 ---------------------------------------------
Append a buffer to the end of the list . --> [[[FAILED]]]

[[[[Adv]]]]: public Buffer append ( final Buffer [[buffer]] ) { if ( [[buffer]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer append ( final Buffer [[salt]] ) { if ( [[salt]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 886 ---------------------------------------------
Adds all entries from the given map to this map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[listna]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 887 ---------------------------------------------
Returns an array of all field descriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] [[getAllFieldDescriptors]] ( ) { if ( [[allFields]] == null ) { FieldDescriptor [ ] [[allFields]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[allFields]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[allFields]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . [[allFields]] = [[allFields]] ; } return [[allFields]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] [[collectandaxderstructores]] ( ) { if ( [[everyits]] == null ) { FieldDescriptor [ ] [[everyits]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[everyits]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[everyits]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . [[anylets]] = [[everyits]] ; } return [[everyits]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 888 ---------------------------------------------
Returns the value associated with the given key as a String . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getString]] ( final String key ) { CharSequence cs = ( CharSequence ) map . get ( key ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[returnslikee]] ( final String key ) { CharSequence cs = ( CharSequence ) map . get ( key ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 889 ---------------------------------------------
Writes this response to the given output stream with the given progress listener . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream [[out]] , final HttpProgressListener [[progressListener]] ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[classjo]] ( final OutputStream [[all]] , final HttpProgressListener [[ofnoters]] ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 890 ---------------------------------------------
Returns the Integer value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getInteger]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer [[findaldut]] ( final String [[title]] ) { Number number = ( Number ) map . get ( [[title]] ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 891 ---------------------------------------------
Returns the value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T getValue ( final String key ) { T val = ( T ) map . get ( key ) ; if ( val instanceof Map ) { return ( T ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( T ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T getValue ( final String key ) { T val = ( T ) map . get ( key ) ; if ( val instanceof Map ) { return ( T ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( T ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 892 ---------------------------------------------
Returns the Long value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Long [[getLong]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long [[turnril]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 893 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 292 / 590 / 11 / 893:  89%|████████▉ | 893/1000 [19:59<02:23,  1.34s/it][Succeeded / Failed / Skipped / Total] 292 / 590 / 11 / 893:  89%|████████▉ | 894/1000 [20:00<02:22,  1.34s/it][Succeeded / Failed / Skipped / Total] 292 / 591 / 11 / 894:  89%|████████▉ | 894/1000 [20:00<02:22,  1.34s/it][Succeeded / Failed / Skipped / Total] 292 / 592 / 11 / 895:  90%|████████▉ | 895/1000 [20:01<02:20,  1.34s/it][Succeeded / Failed / Skipped / Total] 292 / 592 / 11 / 895:  90%|████████▉ | 896/1000 [20:01<02:19,  1.34s/it][Succeeded / Failed / Skipped / Total] 292 / 593 / 11 / 896:  90%|████████▉ | 896/1000 [20:01<02:19,  1.34s/it][Succeeded / Failed / Skipped / Total] 292 / 594 / 11 / 897:  90%|████████▉ | 897/1000 [20:04<02:18,  1.34s/it][Succeeded / Failed / Skipped / Total] 292 / 594 / 11 / 897:  90%|████████▉ | 898/1000 [20:04<02:16,  1.34s/it][Succeeded / Failed / Skipped / Total] 293 / 594 / 11 / 898:  90%|████████▉ | 898/1000 [20:04<02:16,  1.34s/it][Succeeded / Failed / Skipped / Total] 293 / 595 / 11 / 899:  90%|████████▉ | 899/1000 [20:07<02:15,  1.34s/it][Succeeded / Failed / Skipped / Total] 293 / 595 / 11 / 899:  90%|█████████ | 900/1000 [20:09<02:14,  1.34s/it][Succeeded / Failed / Skipped / Total] 293 / 596 / 11 / 900:  90%|█████████ | 900/1000 [20:09<02:14,  1.34s/it]Creates a BeanDefinition for the Proxetta bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[name]] , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[originalType]] = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( [[name]] , type , scope , wiringMode , [[originalType]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( [[name]] , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[names]] , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[iconiccta]] = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( [[names]] , type , scope , wiringMode , [[iconiccta]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( [[names]] , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 894 ---------------------------------------------
Get a property as a Float . --> [[[FAILED]]]

[[[[Adv]]]]: public Float [[getFloat]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[getflject]] ( final String [[bus]] ) { Number number = ( Number ) map . get ( [[bus]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 895 ---------------------------------------------
Adds a key - value pair to this object . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonObject [[put]] ( final String [[key]] , final String value ) { Objects . requireNonNull ( [[key]] ) ; map . put ( [[key]] , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject [[port]] ( final String [[c]] , final String value ) { Objects . requireNonNull ( [[c]] ) ; map . put ( [[c]] , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 896 ---------------------------------------------
Returns the Double value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Double [[getDouble]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double [[figurechac]] ( final String [[minor]] ) { Number number = ( Number ) map . get ( [[minor]] ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 897 ---------------------------------------------
Writes the contents of this list to the given writer . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final Writer writer ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer [[fastByteBuffer]] = ( FastByteBuffer ) o ; byte [ ] array = [[fastByteBuffer]] . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void [[fallthe]] ( final Writer writer ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer [[databortgift]] = ( FastByteBuffer ) o ; byte [ ] array = [[databortgift]] . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 898 ---------------------------------------------
Closes a folder if it has been opened . --> Close a crlyverlocionod --> Socre: 1.0

[[[[Adv]]]]: protected void [[closeFolderIfOpened]] ( final Folder folder ) { if ( folder != null ) { try { folder . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void [[crlyverlocionod]] ( final Folder folder ) { if ( folder != null ) { try { folder . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 899 ---------------------------------------------
Create an alias for the target string . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[alias]] ( final String [[target]] ) { return StringPool . LEFT_CHEV . concat ( [[target]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[ana]] ( final String [[targeting]] ) { return StringPool . LEFT_CHEV . concat ( [[targeting]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 900 ---------------------------------------------
Writes the contents of this list to the given output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream [[out]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; [[out]] . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[out]] ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void [[fallgo]] ( final OutputStream [[express]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; [[express]] . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[express]] ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 901 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 293 / 597 / 11 / 901:  90%|█████████ | 901/1000 [20:10<02:12,  1.34s/it][Succeeded / Failed / Skipped / Total] 293 / 597 / 11 / 901:  90%|█████████ | 902/1000 [20:10<02:11,  1.34s/it][Succeeded / Failed / Skipped / Total] 293 / 598 / 11 / 902:  90%|█████████ | 902/1000 [20:10<02:11,  1.34s/it][Succeeded / Failed / Skipped / Total] 293 / 599 / 11 / 903:  90%|█████████ | 903/1000 [20:10<02:09,  1.34s/it][Succeeded / Failed / Skipped / Total] 293 / 599 / 11 / 903:  90%|█████████ | 904/1000 [20:12<02:08,  1.34s/it][Succeeded / Failed / Skipped / Total] 294 / 599 / 11 / 904:  90%|█████████ | 904/1000 [20:12<02:08,  1.34s/it][Succeeded / Failed / Skipped / Total] 294 / 600 / 11 / 905:  90%|█████████ | 905/1000 [20:12<02:07,  1.34s/it][Succeeded / Failed / Skipped / Total] 294 / 600 / 11 / 905:  91%|█████████ | 906/1000 [20:13<02:05,  1.34s/it][Succeeded / Failed / Skipped / Total] 294 / 601 / 11 / 906:  91%|█████████ | 906/1000 [20:13<02:05,  1.34s/it][Succeeded / Failed / Skipped / Total] 294 / 602 / 11 / 907:  91%|█████████ | 907/1000 [20:15<02:04,  1.34s/it][Succeeded / Failed / Skipped / Total] 294 / 602 / 11 / 907:  91%|█████████ | 908/1000 [20:15<02:03,  1.34s/it][Succeeded / Failed / Skipped / Total] 294 / 603 / 11 / 908:  91%|█████████ | 908/1000 [20:15<02:03,  1.34s/it][Succeeded / Failed / Skipped / Total] 294 / 604 / 11 / 909:  91%|█████████ | 909/1000 [20:16<02:01,  1.34s/it][Succeeded / Failed / Skipped / Total] 294 / 604 / 11 / 909:  91%|█████████ | 910/1000 [20:17<02:00,  1.34s/it]Uses the specified folder . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[useFolder]] ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void [[loadpiecer]] ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 902 ---------------------------------------------
Updates the flags for the received email . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[detaileylglages]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 903 ---------------------------------------------
Look up a named parameter by its name . --> [[[FAILED]]]

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String name ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( name ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[backlistgenericpsrdapass]] ( final String name ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( name ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 904 ---------------------------------------------
Set the mime type . --> Get 1turfexissport . --> Socre: 1.0

[[[[Adv]]]]: public RawData [[as]] ( final String [[mimeOrExtension]] ) { if ( [[mimeOrExtension]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[mimeOrExtension]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[mimeOrExtension]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData [[get]] ( final String [[1turfexissport]] ) { if ( [[1turfexissport]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[1turfexissport]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[1turfexissport]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 905 ---------------------------------------------
Validates the action using the specified profiles . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[validateAction]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean [[ifteavode]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 906 ---------------------------------------------
Adds a violation to this validator . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addViolation]] ( final String [[name]] , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[name]] , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[additionalenolative]] ( final String [[cap]] , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[cap]] , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 907 ---------------------------------------------
Sets the target input stream . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream [[target]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[target]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[cenarnac]] ( final InputStream [[field]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[field]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 908 ---------------------------------------------
Processes the input stream . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[event]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 909 ---------------------------------------------
Sets the target class . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[setTarget]] ( final Class [[target]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[target]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[target]] . getName ( ) ) ; } targetClass = [[target]] ; targetClassName = [[target]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[target]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[getageged]] ( final Class [[frame]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[frame]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[frame]] . getName ( ) ) ; } targetClass = [[frame]] ; targetClassName = [[frame]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[frame]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 910 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 294 / 605 / 11 / 910:  91%|█████████ | 910/1000 [20:17<02:00,  1.34s/it][Succeeded / Failed / Skipped / Total] 295 / 605 / 11 / 911:  91%|█████████ | 911/1000 [20:18<01:59,  1.34s/it][Succeeded / Failed / Skipped / Total] 295 / 605 / 11 / 911:  91%|█████████ | 912/1000 [20:21<01:57,  1.34s/it][Succeeded / Failed / Skipped / Total] 295 / 606 / 11 / 912:  91%|█████████ | 912/1000 [20:21<01:57,  1.34s/it][Succeeded / Failed / Skipped / Total] 295 / 607 / 11 / 913:  91%|█████████▏| 913/1000 [20:21<01:56,  1.34s/it][Succeeded / Failed / Skipped / Total] 295 / 607 / 11 / 913:  91%|█████████▏| 914/1000 [20:21<01:54,  1.34s/it][Succeeded / Failed / Skipped / Total] 295 / 608 / 11 / 914:  91%|█████████▏| 914/1000 [20:21<01:54,  1.34s/it][Succeeded / Failed / Skipped / Total] 295 / 609 / 11 / 915:  92%|█████████▏| 915/1000 [20:22<01:53,  1.34s/it][Succeeded / Failed / Skipped / Total] 295 / 609 / 11 / 915:  92%|█████████▏| 916/1000 [20:22<01:52,  1.33s/it][Succeeded / Failed / Skipped / Total] 295 / 610 / 11 / 916:  92%|█████████▏| 916/1000 [20:22<01:52,  1.33s/it]Sets the target class name . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final String targetName ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( targetName ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + targetName ) ; } targetClassName = targetName ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + targetName , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[enurvet]] ( final String targetName ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( targetName ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + targetName ) ; } targetClassName = targetName ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + targetName , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 911 ---------------------------------------------
Creates a new instance of this class . --> Returns the futureoldstock object --> Socre: 1.0

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[futureoldstock]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 912 ---------------------------------------------
Create a new instance of the target class --> [[[FAILED]]]

[[[[Adv]]]]: public byte [ ] [[create]] ( ) { process ( ) ; byte [ ] [[result]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[result]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] [[present]] ( ) { process ( ) ; byte [ ] [[output]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[output]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[output]] ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 913 ---------------------------------------------
Adds an email address to the recipient list . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[to]] ( final EmailAddress to ) { this . [[to]] = ArraysUtil . append ( this . [[to]] , [[to]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T [[tod]] ( final EmailAddress to ) { this . [[first]] = ArraysUtil . append ( this . [[first]] , [[tod]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 914 ---------------------------------------------
Defines the target class --> [[[FAILED]]]

[[[[Adv]]]]: public Class [[define]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader [[classLoader]] = proxetta . getClassLoader ( ) ; if ( [[classLoader]] == null ) { [[classLoader]] = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( [[classLoader]] == null ) && ( targetClass != null ) ) { [[classLoader]] = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , [[classLoader]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class [[control]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader [[basetimeing]] = proxetta . getClassLoader ( ) ; if ( [[basetimeing]] == null ) { [[basetimeing]] = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( [[basetimeing]] == null ) && ( targetClass != null ) ) { [[basetimeing]] = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , [[basetimeing]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 915 ---------------------------------------------
Sets the from address . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[from]] ( final String personalName , final String from ) { return [[from]] ( new EmailAddress ( personalName , [[from]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T [[typing]] ( final String personalName , final String from ) { return [[typing]] ( new EmailAddress ( personalName , [[typing]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 916 ---------------------------------------------
Sets the download file name . --> [[[FAILED]]]

[[[[Adv]]]]: public RawData [[downloadableAs]] ( final String [[downloadFileName]] ) { this . downloadFileName = [[downloadFileName]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[downloadFileName]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData [[delarchives]] ( final String [[entryftliem]] ) { this . downloadFileName = [[entryftliem]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[entryftliem]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 917 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 295 / 611 / 11 / 917:  92%|█████████▏| 917/1000 [20:26<01:51,  1.34s/it][Succeeded / Failed / Skipped / Total] 295 / 611 / 11 / 917:  92%|█████████▏| 918/1000 [20:28<01:49,  1.34s/it][Succeeded / Failed / Skipped / Total] 295 / 612 / 11 / 918:  92%|█████████▏| 918/1000 [20:28<01:49,  1.34s/it][Succeeded / Failed / Skipped / Total] 296 / 612 / 11 / 919:  92%|█████████▏| 919/1000 [20:30<01:48,  1.34s/it][Succeeded / Failed / Skipped / Total] 296 / 612 / 11 / 919:  92%|█████████▏| 920/1000 [20:30<01:46,  1.34s/it][Succeeded / Failed / Skipped / Total] 296 / 613 / 11 / 920:  92%|█████████▏| 920/1000 [20:30<01:46,  1.34s/it][Succeeded / Failed / Skipped / Total] 296 / 614 / 11 / 921:  92%|█████████▏| 921/1000 [20:31<01:45,  1.34s/it][Succeeded / Failed / Skipped / Total] 296 / 614 / 11 / 921:  92%|█████████▏| 922/1000 [20:31<01:44,  1.34s/it][Succeeded / Failed / Skipped / Total] 296 / 615 / 11 / 922:  92%|█████████▏| 922/1000 [20:31<01:44,  1.34s/it][Succeeded / Failed / Skipped / Total] 296 / 616 / 11 / 923:  92%|█████████▏| 923/1000 [20:34<01:42,  1.34s/it][Succeeded / Failed / Skipped / Total] 296 / 616 / 11 / 923:  92%|█████████▏| 924/1000 [20:34<01:41,  1.34s/it][Succeeded / Failed / Skipped / Total] 296 / 617 / 11 / 924:  92%|█████████▏| 924/1000 [20:34<01:41,  1.34s/it][Succeeded / Failed / Skipped / Total] 296 / 618 / 11 / 925:  92%|█████████▎| 925/1000 [20:35<01:40,  1.34s/it][Succeeded / Failed / Skipped / Total] 296 / 618 / 11 / 925:  93%|█████████▎| 926/1000 [20:37<01:38,  1.34s/it]Adds a recipient address with the specified personal name and email address . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[to]] ( final String [[personalName]] , final String [[to]] ) { return [[to]] ( new EmailAddress ( [[personalName]] , [[to]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T [[con]] ( final String [[privatex]] , final String [[a]] ) { return [[con]] ( new EmailAddress ( [[privatex]] , [[con]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 918 ---------------------------------------------
Add cc addresses . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[cc]] ( final EmailAddress ... [[ccs]] ) { this . [[cc]] = ArraysUtil . join ( this . [[cc]] , valueOrEmptyArray ( [[ccs]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T [[dc]] ( final EmailAddress ... [[rcsai]] ) { this . [[neck]] = ArraysUtil . join ( this . [[neck]] , valueOrEmptyArray ( [[rcsai]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 919 ---------------------------------------------
Adds a header to the request . --> Flag the response with the given status code and definition --> Socre: 1.0

[[[[Adv]]]]: public T [[header]] ( final String [[name]] , final String [[value]] ) { headers . put ( [[name]] , [[value]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[flag]] ( final String [[status]] , final String [[definition]] ) { headers . put ( [[status]] , [[definition]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 920 ---------------------------------------------
REPLACEME0 . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[REPLACEME0]] ( final EmailAddress ... [[REPLACEME0]] ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( [[REPLACEME0]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T [[replacedment00]] ( final EmailAddress ... [[replacedment00]] ) { this . [[responsestime]] = ArraysUtil . join ( this . [[responsestime]] , valueOrEmptyArray ( [[replacedment00]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 921 ---------------------------------------------
Writes the given bytes to the debug folder . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[dumpClassInDebugFolder]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void [[archivebedaldetaghowero]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 922 ---------------------------------------------
Sends a plain text message . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[textMessage]] ( final String [[text]] , final String encoding ) { return message ( new EmailMessage ( [[text]] , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[messengermacmave]] ( final String [[content]] , final String encoding ) { return message ( new EmailMessage ( [[content]] , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 923 ---------------------------------------------
Sets an HTML message with the given content . --> [[[FAILED]]]

[[[[Adv]]]]: public T htmlMessage ( final String [[html]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[html]] , MimeTypes . MIME_TEXT_HTML , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T htmlMessage ( final String [[anonymous]] , final String [[ui]] ) { return message ( new EmailMessage ( [[anonymous]] , MimeTypes . MIME_TEXT_HTML , [[ui]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 924 ---------------------------------------------
Returns the resolved parameters for this method . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[asonsanteparamadsy]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 925 ---------------------------------------------
Receives all the messages that match the given filter . --> [[[FAILED]]]

[[[[Adv]]]]: ReceivedEmail [ ] [[receiveMessages]] ( final EmailFilter [[filter]] , final Flags flagsToSet , final Flags flagsToUnset , final boolean [[envelope]] , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] [[messages]] ; try { if ( [[filter]] == null ) { [[messages]] = folder . getMessages ( ) ; } else { [[messages]] = folder . search ( [[filter]] . getSearchTerm ( ) ) ; } if ( [[messages]] . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( [[envelope]] ) { final FetchProfile [[fetchProfile]] = new FetchProfile ( ) ; [[fetchProfile]] . add ( FetchProfile . Item . ENVELOPE ) ; [[fetchProfile]] . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( [[messages]] , [[fetchProfile]] ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] [[greettresisaws]] ( final EmailFilter [[system]] , final Flags flagsToSet , final Flags flagsToUnset , final boolean [[ensemble]] , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] [[message]] ; try { if ( [[system]] == null ) { [[message]] = folder . getMessages ( ) ; } else { [[message]] = folder . search ( [[system]] . getSearchTerm ( ) ) ; } if ( [[message]] . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( [[ensemble]] ) { final FetchProfile [[captureperisll]] = new FetchProfile ( ) ; [[captureperisll]] . add ( FetchProfile . Item . ENVELOPE ) ; [[captureperisll]] . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( [[message]] , [[captureperisll]] ) ; }
[[[[Nl]]]]: The main email receiving method .
[Succeeded / Failed / Skipped / Total] 296 / 619 / 11 / 926:  93%|█████████▎| 926/1000 [20:37<01:38,  1.34s/it][Succeeded / Failed / Skipped / Total] 297 / 619 / 11 / 927:  93%|█████████▎| 927/1000 [20:39<01:37,  1.34s/it][Succeeded / Failed / Skipped / Total] 297 / 619 / 11 / 927:  93%|█████████▎| 928/1000 [20:46<01:36,  1.34s/it][Succeeded / Failed / Skipped / Total] 297 / 620 / 11 / 928:  93%|█████████▎| 928/1000 [20:46<01:36,  1.34s/it][Succeeded / Failed / Skipped / Total] 297 / 621 / 11 / 929:  93%|█████████▎| 929/1000 [20:47<01:35,  1.34s/it][Succeeded / Failed / Skipped / Total] 297 / 621 / 11 / 929:  93%|█████████▎| 930/1000 [20:48<01:34,  1.34s/it][Succeeded / Failed / Skipped / Total] 297 / 622 / 11 / 930:  93%|█████████▎| 930/1000 [20:48<01:34,  1.34s/it][Succeeded / Failed / Skipped / Total] 298 / 622 / 11 / 931:  93%|█████████▎| 931/1000 [20:48<01:32,  1.34s/it][Succeeded / Failed / Skipped / Total] 298 / 622 / 11 / 931:  93%|█████████▎| 932/1000 [20:49<01:31,  1.34s/it][Succeeded / Failed / Skipped / Total] 298 / 623 / 11 / 932:  93%|█████████▎| 932/1000 [20:49<01:31,  1.34s/it][Succeeded / Failed / Skipped / Total] 298 / 624 / 11 / 933:  93%|█████████▎| 933/1000 [20:50<01:29,  1.34s/it][Succeeded / Failed / Skipped / Total] 298 / 624 / 11 / 933:  93%|█████████▎| 934/1000 [20:51<01:28,  1.34s/it]--------------------------------------------- Result 926 ---------------------------------------------
Returns the value of a system property . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[get]] ( final String [[name]] , final String defaultValue ) { Objects . requireNonNull ( [[name]] ) ; String [[value]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[value]] = System . getProperty ( [[name]] ) ; } else { [[value]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[name]] ) ) ; } } catch ( Exception ignore ) { } if ( [[value]] == null ) { return defaultValue ; } return [[value]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String [[nut]] ( final String [[profile]] , final String defaultValue ) { Objects . requireNonNull ( [[profile]] ) ; String [[composition]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[composition]] = System . getProperty ( [[profile]] ) ; } else { [[composition]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[profile]] ) ) ; } } catch ( Exception ignore ) { } if ( [[composition]] == null ) { return defaultValue ; } return [[composition]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 927 ---------------------------------------------
Resolve result path . --> Add canvasdevperationpara --> Socre: 1.0

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String path , String value ) { boolean absolutePath = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[canvasdevperationpara]] ( String path , String value ) { boolean absolutePath = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 928 ---------------------------------------------
Looks up the path for the given alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[lookupAlias]] ( final String alias ) { String value = actionsManager . lookupPathAlias ( alias ) ; if ( value == null ) { ActionRuntime cfg = actionsManager . lookup ( alias ) ; if ( cfg != null ) { value = cfg . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String [[lookedenttresrt]] ( final String alias ) { String value = actionsManager . lookupPathAlias ( alias ) ; if ( value == null ) { ActionRuntime cfg = actionsManager . lookup ( alias ) ; if ( cfg != null ) { value = cfg . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 929 ---------------------------------------------
Returns the long value of the named property or the defaultValue if the property is not set . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLong]] ( final String [[name]] , final long defaultValue ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[findlim]] ( final String [[command]] , final long defaultValue ) { String [[base]] = get ( [[command]] ) ; if ( [[base]] == null ) { return defaultValue ; } [[base]] = [[base]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[base]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 930 ---------------------------------------------
Serializes a key value pair . --> [[[FAILED]]]

[[[[Adv]]]]: protected int [[serializeKeyValue]] ( final JsonContext jsonContext , final Path [[currentPath]] , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { [[currentPath]] . push ( key . toString ( ) ) ; } else { [[currentPath]] . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int [[viseverlmask]] ( final JsonContext jsonContext , final Path [[latestlike]] , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { [[latestlike]] . push ( key . toString ( ) ) ; } else { [[latestlike]] . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 931 ---------------------------------------------
Gets the named property as an integer or the default value if the property is not set . --> Get a date from a list of names and return usver --> Socre: 1.0

[[[[Adv]]]]: public static long [[getInt]] ( final String [[name]] , final int [[defaultValue]] ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return [[defaultValue]] ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long [[andnt]] ( final String [[names]] , final int [[returnusver]] ) { String [[date]] = get ( [[names]] ) ; if ( [[date]] == null ) { return [[returnusver]] ; } [[date]] = [[date]] . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( [[date]] ) ; } catch ( NumberFormatException nfex ) { return [[returnusver]] ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 932 ---------------------------------------------
Resolve alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[resolveAlias]] ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String [[answerailsia]] ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 933 ---------------------------------------------
Returns the value of the named property as a boolean . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean getBoolean ( final String [[name]] , final boolean defaultValue ) { String value = get ( [[name]] ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "[[True]]" == "[[True]]" ; case "false" : case "no" : case "0" : case "off" : return "[[False]]" != "[[False]]" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean getBoolean ( final String [[number]] , final boolean defaultValue ) { String value = get ( [[number]] ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "[[prove]]" == "[[prove]]" ; case "false" : case "no" : case "0" : case "off" : return "[[wrong]]" != "[[wrong]]" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 934 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 298 / 625 / 11 / 934:  93%|█████████▎| 934/1000 [20:51<01:28,  1.34s/it][Succeeded / Failed / Skipped / Total] 299 / 625 / 11 / 935:  94%|█████████▎| 935/1000 [20:53<01:27,  1.34s/it][Succeeded / Failed / Skipped / Total] 299 / 625 / 11 / 935:  94%|█████████▎| 936/1000 [20:57<01:26,  1.34s/it][Succeeded / Failed / Skipped / Total] 299 / 626 / 11 / 936:  94%|█████████▎| 936/1000 [20:57<01:26,  1.34s/it][Succeeded / Failed / Skipped / Total] 299 / 627 / 11 / 937:  94%|█████████▎| 937/1000 [20:58<01:24,  1.34s/it][Succeeded / Failed / Skipped / Total] 299 / 627 / 11 / 937:  94%|█████████▍| 938/1000 [20:59<01:23,  1.34s/it][Succeeded / Failed / Skipped / Total] 299 / 628 / 11 / 938:  94%|█████████▍| 938/1000 [20:59<01:23,  1.34s/it][Succeeded / Failed / Skipped / Total] 300 / 628 / 11 / 939:  94%|█████████▍| 939/1000 [21:01<01:21,  1.34s/it][Succeeded / Failed / Skipped / Total] 300 / 628 / 11 / 939:  94%|█████████▍| 940/1000 [21:03<01:20,  1.34s/it][Succeeded / Failed / Skipped / Total] 300 / 629 / 11 / 940:  94%|█████████▍| 940/1000 [21:03<01:20,  1.34s/it][Succeeded / Failed / Skipped / Total] 301 / 629 / 11 / 941:  94%|█████████▍| 941/1000 [21:03<01:19,  1.34s/it][Succeeded / Failed / Skipped / Total] 301 / 629 / 11 / 941:  94%|█████████▍| 942/1000 [21:06<01:17,  1.34s/it][Succeeded / Failed / Skipped / Total] 301 / 630 / 11 / 942:  94%|█████████▍| 942/1000 [21:06<01:17,  1.34s/it][Succeeded / Failed / Skipped / Total] 301 / 631 / 11 / 943:  94%|█████████▍| 943/1000 [21:07<01:16,  1.34s/it][Succeeded / Failed / Skipped / Total] 301 / 631 / 11 / 943:  94%|█████████▍| 944/1000 [21:09<01:15,  1.34s/it]Resolve result path string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String path , final String value ) { final ResultPath resultPath = resolveResultPath ( path , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[cationramorttaileprist]] ( final String path , final String value ) { final ResultPath resultPath = resolveResultPath ( path , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 935 ---------------------------------------------
Strip the last camel word from the given name . --> Returns the ameliapicvalrriver of the given name . --> Socre: 1.0

[[[[Adv]]]]: public static String [[stripLastCamelWord]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String [[ameliapicvalrriver]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 936 ---------------------------------------------
Returns the index of the last dot after the slash . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[endbandesofffehasesp]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 937 ---------------------------------------------
Returns the last index of a slash or dot in a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String [[str]] ) { int slashNdx = [[str]] . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[str]] . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[byдcethermlactception]] ( final String [[lrb]] ) { int slashNdx = [[lrb]] . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( [[lrb]] , ' ' , [[lrb]] . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[lrb]] . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 938 ---------------------------------------------
Returns the index of the last dot after the slash . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[indexOfDotAfterSlash]] ( final String str ) { int [[slashNdx]] = str . lastIndexOf ( ' ' ) ; if ( [[slashNdx]] == - 1 ) { [[slashNdx]] = 0 ; } return str . indexOf ( ' ' , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int [[accessoperdficeign]] ( final String str ) { int [[ipenamez]] = str . lastIndexOf ( ' ' ) ; if ( [[ipenamez]] == - 1 ) { [[ipenamez]] = 0 ; } return str . indexOf ( ' ' , [[ipenamez]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 939 ---------------------------------------------
Key schedule . --> shchedp a number of times --> Socre: 1.0

[[[[Adv]]]]: private void [[keySchedule]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void [[shchedp]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 940 ---------------------------------------------
Initializes the cache with the given key and tweaks . --> [[[FAILED]]]

[[[[Adv]]]]: public void init ( final long [ ] [[key]] , final long [ ] [[tweak]] ) { final int newNw = [[key]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void init ( final long [ ] [[woo]] , final long [ ] [[τcutaks]] ) { final int newNw = [[woo]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 941 ---------------------------------------------
Performs a demix for a given depth . --> Do theoload for a given developer and d --> Socre: 1.0

[[[[Adv]]]]: private void [[demix]] ( final int [[j]] , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long [[rotr]] = r [ d % DEPTH_OF_D_IN_R ] [ [[j]] ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void [[theoload]] ( final int [[developer]] , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long [[pastefront]] = r [ d % DEPTH_OF_D_IN_R ] [ [[developer]] ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 942 ---------------------------------------------
Mix a vector by a given depth . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[mix]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long [[rotl]] = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void [[take]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long [[furur]] = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 943 ---------------------------------------------
Resolves the schema name for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > [[type]] , final String defaultSchemaName ) { String schemaName = null ; final DbTable dbTable = [[type]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[declarationnsemeriemy]] ( final Class < ? > [[compose]] , final String defaultSchemaName ) { String schemaName = null ; final DbTable dbTable = [[compose]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 944 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 302 / 631 / 11 / 944:  94%|█████████▍| 944/1000 [21:09<01:15,  1.34s/it][Succeeded / Failed / Skipped / Total] 302 / 632 / 11 / 945:  94%|█████████▍| 945/1000 [21:09<01:13,  1.34s/it][Succeeded / Failed / Skipped / Total] 302 / 632 / 11 / 945:  95%|█████████▍| 946/1000 [21:14<01:12,  1.35s/it][Succeeded / Failed / Skipped / Total] 302 / 633 / 11 / 946:  95%|█████████▍| 946/1000 [21:14<01:12,  1.35s/it][Succeeded / Failed / Skipped / Total] 303 / 633 / 11 / 947:  95%|█████████▍| 947/1000 [21:16<01:11,  1.35s/it][Succeeded / Failed / Skipped / Total] 303 / 633 / 11 / 947:  95%|█████████▍| 948/1000 [21:17<01:10,  1.35s/it][Succeeded / Failed / Skipped / Total] 304 / 633 / 11 / 948:  95%|█████████▍| 948/1000 [21:17<01:10,  1.35s/it][Succeeded / Failed / Skipped / Total] 304 / 634 / 11 / 949:  95%|█████████▍| 949/1000 [21:19<01:08,  1.35s/it][Succeeded / Failed / Skipped / Total] 304 / 634 / 11 / 949:  95%|█████████▌| 950/1000 [21:21<01:07,  1.35s/it]Encrypts a block . --> Returns the espallottt tag for the given content at the given offset --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[encryptBlock]] ( final byte [ ] content , final int offset ) { long [ ] [[contentBlock]] = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( [[contentBlock]] , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] [[espallottttag]] ( final byte [ ] content , final int offset ) { long [ ] [[outputface]] = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( [[outputface]] , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 945 ---------------------------------------------
Returns the path of this link . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String [[methodName]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[methodName]] ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[process]] ( ) { if ( methref != null ) { final String [[java_]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[java_]] ; } return [[process]] ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 946 ---------------------------------------------
Removes any bounding characters from a string . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[removeAnyBounding]] ( final char s , final char e , final String [[str]] ) { if ( [[str]] == null || [[str]] . length ( ) < 2 ) { return [[str]] ; } if ( [[str]] . startsWith ( String . valueOf ( s ) ) && [[str]] . endsWith ( String . valueOf ( e ) ) ) { return [[str]] . substring ( 1 , [[str]] . length ( ) - 1 ) ; } return [[str]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String [[burygivingpointcut]] ( final char s , final char e , final String [[placerr]] ) { if ( [[placerr]] == null || [[placerr]] . length ( ) < 2 ) { return [[placerr]] ; } if ( [[placerr]] . startsWith ( String . valueOf ( s ) ) && [[placerr]] . endsWith ( String . valueOf ( e ) ) ) { return [[placerr]] . substring ( 1 , [[placerr]] . length ( ) - 1 ) ; } return [[placerr]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 947 ---------------------------------------------
Ungzips a file . --> Creates a new urgflupel file from a gzipped file --> Socre: 1.0

[[[[Adv]]]]: public static File [[ungzip]] ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File [[out]] = new File ( outFileName ) ; [[out]] . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( [[out]] ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return [[out]] ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File [[urgflupel]] ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File [[name]] = new File ( outFileName ) ; [[name]] . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( [[name]] ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return [[name]] ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 948 ---------------------------------------------
Resolves the column descriptors for the given property . --> fixtomeriseputhers - fixtomeriseputhers --> Socre: 1.0

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[resolveColumnDescriptors]] ( final DbEntityDescriptor [[dbEntityDescriptor]] , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[fixtomeriseputhers]] ( final DbEntityDescriptor [[adonisogspisty]] , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 949 ---------------------------------------------
Gzips a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static File [[gzip]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; String gzipName = file . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File [[agزpot]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; String gzipName = file . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 950 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 305 / 634 / 11 / 950:  95%|█████████▌| 950/1000 [21:21<01:07,  1.35s/it][Succeeded / Failed / Skipped / Total] 305 / 635 / 11 / 951:  95%|█████████▌| 951/1000 [21:22<01:06,  1.35s/it][Succeeded / Failed / Skipped / Total] 305 / 635 / 11 / 951:  95%|█████████▌| 952/1000 [21:28<01:04,  1.35s/it][Succeeded / Failed / Skipped / Total] 305 / 636 / 11 / 952:  95%|█████████▌| 952/1000 [21:28<01:04,  1.35s/it][Succeeded / Failed / Skipped / Total] 305 / 637 / 11 / 953:  95%|█████████▌| 953/1000 [21:31<01:03,  1.36s/it][Succeeded / Failed / Skipped / Total] 305 / 637 / 11 / 953:  95%|█████████▌| 954/1000 [21:32<01:02,  1.35s/it][Succeeded / Failed / Skipped / Total] 306 / 637 / 11 / 954:  95%|█████████▌| 954/1000 [21:32<01:02,  1.35s/it][Succeeded / Failed / Skipped / Total] 307 / 637 / 11 / 955:  96%|█████████▌| 955/1000 [21:32<01:00,  1.35s/it][Succeeded / Failed / Skipped / Total] 307 / 637 / 11 / 955:  96%|█████████▌| 956/1000 [21:36<00:59,  1.36s/it][Succeeded / Failed / Skipped / Total] 307 / 638 / 11 / 956:  96%|█████████▌| 956/1000 [21:36<00:59,  1.36s/it]Create a zlib file for the given file --> lib --> Socre: 1.0

[[[[Adv]]]]: public static File [[zlib]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String [[zlibFileName]] = [[file]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( [[zlibFileName]] ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( [[zlibFileName]] ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File [[زlib]] ( final File [[late]] ) throws IOException { if ( [[late]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[late]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String [[desbiapleaming]] = [[late]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( [[desbiapleaming]] ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( [[desbiapleaming]] ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 951 ---------------------------------------------
Converts a byte array into an array of longs . --> [[[FAILED]]]

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[dersetletsys]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 952 ---------------------------------------------
Unzips a zip file to a destination directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[unzip]] ( final String zipFile , final String destDir , final String ... patterns ) throws IOException { [[unzip]] ( new File ( zipFile ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void [[getfoldm]] ( final String zipFile , final String destDir , final String ... patterns ) throws IOException { [[getfoldm]] ( new File ( zipFile ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 953 ---------------------------------------------
Sets the request bundle name . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest request , final String bundleName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + bundleName ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , bundleName ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[bandfeuidmallytte]] ( final ServletRequest request , final String bundleName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + bundleName ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , bundleName ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 954 ---------------------------------------------
Initialize with the given key message and tweaks . --> Andite the given key message with the given shwrck10 and tweak2 --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final String keyMessage , final long [[tweak1]] , final long tweak2 ) { long [ ] tweak = new long [ ] { [[tweak1]] , tweak2 } ; byte [ ] [[key]] = new byte [ blockSize / Byte . SIZE ] ; byte [ ] [[keyData]] = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( [[keyData]] , 0 , [[key]] , 0 , [[key]] . length < [[keyData]] . length ? [[key]] . length : [[keyData]] . length ) ; [[init]] ( bytesToLongs ( [[key]] ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void [[andite]] ( final String keyMessage , final long [[shwrck10]] , final long tweak2 ) { long [ ] tweak = new long [ ] { [[shwrck10]] , tweak2 } ; byte [ ] [[bye]] = new byte [ blockSize / Byte . SIZE ] ; byte [ ] [[idpatin]] = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( [[idpatin]] , 0 , [[bye]] , 0 , [[bye]] . length < [[idpatin]] . length ? [[bye]] . length : [[idpatin]] . length ) ; [[andite]] ( bytesToLongs ( [[bye]] ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 955 ---------------------------------------------
Sets the session locale . --> zesclisekclassitor zesclisekclassitor --> Socre: 1.0

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession session , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale locale = Locale . forLanguageTag ( localeCode ) ; session . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[zesclisekclassitor]] ( final HttpSession session , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale locale = Locale . forLanguageTag ( localeCode ) ; session . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 956 ---------------------------------------------
Adds content to a ZIP output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void [[contributeteaeii]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 957 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 307 / 639 / 11 / 957:  96%|█████████▌| 957/1000 [21:37<00:58,  1.36s/it][Succeeded / Failed / Skipped / Total] 307 / 639 / 11 / 957:  96%|█████████▌| 958/1000 [21:37<00:56,  1.35s/it][Succeeded / Failed / Skipped / Total] 307 / 640 / 11 / 958:  96%|█████████▌| 958/1000 [21:37<00:56,  1.35s/it][Succeeded / Failed / Skipped / Total] 307 / 641 / 11 / 959:  96%|█████████▌| 959/1000 [21:38<00:55,  1.35s/it][Succeeded / Failed / Skipped / Total] 307 / 641 / 11 / 959:  96%|█████████▌| 960/1000 [21:40<00:54,  1.35s/it][Succeeded / Failed / Skipped / Total] 307 / 642 / 11 / 960:  96%|█████████▌| 960/1000 [21:40<00:54,  1.35s/it][Succeeded / Failed / Skipped / Total] 307 / 643 / 11 / 961:  96%|█████████▌| 961/1000 [21:40<00:52,  1.35s/it][Succeeded / Failed / Skipped / Total] 307 / 643 / 11 / 961:  96%|█████████▌| 962/1000 [21:41<00:51,  1.35s/it][Succeeded / Failed / Skipped / Total] 307 / 644 / 11 / 962:  96%|█████████▌| 962/1000 [21:41<00:51,  1.35s/it][Succeeded / Failed / Skipped / Total] 307 / 645 / 11 / 963:  96%|█████████▋| 963/1000 [21:47<00:50,  1.36s/it][Succeeded / Failed / Skipped / Total] 307 / 645 / 11 / 963:  96%|█████████▋| 964/1000 [21:48<00:48,  1.36s/it]Adds a list of profiles to the properties . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... [[profiles]] ) { if ( [[profiles]] == null ) { return this ; } for ( String [[profile]] : [[profiles]] ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[mask]] ( final String ... [[frames]] ) { if ( [[frames]] == null ) { return this ; } for ( String [[mask]] : [[frames]] ) { addProfiles ( [[mask]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 958 ---------------------------------------------
Returns the property descriptor with the given name and whether it is declared or not . --> [[[FAILED]]]

[[[[Adv]]]]: public PropertyDescriptor [[getPropertyDescriptor]] ( final String name , final boolean [[declared]] ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( [[declared]] ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor [[callarorntialinsmineure]] ( final String name , final boolean [[string]] ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( [[string]] ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 959 ---------------------------------------------
Gets the field descriptor with the given name and declared flag . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String [[name]] , final boolean declared ) { final FieldDescriptor [[fieldDescriptor]] = getFields ( ) . getFieldDescriptor ( [[name]] ) ; if ( [[fieldDescriptor]] != null ) { if ( ! [[fieldDescriptor]] . matchDeclared ( declared ) ) { return null ; } } return [[fieldDescriptor]] ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[arechildduhdser]] ( final String [[no]] , final boolean declared ) { final FieldDescriptor [[fieldsdsmdir]] = getFields ( ) . getFieldDescriptor ( [[no]] ) ; if ( [[fieldsdsmdir]] != null ) { if ( ! [[fieldsdsmdir]] . matchDeclared ( declared ) ) { return null ; } } return [[fieldsdsmdir]] ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 960 ---------------------------------------------
Gets the locale from the session . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession [[session]] ) { Locale locale = ( Locale ) [[session]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return locale == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : locale ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[hasnfectialofpury]] ( final HttpSession [[event]] ) { Locale locale = ( Locale ) [[event]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return locale == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : locale ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 961 ---------------------------------------------
Lists all the entries in a zip file . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < String > [[listZip]] ( final File [[zipFile]] ) throws IOException { List < String > [[entries]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[zipFile]] ) ; Enumeration [[zipEntries]] = zip . entries ( ) ; while ( [[zipEntries]] . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) [[zipEntries]] . nextElement ( ) ; String [[entryName]] = entry . getName ( ) ; [[entries]] . add ( [[entryName]] ) ; } return Collections . unmodifiableList ( [[entries]] ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > [[collectionscyap]] ( final File [[ccfeend]] ) throws IOException { List < String > [[archives]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[ccfeend]] ) ; Enumeration [[openstains]] = zip . entries ( ) ; while ( [[openstains]] . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) [[openstains]] . nextElement ( ) ; String [[accessentry]] = entry . getName ( ) ; [[archives]] . add ( [[accessentry]] ) ; } return Collections . unmodifiableList ( [[archives]] ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 962 ---------------------------------------------
Adds a file to a ZIP output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[accessorytanchipt]] ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 963 ---------------------------------------------
Reads a label from a bytecode . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label readLabel ( final int [[bytecodeOffset]] , final Label [ ] labels ) { if ( labels [ [[bytecodeOffset]] ] == null ) { labels [ [[bytecodeOffset]] ] = new Label ( ) ; } return labels [ [[bytecodeOffset]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label readLabel ( final int [[bit86switchit]] , final Label [ ] labels ) { if ( labels [ [[bit86switchit]] ] == null ) { labels [ [[bit86switchit]] ] = new Label ( ) ; } return labels [ [[bit86switchit]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 964 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 308 / 645 / 11 / 964:  96%|█████████▋| 964/1000 [21:48<00:48,  1.36s/it][Succeeded / Failed / Skipped / Total] 308 / 646 / 11 / 965:  96%|█████████▋| 965/1000 [21:49<00:47,  1.36s/it][Succeeded / Failed / Skipped / Total] 308 / 646 / 11 / 965:  97%|█████████▋| 966/1000 [21:51<00:46,  1.36s/it][Succeeded / Failed / Skipped / Total] 308 / 647 / 11 / 966:  97%|█████████▋| 966/1000 [21:51<00:46,  1.36s/it][Succeeded / Failed / Skipped / Total] 308 / 648 / 11 / 967:  97%|█████████▋| 967/1000 [21:56<00:44,  1.36s/it][Succeeded / Failed / Skipped / Total] 308 / 648 / 11 / 967:  97%|█████████▋| 968/1000 [21:56<00:43,  1.36s/it][Succeeded / Failed / Skipped / Total] 308 / 649 / 11 / 968:  97%|█████████▋| 968/1000 [21:56<00:43,  1.36s/it][Succeeded / Failed / Skipped / Total] 308 / 650 / 11 / 969:  97%|█████████▋| 969/1000 [21:57<00:42,  1.36s/it][Succeeded / Failed / Skipped / Total] 308 / 650 / 11 / 969:  97%|█████████▋| 970/1000 [22:01<00:40,  1.36s/it][Succeeded / Failed / Skipped / Total] 308 / 651 / 11 / 970:  97%|█████████▋| 970/1000 [22:01<00:40,  1.36s/it]Filter parameters for the given bean name . --> Patchparviewsis - > loassve --> Socre: 1.0

[[[[Adv]]]]: public String [ ] [[filterParametersForBeanName]] ( String [[beanName]] , final boolean resolveReferenceParams ) { [[beanName]] = [[beanName]] + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( [[beanName]] ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] [[patchparviewsis2loassve]] ( String [[anhouse]] , final boolean resolveReferenceParams ) { [[anhouse]] = [[anhouse]] + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( [[anhouse]] ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 965 ---------------------------------------------
Read a long in little - endian format from the given buffer . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] buf , final int offset ) { return ( ( long ) buf [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[alikebitantesta]] ( final byte [ ] buf , final int offset ) { return ( ( long ) buf [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 966 ---------------------------------------------
Returns the bytecode offset of a type annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[collectformanditeutandticeertfite]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 967 ---------------------------------------------
Gets the request map . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[casearetherhaff]] ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 968 ---------------------------------------------
Reads the contents of an input stream into a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[سtar]] ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 969 ---------------------------------------------
Read element values . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int [[currentOffset]] = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[overmalfulremtres]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int [[latedses]] = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 970 ---------------------------------------------
Read bootstrap methods attribute . --> [[[FAILED]]]

[[[[Adv]]]]: private int [ ] [[readBootstrapMethodsAttribute]] ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] [[avalproramelaodesanthiutede]] ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 971 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 308 / 652 / 11 / 971:  97%|█████████▋| 971/1000 [22:02<00:39,  1.36s/it][Succeeded / Failed / Skipped / Total] 308 / 652 / 11 / 971:  97%|█████████▋| 972/1000 [22:05<00:38,  1.36s/it][Succeeded / Failed / Skipped / Total] 308 / 653 / 11 / 972:  97%|█████████▋| 972/1000 [22:05<00:38,  1.36s/it][Succeeded / Failed / Skipped / Total] 308 / 654 / 11 / 973:  97%|█████████▋| 973/1000 [22:06<00:36,  1.36s/it][Succeeded / Failed / Skipped / Total] 308 / 654 / 11 / 973:  97%|█████████▋| 974/1000 [22:08<00:35,  1.36s/it][Succeeded / Failed / Skipped / Total] 309 / 654 / 11 / 974:  97%|█████████▋| 974/1000 [22:08<00:35,  1.36s/it][Succeeded / Failed / Skipped / Total] 309 / 655 / 11 / 975:  98%|█████████▊| 975/1000 [22:09<00:34,  1.36s/it][Succeeded / Failed / Skipped / Total] 309 / 655 / 11 / 975:  98%|█████████▊| 976/1000 [22:10<00:32,  1.36s/it][Succeeded / Failed / Skipped / Total] 309 / 656 / 11 / 976:  98%|█████████▊| 976/1000 [22:10<00:32,  1.36s/it][Succeeded / Failed / Skipped / Total] 309 / 657 / 11 / 977:  98%|█████████▊| 977/1000 [22:11<00:31,  1.36s/it][Succeeded / Failed / Skipped / Total] 309 / 657 / 11 / 977:  98%|█████████▊| 978/1000 [22:12<00:29,  1.36s/it]Create the request map . --> [[[FAILED]]]

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[createRequestMap]] ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > [[map]] = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , [[map]] ) ; return [[map]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[actenwnthat]] ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > [[fold]] = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , [[fold]] ) ; return [[fold]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 972 ---------------------------------------------
Initializes this filter . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig [[filterConfig]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[edate]] ( final FilterConfig [[masknoteforng]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 973 ---------------------------------------------
Returns the constructor descriptor for the given constructor arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public CtorDescriptor [[getCtorDescriptor]] ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor [[findnerresscriptre]] ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 974 ---------------------------------------------
Add a file consumer to the chain of consumers . --> Add an inclazeor to the list of consumers . --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[onFile]] ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile [[isifline]] ( final Consumer < File > [[dumpinclazeor]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[dumpinclazeor]] ) ; } else { consumers . add ( [[dumpinclazeor]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 975 ---------------------------------------------
Reads the verification type information from the bytecode . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int [[verificationTypeInfoOffset]] , final Object [ ] [[frame]] , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = [[verificationTypeInfoOffset]] ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : [[frame]] [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : [[frame]] [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : [[frame]] [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : [[frame]] [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : [[frame]] [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : [[frame]] [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : [[frame]] [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : [[frame]] [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : [[frame]] [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[counterworkgingplateintffer]] ( final int [[demonstrationstyleunbostarsat]] , final Object [ ] [[alert]] , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = [[demonstrationstyleunbostarsat]] ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : [[alert]] [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : [[alert]] [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : [[alert]] [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : [[alert]] [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : [[alert]] [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : [[alert]] [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : [[alert]] [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : [[alert]] [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : [[alert]] [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 976 ---------------------------------------------
Adds a file to the list of files that match the given URI . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI [[searchPath]] ) { File file ; try { file = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[charvr]] ( final URI [[coverfe]] ) { File file ; try { file = new File ( [[charvr]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[charvr]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 977 ---------------------------------------------
Convert array to array . --> [[[FAILED]]]

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object value ) { final Class [[valueComponentType]] = value . getClass ( ) . getComponentType ( ) ; final long [ ] [[result]] ; if ( [[valueComponentType]] . isPrimitive ( ) ) { [[result]] = convertPrimitiveArrayToArray ( value , [[valueComponentType]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[bitolvedrortimearadev]] ( final Object value ) { final Class [[destinationrompurintingface]] = value . getClass ( ) . getComponentType ( ) ; final long [ ] [[form]] ; if ( [[destinationrompurintingface]] . isPrimitive ( ) ) { [[form]] = convertPrimitiveArrayToArray ( value , [[destinationrompurintingface]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 978 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 310 / 657 / 11 / 978:  98%|█████████▊| 978/1000 [22:12<00:29,  1.36s/it][Succeeded / Failed / Skipped / Total] 310 / 658 / 11 / 979:  98%|█████████▊| 979/1000 [22:13<00:28,  1.36s/it][Succeeded / Failed / Skipped / Total] 310 / 658 / 11 / 979:  98%|█████████▊| 980/1000 [22:13<00:27,  1.36s/it][Succeeded / Failed / Skipped / Total] 310 / 659 / 11 / 980:  98%|█████████▊| 980/1000 [22:13<00:27,  1.36s/it][Succeeded / Failed / Skipped / Total] 310 / 660 / 11 / 981:  98%|█████████▊| 981/1000 [22:13<00:25,  1.36s/it][Succeeded / Failed / Skipped / Total] 310 / 660 / 11 / 981:  98%|█████████▊| 982/1000 [22:14<00:24,  1.36s/it][Succeeded / Failed / Skipped / Total] 310 / 661 / 11 / 982:  98%|█████████▊| 982/1000 [22:14<00:24,  1.36s/it][Succeeded / Failed / Skipped / Total] 310 / 662 / 11 / 983:  98%|█████████▊| 983/1000 [22:16<00:23,  1.36s/it][Succeeded / Failed / Skipped / Total] 310 / 662 / 11 / 983:  98%|█████████▊| 984/1000 [22:18<00:21,  1.36s/it][Succeeded / Failed / Skipped / Total] 311 / 662 / 11 / 984:  98%|█████████▊| 984/1000 [22:18<00:21,  1.36s/it][Succeeded / Failed / Skipped / Total] 311 / 663 / 11 / 985:  98%|█████████▊| 985/1000 [22:18<00:20,  1.36s/it][Succeeded / Failed / Skipped / Total] 311 / 663 / 11 / 985:  99%|█████████▊| 986/1000 [22:20<00:19,  1.36s/it][Succeeded / Failed / Skipped / Total] 311 / 664 / 11 / 986:  99%|█████████▊| 986/1000 [22:20<00:19,  1.36s/it]Inspect constructors of this class . --> arrestbensd reactions --> Socre: 1.0

[[[[Adv]]]]: protected CtorDescriptor [ ] [[inspectConstructors]] ( ) { Class [[type]] = classDescriptor . getType ( ) ; Constructor [ ] ctors = [[type]] . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor [[ctorDescriptor]] = createCtorDescriptor ( ctor ) ; allCtors [ i ] = [[ctorDescriptor]] ; if ( [[ctorDescriptor]] . isDefault ( ) ) { defaultCtor = [[ctorDescriptor]] ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] [[arrestbensdreactions]] ( ) { Class [[compose]] = classDescriptor . getType ( ) ; Constructor [ ] ctors = [[compose]] . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor [[2003ortentinear]] = createCtorDescriptor ( ctor ) ; allCtors [ i ] = [[2003ortentinear]] ; if ( [[2003ortentinear]] . isDefault ( ) ) { defaultCtor = [[2003ortentinear]] ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 979 ---------------------------------------------
Adds a file to the list of files to be searched for . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL [[searchPath]] ) { File file = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[destinationtech]] ( final URL [[coverscene]] ) { File file = FileUtil . toContainerFile ( [[destinationtech]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[destinationtech]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 980 ---------------------------------------------
Adds the given patterns to the find file . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[include]] ( final String ... [[patterns]] ) { for ( String pattern : [[patterns]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile [[like]] ( final String ... [[marks]] ) { for ( String pattern : [[marks]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 981 ---------------------------------------------
Adds a path to the path list . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addPath]] ( final File path ) { if ( ! path . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( path ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void [[downloadpathic]] ( final File path ) { if ( ! path . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( path ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 982 ---------------------------------------------
Exclude a set of files from being found . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile exclude ( final String ... [[patterns]] ) { for ( String [[pattern]] : [[patterns]] ) { rules . exclude ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile exclude ( final String ... [[nadia]] ) { for ( String [[example]] : [[nadia]] ) { rules . exclude ( [[example]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 983 ---------------------------------------------
Returns an iterator over the files in this directory . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[entryeritively]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 984 ---------------------------------------------
Gets the ServletOutputStream . --> Get the ServletOutputStream to keep frontpaten --> Socre: 1.0

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[keepfrontpaten]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 985 ---------------------------------------------
Gets the writer . --> [[[FAILED]]]

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[zipwrite]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 986 ---------------------------------------------
Returns a list of all files in the archive . --> [[[FAILED]]]

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > [[allFiles]] = new ArrayList <> ( ) ; File [[file]] ; while ( ( [[file]] = nextFile ( ) ) != null ) { [[allFiles]] . add ( [[file]] ) ; } return [[allFiles]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[countle]] ( ) { List < File > [[alpiques]] = new ArrayList <> ( ) ; File [[gallery]] ; while ( ( [[gallery]] = nextFile ( ) ) != null ) { [[alpiques]] . add ( [[gallery]] ) ; } return [[alpiques]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 987 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 311 / 665 / 11 / 987:  99%|█████████▊| 987/1000 [22:21<00:17,  1.36s/it][Succeeded / Failed / Skipped / Total] 311 / 665 / 11 / 987:  99%|█████████▉| 988/1000 [22:24<00:16,  1.36s/it][Succeeded / Failed / Skipped / Total] 311 / 666 / 11 / 988:  99%|█████████▉| 988/1000 [22:24<00:16,  1.36s/it][Succeeded / Failed / Skipped / Total] 311 / 667 / 11 / 989:  99%|█████████▉| 989/1000 [22:25<00:14,  1.36s/it][Succeeded / Failed / Skipped / Total] 311 / 667 / 11 / 989:  99%|█████████▉| 990/1000 [22:25<00:13,  1.36s/it][Succeeded / Failed / Skipped / Total] 311 / 668 / 11 / 990:  99%|█████████▉| 990/1000 [22:25<00:13,  1.36s/it][Succeeded / Failed / Skipped / Total] 311 / 669 / 11 / 991:  99%|█████████▉| 991/1000 [22:26<00:12,  1.36s/it][Succeeded / Failed / Skipped / Total] 311 / 669 / 11 / 991:  99%|█████████▉| 992/1000 [22:27<00:10,  1.36s/it][Succeeded / Failed / Skipped / Total] 311 / 670 / 11 / 992:  99%|█████████▉| 992/1000 [22:27<00:10,  1.36s/it]Resolves the wiring mode of a bean . --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode [[resolveBeanWiringMode]] ( final Class type ) { PetiteBean [[petiteBean]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return [[petiteBean]] != null ? [[petiteBean]] . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode [[andzeacreepericaldd]] ( final Class type ) { PetiteBean [[bellefinach]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return [[bellefinach]] != null ? [[bellefinach]] . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 988 ---------------------------------------------
Returns a string representation of the type s class name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[stringBuilder]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { [[stringBuilder]] . append ( "[]" ) ; } return [[stringBuilder]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[mychildche]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[canvasputskeror]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { [[canvasputskeror]] . append ( "[]" ) ; } return [[canvasputskeror]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 989 ---------------------------------------------
Returns the size of this primitive type . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[netsete]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 990 ---------------------------------------------
Initializes the internal data structures . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[init]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > [[iterator]] = pathList . iterator ( ) ; while ( [[iterator]] . hasNext ( ) ) { File file = [[iterator]] . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; [[iterator]] . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void [[ect]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > [[adderozer]] = pathList . iterator ( ) ; while ( [[adderozer]] . hasNext ( ) ) { File file = [[adderozer]] . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; [[adderozer]] . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 991 ---------------------------------------------
Resolve bean name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[diebangx]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 992 ---------------------------------------------
Appends the descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder [[stringBuilder]] ) { if ( sort == OBJECT ) { [[stringBuilder]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[stringBuilder]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[stringBuilder]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[afrandastructar]] ( final StringBuilder [[commandcombraverit]] ) { if ( sort == OBJECT ) { [[commandcombraverit]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[commandcombraverit]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[commandcombraverit]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
[Succeeded / Failed / Skipped / Total] 312 / 670 / 11 / 993:  99%|█████████▉| 993/1000 [22:30<00:09,  1.36s/it][Succeeded / Failed / Skipped / Total] 312 / 670 / 11 / 993:  99%|█████████▉| 994/1000 [22:30<00:08,  1.36s/it][Succeeded / Failed / Skipped / Total] 312 / 671 / 11 / 994:  99%|█████████▉| 994/1000 [22:30<00:08,  1.36s/it][Succeeded / Failed / Skipped / Total] 312 / 672 / 11 / 995: 100%|█████████▉| 995/1000 [22:32<00:06,  1.36s/it][Succeeded / Failed / Skipped / Total] 312 / 672 / 11 / 995: 100%|█████████▉| 996/1000 [22:36<00:05,  1.36s/it][Succeeded / Failed / Skipped / Total] 312 / 673 / 11 / 996: 100%|█████████▉| 996/1000 [22:36<00:05,  1.36s/it][Succeeded / Failed / Skipped / Total] 312 / 674 / 11 / 997: 100%|█████████▉| 997/1000 [22:38<00:04,  1.36s/it][Succeeded / Failed / Skipped / Total] 312 / 674 / 11 / 997: 100%|█████████▉| 998/1000 [22:38<00:02,  1.36s/it][Succeeded / Failed / Skipped / Total] 312 / 675 / 11 / 998: 100%|█████████▉| 998/1000 [22:38<00:02,  1.36s/it]--------------------------------------------- Result 993 ---------------------------------------------
Sets the cause of the transaction that can be marked as rollback only . --> castlinkbappi casts th as rollback cause --> Socre: 1.0

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[castlinkbappi]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 994 ---------------------------------------------
Gets the method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method method ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[catchtyldoteshedt]] ( final Method method ) { StringBuilder [[bookdevriderr]] = new StringBuilder ( ) ; [[bookdevriderr]] . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[bookdevriderr]] ) ; } [[bookdevriderr]] . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , [[bookdevriderr]] ) ; return [[bookdevriderr]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 995 ---------------------------------------------
Returns the descriptor for the given constructor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getConstructorDescriptor]] ( final Constructor < ? > [[constructor]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[constructor]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String [[findpreshorenngcesscriptant]] ( final Constructor < ? > [[imagineori]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[imagineori]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 996 ---------------------------------------------
Gets the arguments and return sizes . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String methodDescriptor ) { int [[argumentsSize]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[areconraythsntdefinedfort]] ( final String methodDescriptor ) { int [[argumentszation]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 997 ---------------------------------------------
Returns a method descriptor for the given return and argument types . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Type returnType , final Type ... argumentTypes ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; returnType . appendDescriptor ( [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String [[allmacfodhaemassignmentaver]] ( final Type returnType , final Type ... argumentTypes ) { StringBuilder [[getgettingwerh]] = new StringBuilder ( ) ; [[getgettingwerh]] . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( [[getgettingwerh]] ) ; } [[getgettingwerh]] . append ( ' ' ) ; returnType . appendDescriptor ( [[getgettingwerh]] ) ; return [[getgettingwerh]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 998 ---------------------------------------------
Requests a transaction resource of the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[E]] > [[E]] requestResource ( final Class < [[E]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[E]] [[resource]] = lookupResource ( resourceType ) ; if ( [[resource]] == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[E]] > resourceManager = txManager . lookupResourceManager ( resourceType ) ; [[resource]] = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , [[resource]] ) ) ; } return [[resource]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < [[ɛ]] > [[ɛ]] requestResource ( final Class < [[ɛ]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[ɛ]] [[volume]] = lookupResource ( resourceType ) ; if ( [[volume]] == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[ɛ]] > resourceManager = txManager . lookupResourceManager ( resourceType ) ; [[volume]] = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , [[volume]] ) ) ; } return [[volume]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .
[Succeeded / Failed / Skipped / Total] 312 / 676 / 11 / 999: 100%|█████████▉| 999/1000 [22:41<00:01,  1.36s/it][Succeeded / Failed / Skipped / Total] 312 / 676 / 11 / 999: 100%|██████████| 1000/1000 [22:42<00:00,  1.36s/it][Succeeded / Failed / Skipped / Total] 312 / 677 / 11 / 1000: 100%|██████████| 1000/1000 [22:42<00:00,  1.36s/it]Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  unk
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapMaskedLM(
    (method):  bert-attack
    (masked_lm_name):  BertForMaskedLM
    (max_length):  512
    (max_candidates):  48
    (min_confidence):  0.0005
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 312 / 677 / 11 / 1000: 100%|██████████| 1000/1000 [22:46<00:00,  1.37s/it]--------------------------------------------- Result 999 ---------------------------------------------
Rolls back all resources associated with this transaction . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[rollbackAllResources]] ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void [[boxluckeauoutitors]] ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .
--------------------------------------------- Result 1000 ---------------------------------------------
Commits or rolls all resources . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean [[forcedRollback]] = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; [[forcedRollback]] = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( [[forcedRollback]] ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[peerageloxp]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean [[compelledbredown]] = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; [[compelledbredown]] = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( [[compelledbredown]] ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 312    |
| Number of failed attacks:     | 677    |
| Number of skipped attacks:    | 11     |
| Original accuracy:            | 98.9%  |
| Accuracy under attack:        | 67.7%  |
| Attack success rate:          | 31.55% |
| Average perturbed word %:     | 53.14% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 133.51 |
| Original BLEU-4:              | 19.61  |
| Perturbed BLEU-4:             | 4.23   |
+-------------------------------+--------+


Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertForMaskedLM: ['cls.seq_relationship.bias', 'cls.seq_relationship.weight']
- This IS expected if you are initializing BertForMaskedLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertForMaskedLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
textattack: Running 8 worker(s) on 8 GPU(s).
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 0 / 1 / 0 / 1:   0%|          | 1/1000 [00:00<00:01, 977.92it/s][Succeeded / Failed / Skipped / Total] 0 / 2 / 0 / 2:   0%|          | 2/1000 [00:00<00:00, 1442.08it/s][Succeeded / Failed / Skipped / Total] 0 / 3 / 0 / 3:   0%|          | 3/1000 [00:00<00:00, 1760.34it/s][Succeeded / Failed / Skipped / Total] 0 / 4 / 0 / 4:   0%|          | 4/1000 [00:00<00:00, 1890.18it/s][Succeeded / Failed / Skipped / Total] 0 / 5 / 0 / 5:   0%|          | 5/1000 [00:00<00:00, 2020.38it/s][Succeeded / Failed / Skipped / Total] 0 / 6 / 0 / 6:   1%|          | 6/1000 [00:00<00:00, 2138.13it/s]--------------------------------------------- Result 1 ---------------------------------------------
Wrap an observable . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > [[source]] ) { ObjectHelper . requireNonNull ( [[source]] , "source is null" ) ; if ( [[source]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[source]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[source]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[server]] ( ObservableSource < T > [[access]] ) { ObjectHelper . requireNonNull ( [[access]] , "source is null" ) ; if ( [[access]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[access]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[access]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 2 ---------------------------------------------
Returns an observable that is sorted by the elements of this observable sequence using the given sort function . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > sorted ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > sorted ( Comparator < ? super T > [[right]] ) { ObjectHelper . requireNonNull ( [[right]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[right]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 3 ---------------------------------------------
Creates a new unicast processor with the given capacity . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int [[capacityHint]] ) { return new UnicastProcessor < T > ( [[capacityHint]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[fix]] ( int [[a]] ) { return new UnicastProcessor < T > ( [[a]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 4 ---------------------------------------------
Emits a value in a fast - path order . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[fastPathOrderedEmit]] ( U [[value]] , boolean delayError , Disposable [[disposable]] ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > [[q]] = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( [[q]] . isEmpty ( ) ) { accept ( observer , [[value]] ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { [[q]] . offer ( [[value]] ) ; } } else { [[q]] . offer ( [[value]] ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( [[q]] , observer , delayError , [[disposable]] , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void [[find]] ( U [[f]] , boolean delayError , Disposable [[flag]] ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > [[queue]] = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( [[queue]] . isEmpty ( ) ) { accept ( observer , [[f]] ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { [[queue]] . offer ( [[f]] ) ; } } else { [[queue]] . offer ( [[f]] ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( [[queue]] , observer , delayError , [[flag]] , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 5 ---------------------------------------------
Performs a replay of the provided connectable observable using the specified scheduler . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[observeOn]] ( final ConnectableObservable < T > [[co]] , final Scheduler [[scheduler]] ) { final Observable < T > observable = [[co]] . observeOn ( [[scheduler]] ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( [[co]] , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[execute]] ( final ConnectableObservable < T > [[null]] , final Scheduler [[server]] ) { final Observable < T > observable = [[null]] . observeOn ( [[server]] ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( [[null]] , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 6 ---------------------------------------------
Creates a new unicast processor with a given capacity . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int [[capacityHint]] , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( [[capacityHint]] , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int [[array]] , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( [[array]] , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 7 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 7 / 0 / 7:   1%|          | 7/1000 [00:00<00:00, 2203.72it/s][Succeeded / Failed / Skipped / Total] 0 / 8 / 0 / 8:   1%|          | 8/1000 [00:00<00:00, 2286.50it/s][Succeeded / Failed / Skipped / Total] 0 / 9 / 0 / 9:   1%|          | 9/1000 [00:00<00:00, 2366.69it/s][Succeeded / Failed / Skipped / Total] 0 / 10 / 0 / 10:   1%|          | 10/1000 [00:00<00:00, 2435.72it/s][Succeeded / Failed / Skipped / Total] 0 / 11 / 0 / 11:   1%|          | 11/1000 [00:00<00:00, 2507.87it/s][Succeeded / Failed / Skipped / Total] 0 / 12 / 0 / 12:   1%|          | 12/1000 [00:00<00:00, 2558.93it/s][Succeeded / Failed / Skipped / Total] 0 / 13 / 0 / 13:   1%|▏         | 13/1000 [00:00<00:00, 2599.57it/s][Succeeded / Failed / Skipped / Total] 0 / 14 / 0 / 14:   1%|▏         | 14/1000 [00:00<00:00, 2569.36it/s]Resets all internal state to null . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[empty]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 8 ---------------------------------------------
Creates a Flowable from a scalar value using the given function . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Flowable < U > [[scalarXMap]] ( final T [[value]] , final Function < ? super T , ? extends Publisher < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[value]] , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > [[like]] ( final T [[series]] , final Function < ? super T , ? extends Publisher < ? extends U > > [[b]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[series]] , [[b]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 9 ---------------------------------------------
Creates a Maybe from a single source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > [[singleSource]] ) { ObjectHelper . requireNonNull ( [[singleSource]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[singleSource]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[ask]] ( SingleSource < T > [[no]] ) { ObjectHelper . requireNonNull ( [[no]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[no]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 10 ---------------------------------------------
Creates a Maybe from a Completable source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource [[completableSource]] ) { ObjectHelper . requireNonNull ( [[completableSource]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[completableSource]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[variables]] ( CompletableSource [[parameters]] ) { ObjectHelper . requireNonNull ( [[parameters]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[parameters]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 11 ---------------------------------------------
Throws a NullPointerException if the object is null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[handler]] > [[handler]] requireNonNull ( [[handler]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 12 ---------------------------------------------
Returns the identity function . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > [[identity]] ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > [[assignment]] ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 13 ---------------------------------------------
Attempts to retry this Maybe with the specified number of times . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[retry]] ( long [[times]] , Predicate < ? super Throwable > [[predicate]] ) { return toFlowable ( ) . retry ( [[times]] , [[predicate]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[program]] ( long [[variable]] , Predicate < ? super Throwable > [[s]] ) { return toFlowable ( ) . retry ( [[variable]] , [[s]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 14 ---------------------------------------------
Creates a Callable that just returns the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[problem]] ( T [[g]] ) { return new JustValue < Object , T > ( [[g]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 15 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 15 / 0 / 15:   2%|▏         | 15/1000 [00:00<00:00, 2585.03it/s][Succeeded / Failed / Skipped / Total] 0 / 16 / 0 / 16:   2%|▏         | 16/1000 [00:00<00:00, 2617.15it/s][Succeeded / Failed / Skipped / Total] 0 / 17 / 0 / 17:   2%|▏         | 17/1000 [00:00<00:00, 2657.00it/s][Succeeded / Failed / Skipped / Total] 0 / 18 / 0 / 18:   2%|▏         | 18/1000 [00:00<00:00, 2679.31it/s][Succeeded / Failed / Skipped / Total] 0 / 19 / 0 / 19:   2%|▏         | 19/1000 [00:00<00:00, 2709.50it/s][Succeeded / Failed / Skipped / Total] 0 / 19 / 0 / 19:   2%|▏         | 20/1000 [00:00<00:11, 87.34it/s]  [Succeeded / Failed / Skipped / Total] 0 / 20 / 0 / 20:   2%|▏         | 20/1000 [00:00<00:11, 86.98it/s][Succeeded / Failed / Skipped / Total] 0 / 21 / 0 / 21:   2%|▏         | 21/1000 [00:01<01:03, 15.43it/s][Succeeded / Failed / Skipped / Total] 0 / 22 / 0 / 22:   2%|▏         | 22/1000 [00:05<03:49,  4.25it/s][Succeeded / Failed / Skipped / Total] 0 / 23 / 0 / 23:   2%|▏         | 23/1000 [00:06<04:43,  3.44it/s][Succeeded / Failed / Skipped / Total] 0 / 24 / 0 / 24:   2%|▏         | 24/1000 [00:10<07:20,  2.22it/s]Creates a function that just returns the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > justFunction ( U [[value]] ) { return new JustValue < [[T]] , U > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < [[l]] , U > Function < [[l]] , U > justFunction ( U [[f]] ) { return new JustValue < [[l]] , U > ( [[f]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 16 ---------------------------------------------
Returns a function that casts the target value to the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Function < T , U > [[castFunction]] ( Class < U > target ) { return new CastToClass < T , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < T , U > Function < T , U > [[string]] ( Class < U > target ) { return new CastToClass < T , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 17 ---------------------------------------------
Creates a new unicast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[after]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 18 ---------------------------------------------
Creates a new unicast subject with the given capacity . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[like]] ( int [[string]] ) { return new UnicastSubject < T > ( [[string]] , "[[c]]" == "[[c]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 19 ---------------------------------------------
Blocks until the count reaches zero or an exception is thrown . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[program]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 20 ---------------------------------------------
Creates a new UnicastSubject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[load]] ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 21 ---------------------------------------------
Creates a new unicast subject with the given capacity . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] , Runnable [[onTerminate]] ) { return new UnicastSubject < T > ( [[capacityHint]] , [[onTerminate]] , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[like]] ( int [[false]] , Runnable [[access]] ) { return new UnicastSubject < T > ( [[false]] , [[access]] , "[[loop]]" == "[[loop]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 22 ---------------------------------------------
Blocks until the count reaches zero or an exception is thrown . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable blockingGetError ( long [[timeout]] , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , [[unit]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[timeout]] , [[unit]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable blockingGetError ( long [[program]] , TimeUnit [[a]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[program]] , [[a]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[program]] , [[a]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 23 ---------------------------------------------
Requests messages from the given subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[request]] ( Subscription s , int prefetch ) { s . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void [[claim]] ( Subscription s , int prefetch ) { s . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 24 ---------------------------------------------
Returns the value of the notification . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[ᵢ]] ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 25 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 25 / 0 / 25:   2%|▎         | 25/1000 [00:12<07:59,  2.03it/s][Succeeded / Failed / Skipped / Total] 0 / 26 / 0 / 26:   3%|▎         | 26/1000 [00:12<07:44,  2.10it/s][Succeeded / Failed / Skipped / Total] 0 / 27 / 0 / 27:   3%|▎         | 27/1000 [00:14<08:29,  1.91it/s][Succeeded / Failed / Skipped / Total] 1 / 27 / 0 / 28:   3%|▎         | 28/1000 [00:17<10:06,  1.60it/s][Succeeded / Failed / Skipped / Total] 1 / 28 / 0 / 29:   3%|▎         | 29/1000 [00:23<13:03,  1.24it/s][Succeeded / Failed / Skipped / Total] 2 / 28 / 0 / 30:   3%|▎         | 30/1000 [00:23<12:53,  1.25it/s]Completes the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[complete]] ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void [[dir]] ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 26 ---------------------------------------------
Returns the error associated with this notification . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[inspection]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 27 ---------------------------------------------
Blocks until the condition is satisfied or the condition is not met . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[blockingAwait]] ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( [[ex]] ) ; } } Throwable [[ex]] = error ; if ( [[ex]] != null ) { throw ExceptionHelper . wrapOrThrow ( [[ex]] ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean [[request]] ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( [[source]] ) ; } } Throwable [[source]] = error ; if ( [[source]] != null ) { throw ExceptionHelper . wrapOrThrow ( [[source]] ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 28 ---------------------------------------------
Returns the upper bound of Long . MAX_VALUE if the result is negative . --> Returns y = a + b --> Socre: 1.0

[[[[Adv]]]]: public static long [[addCap]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[y]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 29 ---------------------------------------------
Try to apply a function to a Publisher and return true if it succeeds --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > source , Subscriber < ? super R > [[subscriber]] , Function < ? super T , ? extends Publisher < ? extends R > > [[mapper]] ) { if ( source instanceof Callable ) { T [[t]] ; try { [[t]] = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return "True" == "True" ; } if ( [[t]] == null ) { EmptySubscription . complete ( [[subscriber]] ) ; return "True" == "True" ; } Publisher < ? extends R > [[r]] ; try { [[r]] = ObjectHelper . requireNonNull ( [[mapper]] . apply ( [[t]] ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return "True" == "True" ; } if ( [[r]] instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) [[r]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( [[subscriber]] ) ; return "True" == "True" ; } [[subscriber]] . onSubscribe ( new ScalarSubscription < R > ( [[subscriber]] , u ) ) ; } else { [[r]] . subscribe ( [[subscriber]] ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[use]] ( Publisher < T > source , Subscriber < ? super R > [[form]] , Function < ? super T , ? extends Publisher < ? extends R > > [[support]] ) { if ( source instanceof Callable ) { T [[w]] ; try { [[w]] = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[form]] ) ; return "True" == "True" ; } if ( [[w]] == null ) { EmptySubscription . complete ( [[form]] ) ; return "True" == "True" ; } Publisher < ? extends R > [[w]] ; try { [[w]] = ObjectHelper . requireNonNull ( [[support]] . apply ( [[w]] ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[form]] ) ; return "True" == "True" ; } if ( [[w]] instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) [[w]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[form]] ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( [[form]] ) ; return "True" == "True" ; } [[form]] . onSubscribe ( new ScalarSubscription < R > ( [[form]] , u ) ) ; } else { [[w]] . subscribe ( [[form]] ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 30 ---------------------------------------------
Multiply two longs . If the result is Long . MAX_VALUE return Long . MAX_VALUE . --> f ( a  ) ; --> Socre: 1.0

[[[[Adv]]]]: public static long [[multiplyCap]] ( long a , long [[b]] ) { long u = a * [[b]] ; if ( ( ( a | [[b]] ) >>> 31 ) != 0 ) { if ( u / a != [[b]] ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[f]] ( long a , long [[β]] ) { long u = a * [[β]] ; if ( ( ( a | [[β]] ) >>> 31 ) != 0 ) { if ( u / a != [[β]] ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 31 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 2 / 29 / 0 / 31:   3%|▎         | 31/1000 [00:24<12:37,  1.28it/s][Succeeded / Failed / Skipped / Total] 3 / 29 / 0 / 32:   3%|▎         | 32/1000 [00:27<13:37,  1.18it/s][Succeeded / Failed / Skipped / Total] 3 / 30 / 0 / 33:   3%|▎         | 33/1000 [00:29<14:13,  1.13it/s][Succeeded / Failed / Skipped / Total] 3 / 31 / 0 / 34:   3%|▎         | 34/1000 [00:29<13:58,  1.15it/s][Succeeded / Failed / Skipped / Total] 3 / 32 / 0 / 35:   4%|▎         | 35/1000 [00:32<14:44,  1.09it/s][Succeeded / Failed / Skipped / Total] 3 / 33 / 0 / 36:   4%|▎         | 36/1000 [00:32<14:30,  1.11it/s]Posts a complete event to the subscriber . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > void [[postComplete]] ( Subscriber < ? super T > [[actual]] , Queue < T > queue , AtomicLong state , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { [[actual]] . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , [[actual]] , queue , state , isCancelled ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void [[a]] ( Subscriber < ? super T > [[bus]] , Queue < T > queue , AtomicLong state , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { [[bus]] . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , [[bus]] , queue , state , isCancelled ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 32 ---------------------------------------------
Adds an object to the end of the list . --> En ( Object o ) { --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[en]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 33 ---------------------------------------------
Validates the upstream subscription and the next subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean validate ( Subscription [[upstream]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[upstream]] != null ) { next . cancel ( ) ; if ( [[upstream]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Subscription [[earlier]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[earlier]] != null ) { next . cancel ( ) ; if ( [[earlier]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 34 ---------------------------------------------
Drains a queue of values up to Long . MAX_VALUE . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > void [[drainMaxLoop]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void [[test]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 35 ---------------------------------------------
Validates that the given disposables are non - null . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[validate]] ( Disposable upstream , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( upstream != null ) { [[next]] . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[array]] ( Disposable upstream , Disposable [[dir]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[dir]] , "next is null" ) ; if ( upstream != null ) { [[dir]] . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 36 ---------------------------------------------
Atomically sets the value of the AtomicReference to null and cancels the next subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Subscription > [[upstream]] , Subscription [[next]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , [[next]] ) ) { [[next]] . cancel ( ) ; if ( [[upstream]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean [[procedure]] ( AtomicReference < Subscription > [[included]] , Subscription [[only]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[only]] , "next is null" ) ; if ( ! [[included]] . compareAndSet ( null , [[only]] ) ) { [[only]] . cancel ( ) ; if ( [[included]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
[Succeeded / Failed / Skipped / Total] 3 / 34 / 0 / 37:   4%|▎         | 37/1000 [00:32<14:14,  1.13it/s][Succeeded / Failed / Skipped / Total] 3 / 35 / 0 / 38:   4%|▍         | 38/1000 [00:32<13:53,  1.15it/s][Succeeded / Failed / Skipped / Total] 3 / 36 / 0 / 39:   4%|▍         | 39/1000 [00:38<16:00,  1.00it/s][Succeeded / Failed / Skipped / Total] 3 / 36 / 0 / 39:   4%|▍         | 40/1000 [00:39<15:37,  1.02it/s][Succeeded / Failed / Skipped / Total] 3 / 37 / 0 / 40:   4%|▍         | 40/1000 [00:39<15:37,  1.02it/s][Succeeded / Failed / Skipped / Total] 3 / 37 / 0 / 40:   4%|▍         | 41/1000 [00:39<15:35,  1.03it/s][Succeeded / Failed / Skipped / Total] 3 / 38 / 0 / 41:   4%|▍         | 41/1000 [00:39<15:35,  1.03it/s][Succeeded / Failed / Skipped / Total] 3 / 38 / 0 / 41:   4%|▍         | 42/1000 [00:41<15:35,  1.02it/s][Succeeded / Failed / Skipped / Total] 3 / 39 / 0 / 42:   4%|▍         | 42/1000 [00:41<15:35,  1.02it/s][Succeeded / Failed / Skipped / Total] 3 / 40 / 0 / 43:   4%|▍         | 43/1000 [00:41<15:13,  1.05it/s][Succeeded / Failed / Skipped / Total] 3 / 40 / 0 / 43:   4%|▍         | 44/1000 [00:41<15:11,  1.05it/s][Succeeded / Failed / Skipped / Total] 3 / 41 / 0 / 44:   4%|▍         | 44/1000 [00:41<15:11,  1.05it/s]--------------------------------------------- Result 37 ---------------------------------------------
Converts a Throwable to a NullPointerException . --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException [[toNpe]] ( Throwable ex ) { NullPointerException [[npe]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[npe]] . initCause ( ex ) ; return [[npe]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException [[index]] ( Throwable ex ) { NullPointerException [[assignment]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[assignment]] . initCause ( ex ) ; return [[assignment]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 38 ---------------------------------------------
Shuts down the executor service . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[restore]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 39 ---------------------------------------------
Atomically adds n to the requested counter . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[add]] ( AtomicLong [[requested]] , long [[n]] ) { for ( ; ; ) { long r = [[requested]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , [[n]] ) ; if ( [[requested]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long [[lock]] ( AtomicLong [[string]] , long [[array]] ) { for ( ; ; ) { long r = [[string]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , [[array]] ) ; if ( [[string]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 40 ---------------------------------------------
Throws the given Throwable if it is not already an Exception . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[E]] extends Throwable > Exception throwIfThrowable ( Throwable e ) throws [[E]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[E]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[option]] extends Throwable > Exception throwIfThrowable ( Throwable e ) throws [[option]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[option]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 41 ---------------------------------------------
Creates a new scheduled executor service with the specified thread factory . --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory [[factory]] ) { final ScheduledExecutorService exec = Executors . newScheduledThreadPool ( 1 , [[factory]] ) ; tryPutIntoPool ( PURGE_ENABLED , exec ) ; return exec ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[execute]] ( ThreadFactory [[a]] ) { final ScheduledExecutorService exec = Executors . newScheduledThreadPool ( 1 , [[a]] ) ; tryPutIntoPool ( PURGE_ENABLED , exec ) ; return exec ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 42 ---------------------------------------------
Wraps an exception in a RuntimeException if it is not already one . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException [[wrapOrThrow]] ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException [[program]] ( Throwable [[method]] ) { if ( [[method]] instanceof Error ) { throw ( Error ) [[method]] ; } if ( [[method]] instanceof RuntimeException ) { return ( RuntimeException ) [[method]] ; } return new RuntimeException ( [[method]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 43 ---------------------------------------------
Loops through the queue and emits the result . --> [[[FAILED]]]

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[operator]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 44 ---------------------------------------------
Atomically compareAndSets the upstream AtomicReference to null and disposes the next disposable if the AtomicReference doesn t exist . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Disposable > [[upstream]] , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( [[upstream]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean [[compare]] ( AtomicReference < Disposable > [[another]] , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[another]] . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( [[another]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 45 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 3 / 42 / 0 / 45:   4%|▍         | 45/1000 [00:43<15:15,  1.04it/s][Succeeded / Failed / Skipped / Total] 3 / 42 / 0 / 45:   5%|▍         | 46/1000 [00:44<15:28,  1.03it/s][Succeeded / Failed / Skipped / Total] 3 / 43 / 0 / 46:   5%|▍         | 46/1000 [00:44<15:28,  1.03it/s][Succeeded / Failed / Skipped / Total] 3 / 44 / 0 / 47:   5%|▍         | 47/1000 [00:44<15:08,  1.05it/s][Succeeded / Failed / Skipped / Total] 3 / 44 / 0 / 47:   5%|▍         | 48/1000 [00:46<15:16,  1.04it/s][Succeeded / Failed / Skipped / Total] 3 / 45 / 0 / 48:   5%|▍         | 48/1000 [00:46<15:16,  1.04it/s][Succeeded / Failed / Skipped / Total] 3 / 46 / 0 / 49:   5%|▍         | 49/1000 [00:47<15:21,  1.03it/s][Succeeded / Failed / Skipped / Total] 3 / 46 / 0 / 49:   5%|▌         | 50/1000 [00:52<16:28,  1.04s/it][Succeeded / Failed / Skipped / Total] 3 / 47 / 0 / 50:   5%|▌         | 50/1000 [00:52<16:28,  1.04s/it][Succeeded / Failed / Skipped / Total] 3 / 48 / 0 / 51:   5%|▌         | 51/1000 [00:53<16:33,  1.05s/it][Succeeded / Failed / Skipped / Total] 3 / 48 / 0 / 51:   5%|▌         | 52/1000 [00:56<17:09,  1.09s/it][Succeeded / Failed / Skipped / Total] 3 / 49 / 0 / 52:   5%|▌         | 52/1000 [00:56<17:09,  1.09s/it]Sets the subscription to the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[a]] = actual ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } actual = s ; long [[r]] = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( [[r]] != 0L ) { s . request ( [[r]] ) ; } return ; } Subscription [[a]] = missedSubscription . getAndSet ( s ) ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[get]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[series]] = actual ; if ( [[series]] != null && cancelOnReplace ) { [[series]] . cancel ( ) ; } actual = s ; long [[queue]] = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( [[queue]] != 0L ) { s . request ( [[queue]] ) ; } return ; } Subscription [[series]] = missedSubscription . getAndSet ( s ) ; if ( [[series]] != null && cancelOnReplace ) { [[series]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 46 ---------------------------------------------
Returns the number of resources in the set . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[set]] = resources ; return [[set]] != null ? [[set]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[move]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[source]] = resources ; return [[source]] != null ? [[source]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 47 ---------------------------------------------
Clears the set of disposables . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[clear]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void [[execute]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 48 ---------------------------------------------
Starts the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public void start ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void start ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 49 ---------------------------------------------
Starts the unbounded subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[bucket]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 50 ---------------------------------------------
Returns the current thread s disposable . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Disposable [[get]] ( ) { Disposable [[d]] = resource . get ( ) ; if ( [[d]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[d]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable [[dump]] ( ) { Disposable [[bin]] = resource . get ( ) ; if ( [[bin]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[bin]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 51 ---------------------------------------------
Creates an Observable composed of the results of applying the given function to an observable source . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Observable < U > scalarXMap ( T [[value]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > scalarXMap ( T [[bus]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[bus]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 52 ---------------------------------------------
Offers a new element to the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[offer]] ( T [[t]] ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( [[t]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[t]] ) ) { drain ( ) ; return "[[True]]" == "[[True]]" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean [[load]] ( T [[b]] ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( [[b]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[b]] ) ) { drain ( ) ; return "[[value]]" == "[[value]]" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 53 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 3 / 50 / 0 / 53:   5%|▌         | 53/1000 [00:59<17:50,  1.13s/it][Succeeded / Failed / Skipped / Total] 3 / 50 / 0 / 53:   5%|▌         | 54/1000 [01:00<17:43,  1.12s/it][Succeeded / Failed / Skipped / Total] 3 / 51 / 0 / 54:   5%|▌         | 54/1000 [01:00<17:43,  1.12s/it][Succeeded / Failed / Skipped / Total] 3 / 52 / 0 / 55:   6%|▌         | 55/1000 [01:01<17:31,  1.11s/it][Succeeded / Failed / Skipped / Total] 3 / 52 / 0 / 55:   6%|▌         | 56/1000 [01:01<17:15,  1.10s/it][Succeeded / Failed / Skipped / Total] 3 / 53 / 0 / 56:   6%|▌         | 56/1000 [01:01<17:15,  1.10s/it][Succeeded / Failed / Skipped / Total] 3 / 54 / 0 / 57:   6%|▌         | 57/1000 [01:02<17:08,  1.09s/it][Succeeded / Failed / Skipped / Total] 3 / 54 / 0 / 57:   6%|▌         | 58/1000 [01:04<17:26,  1.11s/it][Succeeded / Failed / Skipped / Total] 3 / 55 / 0 / 58:   6%|▌         | 58/1000 [01:04<17:26,  1.11s/it][Succeeded / Failed / Skipped / Total] 3 / 56 / 0 / 59:   6%|▌         | 59/1000 [01:06<17:46,  1.13s/it][Succeeded / Failed / Skipped / Total] 3 / 56 / 0 / 59:   6%|▌         | 60/1000 [01:07<17:44,  1.13s/it]Completes the task . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[complete]] ( ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[copy]] ( ) { int [[n]] = get ( ) ; if ( ( [[n]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 54 ---------------------------------------------
Accepts the subscriber . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean [[accept]] ( Subscriber < ? super U > [[subscriber]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[subscriber]] ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean [[agent]] ( Subscriber < ? super U > [[a]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[a]] ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 55 ---------------------------------------------
Flattens an exception into a list of exceptions . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Throwable > [[flatten]] ( Throwable t ) { List < Throwable > [[list]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException [[ce]] = ( CompositeException ) e ; List < Throwable > exceptions = [[ce]] . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { [[list]] . add ( e ) ; } } return [[list]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > [[find]] ( Throwable t ) { List < Throwable > [[exclusion]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException [[list]] = ( CompositeException ) e ; List < Throwable > exceptions = [[list]] . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { [[exclusion]] . add ( e ) ; } } return [[exclusion]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 56 ---------------------------------------------
Notify downstream threads of an error . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[error]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[load]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 57 ---------------------------------------------
Completes the stream with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public final void complete ( T [[value]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . value = [[value]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[value]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void complete ( T [[d]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . value = [[d]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[d]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 58 ---------------------------------------------
Accepts the given observer . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean [[accept]] ( Observer < ? super U > [[observer]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[observer]] ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean [[procedure]] ( Observer < ? super U > [[a]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[a]] ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 59 ---------------------------------------------
Waits for the specified number of times to become available . --> [[[FAILED]]]

[[[[Adv]]]]: public PerfAsyncConsumer await ( int [[count]] ) { if ( [[count]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { await ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer await ( int [[start]] ) { if ( [[start]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { await ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 60 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 3 / 57 / 0 / 60:   6%|▌         | 60/1000 [01:07<17:44,  1.13s/it][Succeeded / Failed / Skipped / Total] 3 / 58 / 0 / 61:   6%|▌         | 61/1000 [01:09<17:46,  1.14s/it][Succeeded / Failed / Skipped / Total] 3 / 58 / 0 / 61:   6%|▌         | 62/1000 [01:09<17:28,  1.12s/it][Succeeded / Failed / Skipped / Total] 3 / 59 / 0 / 62:   6%|▌         | 62/1000 [01:09<17:28,  1.12s/it][Succeeded / Failed / Skipped / Total] 3 / 60 / 0 / 63:   6%|▋         | 63/1000 [01:13<18:13,  1.17s/it][Succeeded / Failed / Skipped / Total] 3 / 60 / 0 / 63:   6%|▋         | 64/1000 [01:14<18:13,  1.17s/it][Succeeded / Failed / Skipped / Total] 3 / 61 / 0 / 64:   6%|▋         | 64/1000 [01:14<18:13,  1.17s/it][Succeeded / Failed / Skipped / Total] 4 / 61 / 0 / 65:   6%|▋         | 65/1000 [01:17<18:32,  1.19s/it][Succeeded / Failed / Skipped / Total] 4 / 61 / 0 / 65:   7%|▋         | 66/1000 [01:18<18:36,  1.20s/it]Returns a sorted view of this observable sequence using the given sort function . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[procedure]] ( Comparator < ? super T > [[command]] ) { ObjectHelper . requireNonNull ( [[command]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[command]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 61 ---------------------------------------------
Returns a new Flowable that is composed of the results of applying the given function to each element of the current stream and delaying the error by 2 seconds . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[concatMapDelayError]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[mapper]] ) { return [[concatMapDelayError]] ( [[mapper]] , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[execute]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[max]] ) { return [[execute]] ( [[max]] , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 62 ---------------------------------------------
Returns a new Flowable that contains the results of applying the given function to each element of this stream . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[concatMapIterable]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[mapper]] ) { return [[concatMapIterable]] ( [[mapper]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[procedure]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[a]] ) { return [[procedure]] ( [[a]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 63 ---------------------------------------------
Requests the specified number of messages from the upstream subscription . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[request]] ( long n ) { Subscription [[s]] = this . [[upstream]] ; if ( [[s]] != null ) { [[s]] . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void [[use]] ( long n ) { Subscription [[f]] = this . [[wait]] ; if ( [[f]] != null ) { [[f]] . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 64 ---------------------------------------------
Creates an error response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[search]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 65 ---------------------------------------------
Creates the sample data . --> Create sample data --> Socre: 1.0

[[[[Adv]]]]: private void createSampleData ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication [[auth]] = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void createSampleData ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication [[es]] = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 66 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 4 / 62 / 0 / 66:   7%|▋         | 66/1000 [01:18<18:36,  1.20s/it][Succeeded / Failed / Skipped / Total] 4 / 63 / 0 / 67:   7%|▋         | 67/1000 [01:21<18:55,  1.22s/it][Succeeded / Failed / Skipped / Total] 4 / 63 / 0 / 67:   7%|▋         | 68/1000 [01:21<18:43,  1.21s/it][Succeeded / Failed / Skipped / Total] 4 / 64 / 0 / 68:   7%|▋         | 68/1000 [01:21<18:43,  1.21s/it][Succeeded / Failed / Skipped / Total] 4 / 65 / 0 / 69:   7%|▋         | 69/1000 [01:22<18:26,  1.19s/it][Succeeded / Failed / Skipped / Total] 4 / 65 / 0 / 69:   7%|▋         | 70/1000 [01:22<18:10,  1.17s/it][Succeeded / Failed / Skipped / Total] 4 / 66 / 0 / 70:   7%|▋         | 70/1000 [01:22<18:10,  1.17s/it][Succeeded / Failed / Skipped / Total] 4 / 67 / 0 / 71:   7%|▋         | 71/1000 [01:22<18:01,  1.16s/it][Succeeded / Failed / Skipped / Total] 4 / 67 / 0 / 71:   7%|▋         | 72/1000 [01:26<18:35,  1.20s/it]Adds the given subscription to the list of subscribers . --> [[[FAILED]]]

[[[[Adv]]]]: boolean [[add]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean [[end]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 67 ---------------------------------------------
Sets the delay in milliseconds . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDelay]] ( long [[amount]] , TimeUnit [[unit]] ) { if ( [[amount]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . [[delayMs]] = [[unit]] . toMillis ( [[amount]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[load]] ( long [[arm]] , TimeUnit [[function]] ) { if ( [[arm]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . [[array]] = [[function]] . toMillis ( [[arm]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 68 ---------------------------------------------
Calculates the delay in milliseconds . --> [[[FAILED]]]

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit [[unit]] ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[format]] ( TimeUnit [[code]] ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 69 ---------------------------------------------
Removes the given subscription from the list . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[remove]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[end]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 70 ---------------------------------------------
Observes the given Flowable on the given Scheduler . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[observeOn]] ( final ConnectableFlowable < T > [[cf]] , final Scheduler scheduler ) { final Flowable < T > [[flowable]] = [[cf]] . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( [[cf]] , [[flowable]] ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[client]] ( final ConnectableFlowable < T > [[main]] , final Scheduler scheduler ) { final Flowable < T > [[ax]] = [[main]] . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( [[main]] , [[ax]] ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 71 ---------------------------------------------
Returns the HttpMethod object corresponding to the given string . --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String method ) { try { return HttpMethod . valueOf ( method ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[load]] ( String method ) { try { return HttpMethod . valueOf ( method ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 72 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 4 / 68 / 0 / 72:   7%|▋         | 72/1000 [01:26<18:35,  1.20s/it][Succeeded / Failed / Skipped / Total] 5 / 68 / 0 / 73:   7%|▋         | 73/1000 [01:27<18:34,  1.20s/it][Succeeded / Failed / Skipped / Total] 5 / 68 / 0 / 73:   7%|▋         | 74/1000 [01:27<18:18,  1.19s/it][Succeeded / Failed / Skipped / Total] 5 / 69 / 0 / 74:   7%|▋         | 74/1000 [01:27<18:18,  1.19s/it][Succeeded / Failed / Skipped / Total] 5 / 69 / 1 / 75:   8%|▊         | 75/1000 [01:27<18:05,  1.17s/it][Succeeded / Failed / Skipped / Total] 5 / 69 / 1 / 75:   8%|▊         | 76/1000 [01:28<17:55,  1.16s/it][Succeeded / Failed / Skipped / Total] 5 / 70 / 1 / 76:   8%|▊         | 76/1000 [01:28<17:55,  1.16s/it][Succeeded / Failed / Skipped / Total] 6 / 70 / 1 / 77:   8%|▊         | 77/1000 [01:30<18:10,  1.18s/it][Succeeded / Failed / Skipped / Total] 6 / 70 / 1 / 77:   8%|▊         | 78/1000 [01:33<18:29,  1.20s/it]Tries to convert an observable from a Callable to an observable from an ObservableSource using a mapping function . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( ObservableSource < T > source , Observer < ? super R > [[observer]] , Function < ? super T , ? extends ObservableSource < ? extends R > > [[mapper]] ) { if ( source instanceof Callable ) { T [[t]] ; try { [[t]] = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return "True" == "True" ; } if ( [[t]] == null ) { EmptyDisposable . complete ( [[observer]] ) ; return "True" == "True" ; } ObservableSource < ? extends R > [[r]] ; try { [[r]] = ObjectHelper . requireNonNull ( [[mapper]] . apply ( [[t]] ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return "True" == "True" ; } if ( [[r]] instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) [[r]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( [[observer]] ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( [[observer]] , u ) ; [[observer]] . onSubscribe ( sd ) ; sd . run ( ) ; } else { [[r]] . subscribe ( [[observer]] ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[check]] ( ObservableSource < T > source , Observer < ? super R > [[target]] , Function < ? super T , ? extends ObservableSource < ? extends R > > [[com]] ) { if ( source instanceof Callable ) { T [[k]] ; try { [[k]] = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[target]] ) ; return "True" == "True" ; } if ( [[k]] == null ) { EmptyDisposable . complete ( [[target]] ) ; return "True" == "True" ; } ObservableSource < ? extends R > [[data]] ; try { [[data]] = ObjectHelper . requireNonNull ( [[com]] . apply ( [[k]] ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[target]] ) ; return "True" == "True" ; } if ( [[data]] instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) [[data]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[target]] ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( [[target]] ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( [[target]] , u ) ; [[target]] . onSubscribe ( sd ) ; sd . run ( ) ; } else { [[data]] . subscribe ( [[target]] ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 73 ---------------------------------------------
Performs version checks for Spring 2 . 0 and above . --> Assumes minSpringVersion is non - null . --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[assume]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 74 ---------------------------------------------
Returns the version of Spring security . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties [[properties]] = new Properties ( ) ; try { [[properties]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[properties]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[threads]] ( ) { Properties [[version]] = new Properties ( ) ; try { [[version]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[version]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 75 ---------------------------------------------
Returns an instance of OAuth2ClientConfigurer --> [[[SKIPPED]]]

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > oauth2Client ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 76 ---------------------------------------------
Searches the LDAP directory for the specified user . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public DirContextOperations [[searchForUser]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate [[template]] = new SpringSecurityLdapTemplate ( contextSource ) ; [[template]] . setSearchControls ( searchControls ) ; try { return [[template]] . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations [[cope]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate [[value]] = new SpringSecurityLdapTemplate ( contextSource ) ; [[value]] . setSearchControls ( searchControls ) ; try { return [[value]] . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 77 ---------------------------------------------
Gets the OAuth2 resource server configurer . --> Returns an instance of OAuth2ResourceServerConfigurer --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > oauth2ResourceServer ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > oauth2ResourceServer ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[a]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[a]] ) ; return [[a]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 78 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 6 / 71 / 1 / 78:   8%|▊         | 78/1000 [01:33<18:29,  1.20s/it][Succeeded / Failed / Skipped / Total] 6 / 72 / 1 / 79:   8%|▊         | 79/1000 [01:34<18:18,  1.19s/it][Succeeded / Failed / Skipped / Total] 6 / 72 / 1 / 79:   8%|▊         | 80/1000 [01:34<18:11,  1.19s/it][Succeeded / Failed / Skipped / Total] 6 / 73 / 1 / 80:   8%|▊         | 80/1000 [01:34<18:11,  1.19s/it][Succeeded / Failed / Skipped / Total] 7 / 73 / 1 / 81:   8%|▊         | 81/1000 [01:35<18:04,  1.18s/it][Succeeded / Failed / Skipped / Total] 7 / 73 / 1 / 81:   8%|▊         | 82/1000 [01:39<18:32,  1.21s/it][Succeeded / Failed / Skipped / Total] 7 / 74 / 1 / 82:   8%|▊         | 82/1000 [01:39<18:32,  1.21s/it][Succeeded / Failed / Skipped / Total] 7 / 75 / 1 / 83:   8%|▊         | 83/1000 [01:40<18:35,  1.22s/it][Succeeded / Failed / Skipped / Total] 7 / 75 / 1 / 83:   8%|▊         | 84/1000 [01:43<18:46,  1.23s/it][Succeeded / Failed / Skipped / Total] 7 / 76 / 1 / 84:   8%|▊         | 84/1000 [01:43<18:46,  1.23s/it]Returns the registry that will be used to match requests to a channel . --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[word]] ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 79 ---------------------------------------------
Encodes the given password using the configured salt . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( CharSequence [[rawPassword]] ) { String [[salt]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[salt]] , [[rawPassword]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String [[execute]] ( CharSequence [[list]] ) { String [[address]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[address]] , [[list]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 80 ---------------------------------------------
Returns true if disable checks are enabled for the given spring version and security version --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[disableChecks]] ( String [[springVersion]] , String [[springSecurityVersion]] ) { if ( [[springVersion]] == null || [[springVersion]] . equals ( [[springSecurityVersion]] ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean [[print]] ( String [[checks]] , String [[equals]] ) { if ( [[checks]] == null || [[checks]] . equals ( [[equals]] ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 81 ---------------------------------------------
Checks if the given raw password matches the given encoded password . --> Returns true if t matches feed . --> Socre: 1.0

[[[[Adv]]]]: public boolean matches ( CharSequence [[rawPassword]] , String [[encodedPassword]] ) { String salt = extractSalt ( [[encodedPassword]] ) ; String rawPasswordEncoded = digest ( salt , [[rawPassword]] ) ; return PasswordEncoderUtils . equals ( [[encodedPassword]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean matches ( CharSequence [[t]] , String [[feed]] ) { String salt = extractSalt ( [[feed]] ) ; String rawPasswordEncoded = digest ( salt , [[t]] ) ; return PasswordEncoderUtils . equals ( [[feed]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 82 ---------------------------------------------
Adds an AttributeExchangeConfigurer to the list of AttributeExchangeConfigurers . --> [[[FAILED]]]

[[[[Adv]]]]: public AttributeExchangeConfigurer [[attributeExchange]] ( String identifierPattern ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer [[extension]] ( String identifierPattern ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 83 ---------------------------------------------
Builds the SearchControls object . --> [[[FAILED]]]

[[[[Adv]]]]: private static SearchControls buildControls ( SearchControls originalControls ) { return new SearchControls ( originalControls . getSearchScope ( ) , originalControls . getCountLimit ( ) , originalControls . getTimeLimit ( ) , originalControls . getReturningAttributes ( ) , RETURN_OBJECT , originalControls . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls buildControls ( SearchControls originalControls ) { return new SearchControls ( originalControls . getSearchScope ( ) , originalControls . getCountLimit ( ) , originalControls . getTimeLimit ( ) , originalControls . getReturningAttributes ( ) , RETURN_OBJECT , originalControls . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 84 ---------------------------------------------
Retrieve an LDAP entry . --> [[[FAILED]]]

[[[[Adv]]]]: public DirContextOperations retrieveEntry ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations retrieveEntry ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 85 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 7 / 77 / 1 / 85:   8%|▊         | 85/1000 [01:44<18:42,  1.23s/it][Succeeded / Failed / Skipped / Total] 7 / 77 / 1 / 85:   9%|▊         | 86/1000 [01:46<18:56,  1.24s/it][Succeeded / Failed / Skipped / Total] 8 / 77 / 1 / 86:   9%|▊         | 86/1000 [01:46<18:56,  1.24s/it][Succeeded / Failed / Skipped / Total] 8 / 78 / 1 / 87:   9%|▊         | 87/1000 [01:48<18:57,  1.25s/it][Succeeded / Failed / Skipped / Total] 8 / 78 / 1 / 87:   9%|▉         | 88/1000 [01:54<19:46,  1.30s/it]Parses the annotations and returns the HttpServiceMethod . --> [[[FAILED]]]

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean [[isKotlinSuspendFunction]] = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( [[isKotlinSuspendFunction]] ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean [[query]] = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( [[query]] ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 86 ---------------------------------------------
Creates the embedded server bean definition . --> Builds the ApacheDSContainer bean definition from the element --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition [[createEmbeddedServer]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition [[bin]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 87 ---------------------------------------------
Search for multiple attribute values . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String base , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[end]] ( final String base , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 88 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 8 / 79 / 1 / 88:   9%|▉         | 88/1000 [01:54<19:46,  1.30s/it][Succeeded / Failed / Skipped / Total] 8 / 79 / 2 / 89:   9%|▉         | 89/1000 [01:54<19:34,  1.29s/it][Succeeded / Failed / Skipped / Total] 8 / 79 / 2 / 89:   9%|▉         | 90/1000 [01:57<19:45,  1.30s/it][Succeeded / Failed / Skipped / Total] 8 / 80 / 2 / 90:   9%|▉         | 90/1000 [01:57<19:45,  1.30s/it][Succeeded / Failed / Skipped / Total] 8 / 81 / 2 / 91:   9%|▉         | 91/1000 [01:58<19:41,  1.30s/it][Succeeded / Failed / Skipped / Total] 8 / 81 / 2 / 91:   9%|▉         | 92/1000 [02:03<20:21,  1.35s/it][Succeeded / Failed / Skipped / Total] 8 / 82 / 2 / 92:   9%|▉         | 92/1000 [02:03<20:21,  1.35s/it][Succeeded / Failed / Skipped / Total] 9 / 82 / 2 / 93:   9%|▉         | 93/1000 [02:03<20:07,  1.33s/it][Succeeded / Failed / Skipped / Total] 9 / 82 / 2 / 93:   9%|▉         | 94/1000 [02:06<20:18,  1.34s/it]Creates a whitelisted default type resolver builder . --> [[[FAILED]]]

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[createWhitelistedDefaultTyping]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > result = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; result = result . init ( JsonTypeInfo . Id . CLASS , null ) ; result = result . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return result ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[join]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > result = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; result = result . init ( JsonTypeInfo . Id . CLASS , null ) ; result = result . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return result ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 89 ---------------------------------------------
Insert Spring Security filter chain . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 90 ---------------------------------------------
Compares an attribute of a LDAP directory with a value . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[compare]] ( final String [[dn]] , final String [[attributeName]] , final Object value ) { final String comparisonFilter = "(" + [[attributeName]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( [[dn]] , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean [[values]] ( final String [[merge]] , final String [[compare]] , final Object value ) { final String comparisonFilter = "(" + [[compare]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( [[merge]] , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 91 ---------------------------------------------
Creates the jaas api filter . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[createJaasApiFilter]] ( ) { final String [[ATT_JAAS_API_PROVISION]] = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String [[provideJaasApi]] = httpElt . getAttribute ( [[ATT_JAAS_API_PROVISION]] ) ; if ( ! StringUtils . hasText ( [[provideJaasApi]] ) ) { [[provideJaasApi]] = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( [[provideJaasApi]] ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void [[above]] ( ) { final String [[above]] = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String [[https]] = httpElt . getAttribute ( [[above]] ) ; if ( ! StringUtils . hasText ( [[https]] ) ) { [[https]] = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( [[https]] ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 92 ---------------------------------------------
Lookup the primary keys . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[lookupPrimaryKeys]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void [[query]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 93 ---------------------------------------------
Creates a new cipher with the specified encryption algorithm . --> Returns an instance of the specified encryption algorithm --> Socre: 1.0

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String [[algorithm]] ) { try { return Cipher . getInstance ( [[algorithm]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[algorithm]] ( String [[id]] ) { try { return Cipher . getInstance ( [[id]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 94 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 9 / 83 / 2 / 94:   9%|▉         | 94/1000 [02:06<20:18,  1.34s/it][Succeeded / Failed / Skipped / Total] 9 / 84 / 2 / 95:  10%|▉         | 95/1000 [02:06<20:09,  1.34s/it][Succeeded / Failed / Skipped / Total] 9 / 84 / 2 / 95:  10%|▉         | 96/1000 [02:07<19:57,  1.32s/it][Succeeded / Failed / Skipped / Total] 9 / 85 / 2 / 96:  10%|▉         | 96/1000 [02:07<19:57,  1.32s/it][Succeeded / Failed / Skipped / Total] 9 / 86 / 2 / 97:  10%|▉         | 97/1000 [02:07<19:48,  1.32s/it][Succeeded / Failed / Skipped / Total] 9 / 86 / 2 / 97:  10%|▉         | 98/1000 [02:10<20:01,  1.33s/it][Succeeded / Failed / Skipped / Total] 9 / 87 / 2 / 98:  10%|▉         | 98/1000 [02:10<20:01,  1.33s/it]Creates the servlet api filter . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[createServletApiFilter]] ( BeanReference [[authenticationManager]] ) { final String [[ATT_SERVLET_API_PROVISION]] = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( [[ATT_SERVLET_API_PROVISION]] ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , [[authenticationManager]] ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void [[exits]] ( BeanReference [[list]] ) { final String [[equality]] = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( [[equality]] ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , [[list]] ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 95 ---------------------------------------------
Override afterPropertiesSet to catch ServletExceptions . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[print]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 96 ---------------------------------------------
Builds the web authentication details . --> [[[FAILED]]]

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest context ) { Collection < String > [[j2eeUserRoles]] = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[userGas]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[j2eeUserRoles]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[j2eeUserRoles]] + "] mapped to Granted Authorities: [" + [[userGas]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[result]] = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[userGas]] ) ; return [[result]] ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[setting]] ( HttpServletRequest context ) { Collection < String > [[style]] = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[mode]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[style]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[style]] + "] mapped to Granted Authorities: [" + [[mode]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[it]] = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[mode]] ) ; return [[it]] ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 97 ---------------------------------------------
Get a persistent remember me token for a series . --> [[[FAILED]]]

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String [[seriesId]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , [[seriesId]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[seriesId]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[seriesId]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[seriesId]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[array]] ( String [[size]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , [[size]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[size]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[size]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[size]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 98 ---------------------------------------------
Returns a list of all granted authorities for the given attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > [[attributes]] ) { List < GrantedAuthority > [[result]] = new ArrayList <> ( [[attributes]] . size ( ) ) ; for ( String attribute : [[attributes]] ) { [[result]] . add ( getGrantedAuthority ( attribute ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[include]] ( Collection < String > [[tags]] ) { List < GrantedAuthority > [[attribute]] = new ArrayList <> ( [[tags]] . size ( ) ) ; for ( String attribute : [[tags]] ) { [[attribute]] . add ( getGrantedAuthority ( attribute ) ) ; } return [[attribute]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 99 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 10 / 87 / 2 / 99:  10%|▉         | 99/1000 [02:11<19:59,  1.33s/it][Succeeded / Failed / Skipped / Total] 10 / 87 / 2 / 99:  10%|█         | 100/1000 [02:12<19:48,  1.32s/it][Succeeded / Failed / Skipped / Total] 10 / 88 / 2 / 100:  10%|█         | 100/1000 [02:12<19:48,  1.32s/it][Succeeded / Failed / Skipped / Total] 10 / 89 / 2 / 101:  10%|█         | 101/1000 [02:16<20:14,  1.35s/it][Succeeded / Failed / Skipped / Total] 10 / 89 / 2 / 101:  10%|█         | 102/1000 [02:18<20:16,  1.35s/it][Succeeded / Failed / Skipped / Total] 10 / 90 / 2 / 102:  10%|█         | 102/1000 [02:18<20:16,  1.35s/it]Search for a single entry in a context . --> Searches the specified Tensor under the specified base using the specified filter and params --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations [[searchForSingleEntryInternal]] ( DirContext [[ctx]] , SearchControls [[searchControls]] , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( [[ctx]] . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = [[ctx]] . search ( searchBaseDn , filter , params , buildControls ( [[searchControls]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult [[searchResult]] = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) [[searchResult]] . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations [[set]] ( DirContext [[tensor]] , SearchControls [[array]] , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( [[tensor]] . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = [[tensor]] . search ( searchBaseDn , filter , params , buildControls ( [[array]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult [[data]] = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) [[data]] . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 100 ---------------------------------------------
Search for multiple values by attribute name . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < String > [[searchForSingleAttributeValues]] ( final String base , final String filter , final Object [ ] params , final String attributeName ) { String [ ] [[attributeNames]] = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , filter , params , [[attributeNames]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > [[source]] ( final String base , final String filter , final Object [ ] params , final String attributeName ) { String [ ] [[draw]] = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , filter , params , [[draw]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 101 ---------------------------------------------
Checks if the request requires authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[doFilter]] ( ServletRequest request , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) response ) ; } chain . doFilter ( request , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void [[pair]] ( ServletRequest request , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) response ) ; } chain . doFilter ( request , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 102 ---------------------------------------------
Updates the default access defaults for the HTTP client . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B [[http]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[http]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[c]] ( B [[k]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[k]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 103 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 10 / 91 / 2 / 103:  10%|█         | 103/1000 [02:18<20:03,  1.34s/it][Succeeded / Failed / Skipped / Total] 10 / 91 / 2 / 103:  10%|█         | 104/1000 [02:19<20:00,  1.34s/it][Succeeded / Failed / Skipped / Total] 10 / 92 / 2 / 104:  10%|█         | 104/1000 [02:19<20:00,  1.34s/it][Succeeded / Failed / Skipped / Total] 10 / 93 / 2 / 105:  10%|█         | 105/1000 [02:21<20:02,  1.34s/it][Succeeded / Failed / Skipped / Total] 10 / 93 / 2 / 105:  11%|█         | 106/1000 [02:22<20:03,  1.35s/it][Succeeded / Failed / Skipped / Total] 10 / 94 / 2 / 106:  11%|█         | 106/1000 [02:22<20:03,  1.35s/it][Succeeded / Failed / Skipped / Total] 10 / 95 / 2 / 107:  11%|█         | 107/1000 [02:28<20:43,  1.39s/it][Succeeded / Failed / Skipped / Total] 10 / 95 / 2 / 107:  11%|█         | 108/1000 [02:30<20:42,  1.39s/it][Succeeded / Failed / Skipped / Total] 10 / 96 / 2 / 108:  11%|█         | 108/1000 [02:30<20:42,  1.39s/it]Updates the authentication defaults . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[exception]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 104 ---------------------------------------------
Sets the login processing url . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[loginProcessingUrl]] ( String [[loginProcessingUrl]] ) { this . loginProcessingUrl = [[loginProcessingUrl]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[loginProcessingUrl]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T [[f]] ( String [[types]] ) { this . loginProcessingUrl = [[f]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[f]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 105 ---------------------------------------------
Converts a collection of authorities to a set of GrantedAuthority objects . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > [[mapAuthorities]] ( Collection < ? extends GrantedAuthority > [[authorities]] ) { HashSet < GrantedAuthority > mapped = new HashSet <> ( [[authorities]] . size ( ) ) ; for ( GrantedAuthority authority : [[authorities]] ) { mapped . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { mapped . add ( defaultAuthority ) ; } return mapped ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > [[retrieve]] ( Collection < ? extends GrantedAuthority > [[null]] ) { HashSet < GrantedAuthority > mapped = new HashSet <> ( [[null]] . size ( ) ) ; for ( GrantedAuthority authority : [[null]] ) { mapped . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { mapped . add ( defaultAuthority ) ; } return mapped ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 106 ---------------------------------------------
Map a password value to a string . --> [[[FAILED]]]

[[[[Adv]]]]: protected String mapPassword ( Object [[passwordValue]] ) { if ( ! ( [[passwordValue]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String mapPassword ( Object [[data]] ) { if ( ! ( [[data]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 107 ---------------------------------------------
Check the content length and call onResponseCommitted if necessary . --> [[[FAILED]]]

[[[[Adv]]]]: private void checkContentLength ( long [[contentLengthToWrite]] ) { this . contentWritten += [[contentLengthToWrite]] ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean [[requiresFlush]] = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( isBodyFullyWritten || [[requiresFlush]] ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void checkContentLength ( long [[bar]] ) { this . contentWritten += [[bar]] ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean [[alt]] = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( isBodyFullyWritten || [[alt]] ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 108 ---------------------------------------------
Performs pre - authenticated authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[doAuthenticate]] ( HttpServletRequest [[request]] , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( [[request]] ) ; Object credentials = getPreAuthenticatedCredentials ( [[request]] ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( [[request]] , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( [[request]] , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void [[start]] ( HttpServletRequest [[authentication]] , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( [[authentication]] ) ; Object credentials = getPreAuthenticatedCredentials ( [[authentication]] ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[authentication]] ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( [[authentication]] , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( [[authentication]] , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 109 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 10 / 97 / 2 / 109:  11%|█         | 109/1000 [02:30<20:30,  1.38s/it][Succeeded / Failed / Skipped / Total] 10 / 97 / 2 / 109:  11%|█         | 110/1000 [02:35<20:59,  1.41s/it][Succeeded / Failed / Skipped / Total] 10 / 98 / 2 / 110:  11%|█         | 110/1000 [02:35<20:59,  1.41s/it][Succeeded / Failed / Skipped / Total] 10 / 99 / 2 / 111:  11%|█         | 111/1000 [02:36<20:55,  1.41s/it][Succeeded / Failed / Skipped / Total] 10 / 99 / 2 / 111:  11%|█         | 112/1000 [02:37<20:47,  1.40s/it][Succeeded / Failed / Skipped / Total] 10 / 100 / 2 / 112:  11%|█         | 112/1000 [02:37<20:47,  1.40s/it][Succeeded / Failed / Skipped / Total] 10 / 101 / 2 / 113:  11%|█▏        | 113/1000 [02:37<20:36,  1.39s/it][Succeeded / Failed / Skipped / Total] 10 / 101 / 2 / 113:  11%|█▏        | 114/1000 [02:39<20:42,  1.40s/it][Succeeded / Failed / Skipped / Total] 10 / 102 / 2 / 114:  11%|█▏        | 114/1000 [02:39<20:42,  1.40s/it]Extract remember - me cookie from request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[extractRememberMeCookie]] ( HttpServletRequest [[request]] ) { Cookie [ ] cookies = [[request]] . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String [[example]] ( HttpServletRequest [[ive]] ) { Cookie [ ] cookies = [[ive]] . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 110 ---------------------------------------------
Encodes the cookie tokens . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[encodeCookie]] ( String [ ] [[cookieTokens]] ) { StringBuilder [[sb]] = new StringBuilder ( ) ; for ( int i = 0 ; i < [[cookieTokens]] . length ; i ++ ) { try { [[sb]] . append ( URLEncoder . encode ( [[cookieTokens]] [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < [[cookieTokens]] . length - 1 ) { [[sb]] . append ( DELIMITER ) ; } } String [[value]] = [[sb]] . toString ( ) ; [[sb]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( [[value]] . getBytes ( ) ) ) ) ; while ( [[sb]] . charAt ( [[sb]] . length ( ) - 1 ) == ' ' ) { [[sb]] . deleteCharAt ( [[sb]] . length ( ) - 1 ) ; } return [[sb]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String [[loop]] ( String [ ] [[a]] ) { StringBuilder [[size]] = new StringBuilder ( ) ; for ( int i = 0 ; i < [[a]] . length ; i ++ ) { try { [[size]] . append ( URLEncoder . encode ( [[a]] [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < [[a]] . length - 1 ) { [[size]] . append ( DELIMITER ) ; } } String [[breadth]] = [[size]] . toString ( ) ; [[size]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( [[breadth]] . getBytes ( ) ) ) ) ; while ( [[size]] . charAt ( [[size]] . length ( ) - 1 ) == ' ' ) { [[size]] . deleteCharAt ( [[size]] . length ( ) - 1 ) ; } return [[size]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 111 ---------------------------------------------
Checks if the pre - authenticated principal has changed to the principal of the current authentication . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest [[request]] , Authentication [[currentAuthentication]] ) { Object [[principal]] = getPreAuthenticatedPrincipal ( [[request]] ) ; if ( ( [[principal]] instanceof String ) && [[currentAuthentication]] . getName ( ) . equals ( [[principal]] ) ) { return "False" != "False" ; } if ( [[principal]] != null && [[principal]] . equals ( [[currentAuthentication]] . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + [[principal]] + " and will be reauthenticated" ) ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[loop]] ( HttpServletRequest [[ioned]] , Authentication [[agent]] ) { Object [[of]] = getPreAuthenticatedPrincipal ( [[ioned]] ) ; if ( ( [[of]] instanceof String ) && [[agent]] . getName ( ) . equals ( [[of]] ) ) { return "False" != "False" ; } if ( [[of]] != null && [[of]] . equals ( [[agent]] . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + [[of]] + " and will be reauthenticated" ) ; } return "[[data]]" == "[[data]]" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 112 ---------------------------------------------
Get the query string from the request . --> [[[FAILED]]]

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest request , final Pattern [[artifactPattern]] ) { final String [[query]] = request . getQueryString ( ) ; if ( [[query]] == null ) { return null ; } final String result = [[artifactPattern]] . matcher ( [[query]] ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[execute]] ( final HttpServletRequest request , final Pattern [[id]] ) { final String [[condition]] = request . getQueryString ( ) ; if ( [[condition]] == null ) { return null ; } final String result = [[id]] . matcher ( [[condition]] ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 113 ---------------------------------------------
Gets the service port . --> [[[FAILED]]]

[[[[Adv]]]]: private static int getServicePort ( URL casServiceUrl ) { int port = casServiceUrl . getPort ( ) ; if ( port == - 1 ) { port = casServiceUrl . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int getServicePort ( URL casServiceUrl ) { int port = casServiceUrl . getPort ( ) ; if ( port == - 1 ) { port = casServiceUrl . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 114 ---------------------------------------------
Adds a cookie to the response . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setCookie]] ( String [ ] [[tokens]] , int maxAge , HttpServletRequest request , HttpServletResponse [[response]] ) { String [[cookieValue]] = encodeCookie ( [[tokens]] ) ; Cookie cookie = new Cookie ( cookieName , [[cookieValue]] ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; [[response]] . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void [[booker]] ( String [ ] [[file]] , int maxAge , HttpServletRequest request , HttpServletResponse [[query]] ) { String [[booker]] = encodeCookie ( [[file]] ) ; Cookie cookie = new Cookie ( cookieName , [[booker]] ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; [[query]] . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 115 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 10 / 103 / 2 / 115:  12%|█▏        | 115/1000 [02:40<20:33,  1.39s/it][Succeeded / Failed / Skipped / Total] 10 / 103 / 2 / 115:  12%|█▏        | 116/1000 [02:43<20:43,  1.41s/it][Succeeded / Failed / Skipped / Total] 10 / 104 / 2 / 116:  12%|█▏        | 116/1000 [02:43<20:43,  1.41s/it][Succeeded / Failed / Skipped / Total] 10 / 105 / 2 / 117:  12%|█▏        | 117/1000 [02:43<20:31,  1.39s/it][Succeeded / Failed / Skipped / Total] 10 / 106 / 2 / 118:  12%|█▏        | 118/1000 [02:43<20:19,  1.38s/it][Succeeded / Failed / Skipped / Total] 10 / 106 / 2 / 118:  12%|█▏        | 119/1000 [02:44<20:14,  1.38s/it][Succeeded / Failed / Skipped / Total] 11 / 106 / 2 / 119:  12%|█▏        | 119/1000 [02:44<20:14,  1.38s/it][Succeeded / Failed / Skipped / Total] 11 / 107 / 2 / 120:  12%|█▏        | 120/1000 [02:45<20:11,  1.38s/it]Returns the redirect URL for this request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[message]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 116 ---------------------------------------------
Render the end of the HTML tag . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[brace]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 117 ---------------------------------------------
Resolves the value of the given parameter . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Mono < Object > [[resolveArgument]] ( MethodParameter [[parameter]] , BindingContext [[bindingContext]] , ServerWebExchange exchange ) { ReactiveAdapter [[adapter]] = getAdapterRegistry ( ) . getAdapter ( [[parameter]] . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object [[p]] = resolveSecurityContext ( [[parameter]] , a ) ; Mono < Object > o = Mono . justOrEmpty ( [[p]] ) ; return [[adapter]] == null ? o : Mono . just ( [[adapter]] . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > [[mono]] ( MethodParameter [[box]] , BindingContext [[archive]] , ServerWebExchange exchange ) { ReactiveAdapter [[tag]] = getAdapterRegistry ( ) . getAdapter ( [[box]] . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object [[object]] = resolveSecurityContext ( [[box]] , a ) ; Mono < Object > o = Mono . justOrEmpty ( [[object]] ) ; return [[tag]] == null ? o : Mono . just ( [[tag]] . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 118 ---------------------------------------------
Returns the principal associated with the current authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getPrincipal]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[authentication]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = [[authentication]] . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( [[authentication]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String [[intercept]] ( ) { Authentication [[agent]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[agent]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = [[agent]] . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( [[agent]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 119 ---------------------------------------------
Authenticates the given authentication object . --> Authenticate a group . --> Socre: 1.0

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[auth]] ) throws AuthenticationException { if ( ! ( [[auth]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken [[request]] = ( UsernamePasswordAuthenticationToken ) [[auth]] ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[group]] ) throws AuthenticationException { if ( ! ( [[group]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken [[client]] = ( UsernamePasswordAuthenticationToken ) [[group]] ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 120 ---------------------------------------------
Sets the environment properties for this context . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[main]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 121 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 11 / 108 / 2 / 121:  12%|█▏        | 121/1000 [02:49<20:31,  1.40s/it][Succeeded / Failed / Skipped / Total] 11 / 108 / 2 / 121:  12%|█▏        | 122/1000 [02:49<20:20,  1.39s/it][Succeeded / Failed / Skipped / Total] 12 / 108 / 2 / 122:  12%|█▏        | 122/1000 [02:49<20:20,  1.39s/it][Succeeded / Failed / Skipped / Total] 12 / 109 / 2 / 123:  12%|█▏        | 123/1000 [02:52<20:27,  1.40s/it][Succeeded / Failed / Skipped / Total] 12 / 110 / 2 / 124:  12%|█▏        | 124/1000 [02:55<20:37,  1.41s/it][Succeeded / Failed / Skipped / Total] 12 / 110 / 2 / 124:  12%|█▎        | 125/1000 [02:56<20:38,  1.42s/it][Succeeded / Failed / Skipped / Total] 12 / 111 / 2 / 125:  12%|█▎        | 125/1000 [02:56<20:38,  1.42s/it][Succeeded / Failed / Skipped / Total] 12 / 112 / 2 / 126:  13%|█▎        | 126/1000 [02:58<20:41,  1.42s/it]Gets the UserDetailsService . --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 122 ---------------------------------------------
Logout handler . --> If invalidateHttpSession flag is set invalidateHttpSession and clearAuthentication --> Socre: 1.0

[[[[Adv]]]]: public void [[logout]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void [[say]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 123 ---------------------------------------------
Initializes the user details service . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected void [[initUserDetailsService]] ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void [[exception]] ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 124 ---------------------------------------------
Service ticket request boolean . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean serviceTicketRequest ( final HttpServletRequest request , final HttpServletResponse response ) { boolean [[result]] = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean serviceTicketRequest ( final HttpServletRequest request , final HttpServletResponse response ) { boolean [[address]] = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[address]] ) ; } return [[address]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 125 ---------------------------------------------
Returns true if the current user is authenticated . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[authentication]] != null && [[authentication]] . isAuthenticated ( ) && ! ( [[authentication]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[crypt]] ( ) { Authentication [[mode]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[mode]] != null && [[mode]] . isAuthenticated ( ) && ! ( [[mode]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 126 ---------------------------------------------
Determine if the request requires authentication . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[requiresAuthentication]] ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean [[serviceTicketRequest]] = [[serviceTicketRequest]] ( request , response ) ; final boolean result = [[serviceTicketRequest]] || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( [[serviceTicketRequest]] , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean [[output]] ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean [[answer]] = [[answer]] ( request , response ) ; final boolean result = [[answer]] || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( [[answer]] , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 127 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 12 / 113 / 2 / 127:  13%|█▎        | 127/1000 [02:59<20:33,  1.41s/it][Succeeded / Failed / Skipped / Total] 12 / 113 / 2 / 127:  13%|█▎        | 128/1000 [02:59<20:25,  1.41s/it][Succeeded / Failed / Skipped / Total] 12 / 114 / 2 / 128:  13%|█▎        | 128/1000 [02:59<20:25,  1.41s/it][Succeeded / Failed / Skipped / Total] 12 / 115 / 2 / 129:  13%|█▎        | 129/1000 [03:00<20:20,  1.40s/it][Succeeded / Failed / Skipped / Total] 12 / 116 / 2 / 130:  13%|█▎        | 130/1000 [03:02<20:20,  1.40s/it][Succeeded / Failed / Skipped / Total] 12 / 116 / 2 / 130:  13%|█▎        | 131/1000 [03:04<20:26,  1.41s/it][Succeeded / Failed / Skipped / Total] 12 / 117 / 2 / 131:  13%|█▎        | 131/1000 [03:04<20:26,  1.41s/it][Succeeded / Failed / Skipped / Total] 13 / 117 / 2 / 132:  13%|█▎        | 132/1000 [03:06<20:24,  1.41s/it]Builds the LDAP provider URL from a list of URLs . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[buildProviderUrl]] ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String [[serverUrl]] : urls ) { String trimmedUrl = [[serverUrl]] . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String [[execute]] ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String [[http]] : urls ) { String trimmedUrl = [[http]] . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 128 ---------------------------------------------
Proxy ticket request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyTicketRequest]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean [[answer]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 129 ---------------------------------------------
Adds the pkce parameters to the attributes and additionalParameters --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addPkceParameters]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void [[draw]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 130 ---------------------------------------------
Checks if the proxy receptor is configured and matches the request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyReceptorRequest]] ( final HttpServletRequest [[request]] ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[request]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean [[call]] ( final HttpServletRequest [[string]] ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[string]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 131 ---------------------------------------------
Gets the JWKSet . --> [[[FAILED]]]

[[[[Adv]]]]: private Mono < JWKSet > [[getJWKSet]] ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > [[boot]] ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 132 ---------------------------------------------
URL - encodes the given value using UTF - 8 . --> Encodes the end of an array . --> Socre: 1.0

[[[[Adv]]]]: private String [[utf8UrlEncode]] ( String [[value]] ) { try { return URLEncoder . encode ( [[value]] , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String [[array]] ( String [[end]] ) { try { return URLEncoder . encode ( [[end]] , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 133 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 13 / 118 / 2 / 133:  13%|█▎        | 133/1000 [03:08<20:27,  1.42s/it][Succeeded / Failed / Skipped / Total] 13 / 118 / 2 / 133:  13%|█▎        | 134/1000 [03:08<20:19,  1.41s/it][Succeeded / Failed / Skipped / Total] 13 / 119 / 2 / 134:  13%|█▎        | 134/1000 [03:08<20:19,  1.41s/it][Succeeded / Failed / Skipped / Total] 13 / 120 / 2 / 135:  14%|█▎        | 135/1000 [03:09<20:12,  1.40s/it][Succeeded / Failed / Skipped / Total] 13 / 121 / 2 / 136:  14%|█▎        | 136/1000 [03:09<20:02,  1.39s/it][Succeeded / Failed / Skipped / Total] 13 / 121 / 2 / 136:  14%|█▎        | 137/1000 [03:13<20:21,  1.42s/it][Succeeded / Failed / Skipped / Total] 13 / 122 / 2 / 137:  14%|█▎        | 137/1000 [03:13<20:21,  1.42s/it][Succeeded / Failed / Skipped / Total] 14 / 122 / 2 / 138:  14%|█▍        | 138/1000 [03:17<20:30,  1.43s/it][Succeeded / Failed / Skipped / Total] 14 / 123 / 2 / 139:  14%|█▍        | 139/1000 [03:19<20:33,  1.43s/it][Succeeded / Failed / Skipped / Total] 14 / 123 / 2 / 139:  14%|█▍        | 140/1000 [03:20<20:29,  1.43s/it]Creates a new instance of MethodSecurityExpressionOperations . --> [[[FAILED]]]

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[createSecurityExpressionRoot]] ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot [[root]] = new MethodSecurityExpressionRoot ( authentication ) ; [[root]] . setThis ( invocation . getThis ( ) ) ; [[root]] . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; [[root]] . setTrustResolver ( getTrustResolver ( ) ) ; [[root]] . setRoleHierarchy ( getRoleHierarchy ( ) ) ; [[root]] . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return [[root]] ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[on]] ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot [[group]] = new MethodSecurityExpressionRoot ( authentication ) ; [[group]] . setThis ( invocation . getThis ( ) ) ; [[group]] . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; [[group]] . setTrustResolver ( getTrustResolver ( ) ) ; [[group]] . setRoleHierarchy ( getRoleHierarchy ( ) ) ; [[group]] . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return [[group]] ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 134 ---------------------------------------------
Load user by assertion . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[loadUserByAssertion]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails [[asserted]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 135 ---------------------------------------------
Gets the pre - authenticated principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest [[httpRequest]] ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[after]] ( HttpServletRequest [[a]] ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 136 ---------------------------------------------
Gets the webSphere groups based Granted Authorities . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[userGas]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + [[userGas]] ) ; } return [[userGas]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[string]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[box]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + [[box]] ) ; } return [[box]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 137 ---------------------------------------------
Returns the shared object of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . [[sharedObjects]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[scope]] > [[scope]] getSharedObject ( Class < [[scope]] > sharedType ) { return ( [[scope]] ) this . [[com]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 138 ---------------------------------------------
Gets the GrantedAuthority collection . --> Query for GrantedAuthority objects . --> Socre: 1.0

[[[[Adv]]]]: private Collection < GrantedAuthority > [[getGrantedAuthorityCollection]] ( Object value ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , value ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > [[query]] ( Object value ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , value ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 139 ---------------------------------------------
Adds a collection of GrantedAuthority objects to the result . --> [[[FAILED]]]

[[[[Adv]]]]: private void addGrantedAuthorityCollection ( Collection < GrantedAuthority > [[result]] , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { addGrantedAuthorityCollection ( [[result]] , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { addGrantedAuthorityCollection ( [[result]] , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { addGrantedAuthorityCollection ( [[result]] , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { [[result]] . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void addGrantedAuthorityCollection ( Collection < GrantedAuthority > [[format]] , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { addGrantedAuthorityCollection ( [[format]] , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { addGrantedAuthorityCollection ( [[format]] , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { addGrantedAuthorityCollection ( [[format]] , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { [[format]] . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 140 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 14 / 124 / 2 / 140:  14%|█▍        | 140/1000 [03:20<20:29,  1.43s/it][Succeeded / Failed / Skipped / Total] 14 / 125 / 2 / 141:  14%|█▍        | 141/1000 [03:20<20:22,  1.42s/it][Succeeded / Failed / Skipped / Total] 14 / 126 / 2 / 142:  14%|█▍        | 142/1000 [03:22<20:20,  1.42s/it][Succeeded / Failed / Skipped / Total] 14 / 126 / 2 / 142:  14%|█▍        | 143/1000 [03:22<20:15,  1.42s/it][Succeeded / Failed / Skipped / Total] 14 / 127 / 2 / 143:  14%|█▍        | 143/1000 [03:22<20:15,  1.42s/it][Succeeded / Failed / Skipped / Total] 14 / 128 / 2 / 144:  14%|█▍        | 144/1000 [03:22<20:06,  1.41s/it][Succeeded / Failed / Skipped / Total] 14 / 129 / 2 / 145:  14%|█▍        | 145/1000 [03:25<20:10,  1.42s/it][Succeeded / Failed / Skipped / Total] 14 / 129 / 2 / 145:  15%|█▍        | 146/1000 [03:25<20:03,  1.41s/it]Returns the principal associated with the pre - authenticated request . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object [[principal]] = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object [[location]] = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[location]] ) ; } return [[location]] ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 141 ---------------------------------------------
Returns a list of granted authorities for the given attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[attributes]] ) { ArrayList < GrantedAuthority > [[gaList]] = new ArrayList <> ( ) ; for ( String [[attribute]] : [[attributes]] ) { Collection < GrantedAuthority > [[c]] = attributes2grantedAuthoritiesMap . get ( [[attribute]] ) ; if ( [[c]] != null ) { [[gaList]] . addAll ( [[c]] ) ; } } [[gaList]] . trimToSize ( ) ; return [[gaList]] ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[set]] ) { ArrayList < GrantedAuthority > [[array]] = new ArrayList <> ( ) ; for ( String [[extension]] : [[set]] ) { Collection < GrantedAuthority > [[data]] = attributes2grantedAuthoritiesMap . get ( [[extension]] ) ; if ( [[data]] != null ) { [[array]] . addAll ( [[data]] ) ; } } [[array]] . trimToSize ( ) ; return [[array]] ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 142 ---------------------------------------------
Concatenate two byte arrays . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[concatenate]] ( byte [ ] ... [[arrays]] ) { int length = 0 ; for ( byte [ ] array : [[arrays]] ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : [[arrays]] ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] [[buffer]] ( byte [ ] ... [[height]] ) { int length = 0 ; for ( byte [ ] array : [[height]] ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : [[height]] ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 143 ---------------------------------------------
Returns a sub - array of the specified byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[subArray]] ( byte [ ] array , int beginIndex , int endIndex ) { int [[length]] = endIndex - beginIndex ; byte [ ] subarray = new byte [ [[length]] ] ; System . arraycopy ( array , beginIndex , subarray , 0 , [[length]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] [[system]] ( byte [ ] array , int beginIndex , int endIndex ) { int [[integer]] = endIndex - beginIndex ; byte [ ] subarray = new byte [ [[integer]] ] ; System . arraycopy ( array , beginIndex , subarray , 0 , [[integer]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 144 ---------------------------------------------
Pre - processes a map of attributes to granted authorities . --> [[[FAILED]]]

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[preProcessMap]] ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > [[result]] = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > [[entry]] : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , [[entry]] . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[result]] . put ( ( String ) [[entry]] . getKey ( ) , getGrantedAuthorityCollection ( [[entry]] . getValue ( ) ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[define]] ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > [[where]] = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > [[definition]] : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , [[definition]] . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[where]] . put ( ( String ) [[definition]] . getKey ( ) , getGrantedAuthorityCollection ( [[definition]] . getValue ( ) ) ) ; } return [[where]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 145 ---------------------------------------------
Checks if the given string is a valid role name . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[foo]] ( String [[method]] ) { Assert . isTrue ( ! [[method]] . startsWith ( "ROLE_" ) , ( ) -> [[method]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[method]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 146 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 14 / 130 / 2 / 146:  15%|█▍        | 146/1000 [03:25<20:03,  1.41s/it][Succeeded / Failed / Skipped / Total] 15 / 130 / 2 / 147:  15%|█▍        | 147/1000 [03:28<20:07,  1.42s/it][Succeeded / Failed / Skipped / Total] 15 / 131 / 2 / 148:  15%|█▍        | 148/1000 [03:28<19:58,  1.41s/it][Succeeded / Failed / Skipped / Total] 15 / 131 / 2 / 148:  15%|█▍        | 149/1000 [03:28<19:51,  1.40s/it][Succeeded / Failed / Skipped / Total] 16 / 131 / 2 / 149:  15%|█▍        | 149/1000 [03:28<19:51,  1.40s/it][Succeeded / Failed / Skipped / Total] 17 / 131 / 2 / 150:  15%|█▌        | 150/1000 [03:30<19:52,  1.40s/it][Succeeded / Failed / Skipped / Total] 17 / 132 / 2 / 151:  15%|█▌        | 151/1000 [03:33<19:59,  1.41s/it][Succeeded / Failed / Skipped / Total] 17 / 132 / 2 / 151:  15%|█▌        | 152/1000 [03:36<20:05,  1.42s/it][Succeeded / Failed / Skipped / Total] 17 / 133 / 2 / 152:  15%|█▌        | 152/1000 [03:36<20:05,  1.42s/it]Builds the HTTPS redirect URL for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest request ) throws IOException , ServletException { int [[serverPort]] = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( [[serverPort]] ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[execute]] ( HttpServletRequest request ) throws IOException , ServletException { int [[destination]] = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( [[destination]] ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 147 ---------------------------------------------
Invokes the advisorProceed with the given JoinPoint --> Pass the pointer to the advisorProceed object --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( JoinPoint [[jp]] , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( [[jp]] ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object [[pointer]] ( JoinPoint [[bar]] , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( [[bar]] ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 148 ---------------------------------------------
Returns an array of strings that contains any of the given roles . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [ ] [[hasAnyRole]] ( String ... [[roles]] ) { for ( int i = 0 ; i < [[roles]] . length ; i ++ ) { [[roles]] [ i ] = "ROLE_" + [[roles]] [ i ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] [[bar]] ( String ... [[a]] ) { for ( int i = 0 ; i < [[a]] . length ; i ++ ) { [[a]] [ i ] = "ROLE_" + [[a]] [ i ] ; } return [[a]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 149 ---------------------------------------------
Displays the public index page for a random contact --> Command to get a random contact --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[command]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 150 ---------------------------------------------
Attempt to exit the current user . --> protected Authentication authentication ; protected AuthenticationCredentialsNotFoundException exception ; --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest [[request]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[application]] ( HttpServletRequest [[ra]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 151 ---------------------------------------------
Sets the URL to redirect to when the user exits . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[execute]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 152 ---------------------------------------------
Spring security filter chain . --> [[[FAILED]]]

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean [[hasConfigurers]] = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! [[hasConfigurers]] ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[buffer]] ( ) throws Exception { boolean [[filters]] = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! [[filters]] ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 153 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 18 / 133 / 2 / 153:  15%|█▌        | 153/1000 [03:37<20:01,  1.42s/it][Succeeded / Failed / Skipped / Total] 18 / 134 / 2 / 154:  15%|█▌        | 154/1000 [03:39<20:08,  1.43s/it][Succeeded / Failed / Skipped / Total] 18 / 134 / 2 / 154:  16%|█▌        | 155/1000 [03:40<20:04,  1.42s/it][Succeeded / Failed / Skipped / Total] 18 / 135 / 2 / 155:  16%|█▌        | 155/1000 [03:40<20:04,  1.42s/it][Succeeded / Failed / Skipped / Total] 18 / 136 / 2 / 156:  16%|█▌        | 156/1000 [03:41<19:57,  1.42s/it][Succeeded / Failed / Skipped / Total] 18 / 137 / 2 / 157:  16%|█▌        | 157/1000 [03:42<19:53,  1.42s/it][Succeeded / Failed / Skipped / Total] 18 / 137 / 2 / 157:  16%|█▌        | 158/1000 [03:44<19:55,  1.42s/it]Decodes the given token and validates it . --> Decodes an end token . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Jwt decode ( String [[token]] ) throws JwtException { JWT [[jwt]] = parse ( [[token]] ) ; if ( [[jwt]] instanceof SignedJWT ) { Jwt [[createdJwt]] = createJwt ( [[token]] , [[jwt]] ) ; return validateJwt ( [[createdJwt]] ) ; } throw new JwtException ( "Unsupported algorithm of " + [[jwt]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String [[end]] ) throws JwtException { JWT [[format]] = parse ( [[end]] ) ; if ( [[format]] instanceof SignedJWT ) { Jwt [[alt]] = createJwt ( [[end]] , [[format]] ) ; return validateJwt ( [[alt]] ) ; } throw new JwtException ( "Unsupported algorithm of " + [[format]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 154 ---------------------------------------------
Checks if the request is authorized using the url check . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingUrlCheck]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean [[execute]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 155 ---------------------------------------------
Convert the JWT to a collection of GrantedAuthorities . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[convert]] ( Jwt [[jwt]] ) { return getScopes ( [[jwt]] ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[collections]] ( Jwt [[st]] ) { return getScopes ( [[st]] ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 156 ---------------------------------------------
Process the auto login cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[processAutoLoginCookie]] ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails [[load]] ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 157 ---------------------------------------------
On login success create a persistent login token . --> [[[FAILED]]]

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String [[username]] = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + [[username]] ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( [[username]] , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String [[address]] = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + [[address]] ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( [[address]] , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 158 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 18 / 138 / 2 / 158:  16%|█▌        | 158/1000 [03:44<19:55,  1.42s/it][Succeeded / Failed / Skipped / Total] 18 / 139 / 2 / 159:  16%|█▌        | 159/1000 [03:45<19:51,  1.42s/it][Succeeded / Failed / Skipped / Total] 18 / 140 / 2 / 160:  16%|█▌        | 160/1000 [03:48<20:00,  1.43s/it][Succeeded / Failed / Skipped / Total] 18 / 140 / 2 / 160:  16%|█▌        | 161/1000 [03:50<20:00,  1.43s/it][Succeeded / Failed / Skipped / Total] 19 / 140 / 2 / 161:  16%|█▌        | 161/1000 [03:50<20:00,  1.43s/it][Succeeded / Failed / Skipped / Total] 19 / 141 / 2 / 162:  16%|█▌        | 162/1000 [03:51<19:58,  1.43s/it]Returns true if the current user is authorized using the access expression . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[end]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 159 ---------------------------------------------
Generates a CSRF token for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[list]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 160 ---------------------------------------------
Displays the admin page for the given contact --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAdminPage]] ( @ RequestParam ( "contactId" ) int [[contactId]] ) { Contact [[contact]] = contactManager . getById ( Long . valueOf ( [[contactId]] ) ) ; Acl [[acl]] = aclService . readAclById ( new ObjectIdentityImpl ( [[contact]] ) ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "contact" , [[contact]] ) ; [[model]] . put ( "acl" , [[acl]] ) ; return new ModelAndView ( "adminPermission" , "model" , [[model]] ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[support]] ( @ RequestParam ( "contactId" ) int [[procedure]] ) { Contact [[group]] = contactManager . getById ( Long . valueOf ( [[procedure]] ) ) ; Acl [[resource]] = aclService . readAclById ( new ObjectIdentityImpl ( [[group]] ) ) ; Map < String , Object > [[element]] = new HashMap <> ( ) ; [[element]] . put ( "contact" , [[group]] ) ; [[element]] . put ( "acl" , [[resource]] ) ; return new ModelAndView ( "adminPermission" , "model" , [[element]] ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 161 ---------------------------------------------
Add a permission to a recipient --> Begin adding a new line --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[addPermission]] ( AddPermission [[addPermission]] , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[addPermission]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[addPermission]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[addPermission]] . getPermission ( ) ) ; try { contactManager . [[addPermission]] ( [[addPermission]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[begin]] ( AddPermission [[line]] , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[begin]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[begin]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[begin]] . getPermission ( ) ) ; try { contactManager . [[line]] ( [[begin]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 162 ---------------------------------------------
Attempts to switch to the specified user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication [[attemptSwitchUser]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication [[access]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 163 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 20 / 141 / 2 / 163:  16%|█▋        | 163/1000 [03:52<19:54,  1.43s/it][Succeeded / Failed / Skipped / Total] 20 / 141 / 2 / 163:  16%|█▋        | 164/1000 [03:52<19:47,  1.42s/it][Succeeded / Failed / Skipped / Total] 20 / 142 / 2 / 164:  16%|█▋        | 164/1000 [03:52<19:47,  1.42s/it][Succeeded / Failed / Skipped / Total] 20 / 143 / 2 / 165:  16%|█▋        | 165/1000 [03:53<19:42,  1.42s/it][Succeeded / Failed / Skipped / Total] 20 / 144 / 2 / 166:  17%|█▋        | 166/1000 [03:53<19:34,  1.41s/it][Succeeded / Failed / Skipped / Total] 20 / 144 / 2 / 166:  17%|█▋        | 167/1000 [03:55<19:34,  1.41s/it][Succeeded / Failed / Skipped / Total] 20 / 145 / 2 / 167:  17%|█▋        | 167/1000 [03:55<19:34,  1.41s/it][Succeeded / Failed / Skipped / Total] 20 / 146 / 2 / 168:  17%|█▋        | 168/1000 [03:57<19:37,  1.42s/it][Succeeded / Failed / Skipped / Total] 21 / 146 / 2 / 169:  17%|█▋        | 169/1000 [03:58<19:34,  1.41s/it][Succeeded / Failed / Skipped / Total] 21 / 146 / 2 / 169:  17%|█▋        | 170/1000 [04:00<19:35,  1.42s/it]Deletes a permission from a contact . --> Redirects to the deletePermission page of the contact . --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[deletePermission]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String [[sid]] , @ RequestParam ( "permission" ) int mask ) { Contact [[contact]] = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( [[sid]] ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( [[contact]] , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[contact]] ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[ii]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String [[object]] , @ RequestParam ( "permission" ) int mask ) { Contact [[d]] = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( [[object]] ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( [[d]] , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[d]] ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 164 ---------------------------------------------
Gets the role with the default prefix . If the role is null or empty returns the default prefix . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getRoleWithDefaultPrefix]] ( String defaultRolePrefix , String [[role]] ) { if ( [[role]] == null ) { return [[role]] ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return [[role]] ; } if ( [[role]] . startsWith ( defaultRolePrefix ) ) { return [[role]] ; } return defaultRolePrefix + [[role]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String [[example]] ( String defaultRolePrefix , String [[definition]] ) { if ( [[definition]] == null ) { return [[definition]] ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return [[definition]] ; } if ( [[definition]] . startsWith ( defaultRolePrefix ) ) { return [[definition]] ; } return defaultRolePrefix + [[definition]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 165 ---------------------------------------------
Creates a new UserDetailsResourceFactoryBean from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fromString]] ( String [[users]] ) { InMemoryResource resource = new InMemoryResource ( [[users]] ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[include]] ( String [[n]] ) { InMemoryResource resource = new InMemoryResource ( [[n]] ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 166 ---------------------------------------------
Returns the values of the attribute with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String [[name]] ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( [[name]] ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[start]] ( String [[field]] ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( [[field]] ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 167 ---------------------------------------------
Displays the add permission page for a contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact [[contact]] = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( [[contact]] ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[to]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact [[bar]] = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( [[bar]] ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 168 ---------------------------------------------
Decodes the given byte array into a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[decode]] ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String [[format]] ( byte [ ] [[bit]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bit]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 169 ---------------------------------------------
Add a new contact --> Join an application --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[addContact]] ( WebContact [[form]] , BindingResult result ) { validator . validate ( [[form]] , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact [[contact]] = new Contact ( [[form]] . getName ( ) , [[form]] . getEmail ( ) ) ; contactManager . create ( [[contact]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[join]] ( WebContact [[application]] , BindingResult result ) { validator . validate ( [[application]] , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact [[server]] = new Contact ( [[application]] . getName ( ) , [[application]] . getEmail ( ) ) ; contactManager . create ( [[server]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
[Succeeded / Failed / Skipped / Total] 21 / 147 / 2 / 170:  17%|█▋        | 170/1000 [04:00<19:35,  1.42s/it][Succeeded / Failed / Skipped / Total] 21 / 148 / 2 / 171:  17%|█▋        | 171/1000 [04:02<19:33,  1.42s/it][Succeeded / Failed / Skipped / Total] 21 / 149 / 2 / 172:  17%|█▋        | 172/1000 [04:04<19:35,  1.42s/it][Succeeded / Failed / Skipped / Total] 21 / 149 / 2 / 172:  17%|█▋        | 173/1000 [04:04<19:29,  1.41s/it][Succeeded / Failed / Skipped / Total] 21 / 150 / 2 / 173:  17%|█▋        | 173/1000 [04:04<19:29,  1.41s/it][Succeeded / Failed / Skipped / Total] 21 / 151 / 2 / 174:  17%|█▋        | 174/1000 [04:06<19:28,  1.41s/it][Succeeded / Failed / Skipped / Total] 21 / 152 / 2 / 175:  18%|█▊        | 175/1000 [04:08<19:29,  1.42s/it][Succeeded / Failed / Skipped / Total] 21 / 152 / 2 / 175:  18%|█▊        | 176/1000 [04:09<19:26,  1.42s/it][Succeeded / Failed / Skipped / Total] 21 / 153 / 2 / 176:  18%|█▊        | 176/1000 [04:09<19:26,  1.42s/it][Succeeded / Failed / Skipped / Total] 21 / 154 / 2 / 177:  18%|█▊        | 177/1000 [04:13<19:37,  1.43s/it]--------------------------------------------- Result 170 ---------------------------------------------
Returns the value of the first attribute with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String name ) { List < String > [[result]] = getAttributeValues ( name ) ; if ( [[result]] . isEmpty ( ) ) { return null ; } else { return [[result]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[end]] ( String name ) { List < String > [[form]] = getAttributeValues ( name ) ; if ( [[form]] . isEmpty ( ) ) { return null ; } else { return [[form]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 171 ---------------------------------------------
Encodes the given string into a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[encode]] ( CharSequence string ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] [[array]] ( CharSequence string ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 172 ---------------------------------------------
Returns a collection of config attributes for the given method and target class . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method [[method]] , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[method]] , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[suppose]] ( Method [[c]] , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[c]] , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 173 ---------------------------------------------
Returns a collection of all config attributes . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[getAllConfigAttributes]] ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[allAttributes]] . addAll ( attributeList ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[tag]] ( ) { Set < ConfigAttribute > [[box]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[box]] . addAll ( attributeList ) ; } return [[box]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 174 ---------------------------------------------
Add a secure method to the registry . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod [[method]] , List < ConfigAttribute > attr ) { Assert . notNull ( [[method]] , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[method]] + "] with attributes [" + attr + "]" ) ; } this . methodMap . put ( [[method]] , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[when]] ( RegisteredMethod [[select]] , List < ConfigAttribute > attr ) { Assert . notNull ( [[select]] , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[select]] + "] with attributes [" + attr + "]" ) ; } this . methodMap . put ( [[select]] , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 175 ---------------------------------------------
Checks if the method name and mapped name match . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isMatch]] ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[include]] ( String [[c]] , String [[header]] ) { return ( [[header]] . endsWith ( "*" ) && [[c]] . startsWith ( [[header]] . substring ( 0 , [[header]] . length ( ) - 1 ) ) ) || ( [[header]] . startsWith ( "*" ) && [[c]] . endsWith ( [[header]] . substring ( 1 , [[header]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 176 ---------------------------------------------
Configures any request matchers . --> [[[FAILED]]]

[[[[Adv]]]]: public C [[anyRequest]] ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C [[configurer]] = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = "True" == "True" ; return [[configurer]] ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C [[call]] ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C [[object]] = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = "True" == "True" ; return [[object]] ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 177 ---------------------------------------------
Gets the field with the given name from the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > clazz , String fieldName ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( fieldName , "Field name required" ) ; try { return clazz . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[access]] ( Class < ? > clazz , String fieldName ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( fieldName , "Field name required" ) ; try { return clazz . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 178 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 21 / 155 / 2 / 178:  18%|█▊        | 178/1000 [04:13<19:29,  1.42s/it][Succeeded / Failed / Skipped / Total] 21 / 155 / 2 / 178:  18%|█▊        | 179/1000 [04:13<19:23,  1.42s/it][Succeeded / Failed / Skipped / Total] 21 / 156 / 2 / 179:  18%|█▊        | 179/1000 [04:13<19:23,  1.42s/it][Succeeded / Failed / Skipped / Total] 21 / 157 / 2 / 180:  18%|█▊        | 180/1000 [04:14<19:19,  1.41s/it][Succeeded / Failed / Skipped / Total] 21 / 158 / 2 / 181:  18%|█▊        | 181/1000 [04:15<19:16,  1.41s/it][Succeeded / Failed / Skipped / Total] 21 / 158 / 2 / 181:  18%|█▊        | 182/1000 [04:16<19:11,  1.41s/it][Succeeded / Failed / Skipped / Total] 22 / 158 / 2 / 182:  18%|█▊        | 182/1000 [04:16<19:11,  1.41s/it][Succeeded / Failed / Skipped / Total] 22 / 159 / 2 / 183:  18%|█▊        | 183/1000 [04:16<19:05,  1.40s/it][Succeeded / Failed / Skipped / Total] 22 / 160 / 2 / 184:  18%|█▊        | 184/1000 [04:19<19:10,  1.41s/it][Succeeded / Failed / Skipped / Total] 22 / 160 / 2 / 184:  18%|█▊        | 185/1000 [04:19<19:03,  1.40s/it]Handle bind exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected void handleBindException ( String userDn , String [[username]] , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void handleBindException ( String userDn , String [[exceptions]] , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 179 ---------------------------------------------
Returns a random contact --> [[[FAILED]]]

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[getRandomContact]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > [[contacts]] = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( [[contacts]] . size ( ) ) ; return [[contacts]] . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[bar]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > [[friend]] = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( [[friend]] . size ( ) ) ; return [[friend]] . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 180 ---------------------------------------------
Removes the authentication exception from the session . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[clearAuthenticationAttributes]] ( HttpServletRequest request ) { HttpSession [[session]] = request . getSession ( "False" != "False" ) ; if ( [[session]] == null ) { return ; } [[session]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void [[test]] ( HttpServletRequest request ) { HttpSession [[condition]] = request . getSession ( "False" != "False" ) ; if ( [[condition]] == null ) { return ; } [[condition]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 181 ---------------------------------------------
Create service url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[reply]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 182 ---------------------------------------------
Checks the filter stack for duplicate filters . --> Add filters that are duplicated . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkFilterStack]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void [[add]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 183 ---------------------------------------------
Extracts the prefix from the given enc - pass . --> [[[FAILED]]]

[[[[Adv]]]]: private String [[extractPrefix]] ( String [[encPass]] ) { if ( ! [[encPass]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[encPass]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[encPass]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String [[let]] ( String [[get]] ) { if ( ! [[get]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[get]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[get]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 184 ---------------------------------------------
Create redirect url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createRedirectUrl]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[execute]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 185 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 22 / 161 / 2 / 185:  18%|█▊        | 185/1000 [04:19<19:03,  1.40s/it][Succeeded / Failed / Skipped / Total] 23 / 161 / 2 / 186:  19%|█▊        | 186/1000 [04:19<18:56,  1.40s/it][Succeeded / Failed / Skipped / Total] 23 / 162 / 2 / 187:  19%|█▊        | 187/1000 [04:23<19:06,  1.41s/it][Succeeded / Failed / Skipped / Total] 23 / 162 / 2 / 187:  19%|█▉        | 188/1000 [04:25<19:07,  1.41s/it][Succeeded / Failed / Skipped / Total] 23 / 163 / 2 / 188:  19%|█▉        | 188/1000 [04:25<19:07,  1.41s/it][Succeeded / Failed / Skipped / Total] 23 / 164 / 2 / 189:  19%|█▉        | 189/1000 [04:26<19:05,  1.41s/it][Succeeded / Failed / Skipped / Total] 23 / 165 / 2 / 190:  19%|█▉        | 190/1000 [04:29<19:08,  1.42s/it][Succeeded / Failed / Skipped / Total] 23 / 165 / 2 / 190:  19%|█▉        | 191/1000 [04:29<19:01,  1.41s/it][Succeeded / Failed / Skipped / Total] 23 / 166 / 2 / 191:  19%|█▉        | 191/1000 [04:29<19:01,  1.41s/it]Looks up the parameter names for the given AccessibleObject . --> [[[FAILED]]]

[[[[Adv]]]]: private < T [[extends]] AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] [[parameterAnnotations]] = parameterNameFactory . findParameterAnnotations ( t ) ; int [[parameterCount]] = [[parameterAnnotations]] . length ; String [ ] [[paramNames]] = new String [ [[parameterCount]] ] ; boolean found = "False" != "False" ; for ( int [[i]] = 0 ; [[i]] < [[parameterCount]] ; [[i]] ++ ) { Annotation [ ] annotations = [[parameterAnnotations]] [ [[i]] ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; [[paramNames]] [ [[i]] ] = parameterName ; } } return found ? [[paramNames]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T [[function]] AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] [[condition]] = parameterNameFactory . findParameterAnnotations ( t ) ; int [[gauge]] = [[condition]] . length ; String [ ] [[conditions]] = new String [ [[gauge]] ] ; boolean found = "False" != "False" ; for ( int [[width]] = 0 ; [[width]] < [[gauge]] ; [[width]] ++ ) { Annotation [ ] annotations = [[condition]] [ [[width]] ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; [[conditions]] [ [[width]] ] = parameterName ; } } return found ? [[conditions]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 186 ---------------------------------------------
Compares two byte arrays for equality . --> Compare two byte arrays and return true if they are equal --> Socre: 1.0

[[[[Adv]]]]: private boolean [[matches]] ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean [[add]] ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 187 ---------------------------------------------
Returns an array of all registered exception types . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > typeList = this . extractorMap . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[command]] ( ) { Set < Class < ? extends Throwable > > typeList = this . extractorMap . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 188 ---------------------------------------------
Rejects the access . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[commence]] ( HttpServletRequest [[request]] , HttpServletResponse response , AuthenticationException [[arg2]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void [[exception]] ( HttpServletRequest [[answer]] , HttpServletResponse response , AuthenticationException [[attack]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 189 ---------------------------------------------
Sets the default failure URL . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String [[defaultFailureUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[defaultFailureUrl]] ) , ( ) -> "'" + [[defaultFailureUrl]] + "' is not a valid redirect URL" ) ; this . [[defaultFailureUrl]] = [[defaultFailureUrl]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[main]] ( String [[example]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[example]] ) , ( ) -> "'" + [[example]] + "' is not a valid redirect URL" ) ; this . [[a]] = [[example]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 190 ---------------------------------------------
Extracts the cause of the given throwable . --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable [[throwable]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( [[throwable]] ) ) { ThrowableCauseExtractor [[extractor]] = entry . getValue ( ) ; return [[extractor]] . extractCause ( [[throwable]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[type]] ( Throwable [[font]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( [[font]] ) ) { ThrowableCauseExtractor [[error]] = entry . getValue ( ) ; return [[error]] . extractCause ( [[font]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 191 ---------------------------------------------
Converts a Collection of GrantedAuthority objects to a Set of Strings . --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > [[authorityListToSet]] ( Collection < ? extends GrantedAuthority > [[userAuthorities]] ) { Assert . notNull ( [[userAuthorities]] , "userAuthorities cannot be null" ) ; Set < String > [[set]] = new HashSet <> ( [[userAuthorities]] . size ( ) ) ; for ( GrantedAuthority [[authority]] : [[userAuthorities]] ) { [[set]] . add ( [[authority]] . getAuthority ( ) ) ; } return [[set]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > [[hold]] ( Collection < ? extends GrantedAuthority > [[data]] ) { Assert . notNull ( [[data]] , "userAuthorities cannot be null" ) ; Set < String > [[where]] = new HashSet <> ( [[data]] . size ( ) ) ; for ( GrantedAuthority [[extension]] : [[data]] ) { [[where]] . add ( [[extension]] . getAuthority ( ) ) ; } return [[where]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 192 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 23 / 167 / 2 / 192:  19%|█▉        | 192/1000 [04:29<18:55,  1.41s/it][Succeeded / Failed / Skipped / Total] 23 / 168 / 2 / 193:  19%|█▉        | 193/1000 [04:33<19:04,  1.42s/it][Succeeded / Failed / Skipped / Total] 23 / 168 / 2 / 193:  19%|█▉        | 194/1000 [04:35<19:03,  1.42s/it][Succeeded / Failed / Skipped / Total] 23 / 169 / 2 / 194:  19%|█▉        | 194/1000 [04:35<19:03,  1.42s/it][Succeeded / Failed / Skipped / Total] 23 / 170 / 2 / 195:  20%|█▉        | 195/1000 [04:36<19:00,  1.42s/it][Succeeded / Failed / Skipped / Total] 23 / 171 / 2 / 196:  20%|█▉        | 196/1000 [04:38<19:01,  1.42s/it][Succeeded / Failed / Skipped / Total] 23 / 171 / 2 / 196:  20%|█▉        | 197/1000 [04:40<19:03,  1.42s/it][Succeeded / Failed / Skipped / Total] 24 / 171 / 2 / 197:  20%|█▉        | 197/1000 [04:40<19:03,  1.42s/it]Sets the function to be used to resolve hidden input values . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > [[resolveHiddenInputs]] ) { Assert . notNull ( [[resolveHiddenInputs]] , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = [[resolveHiddenInputs]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[fix]] ( Function < HttpServletRequest , Map < String , String > > [[array]] ) { Assert . notNull ( [[array]] , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = [[array]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 193 ---------------------------------------------
Registers an access manager . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[registerAccessManager]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[id]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 194 ---------------------------------------------
Creates a list of OpenID attributes for the given identifier . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > [[createAttributeList]] ( String [[identifier]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[identifier]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > [[procedure]] ( String [[data]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[data]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 195 ---------------------------------------------
Returns true if the given URL is absolute . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String [[url]] ) { if ( [[url]] == null ) { return "False" != "False" ; } final Pattern [[ABSOLUTE_URL]] = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return [[ABSOLUTE_URL]] . matcher ( [[url]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[print]] ( String [[literal]] ) { if ( [[literal]] == null ) { return "False" != "False" ; } final Pattern [[line]] = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return [[line]] . matcher ( [[literal]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 196 ---------------------------------------------
Converts an identifier from a ResultSet to a Java identifier . --> [[[FAILED]]]

[[[[Adv]]]]: Serializable [[identifierFrom]] ( Serializable [[identifier]] , ResultSet [[resultSet]] ) throws SQLException { if ( isString ( [[identifier]] ) && hasValidClassIdType ( [[resultSet]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[resultSet]] ) ) ) { [[identifier]] = convertFromStringTo ( ( String ) [[identifier]] , classIdTypeFrom ( [[resultSet]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable [[example]] ( Serializable [[attribute]] , ResultSet [[array]] ) throws SQLException { if ( isString ( [[attribute]] ) && hasValidClassIdType ( [[array]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[array]] ) ) ) { [[attribute]] = convertFromStringTo ( ( String ) [[attribute]] , classIdTypeFrom ( [[array]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 197 ---------------------------------------------
Returns a matcher that matches any HttpServerExchange . --> Static factory method for creating an instance of ServerWebExchangeMatcher . --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[anyExchange]] ( ) {
[[[[Nl]]]]: Matches any exchange

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[b]] ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 198 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 24 / 172 / 2 / 198:  20%|█▉        | 198/1000 [04:42<19:02,  1.42s/it][Succeeded / Failed / Skipped / Total] 24 / 173 / 2 / 199:  20%|█▉        | 199/1000 [04:44<19:04,  1.43s/it][Succeeded / Failed / Skipped / Total] 24 / 173 / 2 / 199:  20%|██        | 200/1000 [04:44<18:59,  1.42s/it][Succeeded / Failed / Skipped / Total] 24 / 174 / 2 / 200:  20%|██        | 200/1000 [04:44<18:59,  1.42s/it][Succeeded / Failed / Skipped / Total] 24 / 175 / 2 / 201:  20%|██        | 201/1000 [04:46<18:58,  1.42s/it]Builds the request URL . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String [[queryString]] ) { StringBuilder [[url]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[url]] . append ( servletPath ) ; if ( pathInfo != null ) { [[url]] . append ( pathInfo ) ; } } else { [[url]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( [[queryString]] != null ) { [[url]] . append ( "?" ) . append ( [[queryString]] ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[when]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String [[end]] ) { StringBuilder [[now]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[now]] . append ( servletPath ) ; if ( pathInfo != null ) { [[now]] . append ( pathInfo ) ; } } else { [[now]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( [[end]] != null ) { [[now]] . append ( "?" ) . append ( [[end]] ) ; } return [[now]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 199 ---------------------------------------------
Creates the entries for the given acl . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createEntries]] ( final MutableAcl [[acl]] ) { if ( [[acl]] . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return [[acl]] . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry [[entry_]] = [[acl]] . getEntries ( ) . get ( i ) ; Assert . isTrue ( [[entry_]] instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) [[entry_]] ; stmt . setLong ( 1 , ( ( Long ) [[acl]] . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void [[assume]] ( final MutableAcl [[image]] ) { if ( [[image]] . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return [[image]] . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry [[function]] = [[image]] . getEntries ( ) . get ( i ) ; Assert . isTrue ( [[function]] instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) [[function]] ; stmt . setLong ( 1 , ( ( Long ) [[image]] . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 200 ---------------------------------------------
Create object identity . --> [[[FAILED]]]

[[[[Adv]]]]: protected void createObjectIdentity ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void createObjectIdentity ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 201 ---------------------------------------------
Update object identity . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[updateObjectIdentity]] ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( [[updateObjectIdentity]] , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void [[suppose]] ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( [[suppose]] , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 202 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 24 / 176 / 2 / 202:  20%|██        | 202/1000 [04:49<19:03,  1.43s/it][Succeeded / Failed / Skipped / Total] 24 / 176 / 2 / 202:  20%|██        | 203/1000 [04:50<19:00,  1.43s/it][Succeeded / Failed / Skipped / Total] 24 / 177 / 2 / 203:  20%|██        | 203/1000 [04:50<19:00,  1.43s/it][Succeeded / Failed / Skipped / Total] 24 / 178 / 2 / 204:  20%|██        | 204/1000 [04:50<18:54,  1.43s/it][Succeeded / Failed / Skipped / Total] 24 / 179 / 2 / 205:  20%|██        | 205/1000 [04:51<18:52,  1.42s/it][Succeeded / Failed / Skipped / Total] 24 / 179 / 2 / 205:  21%|██        | 206/1000 [04:53<18:50,  1.42s/it][Succeeded / Failed / Skipped / Total] 24 / 180 / 2 / 206:  21%|██        | 206/1000 [04:53<18:50,  1.42s/it][Succeeded / Failed / Skipped / Total] 25 / 180 / 2 / 207:  21%|██        | 207/1000 [04:53<18:46,  1.42s/it][Succeeded / Failed / Skipped / Total] 26 / 180 / 2 / 208:  21%|██        | 208/1000 [04:54<18:39,  1.41s/it][Succeeded / Failed / Skipped / Total] 26 / 180 / 2 / 208:  21%|██        | 209/1000 [04:54<18:35,  1.41s/it][Succeeded / Failed / Skipped / Total] 26 / 181 / 2 / 209:  21%|██        | 209/1000 [04:54<18:35,  1.41s/it]Saves the request if it matches the requestMatcher . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[saveRequest]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void [[exception]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 203 ---------------------------------------------
Creates a delux text encryptor with the given password and salt . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence [[attacker]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[attacker]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 204 ---------------------------------------------
Creates a text encryptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[text]] ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[error]] ( CharSequence [[null]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[null]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 205 ---------------------------------------------
Returns a encryptor that encrypts queryable text using the given password and salt . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[queryableText]] ( CharSequence password , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[library]] ( CharSequence password , CharSequence [[program]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , [[program]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 206 ---------------------------------------------
Create a matcher that matches any of the given path patterns . --> [[[FAILED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[pathMatchers]] ( HttpMethod [[method]] , String ... [[patterns]] ) { List < ServerWebExchangeMatcher > [[matchers]] = new ArrayList <> ( [[patterns]] . length ) ; for ( String [[pattern]] : [[patterns]] ) { [[matchers]] . add ( new PathPatternParserServerWebExchangeMatcher ( [[pattern]] , [[method]] ) ) ; } return new OrServerWebExchangeMatcher ( [[matchers]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[set]] ( HttpMethod [[v]] , String ... [[object]] ) { List < ServerWebExchangeMatcher > [[array]] = new ArrayList <> ( [[object]] . length ) ; for ( String [[header]] : [[object]] ) { [[array]] . add ( new PathPatternParserServerWebExchangeMatcher ( [[header]] , [[v]] ) ) ; } return new OrServerWebExchangeMatcher ( [[array]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 207 ---------------------------------------------
Sets the target URL parameter . --> Print targetUrlParameter --> Socre: 1.0

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String [[targetUrlParameter]] ) { if ( [[targetUrlParameter]] != null ) { Assert . hasText ( [[targetUrlParameter]] , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = [[targetUrlParameter]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[print]] ( String [[a]] ) { if ( [[a]] != null ) { Assert . hasText ( [[a]] , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = [[a]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 208 ---------------------------------------------
Returns the directory with the immediate parent populated . --> Lists all directories with the given id . --> Socre: 1.0

[[[[Adv]]]]: private Directory [[getDirectoryWithImmediateParentPopulated]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory [[list]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 209 ---------------------------------------------
Determine the target URL to use for the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[example]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 210 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 26 / 182 / 2 / 210:  21%|██        | 210/1000 [04:56<18:34,  1.41s/it][Succeeded / Failed / Skipped / Total] 26 / 183 / 2 / 211:  21%|██        | 211/1000 [04:59<18:38,  1.42s/it][Succeeded / Failed / Skipped / Total] 26 / 183 / 2 / 211:  21%|██        | 212/1000 [04:59<18:31,  1.41s/it][Succeeded / Failed / Skipped / Total] 26 / 184 / 2 / 212:  21%|██        | 212/1000 [04:59<18:31,  1.41s/it][Succeeded / Failed / Skipped / Total] 26 / 185 / 2 / 213:  21%|██▏       | 213/1000 [04:59<18:25,  1.41s/it][Succeeded / Failed / Skipped / Total] 27 / 185 / 2 / 214:  21%|██▏       | 214/1000 [04:59<18:20,  1.40s/it][Succeeded / Failed / Skipped / Total] 27 / 185 / 2 / 214:  22%|██▏       | 215/1000 [05:01<18:22,  1.40s/it][Succeeded / Failed / Skipped / Total] 27 / 186 / 2 / 215:  22%|██▏       | 215/1000 [05:01<18:22,  1.40s/it][Succeeded / Failed / Skipped / Total] 27 / 187 / 2 / 216:  22%|██▏       | 216/1000 [05:06<18:31,  1.42s/it][Succeeded / Failed / Skipped / Total] 27 / 188 / 2 / 217:  22%|██▏       | 217/1000 [05:07<18:27,  1.41s/it][Succeeded / Failed / Skipped / Total] 27 / 188 / 2 / 217:  22%|██▏       | 218/1000 [05:08<18:26,  1.41s/it]Determines the target URL for the given request and response . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[determineTargetUrl]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String [[procedure]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[procedure]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 211 ---------------------------------------------
Creates the shared objects . --> [[[FAILED]]]

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[when]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 212 ---------------------------------------------
Writes the headers for the request to the response . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeHeaders]] ( HttpServletRequest [[request]] , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( [[request]] ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void [[match]] ( HttpServletRequest [[ia]] , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( [[ia]] ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 213 ---------------------------------------------
Gets the current date . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long [[now]] = System . currentTimeMillis ( ) ; if ( ( [[now]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[now]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[now]] ; currentDate = format . format ( new Date ( [[now]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[dom]] ( ) { long [[bar]] = System . currentTimeMillis ( ) ; if ( ( [[bar]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[bar]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[bar]] ; currentDate = format . format ( new Date ( [[bar]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 214 ---------------------------------------------
Update the cache with a new value . --> Main method to put a value into a HashMap --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap cache , Object key , Object value ) { if ( value == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[main]] ( HashMap cache , Object key , Object value ) { if ( value == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 215 ---------------------------------------------
Builds a distinguished name from the given username . --> [[[FAILED]]]

[[[[Adv]]]]: public DistinguishedName [[buildDn]] ( String [[username]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[username]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName [[include]] ( String [[address]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[address]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 216 ---------------------------------------------
Builds the details for the given authentication request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest [[request]] , UsernamePasswordAuthenticationToken [[authRequest]] ) { [[authRequest]] . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[create]] ( HttpServletRequest [[are]] , UsernamePasswordAuthenticationToken [[ce]] ) { [[ce]] . setDetails ( authenticationDetailsSource . buildDetails ( [[are]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 217 ---------------------------------------------
Gets the webSphere groups for the given security name . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[getWebSphereGroups]] ( final String [[securityName]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[print]] ( final String [[context]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 218 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 27 / 189 / 2 / 218:  22%|██▏       | 218/1000 [05:08<18:26,  1.41s/it][Succeeded / Failed / Skipped / Total] 27 / 190 / 2 / 219:  22%|██▏       | 219/1000 [05:08<18:21,  1.41s/it][Succeeded / Failed / Skipped / Total] 28 / 190 / 2 / 220:  22%|██▏       | 220/1000 [05:11<18:25,  1.42s/it][Succeeded / Failed / Skipped / Total] 28 / 190 / 2 / 220:  22%|██▏       | 221/1000 [05:12<18:20,  1.41s/it][Succeeded / Failed / Skipped / Total] 28 / 191 / 2 / 221:  22%|██▏       | 221/1000 [05:12<18:20,  1.41s/it][Succeeded / Failed / Skipped / Total] 28 / 192 / 2 / 222:  22%|██▏       | 222/1000 [05:12<18:16,  1.41s/it][Succeeded / Failed / Skipped / Total] 28 / 193 / 2 / 223:  22%|██▏       | 223/1000 [05:15<18:19,  1.42s/it][Succeeded / Failed / Skipped / Total] 28 / 193 / 2 / 223:  22%|██▏       | 224/1000 [05:16<18:14,  1.41s/it][Succeeded / Failed / Skipped / Total] 28 / 194 / 2 / 224:  22%|██▏       | 224/1000 [05:16<18:14,  1.41s/it]Determines the Websphere security name for the given subject . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject [[subject]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[subject]] ) ; } String [[userSecurityName]] = null ; if ( [[subject]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[main]] ( final Subject [[a]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[a]] ) ; } String [[main]] = null ; if ( [[a]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 219 ---------------------------------------------
Builds a distinguished name for a group . --> [[[FAILED]]]

[[[[Adv]]]]: protected DistinguishedName [[buildGroupDn]] ( String [[group]] ) { DistinguishedName [[dn]] = new DistinguishedName ( groupSearchBase ) ; [[dn]] . add ( groupRoleAttributeName , [[group]] . toLowerCase ( ) ) ; return [[dn]] ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName [[end]] ( String [[groups]] ) { DistinguishedName [[add]] = new DistinguishedName ( groupSearchBase ) ; [[add]] . add ( groupRoleAttributeName , [[groups]] . toLowerCase ( ) ) ; return [[add]] ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 220 ---------------------------------------------
Returns a list of filters for the given URL . --> Get a list of filters based on a GET request --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > getFilters ( String [[url]] ) { return getFilters ( firewall . getFirewalledRequest ( ( new FilterInvocation ( [[url]] , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > getFilters ( String [[a]] ) { return getFilters ( firewall . getFirewalledRequest ( ( new FilterInvocation ( [[a]] , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 221 ---------------------------------------------
Internal method to parse a date . --> [[[FAILED]]]

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String value , DateFormat [ ] [[formats]] ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < [[formats]] . length ) ; i ++ ) { try { date = [[formats]] [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[loop]] ( String value , DateFormat [ ] [[time]] ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < [[time]] . length ) ; i ++ ) { try { date = [[time]] [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 222 ---------------------------------------------
Throws an exception if maximum sessions is exceeded . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[allowableSessionsExceeded]] ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry [[registry]] ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void [[begin]] ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry [[a]] ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 223 ---------------------------------------------
Returns the list of filters that match the given request . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest [[request]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[request]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest [[ability]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[ability]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 224 ---------------------------------------------
Changes current user s password . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[changePassword]] ( final String [[oldPassword]] , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , [[oldPassword]] , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , [[oldPassword]] , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void [[test]] ( final String [[index]] , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , [[index]] , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , [[index]] , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 225 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 28 / 195 / 2 / 225:  22%|██▎       | 225/1000 [05:16<18:10,  1.41s/it][Succeeded / Failed / Skipped / Total] 28 / 196 / 2 / 226:  23%|██▎       | 226/1000 [05:16<18:05,  1.40s/it][Succeeded / Failed / Skipped / Total] 28 / 196 / 2 / 226:  23%|██▎       | 227/1000 [05:20<18:11,  1.41s/it][Succeeded / Failed / Skipped / Total] 28 / 197 / 2 / 227:  23%|██▎       | 227/1000 [05:20<18:11,  1.41s/it][Succeeded / Failed / Skipped / Total] 28 / 198 / 2 / 228:  23%|██▎       | 228/1000 [05:21<18:07,  1.41s/it][Succeeded / Failed / Skipped / Total] 28 / 199 / 2 / 229:  23%|██▎       | 229/1000 [05:22<18:04,  1.41s/it][Succeeded / Failed / Skipped / Total] 28 / 199 / 2 / 229:  23%|██▎       | 230/1000 [05:25<18:08,  1.41s/it][Succeeded / Failed / Skipped / Total] 28 / 200 / 2 / 230:  23%|██▎       | 230/1000 [05:25<18:08,  1.41s/it][Succeeded / Failed / Skipped / Total] 28 / 201 / 2 / 231:  23%|██▎       | 231/1000 [05:27<18:10,  1.42s/it]Loops through the login . config . url . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[configureJaasUsingLoop]] ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String [[existing]] ; while ( ( [[existing]] = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = [[existing]] . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void [[undo]] ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String [[cancel]] ; while ( ( [[cancel]] = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = [[cancel]] . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 226 ---------------------------------------------
Returns the application context for the given page context . --> [[[FAILED]]]

[[[[Adv]]]]: protected ApplicationContext [[getContext]] ( PageContext pageContext ) { ServletContext [[servletContext]] = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[servletContext]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext [[execute]] ( PageContext pageContext ) { ServletContext [[b]] = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[b]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 227 ---------------------------------------------
Sets session attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . [[sessionAttributes]] ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[command]] ( Map < String , Object > [[block]] ) { notNull ( [[block]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[block]] , this . [[start]] ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 228 ---------------------------------------------
Copies the details of the source authentication to the destination authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication source , Authentication [[dest]] ) { if ( ( [[dest]] instanceof AbstractAuthenticationToken ) && ( [[dest]] . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) [[dest]] ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[like]] ( Authentication source , Authentication [[id]] ) { if ( ( [[id]] instanceof AbstractAuthenticationToken ) && ( [[id]] . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) [[id]] ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 229 ---------------------------------------------
Adds a list of filters to the list of filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > [[filters]] ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[merge]] ( List < Filter > [[bucket]] ) { Validate . notNull ( [[merge]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[merge]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 230 ---------------------------------------------
Create a basic authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public AuthenticationScheme [[basic]] ( String [[userName]] , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( [[userName]] ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme [[tag]] ( String [[accept]] , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( [[accept]] ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 231 ---------------------------------------------
Adds a filter to the list of filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( Filter [[filter]] , Filter ... [[additionalFilters]] ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( [[additionalFilters]] != null ) { Collections . addAll ( RestAssured . filters , [[additionalFilters]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[trailing]] ( Filter [[bucket]] , Filter ... [[heap]] ) { Validate . notNull ( [[bucket]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[bucket]] ) ; if ( [[heap]] != null ) { Collections . addAll ( RestAssured . filters , [[heap]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 232 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 28 / 202 / 2 / 232:  23%|██▎       | 232/1000 [05:27<18:04,  1.41s/it][Succeeded / Failed / Skipped / Total] 28 / 202 / 2 / 232:  23%|██▎       | 233/1000 [05:29<18:03,  1.41s/it][Succeeded / Failed / Skipped / Total] 28 / 203 / 2 / 233:  23%|██▎       | 233/1000 [05:29<18:03,  1.41s/it][Succeeded / Failed / Skipped / Total] 28 / 204 / 2 / 234:  23%|██▎       | 234/1000 [05:29<17:59,  1.41s/it][Succeeded / Failed / Skipped / Total] 29 / 204 / 2 / 235:  24%|██▎       | 235/1000 [05:30<17:57,  1.41s/it][Succeeded / Failed / Skipped / Total] 29 / 204 / 2 / 235:  24%|██▎       | 236/1000 [05:32<17:56,  1.41s/it][Succeeded / Failed / Skipped / Total] 29 / 205 / 2 / 236:  24%|██▎       | 236/1000 [05:32<17:56,  1.41s/it]Sets the proxy for the given URI . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[proxy]] ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[proxy]] ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void [[host]] ( URI [[host]] ) { if ( [[host]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[host]] ( new ProxySpecification ( [[host]] . getHost ( ) , [[host]] . getPort ( ) , [[host]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 233 ---------------------------------------------
Get the full distinguished name from the base context . --> [[[FAILED]]]

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName dn , Context [[baseCtx]] ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( [[baseCtx]] . getNameInNamespace ( ) ) ; if ( dn . contains ( baseDn ) ) { return dn ; } baseDn . append ( dn ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[index]] ( DistinguishedName dn , Context [[header]] ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( [[header]] . getNameInNamespace ( ) ) ; if ( dn . contains ( baseDn ) ) { return dn ; } baseDn . append ( dn ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 234 ---------------------------------------------
Creates a basic authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String userName , String password ) { final BasicAuthScheme [[scheme]] = new BasicAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[object]] ( String userName , String password ) { final BasicAuthScheme [[e]] = new BasicAuthScheme ( ) ; [[e]] . setUserName ( userName ) ; [[e]] . setPassword ( password ) ; return [[e]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 235 ---------------------------------------------
Set default charset for query parameters . --> Returns a new EncoderConfig with array encoders . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[array]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 236 ---------------------------------------------
Sets the HTTP redirect configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredConfig [[redirect]] ( RedirectConfig [[redirectConfig]] ) { notNull ( [[redirectConfig]] , "Redirect config" ) ; return new RestAssuredConfig ( [[redirectConfig]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig [[bus]] ( RedirectConfig [[network]] ) { notNull ( [[network]] , "Redirect config" ) ; return new RestAssuredConfig ( [[network]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 237 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 30 / 205 / 2 / 237:  24%|██▎       | 237/1000 [05:35<17:59,  1.41s/it][Succeeded / Failed / Skipped / Total] 30 / 206 / 2 / 238:  24%|██▍       | 238/1000 [05:35<17:53,  1.41s/it][Succeeded / Failed / Skipped / Total] 30 / 206 / 2 / 238:  24%|██▍       | 239/1000 [05:37<17:53,  1.41s/it][Succeeded / Failed / Skipped / Total] 30 / 207 / 2 / 239:  24%|██▍       | 239/1000 [05:37<17:53,  1.41s/it][Succeeded / Failed / Skipped / Total] 30 / 208 / 2 / 240:  24%|██▍       | 240/1000 [05:37<17:48,  1.41s/it][Succeeded / Failed / Skipped / Total] 30 / 209 / 2 / 241:  24%|██▍       | 241/1000 [05:37<17:43,  1.40s/it][Succeeded / Failed / Skipped / Total] 30 / 209 / 2 / 241:  24%|██▍       | 242/1000 [05:39<17:43,  1.40s/it][Succeeded / Failed / Skipped / Total] 30 / 210 / 2 / 242:  24%|██▍       | 242/1000 [05:39<17:43,  1.40s/it]Prints the response body to the given stream depending on the response options . --> Builds a string representation of a track . --> Socre: 1.0

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions [[responseOptions]] , ResponseBody responseBody , PrintStream [[stream]] , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( [[responseOptions]] . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = [[responseOptions]] . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = [[responseOptions]] . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( [[responseOptions]] , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; [[stream]] . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[builder]] ( ResponseOptions [[track]] , ResponseBody responseBody , PrintStream [[et]] , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( [[track]] . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = [[track]] . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = [[track]] . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( [[track]] , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; [[et]] . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 238 ---------------------------------------------
Sets the default object mapper type . --> [[[FAILED]]]

[[[[Adv]]]]: public ObjectMapperConfig [[defaultObjectMapperType]] ( ObjectMapperType [[defaultObjectMapperType]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[defaultObjectMapperType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig [[application]] ( ObjectMapperType [[id]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[application]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 239 ---------------------------------------------
Sets the log config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig [[logConfig]] ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[file]] ( LogConfig [[message]] ) { notNull ( [[file]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[file]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 240 ---------------------------------------------
Create an NTLM Authentication Scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[ntlm]] ( String userName , String [[password]] , String workstation , String domain ) { final NTLMAuthScheme [[scheme]] = new NTLMAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( [[password]] ) ; [[scheme]] . setWorkstation ( workstation ) ; [[scheme]] . setDomain ( domain ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[address]] ( String userName , String [[field]] , String workstation , String domain ) { final NTLMAuthScheme [[array]] = new NTLMAuthScheme ( ) ; [[array]] . setUserName ( userName ) ; [[array]] . setPassword ( [[field]] ) ; [[array]] . setWorkstation ( workstation ) ; [[array]] . setDomain ( domain ) ; return [[array]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 241 ---------------------------------------------
Sets the session config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sessionConfig]] ( SessionConfig [[sessionConfig]] ) { notNull ( [[sessionConfig]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[sessionConfig]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[file]] ( SessionConfig [[mode]] ) { notNull ( [[file]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[file]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 242 ---------------------------------------------
Sets the object mapper config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[i]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[i]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[i]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 243 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 30 / 211 / 2 / 243:  24%|██▍       | 243/1000 [05:39<17:38,  1.40s/it][Succeeded / Failed / Skipped / Total] 30 / 212 / 2 / 244:  24%|██▍       | 244/1000 [05:40<17:36,  1.40s/it][Succeeded / Failed / Skipped / Total] 30 / 212 / 2 / 244:  24%|██▍       | 245/1000 [05:42<17:34,  1.40s/it][Succeeded / Failed / Skipped / Total] 30 / 213 / 2 / 245:  24%|██▍       | 245/1000 [05:42<17:34,  1.40s/it][Succeeded / Failed / Skipped / Total] 30 / 214 / 2 / 246:  25%|██▍       | 246/1000 [05:42<17:30,  1.39s/it][Succeeded / Failed / Skipped / Total] 31 / 214 / 2 / 247:  25%|██▍       | 247/1000 [05:43<17:25,  1.39s/it][Succeeded / Failed / Skipped / Total] 31 / 214 / 2 / 247:  25%|██▍       | 248/1000 [05:43<17:21,  1.38s/it][Succeeded / Failed / Skipped / Total] 31 / 215 / 2 / 248:  25%|██▍       | 248/1000 [05:43<17:21,  1.38s/it][Succeeded / Failed / Skipped / Total] 31 / 216 / 2 / 249:  25%|██▍       | 249/1000 [05:44<17:19,  1.38s/it]Creates a new AuthenticationScheme instance with the specified user name and password . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme form ( String userName , String [[password]] , FormAuthConfig [[config]] ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( [[password]] == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[scheme]] = new FormAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( [[password]] ) ; [[scheme]] . setConfig ( [[config]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme form ( String userName , String [[security]] , FormAuthConfig [[data]] ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( [[security]] == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[condition]] = new FormAuthScheme ( ) ; [[condition]] . setUserName ( userName ) ; [[condition]] . setPassword ( [[security]] ) ; [[condition]] . setConfig ( [[data]] ) ; return [[condition]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 244 ---------------------------------------------
Sets the JAXB object mapper factory . --> [[[FAILED]]]

[[[[Adv]]]]: public ObjectMapperConfig [[jaxbObjectMapperFactory]] ( JAXBObjectMapperFactory [[jaxbObjectMapperFactory]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[jaxbObjectMapperFactory]] , johnzonObjectMapperFactory , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig [[pack]] ( JAXBObjectMapperFactory [[list]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[pack]] , johnzonObjectMapperFactory , "[[table]]" == "[[table]]" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 245 ---------------------------------------------
Returns a copy of this config with the given JsonConfig . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig [[jsonConfig]] ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[function]] ( JsonConfig [[function]] ) { notNull ( [[function]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[function]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 246 ---------------------------------------------
Sets the xml config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig [[xmlConfig]] ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[group]] ( XmlConfig [[member]] ) { notNull ( [[group]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[group]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 247 ---------------------------------------------
Sets the mock servlet configuration . --> Configures a grouped MockMvcConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[mockMvcConfig]] ( MockMvcConfig mockMvcConfig ) { notNull ( [[mockMvcConfig]] , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , [[mockMvcConfig]] , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[group]] ( MockMvcConfig mockMvcConfig ) { notNull ( [[group]] , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , [[group]] , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 248 ---------------------------------------------
Sets the encoder config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[encoderConfig]] ( EncoderConfig [[encoderConfig]] ) { notNull ( [[encoderConfig]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[encoderConfig]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[session]] ( EncoderConfig [[environment]] ) { notNull ( [[session]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[session]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 249 ---------------------------------------------
Sets the header config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[headerConfig]] ( HeaderConfig [[headerConfig]] ) { notNull ( [[headerConfig]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[headerConfig]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[end]] ( HeaderConfig [[description]] ) { notNull ( [[end]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[end]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 250 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 31 / 217 / 2 / 250:  25%|██▌       | 250/1000 [05:45<17:15,  1.38s/it][Succeeded / Failed / Skipped / Total] 31 / 217 / 2 / 250:  25%|██▌       | 251/1000 [05:46<17:13,  1.38s/it][Succeeded / Failed / Skipped / Total] 31 / 218 / 2 / 251:  25%|██▌       | 251/1000 [05:46<17:13,  1.38s/it][Succeeded / Failed / Skipped / Total] 31 / 219 / 2 / 252:  25%|██▌       | 252/1000 [05:48<17:13,  1.38s/it][Succeeded / Failed / Skipped / Total] 31 / 220 / 2 / 253:  25%|██▌       | 253/1000 [05:48<17:08,  1.38s/it][Succeeded / Failed / Skipped / Total] 31 / 220 / 2 / 253:  25%|██▌       | 254/1000 [05:48<17:04,  1.37s/it][Succeeded / Failed / Skipped / Total] 31 / 221 / 2 / 254:  25%|██▌       | 254/1000 [05:48<17:04,  1.37s/it][Succeeded / Failed / Skipped / Total] 31 / 222 / 2 / 255:  26%|██▌       | 255/1000 [05:50<17:02,  1.37s/it][Succeeded / Failed / Skipped / Total] 31 / 223 / 2 / 256:  26%|██▌       | 256/1000 [05:56<17:16,  1.39s/it][Succeeded / Failed / Skipped / Total] 31 / 223 / 2 / 256:  26%|██▌       | 257/1000 [05:57<17:12,  1.39s/it][Succeeded / Failed / Skipped / Total] 31 / 224 / 2 / 257:  26%|██▌       | 257/1000 [05:57<17:12,  1.39s/it][Succeeded / Failed / Skipped / Total] 31 / 225 / 2 / 258:  26%|██▌       | 258/1000 [05:58<17:09,  1.39s/it]Sets the async config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[asyncConfig]] ( AsyncConfig [[asyncConfig]] ) { notNull ( [[asyncConfig]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[asyncConfig]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[group]] ( AsyncConfig [[base]] ) { notNull ( [[group]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[group]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 251 ---------------------------------------------
Returns a certificate auth settings that allows all hostnames to be present in the keystore . --> [[[FAILED]]]

[[[[Adv]]]]: public CertificateAuthSettings allowAllHostnames ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings allowAllHostnames ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 252 ---------------------------------------------
Sets the multiPart config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[multiPartConfig]] ( MultiPartConfig [[multiPartConfig]] ) { notNull ( [[multiPartConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[multiPartConfig]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[f]] ( MultiPartConfig [[base]] ) { notNull ( [[f]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[f]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 253 ---------------------------------------------
Sets the MockMvcParamConfig . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[paramConfig]] ( MockMvcParamConfig [[paramConfig]] ) { notNull ( [[paramConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[paramConfig]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[function]] ( MockMvcParamConfig [[request]] ) { notNull ( [[function]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[function]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 254 ---------------------------------------------
Sets the matcher config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[matcherConfig]] ( MatcherConfig matcherConfig ) { notNull ( [[matcherConfig]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[matcherConfig]] ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[log]] ( MatcherConfig matcherConfig ) { notNull ( [[log]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[log]] ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 255 ---------------------------------------------
Declares namespaces for this configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > [[namespacesToDeclare]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[namespacesToDeclare]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[object]] ( Map < String , String > [[function]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[function]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 256 ---------------------------------------------
Sets the default proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setProxy]] ( String host , int port , String [[scheme]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , [[scheme]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[command]] ( String host , int port , String [[etc]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , [[etc]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 257 ---------------------------------------------
Sets the request headers . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setHeaders]] ( Map < ? , ? > headers ) { this . [[defaultRequestHeaders]] . clear ( ) ; if ( headers == null ) return ; for ( Object key : headers . keySet ( ) ) { Object val = headers . get ( key ) ; if ( val == null ) continue ; this . [[defaultRequestHeaders]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void [[declare]] ( Map < ? , ? > headers ) { this . [[key]] . clear ( ) ; if ( headers == null ) return ; for ( Object key : headers . keySet ( ) ) { Object val = headers . get ( key ) ; if ( val == null ) continue ; this . [[key]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 258 ---------------------------------------------
Adds a header to the multi part spec . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String [[name]] , String value ) { Validate . notEmpty ( [[name]] , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[id]] ( String [[id]] , String value ) { Validate . notEmpty ( [[id]] , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
[Succeeded / Failed / Skipped / Total] 31 / 226 / 2 / 259:  26%|██▌       | 259/1000 [06:00<17:10,  1.39s/it][Succeeded / Failed / Skipped / Total] 31 / 226 / 2 / 259:  26%|██▌       | 260/1000 [06:00<17:06,  1.39s/it][Succeeded / Failed / Skipped / Total] 31 / 227 / 2 / 260:  26%|██▌       | 260/1000 [06:00<17:06,  1.39s/it][Succeeded / Failed / Skipped / Total] 31 / 228 / 2 / 261:  26%|██▌       | 261/1000 [06:02<17:06,  1.39s/it][Succeeded / Failed / Skipped / Total] 31 / 229 / 2 / 262:  26%|██▌       | 262/1000 [06:03<17:04,  1.39s/it][Succeeded / Failed / Skipped / Total] 31 / 229 / 2 / 262:  26%|██▋       | 263/1000 [06:04<17:00,  1.38s/it][Succeeded / Failed / Skipped / Total] 32 / 229 / 2 / 263:  26%|██▋       | 263/1000 [06:04<17:00,  1.38s/it][Succeeded / Failed / Skipped / Total] 33 / 229 / 2 / 264:  26%|██▋       | 264/1000 [06:04<16:56,  1.38s/it][Succeeded / Failed / Skipped / Total] 33 / 230 / 2 / 265:  26%|██▋       | 265/1000 [06:04<16:51,  1.38s/it][Succeeded / Failed / Skipped / Total] 33 / 230 / 2 / 265:  27%|██▋       | 266/1000 [06:07<16:53,  1.38s/it]--------------------------------------------- Result 259 ---------------------------------------------
Resets all fields to their default values . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[loop]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 260 ---------------------------------------------
Set credentials for basic authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[basic]] ( String [[host]] , int [[port]] , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[host]] , [[port]] ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[construct]] ( String [[access]] , int [[hello]] , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[access]] , [[hello]] ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 261 ---------------------------------------------
Performs a HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[request]] ( String method , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object [[description]] ( String method , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 262 ---------------------------------------------
Returns a copy of this configuration with the given prefix and namespace URI replaced . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig declaredNamespace ( String prefix , String [[namespaceURI]] ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[namespaceURI]] , "Namespace URI cannot be empty" ) ; Map < String , String > [[updatedNamespaces]] = new HashMap < String , String > ( declaredNamespaces ) ; [[updatedNamespaces]] . put ( prefix , [[namespaceURI]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[updatedNamespaces]] , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig declaredNamespace ( String prefix , String [[suffix]] ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[suffix]] , "Namespace URI cannot be empty" ) ; Map < String , String > [[object]] = new HashMap < String , String > ( declaredNamespaces ) ; [[object]] . put ( prefix , [[suffix]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[object]] , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 263 ---------------------------------------------
Builds the Response object . --> Guard against invalid status code and status line . --> Socre: 1.0

[[[[Adv]]]]: public Response [[build]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[guard]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 264 ---------------------------------------------
Sets a response header . --> Ends the response with the given name and response code . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder [[setHeader]] ( String name , String [[value]] ) { notNull ( name , "Header name" ) ; notNull ( [[value]] , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , [[value]] ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( [[value]] ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder [[end]] ( String name , String [[code]] ) { notNull ( name , "Header name" ) ; notNull ( [[code]] , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , [[code]] ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( [[code]] ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 265 ---------------------------------------------
Sets the control name . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String [[controlName]] ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . [[controlName]] = [[controlName]] ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[function]] ( String [[element]] ) { Validate . notEmpty ( [[function]] , "Control name cannot be empty" ) ; this . [[array]] = [[function]] ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 266 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 33 / 231 / 2 / 266:  27%|██▋       | 266/1000 [06:07<16:53,  1.38s/it][Succeeded / Failed / Skipped / Total] 33 / 232 / 2 / 267:  27%|██▋       | 267/1000 [06:08<16:51,  1.38s/it][Succeeded / Failed / Skipped / Total] 33 / 233 / 2 / 268:  27%|██▋       | 268/1000 [06:09<16:48,  1.38s/it][Succeeded / Failed / Skipped / Total] 33 / 233 / 2 / 268:  27%|██▋       | 269/1000 [06:10<16:46,  1.38s/it][Succeeded / Failed / Skipped / Total] 33 / 234 / 2 / 269:  27%|██▋       | 269/1000 [06:10<16:46,  1.38s/it][Succeeded / Failed / Skipped / Total] 33 / 235 / 2 / 270:  27%|██▋       | 270/1000 [06:10<16:41,  1.37s/it][Succeeded / Failed / Skipped / Total] 33 / 236 / 2 / 271:  27%|██▋       | 271/1000 [06:10<16:37,  1.37s/it][Succeeded / Failed / Skipped / Total] 33 / 236 / 2 / 271:  27%|██▋       | 272/1000 [06:10<16:32,  1.36s/it][Succeeded / Failed / Skipped / Total] 33 / 237 / 2 / 272:  27%|██▋       | 272/1000 [06:10<16:32,  1.36s/it][Succeeded / Failed / Skipped / Total] 33 / 238 / 2 / 273:  27%|██▋       | 273/1000 [06:10<16:27,  1.36s/it][Succeeded / Failed / Skipped / Total] 33 / 239 / 2 / 274:  27%|██▋       | 274/1000 [06:13<16:28,  1.36s/it][Succeeded / Failed / Skipped / Total] 33 / 239 / 2 / 274:  28%|██▊       | 275/1000 [06:14<16:27,  1.36s/it][Succeeded / Failed / Skipped / Total] 34 / 239 / 2 / 275:  28%|██▊       | 275/1000 [06:14<16:27,  1.36s/it]Matches the value of the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[loop]] ( Matcher < ? super String > [[dictionary]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[dictionary]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 267 ---------------------------------------------
Matches a cookie s comment . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[comment]] ( Matcher < ? super String > commentMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , commentMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[loop]] ( Matcher < ? super String > commentMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , commentMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 268 ---------------------------------------------
Matches a cookie s expiry date . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > [[expiryDateMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[expiryDateMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[where]] ( Matcher < ? super Date > [[end]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[end]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
Matches cookies that match the given path matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > pathMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , pathMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[library]] ( Matcher < ? super String > pathMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , pathMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 270 ---------------------------------------------
Specifies the domain of the cookies that match the given matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > domainMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , domainMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[user]] ( Matcher < ? super String > domainMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , domainMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
Creates a new Headers object with the given header added to it . --> [[[FAILED]]]

[[[[Adv]]]]: public static Headers [[headers]] ( Header [[header]] , Header ... additionalHeaders ) { notNull ( [[header]] , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( [[header]] ) ; if ( additionalHeaders != null ) { Collections . addAll ( headerList , additionalHeaders ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers [[type]] ( Header [[feature]] , Header ... additionalHeaders ) { notNull ( [[feature]] , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( [[feature]] ) ; if ( additionalHeaders != null ) { Collections . addAll ( headerList , additionalHeaders ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 272 ---------------------------------------------
Matches any secured cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[secured]] ( Matcher < ? super Boolean > [[securedMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securedMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[h]] ( Matcher < ? super Boolean > [[header]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[header]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 273 ---------------------------------------------
Sets the NTCredentials for the given host and port . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[ntlm]] ( String host , int [[port]] , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[port]] ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[client]] ( String host , int [[access]] , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[access]] ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 274 ---------------------------------------------
Matches specific HTTP only cookies . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[daemon]] ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 275 ---------------------------------------------
Sets the type of number return type . --> Returns a new JsonPathConfig instance with a function return type --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[numberReturnType]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[numberReturnType]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig [[function]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[function]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
[Succeeded / Failed / Skipped / Total] 34 / 240 / 2 / 276:  28%|██▊       | 276/1000 [06:15<16:24,  1.36s/it][Succeeded / Failed / Skipped / Total] 34 / 241 / 2 / 277:  28%|██▊       | 277/1000 [06:15<16:20,  1.36s/it][Succeeded / Failed / Skipped / Total] 34 / 241 / 2 / 277:  28%|██▊       | 278/1000 [06:16<16:17,  1.35s/it][Succeeded / Failed / Skipped / Total] 34 / 242 / 2 / 278:  28%|██▊       | 278/1000 [06:16<16:17,  1.35s/it][Succeeded / Failed / Skipped / Total] 34 / 243 / 2 / 279:  28%|██▊       | 279/1000 [06:18<16:17,  1.36s/it][Succeeded / Failed / Skipped / Total] 34 / 244 / 2 / 280:  28%|██▊       | 280/1000 [06:18<16:14,  1.35s/it][Succeeded / Failed / Skipped / Total] 34 / 244 / 2 / 280:  28%|██▊       | 281/1000 [06:19<16:11,  1.35s/it][Succeeded / Failed / Skipped / Total] 34 / 245 / 2 / 281:  28%|██▊       | 281/1000 [06:19<16:11,  1.35s/it][Succeeded / Failed / Skipped / Total] 34 / 246 / 2 / 282:  28%|██▊       | 282/1000 [06:21<16:11,  1.35s/it][Succeeded / Failed / Skipped / Total] 35 / 246 / 2 / 283:  28%|██▊       | 283/1000 [06:23<16:12,  1.36s/it][Succeeded / Failed / Skipped / Total] 35 / 246 / 2 / 283:  28%|██▊       | 284/1000 [06:24<16:08,  1.35s/it][Succeeded / Failed / Skipped / Total] 36 / 246 / 2 / 284:  28%|██▊       | 284/1000 [06:24<16:08,  1.35s/it][Succeeded / Failed / Skipped / Total] 36 / 247 / 2 / 285:  28%|██▊       | 285/1000 [06:25<16:05,  1.35s/it][Succeeded / Failed / Skipped / Total] 36 / 248 / 2 / 286:  29%|██▊       | 286/1000 [06:25<16:01,  1.35s/it][Succeeded / Failed / Skipped / Total] 36 / 248 / 2 / 286:  29%|██▊       | 287/1000 [06:25<15:56,  1.34s/it]--------------------------------------------- Result 276 ---------------------------------------------
Matches a cookie s maximum age . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[user]] ( Matcher < ? super Integer > [[function]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[function]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 277 ---------------------------------------------
Returns a matcher that matches the version of the current request . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[loop]] ( Matcher < ? super Integer > [[c]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[c]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 278 ---------------------------------------------
Specifies the host of the proxy to connect to . --> [[[FAILED]]]

[[[[Adv]]]]: public ProxySpecification [[withHost]] ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification [[er]] ( String [[hello]] ) { return new ProxySpecification ( [[hello]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 279 ---------------------------------------------
Sets the default parser type . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[object]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[object]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 280 ---------------------------------------------
Expect the given header name to match the given expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String headerName , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( headerName , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder [[c]] ( String headerName , Matcher < String > [[command]] ) { spec . header ( headerName , [[command]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 281 ---------------------------------------------
Expect a response header with the given expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , String expectedValue ) { spec . header ( [[headerName]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[ex]] ( String [[call]] , String expectedValue ) { spec . header ( [[call]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 282 ---------------------------------------------
Specifies a cookie with the given name and value to match the provided expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String [[cookieName]] , String [[expectedValue]] ) { spec . cookie ( [[cookieName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[mark]] ( String [[total]] , String [[null]] ) { spec . cookie ( [[total]] , [[null]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 283 ---------------------------------------------
Adds a header to the request . --> Sets example headers . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String [[headerName]] , String headerValue ) { spec . header ( [[headerName]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[example]] ( String [[list]] , String headerValue ) { spec . header ( [[list]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 284 ---------------------------------------------
Adds an attribute to the request spec . --> Formats an array of attributes with the given value . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addAttribute]] ( String [[attributeName]] , Object attributeValue ) { spec . attribute ( [[attributeName]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[format]] ( String [[array]] , Object attributeValue ) { spec . attribute ( [[array]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 285 ---------------------------------------------
Enable logging of request and response if validation fails . --> [[[FAILED]]]

[[[[Adv]]]]: public LogConfig [[enableLoggingOfRequestAndResponseIfValidationFails]] ( LogDetail [[logDetail]] ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , [[logDetail]] , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig [[archive]] ( LogDetail [[ability]] ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , [[ability]] , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 286 ---------------------------------------------
Set the default stream for logging . --> [[[FAILED]]]

[[[[Adv]]]]: public LogConfig defaultStream ( PrintStream [[printStream]] ) { return new LogConfig ( [[printStream]] , "[[True]]" == "[[True]]" , logDetailIfValidationFails , urlEncodeRequestUri , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig defaultStream ( PrintStream [[data]] ) { return new LogConfig ( [[data]] , "[[copy]]" == "[[copy]]" , logDetailIfValidationFails , urlEncodeRequestUri , "[[copy]]" == "[[copy]]" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 287 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 36 / 249 / 2 / 287:  29%|██▊       | 287/1000 [06:25<15:56,  1.34s/it][Succeeded / Failed / Skipped / Total] 37 / 249 / 2 / 288:  29%|██▉       | 288/1000 [06:25<15:52,  1.34s/it][Succeeded / Failed / Skipped / Total] 37 / 250 / 2 / 289:  29%|██▉       | 289/1000 [06:31<16:02,  1.35s/it][Succeeded / Failed / Skipped / Total] 37 / 250 / 2 / 289:  29%|██▉       | 290/1000 [06:31<15:58,  1.35s/it][Succeeded / Failed / Skipped / Total] 38 / 250 / 2 / 290:  29%|██▉       | 290/1000 [06:31<15:58,  1.35s/it][Succeeded / Failed / Skipped / Total] 38 / 251 / 2 / 291:  29%|██▉       | 291/1000 [06:32<15:55,  1.35s/it][Succeeded / Failed / Skipped / Total] 38 / 252 / 2 / 292:  29%|██▉       | 292/1000 [06:32<15:51,  1.34s/it][Succeeded / Failed / Skipped / Total] 38 / 252 / 2 / 292:  29%|██▉       | 293/1000 [06:32<15:47,  1.34s/it][Succeeded / Failed / Skipped / Total] 38 / 253 / 2 / 293:  29%|██▉       | 293/1000 [06:32<15:47,  1.34s/it][Succeeded / Failed / Skipped / Total] 38 / 254 / 2 / 294:  29%|██▉       | 294/1000 [06:33<15:44,  1.34s/it][Succeeded / Failed / Skipped / Total] 39 / 254 / 2 / 295:  30%|██▉       | 295/1000 [06:36<15:46,  1.34s/it][Succeeded / Failed / Skipped / Total] 39 / 254 / 2 / 295:  30%|██▉       | 296/1000 [06:36<15:43,  1.34s/it][Succeeded / Failed / Skipped / Total] 39 / 255 / 2 / 296:  30%|██▉       | 296/1000 [06:36<15:43,  1.34s/it]Sets the default boundary for this MultiPartConfig . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String [[defaultBoundary]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[path]] ( String [[a]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[path]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 288 ---------------------------------------------
Adds additional result handlers to the request . --> Sets the driver for the request . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addResultHandlers]] ( ResultHandler resultHandler , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( resultHandler , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[driver]] ( ResultHandler resultHandler , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( resultHandler , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 289 ---------------------------------------------
Returns the integer value for the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getInt]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[path]] ( String [[paths]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 290 ---------------------------------------------
Sets the HTTP multipart mode . --> Returns a new instance of HttpClientConfig --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode [[httpMultipartMode]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[client]] ( HttpMultipartMode [[f]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[client]] , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 291 ---------------------------------------------
Add a multi part request with the given content body and mime type . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String controlName , String [[contentBody]] , String [[mimeType]] ) { spec . multiPart ( controlName , [[mimeType]] ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[server]] ( String controlName , String [[id]] , String [[etc]] ) { spec . multiPart ( controlName , [[etc]] ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 292 ---------------------------------------------
Sets the parameter with the given name to the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[HttpClientConfig]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new [[HttpClientConfig]] ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > [[format]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new [[format]] ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 293 ---------------------------------------------
Performs a GET request and returns the result . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) jsonAssertion . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[section]] > [[section]] get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[section]] ) jsonAssertion . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 294 ---------------------------------------------
Sets the HTTP client factory . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[httpClientFactory]] ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( [[httpClientFactory]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig [[instance]] ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( [[instance]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 295 ---------------------------------------------
Returns the short value of the given path . --> Send hello message to client --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[c]] ( String [[hello]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 296 ---------------------------------------------
Get byte from path --> [[[FAILED]]]

[[[[Adv]]]]: public byte [[getByte]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[declaration]] ( String [[a]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 297 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 39 / 256 / 2 / 297:  30%|██▉       | 297/1000 [06:37<15:41,  1.34s/it][Succeeded / Failed / Skipped / Total] 39 / 257 / 2 / 298:  30%|██▉       | 298/1000 [06:38<15:38,  1.34s/it][Succeeded / Failed / Skipped / Total] 39 / 257 / 2 / 298:  30%|██▉       | 299/1000 [06:39<15:37,  1.34s/it][Succeeded / Failed / Skipped / Total] 39 / 258 / 2 / 299:  30%|██▉       | 299/1000 [06:39<15:37,  1.34s/it][Succeeded / Failed / Skipped / Total] 40 / 258 / 2 / 300:  30%|███       | 300/1000 [06:40<15:34,  1.34s/it][Succeeded / Failed / Skipped / Total] 40 / 259 / 2 / 301:  30%|███       | 301/1000 [06:41<15:31,  1.33s/it][Succeeded / Failed / Skipped / Total] 40 / 259 / 2 / 301:  30%|███       | 302/1000 [06:44<15:34,  1.34s/it][Succeeded / Failed / Skipped / Total] 40 / 260 / 2 / 302:  30%|███       | 302/1000 [06:44<15:34,  1.34s/it][Succeeded / Failed / Skipped / Total] 40 / 261 / 2 / 303:  30%|███       | 303/1000 [06:47<15:36,  1.34s/it][Succeeded / Failed / Skipped / Total] 40 / 262 / 2 / 304:  30%|███       | 304/1000 [06:47<15:33,  1.34s/it][Succeeded / Failed / Skipped / Total] 40 / 262 / 2 / 304:  30%|███       | 305/1000 [06:49<15:32,  1.34s/it][Succeeded / Failed / Skipped / Total] 40 / 263 / 2 / 305:  30%|███       | 305/1000 [06:49<15:32,  1.34s/it][Succeeded / Failed / Skipped / Total] 40 / 264 / 2 / 306:  31%|███       | 306/1000 [06:49<15:29,  1.34s/it][Succeeded / Failed / Skipped / Total] 40 / 265 / 2 / 307:  31%|███       | 307/1000 [06:50<15:27,  1.34s/it][Succeeded / Failed / Skipped / Total] 40 / 265 / 2 / 307:  31%|███       | 308/1000 [06:53<15:29,  1.34s/it]Returns a copy of this instance with the given httpClientParams replaced . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[addParams]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . [[httpClientParams]] ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig [[daemon]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . [[foo]] ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 298 ---------------------------------------------
Returns the long value for the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public long [[getLong]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[procedure]] ( String [[value]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 299 ---------------------------------------------
Get a property as a float . --> [[[FAILED]]]

[[[[Adv]]]]: public float [[getFloat]] ( String path ) { final Object value = get ( path ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[read]] ( String path ) { final Object value = get ( path ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 300 ---------------------------------------------
Creates an HTTP request from the given parameters . --> Convert a set of URIs to an array of HttpRequestBases --> Socre: 1.0

[[[[Adv]]]]: static HttpRequestBase [[createHttpRequest]] ( URI [[uri]] , String [[httpMethod]] , boolean [[hasBody]] ) { String method = notNull ( upperCase ( trimToNull ( [[httpMethod]] ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase [[httpRequest]] ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase [[array]] ( URI [[box]] , String [[set]] , boolean [[procedure]] ) { String method = notNull ( upperCase ( trimToNull ( [[set]] ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase [[pointer]] ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 301 ---------------------------------------------
Returns the double value at the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getDouble]] ( String [[path]] ) { final Object value = get ( [[path]] ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[end]] ( String [[zero]] ) { final Object value = get ( [[zero]] ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 302 ---------------------------------------------
Gets the map . --> [[[FAILED]]]

[[[[Adv]]]]: public < K , V > Map < K , V > [[getMap]] ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < K , V > Map < K , V > [[net]] ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 303 ---------------------------------------------
Sets the body of the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object [[object]] , ObjectMapper mapper ) { spec . body ( [[object]] , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object [[body]] , ObjectMapper mapper ) { spec . body ( [[body]] , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 304 ---------------------------------------------
Adds a cookie to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String key , Object [[value]] , Object ... cookieNameValuePairs ) { spec . cookie ( key , [[value]] , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[client]] ( String key , Object [[cookie]] , Object ... cookieNameValuePairs ) { spec . cookie ( key , [[cookie]] , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 305 ---------------------------------------------
Gets the object at the given path and converts it to the given object type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object object = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object object = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 306 ---------------------------------------------
Adds a parameter to the request spec . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String parameterName , Object ... [[parameterValues]] ) { spec . param ( parameterName , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[e]] ( String parameterName , Object ... [[key]] ) { spec . param ( parameterName , [[key]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 307 ---------------------------------------------
Adds a parameter to the request spec . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String parameterName , Collection < ? > [[parameterValues]] ) { spec . param ( parameterName , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[bar]] ( String parameterName , Collection < ? > [[label]] ) { spec . param ( parameterName , [[label]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 308 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 40 / 266 / 2 / 308:  31%|███       | 308/1000 [06:53<15:29,  1.34s/it][Succeeded / Failed / Skipped / Total] 40 / 267 / 2 / 309:  31%|███       | 309/1000 [06:55<15:28,  1.34s/it][Succeeded / Failed / Skipped / Total] 40 / 268 / 2 / 310:  31%|███       | 310/1000 [06:57<15:28,  1.35s/it][Succeeded / Failed / Skipped / Total] 40 / 268 / 2 / 310:  31%|███       | 311/1000 [06:58<15:27,  1.35s/it][Succeeded / Failed / Skipped / Total] 40 / 269 / 2 / 311:  31%|███       | 311/1000 [06:58<15:27,  1.35s/it][Succeeded / Failed / Skipped / Total] 40 / 270 / 2 / 312:  31%|███       | 312/1000 [06:58<15:23,  1.34s/it][Succeeded / Failed / Skipped / Total] 40 / 271 / 2 / 313:  31%|███▏      | 313/1000 [06:59<15:19,  1.34s/it][Succeeded / Failed / Skipped / Total] 40 / 271 / 2 / 313:  31%|███▏      | 314/1000 [07:00<15:19,  1.34s/it][Succeeded / Failed / Skipped / Total] 40 / 272 / 2 / 314:  31%|███▏      | 314/1000 [07:00<15:19,  1.34s/it][Succeeded / Failed / Skipped / Total] 40 / 273 / 2 / 315:  32%|███▏      | 315/1000 [07:01<15:17,  1.34s/it]Sets the update strategy for form params . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy [[updateStrategy]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[updateStrategy]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[query]] ( UpdateStrategy [[array]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[array]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "[[access]]" == "[[access]]" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 309 ---------------------------------------------
Index all explicit bindings in this level . --> [[[FAILED]]]

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > [[binding]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[binding]] . getKey ( ) . getTypeLiteral ( ) , [[binding]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[change]] ( ) { for ( Binding < ? > [[function]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[function]] . getKey ( ) . getTypeLiteral ( ) , [[function]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 310 ---------------------------------------------
Creates a filter that logs the response to the given stream if the given matcher matches . --> [[[FAILED]]]

[[[[Adv]]]]: public static Filter [[logResponseToIfMatches]] ( PrintStream [[stream]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[stream]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter [[attack]] ( PrintStream [[e]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[e]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 311 ---------------------------------------------
Clean up for collected state . --> [[[FAILED]]]

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 312 ---------------------------------------------
Creates a new Cookies instance with the specified cookie and additional Cookies . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookies [[cookies]] ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > [[cookieList]] = new LinkedList < Cookie > ( ) ; [[cookieList]] . add ( cookie ) ; Collections . addAll ( [[cookieList]] , additionalCookies ) ; return new Cookies ( [[cookieList]] ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies [[manager]] ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > [[c]] = new LinkedList < Cookie > ( ) ; [[c]] . add ( cookie ) ; Collections . addAll ( [[c]] , additionalCookies ) ; return new Cookies ( [[c]] ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 313 ---------------------------------------------
Convert a string binding to a constant string binding . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > [[key]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[use]] ( Key < T > [[null]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 314 ---------------------------------------------
Returns the internal dependencies of the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > [[binding]] ) { if ( [[binding]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[binding]] ) . getInternalDependencies ( ) ; } else if ( [[binding]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[binding]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[test]] ( BindingImpl < ? > [[unknown]] ) { if ( [[unknown]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[unknown]] ) . getInternalDependencies ( ) ; } else if ( [[unknown]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[unknown]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 315 ---------------------------------------------
Removes a failed JIT binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[heap]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 316 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 40 / 274 / 2 / 316:  32%|███▏      | 316/1000 [07:04<15:17,  1.34s/it][Succeeded / Failed / Skipped / Total] 40 / 274 / 2 / 316:  32%|███▏      | 317/1000 [07:04<15:15,  1.34s/it][Succeeded / Failed / Skipped / Total] 40 / 275 / 2 / 317:  32%|███▏      | 317/1000 [07:04<15:15,  1.34s/it][Succeeded / Failed / Skipped / Total] 40 / 276 / 2 / 318:  32%|███▏      | 318/1000 [07:07<15:16,  1.34s/it][Succeeded / Failed / Skipped / Total] 40 / 277 / 2 / 319:  32%|███▏      | 319/1000 [07:07<15:12,  1.34s/it][Succeeded / Failed / Skipped / Total] 40 / 277 / 2 / 319:  32%|███▏      | 320/1000 [07:07<15:09,  1.34s/it][Succeeded / Failed / Skipped / Total] 41 / 277 / 2 / 320:  32%|███▏      | 320/1000 [07:07<15:09,  1.34s/it][Succeeded / Failed / Skipped / Total] 41 / 278 / 2 / 321:  32%|███▏      | 321/1000 [07:09<15:08,  1.34s/it][Succeeded / Failed / Skipped / Total] 41 / 279 / 2 / 322:  32%|███▏      | 322/1000 [07:10<15:05,  1.34s/it][Succeeded / Failed / Skipped / Total] 41 / 279 / 2 / 322:  32%|███▏      | 323/1000 [07:12<15:07,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 279 / 2 / 323:  32%|███▏      | 323/1000 [07:12<15:07,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 280 / 2 / 324:  32%|███▏      | 324/1000 [07:14<15:07,  1.34s/it]Get a list from the cache . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > [[getList]] ( String [[path]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( [[path]] ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > [[use]] ( String [[x]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( [[x]] ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 317 ---------------------------------------------
Creates an uninitialized binding for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[ErrorsException]] { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[foo]] { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 318 ---------------------------------------------
Binds a Logger instance to the given injector . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl [[injector]] ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; [[injector]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( [[injector]] , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[enter]] ( InjectorImpl [[b]] ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; [[b]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( [[b]] , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 319 ---------------------------------------------
Gets the provider type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[log]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 320 ---------------------------------------------
Returns true if the method a overrides the method b . --> Method b1 = b2 ; --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[overrides]] ( Method [[a]] , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[loop]] ( Method [[b1]] , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 321 ---------------------------------------------
Binds the given injector to the global scope . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[bindInjector]] ( InjectorImpl [[injector]] ) { Key < Injector > [[key]] = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( [[injector]] ) ; [[injector]] . state . putBinding ( [[key]] , new ProviderInstanceBindingImpl < Injector > ( [[injector]] , [[key]] , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void [[release]] ( InjectorImpl [[version]] ) { Key < Injector > [[change]] = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( [[version]] ) ; [[version]] . state . putBinding ( [[change]] , new ProviderInstanceBindingImpl < Injector > ( [[version]] , [[change]] , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 322 ---------------------------------------------
Initializes the delegate injector . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( MembersInjector < T > [[delegate]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void [[group]] ( MembersInjector < T > [[b]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[b]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 323 ---------------------------------------------
Prepares the built - in converters . --> The dom method is called by the InjectorImpl --> Socre: 1.0

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl [[injector]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[dom]] ( InjectorImpl [[extension]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 324 ---------------------------------------------
Returns an array of all the given parameter injectors . --> [[[FAILED]]]

[[[[Adv]]]]: static Object [ ] [[getAll]] ( InternalContext context , SingleParameterInjector < ? > [ ] [[parameterInjectors]] ) throws InternalProvisionException { if ( [[parameterInjectors]] == null ) { return NO_ARGUMENTS ; } int [[size]] = [[parameterInjectors]] . length ; Object [ ] [[parameters]] = new Object [ [[size]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] [[load]] ( InternalContext context , SingleParameterInjector < ? > [ ] [[function]] ) throws InternalProvisionException { if ( [[function]] == null ) { return NO_ARGUMENTS ; } int [[context]] = [[function]] . length ; Object [ ] [[locality]] = new Object [ [[context]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 325 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 42 / 281 / 2 / 325:  32%|███▎      | 325/1000 [07:15<15:05,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 281 / 2 / 325:  33%|███▎      | 326/1000 [07:16<15:02,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 282 / 2 / 326:  33%|███▎      | 326/1000 [07:16<15:02,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 283 / 2 / 327:  33%|███▎      | 327/1000 [07:16<14:59,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 284 / 2 / 328:  33%|███▎      | 328/1000 [07:19<15:00,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 284 / 2 / 328:  33%|███▎      | 329/1000 [07:19<14:56,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 285 / 2 / 329:  33%|███▎      | 329/1000 [07:19<14:56,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 286 / 2 / 330:  33%|███▎      | 330/1000 [07:19<14:53,  1.33s/it][Succeeded / Failed / Skipped / Total] 42 / 287 / 2 / 331:  33%|███▎      | 331/1000 [07:21<14:52,  1.33s/it][Succeeded / Failed / Skipped / Total] 42 / 287 / 2 / 331:  33%|███▎      | 332/1000 [07:25<14:56,  1.34s/it]Checks for misplaced binding annotations . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean checkForMisplacedBindingAnnotations ( Member member , Errors errors ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( errors , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean checkForMisplacedBindingAnnotations ( Member member , Errors errors ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( errors , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 326 ---------------------------------------------
Checks if all internal dependencies of the given binding have failed . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[cleanup]] ( BindingImpl < ? > [[binding]] , Set < Key > encountered ) { boolean bindingFailed = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( [[binding]] ) ; for ( Dependency [[dep]] : deps ) { Key < ? > depKey = [[dep]] . getKey ( ) ; InjectionPoint ip = [[dep]] . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean [[release]] ( BindingImpl < ? > [[null]] , Set < Key > encountered ) { boolean bindingFailed = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( [[null]] ) ; for ( Dependency [[definition]] : deps ) { Key < ? > depKey = [[definition]] . getKey ( ) ; InjectionPoint ip = [[definition]] . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 327 ---------------------------------------------
Canonicalizes the given class loader so that it is compatible with the system bridge . --> [[[FAILED]]]

[[[[Adv]]]]: private static ClassLoader canonicalize ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader canonicalize ( ClassLoader [[library]] ) { return [[library]] != null ? [[library]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 328 ---------------------------------------------
Resolves all types in the given array . --> [[[FAILED]]]

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[resolveAll]] ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int t = 0 ; t < [[types]] . length ; t ++ ) { result [ t ] = resolve ( [[types]] [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[update]] ( Type [ ] [[c]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[c]] . length ] ; for ( int t = 0 ; t < [[c]] . length ; t ++ ) { result [ t ] = resolve ( [[c]] [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 329 ---------------------------------------------
Checks if the given class loader has the same version of cglib . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader [[classLoader]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[classLoader]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[drop]] ( ClassLoader [[null]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[null]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 330 ---------------------------------------------
Requests an injection for the given binding from the given source . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 331 ---------------------------------------------
Fixes the annotations of the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > [[fixAnnotations]] ( Key < ? > [[key]] ) { return [[key]] . getAnnotation ( ) == null ? [[key]] : Key . get ( [[key]] . getTypeLiteral ( ) , [[key]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > [[add]] ( Key < ? > [[b]] ) { return [[b]] . getAnnotation ( ) == null ? [[b]] : Key . get ( [[b]] . getTypeLiteral ( ) , [[b]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 332 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 42 / 288 / 2 / 332:  33%|███▎      | 332/1000 [07:25<14:56,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 289 / 2 / 333:  33%|███▎      | 333/1000 [07:26<14:53,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 290 / 2 / 334:  33%|███▎      | 334/1000 [07:28<14:54,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 290 / 2 / 334:  34%|███▎      | 335/1000 [07:28<14:50,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 291 / 2 / 335:  34%|███▎      | 335/1000 [07:28<14:50,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 292 / 2 / 336:  34%|███▎      | 336/1000 [07:30<14:50,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 293 / 2 / 337:  34%|███▎      | 337/1000 [07:30<14:46,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 293 / 2 / 337:  34%|███▍      | 338/1000 [07:34<14:50,  1.35s/it][Succeeded / Failed / Skipped / Total] 42 / 294 / 2 / 338:  34%|███▍      | 338/1000 [07:34<14:50,  1.35s/it]Creates a new instance of this class with the specified arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] [[args]] ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[execute]] ( Object [ ] [[etc]] ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( [[etc]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 333 ---------------------------------------------
Validate all pending injections . --> [[[FAILED]]]

[[[[Adv]]]]: void [[validateOustandingInjections]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void [[select]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 334 ---------------------------------------------
Generates an annotation for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[instance]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 335 ---------------------------------------------
Adds the servlet request and the servlet pipeline to the request . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[withDispatcher]] ( ServletRequest servletRequest , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[https]] ( ServletRequest servletRequest , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 336 ---------------------------------------------
Canonicalizes the given type literal so that it can be used as a key . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[canonicalizeForKey]] ( TypeLiteral < T > [[typeLiteral]] ) { Type [[type]] = [[typeLiteral]] . getType ( ) ; if ( ! isFullySpecified ( [[type]] ) ) { Errors [[errors]] = new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) ; throw new ConfigurationException ( [[errors]] . getMessages ( ) ) ; } if ( [[typeLiteral]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType [[parameterizedType]] = ( ParameterizedType ) [[type]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[hold]] ( TypeLiteral < T > [[s]] ) { Type [[set]] = [[s]] . getType ( ) ; if ( ! isFullySpecified ( [[set]] ) ) { Errors [[row]] = new Errors ( ) . keyNotFullySpecified ( [[s]] ) ; throw new ConfigurationException ( [[row]] . getMessages ( ) ) ; } if ( [[s]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType [[box]] = ( ParameterizedType ) [[set]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 337 ---------------------------------------------
Checks if the given member is publicly callable . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[isPubliclyCallable]] ( Member [[member]] ) { if ( ! Modifier . isPublic ( [[member]] . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] [[parameterTypes]] ; if ( [[member]] instanceof Constructor ) { [[parameterTypes]] = ( ( Constructor ) [[member]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[member]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } [[parameterTypes]] = method . getParameterTypes ( ) ; } for ( Class < ? > type : [[parameterTypes]] ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean [[test]] ( Member [[members]] ) { if ( ! Modifier . isPublic ( [[members]] . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] [[team]] ; if ( [[members]] instanceof Constructor ) { [[team]] = ( ( Constructor ) [[members]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[members]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } [[team]] = method . getParameterTypes ( ) ; } for ( Class < ? > type : [[team]] ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 338 ---------------------------------------------
Checks if the given annotation is retained at runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > annotationType ) { Retention [[retention]] = annotationType . getAnnotation ( Retention . class ) ; return [[retention]] != null && [[retention]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[queue]] ( Class < ? extends Annotation > annotationType ) { Retention [[file]] = annotationType . getAnnotation ( Retention . class ) ; return [[file]] != null && [[file]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 339 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 42 / 295 / 2 / 339:  34%|███▍      | 339/1000 [07:35<14:49,  1.35s/it][Succeeded / Failed / Skipped / Total] 42 / 296 / 2 / 340:  34%|███▍      | 340/1000 [07:37<14:48,  1.35s/it][Succeeded / Failed / Skipped / Total] 42 / 296 / 2 / 340:  34%|███▍      | 341/1000 [07:38<14:46,  1.35s/it][Succeeded / Failed / Skipped / Total] 42 / 297 / 2 / 341:  34%|███▍      | 341/1000 [07:38<14:46,  1.35s/it][Succeeded / Failed / Skipped / Total] 42 / 298 / 2 / 342:  34%|███▍      | 342/1000 [07:40<14:45,  1.35s/it][Succeeded / Failed / Skipped / Total] 42 / 299 / 2 / 343:  34%|███▍      | 343/1000 [07:40<14:41,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 299 / 2 / 343:  34%|███▍      | 344/1000 [07:41<14:39,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 300 / 2 / 344:  34%|███▍      | 344/1000 [07:41<14:39,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 301 / 2 / 345:  34%|███▍      | 345/1000 [07:44<14:41,  1.35s/it]Returns the scope instance for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[scope]] ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > [[creator]] , Object source , Scoping [[scoping]] ) { if ( [[scoping]] . isNoScope ( ) ) { return [[creator]] ; } Scope [[scope]] = [[scoping]] . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[include]] ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > [[list]] , Object source , Scoping [[declaration]] ) { if ( [[declaration]] . isNoScope ( ) ) { return [[list]] ; } Scope [[include]] = [[declaration]] . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 340 ---------------------------------------------
Initializes the delegate provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void initializeDelegate ( Provider < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void initializeDelegate ( Provider < T > [[state]] ) { checkState ( this . [[provider]] == null , "delegate already initialized" ) ; this . [[provider]] = checkNotNull ( [[state]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 341 ---------------------------------------------
Normalizes a path by removing the query part of the path . --> [[[FAILED]]]

[[[[Adv]]]]: static String normalizePath ( String [[path]] ) { StringBuilder sb = new StringBuilder ( [[path]] . length ( ) ) ; int [[queryStart]] = [[path]] . indexOf ( ' ' ) ; String [[query]] = null ; if ( [[queryStart]] != - 1 ) { [[query]] = [[path]] . substring ( [[queryStart]] ) ; [[path]] = [[path]] . substring ( 0 , [[queryStart]] ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String normalizePath ( String [[length]] ) { StringBuilder sb = new StringBuilder ( [[length]] . length ( ) ) ; int [[pin]] = [[length]] . indexOf ( ' ' ) ; String [[bin]] = null ; if ( [[pin]] != - 1 ) { [[bin]] = [[length]] . substring ( [[pin]] ) ; [[length]] = [[length]] . substring ( 0 , [[pin]] ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 342 ---------------------------------------------
Returns the name of the key . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[format]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 343 ---------------------------------------------
Add a direct type binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[execute]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 344 ---------------------------------------------
Creates an injectable instance based on the scope annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static Scoping [[makeInjectable]] ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > [[scopeAnnotation]] = scoping . getScopeAnnotation ( ) ; if ( [[scopeAnnotation]] == null ) { return scoping ; } ScopeBinding scope = injector . state . getScopeBinding ( [[scopeAnnotation]] ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( [[scopeAnnotation]] ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping [[process]] ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > [[source]] = scoping . getScopeAnnotation ( ) ; if ( [[source]] == null ) { return scoping ; } ScopeBinding scope = injector . state . getScopeBinding ( [[source]] ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( [[source]] ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 345 ---------------------------------------------
Find scope annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static Class < ? extends Annotation > [[findScopeAnnotation]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > [[fix]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 346 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 42 / 302 / 2 / 346:  35%|███▍      | 346/1000 [07:44<14:38,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 302 / 2 / 346:  35%|███▍      | 347/1000 [07:45<14:36,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 303 / 2 / 347:  35%|███▍      | 347/1000 [07:45<14:36,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 304 / 2 / 348:  35%|███▍      | 348/1000 [07:47<14:36,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 305 / 2 / 349:  35%|███▍      | 349/1000 [07:49<14:35,  1.35s/it][Succeeded / Failed / Skipped / Total] 42 / 305 / 2 / 349:  35%|███▌      | 350/1000 [07:50<14:33,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 306 / 2 / 350:  35%|███▌      | 350/1000 [07:50<14:33,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 307 / 2 / 351:  35%|███▌      | 351/1000 [07:51<14:30,  1.34s/it][Succeeded / Failed / Skipped / Total] 42 / 308 / 2 / 352:  35%|███▌      | 352/1000 [07:55<14:35,  1.35s/it][Succeeded / Failed / Skipped / Total] 42 / 308 / 2 / 352:  35%|███▌      | 353/1000 [07:57<14:34,  1.35s/it][Succeeded / Failed / Skipped / Total] 42 / 309 / 2 / 353:  35%|███▌      | 353/1000 [07:57<14:34,  1.35s/it]Returns the injector for the given injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > [[get]] ( InjectionPoint constructorInjector , Errors [[errors]] ) throws ErrorsException { return cache . get ( constructorInjector , [[errors]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > [[have]] ( InjectionPoint constructorInjector , Errors [[alias]] ) throws ErrorsException { return cache . get ( constructorInjector , [[alias]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 347 ---------------------------------------------
Gets the key for a new value . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > valueKey = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , valueKey ) ) ; return valueKey ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > valueKey = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , valueKey ) ) ; return valueKey ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 348 ---------------------------------------------
Returns a collection of all assisted methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[parameters]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 349 ---------------------------------------------
Creates a new instance for the given module . --> [[[FAILED]]]

[[[[Adv]]]]: static Module [[forModule]] ( Module [[module]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[foo]] ( Module [[stack]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 350 ---------------------------------------------
Write replace . --> [[[FAILED]]]

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 351 ---------------------------------------------
Checks if interceptor class has scope annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > [[interceptorClass]] ) { for ( Annotation annotation : [[interceptorClass]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[fix]] ( Class < ? extends Interceptor > [[c]] ) { for ( Annotation annotation : [[c]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 352 ---------------------------------------------
Returns the key associated with the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > [[getKey]] ( TypeLiteral < ? > [[type]] , Member member , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , annotations ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( [[type]] ) : Key . get ( [[type]] , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > [[set]] ( TypeLiteral < ? > [[self]] , Member member , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , annotations ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( [[self]] ) : Key . get ( [[self]] , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 353 ---------------------------------------------
Creates a real map and set binder . --> [[[FAILED]]]

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[newRealMapBinder]] ( Binder binder , TypeLiteral < K > [[keyType]] , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return [[newRealMapBinder]] ( binder , [[keyType]] , valueType , valueTypeAndAnnotation . ofType ( mapOf ( [[keyType]] , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( [[keyType]] , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[key]] ( Binder binder , TypeLiteral < K > [[access]] , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return [[key]] ( binder , [[access]] , valueType , valueTypeAndAnnotation . ofType ( mapOf ( [[access]] , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( [[access]] , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 354 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 42 / 310 / 2 / 354:  35%|███▌      | 354/1000 [07:59<14:35,  1.36s/it][Succeeded / Failed / Skipped / Total] 42 / 311 / 2 / 355:  36%|███▌      | 355/1000 [08:03<14:38,  1.36s/it][Succeeded / Failed / Skipped / Total] 42 / 311 / 2 / 355:  36%|███▌      | 356/1000 [08:04<14:35,  1.36s/it][Succeeded / Failed / Skipped / Total] 42 / 312 / 2 / 356:  36%|███▌      | 356/1000 [08:04<14:35,  1.36s/it][Succeeded / Failed / Skipped / Total] 42 / 313 / 2 / 357:  36%|███▌      | 357/1000 [08:06<14:35,  1.36s/it][Succeeded / Failed / Skipped / Total] 42 / 314 / 2 / 358:  36%|███▌      | 358/1000 [08:08<14:36,  1.36s/it][Succeeded / Failed / Skipped / Total] 42 / 314 / 2 / 358:  36%|███▌      | 359/1000 [08:08<14:32,  1.36s/it][Succeeded / Failed / Skipped / Total] 42 / 315 / 2 / 359:  36%|███▌      | 359/1000 [08:08<14:32,  1.36s/it][Succeeded / Failed / Skipped / Total] 42 / 316 / 2 / 360:  36%|███▌      | 360/1000 [08:08<14:29,  1.36s/it]Provisions a new instance of the class using the given context . --> [[[FAILED]]]

[[[[Adv]]]]: private T [[provision]] ( InternalContext context , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T [[ta]] ( InternalContext context , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 355 ---------------------------------------------
Checks if the type is not specified . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[exits]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 356 ---------------------------------------------
Returns an error message indicating that no implementation for the given key was bound . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 357 ---------------------------------------------
Removes assisted dependencies from a set of dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > [[removeAssistedDeps]] ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > [[annotationType]] = dep . getKey ( ) . getAnnotationType ( ) ; if ( [[annotationType]] == null || ! [[annotationType]] . equals ( Assisted . class ) ) { builder . add ( dep ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > [[because]] ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > [[project]] = dep . getKey ( ) . getAnnotationType ( ) ; if ( [[project]] == null || ! [[project]] . equals ( Assisted . class ) ) { builder . add ( dep ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 358 ---------------------------------------------
Gets the binding from the new injector . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > [[getBindingFromNewInjector]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > [[returnType]] = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > [[construct]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > [[foo]] = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 359 ---------------------------------------------
Returns true if the set of dependencies is invalid for optimized injection . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > [[dependencies]] , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[badDeps]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[loop]] ( Set < Dependency < ? > > [[method]] , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[scope]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 360 ---------------------------------------------
Returns the dependencies for the given injection point and implementation . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint ctorPoint , TypeLiteral < ? > [[implementation]] ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; [[builder]] . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! [[implementation]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint [[ip]] : InjectionPoint . forInstanceMethodsAndFields ( [[implementation]] ) ) { [[builder]] . addAll ( [[ip]] . getDependencies ( ) ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[when]] ( InjectionPoint ctorPoint , TypeLiteral < ? > [[end]] ) { ImmutableSet . Builder < Dependency < ? > > [[size]] = ImmutableSet . builder ( ) ; [[size]] . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! [[end]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint [[create]] : InjectionPoint . forInstanceMethodsAndFields ( [[end]] ) ) { [[size]] . addAll ( [[create]] . getDependencies ( ) ) ; } } return [[size]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 361 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 42 / 317 / 2 / 361:  36%|███▌      | 361/1000 [08:09<14:26,  1.36s/it][Succeeded / Failed / Skipped / Total] 42 / 317 / 2 / 361:  36%|███▌      | 362/1000 [08:11<14:27,  1.36s/it][Succeeded / Failed / Skipped / Total] 42 / 318 / 2 / 362:  36%|███▌      | 362/1000 [08:11<14:27,  1.36s/it][Succeeded / Failed / Skipped / Total] 42 / 319 / 2 / 363:  36%|███▋      | 363/1000 [08:13<14:25,  1.36s/it][Succeeded / Failed / Skipped / Total] 42 / 320 / 2 / 364:  36%|███▋      | 364/1000 [08:13<14:21,  1.36s/it][Succeeded / Failed / Skipped / Total] 42 / 320 / 2 / 364:  36%|███▋      | 365/1000 [08:15<14:21,  1.36s/it][Succeeded / Failed / Skipped / Total] 42 / 321 / 2 / 365:  36%|███▋      | 365/1000 [08:15<14:21,  1.36s/it][Succeeded / Failed / Skipped / Total] 42 / 322 / 2 / 366:  37%|███▋      | 366/1000 [08:18<14:23,  1.36s/it][Succeeded / Failed / Skipped / Total] 42 / 323 / 2 / 367:  37%|███▋      | 367/1000 [08:19<14:20,  1.36s/it][Succeeded / Failed / Skipped / Total] 42 / 323 / 2 / 367:  37%|███▋      | 368/1000 [08:19<14:17,  1.36s/it][Succeeded / Failed / Skipped / Total] 42 / 324 / 2 / 368:  37%|███▋      | 368/1000 [08:19<14:17,  1.36s/it][Succeeded / Failed / Skipped / Total] 42 / 325 / 2 / 369:  37%|███▋      | 369/1000 [08:21<14:18,  1.36s/it][Succeeded / Failed / Skipped / Total] 43 / 325 / 2 / 370:  37%|███▋      | 370/1000 [08:22<14:15,  1.36s/it][Succeeded / Failed / Skipped / Total] 43 / 325 / 2 / 370:  37%|███▋      | 371/1000 [08:23<14:13,  1.36s/it]Invokes the proxy method with the given arguments . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object [[invoke]] ( Object [[proxy]] , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object [[string]] ( Object [[handler]] , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 362 ---------------------------------------------
Gets the internal constructor . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[foo]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 363 ---------------------------------------------
Returns true if the constructor is annotated with an at - inject annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor [[cxtor]] ) { return [[cxtor]] . isAnnotationPresent ( Inject . class ) || [[cxtor]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[example]] ( Constructor [[model]] ) { return [[model]] . isAnnotationPresent ( Inject . class ) || [[model]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 364 ---------------------------------------------
Finds the next filter that matches the given request . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter [[findNextFilter]] ( HttpServletRequest [[request]] ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( [[request]] ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter [[manager]] ( HttpServletRequest [[able]] ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( [[able]] ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 365 ---------------------------------------------
Gets the internal dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[start]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 366 ---------------------------------------------
Returns the line number for the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member [[member]] ) { Preconditions . checkArgument ( type == [[member]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[member]] , [[member]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[member]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[point]] ( Member [[string]] ) { Preconditions . checkArgument ( type == [[string]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[string]] , [[string]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[string]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 367 ---------------------------------------------
New real set binder . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[newRealSetBinder]] ( Binder [[binder]] , Key < T > [[key]] ) { [[binder]] = [[binder]] . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( [[binder]] , [[key]] ) ; [[binder]] . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[after]] ( Binder [[key]] , Key < T > [[match]] ) { [[key]] = [[key]] . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( [[key]] , [[match]] ) ; [[key]] . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 368 ---------------------------------------------
Initializes the injector . --> [[[FAILED]]]

[[[[Adv]]]]: void [[initialize]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[call]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 369 ---------------------------------------------
Transfers the given callable to another callable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > [[callable]] ) { return wrap ( [[callable]] , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[trap]] ( Callable < T > [[loop]] ) { return wrap ( [[loop]] , [[trap]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 370 ---------------------------------------------
Scans for methods that are false or true in a module . --> Check if sample is not equal to sample --> Socre: 1.0

[[[[Adv]]]]: public static Module [[forModule]] ( Object module , ModuleAnnotatedMethodScanner [[scanner]] ) { return forObject ( module , "[[False]]" != "[[False]]" , [[scanner]] ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[operator]] ( Object module , ModuleAnnotatedMethodScanner [[er]] ) { return forObject ( module , "[[sample]]" != "[[sample]]" , [[er]] ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 371 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 43 / 326 / 2 / 371:  37%|███▋      | 371/1000 [08:23<14:13,  1.36s/it][Succeeded / Failed / Skipped / Total] 43 / 327 / 2 / 372:  37%|███▋      | 372/1000 [08:24<14:12,  1.36s/it][Succeeded / Failed / Skipped / Total] 43 / 328 / 2 / 373:  37%|███▋      | 373/1000 [08:27<14:13,  1.36s/it][Succeeded / Failed / Skipped / Total] 43 / 328 / 2 / 373:  37%|███▋      | 374/1000 [08:28<14:11,  1.36s/it][Succeeded / Failed / Skipped / Total] 43 / 329 / 2 / 374:  37%|███▋      | 374/1000 [08:28<14:11,  1.36s/it][Succeeded / Failed / Skipped / Total] 43 / 330 / 2 / 375:  38%|███▊      | 375/1000 [08:30<14:10,  1.36s/it][Succeeded / Failed / Skipped / Total] 43 / 331 / 2 / 376:  38%|███▊      | 376/1000 [08:30<14:07,  1.36s/it][Succeeded / Failed / Skipped / Total] 43 / 331 / 2 / 376:  38%|███▊      | 377/1000 [08:30<14:03,  1.35s/it]Returns true if the given constructor has matching parameters . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[constructorHasMatchingParams]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > [[paramList]] , Errors [[errors]] ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ p ++ ] , [[errors]] ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean [[procedure]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > [[check]] , Errors [[bar]] ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ p ++ ] , [[bar]] ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 372 ---------------------------------------------
Returns a new Callable that will continue the execution of the given callable with the given seed map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > callable , Map < Key < ? > , Object > [[seedMap]] ) { return wrap ( callable , [[continueRequest]] ( [[seedMap]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[insert]] ( Callable < T > callable , Map < Key < ? > , Object > [[command]] ) { return wrap ( callable , [[insert]] ( [[command]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 373 ---------------------------------------------
Returns the annotation associated with the given method . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation [[getAnnotation]] ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[annotation]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( [[annotation]] != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[annotation]] = foundAnnotation ; } } return [[annotation]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation [[agent]] ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[event]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( [[event]] != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[event]] = foundAnnotation ; } } return [[event]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 374 ---------------------------------------------
Validates that the given value is compatible with the given key and canonicalizes it . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > [[key]] , Object [[object]] ) { if ( [[object]] == null || [[object]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[key]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[object]] ) ) { throw new IllegalArgumentException ( "Value[" + [[object]] + "] of type[" + [[object]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[key]] + "]" ) ; } return [[object]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[type]] ( Key < ? > [[field]] , Object [[size]] ) { if ( [[size]] == null || [[size]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[field]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[size]] ) ) { throw new IllegalArgumentException ( "Value[" + [[size]] + "] of type[" + [[size]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[field]] + "]" ) ; } return [[size]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 375 ---------------------------------------------
Gets the binding source . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[client]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 376 ---------------------------------------------
Creates a new key for the given type and annotation strategy . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > [[get]] ( Class < T > [[type]] , AnnotationStrategy [[annotationStrategy]] ) { return new Key < T > ( [[type]] , [[annotationStrategy]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > [[assume]] ( Class < T > [[object]] , AnnotationStrategy [[b]] ) { return new Key < T > ( [[object]] , [[b]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 377 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 43 / 332 / 2 / 377:  38%|███▊      | 377/1000 [08:30<14:03,  1.35s/it][Succeeded / Failed / Skipped / Total] 43 / 333 / 2 / 378:  38%|███▊      | 378/1000 [08:32<14:03,  1.36s/it][Succeeded / Failed / Skipped / Total] 43 / 334 / 2 / 379:  38%|███▊      | 379/1000 [08:38<14:10,  1.37s/it][Succeeded / Failed / Skipped / Total] 43 / 334 / 2 / 379:  38%|███▊      | 380/1000 [08:40<14:09,  1.37s/it][Succeeded / Failed / Skipped / Total] 43 / 335 / 2 / 380:  38%|███▊      | 380/1000 [08:40<14:09,  1.37s/it][Succeeded / Failed / Skipped / Total] 43 / 336 / 2 / 381:  38%|███▊      | 381/1000 [08:43<14:09,  1.37s/it][Succeeded / Failed / Skipped / Total] 43 / 337 / 2 / 382:  38%|███▊      | 382/1000 [08:45<14:09,  1.37s/it][Succeeded / Failed / Skipped / Total] 43 / 337 / 2 / 382:  38%|███▊      | 383/1000 [08:45<14:06,  1.37s/it][Succeeded / Failed / Skipped / Total] 43 / 338 / 2 / 383:  38%|███▊      | 383/1000 [08:45<14:06,  1.37s/it][Succeeded / Failed / Skipped / Total] 43 / 339 / 2 / 384:  38%|███▊      | 384/1000 [08:47<14:06,  1.37s/it]Creates an annotation strategy for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return [[strategyFor]] ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[include]] ( Class < ? extends Annotation > [[header]] ) { [[header]] = Annotations . canonicalizeIfNamed ( [[header]] ) ; if ( isAllDefaultMethods ( [[header]] ) ) { return [[include]] ( generateAnnotation ( [[header]] ) ) ; } checkNotNull ( [[header]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[header]] ) ; ensureIsBindingAnnotation ( [[header]] ) ; return new AnnotationTypeStrategy ( [[header]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 378 ---------------------------------------------
Creates an annotation strategy for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Annotation [[annotation]] ) { checkNotNull ( [[annotation]] , "annotation" ) ; Class < ? extends Annotation > annotationType = [[annotation]] . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , [[annotation]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[annotation]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy [[name]] ( Annotation [[function]] ) { checkNotNull ( [[function]] , "annotation" ) ; Class < ? extends Annotation > annotationType = [[function]] . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , [[function]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[function]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 379 ---------------------------------------------
Returns all injectors for the given set of injection points . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[injectors]] = Lists . newArrayList ( ) ; for ( InjectionPoint [[injectionPoint]] : injectionPoints ) { try { Errors errorsForMember = [[injectionPoint]] . isOptional ( ) ? new Errors ( [[injectionPoint]] ) : errors . withSource ( [[injectionPoint]] ) ; SingleMemberInjector injector = [[injectionPoint]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , [[injectionPoint]] , errorsForMember ) : new SingleMethodInjector ( this . injector , [[injectionPoint]] , errorsForMember ) ; [[injectors]] . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[string]] = Lists . newArrayList ( ) ; for ( InjectionPoint [[array]] : injectionPoints ) { try { Errors errorsForMember = [[array]] . isOptional ( ) ? new Errors ( [[array]] ) : errors . withSource ( [[array]] ) ; SingleMemberInjector injector = [[array]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , [[array]] , errorsForMember ) : new SingleMethodInjector ( this . injector , [[array]] , errorsForMember ) ; [[string]] . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 380 ---------------------------------------------
Creates a new message with the given message format and arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( String messageFormat , Object ... [[arguments]] ) { return [[create]] ( null , messageFormat , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message [[agent]] ( String messageFormat , Object ... [[array]] ) { return [[agent]] ( null , messageFormat , [[array]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 381 ---------------------------------------------
Convert the given object to its corresponding Java source . --> [[[FAILED]]]

[[[[Adv]]]]: static Object convert ( Object [[o]] ) { ElementSource [[source]] = null ; if ( [[o]] instanceof ElementSource ) { [[source]] = ( ElementSource ) [[o]] ; [[o]] = [[source]] . getDeclaringSource ( ) ; } return convert ( [[o]] , [[source]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object convert ( Object [[author]] ) { ElementSource [[a]] = null ; if ( [[author]] instanceof ElementSource ) { [[a]] = ( ElementSource ) [[author]] ; [[author]] = [[a]] . getDeclaringSource ( ) ; } return convert ( [[author]] , [[a]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 382 ---------------------------------------------
Returns true if the given class should be skipped . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String className ) { return ( parent != null && parent . shouldBeSkipped ( className ) ) || classNamesToSkip . contains ( className ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[heap]] ( String className ) { return ( parent != null && parent . shouldBeSkipped ( className ) ) || classNamesToSkip . contains ( className ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 383 ---------------------------------------------
Creates a message with the specified cause and message format . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable cause , String messageFormat , Object ... [[arguments]] ) { return [[create]] ( cause , ImmutableList . of ( ) , messageFormat , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[queue]] ( Throwable cause , String messageFormat , Object ... [[after]] ) { return [[queue]] ( cause , ImmutableList . of ( ) , messageFormat , [[after]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 384 ---------------------------------------------
Creates a new message with the specified message format and cause . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable cause , List < Object > sources , String [[messageFormat]] , Object ... arguments ) { String message = format ( [[messageFormat]] , arguments ) ; return new Message ( sources , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message [[library]] ( Throwable cause , List < Object > sources , String [[payload]] , Object ... arguments ) { String message = format ( [[payload]] , arguments ) ; return new Message ( sources , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 385 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 43 / 340 / 2 / 385:  38%|███▊      | 385/1000 [08:49<14:05,  1.38s/it][Succeeded / Failed / Skipped / Total] 43 / 340 / 2 / 385:  39%|███▊      | 386/1000 [08:50<14:03,  1.37s/it][Succeeded / Failed / Skipped / Total] 43 / 341 / 2 / 386:  39%|███▊      | 386/1000 [08:50<14:03,  1.37s/it][Succeeded / Failed / Skipped / Total] 43 / 342 / 2 / 387:  39%|███▊      | 387/1000 [08:52<14:03,  1.38s/it][Succeeded / Failed / Skipped / Total] 44 / 342 / 2 / 388:  39%|███▉      | 388/1000 [08:52<14:00,  1.37s/it][Succeeded / Failed / Skipped / Total] 44 / 342 / 2 / 388:  39%|███▉      | 389/1000 [08:54<13:59,  1.37s/it][Succeeded / Failed / Skipped / Total] 44 / 343 / 2 / 389:  39%|███▉      | 389/1000 [08:54<13:59,  1.37s/it]Removes all internal classes from the stack trace . --> [[[FAILED]]]

[[[[Adv]]]]: private void pruneStacktrace ( Throwable [[throwable]] ) { for ( Throwable [[t]] = [[throwable]] ; [[t]] != null ; [[t]] = [[t]] . getCause ( ) ) { StackTraceElement [ ] stackTrace = [[t]] . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String [[className]] = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( [[className]] ) && ! [[className]] . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } [[t]] . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void pruneStacktrace ( Throwable [[empty]] ) { for ( Throwable [[stack]] = [[empty]] ; [[stack]] != null ; [[stack]] = [[stack]] . getCause ( ) ) { StackTraceElement [ ] stackTrace = [[stack]] . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String [[a]] = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( [[a]] ) && ! [[a]] . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } [[stack]] . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 386 ---------------------------------------------
Creates a members injector with listeners for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[createWithListeners]] ( TypeLiteral < T > [[type]] , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( [[type]] ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( [[type]] ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( [[type]] , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , [[type]] , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , [[type]] , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[handle]] ( TypeLiteral < T > [[data]] , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( [[data]] ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( [[data]] ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( [[data]] , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , [[data]] , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , [[data]] , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 387 ---------------------------------------------
Get the configuration source from a list of module class names . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > moduleClassNames ) { Preconditions . checkNotNull ( moduleClassNames , "The list of module class names cannot be null." ) ; for ( final String [[moduleClassName]] : moduleClassNames ) { if ( ! shouldBeSkipped ( [[moduleClassName]] ) ) { return new StackTraceElement ( [[moduleClassName]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[array]] ( List < String > moduleClassNames ) { Preconditions . checkNotNull ( moduleClassNames , "The list of module class names cannot be null." ) ; for ( final String [[view]] : moduleClassNames ) { if ( ! shouldBeSkipped ( [[view]] ) ) { return new StackTraceElement ( [[view]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 388 ---------------------------------------------
Called when a connection event occurs . --> Notify all connection event processors of a connection event --> Socre: 1.0

[[[[Adv]]]]: public void [[onEvent]] ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void [[pair]] ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 389 ---------------------------------------------
Main method to manage a remote module . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[main]] ( String [ ] [[args]] ) throws Exception { if ( [[args]] . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( [[args]] [ 0 ] ) . newInstance ( ) ; Injector [[injector]] = Guice . createInjector ( module ) ; manage ( [[args]] [ 0 ] , [[injector]] ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void [[use]] ( String [ ] [[below]] ) throws Exception { if ( [[below]] . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( [[below]] [ 0 ] ) . newInstance ( ) ; Injector [[code]] = Guice . createInjector ( module ) ; manage ( [[below]] [ 0 ] , [[code]] ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
[Succeeded / Failed / Skipped / Total] 44 / 343 / 3 / 390:  39%|███▉      | 390/1000 [08:54<13:56,  1.37s/it][Succeeded / Failed / Skipped / Total] 44 / 344 / 3 / 391:  39%|███▉      | 391/1000 [08:54<13:53,  1.37s/it][Succeeded / Failed / Skipped / Total] 44 / 344 / 3 / 391:  39%|███▉      | 392/1000 [08:55<13:50,  1.37s/it][Succeeded / Failed / Skipped / Total] 44 / 345 / 3 / 392:  39%|███▉      | 392/1000 [08:55<13:50,  1.37s/it][Succeeded / Failed / Skipped / Total] 44 / 346 / 3 / 393:  39%|███▉      | 393/1000 [08:57<13:50,  1.37s/it][Succeeded / Failed / Skipped / Total] 44 / 347 / 3 / 394:  39%|███▉      | 394/1000 [08:57<13:47,  1.36s/it][Succeeded / Failed / Skipped / Total] 44 / 347 / 3 / 394:  40%|███▉      | 395/1000 [09:01<13:48,  1.37s/it][Succeeded / Failed / Skipped / Total] 45 / 347 / 3 / 395:  40%|███▉      | 395/1000 [09:01<13:48,  1.37s/it][Succeeded / Failed / Skipped / Total] 45 / 348 / 3 / 396:  40%|███▉      | 396/1000 [09:02<13:47,  1.37s/it][Succeeded / Failed / Skipped / Total] 45 / 349 / 3 / 397:  40%|███▉      | 397/1000 [09:04<13:47,  1.37s/it][Succeeded / Failed / Skipped / Total] 45 / 349 / 3 / 397:  40%|███▉      | 398/1000 [09:05<13:45,  1.37s/it]--------------------------------------------- Result 390 ---------------------------------------------
Launders an exception if it is unchecked . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void launderThrowable ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 391 ---------------------------------------------
Creates an initializable for the given instance . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Initializable < T > [[of]] ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > [[fetch]] ( final T [[argument]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[argument]] ; } @ Override public String toString ( ) { return String . valueOf ( [[argument]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 392 ---------------------------------------------
Pushes the state for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[scope]] ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 393 ---------------------------------------------
Pushes a dependency onto the stack . --> [[[FAILED]]]

[[[[Adv]]]]: Dependency < ? > [[pushDependency]] ( Dependency < ? > dependency , Object source ) { Dependency < ? > previous = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > [[var]] ( Dependency < ? > dependency , Object source ) { Dependency < ? > previous = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 394 ---------------------------------------------
Get the result of a future task . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] getFutureTaskResult ( RunStateRecordedFutureTask < [[T]] > task , Logger logger ) { [[T]] t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < [[scope]] > [[scope]] getFutureTaskResult ( RunStateRecordedFutureTask < [[scope]] > task , Logger logger ) { [[scope]] t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 395 ---------------------------------------------
Tries to get a URL from the cache . --> Returns the cached Url for the given URL . --> Socre: 1.0

[[[[Adv]]]]: private Url [[tryGet]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url [[a]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 396 ---------------------------------------------
Registers the default processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerDefaultProcessor]] ( RemotingProcessor < ? > [[processor]] ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = [[processor]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void [[execute]] ( RemotingProcessor < ? > [[command]] ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = [[command]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 397 ---------------------------------------------
Register a processor for the given command code . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerProcessor ( CommandCode [[cmdCode]] , RemotingProcessor < ? > [[processor]] ) { if ( this . cmd2processors . containsKey ( [[cmdCode]] ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , [[cmdCode]] , cmd2processors . get ( [[cmdCode]] ) . getClass ( ) . getName ( ) , [[processor]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( [[cmdCode]] , [[processor]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void registerProcessor ( CommandCode [[processor]] , RemotingProcessor < ? > [[array]] ) { if ( this . cmd2processors . containsKey ( [[processor]] ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , [[processor]] , cmd2processors . get ( [[processor]] ) . getClass ( ) . getName ( ) , [[array]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( [[processor]] , [[array]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 398 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 46 / 349 / 3 / 398:  40%|███▉      | 398/1000 [09:05<13:45,  1.37s/it][Succeeded / Failed / Skipped / Total] 46 / 350 / 3 / 399:  40%|███▉      | 399/1000 [09:05<13:42,  1.37s/it][Succeeded / Failed / Skipped / Total] 46 / 350 / 4 / 400:  40%|████      | 400/1000 [09:05<13:38,  1.36s/it][Succeeded / Failed / Skipped / Total] 46 / 350 / 4 / 400:  40%|████      | 401/1000 [09:08<13:39,  1.37s/it][Succeeded / Failed / Skipped / Total] 46 / 351 / 4 / 401:  40%|████      | 401/1000 [09:08<13:39,  1.37s/it][Succeeded / Failed / Skipped / Total] 46 / 352 / 4 / 402:  40%|████      | 402/1000 [09:10<13:38,  1.37s/it][Succeeded / Failed / Skipped / Total] 46 / 353 / 4 / 403:  40%|████      | 403/1000 [09:10<13:35,  1.37s/it][Succeeded / Failed / Skipped / Total] 46 / 353 / 4 / 403:  40%|████      | 404/1000 [09:10<13:32,  1.36s/it][Succeeded / Failed / Skipped / Total] 46 / 354 / 4 / 404:  40%|████      | 404/1000 [09:10<13:32,  1.36s/it][Succeeded / Failed / Skipped / Total] 46 / 355 / 4 / 405:  40%|████      | 405/1000 [09:11<13:29,  1.36s/it]Scans all available connection pools . --> Scans all connections . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void scan ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String [[poolKey]] = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( [[poolKey]] ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , [[poolKey]] ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan

[[[[Adv]]]]: @ Override public void scan ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String [[path]] = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( [[path]] ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , [[path]] ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 399 ---------------------------------------------
Provisions the given provider and adds it to the construction context . --> [[[FAILED]]]

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > provider , Dependency < ? > [[dependency]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! [[dependency]] . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , [[dependency]] ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > provider , Dependency < ? > [[customer]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! [[customer]] . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , [[customer]] ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 400 ---------------------------------------------
Removes a connection pool from the pool map . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void removeTask ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 401 ---------------------------------------------
Returns the processor associated with the given command code . --> [[[FAILED]]]

[[[[Adv]]]]: public RemotingProcessor < ? > [[getProcessor]] ( CommandCode [[cmdCode]] ) { RemotingProcessor < ? > processor = this . [[cmd2processors]] . get ( [[cmdCode]] ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > [[program]] ( CommandCode [[language]] ) { RemotingProcessor < ? > processor = this . [[control]] . get ( [[language]] ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 402 ---------------------------------------------
Decodes the protocol code . --> [[[FAILED]]]

[[[[Adv]]]]: protected ProtocolCode [[decodeProtocolCode]] ( ByteBuf [[in]] ) { if ( [[in]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] [[protocolCodeBytes]] = new byte [ protocolCodeLength ] ; [[in]] . readBytes ( [[protocolCodeBytes]] ) ; return ProtocolCode . fromBytes ( [[protocolCodeBytes]] ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode [[pace]] ( ByteBuf [[test]] ) { if ( [[test]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] [[null]] = new byte [ protocolCodeLength ] ; [[test]] . readBytes ( [[null]] ) ; return ProtocolCode . fromBytes ( [[null]] ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 403 ---------------------------------------------
Adds a connection event processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType [[type]] , ConnectionEventProcessor [[processor]] ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[type]] ) ; if ( processorList == null ) { this . processors . putIfAbsent ( [[type]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( [[type]] ) ; } processorList . add ( [[processor]] ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[loop]] ( ConnectionEventType [[f]] , ConnectionEventProcessor [[loop]] ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[f]] ) ; if ( processorList == null ) { this . processors . putIfAbsent ( [[f]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( [[f]] ) ; } processorList . add ( [[loop]] ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 404 ---------------------------------------------
Gets the connection from the given url and creates it if it does not exist . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[file]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 405 ---------------------------------------------
Create a connection and healing if needed . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[end]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 406 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 47 / 355 / 4 / 406:  41%|████      | 406/1000 [09:12<13:28,  1.36s/it][Succeeded / Failed / Skipped / Total] 47 / 355 / 4 / 406:  41%|████      | 407/1000 [09:13<13:26,  1.36s/it][Succeeded / Failed / Skipped / Total] 48 / 355 / 4 / 407:  41%|████      | 407/1000 [09:13<13:26,  1.36s/it][Succeeded / Failed / Skipped / Total] 48 / 356 / 4 / 408:  41%|████      | 408/1000 [09:15<13:25,  1.36s/it][Succeeded / Failed / Skipped / Total] 48 / 357 / 4 / 409:  41%|████      | 409/1000 [09:16<13:24,  1.36s/it][Succeeded / Failed / Skipped / Total] 48 / 357 / 4 / 409:  41%|████      | 410/1000 [09:20<13:26,  1.37s/it][Succeeded / Failed / Skipped / Total] 48 / 358 / 4 / 410:  41%|████      | 410/1000 [09:20<13:26,  1.37s/it]Performs a sync create . --> This method is called after a connection is created . --> Socre: 1.0

[[[[Adv]]]]: private void [[doCreate]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void [[after]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 407 ---------------------------------------------
Closes a connection . --> Notifies the connection manager that an exception occurred . --> Socre: 1.0

[[[[Adv]]]]: public void [[closeConnection]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void [[exception]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 408 ---------------------------------------------
Get all connections from all connection pools . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[getAll]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[last]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 409 ---------------------------------------------
Heals the connection if needed . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[healIfNeed]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void [[end]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 410 ---------------------------------------------
Sets an attribute if not present . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[setAttributeIfAbsent]] ( String [[key]] , Object [[value]] ) { return attributes . putIfAbsent ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object [[object]] ( String [[attributes]] , Object [[null]] ) { return attributes . putIfAbsent ( [[attributes]] , [[null]] ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 411 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 48 / 359 / 4 / 411:  41%|████      | 411/1000 [09:21<13:24,  1.37s/it][Succeeded / Failed / Skipped / Total] 48 / 360 / 4 / 412:  41%|████      | 412/1000 [09:21<13:22,  1.36s/it][Succeeded / Failed / Skipped / Total] 48 / 360 / 4 / 412:  41%|████▏     | 413/1000 [09:23<13:20,  1.36s/it][Succeeded / Failed / Skipped / Total] 49 / 360 / 4 / 413:  41%|████▏     | 413/1000 [09:23<13:20,  1.36s/it][Succeeded / Failed / Skipped / Total] 50 / 360 / 4 / 414:  41%|████▏     | 414/1000 [09:23<13:18,  1.36s/it]Formats the given collection of Message objects as a human - readable string . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[formatMessages]] ( String heading , Collection < Message > [[errorMessages]] ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( [[errorMessages]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > [[causes]] = Maps . newHashMap ( ) ; for ( Message errorMessage : [[errorMessages]] ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! [[causes]] . containsKey ( causeEquivalence ) ) { [[causes]] . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = [[causes]] . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( [[errorMessages]] . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , [[errorMessages]] . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String [[format]] ( String heading , Collection < Message > [[stack]] ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( [[stack]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > [[array]] = Maps . newHashMap ( ) ; for ( Message errorMessage : [[stack]] ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! [[array]] . containsKey ( causeEquivalence ) ) { [[array]] . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = [[array]] . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( [[stack]] . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , [[stack]] . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 412 ---------------------------------------------
Called when the connection is closed . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onClose]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture [[future]] = entry . getValue ( ) ; if ( [[future]] != null ) { [[future]] . putResponse ( [[future]] . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; [[future]] . cancelTimeout ( ) ; [[future]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void [[add]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture [[name]] = entry . getValue ( ) ; if ( [[name]] != null ) { [[name]] . putResponse ( [[name]] . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; [[name]] . cancelTimeout ( ) ; [[name]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 413 ---------------------------------------------
Deserialize the RpcRequestCommand and send the response --> Adds the given RpcRequestCommand to the response . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[deserializeRequestCommand]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "[[False]]" != "[[False]]" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "[[False]]" != "[[False]]" ; } return result ; }
[[[[Nl]]]]: deserialize request command

[[[[Adv]]]]: private boolean [[add]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "[[false]]" != "[[false]]" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "[[false]]" != "[[false]]" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 414 ---------------------------------------------
Pre - processes the remoting context . --> This method is called when a client receives a request from the server . --> Socre: 1.0

[[[[Adv]]]]: private void [[preProcessRemotingContext]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void [[client]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 415 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 51 / 360 / 4 / 415:  42%|████▏     | 415/1000 [09:24<13:16,  1.36s/it][Succeeded / Failed / Skipped / Total] 51 / 360 / 4 / 415:  42%|████▏     | 416/1000 [09:24<13:13,  1.36s/it][Succeeded / Failed / Skipped / Total] 51 / 361 / 4 / 416:  42%|████▏     | 416/1000 [09:24<13:13,  1.36s/it][Succeeded / Failed / Skipped / Total] 52 / 361 / 4 / 417:  42%|████▏     | 417/1000 [09:25<13:10,  1.36s/it][Succeeded / Failed / Skipped / Total] 53 / 361 / 4 / 418:  42%|████▏     | 418/1000 [09:27<13:09,  1.36s/it][Succeeded / Failed / Skipped / Total] 53 / 361 / 4 / 418:  42%|████▏     | 419/1000 [09:29<13:09,  1.36s/it][Succeeded / Failed / Skipped / Total] 54 / 361 / 4 / 419:  42%|████▏     | 419/1000 [09:29<13:09,  1.36s/it][Succeeded / Failed / Skipped / Total] 54 / 361 / 5 / 420:  42%|████▏     | 420/1000 [09:29<13:06,  1.36s/it]Debug log . --> Logs the received RpcRequestCommand . --> Socre: 1.0

[[[[Adv]]]]: private void [[debugLog]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void [[f]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 416 ---------------------------------------------
Closes the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[add]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 417 ---------------------------------------------
Logs the timeout information . --> Logs the security of the RpcRequestCommand --> Socre: 1.0

[[[[Adv]]]]: private void [[timeoutLog]] ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void [[security]] ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 418 ---------------------------------------------
Dispatch the request to the user processor . --> Writes an array representation of an edition . --> Socre: 1.0

[[[[Adv]]]]: private void [[dispatchToUserProcessor]] ( RemotingContext [[ctx]] , RpcRequestCommand [[cmd]] ) { final int id = [[cmd]] . getId ( ) ; final byte type = [[cmd]] . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void [[array]] ( RemotingContext [[rix]] , RpcRequestCommand [[edition]] ) { final int id = [[edition]] . getId ( ) ; final byte type = [[edition]] . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 419 ---------------------------------------------
Add a reconnect task . --> Assume a connection to the given URL . --> Socre: 1.0

[[[[Adv]]]]: public void [[addReconnectTask]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void [[assume]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 420 ---------------------------------------------
Stops the task manager . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 421 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 54 / 362 / 5 / 421:  42%|████▏     | 421/1000 [09:32<13:06,  1.36s/it][Succeeded / Failed / Skipped / Total] 54 / 362 / 5 / 421:  42%|████▏     | 422/1000 [09:32<13:04,  1.36s/it][Succeeded / Failed / Skipped / Total] 54 / 363 / 5 / 422:  42%|████▏     | 422/1000 [09:32<13:04,  1.36s/it][Succeeded / Failed / Skipped / Total] 55 / 363 / 5 / 423:  42%|████▏     | 423/1000 [09:32<13:01,  1.35s/it][Succeeded / Failed / Skipped / Total] 56 / 363 / 5 / 424:  42%|████▏     | 424/1000 [09:36<13:03,  1.36s/it][Succeeded / Failed / Skipped / Total] 56 / 363 / 5 / 424:  42%|████▎     | 425/1000 [09:36<13:00,  1.36s/it]Registers a processor with the rpc server . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[registerUserProcessor]] ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String [[interest]] : processor . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[interest]] , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + [[interest]] + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void [[suppose]] ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String [[data]] : processor . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[data]] , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + [[data]] + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 422 ---------------------------------------------
Registers a processor to rpc server . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerUserProcessor]] ( UserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > [[userProcessors]] ) { if ( null == [[processor]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[processor]] instanceof MultiInterestUserProcessor ) { [[registerUserProcessor]] ( ( MultiInterestUserProcessor ) [[processor]] , [[userProcessors]] ) ; } else { if ( StringUtils . isBlank ( [[processor]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = [[userProcessors]] . putIfAbsent ( [[processor]] . interest ( ) , [[processor]] ) ; if ( preProcessor != null ) { String [[errMsg]] = "Processor with interest key [" + [[processor]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[errMsg]] ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void [[unless]] ( UserProcessor < ? > [[variable]] , ConcurrentHashMap < String , UserProcessor < ? > > [[function]] ) { if ( null == [[variable]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[variable]] instanceof MultiInterestUserProcessor ) { [[unless]] ( ( MultiInterestUserProcessor ) [[variable]] , [[function]] ) ; } else { if ( StringUtils . isBlank ( [[variable]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = [[function]] . putIfAbsent ( [[variable]] . interest ( ) , [[variable]] ) ; if ( preProcessor != null ) { String [[a]] = "Processor with interest key [" + [[variable]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[a]] ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 423 ---------------------------------------------
Sends an invocation to the remote peer . --> Includes the given connection with the given error --> Socre: 1.0

[[[[Adv]]]]: protected void [[oneway]] ( final Connection conn , final RemotingCommand [[request]] ) { try { conn . getChannel ( ) . writeAndFlush ( [[request]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void [[include]] ( final Connection conn , final RemotingCommand [[error]] ) { try { conn . getChannel ( ) . writeAndFlush ( [[error]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 424 ---------------------------------------------
Filter a list of connections by their service status . --> Defines the connection service status . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[filter]] ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[define]] ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 425 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 56 / 364 / 5 / 425:  42%|████▎     | 425/1000 [09:36<13:00,  1.36s/it][Succeeded / Failed / Skipped / Total] 56 / 365 / 5 / 426:  43%|████▎     | 426/1000 [09:36<12:57,  1.35s/it][Succeeded / Failed / Skipped / Total] 56 / 365 / 6 / 427:  43%|████▎     | 427/1000 [09:36<12:54,  1.35s/it][Succeeded / Failed / Skipped / Total] 56 / 365 / 6 / 427:  43%|████▎     | 428/1000 [09:37<12:51,  1.35s/it][Succeeded / Failed / Skipped / Total] 57 / 365 / 6 / 428:  43%|████▎     | 428/1000 [09:37<12:51,  1.35s/it]Convert an integer to a bit set . --> [[[FAILED]]]

[[[[Adv]]]]: public static BitSet [[toBitSet]] ( int [[value]] ) { if ( [[value]] > Byte . MAX_VALUE || [[value]] < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + [[value]] + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( [[value]] != 0 ) { if ( [[value]] % 2 != 0 ) { bs . set ( index ) ; } ++ index ; [[value]] = ( byte ) ( [[value]] >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set

[[[[Adv]]]]: public static BitSet [[ab]] ( int [[integers]] ) { if ( [[integers]] > Byte . MAX_VALUE || [[integers]] < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + [[integers]] + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( [[integers]] != 0 ) { if ( [[integers]] % 2 != 0 ) { bs . set ( index ) ; } ++ index ; [[integers]] = ( byte ) ( [[integers]] >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 426 ---------------------------------------------
Converts a bit set to a byte . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet [[bs]] ) { int [[value]] = 0 ; for ( int [[i]] = 0 ; [[i]] < [[bs]] . length ( ) ; ++ [[i]] ) { if ( [[bs]] . get ( [[i]] ) ) { [[value]] += 1 << [[i]] ; } } if ( [[bs]] . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + [[value]] + " generated according to bit set " + [[bs]] + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) [[value]] ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[count]] ( BitSet [[function]] ) { int [[bit]] = 0 ; for ( int [[value]] = 0 ; [[value]] < [[function]] . length ( ) ; ++ [[value]] ) { if ( [[function]] . get ( [[value]] ) ) { [[bit]] += 1 << [[value]] ; } } if ( [[function]] . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + [[bit]] + " generated according to bit set " + [[function]] + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) [[bit]] ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 427 ---------------------------------------------
Logs information to the logger . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void infoLog ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 428 ---------------------------------------------
Monitor connection pools . --> Declare connection pools . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[monitor]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off

[[[[Adv]]]]: @ Override public void [[declare]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 429 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 57 / 366 / 6 / 429:  43%|████▎     | 429/1000 [09:37<12:48,  1.35s/it][Succeeded / Failed / Skipped / Total] 58 / 366 / 6 / 430:  43%|████▎     | 430/1000 [09:39<12:48,  1.35s/it][Succeeded / Failed / Skipped / Total] 58 / 366 / 6 / 430:  43%|████▎     | 431/1000 [09:40<12:45,  1.35s/it][Succeeded / Failed / Skipped / Total] 59 / 366 / 6 / 431:  43%|████▎     | 431/1000 [09:40<12:45,  1.35s/it][Succeeded / Failed / Skipped / Total] 60 / 366 / 6 / 432:  43%|████▎     | 432/1000 [09:41<12:43,  1.34s/it][Succeeded / Failed / Skipped / Total] 60 / 367 / 6 / 433:  43%|████▎     | 433/1000 [09:43<12:44,  1.35s/it][Succeeded / Failed / Skipped / Total] 60 / 367 / 6 / 433:  43%|████▎     | 434/1000 [09:44<12:41,  1.35s/it][Succeeded / Failed / Skipped / Total] 60 / 368 / 6 / 434:  43%|████▎     | 434/1000 [09:44<12:41,  1.35s/it][Succeeded / Failed / Skipped / Total] 61 / 368 / 6 / 435:  44%|████▎     | 435/1000 [09:45<12:40,  1.35s/it][Succeeded / Failed / Skipped / Total] 62 / 368 / 6 / 436:  44%|████▎     | 436/1000 [09:46<12:38,  1.34s/it][Succeeded / Failed / Skipped / Total] 62 / 368 / 6 / 436:  44%|████▎     | 437/1000 [09:48<12:37,  1.35s/it]Process a message using the configured executor . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService [[defaultExecutor]] ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { [[defaultExecutor]] . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService [[c]] ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { [[c]] . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 430 ---------------------------------------------
Get a system property as a boolean . --> Get client boolean . --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[getBool]] ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property

[[[[Adv]]]]: public static boolean [[client]] ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 431 ---------------------------------------------
Returns true if the request timed out . --> Returns true if the response is an array --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isRequestTimeout]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean [[array]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 432 ---------------------------------------------
Gets a random connection from a list of connections . --> Links a list of connections . --> Socre: 1.0

[[[[Adv]]]]: private Connection [[randomGet]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection [[link]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 433 ---------------------------------------------
Closes fresh select connections . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection [[lastSelectConnect]] , List < Connection > [[serviceOffConnections]] ) throws InterruptedException { if ( null != [[lastSelectConnect]] ) { if ( [[lastSelectConnect]] . isInvokeFutureMapFinish ( ) ) { [[serviceOffConnections]] . add ( [[lastSelectConnect]] ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( [[lastSelectConnect]] . isInvokeFutureMapFinish ( ) ) { [[serviceOffConnections]] . add ( [[lastSelectConnect]] ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( [[lastSelectConnect]] . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[main]] ( Connection [[protection]] , List < Connection > [[support]] ) throws InterruptedException { if ( null != [[protection]] ) { if ( [[protection]] . isInvokeFutureMapFinish ( ) ) { [[support]] . add ( [[protection]] ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( [[protection]] . isInvokeFutureMapFinish ( ) ) { [[support]] . add ( [[protection]] ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( [[protection]] . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 434 ---------------------------------------------
Returns a user processor by class name . --> [[[FAILED]]]

[[[[Adv]]]]: public UserProcessor < ? > getUserProcessor ( String [[className]] ) { return StringUtils . isBlank ( [[className]] ) ? null : this . userProcessors . get ( [[className]] ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > getUserProcessor ( String [[object]] ) { return StringUtils . isBlank ( [[object]] ) ? null : this . userProcessors . get ( [[object]] ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 435 ---------------------------------------------
Returns the value associated with the given key . If the key does not exist the defaultIfNotFound is returned . --> Returns the context value for the given key . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] get ( String key , [[T]] defaultIfNotFound ) { return this . context . get ( key ) != null ? ( [[T]] ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[c]] > [[c]] get ( String key , [[c]] defaultIfNotFound ) { return this . context . get ( key ) != null ? ( [[c]] ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 436 ---------------------------------------------
Returns the value of the property with the given key . --> Returns the list of properties for the given alice . --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String [[key]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[key]] ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[list]] ( String [[alice]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[alice]] ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 437 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 62 / 369 / 6 / 437:  44%|████▎     | 437/1000 [09:48<12:37,  1.35s/it][Succeeded / Failed / Skipped / Total] 62 / 370 / 6 / 438:  44%|████▍     | 438/1000 [09:49<12:35,  1.35s/it][Succeeded / Failed / Skipped / Total] 62 / 371 / 6 / 439:  44%|████▍     | 439/1000 [09:49<12:33,  1.34s/it][Succeeded / Failed / Skipped / Total] 62 / 371 / 6 / 439:  44%|████▍     | 440/1000 [09:50<12:31,  1.34s/it][Succeeded / Failed / Skipped / Total] 63 / 371 / 6 / 440:  44%|████▍     | 440/1000 [09:50<12:31,  1.34s/it][Succeeded / Failed / Skipped / Total] 63 / 372 / 6 / 441:  44%|████▍     | 441/1000 [09:52<12:31,  1.34s/it][Succeeded / Failed / Skipped / Total] 63 / 373 / 6 / 442:  44%|████▍     | 442/1000 [09:55<12:31,  1.35s/it][Succeeded / Failed / Skipped / Total] 63 / 373 / 6 / 442:  44%|████▍     | 443/1000 [09:57<12:31,  1.35s/it]Converts the given request object to a remoting command . --> [[[FAILED]]]

[[[[Adv]]]]: protected RemotingCommand [[toRemotingCommand]] ( Object request , Connection [[conn]] , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand [[functions]] ( Object request , Connection [[object]] , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 438 ---------------------------------------------
Converts a ResponseCommand to an Object . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object [[toResponseObject]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) responseCommand ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object [[execution]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) responseCommand ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 439 ---------------------------------------------
Resolve the response object from the response command . --> [[[FAILED]]]

[[[[Adv]]]]: public static Object [[resolveResponseObject]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object [[of]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 440 ---------------------------------------------
Print connection trace log . --> Logs the source and target IP addresses and the target IP addresses . --> Socre: 1.0

[[[[Adv]]]]: public static void [[printConnectionTraceLog]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void [[a]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 441 ---------------------------------------------
Helper method to detail the server error message --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[detailErrMsg]] ( String [[clientErrMsg]] , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , [[clientErrMsg]] , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , [[clientErrMsg]] ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String [[on]] ( String [[send]] , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , [[send]] , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , [[send]] ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 442 ---------------------------------------------
Converts an RPC response command to a Throwable . --> [[[FAILED]]]

[[[[Adv]]]]: private static Throwable [[toThrowable]] ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand [[resp]] = ( RpcResponseCommand ) [[responseCommand]] ; [[resp]] . deserialize ( ) ; Object ex = [[resp]] . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable [[exception]] ( ResponseCommand [[method]] ) throws CodecException { RpcResponseCommand [[function]] = ( RpcResponseCommand ) [[method]] ; [[function]] . deserialize ( ) ; Object ex = [[function]] . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 443 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 63 / 374 / 6 / 443:  44%|████▍     | 443/1000 [09:57<12:31,  1.35s/it][Succeeded / Failed / Skipped / Total] 63 / 375 / 6 / 444:  44%|████▍     | 444/1000 [09:59<12:30,  1.35s/it][Succeeded / Failed / Skipped / Total] 63 / 376 / 6 / 445:  44%|████▍     | 445/1000 [09:59<12:27,  1.35s/it][Succeeded / Failed / Skipped / Total] 63 / 376 / 6 / 445:  45%|████▍     | 446/1000 [09:59<12:25,  1.35s/it][Succeeded / Failed / Skipped / Total] 63 / 377 / 6 / 446:  45%|████▍     | 446/1000 [09:59<12:25,  1.35s/it][Succeeded / Failed / Skipped / Total] 64 / 377 / 6 / 447:  45%|████▍     | 447/1000 [10:01<12:24,  1.35s/it][Succeeded / Failed / Skipped / Total] 64 / 378 / 6 / 448:  45%|████▍     | 448/1000 [10:02<12:22,  1.34s/it][Succeeded / Failed / Skipped / Total] 64 / 378 / 6 / 448:  45%|████▍     | 449/1000 [10:02<12:19,  1.34s/it][Succeeded / Failed / Skipped / Total] 65 / 378 / 6 / 449:  45%|████▍     | 449/1000 [10:02<12:19,  1.34s/it][Succeeded / Failed / Skipped / Total] 65 / 379 / 6 / 450:  45%|████▌     | 450/1000 [10:04<12:18,  1.34s/it]Creates a new EventLoopGroup with the specified number of threads . --> [[[FAILED]]]

[[[[Adv]]]]: public static EventLoopGroup [[newEventLoopGroup]] ( int [[nThreads]] , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( [[nThreads]] , threadFactory ) : new NioEventLoopGroup ( [[nThreads]] , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup [[procedure]] ( int [[node]] , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( [[node]] , threadFactory ) : new NioEventLoopGroup ( [[node]] , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 444 ---------------------------------------------
Parses the remote IP address of the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[string]] ( final Channel [[selector]] ) { if ( null == [[selector]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[selector]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 445 ---------------------------------------------
Parses the remote address of a channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress remote = [[channel]] . remoteAddress ( ) ; return doParse ( remote != null ? remote . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[bus]] ( final Channel [[data]] ) { if ( null == [[data]] ) { return StringUtils . EMPTY ; } final SocketAddress remote = [[data]] . remoteAddress ( ) ; return doParse ( remote != null ? remote . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 446 ---------------------------------------------
Parses the local address of a channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[channel]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[load]] ( final Channel [[load]] ) { if ( null == [[load]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[load]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 447 ---------------------------------------------
Creates a RpcServerException from the given throwable and error message . --> Build RpcServerException from Exceptions --> Socre: 1.0

[[[[Adv]]]]: private RpcServerException [[createServerException]] ( Throwable [[t]] , String [[errMsg]] ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , [[t]] . getClass ( ) . getName ( ) , [[t]] . getMessage ( ) , [[errMsg]] ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( [[t]] . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException [[d]] ( Throwable [[exceptions]] , String [[ax]] ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , [[exceptions]] . getClass ( ) . getName ( ) , [[exceptions]] . getMessage ( ) , [[ax]] ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( [[exceptions]] . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 448 ---------------------------------------------
Parses the remote host name from the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[at]] ( final Channel [[function]] ) { if ( null == [[function]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[var]] = ( InetSocketAddress ) [[function]] . remoteAddress ( ) ; if ( [[var]] != null ) { return [[var]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 449 ---------------------------------------------
Adds a connection to the pool . --> Adds an access to the pool . --> Socre: 1.0

[[[[Adv]]]]: public void add ( Connection [[connection]] ) { markAccess ( ) ; if ( null == [[connection]] ) { return ; } boolean res = this . conns . addIfAbsent ( [[connection]] ) ; if ( res ) { [[connection]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void add ( Connection [[access]] ) { markAccess ( ) ; if ( null == [[access]] ) { return ; } boolean res = this . conns . addIfAbsent ( [[access]] ) ; if ( res ) { [[access]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 450 ---------------------------------------------
Parses the local IP address of the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String [[after]] ( final Channel [[address]] ) { if ( null == [[address]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[address]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 451 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 65 / 380 / 6 / 451:  45%|████▌     | 451/1000 [10:05<12:16,  1.34s/it][Succeeded / Failed / Skipped / Total] 65 / 380 / 6 / 451:  45%|████▌     | 452/1000 [10:05<12:14,  1.34s/it][Succeeded / Failed / Skipped / Total] 66 / 380 / 6 / 452:  45%|████▌     | 452/1000 [10:05<12:14,  1.34s/it][Succeeded / Failed / Skipped / Total] 66 / 381 / 6 / 453:  45%|████▌     | 453/1000 [10:06<12:12,  1.34s/it][Succeeded / Failed / Skipped / Total] 66 / 382 / 6 / 454:  45%|████▌     | 454/1000 [10:08<12:11,  1.34s/it][Succeeded / Failed / Skipped / Total] 66 / 382 / 6 / 454:  46%|████▌     | 455/1000 [10:09<12:09,  1.34s/it][Succeeded / Failed / Skipped / Total] 67 / 382 / 6 / 455:  46%|████▌     | 455/1000 [10:09<12:09,  1.34s/it]Sends a request to the remoting server and invokes the callback . --> [[[FAILED]]]

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int [[timeoutMillis]] ) { final InvokeFuture [[future]] = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( [[future]] ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture [[future]] = conn . removeInvokeFuture ( requestId ) ; if ( [[future]] != null ) { [[future]] . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; [[future]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , [[timeoutMillis]] , TimeUnit . MILLISECONDS ) ; [[future]] . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int [[select]] ) { final InvokeFuture [[list]] = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( [[list]] ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture [[list]] = conn . removeInvokeFuture ( requestId ) ; if ( [[list]] != null ) { [[list]] . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; [[list]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , [[select]] , TimeUnit . MILLISECONDS ) ; [[list]] . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 452 ---------------------------------------------
Returns the next available connection . --> Filters the connections . --> Socre: 1.0

[[[[Adv]]]]: public Connection [[get]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection [[filter]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 453 ---------------------------------------------
Parses the remote port from the channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[echo]] ( final Channel [[data]] ) { if ( null == [[data]] ) { return - 1 ; } final InetSocketAddress [[error]] = ( InetSocketAddress ) [[data]] . remoteAddress ( ) ; if ( [[error]] != null ) { return [[error]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 454 ---------------------------------------------
Parses the local port of the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress [[local]] = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( [[local]] != null ) { return [[local]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[net]] ( final Channel [[data]] ) { if ( null == [[data]] ) { return - 1 ; } final InetSocketAddress [[error]] = ( InetSocketAddress ) [[data]] . localAddress ( ) ; if ( [[error]] != null ) { return [[error]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 455 ---------------------------------------------
Start the connection monitor . --> Starts the connection monitor . --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task

[[[[Adv]]]]: public void [[buffer]] ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 456 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 67 / 383 / 6 / 456:  46%|████▌     | 456/1000 [10:09<12:07,  1.34s/it][Succeeded / Failed / Skipped / Total] 67 / 384 / 6 / 457:  46%|████▌     | 457/1000 [10:11<12:06,  1.34s/it][Succeeded / Failed / Skipped / Total] 67 / 384 / 6 / 457:  46%|████▌     | 458/1000 [10:12<12:04,  1.34s/it][Succeeded / Failed / Skipped / Total] 67 / 385 / 6 / 458:  46%|████▌     | 458/1000 [10:12<12:04,  1.34s/it][Succeeded / Failed / Skipped / Total] 68 / 385 / 6 / 459:  46%|████▌     | 459/1000 [10:12<12:02,  1.34s/it][Succeeded / Failed / Skipped / Total] 68 / 386 / 6 / 460:  46%|████▌     | 460/1000 [10:12<11:59,  1.33s/it][Succeeded / Failed / Skipped / Total] 68 / 386 / 6 / 460:  46%|████▌     | 461/1000 [10:13<11:56,  1.33s/it][Succeeded / Failed / Skipped / Total] 69 / 386 / 6 / 461:  46%|████▌     | 461/1000 [10:13<11:56,  1.33s/it][Succeeded / Failed / Skipped / Total] 70 / 386 / 6 / 462:  46%|████▌     | 462/1000 [10:15<11:57,  1.33s/it][Succeeded / Failed / Skipped / Total] 70 / 387 / 6 / 463:  46%|████▋     | 463/1000 [10:16<11:54,  1.33s/it][Succeeded / Failed / Skipped / Total] 70 / 387 / 6 / 463:  46%|████▋     | 464/1000 [10:16<11:52,  1.33s/it]Get custom serializer by class name . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String [[className]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[className]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[print]] ( String [[id]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[id]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 457 ---------------------------------------------
Get the custom serializer for the given command code . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode [[code]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[code]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[program]] ( CommandCode [[example]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[example]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 458 ---------------------------------------------
Parses a socket address to a host IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseSocketAddressToHostIp]] ( SocketAddress [[socketAddress]] ) { final InetSocketAddress [[addrs]] = ( InetSocketAddress ) [[socketAddress]] ; if ( [[addrs]] != null ) { InetAddress [[addr]] = [[addrs]] . getAddress ( ) ; if ( null != [[addr]] ) { return [[addr]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String [[add]] ( SocketAddress [[ii]] ) { final InetSocketAddress [[version]] = ( InetSocketAddress ) [[ii]] ; if ( [[version]] != null ) { InetAddress [[error]] = [[version]] . getAddress ( ) ; if ( null != [[error]] ) { return [[error]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 459 ---------------------------------------------
Remove a connection from the pool and try to close it . --> Remove an error from the list and try to close it . --> Socre: 1.0

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[connection]] ) { if ( null == [[connection]] ) { return ; } boolean [[res]] = this . conns . remove ( [[connection]] ) ; if ( [[res]] ) { [[connection]] . decreaseRef ( ) ; } if ( [[connection]] . noRef ( ) ) { [[connection]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[error]] ) { if ( null == [[error]] ) { return ; } boolean [[cause]] = this . conns . remove ( [[error]] ) ; if ( [[cause]] ) { [[error]] . decreaseRef ( ) ; } if ( [[error]] . noRef ( ) ) { [[error]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 460 ---------------------------------------------
Registers a custom serializer . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String [[className]] , CustomSerializer serializer ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[className]] , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[className]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[suppose]] ( String [[integer]] , CustomSerializer serializer ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[integer]] , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[integer]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 461 ---------------------------------------------
Initializes the write buffer water mark . --> The main method of this class . --> Socre: 1.0

[[[[Adv]]]]: private void [[initWriteBufferWaterMark]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void [[main]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 462 ---------------------------------------------
Validate UTF - 8 . --> Decodes a close frame as a string . --> Socre: 1.0

[[[[Adv]]]]: private void [[validateUtf8]] ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void [[string]] ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 463 ---------------------------------------------
Register a custom serializer for a command code . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode [[code]] , CustomSerializer serializer ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( [[code]] , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[code]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[end]] ( CommandCode [[line]] , CustomSerializer serializer ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( [[line]] , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[line]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 464 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 70 / 388 / 6 / 464:  46%|████▋     | 464/1000 [10:16<11:52,  1.33s/it][Succeeded / Failed / Skipped / Total] 71 / 388 / 6 / 465:  46%|████▋     | 465/1000 [10:16<11:49,  1.33s/it][Succeeded / Failed / Skipped / Total] 72 / 388 / 6 / 466:  47%|████▋     | 466/1000 [10:19<11:49,  1.33s/it][Succeeded / Failed / Skipped / Total] 72 / 388 / 6 / 466:  47%|████▋     | 467/1000 [10:19<11:47,  1.33s/it][Succeeded / Failed / Skipped / Total] 73 / 388 / 6 / 467:  47%|████▋     | 467/1000 [10:19<11:47,  1.33s/it][Succeeded / Failed / Skipped / Total] 74 / 388 / 6 / 468:  47%|████▋     | 468/1000 [10:21<11:47,  1.33s/it][Succeeded / Failed / Skipped / Total] 75 / 388 / 6 / 469:  47%|████▋     | 469/1000 [10:22<11:44,  1.33s/it][Succeeded / Failed / Skipped / Total] 75 / 388 / 6 / 469:  47%|████▋     | 470/1000 [10:24<11:43,  1.33s/it][Succeeded / Failed / Skipped / Total] 76 / 388 / 6 / 470:  47%|████▋     | 470/1000 [10:24<11:43,  1.33s/it][Succeeded / Failed / Skipped / Total] 77 / 388 / 6 / 471:  47%|████▋     | 471/1000 [10:24<11:41,  1.33s/it]Returns a FramedataImpl1 for the given opcode . --> [[[FAILED]]]

[[[[Adv]]]]: public static FramedataImpl1 [[get]] ( Opcode [[opcode]] ) { if ( [[opcode]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[opcode]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 [[end]] ( Opcode [[ends]] ) { if ( [[ends]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[ends]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 465 ---------------------------------------------
Returns true if the remote address is connected . --> Returns true if the given string is an array . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isConnected]] ( String [[remoteAddr]] ) { Url [[url]] = this . rpcRemoting . addressParser . parse ( [[remoteAddr]] ) ; return this . isConnected ( [[url]] ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[array]] ( String [[c]] ) { Url [[that]] = this . rpcRemoting . addressParser . parse ( [[c]] ) ; return this . isConnected ( [[that]] ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 466 ---------------------------------------------
Sets the code . --> Draws a line . --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int [[code]] ) { this . code = [[code]] ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[draw]] ( int [[line]] ) { this . code = [[line]] ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 467 ---------------------------------------------
Updates the payload based on the reason . --> Sends a date message . --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer [[buf]] = ByteBuffer . allocate ( 4 ) ; [[buf]] . putInt ( code ) ; [[buf]] . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( [[buf]] ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[date]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer [[send]] = ByteBuffer . allocate ( 4 ) ; [[send]] . putInt ( code ) ; [[send]] . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( [[send]] ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 468 ---------------------------------------------
Process a binary frame . --> Target websocket message . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[target]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 469 ---------------------------------------------
Translate payload size limit . --> Starts a new loop . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long [[length]] ) throws LimitExceededException { if ( [[length]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[length]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[length]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[length]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[start]] ( long [[loop]] ) throws LimitExceededException { if ( [[loop]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[loop]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[loop]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[loop]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 470 ---------------------------------------------
Check the packet size for a single frame . --> Draws a single frame . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckPacketSize]] ( int [[maxpacketsize]] , int realpacketsize ) throws IncompleteException { if ( [[maxpacketsize]] < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void [[draw]] ( int [[integer]] , int realpacketsize ) throws IncompleteException { if ( [[integer]] < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 471 ---------------------------------------------
Process a text frame . --> Match websocket message . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameText]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void [[match]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 472 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 77 / 389 / 6 / 472:  47%|████▋     | 472/1000 [10:24<11:38,  1.32s/it][Succeeded / Failed / Skipped / Total] 77 / 389 / 6 / 472:  47%|████▋     | 473/1000 [10:25<11:36,  1.32s/it][Succeeded / Failed / Skipped / Total] 78 / 389 / 6 / 473:  47%|████▋     | 473/1000 [10:25<11:36,  1.32s/it][Succeeded / Failed / Skipped / Total] 79 / 389 / 6 / 474:  47%|████▋     | 474/1000 [10:27<11:36,  1.32s/it][Succeeded / Failed / Skipped / Total] 79 / 390 / 6 / 475:  48%|████▊     | 475/1000 [10:28<11:34,  1.32s/it][Succeeded / Failed / Skipped / Total] 79 / 390 / 6 / 475:  48%|████▊     | 476/1000 [10:30<11:34,  1.32s/it][Succeeded / Failed / Skipped / Total] 79 / 391 / 6 / 476:  48%|████▊     | 476/1000 [10:30<11:34,  1.32s/it]Checks if the handshake contains the requested protocol . --> [[[FAILED]]]

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String [[requestedProtocol]] ) { for ( IProtocol [[knownProtocol]] : knownProtocols ) { if ( [[knownProtocol]] . acceptProvidedProtocol ( [[requestedProtocol]] ) ) { protocol = [[knownProtocol]] ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[header]] ( String [[domain]] ) { for ( IProtocol [[x]] : knownProtocols ) { if ( [[x]] . acceptProvidedProtocol ( [[domain]] ) ) { protocol = [[x]] ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 473 ---------------------------------------------
Logs a runtime exception during websocket message . --> This method is called when a websocket message is empty . --> Socre: 1.0

[[[[Adv]]]]: private void [[logRuntimeException]] ( WebSocketImpl [[webSocketImpl]] , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketError ( [[webSocketImpl]] , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void [[empty]] ( WebSocketImpl [[a]] , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; [[a]] . getWebSocketListener ( ) . onWebsocketError ( [[a]] , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 474 ---------------------------------------------
Writes a batch of data to the given channel . --> Example of how to write data to a channel . --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[batch]] ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed

[[[[Adv]]]]: public static boolean [[example]] ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 475 ---------------------------------------------
Process a close frame and check if it is a continuous frame . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processFrameContinuousAndNonFin]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void [[begin]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 476 ---------------------------------------------
Processes a close frame . If the previous continuous frame sequence is not complete throws an exception . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[execute]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 477 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 79 / 392 / 6 / 477:  48%|████▊     | 477/1000 [10:31<11:32,  1.32s/it][Succeeded / Failed / Skipped / Total] 80 / 392 / 6 / 478:  48%|████▊     | 478/1000 [10:32<11:30,  1.32s/it][Succeeded / Failed / Skipped / Total] 80 / 392 / 6 / 478:  48%|████▊     | 479/1000 [10:32<11:28,  1.32s/it][Succeeded / Failed / Skipped / Total] 81 / 392 / 6 / 479:  48%|████▊     | 479/1000 [10:32<11:28,  1.32s/it][Succeeded / Failed / Skipped / Total] 81 / 393 / 6 / 480:  48%|████▊     | 480/1000 [10:32<11:25,  1.32s/it][Succeeded / Failed / Skipped / Total] 82 / 393 / 6 / 481:  48%|████▊     | 481/1000 [10:34<11:25,  1.32s/it][Succeeded / Failed / Skipped / Total] 82 / 393 / 6 / 481:  48%|████▊     | 482/1000 [10:35<11:22,  1.32s/it][Succeeded / Failed / Skipped / Total] 83 / 393 / 6 / 482:  48%|████▊     | 482/1000 [10:35<11:22,  1.32s/it]Process a continuous frame . --> [[[FAILED]]]

[[[[Adv]]]]: private void processFrameIsFin ( WebSocketImpl [[webSocketImpl]] , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void processFrameIsFin ( WebSocketImpl [[profile]] , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[profile]] . getWebSocketListener ( ) . onWebsocketMessage ( [[profile]] , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[profile]] , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[profile]] . getWebSocketListener ( ) . onWebsocketMessage ( [[profile]] , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[profile]] , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 478 ---------------------------------------------
Generate the final key . --> Returns the base64 - encoded value of the given accept header . --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String [[in]] ) { String [[seckey]] = [[in]] . trim ( ) ; String acc = [[seckey]] + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[accept]] ( String [[accept]] ) { String [[ip]] = [[accept]] . trim ( ) ; String acc = [[ip]] + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 479 ---------------------------------------------
Translates an HTTP handshake line into a handshake builder . --> Utility method to create a HandshakeBuilder . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpServer]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder [[utility]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 480 ---------------------------------------------
Checks if the buffer size is too large . If so clears the buffer . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long [[totalSize]] = getByteBufferListSize ( ) ; if ( [[totalSize]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[totalSize]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[read]] ( ) throws LimitExceededException { long [[window]] = getByteBufferListSize ( ) ; if ( [[window]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[window]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 481 ---------------------------------------------
Translate HTTP client handshake line to handshake builder . --> Utility method to create a HandshakeBuilder . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpClient]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder [[utility]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 482 ---------------------------------------------
Decodes data from the socket buffer . --> Process a socket buffer . --> Socre: 1.0

[[[[Adv]]]]: public void [[decode]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void [[call]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
[Succeeded / Failed / Skipped / Total] 84 / 393 / 6 / 483:  48%|████▊     | 483/1000 [10:35<11:20,  1.32s/it][Succeeded / Failed / Skipped / Total] 85 / 393 / 6 / 484:  48%|████▊     | 484/1000 [10:35<11:17,  1.31s/it][Succeeded / Failed / Skipped / Total] 85 / 393 / 6 / 484:  48%|████▊     | 485/1000 [10:36<11:16,  1.31s/it][Succeeded / Failed / Skipped / Total] 85 / 394 / 6 / 485:  48%|████▊     | 485/1000 [10:36<11:16,  1.31s/it][Succeeded / Failed / Skipped / Total] 86 / 394 / 6 / 486:  49%|████▊     | 486/1000 [10:37<11:14,  1.31s/it][Succeeded / Failed / Skipped / Total] 87 / 394 / 6 / 487:  49%|████▊     | 487/1000 [10:38<11:12,  1.31s/it][Succeeded / Failed / Skipped / Total] 87 / 394 / 6 / 487:  49%|████▉     | 488/1000 [10:39<11:10,  1.31s/it][Succeeded / Failed / Skipped / Total] 87 / 395 / 6 / 488:  49%|████▉     | 488/1000 [10:39<11:10,  1.31s/it][Succeeded / Failed / Skipped / Total] 87 / 396 / 6 / 489:  49%|████▉     | 489/1000 [10:39<11:08,  1.31s/it]--------------------------------------------- Result 483 ---------------------------------------------
Closes the connection due to a wrong handshake . --> Apply invalid data exception to response . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToWrongHandshake]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void [[apply]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 484 ---------------------------------------------
Closes the connection due to an internal server error . --> Fixes an exception . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[fix]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 485 ---------------------------------------------
Gets the payload from the byte buffer list . --> [[[FAILED]]]

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer [[resultingByteBuffer]] ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; [[resultingByteBuffer]] = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { [[resultingByteBuffer]] . put ( buffer ) ; } } [[resultingByteBuffer]] . flip ( ) ; return [[resultingByteBuffer]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[filter]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer [[let]] ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; [[let]] = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { [[let]] . put ( buffer ) ; } } [[let]] . flip ( ) ; return [[let]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 486 ---------------------------------------------
Process a close frame . --> Handles an exception . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameClosing]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void [[exception]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 487 ---------------------------------------------
Resets the connection to a new state . --> Starts the connection . --> Socre: 1.0

[[[[Adv]]]]: private void [[reset]] ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect

[[[[Adv]]]]: private void [[begin]] ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 488 ---------------------------------------------
Returns the total size of the byte buffer list . --> [[[FAILED]]]

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long [[totalSize]] = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[buffer]] : byteBufferList ) { [[totalSize]] += [[buffer]] . limit ( ) ; } } return [[totalSize]] ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[delay]] ( ) { long [[pause]] = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[list]] : byteBufferList ) { [[pause]] += [[list]] . limit ( ) ; } } return [[pause]] ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 489 ---------------------------------------------
Sends a string to the server . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[send]] ( String [[text]] ) { if ( [[text]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( [[text]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[enter]] ( String [[client]] ) { if ( [[client]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[enter]] ( draft . createFrames ( [[client]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 490 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 87 / 397 / 6 / 490:  49%|████▉     | 490/1000 [10:39<11:05,  1.31s/it][Succeeded / Failed / Skipped / Total] 87 / 397 / 6 / 490:  49%|████▉     | 491/1000 [10:39<11:03,  1.30s/it][Succeeded / Failed / Skipped / Total] 88 / 397 / 6 / 491:  49%|████▉     | 491/1000 [10:39<11:03,  1.30s/it][Succeeded / Failed / Skipped / Total] 88 / 398 / 6 / 492:  49%|████▉     | 492/1000 [10:40<11:01,  1.30s/it][Succeeded / Failed / Skipped / Total] 89 / 398 / 6 / 493:  49%|████▉     | 493/1000 [10:41<11:00,  1.30s/it][Succeeded / Failed / Skipped / Total] 89 / 398 / 6 / 493:  49%|████▉     | 494/1000 [10:42<10:58,  1.30s/it][Succeeded / Failed / Skipped / Total] 90 / 398 / 6 / 494:  49%|████▉     | 494/1000 [10:42<10:58,  1.30s/it][Succeeded / Failed / Skipped / Total] 90 / 399 / 6 / 495:  50%|████▉     | 495/1000 [10:46<10:59,  1.31s/it]Starts the read thread for the WebSocket client . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[foo]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 491 ---------------------------------------------
Sends a handshake to the engine . --> Starts a new line . --> Socre: 1.0

[[[[Adv]]]]: private void [[sendHandshake]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void [[line]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 492 ---------------------------------------------
Generate the HTTP response according to the given error code . --> [[[FAILED]]]

[[[[Adv]]]]: private ByteBuffer [[generateHttpResponseDueToError]] ( int errorCode ) { String errorCodeDescription ; switch ( errorCode ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer [[list]] ( int errorCode ) { String errorCodeDescription ; switch ( errorCode ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 493 ---------------------------------------------
Stops the connection lost timer . --> Called when a new line is received . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[line]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 494 ---------------------------------------------
Starts the connection lost timer . --> Called when a new line is received . --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[line]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 495 ---------------------------------------------
Cancel connection lost checker timer . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[closure]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 496 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 90 / 400 / 6 / 496:  50%|████▉     | 496/1000 [10:48<10:58,  1.31s/it][Succeeded / Failed / Skipped / Total] 90 / 400 / 6 / 496:  50%|████▉     | 497/1000 [10:48<10:56,  1.31s/it][Succeeded / Failed / Skipped / Total] 90 / 401 / 6 / 497:  50%|████▉     | 497/1000 [10:48<10:56,  1.31s/it][Succeeded / Failed / Skipped / Total] 90 / 402 / 6 / 498:  50%|████▉     | 498/1000 [10:49<10:54,  1.30s/it][Succeeded / Failed / Skipped / Total] 91 / 402 / 6 / 499:  50%|████▉     | 499/1000 [10:50<10:52,  1.30s/it][Succeeded / Failed / Skipped / Total] 91 / 402 / 6 / 499:  50%|█████     | 500/1000 [10:50<10:50,  1.30s/it][Succeeded / Failed / Skipped / Total] 91 / 402 / 7 / 500:  50%|█████     | 500/1000 [10:50<10:50,  1.30s/it][Succeeded / Failed / Skipped / Total] 91 / 403 / 7 / 501:  50%|█████     | 501/1000 [10:50<10:48,  1.30s/it][Succeeded / Failed / Skipped / Total] 91 / 403 / 8 / 502:  50%|█████     | 502/1000 [10:50<10:45,  1.30s/it][Succeeded / Failed / Skipped / Total] 91 / 403 / 8 / 502:  50%|█████     | 503/1000 [10:51<10:43,  1.30s/it][Succeeded / Failed / Skipped / Total] 92 / 403 / 8 / 503:  50%|█████     | 503/1000 [10:51<10:43,  1.30s/it]Returns the port of the connection . --> [[[FAILED]]]

[[[[Adv]]]]: private int getPort ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String [[scheme]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[scheme]] ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int getPort ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String [[bit]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[bit]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[bit]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[bit]] ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 497 ---------------------------------------------
Sends a ping frame . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void onWebsocketPing ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void onWebsocketPing ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 498 ---------------------------------------------
Sets the connection lost timeout . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[combined]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 499 ---------------------------------------------
Restarts the timer that detects connections that have been lost . --> Waits for all connections to be closed . --> Socre: 1.0

[[[[Adv]]]]: private void [[restartConnectionLostTimer]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void [[wait]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 500 ---------------------------------------------
Writes data to the socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doWrite ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 501 ---------------------------------------------
On websocket handshake received as server . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[onWebsocketHandshakeReceivedAsServer]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[php]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 502 ---------------------------------------------
Ensure single thread . --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 503 ---------------------------------------------
Read additional data from the socket . --> Add a new connection to the queue . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAdditionalRead]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void [[add]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 504 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 93 / 403 / 8 / 504:  50%|█████     | 504/1000 [10:51<10:41,  1.29s/it][Succeeded / Failed / Skipped / Total] 93 / 404 / 8 / 505:  50%|█████     | 505/1000 [10:52<10:39,  1.29s/it][Succeeded / Failed / Skipped / Total] 93 / 404 / 8 / 505:  51%|█████     | 506/1000 [10:52<10:36,  1.29s/it][Succeeded / Failed / Skipped / Total] 94 / 404 / 8 / 506:  51%|█████     | 506/1000 [10:52<10:36,  1.29s/it][Succeeded / Failed / Skipped / Total] 94 / 405 / 8 / 507:  51%|█████     | 507/1000 [10:52<10:34,  1.29s/it][Succeeded / Failed / Skipped / Total] 94 / 406 / 8 / 508:  51%|█████     | 508/1000 [10:53<10:32,  1.29s/it][Succeeded / Failed / Skipped / Total] 94 / 406 / 8 / 508:  51%|█████     | 509/1000 [10:53<10:30,  1.28s/it]Accepts a websocket connection . --> Calls the WebSocket handler . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAccept]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation

[[[[Adv]]]]: private void [[call]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 505 ---------------------------------------------
Returns the port of the server . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getPort]] ( ) { int [[port]] = getAddress ( ) . getPort ( ) ; if ( [[port]] == 0 && server != null ) { [[port]] = server . socket ( ) . getLocalPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[client]] ( ) { int [[address]] = getAddress ( ) . getPort ( ) ; if ( [[address]] == 0 && server != null ) { [[address]] = server . socket ( ) . getLocalPort ( ) ; } return [[address]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 506 ---------------------------------------------
Do a read . --> Calls the callback . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doRead]] ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean [[call]] ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 507 ---------------------------------------------
Stops the timer and waits for it to finish . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[stop]] ( int [[timeout]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void [[end]] ( int [[string]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 508 ---------------------------------------------
Executes the connection lost detection . --> [[[FAILED]]]

[[[[Adv]]]]: private void executeConnectionLostDetection ( WebSocket [[webSocket]] , long minimumPongTime ) { if ( ! ( [[webSocket]] instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) [[webSocket]] ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void executeConnectionLostDetection ( WebSocket [[method]] , long minimumPongTime ) { if ( ! ( [[method]] instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) [[method]] ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 509 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 95 / 406 / 8 / 509:  51%|█████     | 509/1000 [10:53<10:30,  1.28s/it][Succeeded / Failed / Skipped / Total] 96 / 406 / 8 / 510:  51%|█████     | 510/1000 [10:54<10:28,  1.28s/it][Succeeded / Failed / Skipped / Total] 97 / 406 / 8 / 511:  51%|█████     | 511/1000 [10:55<10:26,  1.28s/it][Succeeded / Failed / Skipped / Total] 97 / 406 / 8 / 511:  51%|█████     | 512/1000 [10:56<10:25,  1.28s/it][Succeeded / Failed / Skipped / Total] 98 / 406 / 8 / 512:  51%|█████     | 512/1000 [10:56<10:25,  1.28s/it][Succeeded / Failed / Skipped / Total] 98 / 407 / 8 / 513:  51%|█████▏    | 513/1000 [10:57<10:24,  1.28s/it][Succeeded / Failed / Skipped / Total] 98 / 408 / 8 / 514:  51%|█████▏    | 514/1000 [11:00<10:24,  1.29s/it][Succeeded / Failed / Skipped / Total] 98 / 408 / 8 / 514:  52%|█████▏    | 515/1000 [11:00<10:22,  1.28s/it][Succeeded / Failed / Skipped / Total] 99 / 408 / 8 / 515:  52%|█████▏    | 515/1000 [11:00<10:22,  1.28s/it][Succeeded / Failed / Skipped / Total] 99 / 409 / 8 / 516:  52%|█████▏    | 516/1000 [11:02<10:21,  1.28s/it]Do server shutdown . --> Stops the connectionLostTimer and stops all worker threads . --> Socre: 1.0

[[[[Adv]]]]: private void [[doServerShutdown]] ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown

[[[[Adv]]]]: private void [[add]] ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 510 ---------------------------------------------
Broadcast a message to a collection of clients . --> Broadcasts the given data using the specified format . --> Socre: 1.0

[[[[Adv]]]]: public void broadcast ( byte [ ] data , Collection < WebSocket > [[clients]] ) { if ( data == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( data ) , [[clients]] ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void broadcast ( byte [ ] data , Collection < WebSocket > [[format]] ) { if ( data == null || [[format]] == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( data ) , [[format]] ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 511 ---------------------------------------------
Broadcast data to clients . --> Capture data from a list of clients . --> Socre: 1.0

[[[[Adv]]]]: private void [[doBroadcast]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void [[capture]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 512 ---------------------------------------------
Returns the socket associated with the given websocket connection . --> Exposed for testing . --> Socre: 1.0

[[[[Adv]]]]: private Socket [[getSocket]] ( WebSocket [[conn]] ) { WebSocketImpl impl = ( WebSocketImpl ) [[conn]] ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket [[exploit]] ( WebSocket [[box]] ) { WebSocketImpl impl = ( WebSocketImpl ) [[box]] ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 513 ---------------------------------------------
Starts the API . --> [[[FAILED]]]

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[z]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 514 ---------------------------------------------
Executes the given consumer in a transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > [[block]] ) { [[withTransaction]] ( em -> { [[block]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[accept]] ( Consumer < EntityManager > [[em]] ) { [[accept]] ( em -> { [[em]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 515 ---------------------------------------------
Broadcasts a text message to a collection of clients . --> Broadcasts the given presentation with the given xml . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( String [[text]] , Collection < WebSocket > [[clients]] ) { if ( [[text]] == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[text]] , [[clients]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void [[call]] ( String [[presentation]] , Collection < WebSocket > [[xml]] ) { if ( [[presentation]] == null || [[xml]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[presentation]] , [[xml]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 516 ---------------------------------------------
Returns an EntityManager with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( String name ) { EntityManagerFactory emf = emfs . get ( name ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager [[hello]] ( String name ) { EntityManagerFactory emf = emfs . get ( name ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 517 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 100 / 409 / 8 / 517:  52%|█████▏    | 517/1000 [11:02<10:19,  1.28s/it][Succeeded / Failed / Skipped / Total] 100 / 409 / 8 / 517:  52%|█████▏    | 518/1000 [11:02<10:16,  1.28s/it][Succeeded / Failed / Skipped / Total] 100 / 410 / 8 / 518:  52%|█████▏    | 518/1000 [11:02<10:16,  1.28s/it][Succeeded / Failed / Skipped / Total] 101 / 410 / 8 / 519:  52%|█████▏    | 519/1000 [11:03<10:14,  1.28s/it][Succeeded / Failed / Skipped / Total] 102 / 410 / 8 / 520:  52%|█████▏    | 520/1000 [11:03<10:12,  1.28s/it][Succeeded / Failed / Skipped / Total] 102 / 410 / 8 / 520:  52%|█████▏    | 521/1000 [11:07<10:13,  1.28s/it][Succeeded / Failed / Skipped / Total] 102 / 411 / 8 / 521:  52%|█████▏    | 521/1000 [11:07<10:13,  1.28s/it][Succeeded / Failed / Skipped / Total] 102 / 412 / 8 / 522:  52%|█████▏    | 522/1000 [11:11<10:14,  1.29s/it][Succeeded / Failed / Skipped / Total] 102 / 413 / 8 / 523:  52%|█████▏    | 523/1000 [11:11<10:12,  1.28s/it][Succeeded / Failed / Skipped / Total] 102 / 413 / 8 / 523:  52%|█████▏    | 524/1000 [11:11<10:10,  1.28s/it]Convert the given arguments to a scala buffer . --> Loops an exception . --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... [[args]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[args]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[loop]] ( final Object ... [[ex]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[ex]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 518 ---------------------------------------------
Setup selector and server thread . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[doSetupSelectorAndServerThread]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean [[cache]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 519 ---------------------------------------------
Fills the draft frames if it doesn t already exist . --> Ends a frame if it doesn t exist . --> Socre: 1.0

[[[[Adv]]]]: private void [[fillFrames]] ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String [[sData]] , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( [[sData]] != null ) { frames = draft . createFrames ( [[sData]] , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void [[end]] ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String [[canvas]] , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( [[canvas]] != null ) { frames = draft . createFrames ( [[canvas]] , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 520 ---------------------------------------------
Transfers the source byte buffer to the destination byte buffer returning the number of bytes transferred . --> Copies the contents of the source buffer into the destination buffer and returns the number of bytes that can be written . --> Socre: 1.0

[[[[Adv]]]]: public static int [[transferByteBuffer]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int [[das]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 521 ---------------------------------------------
Wraps the given arguments to a list if they are not already . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[wrapArgsToListIfNeeded]] ( final T ... [[args]] ) { List < T > [[out]] ; if ( [[args]] != null && [[args]] . length == 1 && [[args]] [ 0 ] instanceof List ) { [[out]] = ( List < T > ) [[args]] [ 0 ] ; } else { [[out]] = Arrays . asList ( [[args]] ) ; } return [[out]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[unless]] ( final T ... [[example]] ) { List < T > [[itself]] ; if ( [[example]] != null && [[example]] . length == 1 && [[example]] [ 0 ] instanceof List ) { [[itself]] = ( List < T > ) [[example]] [ 0 ] ; } else { [[itself]] = Arrays . asList ( [[example]] ) ; } return [[itself]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 522 ---------------------------------------------
Sets the language of the result . --> [[[FAILED]]]

[[[[Adv]]]]: public Result [[setLang]] ( Result [[result]] , Lang [[lang]] ) { return messages . setLang ( [[result]] . asScala ( ) , [[lang]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result [[declaration]] ( Result [[generator]] , Lang [[cookie]] ) { return messages . setLang ( [[generator]] . asScala ( ) , [[cookie]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 523 ---------------------------------------------
Returns true if the key is defined at the given location --> [[[FAILED]]]

[[[[Adv]]]]: public Boolean [[isDefinedAt]] ( play . api . i18n . Lang [[lang]] , String key ) { return messages . isDefinedAt ( key , [[lang]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean [[field]] ( play . api . i18n . Lang [[net]] , String key ) { return messages . isDefinedAt ( key , [[net]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 524 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 102 / 414 / 8 / 524:  52%|█████▏    | 524/1000 [11:11<10:10,  1.28s/it][Succeeded / Failed / Skipped / Total] 102 / 415 / 8 / 525:  52%|█████▎    | 525/1000 [11:12<10:08,  1.28s/it][Succeeded / Failed / Skipped / Total] 102 / 416 / 8 / 526:  53%|█████▎    | 526/1000 [11:14<10:08,  1.28s/it][Succeeded / Failed / Skipped / Total] 102 / 416 / 8 / 526:  53%|█████▎    | 527/1000 [11:14<10:05,  1.28s/it][Succeeded / Failed / Skipped / Total] 102 / 417 / 8 / 527:  53%|█████▎    | 527/1000 [11:14<10:05,  1.28s/it][Succeeded / Failed / Skipped / Total] 102 / 418 / 8 / 528:  53%|█████▎    | 528/1000 [11:15<10:04,  1.28s/it][Succeeded / Failed / Skipped / Total] 103 / 418 / 8 / 529:  53%|█████▎    | 529/1000 [11:18<10:04,  1.28s/it][Succeeded / Failed / Skipped / Total] 103 / 418 / 8 / 529:  53%|█████▎    | 530/1000 [11:18<10:01,  1.28s/it][Succeeded / Failed / Skipped / Total] 103 / 419 / 8 / 530:  53%|█████▎    | 530/1000 [11:18<10:01,  1.28s/it][Succeeded / Failed / Skipped / Total] 104 / 419 / 8 / 531:  53%|█████▎    | 531/1000 [11:18<09:59,  1.28s/it][Succeeded / Failed / Skipped / Total] 104 / 420 / 8 / 532:  53%|█████▎    | 532/1000 [11:19<09:58,  1.28s/it][Succeeded / Failed / Skipped / Total] 104 / 420 / 8 / 532:  53%|█████▎    | 533/1000 [11:20<09:56,  1.28s/it][Succeeded / Failed / Skipped / Total] 104 / 421 / 8 / 533:  53%|█████▎    | 533/1000 [11:20<09:56,  1.28s/it][Succeeded / Failed / Skipped / Total] 104 / 422 / 8 / 534:  53%|█████▎    | 534/1000 [11:20<09:53,  1.27s/it]Returns the preferred messages for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Http . RequestHeader [[request]] ) { play . api . i18n . Messages [[msgs]] = messages . preferred ( [[request]] ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages [[edit]] ( Http . RequestHeader [[b]] ) { play . api . i18n . Messages [[alt]] = messages . preferred ( [[b]] ) ; return new MessagesImpl ( new Lang ( [[alt]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 525 ---------------------------------------------
Returns a copy of this binder s bindings for the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[bindings]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self [[delegate]] ( GuiceableModule ... [[max]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[max]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 526 ---------------------------------------------
Create a new instance of ReplaceME0 . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[REPLACEME0]] ( play . api . inject . Binding < ? > ... [[REPLACEME0]] ) { return [[REPLACEME0]] ( Guiceable . bindings ( [[REPLACEME0]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self [[text]] ( play . api . inject . Binding < ? > ... [[text]] ) { return [[text]] ( Guiceable . bindings ( [[text]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 527 ---------------------------------------------
Binds this player to a set of modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... [[modules]] ) { return bindings ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... [[net]] ) { return bindings ( Guiceable . [[net]] ( [[net]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 528 ---------------------------------------------
Returns the localized message for the given key and arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public String get ( play . api . i18n . Lang [[lang]] , String key , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( key , scalaArgs , [[lang]] ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang [[h]] , String key , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( key , scalaArgs , [[h]] ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 529 ---------------------------------------------
Sets the overrides of this instance with the specified modules . --> Sets the name of this instance with the given environment --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Module ... [[modules]] ) { return [[overrides]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self [[name]] ( play . api . inject . Module ... [[environment]] ) { return [[name]] ( Guiceable . [[environment]] ( [[environment]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 530 ---------------------------------------------
Returns a copy of this message with the languages preferred by the given collection of languages . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Collection < Lang > candidates ) { Seq < Lang > [[cs]] = Scala . asScala ( candidates ) ; play . api . i18n . Messages [[msgs]] = messages . preferred ( ( Seq ) [[cs]] ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages [[over]] ( Collection < Lang > candidates ) { Seq < Lang > [[candidate]] = Scala . asScala ( candidates ) ; play . api . i18n . Messages [[source]] = messages . preferred ( ( Seq ) [[candidate]] ) ; return new MessagesImpl ( new Lang ( [[source]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 531 ---------------------------------------------
Overrides this instance with the given bindings . --> Sets the name of this player with the given status --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[overrides]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self [[name]] ( play . api . inject . Binding < ? > ... [[status]] ) { return [[name]] ( Guiceable . [[status]] ( [[status]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 532 ---------------------------------------------
Executes the given request and returns the result . --> [[[FAILED]]]

[[[[Adv]]]]: public CompletionStage < Result > [[call]] ( Request [[req]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > [[log]] ( Request [[error]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 533 ---------------------------------------------
Returns a copy of this builder with the specified overrides . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[overrides]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self [[delegate]] ( GuiceableModule ... [[domain]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[domain]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 534 ---------------------------------------------
Returns the localized message for the given language . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang [[lang]] , List < String > [[keys]] , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( [[keys]] ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , [[lang]] ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String [[play]] ( play . api . i18n . Lang [[name]] , List < String > [[length]] , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( [[length]] ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , [[name]] ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 535 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 104 / 423 / 8 / 535:  54%|█████▎    | 535/1000 [11:20<09:51,  1.27s/it][Succeeded / Failed / Skipped / Total] 104 / 423 / 8 / 535:  54%|█████▎    | 536/1000 [11:20<09:49,  1.27s/it][Succeeded / Failed / Skipped / Total] 105 / 423 / 8 / 536:  54%|█████▎    | 536/1000 [11:21<09:49,  1.27s/it][Succeeded / Failed / Skipped / Total] 105 / 424 / 8 / 537:  54%|█████▎    | 537/1000 [11:21<09:47,  1.27s/it][Succeeded / Failed / Skipped / Total] 106 / 424 / 8 / 538:  54%|█████▍    | 538/1000 [11:21<09:45,  1.27s/it][Succeeded / Failed / Skipped / Total] 106 / 424 / 8 / 538:  54%|█████▍    | 539/1000 [11:22<09:43,  1.27s/it][Succeeded / Failed / Skipped / Total] 106 / 425 / 8 / 539:  54%|█████▍    | 539/1000 [11:22<09:43,  1.27s/it][Succeeded / Failed / Skipped / Total] 106 / 426 / 8 / 540:  54%|█████▍    | 540/1000 [11:26<09:44,  1.27s/it][Succeeded / Failed / Skipped / Total] 106 / 427 / 8 / 541:  54%|█████▍    | 541/1000 [11:26<09:42,  1.27s/it][Succeeded / Failed / Skipped / Total] 106 / 427 / 8 / 541:  54%|█████▍    | 542/1000 [11:26<09:40,  1.27s/it][Succeeded / Failed / Skipped / Total] 106 / 428 / 8 / 542:  54%|█████▍    | 542/1000 [11:26<09:40,  1.27s/it][Succeeded / Failed / Skipped / Total] 106 / 429 / 8 / 543:  54%|█████▍    | 543/1000 [11:27<09:38,  1.27s/it][Succeeded / Failed / Skipped / Total] 106 / 430 / 8 / 544:  54%|█████▍    | 544/1000 [11:28<09:37,  1.27s/it][Succeeded / Failed / Skipped / Total] 106 / 430 / 8 / 544:  55%|█████▍    | 545/1000 [11:32<09:37,  1.27s/it]Gets the existing file for the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > [[getExistingFile]] ( String [[relativePath]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[relativePath]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > [[format]] ( String [[a]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[a]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 536 ---------------------------------------------
Creates a tuple from two values . --> Static factory method for creating dynamic values . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B > [[Tuple]] < A , B > [[Tuple]] ( A a , B b ) { return new [[Tuple]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < A , B > [[dynamic]] < A , B > [[dynamic]] ( A a , B b ) { return new [[dynamic]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 537 ---------------------------------------------
Returns a copy of this binding in the specified scope . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[value]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 538 ---------------------------------------------
Creates a tuple with five elements . --> Static factory method for creating an example . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B , C , D , E > [[Tuple5]] < A , B , C , D , E > [[Tuple5]] ( A a , B b , C c , D d , E e ) { return new [[Tuple5]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , C , D , E > [[example]] < A , B , C , D , E > [[example]] ( A a , B b , C c , D d , E e ) { return new [[example]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 539 ---------------------------------------------
Disable the given module classes . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... [[moduleClasses]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[moduleClasses]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[code]] ( Class < ? > ... [[load]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[load]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 540 ---------------------------------------------
Adds a constraint validator for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 541 ---------------------------------------------
Creates a new instance of the given key . --> [[[FAILED]]]

[[[[Adv]]]]: private < [[T]] extends ConstraintValidator < ? , ? > > [[T]] newInstance ( Class < [[T]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < [[c]] extends ConstraintValidator < ? , ? > > [[c]] newInstance ( Class < [[c]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 542 ---------------------------------------------
Create a ByteString from a String --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String callbackName ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[program]] ( String callbackName ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 543 ---------------------------------------------
Create a flow from json . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > json ( String [[callbackName]] ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > json ( String [[time]] ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( [[time]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 544 ---------------------------------------------
Converts an execution context to an executor . --> [[[FAILED]]]

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext [[ec]] ) { ExecutionContext prepared = [[ec]] . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[prepare]] ( ExecutionContext [[cheney]] ) { ExecutionContext prepared = [[cheney]] . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 545 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 106 / 431 / 8 / 545:  55%|█████▍    | 545/1000 [11:32<09:37,  1.27s/it][Succeeded / Failed / Skipped / Total] 106 / 432 / 8 / 546:  55%|█████▍    | 546/1000 [11:32<09:35,  1.27s/it][Succeeded / Failed / Skipped / Total] 106 / 433 / 8 / 547:  55%|█████▍    | 547/1000 [11:33<09:34,  1.27s/it][Succeeded / Failed / Skipped / Total] 106 / 433 / 8 / 547:  55%|█████▍    | 548/1000 [11:34<09:32,  1.27s/it][Succeeded / Failed / Skipped / Total] 106 / 434 / 8 / 548:  55%|█████▍    | 548/1000 [11:34<09:32,  1.27s/it][Succeeded / Failed / Skipped / Total] 106 / 435 / 8 / 549:  55%|█████▍    | 549/1000 [11:35<09:31,  1.27s/it][Succeeded / Failed / Skipped / Total] 106 / 436 / 8 / 550:  55%|█████▌    | 550/1000 [11:35<09:28,  1.26s/it][Succeeded / Failed / Skipped / Total] 106 / 436 / 8 / 550:  55%|█████▌    | 551/1000 [11:36<09:27,  1.26s/it][Succeeded / Failed / Skipped / Total] 106 / 437 / 8 / 551:  55%|█████▌    | 551/1000 [11:36<09:27,  1.26s/it]Creates a new JPAConfig instance with the specified persistence units . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String n1 , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig [[format]] ( String n1 , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 546 ---------------------------------------------
Creates a new JPAConfig instance with the specified name and persistence unit . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig of ( String [[name]] , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[name]] , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig of ( String [[format]] , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[format]] , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 547 ---------------------------------------------
Handles a bad request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader [[request]] , String [[message]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[request]] . method ( ) , [[request]] . uri ( ) , [[message]] , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[program]] ( RequestHeader [[image]] , String [[foo]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[image]] . method ( ) , [[image]] . uri ( ) , [[foo]] , [[image]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 548 ---------------------------------------------
Creates a new JPAConfig from a map of persistence units . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[from]] ( Map < String , String > [[map]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : [[map]] . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig [[build]] ( Map < String , String > [[header]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : [[header]] . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 549 ---------------------------------------------
Handles a 403 forbidden page . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onForbidden]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > [[after]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 550 ---------------------------------------------
Handles 404 Not Found event . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onNotFound ( RequestHeader [[request]] , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , [[request]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[request]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > onNotFound ( RequestHeader [[f]] , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[f]] . method ( ) , [[f]] . uri ( ) , [[f]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[f]] . method ( ) , [[f]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[f]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 551 ---------------------------------------------
Called when a client error occurs . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onClientError]] ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[by]] ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 552 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 106 / 438 / 8 / 552:  55%|█████▌    | 552/1000 [11:38<09:27,  1.27s/it][Succeeded / Failed / Skipped / Total] 106 / 439 / 8 / 553:  55%|█████▌    | 553/1000 [11:40<09:26,  1.27s/it][Succeeded / Failed / Skipped / Total] 106 / 439 / 8 / 553:  55%|█████▌    | 554/1000 [11:40<09:24,  1.26s/it][Succeeded / Failed / Skipped / Total] 106 / 440 / 8 / 554:  55%|█████▌    | 554/1000 [11:40<09:24,  1.26s/it][Succeeded / Failed / Skipped / Total] 106 / 441 / 8 / 555:  56%|█████▌    | 555/1000 [11:41<09:22,  1.26s/it][Succeeded / Failed / Skipped / Total] 106 / 442 / 8 / 556:  56%|█████▌    | 556/1000 [11:42<09:21,  1.26s/it][Succeeded / Failed / Skipped / Total] 106 / 442 / 8 / 556:  56%|█████▌    | 557/1000 [11:42<09:18,  1.26s/it][Succeeded / Failed / Skipped / Total] 106 / 443 / 8 / 557:  56%|█████▌    | 557/1000 [11:42<09:18,  1.26s/it][Succeeded / Failed / Skipped / Total] 107 / 443 / 8 / 558:  56%|█████▌    | 558/1000 [11:45<09:18,  1.26s/it][Succeeded / Failed / Skipped / Total] 107 / 444 / 8 / 559:  56%|█████▌    | 559/1000 [11:45<09:16,  1.26s/it][Succeeded / Failed / Skipped / Total] 107 / 444 / 8 / 559:  56%|█████▌    | 560/1000 [11:48<09:16,  1.27s/it]Convert throwable to useful exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[list]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 553 ---------------------------------------------
Log internal server error . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[logServerError]] ( RequestHeader request , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , request . method ( ) , request . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void [[fetch]] ( RequestHeader request , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , request . method ( ) , request . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 554 ---------------------------------------------
Get matching accessible method . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[create]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 555 ---------------------------------------------
Handles an internal server error . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onDevServerError]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > [[image]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 556 ---------------------------------------------
Handles an internal server error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onServerError]] ( RequestHeader [[request]] , Throwable exception ) { try { UsefulException usefulException = throwableToUsefulException ( exception ) ; logServerError ( [[request]] , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[request]] , usefulException ) ; default : return onDevServerError ( [[request]] , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[include]] ( RequestHeader [[function]] , Throwable exception ) { try { UsefulException usefulException = throwableToUsefulException ( exception ) ; logServerError ( [[function]] , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[function]] , usefulException ) ; default : return onDevServerError ( [[function]] , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 557 ---------------------------------------------
Called when an internal server error occurs . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onProdServerError]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > [[form]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 558 ---------------------------------------------
Creates a BuildDocHandler from the given directory and jar file . --> Build documentation method . --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String [[base]] ) { return [[fromDirectoryAndJar]] ( directory , jarFile , [[base]] , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[method]] ( File directory , JarFile jarFile , String [[array]] ) { return [[method]] ( directory , jarFile , [[array]] , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 559 ---------------------------------------------
Creates a new BuildDocHandler from a directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File [[directory]] ) { FileRepository [[repo]] = new FilesystemRepository ( [[directory]] ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[server]] ( File [[library]] ) { FileRepository [[catalog]] = new FilesystemRepository ( [[library]] ) ; return new DocumentationHandler ( [[catalog]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
[Succeeded / Failed / Skipped / Total] 107 / 445 / 8 / 560:  56%|█████▌    | 560/1000 [11:48<09:16,  1.27s/it][Succeeded / Failed / Skipped / Total] 107 / 446 / 8 / 561:  56%|█████▌    | 561/1000 [11:53<09:18,  1.27s/it][Succeeded / Failed / Skipped / Total] 107 / 447 / 8 / 562:  56%|█████▌    | 562/1000 [11:54<09:16,  1.27s/it][Succeeded / Failed / Skipped / Total] 107 / 447 / 8 / 562:  56%|█████▋    | 563/1000 [11:55<09:15,  1.27s/it][Succeeded / Failed / Skipped / Total] 107 / 448 / 8 / 563:  56%|█████▋    | 563/1000 [11:55<09:15,  1.27s/it][Succeeded / Failed / Skipped / Total] 107 / 449 / 8 / 564:  56%|█████▋    | 564/1000 [11:57<09:14,  1.27s/it][Succeeded / Failed / Skipped / Total] 107 / 449 / 9 / 565:  56%|█████▋    | 565/1000 [11:57<09:12,  1.27s/it][Succeeded / Failed / Skipped / Total] 107 / 449 / 9 / 565:  57%|█████▋    | 566/1000 [11:57<09:10,  1.27s/it][Succeeded / Failed / Skipped / Total] 107 / 450 / 9 / 566:  57%|█████▋    | 566/1000 [11:57<09:10,  1.27s/it][Succeeded / Failed / Skipped / Total] 107 / 451 / 9 / 567:  57%|█████▋    | 567/1000 [12:00<09:10,  1.27s/it][Succeeded / Failed / Skipped / Total] 107 / 452 / 9 / 568:  57%|█████▋    | 568/1000 [12:03<09:09,  1.27s/it][Succeeded / Failed / Skipped / Total] 107 / 452 / 9 / 568:  57%|█████▋    | 569/1000 [12:03<09:08,  1.27s/it][Succeeded / Failed / Skipped / Total] 107 / 453 / 9 / 569:  57%|█████▋    | 569/1000 [12:03<09:08,  1.27s/it]--------------------------------------------- Result 560 ---------------------------------------------
Consume data . --> [[[FAILED]]]

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer [[mat]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[mat]] ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[empty]] ( Materializer [[j]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[j]] ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 561 ---------------------------------------------
Create a build doc handler from a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile jarFile , String base ) { FileRepository [[repo]] = new JarRepository ( jarFile , Option . apply ( base ) ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[format]] ( JarFile jarFile , String base ) { FileRepository [[load]] = new JarRepository ( jarFile , Option . apply ( base ) ) ; return new DocumentationHandler ( [[load]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 562 ---------------------------------------------
Creates a new HttpEntity from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String content , String [[charset]] ) { return new Strict ( ByteString . fromString ( content , [[charset]] ) , Optional . of ( "text/plain; charset=" + [[charset]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[end]] ( String content , String [[example]] ) { return new Strict ( ByteString . fromString ( content , [[example]] ) , Optional . of ( "text/plain; charset=" + [[example]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 563 ---------------------------------------------
Creates a new HttpEntity with the given data chunked . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[primitive]] ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 564 ---------------------------------------------
Creates an HttpEntity from the given Content . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[fromContent]] ( Content [[content]] , String [[charset]] ) { String [[body]] ; if ( [[content]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity [[when]] ( Content [[base]] , String [[id]] ) { String [[template]] ; if ( [[base]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 565 ---------------------------------------------
Finds user by id . --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 566 ---------------------------------------------
Sends the given status code with the given JSON content . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result status ( int status , JsonNode [[content]] ) { return status ( status , [[content]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result status ( int status , JsonNode [[tte]] ) { return status ( status , [[tte]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 567 ---------------------------------------------
Returns a unique copy of this call . --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[method]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 568 ---------------------------------------------
Create a BuildDocHandler from a set of resources . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromResources]] ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler [[a]] ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 569 ---------------------------------------------
Returns the preferred language from the given list of languages . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > [[candidates]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidates]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[group]] ( Collection < Lang > [[group]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[group]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 570 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 107 / 454 / 9 / 570:  57%|█████▋    | 570/1000 [12:04<09:06,  1.27s/it][Succeeded / Failed / Skipped / Total] 107 / 455 / 9 / 571:  57%|█████▋    | 571/1000 [12:04<09:04,  1.27s/it][Succeeded / Failed / Skipped / Total] 107 / 455 / 9 / 571:  57%|█████▋    | 572/1000 [12:05<09:02,  1.27s/it][Succeeded / Failed / Skipped / Total] 107 / 456 / 9 / 572:  57%|█████▋    | 572/1000 [12:05<09:02,  1.27s/it][Succeeded / Failed / Skipped / Total] 107 / 457 / 9 / 573:  57%|█████▋    | 573/1000 [12:05<09:00,  1.27s/it][Succeeded / Failed / Skipped / Total] 107 / 458 / 9 / 574:  57%|█████▋    | 574/1000 [12:06<08:59,  1.27s/it][Succeeded / Failed / Skipped / Total] 107 / 458 / 9 / 574:  57%|█████▊    | 575/1000 [12:08<08:58,  1.27s/it][Succeeded / Failed / Skipped / Total] 108 / 458 / 9 / 575:  57%|█████▊    | 575/1000 [12:08<08:58,  1.27s/it][Succeeded / Failed / Skipped / Total] 108 / 459 / 9 / 576:  58%|█████▊    | 576/1000 [12:09<08:57,  1.27s/it][Succeeded / Failed / Skipped / Total] 108 / 460 / 9 / 577:  58%|█████▊    | 577/1000 [12:09<08:55,  1.26s/it][Succeeded / Failed / Skipped / Total] 108 / 460 / 9 / 577:  58%|█████▊    | 578/1000 [12:10<08:53,  1.26s/it][Succeeded / Failed / Skipped / Total] 108 / 461 / 9 / 578:  58%|█████▊    | 578/1000 [12:10<08:53,  1.26s/it][Succeeded / Failed / Skipped / Total] 108 / 462 / 9 / 579:  58%|█████▊    | 579/1000 [12:10<08:51,  1.26s/it]Create a build doc handler from a directory and a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[b]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 571 ---------------------------------------------
Sends a JSON response with the given status code and content . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int status , JsonNode [[content]] , JsonEncoding [[encoding]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[status]] ( [[status]] ) . sendJson ( [[content]] , [[encoding]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result [[message]] ( int status , JsonNode [[ct]] , JsonEncoding [[function]] ) { if ( [[ct]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[message]] ( [[message]] ) . sendJson ( [[ct]] , [[function]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 572 ---------------------------------------------
Creates a new HTTP result with the given status code and content . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result status ( int [[status]] , byte [ ] [[content]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( status , new HttpEntity . Strict ( ByteString . fromArray ( [[content]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result status ( int [[address]] , byte [ ] [[list]] ) { if ( [[list]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( status , new HttpEntity . Strict ( ByteString . fromArray ( [[list]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 573 ---------------------------------------------
Creates a new call with the given fragment . --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[withFragment]] ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call [[option]] ( String [[array]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[array]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 574 ---------------------------------------------
Sends a response with the given status code and file content . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , File [[content]] ) { return [[status]] ( [[status]] , [[content]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[point]] ( int [[access]] , File [[view]] ) { return [[point]] ( [[point]] , [[view]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 575 ---------------------------------------------
Returns a function that executes a ConnectionRunnable on a connection . --> Bag connection to boxed unit --> Socre: 1.0

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectionFunction]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { block . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[bag]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { block . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 576 ---------------------------------------------
Returns the absolute URL for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request [[request]] ) { return [[absoluteURL]] ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[get]] ( Http . Request [[net]] ) { return [[get]] ( [[net]] . secure ( ) , [[net]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 577 ---------------------------------------------
Sends the given HTTP status code and content to the client . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result status ( int status , InputStream [[content]] , long [[contentLength]] ) { return status ( status ) . sendInputStream ( [[content]] , [[contentLength]] ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result status ( int status , InputStream [[it]] , long [[c]] ) { return status ( status ) . sendInputStream ( [[it]] , [[c]] ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 578 ---------------------------------------------
Converts a JSON node to an instance of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[stack]] > [[stack]] fromJson ( JsonNode json , Class < [[stack]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 579 ---------------------------------------------
Returns the web socket URL for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request [[request]] ) { return [[webSocketURL]] ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[get]] ( Http . Request [[net]] ) { return [[get]] ( [[net]] . secure ( ) , [[net]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 580 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 108 / 463 / 9 / 580:  58%|█████▊    | 580/1000 [12:12<08:50,  1.26s/it][Succeeded / Failed / Skipped / Total] 108 / 463 / 9 / 580:  58%|█████▊    | 581/1000 [12:12<08:48,  1.26s/it][Succeeded / Failed / Skipped / Total] 108 / 464 / 9 / 581:  58%|█████▊    | 581/1000 [12:12<08:48,  1.26s/it][Succeeded / Failed / Skipped / Total] 108 / 465 / 9 / 582:  58%|█████▊    | 582/1000 [12:13<08:46,  1.26s/it][Succeeded / Failed / Skipped / Total] 108 / 466 / 9 / 583:  58%|█████▊    | 583/1000 [12:15<08:45,  1.26s/it][Succeeded / Failed / Skipped / Total] 108 / 466 / 9 / 583:  58%|█████▊    | 584/1000 [12:16<08:44,  1.26s/it][Succeeded / Failed / Skipped / Total] 108 / 467 / 9 / 584:  58%|█████▊    | 584/1000 [12:16<08:44,  1.26s/it][Succeeded / Failed / Skipped / Total] 108 / 468 / 9 / 585:  58%|█████▊    | 585/1000 [12:18<08:44,  1.26s/it][Succeeded / Failed / Skipped / Total] 108 / 469 / 9 / 586:  59%|█████▊    | 586/1000 [12:18<08:41,  1.26s/it][Succeeded / Failed / Skipped / Total] 108 / 469 / 9 / 586:  59%|█████▊    | 587/1000 [12:21<08:41,  1.26s/it][Succeeded / Failed / Skipped / Total] 108 / 470 / 9 / 587:  59%|█████▊    | 587/1000 [12:21<08:41,  1.26s/it][Succeeded / Failed / Skipped / Total] 109 / 470 / 9 / 588:  59%|█████▉    | 588/1000 [12:21<08:39,  1.26s/it]Converts an object to a JSON node . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[loop]] ( final Object [[order]] ) { try { return mapper ( ) . valueToTree ( [[order]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 581 ---------------------------------------------
Returns a function that executes the given ConnectionCallable on the given connection . --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[block]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[connection]] ) { try { return [[block]] . call ( [[connection]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[name]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[key]] ) { try { return [[name]] . call ( [[key]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 582 ---------------------------------------------
Parses a string into a JsonNode . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( String [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[generator]] ( String [[size]] ) { try { return mapper ( ) . readTree ( [[size]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 583 ---------------------------------------------
Parse a JSON document from an input stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[stack]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 584 ---------------------------------------------
Converts a set of constraint descriptors to a list of displayable constraints . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > [[constraints]] ) { return [[constraints]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[list]] ( Set < ConstraintDescriptor < ? > > [[method]] ) { return [[method]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[list]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 585 ---------------------------------------------
Creates a server for the given router . --> [[[FAILED]]]

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode [[mode]] , int port , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . [[mode]] ( [[mode]] ) . http ( port ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[client]] ( Mode [[server]] , int port , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . [[server]] ( [[server]] ) . http ( port ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 586 ---------------------------------------------
Returns the relative path of startPath to targetPath . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[relative]] ( String [[startPath]] , String targetPath ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[main]] ( String [[link]] , String targetPath ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 587 ---------------------------------------------
Gets displayable constraint . --> [[[FAILED]]]

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[displayableConstraint]] ( ConstraintDescriptor < ? > [[constraint]] ) { final Display displayAnnotation = [[constraint]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[constraint]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[after]] ( ConstraintDescriptor < ? > [[array]] ) { final Display displayAnnotation = [[array]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[array]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 588 ---------------------------------------------
Parses a cron expression and returns the next valid time after it . --> Returns the next valid time after the given string --> Socre: 1.0

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String [[cron]] ) { try { return new CronExpression ( [[cron]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[array]] ( String [[foo]] ) { try { return new CronExpression ( [[foo]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[foo]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 589 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 110 / 470 / 9 / 589:  59%|█████▉    | 589/1000 [12:21<08:37,  1.26s/it][Succeeded / Failed / Skipped / Total] 110 / 470 / 9 / 589:  59%|█████▉    | 590/1000 [12:25<08:37,  1.26s/it][Succeeded / Failed / Skipped / Total] 110 / 471 / 9 / 590:  59%|█████▉    | 590/1000 [12:25<08:37,  1.26s/it][Succeeded / Failed / Skipped / Total] 110 / 472 / 9 / 591:  59%|█████▉    | 591/1000 [12:26<08:36,  1.26s/it][Succeeded / Failed / Skipped / Total] 110 / 473 / 9 / 592:  59%|█████▉    | 592/1000 [12:26<08:34,  1.26s/it][Succeeded / Failed / Skipped / Total] 110 / 473 / 9 / 592:  59%|█████▉    | 593/1000 [12:26<08:32,  1.26s/it][Succeeded / Failed / Skipped / Total] 110 / 474 / 9 / 593:  59%|█████▉    | 593/1000 [12:26<08:32,  1.26s/it][Succeeded / Failed / Skipped / Total] 110 / 475 / 9 / 594:  59%|█████▉    | 594/1000 [12:29<08:31,  1.26s/it][Succeeded / Failed / Skipped / Total] 111 / 475 / 9 / 595:  60%|█████▉    | 595/1000 [12:29<08:30,  1.26s/it][Succeeded / Failed / Skipped / Total] 111 / 475 / 9 / 595:  60%|█████▉    | 596/1000 [12:29<08:28,  1.26s/it][Succeeded / Failed / Skipped / Total] 111 / 476 / 9 / 596:  60%|█████▉    | 596/1000 [12:29<08:28,  1.26s/it][Succeeded / Failed / Skipped / Total] 111 / 477 / 9 / 597:  60%|█████▉    | 597/1000 [12:30<08:26,  1.26s/it]Returns true if classArray is assignable to toClassArray --> Test two arrays for equality --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean [[autoboxing]] ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[isAssignable]] ( classArray [ i ] , toClassArray [ i ] , [[autoboxing]] ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[test]] ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean [[example]] ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[test]] ( classArray [ i ] , toClassArray [ i ] , [[example]] ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 590 ---------------------------------------------
Create a GuiceApplicationBuilder with the given ApplicationLoader . Context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context [[context]] ) { return initialBuilder . in ( [[context]] . environment ( ) ) . loadConfig ( [[context]] . initialConfig ( ) ) . overrides ( overrides ( [[context]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[ii]] ( ApplicationLoader . Context [[files]] ) { return initialBuilder . in ( [[files]] . environment ( ) ) . loadConfig ( [[files]] . initialConfig ( ) ) . overrides ( overrides ( [[files]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 591 ---------------------------------------------
Renders a todo page . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[TODO]] ( Request [[request]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[request]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result [[on]] ( Request [[method]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[method]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 592 ---------------------------------------------
Get the next interval from a cron pattern on a given date --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[cronInterval]] ( String [[cron]] , Date [[date]] ) { try { return new CronExpression ( [[cron]] ) . getNextInterval ( [[date]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long [[array]] ( String [[a]] , Date [[b]] ) { try { return new CronExpression ( [[a]] ) . getNextInterval ( [[b]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[a]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 593 ---------------------------------------------
Returns the canonical path of the given URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[canonical]] ( String [[url]] ) { String [ ] [[urlPath]] = toSegments ( [[url]] ) ; Stack < String > [[canonical]] = new Stack <> ( ) ; for ( String comp : [[urlPath]] ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[canonical]] . empty ( ) && [[canonical]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[canonical]] . push ( comp ) ; else [[canonical]] . pop ( ) ; } String prefixSep = [[url]] . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = [[url]] . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[canonical]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String [[format]] ( String [[image]] ) { String [ ] [[frame]] = toSegments ( [[image]] ) ; Stack < String > [[format]] = new Stack <> ( ) ; for ( String comp : [[frame]] ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[format]] . empty ( ) && [[format]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[format]] . push ( comp ) ; else [[format]] . pop ( ) ; } String prefixSep = [[image]] . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = [[image]] . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[format]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 594 ---------------------------------------------
Returns a binding key that is qualified with the given instance . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[document]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 595 ---------------------------------------------
Sets a session value . --> Add hello and b --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[session]] ( String [[key]] , String [[value]] ) { [[session]] ( ) . put ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void [[bring]] ( String [[hello]] , String [[b]] ) { [[bring]] ( ) . put ( [[hello]] , [[b]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 596 ---------------------------------------------
Returns a binding key that is qualified with the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A extends Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 597 ---------------------------------------------
Adds a flash value to the session . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String key , String value ) { [[flash]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[fix]] ( String key , String value ) { [[fix]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
[Succeeded / Failed / Skipped / Total] 111 / 478 / 9 / 598:  60%|█████▉    | 598/1000 [12:32<08:25,  1.26s/it][Succeeded / Failed / Skipped / Total] 111 / 478 / 9 / 598:  60%|█████▉    | 599/1000 [12:32<08:23,  1.26s/it][Succeeded / Failed / Skipped / Total] 111 / 479 / 9 / 599:  60%|█████▉    | 599/1000 [12:32<08:23,  1.26s/it][Succeeded / Failed / Skipped / Total] 111 / 480 / 9 / 600:  60%|██████    | 600/1000 [12:32<08:21,  1.25s/it][Succeeded / Failed / Skipped / Total] 111 / 481 / 9 / 601:  60%|██████    | 601/1000 [12:32<08:19,  1.25s/it][Succeeded / Failed / Skipped / Total] 111 / 481 / 9 / 601:  60%|██████    | 602/1000 [12:33<08:17,  1.25s/it][Succeeded / Failed / Skipped / Total] 111 / 482 / 9 / 602:  60%|██████    | 602/1000 [12:33<08:17,  1.25s/it][Succeeded / Failed / Skipped / Total] 111 / 483 / 9 / 603:  60%|██████    | 603/1000 [12:34<08:16,  1.25s/it][Succeeded / Failed / Skipped / Total] 111 / 484 / 9 / 604:  60%|██████    | 604/1000 [12:38<08:16,  1.26s/it][Succeeded / Failed / Skipped / Total] 111 / 484 / 9 / 604:  60%|██████    | 605/1000 [12:39<08:16,  1.26s/it][Succeeded / Failed / Skipped / Total] 111 / 485 / 9 / 605:  60%|██████    | 605/1000 [12:39<08:16,  1.26s/it][Succeeded / Failed / Skipped / Total] 111 / 486 / 9 / 606:  61%|██████    | 606/1000 [12:41<08:14,  1.26s/it][Succeeded / Failed / Skipped / Total] 111 / 487 / 9 / 607:  61%|██████    | 607/1000 [12:42<08:13,  1.26s/it][Succeeded / Failed / Skipped / Total] 111 / 487 / 9 / 607:  61%|██████    | 608/1000 [12:42<08:11,  1.25s/it]--------------------------------------------- Result 598 ---------------------------------------------
Binds this binding to the given implementation . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Class < ? extends T > [[implementation]] ) { return underlying . to ( [[implementation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > [[time]] ( final Class < ? extends T > [[length]] ) { return underlying . to ( [[length]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 599 ---------------------------------------------
Timeouts the current thread for the specified amount of time . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[timeout]] ( final CompletionStage < A > [[stage]] , final long amount , final TimeUnit unit ) { requireNonNull ( [[stage]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration [[duration]] = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( [[duration]] , Scala . asScalaWithFuture ( ( ) -> [[stage]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[replace]] ( final CompletionStage < A > [[units]] , final long amount , final TimeUnit unit ) { requireNonNull ( [[units]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration [[a]] = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( [[a]] , Scala . asScalaWithFuture ( ( ) -> [[units]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 600 ---------------------------------------------
Creates a new WS client . --> [[[FAILED]]]

[[[[Adv]]]]: public static AhcWSClient [[create]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient [[client]] = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( [[client]] , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient [[build]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient [[task]] = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( [[task]] , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 601 ---------------------------------------------
Binds the binding to the given supplier . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[type]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 602 ---------------------------------------------
Binds this binding to the provided provider . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > [[provider]] ) { return underlying . to ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[client]] ( final Provider < ? extends T > [[only]] ) { return underlying . to ( [[only]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 603 ---------------------------------------------
Creates a new binding with the specified key . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[procedure]] ( final BindingKey < ? extends T > [[condition]] ) { return underlying . to ( [[condition]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 604 ---------------------------------------------
Creates a new evolutions reader from a map of evolutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > [[evolutions]] ) { return new SimpleEvolutionsReader ( [[evolutions]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . [[add]] . EvolutionsReader [[client]] ( Map < String , List < Evolution > > [[add]] ) { return new SimpleEvolutionsReader ( [[add]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 605 ---------------------------------------------
Convert this binding to the given provider . --> [[[FAILED]]]

[[[[Adv]]]]: public < P [[extends]] Provider < ? extends T > > Binding < T > [[toProvider]] ( final Class < P > [[provider]] ) { return underlying . toProvider ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P [[per]] Provider < ? extends T > > Binding < T > [[then]] ( final Class < P > [[b]] ) { return underlying . toProvider ( [[b]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 606 ---------------------------------------------
Returns the available languages for the application . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application app ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[availableLangs]] = Scala . asJava ( langs . availables ( ) ) ; return [[availableLangs]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[canvas]] ( Application app ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[page]] = Scala . asJava ( langs . availables ( ) ) ; return [[page]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 607 ---------------------------------------------
Returns a GuiceApplicationBuilder with a configuration loaded from the given environment . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[withConfigLoader]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment [[env]] ) -> new play . api . Configuration ( load . apply ( new Environment ( [[env]] ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[when]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment [[load]] ) -> new play . api . Configuration ( load . apply ( new Environment ( [[load]] ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
[Succeeded / Failed / Skipped / Total] 111 / 488 / 9 / 608:  61%|██████    | 608/1000 [12:42<08:11,  1.25s/it][Succeeded / Failed / Skipped / Total] 111 / 489 / 9 / 609:  61%|██████    | 609/1000 [12:44<08:11,  1.26s/it][Succeeded / Failed / Skipped / Total] 111 / 490 / 9 / 610:  61%|██████    | 610/1000 [12:45<08:09,  1.26s/it][Succeeded / Failed / Skipped / Total] 111 / 490 / 9 / 610:  61%|██████    | 611/1000 [12:46<08:07,  1.25s/it][Succeeded / Failed / Skipped / Total] 111 / 491 / 9 / 611:  61%|██████    | 611/1000 [12:46<08:07,  1.25s/it][Succeeded / Failed / Skipped / Total] 112 / 491 / 9 / 612:  61%|██████    | 612/1000 [12:46<08:06,  1.25s/it][Succeeded / Failed / Skipped / Total] 112 / 492 / 9 / 613:  61%|██████▏   | 613/1000 [12:47<08:04,  1.25s/it][Succeeded / Failed / Skipped / Total] 112 / 492 / 9 / 613:  61%|██████▏   | 614/1000 [12:47<08:02,  1.25s/it][Succeeded / Failed / Skipped / Total] 112 / 493 / 9 / 614:  61%|██████▏   | 614/1000 [12:47<08:02,  1.25s/it][Succeeded / Failed / Skipped / Total] 112 / 494 / 9 / 615:  62%|██████▏   | 615/1000 [12:48<08:01,  1.25s/it][Succeeded / Failed / Skipped / Total] 113 / 494 / 9 / 616:  62%|██████▏   | 616/1000 [12:48<07:59,  1.25s/it][Succeeded / Failed / Skipped / Total] 113 / 494 / 9 / 616:  62%|██████▏   | 617/1000 [12:52<07:59,  1.25s/it]--------------------------------------------- Result 608 ---------------------------------------------
Creates a new evolutions reader for the default evolution . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[forDefault]] ( Evolution ... [[evolutions]] ) { Map < String , List < Evolution > > [[map]] = new HashMap < String , List < Evolution > > ( ) ; [[map]] . put ( "default" , Arrays . asList ( [[evolutions]] ) ) ; return fromMap ( [[map]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . [[add]] . EvolutionsReader [[ch]] ( Evolution ... [[add]] ) { Map < String , List < Evolution > > [[b]] = new HashMap < String , List < Evolution > > ( ) ; [[b]] . put ( "default" , Arrays . asList ( [[add]] ) ) ; return fromMap ( [[b]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 609 ---------------------------------------------
Loads Guice modules into the application . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( GuiceableModule ... [[max]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[max]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 610 ---------------------------------------------
Returns a GuiceApplicationBuilder with the given module loader . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[withModuleLoader]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[application]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 611 ---------------------------------------------
Loads the application with the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( com . google . inject . Module ... [[modules]] ) { return [[load]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[extension]] ( com . google . inject . Module ... [[page]] ) { return [[extension]] ( Guiceable . [[page]] ( [[page]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 612 ---------------------------------------------
Returns a new GuiceApplicationBuilder . --> Create a GuiceApplicationBuilder using the given GuiceApplicationBuilder --> Socre: 1.0

[[[[Adv]]]]: protected GuiceApplicationBuilder [[newBuilder]] ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder [[driver]] ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 613 ---------------------------------------------
Cleans up the evolutions of a database . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database database , boolean autocommit , String [[schema]] ) { DatabaseEvolutions [[evolutions]] = new DatabaseEvolutions ( database . asScala ( ) , [[schema]] ) ; [[evolutions]] . evolve ( [[evolutions]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[move]] ( Database database , boolean autocommit , String [[changes]] ) { DatabaseEvolutions [[index]] = new DatabaseEvolutions ( database . asScala ( ) , [[changes]] ) ; [[index]] . evolve ( [[index]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 614 ---------------------------------------------
Load the application with the given inject modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Module ... [[modules]] ) { return [[load]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[function]] ( play . api . inject . Module ... [[bot]] ) { return [[function]] ( Guiceable . [[bot]] ( [[bot]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 615 ---------------------------------------------
Returns the preferred language from a list of languages . --> [[[FAILED]]]

[[[[Adv]]]]: public static Lang [[preferred]] ( Application app , List < Lang > availableLangs ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[format]] ( Application app , List < Lang > availableLangs ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 616 ---------------------------------------------
Load the application with the given bindings . --> Create a GuiceApplicationBuilder using an exception binding --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[load]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder [[using]] ( play . api . inject . Binding < ? > ... [[ex]] ) { return [[using]] ( Guiceable . [[ex]] ( [[ex]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 617 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 114 / 494 / 9 / 617:  62%|██████▏   | 617/1000 [12:52<07:59,  1.25s/it][Succeeded / Failed / Skipped / Total] 114 / 495 / 9 / 618:  62%|██████▏   | 618/1000 [12:53<07:58,  1.25s/it][Succeeded / Failed / Skipped / Total] 114 / 496 / 9 / 619:  62%|██████▏   | 619/1000 [12:56<07:57,  1.25s/it][Succeeded / Failed / Skipped / Total] 114 / 496 / 9 / 619:  62%|██████▏   | 620/1000 [12:57<07:56,  1.25s/it][Succeeded / Failed / Skipped / Total] 114 / 497 / 9 / 620:  62%|██████▏   | 620/1000 [12:57<07:56,  1.25s/it][Succeeded / Failed / Skipped / Total] 114 / 498 / 9 / 621:  62%|██████▏   | 621/1000 [12:58<07:54,  1.25s/it][Succeeded / Failed / Skipped / Total] 114 / 499 / 9 / 622:  62%|██████▏   | 622/1000 [12:58<07:53,  1.25s/it][Succeeded / Failed / Skipped / Total] 114 / 499 / 9 / 622:  62%|██████▏   | 623/1000 [13:01<07:52,  1.25s/it][Succeeded / Failed / Skipped / Total] 114 / 500 / 9 / 623:  62%|██████▏   | 623/1000 [13:01<07:52,  1.25s/it]Returns the current EntityManager stack . --> Uses thread - local fallback if thread - local fallback is true --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[emStack]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object [[emsObject]] = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( [[emsObject]] != null ) { return ( Deque < EntityManager > ) [[emsObject]] ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[using]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object [[mode]] = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( [[mode]] != null ) { return ( Deque < EntityManager > ) [[mode]] ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 618 ---------------------------------------------
Encodes the cookie into a cookie string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; [[encode]] ( buf , [[cookie]] ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String [[include]] ( Cookie [[list]] ) { if ( [[list]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; [[include]] ( buf , [[list]] ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 619 ---------------------------------------------
Returns the first EntityManager bound to this thread . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( ) { Deque < EntityManager > ems = this . emStack ( "True" == "True" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager [[ii]] ( ) { Deque < EntityManager > ems = this . emStack ( "True" == "True" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 620 ---------------------------------------------
Returns the global errors . --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[item]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 621 ---------------------------------------------
Convert error arguments to an unmodifiable list . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Object > [[convertErrorArguments]] ( Object [ ] [[arguments]] ) { if ( [[arguments]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[arguments]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > [[print]] ( Object [ ] [[group]] ) { if ( [[group]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[group]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 622 ---------------------------------------------
Creates a new form with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public Form < T > [[fill]] ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > [[ref]] ( T [[function]] ) { if ( [[function]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[function]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 623 ---------------------------------------------
Push an EntityManager onto the stack or remove it from the stack . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[execute]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 624 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 114 / 501 / 9 / 624:  62%|██████▏   | 624/1000 [13:02<07:51,  1.25s/it][Succeeded / Failed / Skipped / Total] 115 / 501 / 9 / 625:  62%|██████▎   | 625/1000 [13:04<07:50,  1.25s/it][Succeeded / Failed / Skipped / Total] 115 / 501 / 9 / 625:  63%|██████▎   | 626/1000 [13:04<07:48,  1.25s/it][Succeeded / Failed / Skipped / Total] 115 / 502 / 9 / 626:  63%|██████▎   | 626/1000 [13:04<07:48,  1.25s/it][Succeeded / Failed / Skipped / Total] 116 / 502 / 9 / 627:  63%|██████▎   | 627/1000 [13:04<07:46,  1.25s/it][Succeeded / Failed / Skipped / Total] 116 / 503 / 9 / 628:  63%|██████▎   | 628/1000 [13:06<07:45,  1.25s/it][Succeeded / Failed / Skipped / Total] 116 / 503 / 9 / 628:  63%|██████▎   | 629/1000 [13:06<07:43,  1.25s/it][Succeeded / Failed / Skipped / Total] 116 / 504 / 9 / 629:  63%|██████▎   | 629/1000 [13:06<07:43,  1.25s/it][Succeeded / Failed / Skipped / Total] 116 / 505 / 9 / 630:  63%|██████▎   | 630/1000 [13:07<07:42,  1.25s/it][Succeeded / Failed / Skipped / Total] 116 / 506 / 9 / 631:  63%|██████▎   | 631/1000 [13:07<07:40,  1.25s/it][Succeeded / Failed / Skipped / Total] 116 / 506 / 9 / 631:  63%|██████▎   | 632/1000 [13:08<07:39,  1.25s/it][Succeeded / Failed / Skipped / Total] 117 / 506 / 9 / 632:  63%|██████▎   | 632/1000 [13:08<07:39,  1.25s/it]Parses the given text into an instance of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[map]] > [[map]] parse ( String text , Class < [[map]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 625 ---------------------------------------------
Returns the value associated with the given key . --> List optional . --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String [[key]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[key]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[list]] ( String [[array]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[array]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 626 ---------------------------------------------
Prints a value to a string . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[loop]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[loop]] . class ) ) { return conversion . convert ( t , [[loop]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 627 ---------------------------------------------
Parses the given text into an instance of the given field . --> Parse an end from the given text . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[end]] > [[end]] parse ( Field field , String text ) { return ( [[end]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 628 ---------------------------------------------
Prints a type to a string . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[c]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[c]] . class ) ) ) { return ( [[c]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[c]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[c]] . class ) ) { return conversion . convert ( t , [[c]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 629 ---------------------------------------------
Prints the type descriptor for the given field . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[variable]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 630 ---------------------------------------------
bypass with graph . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , FlowIn , [[Out]] > Flow < In , [[Out]] , ? > bypassWith ( Flow < In , F . Either < FlowIn , [[Out]] > , ? > splitter , Graph < UniformFanInShape < [[Out]] , [[Out]] > , ? > mergeStrategy , Flow < FlowIn , [[Out]] , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , [[Out]] > , [[Out]] > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < In , FlowIn , [[context]] > Flow < In , [[context]] , ? > bypassWith ( Flow < In , F . Either < FlowIn , [[context]] > , ? > splitter , Graph < UniformFanInShape < [[context]] , [[context]] > , ? > mergeStrategy , Flow < FlowIn , [[context]] , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , [[context]] > , [[context]] > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 631 ---------------------------------------------
bypass with . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[bypassWith]] ( Function < In , F . Either < FlowIn , Out > > [[splitter]] , Flow < FlowIn , Out , ? > flow ) { return [[bypassWith]] ( Flow . < In > create ( ) . map ( [[splitter]] :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[transfer]] ( Function < In , F . Either < FlowIn , Out > > [[end]] , Flow < FlowIn , Out , ? > flow ) { return [[transfer]] ( Flow . < In > create ( ) . map ( [[end]] :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 632 ---------------------------------------------
Registers an optional converter to the formatters . --> Compose formatters . --> Socre: 1.0

[[[[Adv]]]]: private Formatters [[registerOptional]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters [[compose]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 633 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 117 / 507 / 9 / 633:  63%|██████▎   | 633/1000 [13:08<07:37,  1.25s/it][Succeeded / Failed / Skipped / Total] 117 / 508 / 9 / 634:  63%|██████▎   | 634/1000 [13:09<07:35,  1.24s/it][Succeeded / Failed / Skipped / Total] 117 / 508 / 9 / 634:  64%|██████▎   | 635/1000 [13:12<07:35,  1.25s/it][Succeeded / Failed / Skipped / Total] 117 / 509 / 9 / 635:  64%|██████▎   | 635/1000 [13:12<07:35,  1.25s/it][Succeeded / Failed / Skipped / Total] 117 / 510 / 9 / 636:  64%|██████▎   | 636/1000 [13:14<07:34,  1.25s/it][Succeeded / Failed / Skipped / Total] 117 / 511 / 9 / 637:  64%|██████▎   | 637/1000 [13:15<07:33,  1.25s/it][Succeeded / Failed / Skipped / Total] 117 / 511 / 9 / 637:  64%|██████▍   | 638/1000 [13:15<07:31,  1.25s/it][Succeeded / Failed / Skipped / Total] 117 / 512 / 9 / 638:  64%|██████▍   | 638/1000 [13:15<07:31,  1.25s/it][Succeeded / Failed / Skipped / Total] 117 / 513 / 9 / 639:  64%|██████▍   | 639/1000 [13:16<07:29,  1.25s/it]Fills the form with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public DynamicForm [[fill]] ( Map < String , Object > value ) { Form < Dynamic > form = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm [[system]] ( Map < String , Object > value ) { Form < Dynamic > form = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 634 ---------------------------------------------
Create an ActorRef from a function . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , [[Out]] > Flow < In , [[Out]] , ? > [[actorRef]] ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy [[overflowStrategy]] , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , [[Out]] > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef [[v1]] ) { return props . apply ( [[v1]] ) ; } } , bufferSize , [[overflowStrategy]] , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < In , [[location]] > Flow < In , [[location]] , ? > [[draw]] ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy [[at]] , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , [[location]] > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef [[string]] ) { return props . apply ( [[string]] ) ; } } , bufferSize , [[at]] , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 635 ---------------------------------------------
Returns all errors as json . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[of]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 636 ---------------------------------------------
Convert an array to a scala collection immutable Seq --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[template]] ( T [ ] [[files]] ) { return [[template]] ( java . util . Arrays . asList ( [[files]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 637 ---------------------------------------------
Convert a Java List to a scala Seq --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[move]] ( java . util . List < T > [[stack]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[stack]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 638 ---------------------------------------------
Varargs to a scala Seq --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... [[array]] ) { return toSeq ( [[array]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[include]] ( T ... [[file]] ) { return toSeq ( [[file]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 639 ---------------------------------------------
Registers a formatter for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[Formatters]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > [[create]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 640 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 118 / 513 / 9 / 640:  64%|██████▍   | 640/1000 [13:18<07:29,  1.25s/it][Succeeded / Failed / Skipped / Total] 118 / 513 / 9 / 640:  64%|██████▍   | 641/1000 [13:19<07:27,  1.25s/it][Succeeded / Failed / Skipped / Total] 119 / 513 / 9 / 641:  64%|██████▍   | 641/1000 [13:19<07:27,  1.25s/it][Succeeded / Failed / Skipped / Total] 119 / 514 / 9 / 642:  64%|██████▍   | 642/1000 [13:19<07:26,  1.25s/it][Succeeded / Failed / Skipped / Total] 120 / 514 / 9 / 643:  64%|██████▍   | 643/1000 [13:22<07:25,  1.25s/it][Succeeded / Failed / Skipped / Total] 120 / 514 / 9 / 643:  64%|██████▍   | 644/1000 [13:24<07:24,  1.25s/it][Succeeded / Failed / Skipped / Total] 121 / 514 / 9 / 644:  64%|██████▍   | 644/1000 [13:24<07:24,  1.25s/it][Succeeded / Failed / Skipped / Total] 121 / 515 / 9 / 645:  64%|██████▍   | 645/1000 [13:25<07:23,  1.25s/it]Maps a message type to a JSON object . --> Maps a binary or text message to a vector --> Socre: 1.0

[[[[Adv]]]]: public static < [[In]] , Out > MappedWebSocketAcceptor < [[In]] , Out > json ( Class < [[In]] > [[in]] ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , [[in]] ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , [[in]] ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .

[[[[Adv]]]]: public static < [[b]] , Out > MappedWebSocketAcceptor < [[b]] , Out > json ( Class < [[b]] > [[vector]] ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , [[vector]] ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , [[vector]] ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 641 ---------------------------------------------
Selects the nodes at the specified path . --> Create a NodeList from an Object --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String [[path]] , Object node ) { return [[selectNodes]] ( [[path]] , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[ed]] ( String [[zero]] , Object node ) { return [[ed]] ( [[zero]] , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 642 ---------------------------------------------
Encodes a cookie into a cookie string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String [[end]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 643 ---------------------------------------------
Get a message by list of keys --> End a list of messages --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[end]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 644 ---------------------------------------------
Returns the message for the given key with the given arguments --> Swap nt with args --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( String [[key]] , Object ... args ) { return messagesApi . get ( lang , [[key]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String [[swap]] ( String [[nt]] , Object ... args ) { return messagesApi . get ( lang , [[nt]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 645 ---------------------------------------------
Creates a new WebSocket object that accepts or returns either the result of the provided function . --> [[[FAILED]]]

[[[[Adv]]]]: private static < In , Out > WebSocket acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new WebSocket ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader [[request]] ) { return f . apply ( [[request]] ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[flow]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[flow]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > WebSocket acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new WebSocket ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader [[edge]] ) { return f . apply ( [[edge]] ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[page]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[page]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 646 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 121 / 516 / 9 / 646:  65%|██████▍   | 646/1000 [13:28<07:23,  1.25s/it][Succeeded / Failed / Skipped / Total] 121 / 516 / 9 / 646:  65%|██████▍   | 647/1000 [13:32<07:23,  1.26s/it][Succeeded / Failed / Skipped / Total] 121 / 517 / 9 / 647:  65%|██████▍   | 647/1000 [13:32<07:23,  1.26s/it][Succeeded / Failed / Skipped / Total] 121 / 518 / 9 / 648:  65%|██████▍   | 648/1000 [13:32<07:21,  1.25s/it][Succeeded / Failed / Skipped / Total] 121 / 519 / 9 / 649:  65%|██████▍   | 649/1000 [13:34<07:20,  1.25s/it][Succeeded / Failed / Skipped / Total] 121 / 519 / 9 / 649:  65%|██████▌   | 650/1000 [13:36<07:19,  1.26s/it]Calculates the cost of promotion for primitive types . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getPrimitivePromotionCost]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > [[cls]] = srcClass ; if ( ! [[cls]] . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float [[swap]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > [[sum]] = srcClass ; if ( ! [[sum]] . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 647 ---------------------------------------------
Registers a formatter for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[Formatters]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > [[annotationType]] = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { return ( [[sourceType]] . getAnnotation ( [[annotationType]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { final A a = ( A ) [[sourceType]] . getAnnotation ( [[annotationType]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[sourceType]] , targetType , source , ex ) ; } } public String toString ( ) { return "@" + [[annotationType]] . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( [[annotationType]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( [[annotationType]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[sourceType]] , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + [[annotationType]] . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[add]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > [[condition]] = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor [[root]] , TypeDescriptor targetType ) { return ( [[root]] . getAnnotation ( [[condition]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[root]] , TypeDescriptor targetType ) { final A a = ( A ) [[root]] . getAnnotation ( [[condition]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[root]] , targetType , source , ex ) ; } } public String toString ( ) { return "@" + [[condition]] . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor [[root]] , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( [[condition]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[root]] , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( [[condition]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[root]] , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + [[condition]] . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 648 ---------------------------------------------
Calculates the total cost of the transformation . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] [[destArgs]] = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[call]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] [[array]] = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 649 ---------------------------------------------
Creates a parallel sorter for the given array . --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter [[create]] ( Object [ ] [[arrays]] ) { Generator [[gen]] = new Generator ( ) ; [[gen]] . setArrays ( [[arrays]] ) ; return [[gen]] . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter [[element]] ( Object [ ] [[null]] ) { Generator [[s]] = new Generator ( ) ; [[s]] . setArrays ( [[null]] ) ; return [[s]] . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 650 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 121 / 520 / 9 / 650:  65%|██████▌   | 650/1000 [13:36<07:19,  1.26s/it][Succeeded / Failed / Skipped / Total] 121 / 520 / 10 / 651:  65%|██████▌   | 651/1000 [13:36<07:17,  1.25s/it][Succeeded / Failed / Skipped / Total] 122 / 520 / 10 / 652:  65%|██████▌   | 652/1000 [13:36<07:16,  1.25s/it][Succeeded / Failed / Skipped / Total] 122 / 520 / 10 / 652:  65%|██████▌   | 653/1000 [13:39<07:15,  1.25s/it][Succeeded / Failed / Skipped / Total] 122 / 521 / 10 / 653:  65%|██████▌   | 653/1000 [13:39<07:15,  1.25s/it][Succeeded / Failed / Skipped / Total] 122 / 522 / 10 / 654:  65%|██████▌   | 654/1000 [13:40<07:13,  1.25s/it][Succeeded / Failed / Skipped / Total] 123 / 522 / 10 / 655:  66%|██████▌   | 655/1000 [13:41<07:12,  1.25s/it][Succeeded / Failed / Skipped / Total] 123 / 522 / 10 / 655:  66%|██████▌   | 656/1000 [13:41<07:10,  1.25s/it]Creates a new database with the given driver url and configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public static Database [[createFrom]] ( String driver , String url , Map < String , ? extends Object > [[config]] ) { return [[createFrom]] ( "default" , driver , url , [[config]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[daemon]] ( String driver , String url , Map < String , ? extends Object > [[strings]] ) { return [[daemon]] ( "default" , driver , url , [[strings]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 651 ---------------------------------------------
Emit a field instruction . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 652 ---------------------------------------------
Load an argument at the given index . --> power at index --> Socre: 1.0

[[[[Adv]]]]: public void [[load_arg]] ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void [[power]] ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 653 ---------------------------------------------
Returns true if the AccessibleObject is accessible but not accessible in a package . --> [[[FAILED]]]

[[[[Adv]]]]: static boolean setAccessibleWorkaround ( final AccessibleObject [[o]] ) { if ( [[o]] == null || [[o]] . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) [[o]] ; if ( ! [[o]] . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { [[o]] . setAccessible ( "[[True]]" == "[[True]]" ) ; return "[[True]]" == "[[True]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean setAccessibleWorkaround ( final AccessibleObject [[method]] ) { if ( [[method]] == null || [[method]] . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) [[method]] ; if ( ! [[method]] . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { [[method]] . setAccessible ( "[[verify]]" == "[[verify]]" ) ; return "[[verify]]" == "[[verify]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 654 ---------------------------------------------
Returns the cost of an Object transformation . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getObjectTransformationCost]] ( Class < ? > srcClass , final Class < ? > [[destClass]] ) { if ( [[destClass]] . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , [[destClass]] ) ; } float [[cost]] = 0.0f ; while ( srcClass != null && ! [[destClass]] . equals ( srcClass ) ) { if ( [[destClass]] . isInterface ( ) && ClassUtils . isAssignable ( srcClass , [[destClass]] ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { [[cost]] += 1.5f ; } return [[cost]] ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float [[like]] ( Class < ? > srcClass , final Class < ? > [[data]] ) { if ( [[data]] . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , [[data]] ) ; } float [[id]] = 0.0f ; while ( srcClass != null && ! [[data]] . equals ( srcClass ) ) { if ( [[data]] . isInterface ( ) && ClassUtils . isAssignable ( srcClass , [[data]] ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { [[id]] += 1.5f ; } return [[id]] ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 655 ---------------------------------------------
Performs a numeric cast from one type to another . --> Moves the stack after the given factor and bus . --> Socre: 1.0

[[[[Adv]]]]: public void [[cast_numeric]] ( Type [[from]] , Type [[to]] ) { if ( [[from]] != [[to]] ) { if ( [[from]] == Type . DOUBLE_TYPE ) { if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[cast_numeric]] ( Type . INT_TYPE , [[to]] ) ; } } else if ( [[from]] == Type . FLOAT_TYPE ) { if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[cast_numeric]] ( Type . INT_TYPE , [[to]] ) ; } } else if ( [[from]] == Type . LONG_TYPE ) { if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[cast_numeric]] ( Type . INT_TYPE , [[to]] ) ; } } else { if ( [[to]] == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( [[to]] == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( [[to]] == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void [[after]] ( Type [[factor]] , Type [[bus]] ) { if ( [[factor]] != [[bus]] ) { if ( [[factor]] == Type . DOUBLE_TYPE ) { if ( [[bus]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( [[bus]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[after]] ( Type . INT_TYPE , [[bus]] ) ; } } else if ( [[factor]] == Type . FLOAT_TYPE ) { if ( [[bus]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( [[bus]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[after]] ( Type . INT_TYPE , [[bus]] ) ; } } else if ( [[factor]] == Type . LONG_TYPE ) { if ( [[bus]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( [[bus]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[after]] ( Type . INT_TYPE , [[bus]] ) ; } } else { if ( [[bus]] == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( [[bus]] == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( [[bus]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( [[bus]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( [[bus]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( [[bus]] == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 656 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 123 / 523 / 10 / 656:  66%|██████▌   | 656/1000 [13:41<07:10,  1.25s/it][Succeeded / Failed / Skipped / Total] 123 / 524 / 10 / 657:  66%|██████▌   | 657/1000 [13:41<07:09,  1.25s/it][Succeeded / Failed / Skipped / Total] 123 / 525 / 10 / 658:  66%|██████▌   | 658/1000 [13:43<07:08,  1.25s/it][Succeeded / Failed / Skipped / Total] 123 / 525 / 10 / 658:  66%|██████▌   | 659/1000 [13:46<07:07,  1.25s/it][Succeeded / Failed / Skipped / Total] 123 / 526 / 10 / 659:  66%|██████▌   | 659/1000 [13:46<07:07,  1.25s/it][Succeeded / Failed / Skipped / Total] 123 / 527 / 10 / 660:  66%|██████▌   | 660/1000 [13:49<07:07,  1.26s/it][Succeeded / Failed / Skipped / Total] 124 / 527 / 10 / 661:  66%|██████▌   | 661/1000 [13:50<07:05,  1.26s/it][Succeeded / Failed / Skipped / Total] 124 / 527 / 10 / 661:  66%|██████▌   | 662/1000 [13:50<07:04,  1.25s/it][Succeeded / Failed / Skipped / Total] 124 / 528 / 10 / 662:  66%|██████▌   | 662/1000 [13:50<07:04,  1.25s/it]Pushes a zero or null constant to the stack . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[zero_or_null]] ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { switch ( [[type]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[check]] ( Type [[generator]] ) { if ( TypeUtils . isPrimitive ( [[generator]] ) ) { switch ( [[generator]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 657 ---------------------------------------------
Invokes the protected method . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[invoke]] ( Object [[obj]] , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , [[obj]] , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object [[var]] ( Object [[inline]] , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , [[inline]] , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 658 ---------------------------------------------
Performs a quick sort using the specified comparator . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[quickSort]] ( int index , int [[lo]] , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( [[lo]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void [[scope]] ( int index , int [[index]] , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( [[index]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 659 ---------------------------------------------
Chooses a comparator to use for the merge sort . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[mergeSort]] ( int [[index]] , int lo , int hi , Comparator cmp ) { chooseComparer ( [[index]] , cmp ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[trace]] ( int [[b]] , int lo , int hi , Comparator cmp ) { chooseComparer ( [[b]] , cmp ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 660 ---------------------------------------------
Unbox or zero . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[unbox_or_zero]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void [[type]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 661 ---------------------------------------------
Generates code to get a field from the provider . --> Implements the get method . --> Socre: 1.0

[[[[Adv]]]]: private void [[getField]] ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities

[[[[Adv]]]]: private void [[implement]] ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 662 ---------------------------------------------
Sets the superclass of this class . --> [[[FAILED]]]

[[[[Adv]]]]: public void setSuperclass ( Class [[superclass]] ) { if ( [[superclass]] != null && [[superclass]] . equals ( Object . class ) ) { [[superclass]] = null ; } this . [[superclass]] = [[superclass]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void setSuperclass ( Class [[exception]] ) { if ( [[exception]] != null && [[exception]] . equals ( Object . class ) ) { [[exception]] = null ; } this . [[value]] = [[exception]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 663 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 124 / 529 / 10 / 663:  66%|██████▋   | 663/1000 [13:52<07:02,  1.25s/it][Succeeded / Failed / Skipped / Total] 124 / 530 / 10 / 664:  66%|██████▋   | 664/1000 [13:53<07:01,  1.26s/it][Succeeded / Failed / Skipped / Total] 124 / 530 / 10 / 664:  66%|██████▋   | 665/1000 [13:55<07:00,  1.26s/it][Succeeded / Failed / Skipped / Total] 124 / 531 / 10 / 665:  66%|██████▋   | 665/1000 [13:55<07:00,  1.26s/it][Succeeded / Failed / Skipped / Total] 125 / 531 / 10 / 666:  67%|██████▋   | 666/1000 [13:56<06:59,  1.26s/it][Succeeded / Failed / Skipped / Total] 125 / 532 / 10 / 667:  67%|██████▋   | 667/1000 [13:57<06:58,  1.26s/it][Succeeded / Failed / Skipped / Total] 125 / 532 / 10 / 667:  67%|██████▋   | 668/1000 [13:58<06:56,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 533 / 10 / 668:  67%|██████▋   | 668/1000 [13:58<06:56,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 534 / 10 / 669:  67%|██████▋   | 669/1000 [13:59<06:55,  1.25s/it]Filter constructors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[filterConstructors]] ( Class sc , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( sc , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void [[heap]] ( Class sc , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( sc , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 664 ---------------------------------------------
Get all methods from a superclass and an array of interfaces . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[getMethods]] ( Class [[superclass]] , Class [ ] [[interfaces]] , List [[methods]] ) { [[getMethods]] ( [[superclass]] , [[interfaces]] , [[methods]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void [[c]] ( Class [[call]] , Class [ ] [[operator]] , List [[operator]] ) { [[c]] ( [[call]] , [[operator]] , [[operator]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 665 ---------------------------------------------
Adds the signature and exception types for the given method . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]] ( Method [[method]] ) { [[add]] ( ReflectUtils . getSignature ( [[method]] ) , ReflectUtils . getExceptionTypes ( [[method]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[execute]] ( Method [[execute]] ) { [[execute]] ( ReflectUtils . getSignature ( [[execute]] ) , ReflectUtils . getExceptionTypes ( [[execute]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 666 ---------------------------------------------
Find methods by name and descriptor . --> Adds method names and descriptor to an array of methods . --> Socre: 1.0

[[[[Adv]]]]: public static Method [ ] [[findMethods]] ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code

[[[[Adv]]]]: public static Method [ ] [[add]] ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 667 ---------------------------------------------
Compares two null values . --> [[[FAILED]]]

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label [[nonNull]] = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( [[nonNull]] ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( [[nonNull]] ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label [[begins]] = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( [[begins]] ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( [[begins]] ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 668 ---------------------------------------------
Returns the cardinality of this set . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[cardinality]] ( ) { int [[w]] = value ; int c = 0 ; while ( [[w]] != 0 ) { c += T [ [[w]] & 255 ] ; [[w]] >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int [[foo]] ( ) { int [[b]] = value ; int c = 0 ; while ( [[b]] != 0 ) { c += T [ [[b]] & 255 ] ; [[b]] >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 669 ---------------------------------------------
Sets the naming policy . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[merge]] ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 670 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 125 / 535 / 10 / 670:  67%|██████▋   | 670/1000 [13:59<06:53,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 535 / 10 / 670:  67%|██████▋   | 671/1000 [14:02<06:53,  1.26s/it][Succeeded / Failed / Skipped / Total] 125 / 536 / 10 / 671:  67%|██████▋   | 671/1000 [14:02<06:53,  1.26s/it][Succeeded / Failed / Skipped / Total] 125 / 537 / 10 / 672:  67%|██████▋   | 672/1000 [14:04<06:52,  1.26s/it][Succeeded / Failed / Skipped / Total] 125 / 538 / 10 / 673:  67%|██████▋   | 673/1000 [14:05<06:50,  1.26s/it][Succeeded / Failed / Skipped / Total] 125 / 538 / 10 / 673:  67%|██████▋   | 674/1000 [14:05<06:49,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 539 / 10 / 674:  67%|██████▋   | 674/1000 [14:05<06:49,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 540 / 10 / 675:  68%|██████▊   | 675/1000 [14:06<06:47,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 541 / 10 / 676:  68%|██████▊   | 676/1000 [14:07<06:46,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 541 / 10 / 676:  68%|██████▊   | 677/1000 [14:07<06:44,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 542 / 10 / 677:  68%|██████▊   | 677/1000 [14:07<06:44,  1.25s/it]Resolves all bridged classes . --> [[[FAILED]]]

[[[[Adv]]]]: public Map resolveAll ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class [[owner]] = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( [[owner]] . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map resolveAll ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class [[crossings]] = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( [[crossings]] . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 671 ---------------------------------------------
Resolves the given path to the given base path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path [[resolve]] ( final Path [[base]] , String child ) { if ( StringUtil . startsWithChar ( child , File . separatorChar ) ) { child = child . substring ( 1 ) ; } return [[base]] . resolve ( child ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path [[list]] ( final Path [[children]] , String child ) { if ( StringUtil . startsWithChar ( child , File . separatorChar ) ) { child = child . substring ( 1 ) ; } return [[children]] . resolve ( child ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 672 ---------------------------------------------
Creates a new HTTP request to connect to the specified destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[list]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 673 ---------------------------------------------
Sets the host header . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[host]] ( final String [[host]] ) { this . [[host]] = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[manager]] ( final String [[invite]] ) { this . [[friend]] = [[manager]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[manager]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 674 ---------------------------------------------
Creates a GET request with the specified destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[list]] ( final String [[sort]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[sort]] ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 675 ---------------------------------------------
Creates a POST request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[header]] ( final String [[end]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[end]] ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 676 ---------------------------------------------
Reads a string from the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readString]] ( final Path [[path]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[path]] , StandardCharsets . UTF_8 ) ) { StringWriter [[writer]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[ella]] ( final Path [[description]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[description]] , StandardCharsets . UTF_8 ) ) { StringWriter [[template]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 677 ---------------------------------------------
Creates a new request with the given method and destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String [[method]] , final String destination ) { return new HttpRequest ( ) . [[method]] ( [[method]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[procedure]] ( final String [[invite]] , final String destination ) { return new HttpRequest ( ) . [[invite]] ( [[invite]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 678 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 125 / 543 / 10 / 678:  68%|██████▊   | 678/1000 [14:07<06:42,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 544 / 10 / 679:  68%|██████▊   | 679/1000 [14:08<06:41,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 544 / 10 / 679:  68%|██████▊   | 680/1000 [14:10<06:40,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 545 / 10 / 680:  68%|██████▊   | 680/1000 [14:10<06:40,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 546 / 10 / 681:  68%|██████▊   | 681/1000 [14:11<06:38,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 547 / 10 / 682:  68%|██████▊   | 682/1000 [14:12<06:37,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 547 / 10 / 682:  68%|██████▊   | 683/1000 [14:12<06:35,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 548 / 10 / 683:  68%|██████▊   | 683/1000 [14:12<06:35,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 549 / 10 / 684:  68%|██████▊   | 684/1000 [14:12<06:33,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 550 / 10 / 685:  68%|██████▊   | 685/1000 [14:14<06:32,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 550 / 10 / 685:  69%|██████▊   | 686/1000 [14:14<06:31,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 551 / 10 / 686:  69%|██████▊   | 686/1000 [14:14<06:31,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 552 / 10 / 687:  69%|██████▊   | 687/1000 [14:18<06:31,  1.25s/it]Generates code to process an array . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[process_array]] ( CodeEmitter [[e]] , Type type , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = [[e]] . make_local ( ) ; Local loopvar = [[e]] . make_local ( Type . INT_TYPE ) ; Label loopbody = [[e]] . make_label ( ) ; Label checkloop = [[e]] . make_label ( ) ; [[e]] . store_local ( array ) ; [[e]] . push ( 0 ) ; [[e]] . store_local ( loopvar ) ; [[e]] . goTo ( checkloop ) ; [[e]] . mark ( loopbody ) ; [[e]] . load_local ( array ) ; [[e]] . load_local ( loopvar ) ; [[e]] . array_load ( componentType ) ; callback . processElement ( componentType ) ; [[e]] . iinc ( loopvar , 1 ) ; [[e]] . mark ( checkloop ) ; [[e]] . load_local ( loopvar ) ; [[e]] . load_local ( array ) ; [[e]] . arraylength ( ) ; [[e]] . if_icmp ( [[e]] . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void [[compose]] ( CodeEmitter [[array]] , Type type , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = [[array]] . make_local ( ) ; Local loopvar = [[array]] . make_local ( Type . INT_TYPE ) ; Label loopbody = [[array]] . make_label ( ) ; Label checkloop = [[array]] . make_label ( ) ; [[array]] . store_local ( array ) ; [[array]] . push ( 0 ) ; [[array]] . store_local ( loopvar ) ; [[array]] . goTo ( checkloop ) ; [[array]] . mark ( loopbody ) ; [[array]] . load_local ( array ) ; [[array]] . load_local ( loopvar ) ; [[array]] . array_load ( componentType ) ; callback . processElement ( componentType ) ; [[array]] . iinc ( loopvar , 1 ) ; [[array]] . mark ( checkloop ) ; [[array]] . load_local ( loopvar ) ; [[array]] . load_local ( array ) ; [[array]] . arraylength ( ) ; [[array]] . if_icmp ( [[array]] . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 679 ---------------------------------------------
Creates a PUT request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[header]] ( final String [[dump]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[dump]] ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 680 ---------------------------------------------
Creates a DELETE request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[destination]] ( final String [[address]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[address]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 681 ---------------------------------------------
Creates a PATCH request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[root]] ( final String [[end]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[end]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 682 ---------------------------------------------
Creates a HEAD request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[header]] ( final String [[a]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[a]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 683 ---------------------------------------------
Sets the path for the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[path]] ( String [[path]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[ry]] ( String [[a]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 684 ---------------------------------------------
Creates a OPTIONS request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[agent]] ( final String [[menu]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[menu]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 685 ---------------------------------------------
Creates a TRACE request with the specified destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[search]] ( final String [[skip]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[skip]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 686 ---------------------------------------------
Builds the query string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[database]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 687 ---------------------------------------------
Returns the host URL . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[loop]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 688 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 125 / 553 / 10 / 688:  69%|██████▉   | 688/1000 [14:19<06:29,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 553 / 10 / 688:  69%|██████▉   | 689/1000 [14:20<06:28,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 554 / 10 / 689:  69%|██████▉   | 689/1000 [14:20<06:28,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 555 / 10 / 690:  69%|██████▉   | 690/1000 [14:21<06:26,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 556 / 10 / 691:  69%|██████▉   | 691/1000 [14:21<06:25,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 556 / 10 / 691:  69%|██████▉   | 692/1000 [14:21<06:23,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 557 / 10 / 692:  69%|██████▉   | 692/1000 [14:21<06:23,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 558 / 10 / 693:  69%|██████▉   | 693/1000 [14:25<06:23,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 559 / 10 / 694:  69%|██████▉   | 694/1000 [14:27<06:22,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 559 / 10 / 694:  70%|██████▉   | 695/1000 [14:28<06:21,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 560 / 10 / 695:  70%|██████▉   | 695/1000 [14:28<06:21,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 561 / 10 / 696:  70%|██████▉   | 696/1000 [14:28<06:19,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 562 / 10 / 697:  70%|██████▉   | 697/1000 [14:29<06:17,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 562 / 10 / 697:  70%|██████▉   | 698/1000 [14:29<06:16,  1.25s/it]Add a map of query parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[query]] ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > [[entry]] : queryMap . entrySet ( ) ) { [[query]] . add ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest [[array]] ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > [[header]] : queryMap . entrySet ( ) ) { [[array]] . add ( [[header]] . getKey ( ) , [[header]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 689 ---------------------------------------------
Sets the query string . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[queryString]] ( final String [[queryString]] , final boolean [[decode]] ) { this . [[query]] = HttpUtil . parseQuery ( [[queryString]] , [[decode]] ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest [[array]] ( final String [[hello]] , final boolean [[array]] ) { this . [[a]] = HttpUtil . parseQuery ( [[array]] , [[array]] ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 690 ---------------------------------------------
Returns a buffer for the current request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected Buffer [[buffer]] ( final boolean fullRequest ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer [[i]] ( final boolean fullRequest ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 691 ---------------------------------------------
Sends the request and receives the response . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[R]] > [[R]] sendAndReceive ( final Function < HttpResponse , [[R]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < [[xml]] > [[xml]] sendAndReceive ( final Function < HttpResponse , [[xml]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 692 ---------------------------------------------
Set the host header . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String hostPort = this . [[host]] ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[method]] ( ) { String hostPort = this . [[post]] ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 693 ---------------------------------------------
Adds a query parameter to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[query]] ( final String name1 , final Object value1 , final Object ... [[parameters]] ) { [[query]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < [[parameters]] . length ; i += 2 ) { String name = [[parameters]] [ i ] . toString ( ) ; String value = [[parameters]] [ i + 1 ] . toString ( ) ; [[query]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest [[r]] ( final String name1 , final Object value1 , final Object ... [[header]] ) { [[r]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < [[header]] . length ; i += 2 ) { String name = [[header]] [ i ] . toString ( ) ; String value = [[header]] [ i + 1 ] . toString ( ) ; [[r]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 694 ---------------------------------------------
Collects action interceptors from the interceptors manager . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[challenge]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 695 ---------------------------------------------
Collects all action filters from the filters manager . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[exclusion]] ( ) { final Collection < ? extends ActionFilter > [[categories]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[categories]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 696 ---------------------------------------------
Collects all action runtimes . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[take]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 697 ---------------------------------------------
Sets the HTTP Basic Authentication header . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[id]] ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 698 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 125 / 563 / 10 / 698:  70%|██████▉   | 698/1000 [14:29<06:16,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 564 / 10 / 699:  70%|██████▉   | 699/1000 [14:31<06:15,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 565 / 10 / 700:  70%|███████   | 700/1000 [14:33<06:14,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 565 / 10 / 700:  70%|███████   | 701/1000 [14:33<06:12,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 566 / 10 / 701:  70%|███████   | 701/1000 [14:33<06:12,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 567 / 10 / 702:  70%|███████   | 702/1000 [14:35<06:11,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 568 / 10 / 703:  70%|███████   | 703/1000 [14:37<06:10,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 568 / 10 / 703:  70%|███████   | 704/1000 [14:37<06:09,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 569 / 10 / 704:  70%|███████   | 704/1000 [14:37<06:09,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 570 / 10 / 705:  70%|███████   | 705/1000 [14:38<06:07,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 571 / 10 / 706:  71%|███████   | 706/1000 [14:39<06:06,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 571 / 10 / 706:  71%|███████   | 707/1000 [14:40<06:04,  1.25s/it]Collects the action results . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[system]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 699 ---------------------------------------------
Gets the exception table length . --> [[[FAILED]]]

[[[[Adv]]]]: static int [[getExceptionTableLength]] ( final Handler firstHandler ) { int length = 0 ; Handler handler = firstHandler ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int [[main]] ( final Handler firstHandler ) { int length = 0 ; Handler handler = firstHandler ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 700 ---------------------------------------------
Gets the writer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[client]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 701 ---------------------------------------------
Add a set of cookies to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean first = "[[True]]" == "[[True]]" ; for ( Cookie cookie : REPLACEME0 ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { cookieString . append ( "; " ) ; } first = "[[False]]" != "[[False]]" ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean first = "[[only]]" == "[[only]]" ; for ( Cookie cookie : REPLACEME0 ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { cookieString . append ( "; " ) ; } first = "[[first]]" != "[[first]]" ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 702 ---------------------------------------------
Returns the property with the given name or null if not found . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty [[beanProperty]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } else { try { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[head]] > [[head]] getProperty ( final Object bean , final String name ) { BeanProperty [[tail]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[tail]] ) ; return ( [[head]] ) getIndexProperty ( [[tail]] ) ; } else { try { resolveNestedProperties ( [[tail]] ) ; return ( [[head]] ) getIndexProperty ( [[tail]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 703 ---------------------------------------------
Gets an object reference by name . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String [[name]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[name]] ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[pointer]] ( final String [[zero]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[zero]] ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 704 ---------------------------------------------
Sets an object reference . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setObjectReference]] ( final String [[name]] , final Object [[object]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[name]] , [[object]] ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[assume]] ( final String [[empty]] , final Object [[table]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[empty]] , [[table]] ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 705 ---------------------------------------------
Sets the value of a simple property . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty [[bp]] , final Object value ) { Setter [[setter]] = [[bp]] . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[exception]] ( final BeanProperty [[integer]] , final Object value ) { Setter [[b]] = [[integer]] . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 706 ---------------------------------------------
Extract this reference from property name . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String [[propertyName]] ) { int ndx = StringUtil . indexOfChars ( [[propertyName]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[propertyName]] ; } return [[propertyName]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[update]] ( final String [[data]] ) { int ndx = StringUtil . indexOfChars ( [[data]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[data]] ; } return [[data]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 707 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 125 / 572 / 10 / 707:  71%|███████   | 707/1000 [14:40<06:04,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 573 / 10 / 708:  71%|███████   | 708/1000 [14:40<06:03,  1.24s/it][Succeeded / Failed / Skipped / Total] 125 / 574 / 10 / 709:  71%|███████   | 709/1000 [14:44<06:02,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 574 / 10 / 709:  71%|███████   | 710/1000 [14:45<06:01,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 575 / 10 / 710:  71%|███████   | 710/1000 [14:45<06:01,  1.25s/it][Succeeded / Failed / Skipped / Total] 125 / 576 / 10 / 711:  71%|███████   | 711/1000 [14:46<06:00,  1.25s/it][Succeeded / Failed / Skipped / Total] 126 / 576 / 10 / 712:  71%|███████   | 712/1000 [14:46<05:58,  1.24s/it][Succeeded / Failed / Skipped / Total] 126 / 576 / 10 / 712:  71%|███████▏  | 713/1000 [14:46<05:56,  1.24s/it][Succeeded / Failed / Skipped / Total] 126 / 577 / 10 / 713:  71%|███████▏  | 713/1000 [14:46<05:56,  1.24s/it][Succeeded / Failed / Skipped / Total] 126 / 578 / 10 / 714:  71%|███████▏  | 714/1000 [14:49<05:56,  1.25s/it][Succeeded / Failed / Skipped / Total] 126 / 579 / 10 / 715:  72%|███████▏  | 715/1000 [14:54<05:56,  1.25s/it][Succeeded / Failed / Skipped / Total] 126 / 579 / 10 / 715:  72%|███████▏  | 716/1000 [14:54<05:54,  1.25s/it]Remove a range of handlers . --> [[[FAILED]]]

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler [[firstHandler]] , final Label start , final Label end ) { if ( [[firstHandler]] == null ) { return null ; } else { [[firstHandler]] . nextHandler = [[removeRange]] ( [[firstHandler]] . nextHandler , start , end ) ; } int handlerStart = [[firstHandler]] . startPc . bytecodeOffset ; int handlerEnd = [[firstHandler]] . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[assignment]] ( final Handler [[base]] , final Label start , final Label end ) { if ( [[base]] == null ) { return null ; } else { [[base]] . nextHandler = [[assignment]] ( [[base]] . nextHandler , start , end ) ; } int handlerStart = [[base]] . startPc . bytecodeOffset ; int handlerEnd = [[base]] . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 708 ---------------------------------------------
Looks up an object reference . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[lookupObject]] ( final String ref ) { Object value = getObjectReference ( ref ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[referenced]] ( final String ref ) { Object value = getObjectReference ( ref ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 709 ---------------------------------------------
Gets the descriptor for a table . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor getTableDescriptor ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[tableRef]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor getTableDescriptor ( final String [[pointer]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[pointer]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 710 ---------------------------------------------
Registers a hint . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[loop]] ( final String [[names]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[names]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 711 ---------------------------------------------
Gets the table alias . --> [[[FAILED]]]

[[[[Adv]]]]: public String getTableAlias ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[tableRef]] ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String getTableAlias ( final String [[fetch]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[fetch]] ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 712 ---------------------------------------------
Find table descriptor by column ref . --> Returns the DbEntityDescriptor for the given columnRef --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String columnRef ) { for ( Map . Entry < String , TableRefData > [[entry]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[ded]] = [[entry]] . getValue ( ) . desc ; if ( [[ded]] . findByPropertyName ( columnRef ) != null ) { return [[ded]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[function]] ( final String columnRef ) { for ( Map . Entry < String , TableRefData > [[input]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[parameter]] = [[input]] . getValue ( ) . desc ; if ( [[parameter]] . findByPropertyName ( columnRef ) != null ) { return [[parameter]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 713 ---------------------------------------------
Lookup table descriptor by table reference . --> [[[FAILED]]]

[[[[Adv]]]]: protected DbEntityDescriptor lookupTableRef ( final String [[tableRef]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[tableRef]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[tableRef]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor lookupTableRef ( final String [[p]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[p]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[p]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 714 ---------------------------------------------
Writes the value to the JSON context . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public final boolean [[serialize]] ( final JsonContext [[jsonContext]] , final T [[value]] ) { if ( [[jsonContext]] . pushValue ( [[value]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean [[test]] ( final JsonContext [[statement]] , final T [[function]] ) { if ( [[statement]] . pushValue ( [[function]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 715 ---------------------------------------------
Register table reference . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerTableReference]] ( final String [[tableReference]] , final DbEntityDescriptor [[ded]] , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[t]] = new TableRefData ( [[ded]] , tableAlias ) ; if ( tableRefs . put ( [[tableReference]] , [[t]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[tableReference]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[since]] ( final String [[start]] , final DbEntityDescriptor [[change]] , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[next]] = new TableRefData ( [[change]] , tableAlias ) ; if ( tableRefs . put ( [[start]] , [[next]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[start]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 716 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 126 / 580 / 10 / 716:  72%|███████▏  | 716/1000 [14:54<05:54,  1.25s/it][Succeeded / Failed / Skipped / Total] 126 / 581 / 10 / 717:  72%|███████▏  | 717/1000 [14:56<05:53,  1.25s/it][Succeeded / Failed / Skipped / Total] 126 / 582 / 10 / 718:  72%|███████▏  | 718/1000 [14:57<05:52,  1.25s/it][Succeeded / Failed / Skipped / Total] 126 / 582 / 10 / 718:  72%|███████▏  | 719/1000 [15:00<05:51,  1.25s/it][Succeeded / Failed / Skipped / Total] 126 / 583 / 10 / 719:  72%|███████▏  | 719/1000 [15:00<05:51,  1.25s/it][Succeeded / Failed / Skipped / Total] 126 / 584 / 10 / 720:  72%|███████▏  | 720/1000 [15:00<05:50,  1.25s/it][Succeeded / Failed / Skipped / Total] 126 / 585 / 10 / 721:  72%|███████▏  | 721/1000 [15:07<05:51,  1.26s/it][Succeeded / Failed / Skipped / Total] 126 / 585 / 10 / 721:  72%|███████▏  | 722/1000 [15:07<05:49,  1.26s/it][Succeeded / Failed / Skipped / Total] 126 / 586 / 10 / 722:  72%|███████▏  | 722/1000 [15:07<05:49,  1.26s/it][Succeeded / Failed / Skipped / Total] 126 / 587 / 10 / 723:  72%|███████▏  | 723/1000 [15:08<05:48,  1.26s/it]Apply to column name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String columnName ) { String propertyName = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[foo]] ( final String columnName ) { String propertyName = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 717 ---------------------------------------------
Convert property name to column name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String [[propertyName]] ) { StringBuilder tableName = new StringBuilder ( [[propertyName]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[propertyName]] , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( [[propertyName]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[example]] ( final String [[structure]] ) { StringBuilder tableName = new StringBuilder ( [[structure]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[structure]] , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( [[structure]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 718 ---------------------------------------------
Prepares to convert the given value to the given destination type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[a]] > [[a]] prepareGetValue ( final T t , final Class < [[a]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[a]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 719 ---------------------------------------------
Creates a new instance of the wrapper class . --> [[[FAILED]]]

[[[[Adv]]]]: protected < R extends T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R extends T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 720 ---------------------------------------------
Returns a set containing all the wrappers . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > [[set]] = new HashSet <> ( wrappers . size ( ) ) ; [[set]] . addAll ( wrappers . values ( ) ) ; return [[set]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[message]] ( ) { final Set < T > [[error]] = new HashSet <> ( wrappers . size ( ) ) ; [[error]] . addAll ( wrappers . values ( ) ) ; return [[error]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 721 ---------------------------------------------
Converts the given path separators to the system separators . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[function]] ( final String [[form]] ) { if ( [[form]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[form]] ) ; } else { return separatorsToUnix ( [[form]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 722 ---------------------------------------------
Store value . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[storeValue]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void [[assignment]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 723 ---------------------------------------------
Resolves a wrapper for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > [[wrapperClass]] ) { String [[wrapperClassName]] = [[wrapperClass]] . getName ( ) ; T [[wrapper]] = lookup ( [[wrapperClassName]] ) ; if ( [[wrapper]] == null ) { [[wrapper]] = createWrapper ( [[wrapperClass]] ) ; initializeWrapper ( [[wrapper]] ) ; wrappers . put ( [[wrapperClassName]] , [[wrapper]] ) ; } return [[wrapper]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > [[file]] ) { String [[template]] = [[file]] . getName ( ) ; T [[ft]] = lookup ( [[template]] ) ; if ( [[ft]] == null ) { [[ft]] = createWrapper ( [[file]] ) ; initializeWrapper ( [[ft]] ) ; wrappers . put ( [[template]] , [[ft]] ) ; } return [[ft]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 724 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 126 / 588 / 10 / 724:  72%|███████▏  | 724/1000 [15:09<05:46,  1.26s/it][Succeeded / Failed / Skipped / Total] 126 / 588 / 10 / 724:  72%|███████▎  | 725/1000 [15:12<05:46,  1.26s/it][Succeeded / Failed / Skipped / Total] 126 / 589 / 10 / 725:  72%|███████▎  | 725/1000 [15:12<05:46,  1.26s/it][Succeeded / Failed / Skipped / Total] 126 / 590 / 10 / 726:  73%|███████▎  | 726/1000 [15:14<05:44,  1.26s/it][Succeeded / Failed / Skipped / Total] 126 / 591 / 10 / 727:  73%|███████▎  | 727/1000 [15:15<05:43,  1.26s/it][Succeeded / Failed / Skipped / Total] 126 / 591 / 10 / 727:  73%|███████▎  | 728/1000 [15:18<05:43,  1.26s/it][Succeeded / Failed / Skipped / Total] 126 / 592 / 10 / 728:  73%|███████▎  | 728/1000 [15:18<05:43,  1.26s/it][Succeeded / Failed / Skipped / Total] 126 / 593 / 10 / 729:  73%|███████▎  | 729/1000 [15:18<05:41,  1.26s/it]Injects the attributes from the servlet request into the given targets . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectAttributes]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String [[attrName]] = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[attrName]] ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( [[attrName]] ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void [[since]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String [[a]] = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[a]] ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( [[a]] ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 725 ---------------------------------------------
Registers an action config to the web app . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A [[rich]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 726 ---------------------------------------------
Registers a madvoc component . --> [[[FAILED]]]

[[[[Adv]]]]: public WebApp [[registerComponent]] ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp [[list]] ( final Class < ? > [[file]] ) { Objects . requireNonNull ( [[file]] ) ; madvocComponents . add ( ClassConsumer . of ( [[file]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 727 ---------------------------------------------
Starts the web application . --> [[[FAILED]]]

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[library]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 728 ---------------------------------------------
Returns the relative path of the target path relative to the base path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[relativePath]] ( final String [[targetPath]] , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( [[targetPath]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[example]] ( final String [[definition]] , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( [[definition]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 729 ---------------------------------------------
Registers the Madvoc components . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[merge]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 730 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 126 / 594 / 10 / 730:  73%|███████▎  | 730/1000 [15:19<05:40,  1.26s/it][Succeeded / Failed / Skipped / Total] 126 / 594 / 10 / 730:  73%|███████▎  | 731/1000 [15:24<05:40,  1.27s/it][Succeeded / Failed / Skipped / Total] 126 / 595 / 10 / 731:  73%|███████▎  | 731/1000 [15:24<05:40,  1.27s/it][Succeeded / Failed / Skipped / Total] 126 / 596 / 10 / 732:  73%|███████▎  | 732/1000 [15:25<05:38,  1.26s/it][Succeeded / Failed / Skipped / Total] 126 / 597 / 10 / 733:  73%|███████▎  | 733/1000 [15:26<05:37,  1.26s/it][Succeeded / Failed / Skipped / Total] 126 / 597 / 10 / 733:  73%|███████▎  | 734/1000 [15:26<05:35,  1.26s/it][Succeeded / Failed / Skipped / Total] 126 / 598 / 10 / 734:  73%|███████▎  | 734/1000 [15:26<05:35,  1.26s/it][Succeeded / Failed / Skipped / Total] 126 / 599 / 10 / 735:  74%|███████▎  | 735/1000 [15:27<05:34,  1.26s/it]Configures default actions . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[empty]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 731 ---------------------------------------------
Convert column name to property name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean [[toUpper]] = "[[False]]" != "[[False]]" ; for ( int [[i]] = 0 ; [[i]] < len ; [[i]] ++ ) { char c = columnName . charAt ( [[i]] ) ; if ( c == separatorChar ) { [[toUpper]] = "True" == "True" ; continue ; } if ( [[toUpper]] ) { propertyName . append ( Character . toUpperCase ( c ) ) ; [[toUpper]] = "[[False]]" != "[[False]]" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[string]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean [[foo]] = "[[true]]" != "[[true]]" ; for ( int [[u]] = 0 ; [[u]] < len ; [[u]] ++ ) { char c = columnName . charAt ( [[u]] ) ; if ( c == separatorChar ) { [[foo]] = "True" == "True" ; continue ; } if ( [[foo]] ) { propertyName . append ( Character . toUpperCase ( c ) ) ; [[foo]] = "[[true]]" != "[[true]]" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 732 ---------------------------------------------
Exclude classes from scanning . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[excludeJars]] ( final String ... [[excludedJars]] ) { for ( final String excludedJar : [[excludedJars]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner [[ant]] ( final String ... [[list]] ) { for ( final String excludedJar : [[list]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 733 ---------------------------------------------
Get the path from the filename . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[doGetPath]] ( final String [[filename]] , final int separatorAdd ) { if ( [[filename]] == null ) { return null ; } int [[prefix]] = getPrefixLength ( [[filename]] ) ; if ( [[prefix]] < 0 ) { return null ; } int index = indexOfLastSeparator ( [[filename]] ) ; int endIndex = index + separatorAdd ; if ( [[prefix]] >= [[filename]] . length ( ) || index < 0 || [[prefix]] >= endIndex ) { return StringPool . EMPTY ; } return [[filename]] . substring ( [[prefix]] , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[i]] ( final String [[end]] , final int separatorAdd ) { if ( [[end]] == null ) { return null ; } int [[id]] = getPrefixLength ( [[end]] ) ; if ( [[id]] < 0 ) { return null ; } int index = indexOfLastSeparator ( [[end]] ) ; int endIndex = index + separatorAdd ; if ( [[id]] >= [[end]] . length ( ) || index < 0 || [[id]] >= endIndex ) { return StringPool . EMPTY ; } return [[end]] . substring ( [[id]] , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 734 ---------------------------------------------
Include one or more rules jars . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[includeJars]] ( final String ... [[includedJars]] ) { for ( final String includedJar : [[includedJars]] ) { rulesJars . include ( includedJar ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner [[end]] ( final String ... [[i]] ) { for ( final String includedJar : [[i]] ) { rulesJars . include ( includedJar ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 735 ---------------------------------------------
Adds the given rules entries to the scanner . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... includedEntries ) { for ( final String [[includedEntry]] : includedEntries ) { rulesEntries . include ( [[includedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... includedEntries ) { for ( final String [[a]] : includedEntries ) { rulesEntries . include ( [[a]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 736 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 126 / 600 / 10 / 736:  74%|███████▎  | 736/1000 [15:30<05:33,  1.26s/it][Succeeded / Failed / Skipped / Total] 126 / 600 / 10 / 736:  74%|███████▎  | 737/1000 [15:31<05:32,  1.26s/it][Succeeded / Failed / Skipped / Total] 126 / 601 / 10 / 737:  74%|███████▎  | 737/1000 [15:31<05:32,  1.26s/it][Succeeded / Failed / Skipped / Total] 126 / 602 / 10 / 738:  74%|███████▍  | 738/1000 [15:31<05:30,  1.26s/it][Succeeded / Failed / Skipped / Total] 126 / 603 / 10 / 739:  74%|███████▍  | 739/1000 [15:34<05:29,  1.26s/it][Succeeded / Failed / Skipped / Total] 126 / 603 / 10 / 739:  74%|███████▍  | 740/1000 [15:35<05:28,  1.26s/it][Succeeded / Failed / Skipped / Total] 126 / 604 / 10 / 740:  74%|███████▍  | 740/1000 [15:35<05:28,  1.26s/it]Splits a filename into its path and extension . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] [[split]] ( final String [[filename]] ) { String [[prefix]] = getPrefix ( [[filename]] ) ; if ( [[prefix]] == null ) { [[prefix]] = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[filename]] ) ; int lastExtensionIndex = indexOfExtension ( [[filename]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( [[prefix]] . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( [[prefix]] . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[filename]] . substring ( [[prefix]] . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( [[prefix]] . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( [[prefix]] . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { [[prefix]] , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] [[procedure]] ( final String [[array]] ) { String [[flow]] = getPrefix ( [[array]] ) ; if ( [[flow]] == null ) { [[flow]] = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[array]] ) ; int lastExtensionIndex = indexOfExtension ( [[array]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[array]] . substring ( [[flow]] . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[array]] . substring ( [[flow]] . length ( ) , lastExtensionIndex ) ; extension = [[array]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[array]] . substring ( [[flow]] . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[array]] . substring ( [[flow]] . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[array]] . substring ( [[flow]] . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[array]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { [[flow]] , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 737 ---------------------------------------------
Inject uploaded files into the target list . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[name]] = in . matchedName ( paramName ) ; if ( [[name]] != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( [[name]] , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[fore]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[a]] = in . matchedName ( paramName ) ; if ( [[a]] != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( [[a]] , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 738 ---------------------------------------------
Exclude one or more rules from scanning . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... excludedEntries ) { for ( final String [[excludedEntry]] : excludedEntries ) { rulesEntries . exclude ( [[excludedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... excludedEntries ) { for ( final String [[a]] : excludedEntries ) { rulesEntries . exclude ( [[a]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 739 ---------------------------------------------
Returns the bytecode signature of a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class [[type]] ) { final String [[name]] = ' ' + [[type]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[name]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[format]] ( final Class [[example]] ) { final String [[field]] = ' ' + [[example]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[field]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 740 ---------------------------------------------
Returns the default scope or the initial scope if the scope class is null . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[php]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 741 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 127 / 604 / 10 / 741:  74%|███████▍  | 741/1000 [15:35<05:26,  1.26s/it][Succeeded / Failed / Skipped / Total] 127 / 605 / 10 / 742:  74%|███████▍  | 742/1000 [15:36<05:25,  1.26s/it][Succeeded / Failed / Skipped / Total] 127 / 605 / 10 / 742:  74%|███████▍  | 743/1000 [15:42<05:25,  1.27s/it][Succeeded / Failed / Skipped / Total] 127 / 606 / 10 / 743:  74%|███████▍  | 743/1000 [15:42<05:25,  1.27s/it][Succeeded / Failed / Skipped / Total] 127 / 607 / 10 / 744:  74%|███████▍  | 744/1000 [15:45<05:25,  1.27s/it][Succeeded / Failed / Skipped / Total] 127 / 608 / 10 / 745:  74%|███████▍  | 745/1000 [15:46<05:23,  1.27s/it][Succeeded / Failed / Skipped / Total] 127 / 608 / 10 / 745:  75%|███████▍  | 746/1000 [15:48<05:22,  1.27s/it][Succeeded / Failed / Skipped / Total] 127 / 609 / 10 / 746:  75%|███████▍  | 746/1000 [15:48<05:22,  1.27s/it]Scans the given paths for classes . --> Adds a link to the list of files to scan --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... [[paths]] ) { for ( final String path : [[paths]] ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[bar]] ( final String ... [[link]] ) { for ( final String path : [[link]] ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 742 ---------------------------------------------
Starts the scan . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[mode]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 743 ---------------------------------------------
Get or init scope . --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope [[getOrInitScope]] ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( madvocScopeType ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope [[loop]] ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( madvocScopeType ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 744 ---------------------------------------------
Creates a new JtxTransaction . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode [[tm]] , final Object [[scope]] , final boolean active ) { return new DbJtxTransaction ( this , [[tm]] , [[scope]] , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[error]] ( final JtxTransactionMode [[name]] , final Object [[list]] , final boolean active ) { return new DbJtxTransaction ( this , [[name]] , [[list]] , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 745 ---------------------------------------------
Scan the classpath for classes . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanClassPath]] ( final File [[root]] ) { String rootPath = [[root]] . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( rootPath ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void [[unless]] ( final File [[extension]] ) { String rootPath = [[extension]] . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( rootPath ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 746 ---------------------------------------------
Injects the request parameters into the given targets . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest servletRequest , final Targets [[targets]] ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > [[paramNames]] = servletRequest . getParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { final String [[paramName]] = [[paramNames]] . nextElement ( ) ; if ( servletRequest . getAttribute ( [[paramName]] ) != null ) { continue ; } [[targets]] . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[paramName]] ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( [[paramName]] ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[pairs]] ( final HttpServletRequest servletRequest , final Targets [[data]] ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > [[ex]] = servletRequest . getParameterNames ( ) ; while ( [[ex]] . hasMoreElements ( ) ) { final String [[encoding]] = [[ex]] . nextElement ( ) ; if ( servletRequest . getAttribute ( [[encoding]] ) != null ) { continue ; } [[data]] . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[encoding]] ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( [[encoding]] ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 747 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 127 / 610 / 10 / 747:  75%|███████▍  | 747/1000 [15:48<05:21,  1.27s/it][Succeeded / Failed / Skipped / Total] 127 / 611 / 10 / 748:  75%|███████▍  | 748/1000 [15:51<05:20,  1.27s/it][Succeeded / Failed / Skipped / Total] 127 / 611 / 10 / 748:  75%|███████▍  | 749/1000 [15:52<05:19,  1.27s/it][Succeeded / Failed / Skipped / Total] 127 / 612 / 10 / 749:  75%|███████▍  | 749/1000 [15:52<05:19,  1.27s/it][Succeeded / Failed / Skipped / Total] 128 / 612 / 10 / 750:  75%|███████▌  | 750/1000 [15:54<05:18,  1.27s/it][Succeeded / Failed / Skipped / Total] 128 / 613 / 10 / 751:  75%|███████▌  | 751/1000 [15:55<05:16,  1.27s/it][Succeeded / Failed / Skipped / Total] 128 / 613 / 10 / 751:  75%|███████▌  | 752/1000 [15:56<05:15,  1.27s/it][Succeeded / Failed / Skipped / Total] 128 / 614 / 10 / 752:  75%|███████▌  | 752/1000 [15:56<05:15,  1.27s/it]Scans a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanJarFile]] ( final File file ) { final ZipFile [[zipFile]] ; try { [[zipFile]] = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = [[zipFile]] . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[zipFile]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[zipFile]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( [[zipFile]] ) ; throw rex ; } } } ZipUtil . close ( [[zipFile]] ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void [[release]] ( final File file ) { final ZipFile [[end]] ; try { [[end]] = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = [[end]] . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[end]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[end]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( [[end]] ) ; throw rex ; } } } ZipUtil . close ( [[end]] ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 748 ---------------------------------------------
Registers the given consumer with the given scope type . --> [[[FAILED]]]

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > [[scopeType]] , final Consumer < MadvocScope > [[madvocScopeConsumer]] ) { final MadvocScope [[scope]] = getOrInitScope ( [[scopeType]] ) ; [[madvocScopeConsumer]] . accept ( [[scope]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > [[index]] , final Consumer < MadvocScope > [[array]] ) { final MadvocScope [[arrays]] = getOrInitScope ( [[index]] ) ; [[array]] . accept ( [[arrays]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 749 ---------------------------------------------
Prepares a CSRF token for use in a request . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[prepareCsrfToken]] ( final HttpSession [[session]] , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) [[session]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; [[session]] . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[id]] ( final HttpSession [[null]] , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) [[null]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; [[null]] . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 750 ---------------------------------------------
Makes a deep copy of this object . --> dummy method to create a dummy BeanUtilBean --> Socre: 1.0

[[[[Adv]]]]: public void [[copy]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[[True]]" == "[[True]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void [[dummy]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[[boo]]" == "[[boo]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 751 ---------------------------------------------
Creates a copy of the given source object . --> [[[FAILED]]]

[[[[Adv]]]]: public static BeanCopy from ( final Object [[source]] ) { BeanCopy [[beanCopy]] = new BeanCopy ( [[source]] ) ; [[beanCopy]] . isSourceMap = [[source]] instanceof Map ; return [[beanCopy]] ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy from ( final Object [[target]] ) { BeanCopy [[map]] = new BeanCopy ( [[target]] ) ; [[map]] . isSourceMap = [[target]] instanceof Map ; return [[map]] ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 752 ---------------------------------------------
Resolves a scope of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[ui]] Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 753 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 128 / 615 / 10 / 753:  75%|███████▌  | 753/1000 [15:59<05:14,  1.27s/it][Succeeded / Failed / Skipped / Total] 129 / 615 / 10 / 754:  75%|███████▌  | 754/1000 [16:01<05:13,  1.28s/it][Succeeded / Failed / Skipped / Total] 129 / 615 / 10 / 754:  76%|███████▌  | 755/1000 [16:05<05:13,  1.28s/it][Succeeded / Failed / Skipped / Total] 129 / 616 / 10 / 755:  76%|███████▌  | 755/1000 [16:05<05:13,  1.28s/it][Succeeded / Failed / Skipped / Total] 129 / 617 / 10 / 756:  76%|███████▌  | 756/1000 [16:07<05:12,  1.28s/it][Succeeded / Failed / Skipped / Total] 129 / 618 / 10 / 757:  76%|███████▌  | 757/1000 [16:16<05:13,  1.29s/it][Succeeded / Failed / Skipped / Total] 129 / 618 / 10 / 757:  76%|███████▌  | 758/1000 [16:17<05:12,  1.29s/it]Visit a property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected boolean [[visitProperty]] ( String [[name]] , final Object value ) { if ( isTargetMap ) { [[name]] = LEFT_SQ_BRACKET + [[name]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[name]] , value ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean [[declaration]] ( String [[values]] , final Object value ) { if ( isTargetMap ) { [[values]] = LEFT_SQ_BRACKET + [[values]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[values]] , value ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 754 ---------------------------------------------
Remove the bean with the given type . --> Add an example to the array --> Socre: 1.0

[[[[Adv]]]]: public void [[removeBean]] ( final Class [[type]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[array]] ( final Class [[example]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 755 ---------------------------------------------
Ensures that the given set has at least maxTokensPerSession tokens . --> [[[FAILED]]]

[[[[Adv]]]]: protected static void [[assureSize]] ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token [[tokenToRemove]] = null ; Iterator < Token > iterator = tokenSet . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; [[tokenToRemove]] = token ; } } if ( ( [[tokenToRemove]] != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( [[tokenToRemove]] ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void [[then]] ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token [[array]] = null ; Iterator < Token > iterator = tokenSet . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; [[array]] = token ; } } if ( ( [[array]] != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( [[array]] ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 756 ---------------------------------------------
Registers the table reference . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[init]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . [[tableReference]] ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void [[assume]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . [[table]] ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 757 ---------------------------------------------
Register a bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: protected void registerBean ( final String [[name]] , final BeanDefinition beanDefinition ) { beans . put ( [[name]] , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( [[name]] . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void registerBean ( final String [[alice]] , final BeanDefinition beanDefinition ) { beans . put ( [[alice]] , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( [[alice]] . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 758 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 129 / 619 / 10 / 758:  76%|███████▌  | 758/1000 [16:17<05:12,  1.29s/it][Succeeded / Failed / Skipped / Total] 129 / 619 / 10 / 758:  76%|███████▌  | 759/1000 [16:19<05:10,  1.29s/it][Succeeded / Failed / Skipped / Total] 129 / 620 / 10 / 759:  76%|███████▌  | 759/1000 [16:19<05:10,  1.29s/it][Succeeded / Failed / Skipped / Total] 129 / 620 / 10 / 759:  76%|███████▌  | 760/1000 [16:21<05:09,  1.29s/it][Succeeded / Failed / Skipped / Total] 129 / 621 / 10 / 760:  76%|███████▌  | 760/1000 [16:21<05:09,  1.29s/it][Succeeded / Failed / Skipped / Total] 129 / 621 / 10 / 760:  76%|███████▌  | 761/1000 [16:25<05:09,  1.29s/it][Succeeded / Failed / Skipped / Total] 130 / 621 / 10 / 761:  76%|███████▌  | 761/1000 [16:25<05:09,  1.29s/it][Succeeded / Failed / Skipped / Total] 130 / 621 / 10 / 761:  76%|███████▌  | 762/1000 [16:26<05:08,  1.29s/it]Check CSRF token . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[checkCsrfToken]] ( final HttpSession [[session]] , final String [[tokenValue]] ) { Set < Token > [[tokenSet]] = ( Set < Token > ) [[session]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( [[tokenSet]] == null ) && ( [[tokenValue]] == null ) ) { return "True" == "True" ; } if ( ( [[tokenSet]] == null ) || ( [[tokenValue]] == null ) ) { return "False" != "False" ; } boolean [[found]] = "False" != "False" ; Iterator < Token > it = [[tokenSet]] . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[tokenValue]] ) ) { it . remove ( ) ; [[found]] = "True" == "True" ; } } return [[found]] ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[loop]] ( final HttpSession [[message]] , final String [[messages]] ) { Set < Token > [[that]] = ( Set < Token > ) [[message]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( [[that]] == null ) && ( [[messages]] == null ) ) { return "True" == "True" ; } if ( ( [[that]] == null ) || ( [[messages]] == null ) ) { return "False" != "False" ; } boolean [[message]] = "False" != "False" ; Iterator < Token > it = [[that]] . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[messages]] ) ) { it . remove ( ) ; [[message]] = "True" == "True" ; } } return [[message]] ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 759 ---------------------------------------------
Decode the given char array into a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[decode]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int [[cnt]] = endx - sndx + 1 ; int [[sepCnt]] = length > 76 ? ( arr [ 76 ] == ' ' ? [[cnt]] / 78 : 0 ) << 1 : 0 ; int [[len]] = ( ( [[cnt]] - [[sepCnt]] ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ [[len]] ] ; int d = 0 ; for ( int cc = 0 , eLen = ( [[len]] / 3 ) * 3 ; d < eLen ; ) { int [[i]] = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( [[i]] >> 16 ) ; dest [ d ++ ] = ( byte ) ( [[i]] >> 8 ) ; dest [ d ++ ] = ( byte ) [[i]] ; if ( [[sepCnt]] > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < [[len]] ) { int [[i]] = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { [[i]] |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < [[len]] ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( [[i]] >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] [[before]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int [[frame]] = endx - sndx + 1 ; int [[header]] = length > 76 ? ( arr [ 76 ] == ' ' ? [[frame]] / 78 : 0 ) << 1 : 0 ; int [[base]] = ( ( [[frame]] - [[header]] ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ [[base]] ] ; int d = 0 ; for ( int cc = 0 , eLen = ( [[base]] / 3 ) * 3 ; d < eLen ; ) { int [[call]] = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( [[call]] >> 16 ) ; dest [ d ++ ] = ( byte ) ( [[call]] >> 8 ) ; dest [ d ++ ] = ( byte ) [[call]] ; if ( [[header]] > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < [[base]] ) { int [[call]] = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { [[call]] |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < [[base]] ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( [[call]] >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 760 ---------------------------------------------
Registers a petite bean . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > BeanDefinition < T > [[registerPetiteBean]] ( final Class < T > [[type]] , String name , Class < ? extends Scope > [[scopeType]] , WiringMode wiringMode , final boolean define , final Consumer < T > [[consumer]] ) { if ( name == null ) { name = resolveBeanName ( [[type]] ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( [[type]] ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( [[scopeType]] == null ) { [[scopeType]] = annotationResolver . resolveBeanScopeType ( [[type]] ) ; } if ( [[scopeType]] == null ) { [[scopeType]] = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > [[state]] ( final Class < T > [[parent]] , String name , Class < ? extends Scope > [[definition]] , WiringMode wiringMode , final boolean define , final Consumer < T > [[start]] ) { if ( name == null ) { name = resolveBeanName ( [[parent]] ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( [[parent]] ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( [[definition]] == null ) { [[definition]] = annotationResolver . resolveBeanScopeType ( [[parent]] ) ; } if ( [[definition]] == null ) { [[definition]] = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 761 ---------------------------------------------
Registers a property injection point . --> Queries the bean definition for the given result and adds it to the bean definition --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetitePropertyInjectionPoint]] ( final String [[beanName]] , final String [[property]] , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[property]] , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[property]] ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint [[pip]] = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( [[pip]] ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void [[query]] ( final String [[reference]] , final String [[result]] , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[reference]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[result]] , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[result]] ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint [[end]] = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( [[end]] ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 762 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 130 / 622 / 10 / 762:  76%|███████▌  | 762/1000 [16:26<05:08,  1.29s/it][Succeeded / Failed / Skipped / Total] 130 / 622 / 10 / 762:  76%|███████▋  | 763/1000 [16:34<05:08,  1.30s/it][Succeeded / Failed / Skipped / Total] 130 / 623 / 10 / 763:  76%|███████▋  | 763/1000 [16:34<05:08,  1.30s/it][Succeeded / Failed / Skipped / Total] 130 / 623 / 10 / 763:  76%|███████▋  | 764/1000 [16:39<05:08,  1.31s/it][Succeeded / Failed / Skipped / Total] 130 / 624 / 10 / 764:  76%|███████▋  | 764/1000 [16:39<05:08,  1.31s/it][Succeeded / Failed / Skipped / Total] 130 / 624 / 10 / 764:  76%|███████▋  | 765/1000 [16:39<05:07,  1.31s/it][Succeeded / Failed / Skipped / Total] 130 / 625 / 10 / 765:  76%|███████▋  | 765/1000 [16:39<05:07,  1.31s/it][Succeeded / Failed / Skipped / Total] 130 / 625 / 10 / 765:  77%|███████▋  | 766/1000 [16:42<05:06,  1.31s/it]Resolve bean names for a given type . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class [[type]] ) { String [ ] [[beanNames]] = beanCollections . get ( [[type]] ) ; if ( [[beanNames]] != null ) { return [[beanNames]] ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[type]] ) ) { String [[beanName]] = entry . getKey ( ) ; list . add ( [[beanName]] ) ; } } if ( list . isEmpty ( ) ) { [[beanNames]] = StringPool . EMPTY_ARRAY ; } else { [[beanNames]] = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[type]] , [[beanNames]] ) ; return [[beanNames]] ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[heap]] ( final Class [[stack]] ) { String [ ] [[foo]] = beanCollections . get ( [[stack]] ) ; if ( [[foo]] != null ) { return [[foo]] ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[stack]] ) ) { String [[words]] = entry . getKey ( ) ; list . add ( [[words]] ) ; } } if ( list . isEmpty ( ) ) { [[foo]] = StringPool . EMPTY_ARRAY ; } else { [[foo]] = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[stack]] , [[foo]] ) ; return [[foo]] ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 763 ---------------------------------------------
Registers a set injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteSetInjectionPoint]] ( final String [[beanName]] , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "[[True]]" == "[[True]]" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void [[read]] ( final String [[concept]] , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[concept]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "[[function]]" == "[[function]]" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 764 ---------------------------------------------
Registers the Petite destroy methods . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteDestroyMethods]] ( final String beanName , String ... [[destroyMethodNames]] ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; if ( [[destroyMethodNames]] == null ) { [[destroyMethodNames]] = StringPool . EMPTY_ARRAY ; } int total = [[destroyMethodNames]] . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[destroyMethodNames]] . length ; i ++ ) { MethodDescriptor [[md]] = [[cd]] . getMethodDescriptor ( [[destroyMethodNames]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( [[md]] == null ) { throw new PetiteException ( "Destroy method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[destroyMethodNames]] [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( [[md]] . getMethod ( ) ) ; } [[beanDefinition]] . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void [[string]] ( final String beanName , String ... [[file]] ) { BeanDefinition [[d]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[bus]] = ClassIntrospector . get ( ) . lookup ( [[d]] . type ) ; if ( [[file]] == null ) { [[file]] = StringPool . EMPTY_ARRAY ; } int total = [[file]] . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[file]] . length ; i ++ ) { MethodDescriptor [[host]] = [[bus]] . getMethodDescriptor ( [[file]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( [[host]] == null ) { throw new PetiteException ( "Destroy method not found: " + [[d]] . type . getName ( ) + ' ' + [[file]] [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( [[host]] . getMethod ( ) ) ; } [[d]] . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 765 ---------------------------------------------
Iterate over all beans of a given type . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[forEachBeanType]] ( final Class [[type]] , final Consumer < String > [[beanNameConsumer]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[type]] ) ) { [[beanNameConsumer]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void [[unless]] ( final Class [[handler]] , final Consumer < String > [[method]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[handler]] ) ) { [[method]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 766 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 131 / 625 / 10 / 766:  77%|███████▋  | 766/1000 [16:42<05:06,  1.31s/it][Succeeded / Failed / Skipped / Total] 131 / 625 / 10 / 766:  77%|███████▋  | 767/1000 [16:42<05:04,  1.31s/it][Succeeded / Failed / Skipped / Total] 131 / 626 / 10 / 767:  77%|███████▋  | 767/1000 [16:42<05:04,  1.31s/it][Succeeded / Failed / Skipped / Total] 131 / 626 / 10 / 767:  77%|███████▋  | 768/1000 [16:47<05:04,  1.31s/it][Succeeded / Failed / Skipped / Total] 131 / 627 / 10 / 768:  77%|███████▋  | 768/1000 [16:47<05:04,  1.31s/it][Succeeded / Failed / Skipped / Total] 131 / 627 / 10 / 768:  77%|███████▋  | 769/1000 [16:48<05:02,  1.31s/it][Succeeded / Failed / Skipped / Total] 132 / 627 / 10 / 769:  77%|███████▋  | 769/1000 [16:48<05:02,  1.31s/it][Succeeded / Failed / Skipped / Total] 132 / 627 / 10 / 769:  77%|███████▋  | 770/1000 [16:50<05:01,  1.31s/it][Succeeded / Failed / Skipped / Total] 132 / 628 / 10 / 770:  77%|███████▋  | 770/1000 [16:50<05:01,  1.31s/it][Succeeded / Failed / Skipped / Total] 132 / 628 / 10 / 770:  77%|███████▋  | 771/1000 [16:50<05:00,  1.31s/it]Register a constructor injection point . --> Given a template and a set of parameter types create the bean definition and add it to the bean definition --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteCtorInjectionPoint]] ( final String [[beanName]] , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void [[suppose]] ( final String [[template]] , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[template]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 767 ---------------------------------------------
Defines parameters from a map of properties . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > [[entry]] : properties . entrySet ( ) ) { defineParameter ( [[entry]] . getKey ( ) . toString ( ) , [[entry]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[include]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > [[edges]] : properties . entrySet ( ) ) { defineParameter ( [[edges]] . getKey ( ) . toString ( ) , [[edges]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 768 ---------------------------------------------
Registers init methods for a Petite bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteInitMethods]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... [[initMethodNames]] ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; if ( [[initMethodNames]] == null ) { [[initMethodNames]] = StringPool . EMPTY_ARRAY ; } int [[total]] = [[initMethodNames]] . length ; InitMethodPoint [ ] [[initMethodPoints]] = new InitMethodPoint [ [[total]] ] ; int i ; for ( i = 0 ; i < [[initMethodNames]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[initMethodNames]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[initMethodNames]] [ i ] ) ; } [[initMethodPoints]] [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } [[beanDefinition]] . addInitMethodPoints ( [[initMethodPoints]] ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void [[assume]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... [[frame]] ) { BeanDefinition [[group]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[group]] . type ) ; if ( [[frame]] == null ) { [[frame]] = StringPool . EMPTY_ARRAY ; } int [[frame]] = [[frame]] . length ; InitMethodPoint [ ] [[draw]] = new InitMethodPoint [ [[frame]] ] ; int i ; for ( i = 0 ; i < [[frame]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[frame]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + [[group]] . type . getName ( ) + ' ' + [[frame]] [ i ] ) ; } [[draw]] [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } [[group]] . addInitMethodPoints ( [[draw]] ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 769 ---------------------------------------------
Throws an exception if the given argument index is out of bounds . --> Checks if the execute parameter is valid --> Socre: 1.0

[[[[Adv]]]]: public static void [[checkArgumentIndex]] ( final MethodInfo methodInfo , final int [[argIndex]] ) { if ( ( [[argIndex]] < 1 ) || ( [[argIndex]] > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[argIndex]] ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void [[c]] ( final MethodInfo methodInfo , final int [[execute]] ) { if ( ( [[execute]] < 1 ) || ( [[execute]] > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[execute]] ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 770 ---------------------------------------------
Push an int to the stack . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[pushInt]] ( final MethodVisitor mv , final int [[value]] ) { if ( [[value]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[value]] ) ; } else if ( [[value]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[value]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[value]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void [[load]] ( final MethodVisitor mv , final int [[data]] ) { if ( [[data]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[data]] ) ; } else if ( [[data]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[data]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[data]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 771 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 132 / 629 / 10 / 771:  77%|███████▋  | 771/1000 [16:50<05:00,  1.31s/it][Succeeded / Failed / Skipped / Total] 132 / 629 / 10 / 771:  77%|███████▋  | 772/1000 [16:53<04:59,  1.31s/it][Succeeded / Failed / Skipped / Total] 132 / 630 / 10 / 772:  77%|███████▋  | 772/1000 [16:53<04:59,  1.31s/it][Succeeded / Failed / Skipped / Total] 132 / 630 / 10 / 772:  77%|███████▋  | 773/1000 [16:53<04:57,  1.31s/it][Succeeded / Failed / Skipped / Total] 133 / 630 / 10 / 773:  77%|███████▋  | 773/1000 [16:53<04:57,  1.31s/it][Succeeded / Failed / Skipped / Total] 133 / 631 / 10 / 774:  77%|███████▋  | 774/1000 [16:53<04:55,  1.31s/it][Succeeded / Failed / Skipped / Total] 133 / 631 / 10 / 774:  78%|███████▊  | 775/1000 [16:54<04:54,  1.31s/it][Succeeded / Failed / Skipped / Total] 134 / 631 / 10 / 775:  78%|███████▊  | 775/1000 [16:54<04:54,  1.31s/it]Registers a method injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteMethodInjectionPoint]] ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method [[method]] = null ; if ( arguments == null ) { MethodDescriptor [ ] [[methods]] = [[cd]] . getAllMethodDescriptors ( methodName ) ; if ( [[methods]] != null && [[methods]] . length > 0 ) { if ( [[methods]] . length > 1 ) { throw new PetiteException ( [[methods]] . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } [[method]] = [[methods]] [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor [[md]] = [[cd]] . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( [[md]] != null ) { [[method]] = [[md]] . getMethod ( ) ; } } if ( [[method]] == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[method]] , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( [[method]] , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void [[otherwise]] ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[method]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method [[base]] = null ; if ( arguments == null ) { MethodDescriptor [ ] [[arguments]] = [[method]] . getAllMethodDescriptors ( methodName ) ; if ( [[arguments]] != null && [[arguments]] . length > 0 ) { if ( [[arguments]] . length > 1 ) { throw new PetiteException ( [[arguments]] . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } [[base]] = [[arguments]] [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor [[column]] = [[method]] . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( [[column]] != null ) { [[base]] = [[column]] . getMethod ( ) ; } } if ( [[base]] == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[base]] , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( [[base]] , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 772 ---------------------------------------------
Registers a Petite provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String providerName , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void [[get]] ( final String providerName , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 773 ---------------------------------------------
Returns advice field name . --> Returns a string representation of an address and index --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String [[name]] , final int index ) { return ProxettaNames . fieldPrefix + [[name]] + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[object]] ( final String [[address]] , final int index ) { return ProxettaNames . fieldPrefix + [[address]] + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 774 ---------------------------------------------
Register a provider with the Petite server . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String providerName , final String [[beanName]] , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( [[beanName]] ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + [[beanName]] ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , [[beanName]] , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void [[suppose]] ( final String providerName , final String [[base]] , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( [[base]] ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + [[base]] ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , [[base]] , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 775 ---------------------------------------------
Returns advice method name . --> Returns the index string for the given pointer and index --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String [[name]] , final int index ) { return ProxettaNames . methodPrefix + [[name]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[index]] ( final String [[pointer]] , final int index ) { return ProxettaNames . methodPrefix + [[pointer]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 776 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 134 / 632 / 10 / 776:  78%|███████▊  | 776/1000 [16:55<04:52,  1.31s/it][Succeeded / Failed / Skipped / Total] 134 / 632 / 10 / 776:  78%|███████▊  | 777/1000 [16:55<04:51,  1.31s/it][Succeeded / Failed / Skipped / Total] 134 / 633 / 10 / 777:  78%|███████▊  | 777/1000 [16:55<04:51,  1.31s/it][Succeeded / Failed / Skipped / Total] 135 / 633 / 10 / 778:  78%|███████▊  | 778/1000 [16:56<04:50,  1.31s/it][Succeeded / Failed / Skipped / Total] 135 / 633 / 10 / 778:  78%|███████▊  | 779/1000 [17:02<04:50,  1.31s/it][Succeeded / Failed / Skipped / Total] 135 / 634 / 10 / 779:  78%|███████▊  | 779/1000 [17:02<04:50,  1.31s/it][Succeeded / Failed / Skipped / Total] 136 / 634 / 10 / 780:  78%|███████▊  | 780/1000 [17:03<04:48,  1.31s/it][Succeeded / Failed / Skipped / Total] 136 / 634 / 10 / 780:  78%|███████▊  | 781/1000 [17:04<04:47,  1.31s/it][Succeeded / Failed / Skipped / Total] 136 / 635 / 10 / 781:  78%|███████▊  | 781/1000 [17:04<04:47,  1.31s/it][Succeeded / Failed / Skipped / Total] 137 / 635 / 10 / 782:  78%|███████▊  | 782/1000 [17:06<04:46,  1.31s/it][Succeeded / Failed / Skipped / Total] 137 / 635 / 10 / 782:  78%|███████▊  | 783/1000 [17:07<04:44,  1.31s/it]Resolves the Java version . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int [[version]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = javaVersionNumber - 8 + 52 ; return [[version]] > platformVersion ? [[version]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[end]] ( final int [[name]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = javaVersionNumber - 8 + 52 ; return [[name]] > platformVersion ? [[name]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 777 ---------------------------------------------
Intercepts an action request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object [[intercept]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object [[result]] = null ; try { [[result]] = actionRequest . invoke ( ) ; } catch ( Exception ex ) { [[result]] = "<exception>" ; throw ex ; } catch ( Throwable th ) { [[result]] = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , executionTime , [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object [[string]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object [[null]] = null ; try { [[null]] = actionRequest . invoke ( ) ; } catch ( Exception ex ) { [[null]] = "<exception>" ; throw ex ; } catch ( Throwable th ) { [[null]] = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , executionTime , [[null]] ) ; } return [[null]] ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 778 ---------------------------------------------
Loads all the arguments of a static method . --> python a MethodInfo ne to a MethodVisitor --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadStaticMethodArguments]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] ) { for ( int i = 0 ; i < [[methodInfo]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[methodInfo]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void [[python]] ( final MethodVisitor mv , final MethodInfo [[ne]] ) { for ( int i = 0 ; i < [[ne]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[ne]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 779 ---------------------------------------------
Generates code to load all the arguments of a special method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= [[methodInfo]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[methodInfo]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[procedure]] ( final MethodVisitor mv , final MethodInfo [[dim]] ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= [[dim]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[dim]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 780 ---------------------------------------------
Create method signature key string . --> Create a string representation of an array --> Socre: 1.0

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String [[methodName]] , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( [[methodName]] ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[array]] ( final int access , final String [[data]] , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( [[data]] ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 781 ---------------------------------------------
Generates a new array instruction . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[atomic]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 782 ---------------------------------------------
Returns true if flags are null system flags and user flags . --> Returns true if the operations are true or false . --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isEmptyFlags]] ( Flags flags ) { if ( flags == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = flags . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean [[operations]] ( Flags flags ) { if ( flags == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = flags . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
[Succeeded / Failed / Skipped / Total] 137 / 636 / 10 / 783:  78%|███████▊  | 783/1000 [17:07<04:44,  1.31s/it][Succeeded / Failed / Skipped / Total] 137 / 637 / 10 / 784:  78%|███████▊  | 784/1000 [17:08<04:43,  1.31s/it][Succeeded / Failed / Skipped / Total] 137 / 637 / 10 / 784:  78%|███████▊  | 785/1000 [17:08<04:41,  1.31s/it][Succeeded / Failed / Skipped / Total] 137 / 638 / 10 / 785:  78%|███████▊  | 785/1000 [17:08<04:41,  1.31s/it][Succeeded / Failed / Skipped / Total] 137 / 639 / 10 / 786:  79%|███████▊  | 786/1000 [17:11<04:40,  1.31s/it][Succeeded / Failed / Skipped / Total] 137 / 639 / 10 / 786:  79%|███████▊  | 787/1000 [17:12<04:39,  1.31s/it][Succeeded / Failed / Skipped / Total] 137 / 640 / 10 / 787:  79%|███████▊  | 787/1000 [17:12<04:39,  1.31s/it]--------------------------------------------- Result 783 ---------------------------------------------
Stores the contents of an array into the given visitor . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeIntoArray]] ( final MethodVisitor [[mv]] , final Class componentType ) { if ( componentType == int . class ) { [[mv]] . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { [[mv]] . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { [[mv]] . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { [[mv]] . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { [[mv]] . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { [[mv]] . visitInsn ( CASTORE ) ; return ; } [[mv]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void [[merge]] ( final MethodVisitor [[ization]] , final Class componentType ) { if ( componentType == int . class ) { [[ization]] . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { [[ization]] . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { [[ization]] . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { [[ization]] . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { [[ization]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { [[ization]] . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { [[ization]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { [[ization]] . visitInsn ( CASTORE ) ; return ; } [[ization]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 784 ---------------------------------------------
Prepares a method return value . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareReturnValue]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] , int [[varOffset]] ) { [[varOffset]] += [[methodInfo]] . getAllArgumentsSize ( ) ; switch ( [[methodInfo]] . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void [[replace]] ( final MethodVisitor mv , final MethodInfo [[ins]] , int [[main]] ) { [[main]] += [[ins]] . getAllArgumentsSize ( ) ; switch ( [[ins]] . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 785 ---------------------------------------------
Loads the method arguments for a virtual method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadVirtualMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo [[methodInfo]] ) { for ( int [[i]] = 1 ; [[i]] <= [[methodInfo]] . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( [[mv]] , [[methodInfo]] , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void [[assume]] ( final MethodVisitor [[end]] , final MethodInfo [[s]] ) { for ( int [[stage]] = 1 ; [[stage]] <= [[s]] . getArgumentsCount ( ) ; [[stage]] ++ ) { loadMethodArgument ( [[end]] , [[s]] , [[stage]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 786 ---------------------------------------------
Stores an argument in the method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[execute]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 787 ---------------------------------------------
Loads a method argument into the given method visitor . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadMethodArgument]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[mv]] . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( DLOAD , offset ) ; break ; default : [[mv]] . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[exception]] ( final MethodVisitor [[ate]] , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[ate]] . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : [[ate]] . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : [[ate]] . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : [[ate]] . visitVarInsn ( DLOAD , offset ) ; break ; default : [[ate]] . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 788 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 137 / 641 / 10 / 788:  79%|███████▉  | 788/1000 [17:14<04:38,  1.31s/it][Succeeded / Failed / Skipped / Total] 137 / 641 / 10 / 788:  79%|███████▉  | 789/1000 [17:15<04:36,  1.31s/it][Succeeded / Failed / Skipped / Total] 138 / 641 / 10 / 789:  79%|███████▉  | 789/1000 [17:15<04:36,  1.31s/it][Succeeded / Failed / Skipped / Total] 138 / 642 / 10 / 790:  79%|███████▉  | 790/1000 [17:17<04:35,  1.31s/it][Succeeded / Failed / Skipped / Total] 138 / 642 / 10 / 790:  79%|███████▉  | 791/1000 [17:18<04:34,  1.31s/it][Succeeded / Failed / Skipped / Total] 138 / 643 / 10 / 791:  79%|███████▉  | 791/1000 [17:18<04:34,  1.31s/it][Succeeded / Failed / Skipped / Total] 139 / 643 / 10 / 792:  79%|███████▉  | 792/1000 [17:21<04:33,  1.32s/it][Succeeded / Failed / Skipped / Total] 139 / 643 / 10 / 792:  79%|███████▉  | 793/1000 [17:22<04:32,  1.31s/it][Succeeded / Failed / Skipped / Total] 139 / 644 / 10 / 793:  79%|███████▉  | 793/1000 [17:22<04:32,  1.31s/it][Succeeded / Failed / Skipped / Total] 139 / 645 / 10 / 794:  79%|███████▉  | 794/1000 [17:25<04:31,  1.32s/it][Succeeded / Failed / Skipped / Total] 139 / 645 / 10 / 794:  80%|███████▉  | 795/1000 [17:27<04:30,  1.32s/it]Require authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[requireAuthentication]] ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void [[echo]] ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 789 ---------------------------------------------
Prepares the response . --> Set the content - type header and content - length --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareResponse]] ( final HttpServletResponse response , final String fileName , String [[mimeType]] , final int fileSize ) { if ( ( [[mimeType]] == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; [[mimeType]] = MimeTypes . getMimeType ( extension ) ; } if ( [[mimeType]] != null ) { response . setContentType ( [[mimeType]] ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void [[string]] ( final HttpServletResponse response , final String fileName , String [[header]] , final int fileSize ) { if ( ( [[header]] == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; [[header]] = MimeTypes . getMimeType ( extension ) ; } if ( [[header]] != null ) { response . setContentType ( [[header]] ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 790 ---------------------------------------------
Resolve the Bearer token from the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[resolveAuthBearerToken]] ( final HttpServletRequest [[request]] ) { String [[header]] = [[request]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[header]] == null ) { return null ; } int ndx = [[header]] . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return [[header]] . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String [[thread]] ( final HttpServletRequest [[implementation]] ) { String [[port]] = [[implementation]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[port]] == null ) { return null ; } int ndx = [[port]] . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return [[port]] . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 791 ---------------------------------------------
Extracts encoding from content type . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String [[contentType]] , String defaultEncoding ) { String [[encoding]] = [[extractEncoding]] ( [[contentType]] ) ; if ( [[encoding]] == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } [[encoding]] = defaultEncoding ; } return [[encoding]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[using]] ( final String [[zero]] , String defaultEncoding ) { String [[length]] = [[using]] ( [[zero]] ) ; if ( [[length]] == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } [[length]] = defaultEncoding ; } return [[length]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 792 ---------------------------------------------
Stores the context path for the given page context . --> set the contextPathVariableName to the client --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext pageContext , final String contextPathVariableName ) { String [[ctxPath]] = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( contextPathVariableName , [[ctxPath]] ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , [[ctxPath]] ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[foo]] ( final PageContext pageContext , final String contextPathVariableName ) { String [[client]] = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( contextPathVariableName , [[client]] ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , [[client]] ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 793 ---------------------------------------------
Reads the request body from the request reader . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest [[request]] ) throws IOException { BufferedReader buff = [[request]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[card]] ( final HttpServletRequest [[race]] ) throws IOException { BufferedReader buff = [[race]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 794 ---------------------------------------------
Prepares the response for downloading a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse [[response]] , final File file , final String mimeType ) { if ( ! file . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + file ) ; } if ( file . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + file ) ; } prepareResponse ( [[response]] , file . getAbsolutePath ( ) , mimeType , ( int ) file . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[unless]] ( final HttpServletResponse [[test]] , final File file , final String mimeType ) { if ( ! file . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + file ) ; } if ( file . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + file ) ; } prepareResponse ( [[test]] , file . getAbsolutePath ( ) , mimeType , ( int ) file . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 795 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 139 / 646 / 10 / 795:  80%|███████▉  | 795/1000 [17:27<04:30,  1.32s/it][Succeeded / Failed / Skipped / Total] 139 / 647 / 10 / 796:  80%|███████▉  | 796/1000 [17:28<04:28,  1.32s/it][Succeeded / Failed / Skipped / Total] 139 / 647 / 10 / 796:  80%|███████▉  | 797/1000 [17:29<04:27,  1.32s/it][Succeeded / Failed / Skipped / Total] 139 / 648 / 10 / 797:  80%|███████▉  | 797/1000 [17:29<04:27,  1.32s/it][Succeeded / Failed / Skipped / Total] 139 / 649 / 10 / 798:  80%|███████▉  | 798/1000 [17:29<04:25,  1.32s/it][Succeeded / Failed / Skipped / Total] 139 / 649 / 10 / 798:  80%|███████▉  | 799/1000 [17:35<04:25,  1.32s/it][Succeeded / Failed / Skipped / Total] 139 / 650 / 10 / 799:  80%|███████▉  | 799/1000 [17:35<04:25,  1.32s/it][Succeeded / Failed / Skipped / Total] 139 / 651 / 10 / 800:  80%|████████  | 800/1000 [17:35<04:23,  1.32s/it][Succeeded / Failed / Skipped / Total] 139 / 651 / 10 / 800:  80%|████████  | 801/1000 [17:36<04:22,  1.32s/it][Succeeded / Failed / Skipped / Total] 139 / 652 / 10 / 801:  80%|████████  | 801/1000 [17:36<04:22,  1.32s/it][Succeeded / Failed / Skipped / Total] 139 / 653 / 10 / 802:  80%|████████  | 802/1000 [17:39<04:21,  1.32s/it][Succeeded / Failed / Skipped / Total] 139 / 653 / 10 / 802:  80%|████████  | 803/1000 [17:39<04:19,  1.32s/it]Get all cookies with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookie [ ] [[getAllCookies]] ( final HttpServletRequest [[request]] , final String [[cookieName]] ) { Cookie [ ] cookies = [[request]] . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( [[cookieName]] ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] [[http]] ( final HttpServletRequest [[heap]] , final String [[page]] ) { Cookie [ ] cookies = [[heap]] . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( [[page]] ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 796 ---------------------------------------------
Reads the request body from an input stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readRequestBodyFromStream]] ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[queue]] ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 797 ---------------------------------------------
Invokes the body of the tag . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment [[body]] ) throws JspException { if ( [[body]] == null ) { return ; } try { [[body]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[assume]] ( final JspFragment [[er]] ) throws JspException { if ( [[er]] == null ) { return ; } try { [[er]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 798 ---------------------------------------------
Stores the context path in the servlet context . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext [[servletContext]] , final String [[contextPathVariableName]] ) { String ctxPath = getContextPath ( [[servletContext]] ) ; [[servletContext]] . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[copy]] ( final ServletContext [[ath]] , final String [[image]] ) { String ctxPath = getContextPath ( [[ath]] ) ; [[ath]] . setAttribute ( [[image]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 799 ---------------------------------------------
Renders the body of a JSP fragment . --> [[[FAILED]]]

[[[[Adv]]]]: public static char [ ] [[renderBody]] ( final JspFragment [[body]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[body]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] [[extension]] ( final JspFragment [[array]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[array]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 800 ---------------------------------------------
Calls all destroy methods on the bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[drop]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 801 ---------------------------------------------
Renders the given body to a String . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment body ) throws JspException { char [ ] [[result]] = renderBody ( body ) ; return new String ( [[result]] ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[after]] ( final JspFragment body ) throws JspException { char [ ] [[c]] = renderBody ( body ) ; return new String ( [[c]] ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 802 ---------------------------------------------
Invokes all init methods of the bean with the given invocation strategy . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy [[invocationStrategy]] ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( [[invocationStrategy]] != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[test]] ( final InitMethodInvocationStrategy [[beans]] ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( [[beans]] != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 803 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 139 / 654 / 10 / 803:  80%|████████  | 803/1000 [17:39<04:19,  1.32s/it][Succeeded / Failed / Skipped / Total] 140 / 654 / 10 / 804:  80%|████████  | 804/1000 [17:42<04:18,  1.32s/it][Succeeded / Failed / Skipped / Total] 140 / 654 / 10 / 804:  80%|████████  | 805/1000 [17:44<04:17,  1.32s/it][Succeeded / Failed / Skipped / Total] 140 / 655 / 10 / 805:  80%|████████  | 805/1000 [17:44<04:17,  1.32s/it][Succeeded / Failed / Skipped / Total] 140 / 656 / 10 / 806:  81%|████████  | 806/1000 [17:44<04:16,  1.32s/it][Succeeded / Failed / Skipped / Total] 140 / 656 / 10 / 806:  81%|████████  | 807/1000 [17:48<04:15,  1.32s/it][Succeeded / Failed / Skipped / Total] 140 / 657 / 10 / 807:  81%|████████  | 807/1000 [17:48<04:15,  1.32s/it][Succeeded / Failed / Skipped / Total] 140 / 658 / 10 / 808:  81%|████████  | 808/1000 [17:50<04:14,  1.32s/it][Succeeded / Failed / Skipped / Total] 140 / 658 / 10 / 808:  81%|████████  | 809/1000 [17:51<04:12,  1.32s/it][Succeeded / Failed / Skipped / Total] 140 / 659 / 10 / 809:  81%|████████  | 809/1000 [17:51<04:12,  1.32s/it]Creates a new instance of the bean . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[paramNo]] = beanDefinition . ctor . references . length ; Object [ ] [[args]] = new Object [ [[paramNo]] ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[foo]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[result]] = beanDefinition . ctor . references . length ; Object [ ] [[null]] = new Object [ [[result]] ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 804 ---------------------------------------------
Add a property to the map . --> Put a property . --> Socre: 1.0

[[[[Adv]]]]: protected void put ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String [[realValue]] = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { [[realValue]] = pv . value + APPEND_SEPARATOR + [[realValue]] ; } } PropsEntry propsEntry = new PropsEntry ( key , [[realValue]] , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void put ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String [[o]] = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { [[o]] = pv . value + APPEND_SEPARATOR + [[o]] ; } } PropsEntry propsEntry = new PropsEntry ( key , [[o]] , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 805 ---------------------------------------------
Checks if the given parameter is a GET parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String [[query]] = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( [[query]] , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[response]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String [[id]] = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( [[id]] , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 806 ---------------------------------------------
Injects the parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[by]] ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 807 ---------------------------------------------
Rewrite the given action path with the given HTTP method . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[rewrite]] ( final HttpServletRequest servletRequest , final String [[actionPath]] , final String httpMethod ) { return [[actionPath]] ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[message]] ( final HttpServletRequest servletRequest , final String [[protocol]] , final String httpMethod ) { return [[protocol]] ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 808 ---------------------------------------------
Add a header . --> [[[FAILED]]]

[[[[Adv]]]]: public void addHeader ( final String name , final String value ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; valuesList . add ( value ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void addHeader ( final String name , final String value ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; valuesList . add ( value ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 809 ---------------------------------------------
Prepares the given parameter array for use in the HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] [[prepareParameters]] ( final String [ ] [[paramValues]] , final boolean treatEmptyParamsAsNull , final boolean [[ignoreEmptyRequestParams]] ) { if ( treatEmptyParamsAsNull || [[ignoreEmptyRequestParams]] ) { int [[emptyCount]] = 0 ; int total = [[paramValues]] . length ; for ( int i = 0 ; i < [[paramValues]] . length ; i ++ ) { String paramValue = [[paramValues]] [ i ] ; if ( paramValue == null ) { [[emptyCount]] ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { [[emptyCount]] ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } [[paramValues]] [ i ] = paramValue ; } if ( ( [[ignoreEmptyRequestParams]] ) && ( [[emptyCount]] == total ) ) { return null ; } } return [[paramValues]] ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] [[loop]] ( final String [ ] [[check]] , final boolean treatEmptyParamsAsNull , final boolean [[start]] ) { if ( treatEmptyParamsAsNull || [[start]] ) { int [[type]] = 0 ; int total = [[check]] . length ; for ( int i = 0 ; i < [[check]] . length ; i ++ ) { String paramValue = [[check]] [ i ] ; if ( paramValue == null ) { [[type]] ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { [[type]] ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } [[check]] [ i ] = paramValue ; } if ( ( [[start]] ) && ( [[type]] == total ) ) { return null ; } } return [[check]] ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 810 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 140 / 660 / 10 / 810:  81%|████████  | 810/1000 [17:51<04:11,  1.32s/it][Succeeded / Failed / Skipped / Total] 140 / 660 / 10 / 810:  81%|████████  | 811/1000 [17:52<04:09,  1.32s/it][Succeeded / Failed / Skipped / Total] 140 / 661 / 10 / 811:  81%|████████  | 811/1000 [17:52<04:09,  1.32s/it][Succeeded / Failed / Skipped / Total] 140 / 662 / 10 / 812:  81%|████████  | 812/1000 [17:54<04:08,  1.32s/it][Succeeded / Failed / Skipped / Total] 140 / 662 / 10 / 812:  81%|████████▏ | 813/1000 [17:55<04:07,  1.32s/it][Succeeded / Failed / Skipped / Total] 141 / 662 / 10 / 813:  81%|████████▏ | 813/1000 [17:55<04:07,  1.32s/it][Succeeded / Failed / Skipped / Total] 141 / 663 / 10 / 814:  81%|████████▏ | 814/1000 [17:59<04:06,  1.33s/it][Succeeded / Failed / Skipped / Total] 141 / 663 / 10 / 814:  82%|████████▏ | 815/1000 [18:04<04:06,  1.33s/it][Succeeded / Failed / Skipped / Total] 141 / 664 / 10 / 815:  82%|████████▏ | 815/1000 [18:04<04:06,  1.33s/it][Succeeded / Failed / Skipped / Total] 141 / 665 / 10 / 816:  82%|████████▏ | 816/1000 [18:07<04:05,  1.33s/it][Succeeded / Failed / Skipped / Total] 141 / 665 / 10 / 816:  82%|████████▏ | 817/1000 [18:08<04:03,  1.33s/it][Succeeded / Failed / Skipped / Total] 141 / 666 / 10 / 817:  82%|████████▏ | 817/1000 [18:08<04:03,  1.33s/it][Succeeded / Failed / Skipped / Total] 141 / 667 / 10 / 818:  82%|████████▏ | 818/1000 [18:13<04:03,  1.34s/it][Succeeded / Failed / Skipped / Total] 141 / 667 / 10 / 818:  82%|████████▏ | 819/1000 [18:16<04:02,  1.34s/it]Copy the parameters from the servlet request to the attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[copyParamsToAttributes]] ( final HttpServletRequest servletRequest , final boolean [[treatEmptyParamsAsNull]] , final boolean [[ignoreEmptyRequestParams]] ) { Enumeration [[paramNames]] = servletRequest . getParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { String paramName = ( String ) [[paramNames]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } String [ ] [[paramValues]] = servletRequest . getParameterValues ( paramName ) ; [[paramValues]] = prepareParameters ( [[paramValues]] , [[treatEmptyParamsAsNull]] , [[ignoreEmptyRequestParams]] ) ; if ( [[paramValues]] == null ) { continue ; } servletRequest . setAttribute ( paramName , [[paramValues]] . length == 1 ? [[paramValues]] [ 0 ] : [[paramValues]] ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void [[after]] ( final HttpServletRequest servletRequest , final boolean [[length]] , final boolean [[distance]] ) { Enumeration [[style]] = servletRequest . getParameterNames ( ) ; while ( [[style]] . hasMoreElements ( ) ) { String paramName = ( String ) [[style]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } String [ ] [[time]] = servletRequest . getParameterValues ( paramName ) ; [[time]] = prepareParameters ( [[time]] , [[length]] , [[distance]] ) ; if ( [[time]] == null ) { continue ; } servletRequest . setAttribute ( paramName , [[time]] . length == 1 ? [[time]] [ 0 ] : [[time]] ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 811 ---------------------------------------------
Resolve the macros for the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveMacros ( String [[value]] , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String resolveMacros ( String [[a]] , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 812 ---------------------------------------------
Put base property . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String key , final String [[value]] , final boolean append ) { put ( null , baseProperties , key , [[value]] , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[take]] ( final String key , final String [[keys]] , final boolean append ) { put ( null , baseProperties , key , [[keys]] , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 813 ---------------------------------------------
Get profile property . --> Looks up a mapping from a word to a color --> Socre: 1.0

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String [[profile]] , final String [[key]] ) { final Map < String , PropsEntry > [[profileMap]] = profileProperties . get ( [[profile]] ) ; if ( [[profileMap]] == null ) { return null ; } return [[profileMap]] . get ( [[key]] ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[mapping]] ( final String [[word]] , final String [[color]] ) { final Map < String , PropsEntry > [[index]] = profileProperties . get ( [[word]] ) ; if ( [[index]] == null ) { return null ; } return [[index]] . get ( [[color]] ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 814 ---------------------------------------------
Put a profile property . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String [[value]] , final String profile , final boolean append ) { Map < String , PropsEntry > [[map]] = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , [[map]] , key , [[value]] , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[heap]] ( final String key , final String [[size]] , final String profile , final boolean append ) { Map < String , PropsEntry > [[table]] = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , [[table]] , key , [[size]] , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 815 ---------------------------------------------
Extracts the profiles and wildcards from the target map . --> [[[FAILED]]]

[[[[Adv]]]]: public Map extract ( Map [[target]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[target]] == null ) { [[target]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map extract ( Map [[tags]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[tags]] == null ) { [[tags]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 816 ---------------------------------------------
Resolve action config . --> [[[FAILED]]]

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > annotationType ; if ( annotationValues == null ) { annotationType = Action . class ; } else { annotationType = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[viewer]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > annotationType ; if ( annotationValues == null ) { annotationType = Action . class ; } else { annotationType = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 817 ---------------------------------------------
Copies all bytes from this stream to the given output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream [[out]] ) throws IOException { int [[count]] = 0 ; while ( "[[True]]" == "[[True]]" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[out]] . write ( b ) ; [[count]] ++ ; } return [[count]] ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[integer]] ( final OutputStream [[list]] ) throws IOException { int [[bit]] = 0 ; while ( "[[b]]" == "[[b]]" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[list]] . write ( b ) ; [[bit]] ++ ; } return [[bit]] ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 818 ---------------------------------------------
Converts a stream to a word . --> [[[FAILED]]]

[[[[Adv]]]]: private static int [[streamtoword]] ( byte [ ] data , int [ ] offp ) { int [[i]] ; int [[word]] = 0 ; int off = offp [ 0 ] ; for ( [[i]] = 0 ; [[i]] < 4 ; [[i]] ++ ) { [[word]] = ( [[word]] << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return [[word]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int [[var]] ( byte [ ] data , int [ ] offp ) { int [[string]] ; int [[strings]] = 0 ; int off = offp [ 0 ] ; for ( [[string]] = 0 ; [[string]] < 4 ; [[string]] ++ ) { [[strings]] = ( [[strings]] << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return [[strings]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 819 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 141 / 668 / 10 / 819:  82%|████████▏ | 819/1000 [18:16<04:02,  1.34s/it][Succeeded / Failed / Skipped / Total] 141 / 669 / 10 / 820:  82%|████████▏ | 820/1000 [18:17<04:00,  1.34s/it][Succeeded / Failed / Skipped / Total] 141 / 669 / 10 / 820:  82%|████████▏ | 821/1000 [18:17<03:59,  1.34s/it][Succeeded / Failed / Skipped / Total] 141 / 670 / 10 / 821:  82%|████████▏ | 821/1000 [18:17<03:59,  1.34s/it][Succeeded / Failed / Skipped / Total] 141 / 671 / 10 / 822:  82%|████████▏ | 822/1000 [18:18<03:57,  1.34s/it][Succeeded / Failed / Skipped / Total] 141 / 671 / 10 / 822:  82%|████████▏ | 823/1000 [18:18<03:56,  1.34s/it][Succeeded / Failed / Skipped / Total] 141 / 671 / 11 / 823:  82%|████████▏ | 823/1000 [18:18<03:56,  1.34s/it][Succeeded / Failed / Skipped / Total] 141 / 672 / 11 / 824:  82%|████████▏ | 824/1000 [18:19<03:54,  1.33s/it][Succeeded / Failed / Skipped / Total] 141 / 672 / 11 / 824:  82%|████████▎ | 825/1000 [18:20<03:53,  1.33s/it][Succeeded / Failed / Skipped / Total] 141 / 673 / 11 / 825:  82%|████████▎ | 825/1000 [18:20<03:53,  1.33s/it]Copies up to maxBytes bytes . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[copyMax]] ( final OutputStream out , final int maxBytes ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int [[read]] ( final OutputStream out , final int maxBytes ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 820 ---------------------------------------------
Read action filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[readActionFilters]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[data]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 821 ---------------------------------------------
Parses the given action class method and action definition . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime [[parse]] ( final Class < ? > actionClass , final Method [[actionMethod]] , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( [[actionMethod]] ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime [[line]] ( final Class < ? > actionClass , final Method [[master]] , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( [[master]] ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 822 ---------------------------------------------
Read action interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[readActionInterceptors]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { result = interceptedBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[operator]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { result = interceptedBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 823 ---------------------------------------------
Sets the Last - Modified header if the last - modified date is less than the last modified date . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 824 ---------------------------------------------
Detect and register an alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[detectAndRegisterAlias]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String [[alias]] = parseMethodAlias ( annotationValues ) ; if ( [[alias]] != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( [[alias]] , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void [[fix]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String [[access]] = parseMethodAlias ( annotationValues ) ; if ( [[access]] != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( [[access]] , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 825 ---------------------------------------------
Checks whether a password is valid for a plaintext password . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[checkpw]] ( String [[plaintext]] , String [[hashed]] ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[plaintext]] , [[hashed]] ) ; hashed_bytes = [[hashed]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte [[ret]] = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { [[ret]] |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return [[ret]] == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean [[include]] ( String [[array]] , String [[address]] ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[array]] , [[address]] ) ; hashed_bytes = [[address]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte [[text]] = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { [[text]] |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return [[text]] == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 826 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 141 / 674 / 11 / 826:  83%|████████▎ | 826/1000 [18:22<03:52,  1.34s/it][Succeeded / Failed / Skipped / Total] 141 / 674 / 11 / 826:  83%|████████▎ | 827/1000 [18:23<03:50,  1.33s/it][Succeeded / Failed / Skipped / Total] 141 / 675 / 11 / 827:  83%|████████▎ | 827/1000 [18:23<03:50,  1.33s/it][Succeeded / Failed / Skipped / Total] 141 / 676 / 11 / 828:  83%|████████▎ | 828/1000 [18:25<03:49,  1.34s/it][Succeeded / Failed / Skipped / Total] 141 / 676 / 11 / 828:  83%|████████▎ | 829/1000 [18:25<03:48,  1.33s/it][Succeeded / Failed / Skipped / Total] 141 / 677 / 11 / 829:  83%|████████▎ | 829/1000 [18:25<03:48,  1.33s/it][Succeeded / Failed / Skipped / Total] 141 / 678 / 11 / 830:  83%|████████▎ | 830/1000 [18:28<03:47,  1.34s/it][Succeeded / Failed / Skipped / Total] 141 / 678 / 11 / 830:  83%|████████▎ | 831/1000 [18:30<03:45,  1.34s/it][Succeeded / Failed / Skipped / Total] 141 / 679 / 11 / 831:  83%|████████▎ | 831/1000 [18:30<03:45,  1.34s/it][Succeeded / Failed / Skipped / Total] 141 / 680 / 11 / 832:  83%|████████▎ | 832/1000 [18:31<03:44,  1.34s/it][Succeeded / Failed / Skipped / Total] 141 / 680 / 11 / 832:  83%|████████▎ | 833/1000 [18:33<03:43,  1.34s/it][Succeeded / Failed / Skipped / Total] 141 / 681 / 11 / 833:  83%|████████▎ | 833/1000 [18:33<03:43,  1.34s/it][Succeeded / Failed / Skipped / Total] 141 / 682 / 11 / 834:  83%|████████▎ | 834/1000 [18:35<03:42,  1.34s/it][Succeeded / Failed / Skipped / Total] 141 / 682 / 11 / 834:  84%|████████▎ | 835/1000 [18:36<03:40,  1.34s/it]Read package action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[format]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 827 ---------------------------------------------
Apply advice to a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class [[adviceClass]] = cache . get ( targetClass ) ; if ( [[adviceClass]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class [[loop]] = cache . get ( targetClass ) ; if ( [[loop]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 828 ---------------------------------------------
Parses the method alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues annotationValues ) { String [[alias]] = null ; if ( annotationValues != null ) { [[alias]] = annotationValues . alias ( ) ; } return [[alias]] ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[error]] ( final ActionAnnotationValues annotationValues ) { String [[index]] = null ; if ( annotationValues != null ) { [[index]] = annotationValues . alias ( ) ; } return [[index]] ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 829 ---------------------------------------------
Hashes a password with a salt . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[hashpw]] ( String password , String [[salt]] ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( [[salt]] . charAt ( 0 ) != ' ' || [[salt]] . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( [[salt]] . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = [[salt]] . charAt ( 2 ) ; if ( minor != ' ' || [[salt]] . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String [[command]] ( String password , String [[bit]] ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( [[bit]] . charAt ( 0 ) != ' ' || [[bit]] . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( [[bit]] . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = [[bit]] . charAt ( 2 ) ; if ( minor != ' ' || [[bit]] . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 830 ---------------------------------------------
Visits an annotation on this field . --> [[[FAILED]]]

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String [[descriptor]] , final boolean [[visible]] ) { if ( fv != null ) { return fv . visitAnnotation ( [[descriptor]] , [[visible]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[loop]] ( final String [[base]] , final boolean [[null]] ) { if ( fv != null ) { return fv . visitAnnotation ( [[base]] , [[null]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 831 ---------------------------------------------
Read method action path array . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String [[methodName]] , final ActionAnnotationValues annotationValues , final ActionConfig [[actionConfig]] ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[object]] ( final String [[operators]] , final ActionAnnotationValues annotationValues , final ActionConfig [[command]] ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 832 ---------------------------------------------
Resolve json name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( realIndex == - 1 ) { return [[realName]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[empty]] ( final String [[file]] ) { if ( realNames == null ) { return [[file]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[file]] ) ; if ( realIndex == - 1 ) { return [[file]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 833 ---------------------------------------------
Resolves the real name of the given json name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveRealName]] ( final String [[jsonName]] ) { if ( jsonNames == null ) { return [[jsonName]] ; } int [[jsonIndex]] = ArraysUtil . indexOf ( jsonNames , [[jsonName]] ) ; if ( [[jsonIndex]] == - 1 ) { return [[jsonName]] ; } return realNames [ [[jsonIndex]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[empty]] ( final String [[blank]] ) { if ( jsonNames == null ) { return [[blank]] ; } int [[field]] = ArraysUtil . indexOf ( jsonNames , [[blank]] ) ; if ( [[field]] == - 1 ) { return [[blank]] ; } return realNames [ [[field]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 834 ---------------------------------------------
Lookup the type data for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public TypeData [[lookupTypeData]] ( final Class [[type]] ) { TypeData [[typeData]] = typeDataMap . get ( [[type]] ) ; if ( [[typeData]] == null ) { if ( serializationSubclassAware ) { [[typeData]] = findSubclassTypeData ( [[type]] ) ; } if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , [[typeData]] ) ; } } return [[typeData]] ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData [[attribute]] ( final Class [[alice]] ) { TypeData [[attribute]] = typeDataMap . get ( [[alice]] ) ; if ( [[attribute]] == null ) { if ( serializationSubclassAware ) { [[attribute]] = findSubclassTypeData ( [[alice]] ) ; } if ( [[attribute]] == null ) { [[attribute]] = scanClassForAnnotations ( [[alice]] ) ; typeDataMap . put ( [[alice]] , [[attribute]] ) ; } } return [[attribute]] ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 835 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 141 / 683 / 11 / 835:  84%|████████▎ | 835/1000 [18:36<03:40,  1.34s/it][Succeeded / Failed / Skipped / Total] 141 / 684 / 11 / 836:  84%|████████▎ | 836/1000 [18:36<03:39,  1.34s/it][Succeeded / Failed / Skipped / Total] 141 / 684 / 11 / 836:  84%|████████▎ | 837/1000 [18:37<03:37,  1.33s/it][Succeeded / Failed / Skipped / Total] 141 / 685 / 11 / 837:  84%|████████▎ | 837/1000 [18:37<03:37,  1.33s/it][Succeeded / Failed / Skipped / Total] 142 / 685 / 11 / 838:  84%|████████▍ | 838/1000 [18:38<03:36,  1.33s/it][Succeeded / Failed / Skipped / Total] 142 / 685 / 11 / 838:  84%|████████▍ | 839/1000 [18:42<03:35,  1.34s/it][Succeeded / Failed / Skipped / Total] 142 / 686 / 11 / 839:  84%|████████▍ | 839/1000 [18:42<03:35,  1.34s/it][Succeeded / Failed / Skipped / Total] 142 / 687 / 11 / 840:  84%|████████▍ | 840/1000 [18:42<03:33,  1.34s/it][Succeeded / Failed / Skipped / Total] 142 / 687 / 11 / 840:  84%|████████▍ | 841/1000 [18:43<03:32,  1.34s/it][Succeeded / Failed / Skipped / Total] 142 / 688 / 11 / 841:  84%|████████▍ | 841/1000 [18:43<03:32,  1.34s/it][Succeeded / Failed / Skipped / Total] 142 / 689 / 11 / 842:  84%|████████▍ | 842/1000 [18:43<03:30,  1.33s/it][Succeeded / Failed / Skipped / Total] 142 / 689 / 11 / 842:  84%|████████▍ | 843/1000 [18:45<03:29,  1.34s/it]Lookup the type data for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData _lookupTypeData ( final Class type ) { TypeData [[typeData]] = typeDataMap . get ( type ) ; if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , [[typeData]] ) ; } return [[typeData]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData _lookupTypeData ( final Class type ) { TypeData [[attribute]] = typeDataMap . get ( type ) ; if ( [[attribute]] == null ) { [[attribute]] = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , [[attribute]] ) ; } return [[attribute]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 836 ---------------------------------------------
Find subclass type data . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData [[findSubclassTypeData]] ( final Class type ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( type . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData [[nce]] ( final Class type ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( type . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 837 ---------------------------------------------
Returns the content of the file . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[foo]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 838 ---------------------------------------------
Injects the target into the proxy . --> Queues an object to be proxied to an image --> Socre: 1.0

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object [[proxy]] , final Object [[target]] ) { Class proxyClass = [[proxy]] . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( [[proxy]] , [[target]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[queue]] ( final Object [[object]] , final Object [[image]] ) { Class proxyClass = [[object]] . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( [[object]] , [[image]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 839 ---------------------------------------------
Puts the constant pool into the given vector . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector [[output]] ) { [[output]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[end]] ( final ByteVector [[procedure]] ) { [[procedure]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 840 ---------------------------------------------
Puts the bootstrap methods into the given byte vector . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector [[output]] ) { if ( bootstrapMethods != null ) { [[output]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[loop]] ( final ByteVector [[header]] ) { if ( bootstrapMethods != null ) { [[header]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 841 ---------------------------------------------
Resolves a JSON name for the given type and name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveJsonName]] ( final Class [[type]] , final String [[name]] ) { TypeData [[typeData]] = lookupTypeData ( [[type]] ) ; return [[typeData]] . resolveJsonName ( [[name]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String [[set]] ( final Class [[master]] , final String [[key]] ) { TypeData [[me]] = lookupTypeData ( [[master]] ) ; return [[me]] . resolveJsonName ( [[key]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 842 ---------------------------------------------
Copies the bootstrap methods from the class reader to the char buffer . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader [[classReader]] , final char [ ] [[charBuffer]] ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[bar]] ( final ClassReader [[foo]] , final char [ ] [[etc]] ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 843 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 142 / 690 / 11 / 843:  84%|████████▍ | 843/1000 [18:45<03:29,  1.34s/it][Succeeded / Failed / Skipped / Total] 142 / 691 / 11 / 844:  84%|████████▍ | 844/1000 [18:45<03:28,  1.33s/it][Succeeded / Failed / Skipped / Total] 142 / 691 / 11 / 844:  84%|████████▍ | 845/1000 [18:48<03:27,  1.34s/it][Succeeded / Failed / Skipped / Total] 142 / 692 / 11 / 845:  84%|████████▍ | 845/1000 [18:48<03:27,  1.34s/it][Succeeded / Failed / Skipped / Total] 142 / 693 / 11 / 846:  85%|████████▍ | 846/1000 [18:49<03:25,  1.33s/it][Succeeded / Failed / Skipped / Total] 142 / 693 / 11 / 846:  85%|████████▍ | 847/1000 [18:56<03:25,  1.34s/it][Succeeded / Failed / Skipped / Total] 142 / 694 / 11 / 847:  85%|████████▍ | 847/1000 [18:56<03:25,  1.34s/it][Succeeded / Failed / Skipped / Total] 142 / 695 / 11 / 848:  85%|████████▍ | 848/1000 [18:58<03:24,  1.34s/it][Succeeded / Failed / Skipped / Total] 142 / 695 / 11 / 848:  85%|████████▍ | 849/1000 [18:58<03:22,  1.34s/it][Succeeded / Failed / Skipped / Total] 142 / 696 / 11 / 849:  85%|████████▍ | 849/1000 [18:58<03:22,  1.34s/it]Create action runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime [[createActionRuntime]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime [[cache]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 844 ---------------------------------------------
Resolve the real name for the given type and json name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class type , final String [[jsonName]] ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveRealName ( [[jsonName]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[string]] ( final Class type , final String [[function]] ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveRealName ( [[function]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 845 ---------------------------------------------
Sets the major version and class name . --> [[[FAILED]]]

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int [[majorVersion]] , final String [[className]] ) { this . [[majorVersion]] = [[majorVersion]] ; this . className = [[className]] ; return addConstantClass ( [[className]] ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[ception]] ( final int [[parameter]] , final String [[icon]] ) { this . [[example]] = [[parameter]] ; this . className = [[icon]] ; return addConstantClass ( [[icon]] ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 846 ---------------------------------------------
Adds a field reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantFieldref]] ( final String owner , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[field]] ( final String owner , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 847 ---------------------------------------------
Adds a new constant to the constant pool of this symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int index , final int tag , final int value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[end]] ( final int index , final int tag , final int value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 848 ---------------------------------------------
Adds a constant method reference . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodref]] ( final String owner , final String name , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[method]] ( final String owner , final String name , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 849 ---------------------------------------------
Adds an integer or float constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantIntegerOrFloat]] ( final int tag , final int value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[string]] ( final int tag , final int value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 850 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 142 / 697 / 11 / 850:  85%|████████▌ | 850/1000 [18:58<03:20,  1.34s/it][Succeeded / Failed / Skipped / Total] 142 / 697 / 11 / 850:  85%|████████▌ | 851/1000 [19:00<03:19,  1.34s/it][Succeeded / Failed / Skipped / Total] 142 / 698 / 11 / 851:  85%|████████▌ | 851/1000 [19:00<03:19,  1.34s/it][Succeeded / Failed / Skipped / Total] 142 / 699 / 11 / 852:  85%|████████▌ | 852/1000 [19:04<03:18,  1.34s/it][Succeeded / Failed / Skipped / Total] 142 / 699 / 11 / 852:  85%|████████▌ | 853/1000 [19:05<03:17,  1.34s/it][Succeeded / Failed / Skipped / Total] 142 / 700 / 11 / 853:  85%|████████▌ | 853/1000 [19:05<03:17,  1.34s/it][Succeeded / Failed / Skipped / Total] 142 / 701 / 11 / 854:  85%|████████▌ | 854/1000 [19:07<03:16,  1.34s/it][Succeeded / Failed / Skipped / Total] 142 / 701 / 11 / 854:  86%|████████▌ | 855/1000 [19:07<03:14,  1.34s/it][Succeeded / Failed / Skipped / Total] 142 / 702 / 11 / 855:  86%|████████▌ | 855/1000 [19:08<03:14,  1.34s/it]Adds a member reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[draw]] ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 851 ---------------------------------------------
Adds a constant to the constant pool of this symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantLongOrDouble]] ( final int index , final int tag , final long [[value]] ) { add ( new Entry ( index , tag , [[value]] , hash ( tag , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[end]] ( final int index , final int tag , final long [[bit]] ) { add ( new Entry ( index , tag , [[bit]] , hash ( tag , [[bit]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 852 ---------------------------------------------
Adds a member reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry [[addConstantMemberReference]] ( final int tag , final String owner , final String name , final String descriptor ) { int hashCode = hash ( tag , owner , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry [[output]] ( final int tag , final String owner , final String name , final String descriptor ) { int hashCode = hash ( tag , owner , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 853 ---------------------------------------------
Adds a long constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantLongOrDouble]] ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . data == value ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[format]] ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry [[line]] = get ( hashCode ) ; while ( [[line]] != null ) { if ( [[line]] . tag == tag && [[line]] . hashCode == hashCode && [[line]] . data == value ) { return [[line]] ; } [[line]] = [[line]] . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 854 ---------------------------------------------
Adds a UTF8 constant at the given index . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int [[index]] , final String value ) { add ( new Entry ( [[index]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[brace]] ( final int [[bit]] , final String value ) { add ( new Entry ( [[bit]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 855 ---------------------------------------------
Adds a new constant entry to the symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int index , final String [[name]] , final String descriptor ) { final int [[tag]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , [[tag]] , [[name]] , descriptor , hash ( [[tag]] , [[name]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[array]] ( final int index , final String [[x]] , final String descriptor ) { final int [[status]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , [[status]] , [[x]] , descriptor , hash ( [[status]] , [[x]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 856 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 142 / 703 / 11 / 856:  86%|████████▌ | 856/1000 [19:08<03:13,  1.34s/it][Succeeded / Failed / Skipped / Total] 142 / 703 / 11 / 856:  86%|████████▌ | 857/1000 [19:11<03:12,  1.34s/it][Succeeded / Failed / Skipped / Total] 142 / 704 / 11 / 857:  86%|████████▌ | 857/1000 [19:11<03:12,  1.34s/it][Succeeded / Failed / Skipped / Total] 142 / 705 / 11 / 858:  86%|████████▌ | 858/1000 [19:17<03:11,  1.35s/it][Succeeded / Failed / Skipped / Total] 142 / 705 / 11 / 858:  86%|████████▌ | 859/1000 [19:20<03:10,  1.35s/it][Succeeded / Failed / Skipped / Total] 142 / 706 / 11 / 859:  86%|████████▌ | 859/1000 [19:20<03:10,  1.35s/it][Succeeded / Failed / Skipped / Total] 142 / 707 / 11 / 860:  86%|████████▌ | 860/1000 [19:23<03:09,  1.35s/it][Succeeded / Failed / Skipped / Total] 142 / 707 / 11 / 860:  86%|████████▌ | 861/1000 [19:24<03:07,  1.35s/it][Succeeded / Failed / Skipped / Total] 142 / 708 / 11 / 861:  86%|████████▌ | 861/1000 [19:24<03:07,  1.35s/it]Adds a constant name and type to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantNameAndType]] ( final String name , final String descriptor ) { final int [[tag]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( [[tag]] , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( [[tag]] , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[print]] ( final String name , final String descriptor ) { final int [[array]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( [[array]] , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[array]] && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( [[array]] , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[array]] , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 857 ---------------------------------------------
Adds a UTF8 constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantUtf8]] ( final String [[value]] ) { int [[hashCode]] = hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == [[hashCode]] && entry . value . equals ( [[value]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( [[value]] ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , [[value]] , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[declare]] ( final String [[sign]] ) { int [[icon]] = hash ( Symbol . CONSTANT_UTF8_TAG , [[sign]] ) ; Entry entry = get ( [[icon]] ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == [[icon]] && entry . value . equals ( [[sign]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( [[sign]] ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , [[sign]] , [[icon]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 858 ---------------------------------------------
Adds a constant method handle to the symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[library]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 859 ---------------------------------------------
Adds a constant method handle to the symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMethodHandle]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int [[hashCode]] = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[array]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int [[array]] = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , [[array]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 860 ---------------------------------------------
Adds a reference to a UTF - 8 constant . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int index , final int tag , final String value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[expand]] ( final int index , final int tag , final String value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 861 ---------------------------------------------
Adds a dynamic constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantDynamic]] ( final String name , final String [[descriptor]] , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[bootstrapMethod]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , [[descriptor]] , [[bootstrapMethod]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[list]] ( final String name , final String [[control]] , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[add]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , [[control]] , [[add]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 862 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 142 / 709 / 11 / 862:  86%|████████▌ | 862/1000 [19:24<03:06,  1.35s/it][Succeeded / Failed / Skipped / Total] 142 / 709 / 11 / 862:  86%|████████▋ | 863/1000 [19:24<03:04,  1.35s/it][Succeeded / Failed / Skipped / Total] 142 / 710 / 11 / 863:  86%|████████▋ | 863/1000 [19:24<03:04,  1.35s/it][Succeeded / Failed / Skipped / Total] 142 / 711 / 11 / 864:  86%|████████▋ | 864/1000 [19:25<03:03,  1.35s/it][Succeeded / Failed / Skipped / Total] 142 / 711 / 11 / 864:  86%|████████▋ | 865/1000 [19:28<03:02,  1.35s/it][Succeeded / Failed / Skipped / Total] 143 / 711 / 11 / 865:  86%|████████▋ | 865/1000 [19:28<03:02,  1.35s/it][Succeeded / Failed / Skipped / Total] 143 / 712 / 11 / 866:  87%|████████▋ | 866/1000 [19:28<03:00,  1.35s/it][Succeeded / Failed / Skipped / Total] 143 / 712 / 11 / 866:  87%|████████▋ | 867/1000 [19:30<02:59,  1.35s/it][Succeeded / Failed / Skipped / Total] 143 / 713 / 11 / 867:  87%|████████▋ | 867/1000 [19:30<02:59,  1.35s/it]Adds a constant invoke dynamic reference . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantInvokeDynamic]] ( final String [[name]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , [[name]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[type]] ( final String [[icon]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , [[icon]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 863 ---------------------------------------------
Adds a UTF8 constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantUtf8Reference]] ( final int tag , final String [[value]] ) { int hashCode = hash ( tag , [[value]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( [[value]] ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( [[value]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[format]] ( final int tag , final String [[bit]] ) { int hashCode = hash ( tag , [[bit]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( [[bit]] ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( [[bit]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[bit]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 864 ---------------------------------------------
Adds a constant for a dynamic or invoke dynamic reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[draw]] ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 865 ---------------------------------------------
Add a type to the type table . --> C - > C - > C --> Socre: 1.0

[[[[Adv]]]]: int [[addMergedType]] ( final int [[typeTableIndex1]] , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int [[c]] ( final int [[basic]] , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 866 ---------------------------------------------
Adds a bootstrap method to the symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle bootstrapMethodHandle , final Object ... [[bootstrapMethodArguments]] ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[database]] ( final Handle bootstrapMethodHandle , final Object ... [[array]] ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 867 ---------------------------------------------
Removes all entries from this multimap . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[move]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 868 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 143 / 714 / 11 / 868:  87%|████████▋ | 868/1000 [19:32<02:58,  1.35s/it][Succeeded / Failed / Skipped / Total] 143 / 714 / 11 / 868:  87%|████████▋ | 869/1000 [19:33<02:56,  1.35s/it][Succeeded / Failed / Skipped / Total] 143 / 715 / 11 / 869:  87%|████████▋ | 869/1000 [19:33<02:56,  1.35s/it][Succeeded / Failed / Skipped / Total] 144 / 715 / 11 / 870:  87%|████████▋ | 870/1000 [19:36<02:55,  1.35s/it][Succeeded / Failed / Skipped / Total] 144 / 715 / 11 / 870:  87%|████████▋ | 871/1000 [19:37<02:54,  1.35s/it][Succeeded / Failed / Skipped / Total] 144 / 716 / 11 / 871:  87%|████████▋ | 871/1000 [19:37<02:54,  1.35s/it][Succeeded / Failed / Skipped / Total] 144 / 717 / 11 / 872:  87%|████████▋ | 872/1000 [19:38<02:52,  1.35s/it][Succeeded / Failed / Skipped / Total] 144 / 717 / 11 / 872:  87%|████████▋ | 873/1000 [19:39<02:51,  1.35s/it][Succeeded / Failed / Skipped / Total] 144 / 718 / 11 / 873:  87%|████████▋ | 873/1000 [19:39<02:51,  1.35s/it][Succeeded / Failed / Skipped / Total] 144 / 719 / 11 / 874:  87%|████████▋ | 874/1000 [19:40<02:50,  1.35s/it][Succeeded / Failed / Skipped / Total] 144 / 719 / 11 / 874:  88%|████████▊ | 875/1000 [19:43<02:49,  1.35s/it][Succeeded / Failed / Skipped / Total] 144 / 720 / 11 / 875:  88%|████████▊ | 875/1000 [19:43<02:49,  1.35s/it]Adds a dynamic reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[sequence]] ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 869 ---------------------------------------------
Returns all entries in the map . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > [[all]] = new LinkedList <> ( ) ; MapEntry < V > [[e]] = head . after ; while ( [[e]] != head ) { [[all]] . add ( [[e]] ) ; [[e]] = [[e]] . after ; } return [[all]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[find]] ( ) { List < Map . Entry < String , V > > [[mode]] = new LinkedList <> ( ) ; MapEntry < V > [[type]] = head . after ; while ( [[type]] != head ) { [[mode]] . add ( [[type]] ) ; [[type]] = [[type]] . after ; } return [[mode]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 870 ---------------------------------------------
Create the first chain delegate . --> protected void foo ( ) { --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[foo]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 871 ---------------------------------------------
Returns an iterator over the entries in this map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] [[e]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[e]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = [[e]] [ 0 ] ; [[e]] [ 0 ] = [[e]] [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[time]] ( ) { final MapEntry [ ] [[move]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[move]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = [[move]] [ 0 ] ; [[move]] [ 0 ] = [[move]] [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 872 ---------------------------------------------
Visits the end of the method . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[visitEnd]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void [[use]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 873 ---------------------------------------------
Returns the hash value of the given name . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[hash]] ( final String name ) { int h = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[include]] ( final String name ) { int h = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 874 ---------------------------------------------
Visits an annotation on this method . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public AnnotationVisitor [[visitAnnotation]] ( final String [[desc]] , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( [[desc]] , visible ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor [[after]] ( final String [[left]] , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( [[left]] , visible ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 875 ---------------------------------------------
Parses a path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path [[parse]] ( final String path ) { return path == null ? new Path ( ) : new Path ( StringUtil . splitc ( path , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path [[output]] ( final String path ) { return path == null ? new Path ( ) : new Path ( StringUtil . splitc ( path , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 876 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 144 / 721 / 11 / 876:  88%|████████▊ | 876/1000 [19:44<02:47,  1.35s/it][Succeeded / Failed / Skipped / Total] 144 / 721 / 11 / 876:  88%|████████▊ | 877/1000 [19:44<02:46,  1.35s/it][Succeeded / Failed / Skipped / Total] 144 / 722 / 11 / 877:  88%|████████▊ | 877/1000 [19:44<02:46,  1.35s/it][Succeeded / Failed / Skipped / Total] 144 / 723 / 11 / 878:  88%|████████▊ | 878/1000 [19:44<02:44,  1.35s/it][Succeeded / Failed / Skipped / Total] 144 / 723 / 11 / 878:  88%|████████▊ | 879/1000 [19:45<02:43,  1.35s/it][Succeeded / Failed / Skipped / Total] 144 / 724 / 11 / 879:  88%|████████▊ | 879/1000 [19:45<02:43,  1.35s/it][Succeeded / Failed / Skipped / Total] 145 / 724 / 11 / 880:  88%|████████▊ | 880/1000 [19:47<02:41,  1.35s/it][Succeeded / Failed / Skipped / Total] 145 / 724 / 11 / 880:  88%|████████▊ | 881/1000 [19:48<02:40,  1.35s/it][Succeeded / Failed / Skipped / Total] 145 / 725 / 11 / 881:  88%|████████▊ | 881/1000 [19:48<02:40,  1.35s/it]Pushes a field to the path . --> [[[FAILED]]]

[[[[Adv]]]]: public Path [[push]] ( final CharSequence [[field]] ) { _push ( [[field]] ) ; if ( altPath != null ) { altPath . push ( [[field]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[finder]] ( final CharSequence [[root]] ) { _push ( [[root]] ) ; if ( altPath != null ) { altPath . push ( [[root]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 877 ---------------------------------------------
Returns all values with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public List < V > [[getAll]] ( final String [[name]] ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( [[name]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[name]] , e . key ) ) { values . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[b]] ( final String [[b]] ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( [[b]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[b]] , e . key ) ) { values . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 878 ---------------------------------------------
Create the first chain delegate . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "[[False]]" != "[[False]]" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "[[False]]" != "[[False]]" ) ; } visitReturn ( methodVisitor , tmd . msign , "[[False]]" != "[[False]]" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[echo]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "[[be]]" != "[[be]]" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "[[be]]" != "[[be]]" ) ; } visitReturn ( methodVisitor , tmd . msign , "[[be]]" != "[[be]]" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 879 ---------------------------------------------
Increases the capacity if it is less than the given minimum . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[grow]] ( final int [[minCapacity]] ) { final int [[oldCapacity]] = buffer . length ; int newCapacity = [[oldCapacity]] << 1 ; if ( newCapacity - [[minCapacity]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[when]] ( final int [[ram]] ) { final int [[frame]] = buffer . length ; int newCapacity = [[frame]] << 1 ; if ( newCapacity - [[ram]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 880 ---------------------------------------------
Converts JtxTransactionMode to DbTransactionMode --> Executes a JtxTransactionMode --> Socre: 1.0

[[[[Adv]]]]: public static DbTransactionMode [[convertToDbMode]] ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode [[execute]] ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 881 ---------------------------------------------
Configure the servlet context . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext [[servletContext]] ) { [[servletContext]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration [[filter]] = [[servletContext]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; [[filter]] . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration [[filter]] = [[servletContext]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; [[filter]] . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[exception]] ( final ServletContext [[ability]] ) { [[ability]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration [[model]] = [[ability]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; [[model]] . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration [[model]] = [[ability]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; [[model]] . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 882 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 145 / 726 / 11 / 882:  88%|████████▊ | 882/1000 [19:49<02:39,  1.35s/it][Succeeded / Failed / Skipped / Total] 145 / 726 / 11 / 882:  88%|████████▊ | 883/1000 [19:52<02:37,  1.35s/it][Succeeded / Failed / Skipped / Total] 145 / 727 / 11 / 883:  88%|████████▊ | 883/1000 [19:52<02:37,  1.35s/it][Succeeded / Failed / Skipped / Total] 145 / 728 / 11 / 884:  88%|████████▊ | 884/1000 [19:53<02:36,  1.35s/it][Succeeded / Failed / Skipped / Total] 145 / 728 / 11 / 884:  88%|████████▊ | 885/1000 [19:56<02:35,  1.35s/it][Succeeded / Failed / Skipped / Total] 145 / 729 / 11 / 885:  88%|████████▊ | 885/1000 [19:56<02:35,  1.35s/it][Succeeded / Failed / Skipped / Total] 145 / 730 / 11 / 886:  89%|████████▊ | 886/1000 [19:56<02:34,  1.35s/it][Succeeded / Failed / Skipped / Total] 145 / 730 / 11 / 886:  89%|████████▊ | 887/1000 [19:59<02:32,  1.35s/it][Succeeded / Failed / Skipped / Total] 145 / 731 / 11 / 887:  89%|████████▊ | 887/1000 [19:59<02:32,  1.35s/it][Succeeded / Failed / Skipped / Total] 145 / 732 / 11 / 888:  89%|████████▉ | 888/1000 [20:02<02:31,  1.35s/it][Succeeded / Failed / Skipped / Total] 145 / 732 / 11 / 888:  89%|████████▉ | 889/1000 [20:03<02:30,  1.35s/it][Succeeded / Failed / Skipped / Total] 145 / 733 / 11 / 889:  89%|████████▉ | 889/1000 [20:03<02:30,  1.35s/it][Succeeded / Failed / Skipped / Total] 146 / 733 / 11 / 890:  89%|████████▉ | 890/1000 [20:04<02:28,  1.35s/it][Succeeded / Failed / Skipped / Total] 146 / 733 / 11 / 890:  89%|████████▉ | 891/1000 [20:05<02:27,  1.35s/it]Appends a sequence of characters to this FastCharBuffer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence [[csq]] , final int [[start]] , final int end ) { for ( int i = [[start]] ; i < end ; i ++ ) { [[append]] ( [[csq]] . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[set]] ( final CharSequence [[list]] , final int [[type]] , final int end ) { for ( int i = [[type]] ; i < end ; i ++ ) { [[set]] ( [[list]] . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 883 ---------------------------------------------
Executes the pathref and returns the next result . --> [[[FAILED]]]

[[[[Adv]]]]: public Object execute ( ) { String [[methodName]] = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , [[methodName]] , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object execute ( ) { String [[array]] = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , [[array]] , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 884 ---------------------------------------------
Append a buffer to the end of the list . --> [[[FAILED]]]

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer [[buffer]] ) { if ( [[buffer]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[to]] ( final Buffer [[array]] ) { if ( [[array]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 885 ---------------------------------------------
Adds all entries from the given map to this map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map [[t]] ) { for ( Object o : [[t]] . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[define]] ( final Map [[method]] ) { for ( Object o : [[method]] . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 886 ---------------------------------------------
Reads a property from the source object . --> [[[FAILED]]]

[[[[Adv]]]]: private Object [[readProperty]] ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter getter = propertyDescriptor . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[field]] ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter getter = propertyDescriptor . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 887 ---------------------------------------------
Returns an array of all field descriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] [[getAllFieldDescriptors]] ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { allFields [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] [[fields]] ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { allFields [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 888 ---------------------------------------------
Writes this response to the given output stream with the given progress listener . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream [[out]] , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[end]] ( final OutputStream [[master]] , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 889 ---------------------------------------------
Returns the value associated with the given key as a String . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getString]] ( final String [[key]] ) { CharSequence cs = ( CharSequence ) map . get ( [[key]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[move]] ( final String [[map]] ) { CharSequence cs = ( CharSequence ) map . get ( [[map]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 890 ---------------------------------------------
Returns the Integer value for the given key . --> Query a number from a list of numbers --> Socre: 1.0

[[[[Adv]]]]: public Integer [[getInteger]] ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Integer ) { return ( Integer ) [[number]] ; } return [[number]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer [[query]] ( final String [[numbers]] ) { Number [[map]] = ( Number ) map . get ( [[numbers]] ) ; if ( [[map]] == null ) { return null ; } if ( [[map]] instanceof Integer ) { return ( Integer ) [[map]] ; } return [[map]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 891 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 146 / 734 / 11 / 891:  89%|████████▉ | 891/1000 [20:05<02:27,  1.35s/it][Succeeded / Failed / Skipped / Total] 146 / 735 / 11 / 892:  89%|████████▉ | 892/1000 [20:07<02:26,  1.35s/it][Succeeded / Failed / Skipped / Total] 146 / 735 / 11 / 892:  89%|████████▉ | 893/1000 [20:08<02:24,  1.35s/it][Succeeded / Failed / Skipped / Total] 146 / 736 / 11 / 893:  89%|████████▉ | 893/1000 [20:08<02:24,  1.35s/it][Succeeded / Failed / Skipped / Total] 146 / 737 / 11 / 894:  89%|████████▉ | 894/1000 [20:08<02:23,  1.35s/it][Succeeded / Failed / Skipped / Total] 146 / 737 / 11 / 894:  90%|████████▉ | 895/1000 [20:09<02:21,  1.35s/it][Succeeded / Failed / Skipped / Total] 146 / 738 / 11 / 895:  90%|████████▉ | 895/1000 [20:09<02:21,  1.35s/it][Succeeded / Failed / Skipped / Total] 146 / 739 / 11 / 896:  90%|████████▉ | 896/1000 [20:11<02:20,  1.35s/it][Succeeded / Failed / Skipped / Total] 146 / 739 / 11 / 896:  90%|████████▉ | 897/1000 [20:11<02:19,  1.35s/it][Succeeded / Failed / Skipped / Total] 146 / 740 / 11 / 897:  90%|████████▉ | 897/1000 [20:11<02:19,  1.35s/it][Succeeded / Failed / Skipped / Total] 146 / 741 / 11 / 898:  90%|████████▉ | 898/1000 [20:15<02:18,  1.35s/it][Succeeded / Failed / Skipped / Total] 146 / 741 / 11 / 898:  90%|████████▉ | 899/1000 [20:16<02:16,  1.35s/it]Returns the Long value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Long [[getLong]] ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Long ) { return ( Long ) [[number]] ; } return [[number]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long [[procedure]] ( final String [[numbers]] ) { Number [[symbol]] = ( Number ) map . get ( [[numbers]] ) ; if ( [[symbol]] == null ) { return null ; } if ( [[symbol]] instanceof Long ) { return ( Long ) [[symbol]] ; } return [[symbol]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 892 ---------------------------------------------
Returns the Double value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Double [[getDouble]] ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Double ) { return ( Double ) [[number]] ; } return [[number]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double [[name]] ( final String [[p]] ) { Number [[a]] = ( Number ) map . get ( [[p]] ) ; if ( [[a]] == null ) { return null ; } if ( [[a]] instanceof Double ) { return ( Double ) [[a]] ; } return [[a]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 893 ---------------------------------------------
Creates a BeanDefinition for the Proxetta bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > [[type]] , final Scope [[scope]] , final WiringMode [[wiringMode]] , final Consumer < T > [[consumer]] ) { if ( proxetta != null ) { final Class originalType = [[type]] ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( [[type]] ) ; [[type]] = builder . define ( ) ; return new ProxettaBeanDefinition ( name , [[type]] , [[scope]] , [[wiringMode]] , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , [[consumer]] ) ; } return super . createBeanDefinitionForRegistration ( name , [[type]] , [[scope]] , [[wiringMode]] , [[consumer]] ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > [[data]] , final Scope [[form]] , final WiringMode [[piece]] , final Consumer < T > [[method]] ) { if ( proxetta != null ) { final Class originalType = [[data]] ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( [[data]] ) ; [[data]] = builder . define ( ) ; return new ProxettaBeanDefinition ( name , [[data]] , [[form]] , [[piece]] , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , [[method]] ) ; } return super . createBeanDefinitionForRegistration ( name , [[data]] , [[form]] , [[piece]] , [[method]] ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 894 ---------------------------------------------
Returns the value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T getValue ( final String key ) { T [[val]] = ( T ) map . get ( key ) ; if ( [[val]] instanceof Map ) { return ( T ) new JsonObject ( ( Map ) [[val]] ) ; } if ( [[val]] instanceof List ) { return ( T ) new JsonArray ( ( List ) [[val]] ) ; } return [[val]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T getValue ( final String key ) { T [[function]] = ( T ) map . get ( key ) ; if ( [[function]] instanceof Map ) { return ( T ) new JsonObject ( ( Map ) [[function]] ) ; } if ( [[function]] instanceof List ) { return ( T ) new JsonArray ( ( List ) [[function]] ) ; } return [[function]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 895 ---------------------------------------------
Writes the contents of this list to the given output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream [[out]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; [[out]] . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable [[uploadable]] = ( Uploadable ) o ; InputStream inputStream = [[uploadable]] . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[out]] ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void [[foo]] ( final OutputStream [[list]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; [[list]] . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable [[http]] = ( Uploadable ) o ; InputStream inputStream = [[http]] . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[list]] ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 896 ---------------------------------------------
Adds a key - value pair to this object . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonObject [[put]] ( final String key , final String value ) { Objects . requireNonNull ( key ) ; map . put ( key , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject [[command]] ( final String key , final String value ) { Objects . requireNonNull ( key ) ; map . put ( key , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 897 ---------------------------------------------
Get a property as a Float . --> [[[FAILED]]]

[[[[Adv]]]]: public Float [[getFloat]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[name]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 898 ---------------------------------------------
Closes a folder if it has been opened . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[closeFolderIfOpened]] ( final Folder [[folder]] ) { if ( [[folder]] != null ) { try { [[folder]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void [[accept]] ( final Folder [[add]] ) { if ( [[add]] != null ) { try { [[add]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 899 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 146 / 742 / 11 / 899:  90%|████████▉ | 899/1000 [20:16<02:16,  1.35s/it][Succeeded / Failed / Skipped / Total] 147 / 742 / 11 / 900:  90%|█████████ | 900/1000 [20:16<02:15,  1.35s/it][Succeeded / Failed / Skipped / Total] 147 / 742 / 11 / 900:  90%|█████████ | 901/1000 [20:16<02:13,  1.35s/it][Succeeded / Failed / Skipped / Total] 147 / 743 / 11 / 901:  90%|█████████ | 901/1000 [20:16<02:13,  1.35s/it][Succeeded / Failed / Skipped / Total] 147 / 744 / 11 / 902:  90%|█████████ | 902/1000 [20:17<02:12,  1.35s/it][Succeeded / Failed / Skipped / Total] 147 / 744 / 11 / 902:  90%|█████████ | 903/1000 [20:18<02:10,  1.35s/it][Succeeded / Failed / Skipped / Total] 147 / 745 / 11 / 903:  90%|█████████ | 903/1000 [20:18<02:10,  1.35s/it][Succeeded / Failed / Skipped / Total] 147 / 746 / 11 / 904:  90%|█████████ | 904/1000 [20:20<02:09,  1.35s/it][Succeeded / Failed / Skipped / Total] 147 / 746 / 11 / 904:  90%|█████████ | 905/1000 [20:22<02:08,  1.35s/it][Succeeded / Failed / Skipped / Total] 147 / 747 / 11 / 905:  90%|█████████ | 905/1000 [20:22<02:08,  1.35s/it][Succeeded / Failed / Skipped / Total] 147 / 748 / 11 / 906:  91%|█████████ | 906/1000 [20:22<02:06,  1.35s/it][Succeeded / Failed / Skipped / Total] 147 / 748 / 11 / 906:  91%|█████████ | 907/1000 [20:22<02:05,  1.35s/it]Writes the contents of this list to the given writer . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final Writer writer ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void [[use]] ( final Writer writer ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 900 ---------------------------------------------
Uses the specified folder . --> var a list of collections --> Socre: 1.0

[[[[Adv]]]]: public void [[useFolder]] ( final String [[folderName]] ) { closeFolderIfOpened ( folder ) ; try { this . [[folderName]] = [[folderName]] ; this . [[folder]] = getService ( ) . getFolder ( [[folderName]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[folderName]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void [[var]] ( final String [[list]] ) { closeFolderIfOpened ( folder ) ; try { this . [[collections]] = [[list]] ; this . [[collection]] = getService ( ) . getFolder ( [[list]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[list]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 901 ---------------------------------------------
Updates the flags for the received email . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail [[receivedEmail]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[receivedEmail]] . messageNumber ( ) } , [[receivedEmail]] . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[queue]] ( final ReceivedEmail [[date]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[date]] . messageNumber ( ) } , [[date]] . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 902 ---------------------------------------------
Look up a named parameter by its name . --> [[[FAILED]]]

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String [[name]] ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( [[name]] ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[tree]] ( final String [[above]] ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( [[above]] ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 903 ---------------------------------------------
Create an alias for the target string . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[alias]] ( final String [[target]] ) { return StringPool . LEFT_CHEV . concat ( [[target]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[x]] ( final String [[r]] ) { return StringPool . LEFT_CHEV . concat ( [[r]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 904 ---------------------------------------------
Validates the action using the specified profiles . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[validateAction]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean [[system]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 905 ---------------------------------------------
Sets the target input stream . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream [[target]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[target]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[fs]] ( final InputStream [[method]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[method]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 906 ---------------------------------------------
Sets the target class . --> [[[FAILED]]]

[[[[Adv]]]]: public T setTarget ( final Class target ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( target ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + target . getName ( ) ) ; } targetClass = target ; targetClassName = target . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + target . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T setTarget ( final Class target ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( target ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + target . getName ( ) ) ; } targetClass = target ; targetClassName = target . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + target . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 907 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 147 / 749 / 11 / 907:  91%|█████████ | 907/1000 [20:22<02:05,  1.35s/it][Succeeded / Failed / Skipped / Total] 147 / 750 / 11 / 908:  91%|█████████ | 908/1000 [20:23<02:03,  1.35s/it][Succeeded / Failed / Skipped / Total] 147 / 750 / 11 / 908:  91%|█████████ | 909/1000 [20:23<02:02,  1.35s/it][Succeeded / Failed / Skipped / Total] 148 / 750 / 11 / 909:  91%|█████████ | 909/1000 [20:23<02:02,  1.35s/it][Succeeded / Failed / Skipped / Total] 148 / 751 / 11 / 910:  91%|█████████ | 910/1000 [20:24<02:01,  1.35s/it][Succeeded / Failed / Skipped / Total] 148 / 751 / 11 / 910:  91%|█████████ | 911/1000 [20:26<01:59,  1.35s/it][Succeeded / Failed / Skipped / Total] 148 / 752 / 11 / 911:  91%|█████████ | 911/1000 [20:26<01:59,  1.35s/it][Succeeded / Failed / Skipped / Total] 148 / 753 / 11 / 912:  91%|█████████ | 912/1000 [20:28<01:58,  1.35s/it][Succeeded / Failed / Skipped / Total] 148 / 753 / 11 / 912:  91%|█████████▏| 913/1000 [20:29<01:57,  1.35s/it][Succeeded / Failed / Skipped / Total] 148 / 754 / 11 / 913:  91%|█████████▏| 913/1000 [20:29<01:57,  1.35s/it]Sets the target class name . --> [[[FAILED]]]

[[[[Adv]]]]: protected T setTarget ( final String [[targetName]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[targetName]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[targetName]] ) ; } targetClassName = [[targetName]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[targetName]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T setTarget ( final String [[method]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[method]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[method]] ) ; } targetClassName = [[method]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[method]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 908 ---------------------------------------------
Adds a violation to this validator . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addViolation]] ( final String [[name]] , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[name]] , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[check]] ( final String [[change]] , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[change]] , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 909 ---------------------------------------------
Set the mime type . --> Set the alt field of the RawData . --> Socre: 1.0

[[[[Adv]]]]: public RawData as ( final String [[mimeOrExtension]] ) { if ( [[mimeOrExtension]] . contains ( StringPool . SLASH ) ) { this . [[mimeType]] = [[mimeOrExtension]] ; } else { this . [[mimeType]] = MimeTypes . getMimeType ( [[mimeOrExtension]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData as ( final String [[element]] ) { if ( [[element]] . contains ( StringPool . SLASH ) ) { this . [[alt]] = [[element]] ; } else { this . [[alt]] = MimeTypes . getMimeType ( [[element]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 910 ---------------------------------------------
Processes the input stream . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[array]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 911 ---------------------------------------------
Sets the download file name . --> [[[FAILED]]]

[[[[Adv]]]]: public RawData downloadableAs ( final String [[downloadFileName]] ) { this . downloadFileName = [[downloadFileName]] ; this . [[mimeType]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[downloadFileName]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData downloadableAs ( final String [[access]] ) { this . downloadFileName = [[access]] ; this . [[hack]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[access]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 912 ---------------------------------------------
Creates a new instance of this class . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class [[type]] = define ( ) ; try { return ClassUtil . newInstance ( [[type]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[id]] ( ) { Class [[attribute]] = define ( ) ; try { return ClassUtil . newInstance ( [[attribute]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 913 ---------------------------------------------
Create a new instance of the target class --> [[[FAILED]]]

[[[[Adv]]]]: public byte [ ] [[create]] ( ) { process ( ) ; byte [ ] [[result]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[result]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] [[message]] ( ) { process ( ) ; byte [ ] [[null]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[null]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[null]] ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 914 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 148 / 755 / 11 / 914:  91%|█████████▏| 914/1000 [20:31<01:55,  1.35s/it][Succeeded / Failed / Skipped / Total] 148 / 755 / 11 / 914:  92%|█████████▏| 915/1000 [20:32<01:54,  1.35s/it][Succeeded / Failed / Skipped / Total] 148 / 756 / 11 / 915:  92%|█████████▏| 915/1000 [20:32<01:54,  1.35s/it][Succeeded / Failed / Skipped / Total] 148 / 757 / 11 / 916:  92%|█████████▏| 916/1000 [20:33<01:53,  1.35s/it][Succeeded / Failed / Skipped / Total] 148 / 757 / 11 / 916:  92%|█████████▏| 917/1000 [20:34<01:51,  1.35s/it][Succeeded / Failed / Skipped / Total] 148 / 758 / 11 / 917:  92%|█████████▏| 917/1000 [20:34<01:51,  1.35s/it][Succeeded / Failed / Skipped / Total] 148 / 759 / 11 / 918:  92%|█████████▏| 918/1000 [20:35<01:50,  1.35s/it][Succeeded / Failed / Skipped / Total] 148 / 759 / 11 / 918:  92%|█████████▏| 919/1000 [20:36<01:49,  1.35s/it][Succeeded / Failed / Skipped / Total] 148 / 760 / 11 / 919:  92%|█████████▏| 919/1000 [20:36<01:49,  1.35s/it][Succeeded / Failed / Skipped / Total] 148 / 761 / 11 / 920:  92%|█████████▏| 920/1000 [20:38<01:47,  1.35s/it][Succeeded / Failed / Skipped / Total] 148 / 761 / 11 / 920:  92%|█████████▏| 921/1000 [20:42<01:46,  1.35s/it][Succeeded / Failed / Skipped / Total] 149 / 761 / 11 / 921:  92%|█████████▏| 921/1000 [20:42<01:46,  1.35s/it][Succeeded / Failed / Skipped / Total] 150 / 761 / 11 / 922:  92%|█████████▏| 922/1000 [20:42<01:45,  1.35s/it][Succeeded / Failed / Skipped / Total] 150 / 761 / 11 / 922:  92%|█████████▏| 923/1000 [20:43<01:43,  1.35s/it]Defines the target class --> [[[FAILED]]]

[[[[Adv]]]]: public Class [[define]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class [[buffer]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 915 ---------------------------------------------
Sets the from address . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[from]] ( final String [[personalName]] , final String from ) { return [[from]] ( new EmailAddress ( [[personalName]] , [[from]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T [[g]] ( final String [[after]] , final String from ) { return [[g]] ( new EmailAddress ( [[after]] , [[g]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 916 ---------------------------------------------
Adds an email address to the recipient list . --> [[[FAILED]]]

[[[[Adv]]]]: public T to ( final EmailAddress [[to]] ) { this . [[to]] = ArraysUtil . append ( this . [[to]] , to ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T to ( final EmailAddress [[array]] ) { this . [[access]] = ArraysUtil . append ( this . [[access]] , to ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 917 ---------------------------------------------
REPLACEME0 . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[REPLACEME0]] ( final EmailAddress ... [[REPLACEME0]] ) { this . replyTo = ArraysUtil . join ( this . replyTo , valueOrEmptyArray ( [[REPLACEME0]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T [[ml]] ( final EmailAddress ... [[ml]] ) { this . replyTo = ArraysUtil . join ( this . replyTo , valueOrEmptyArray ( [[ml]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 918 ---------------------------------------------
Adds a recipient address with the specified personal name and email address . --> [[[FAILED]]]

[[[[Adv]]]]: public T to ( final String [[personalName]] , final String to ) { return to ( new EmailAddress ( [[personalName]] , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T to ( final String [[zero]] , final String to ) { return to ( new EmailAddress ( [[zero]] , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 919 ---------------------------------------------
Writes the given bytes to the debug folder . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[dumpClassInDebugFolder]] ( final byte [ ] [[bytes]] ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , [[bytes]] ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void [[hide]] ( final byte [ ] [[character]] ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , [[character]] ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 920 ---------------------------------------------
Add cc addresses . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[cc]] ( final EmailAddress ... [[ccs]] ) { this . [[cc]] = ArraysUtil . join ( this . [[cc]] , valueOrEmptyArray ( [[ccs]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T [[ms]] ( final EmailAddress ... [[file]] ) { this . [[org]] = ArraysUtil . join ( this . [[org]] , valueOrEmptyArray ( [[file]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 921 ---------------------------------------------
Adds a header to the request . --> Adds a field with the given name and id to the request --> Socre: 1.0

[[[[Adv]]]]: public T [[header]] ( final String name , final String [[value]] ) { headers . put ( name , [[value]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[f]] ( final String name , final String [[id]] ) { headers . put ( name , [[id]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 922 ---------------------------------------------
Sends a plain text message . --> Sends a feed to an email --> Socre: 1.0

[[[[Adv]]]]: public T [[textMessage]] ( final String [[text]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[text]] , MimeTypes . MIME_TEXT_PLAIN , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[type]] ( final String [[email]] , final String [[feed]] ) { return message ( new EmailMessage ( [[email]] , MimeTypes . MIME_TEXT_PLAIN , [[feed]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 923 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 150 / 762 / 11 / 923:  92%|█████████▏| 923/1000 [20:43<01:43,  1.35s/it][Succeeded / Failed / Skipped / Total] 150 / 763 / 11 / 924:  92%|█████████▏| 924/1000 [20:43<01:42,  1.35s/it][Succeeded / Failed / Skipped / Total] 150 / 763 / 11 / 924:  92%|█████████▎| 925/1000 [20:44<01:40,  1.35s/it][Succeeded / Failed / Skipped / Total] 150 / 764 / 11 / 925:  92%|█████████▎| 925/1000 [20:44<01:40,  1.35s/it][Succeeded / Failed / Skipped / Total] 150 / 765 / 11 / 926:  93%|█████████▎| 926/1000 [20:45<01:39,  1.34s/it][Succeeded / Failed / Skipped / Total] 150 / 765 / 11 / 926:  93%|█████████▎| 927/1000 [20:53<01:38,  1.35s/it][Succeeded / Failed / Skipped / Total] 150 / 766 / 11 / 927:  93%|█████████▎| 927/1000 [20:53<01:38,  1.35s/it][Succeeded / Failed / Skipped / Total] 150 / 767 / 11 / 928:  93%|█████████▎| 928/1000 [20:55<01:37,  1.35s/it][Succeeded / Failed / Skipped / Total] 150 / 767 / 11 / 928:  93%|█████████▎| 929/1000 [20:56<01:36,  1.35s/it][Succeeded / Failed / Skipped / Total] 150 / 768 / 11 / 929:  93%|█████████▎| 929/1000 [20:56<01:36,  1.35s/it]Sets an HTML message with the given content . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[htmlMessage]] ( final String [[html]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[html]] , MimeTypes . MIME_TEXT_HTML , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[lb]] ( final String [[update]] , final String [[end]] ) { return message ( new EmailMessage ( [[update]] , MimeTypes . MIME_TEXT_HTML , [[end]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 924 ---------------------------------------------
Receives all the messages that match the given filter . --> [[[FAILED]]]

[[[[Adv]]]]: ReceivedEmail [ ] [[receiveMessages]] ( final EmailFilter filter , final Flags [[flagsToSet]] , final Flags [[flagsToUnset]] , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] [[times]] ( final EmailFilter filter , final Flags [[fly]] , final Flags [[flew]] , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 925 ---------------------------------------------
Returns the value of a system property . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[get]] ( final String [[name]] , final String defaultValue ) { Objects . requireNonNull ( [[name]] ) ; String value = null ; try { if ( System . getSecurityManager ( ) == null ) { value = System . getProperty ( [[name]] ) ; } else { value = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[name]] ) ) ; } } catch ( Exception ignore ) { } if ( value == null ) { return defaultValue ; } return value ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String [[call]] ( final String [[handler]] , final String defaultValue ) { Objects . requireNonNull ( [[handler]] ) ; String value = null ; try { if ( System . getSecurityManager ( ) == null ) { value = System . getProperty ( [[handler]] ) ; } else { value = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[handler]] ) ) ; } } catch ( Exception ignore ) { } if ( value == null ) { return defaultValue ; } return value ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 926 ---------------------------------------------
Returns the resolved parameters for this method . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[test]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 927 ---------------------------------------------
Gets the named property as an integer or the default value if the property is not set . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getInt]] ( final String name , final int defaultValue ) { String [[value]] = get ( name ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long [[branch]] ( final String name , final int defaultValue ) { String [[address]] = get ( name ) ; if ( [[address]] == null ) { return defaultValue ; } [[address]] = [[address]] . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( [[address]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 928 ---------------------------------------------
Looks up the path for the given alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[lookupAlias]] ( final String [[alias]] ) { String value = actionsManager . lookupPathAlias ( [[alias]] ) ; if ( value == null ) { ActionRuntime cfg = actionsManager . lookup ( [[alias]] ) ; if ( cfg != null ) { value = cfg . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String [[execute]] ( final String [[command]] ) { String value = actionsManager . lookupPathAlias ( [[command]] ) ; if ( value == null ) { ActionRuntime cfg = actionsManager . lookup ( [[command]] ) ; if ( cfg != null ) { value = cfg . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 929 ---------------------------------------------
Returns the long value of the named property or the defaultValue if the property is not set . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLong]] ( final String name , final long defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[scope]] ( final String name , final long defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 930 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 150 / 769 / 11 / 930:  93%|█████████▎| 930/1000 [20:57<01:34,  1.35s/it][Succeeded / Failed / Skipped / Total] 150 / 769 / 11 / 930:  93%|█████████▎| 931/1000 [20:58<01:33,  1.35s/it][Succeeded / Failed / Skipped / Total] 150 / 770 / 11 / 931:  93%|█████████▎| 931/1000 [20:58<01:33,  1.35s/it][Succeeded / Failed / Skipped / Total] 150 / 771 / 11 / 932:  93%|█████████▎| 932/1000 [20:59<01:31,  1.35s/it][Succeeded / Failed / Skipped / Total] 150 / 771 / 11 / 932:  93%|█████████▎| 933/1000 [20:59<01:30,  1.35s/it][Succeeded / Failed / Skipped / Total] 150 / 772 / 11 / 933:  93%|█████████▎| 933/1000 [20:59<01:30,  1.35s/it][Succeeded / Failed / Skipped / Total] 151 / 772 / 11 / 934:  93%|█████████▎| 934/1000 [21:00<01:29,  1.35s/it][Succeeded / Failed / Skipped / Total] 151 / 772 / 11 / 934:  94%|█████████▎| 935/1000 [21:03<01:27,  1.35s/it][Succeeded / Failed / Skipped / Total] 151 / 773 / 11 / 935:  94%|█████████▎| 935/1000 [21:03<01:27,  1.35s/it][Succeeded / Failed / Skipped / Total] 151 / 774 / 11 / 936:  94%|█████████▎| 936/1000 [21:05<01:26,  1.35s/it][Succeeded / Failed / Skipped / Total] 151 / 774 / 11 / 936:  94%|█████████▎| 937/1000 [21:07<01:25,  1.35s/it][Succeeded / Failed / Skipped / Total] 151 / 775 / 11 / 937:  94%|█████████▎| 937/1000 [21:07<01:25,  1.35s/it][Succeeded / Failed / Skipped / Total] 152 / 775 / 11 / 938:  94%|█████████▍| 938/1000 [21:07<01:23,  1.35s/it][Succeeded / Failed / Skipped / Total] 152 / 775 / 11 / 938:  94%|█████████▍| 939/1000 [21:09<01:22,  1.35s/it]Returns the value of the named property as a boolean . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean getBoolean ( final String name , final boolean defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "[[False]]" != "[[False]]" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean getBoolean ( final String name , final boolean defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "[[false]]" != "[[false]]" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 931 ---------------------------------------------
Resolve result path . --> [[[FAILED]]]

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String path , String value ) { boolean absolutePath = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[id]] ( String path , String value ) { boolean absolutePath = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 932 ---------------------------------------------
Resolve alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String resolveAlias ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String resolveAlias ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 933 ---------------------------------------------
Resolve result path string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String path , final String value ) { final ResultPath resultPath = resolveResultPath ( path , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[list]] ( final String path , final String value ) { final ResultPath resultPath = resolveResultPath ( path , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 934 ---------------------------------------------
Strip the last camel word from the given name . --> Returns the directory part of a name . --> Socre: 1.0

[[[[Adv]]]]: public static String [[stripLastCamelWord]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String [[dir]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 935 ---------------------------------------------
Serializes a key value pair . --> [[[FAILED]]]

[[[[Adv]]]]: protected int [[serializeKeyValue]] ( final JsonContext [[jsonContext]] , final Path [[currentPath]] , final Object [[key]] , final Object value , int count ) { if ( ( value == null ) && [[jsonContext]] . isExcludeNulls ( ) ) { return count ; } if ( [[key]] != null ) { [[currentPath]] . push ( [[key]] . toString ( ) ) ; } else { [[currentPath]] . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int [[loop]] ( final JsonContext [[al]] , final Path [[unknown]] , final Object [[constant]] , final Object value , int count ) { if ( ( value == null ) && [[al]] . isExcludeNulls ( ) ) { return count ; } if ( [[constant]] != null ) { [[unknown]] . push ( [[constant]] . toString ( ) ) ; } else { [[unknown]] . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 936 ---------------------------------------------
Returns the index of the last dot after the slash . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String [[str]] ) { int [[slashNdx]] = [[str]] . lastIndexOf ( ' ' ) ; [[slashNdx]] ++ ; return StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[write]] ( final String [[base]] ) { int [[port]] = [[base]] . lastIndexOf ( ' ' ) ; [[port]] ++ ; return StringUtil . lastIndexOf ( [[base]] , ' ' , [[base]] . length ( ) , [[port]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 937 ---------------------------------------------
Returns the index of the last dot after the slash . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[indexOfDotAfterSlash]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int [[test]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 938 ---------------------------------------------
Key schedule . --> Assumes that nw > = s --> Socre: 1.0

[[[[Adv]]]]: private void [[keySchedule]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void [[assume]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 939 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 152 / 776 / 11 / 939:  94%|█████████▍| 939/1000 [21:09<01:22,  1.35s/it][Succeeded / Failed / Skipped / Total] 152 / 777 / 11 / 940:  94%|█████████▍| 940/1000 [21:09<01:21,  1.35s/it][Succeeded / Failed / Skipped / Total] 152 / 777 / 11 / 940:  94%|█████████▍| 941/1000 [21:13<01:19,  1.35s/it][Succeeded / Failed / Skipped / Total] 152 / 778 / 11 / 941:  94%|█████████▍| 941/1000 [21:13<01:19,  1.35s/it][Succeeded / Failed / Skipped / Total] 152 / 779 / 11 / 942:  94%|█████████▍| 942/1000 [21:15<01:18,  1.35s/it][Succeeded / Failed / Skipped / Total] 152 / 779 / 11 / 942:  94%|█████████▍| 943/1000 [21:15<01:17,  1.35s/it][Succeeded / Failed / Skipped / Total] 153 / 779 / 11 / 943:  94%|█████████▍| 943/1000 [21:15<01:17,  1.35s/it][Succeeded / Failed / Skipped / Total] 153 / 780 / 11 / 944:  94%|█████████▍| 944/1000 [21:18<01:15,  1.35s/it][Succeeded / Failed / Skipped / Total] 153 / 780 / 11 / 944:  94%|█████████▍| 945/1000 [21:19<01:14,  1.35s/it][Succeeded / Failed / Skipped / Total] 153 / 781 / 11 / 945:  94%|█████████▍| 945/1000 [21:19<01:14,  1.35s/it][Succeeded / Failed / Skipped / Total] 154 / 781 / 11 / 946:  95%|█████████▍| 946/1000 [21:23<01:13,  1.36s/it][Succeeded / Failed / Skipped / Total] 154 / 781 / 11 / 946:  95%|█████████▍| 947/1000 [21:26<01:11,  1.36s/it][Succeeded / Failed / Skipped / Total] 154 / 782 / 11 / 947:  95%|█████████▍| 947/1000 [21:26<01:11,  1.36s/it]Returns the last index of a slash or dot in a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String [[str]] ) { int slashNdx = [[str]] . lastIndexOf ( ' ' ) ; int [[dotNdx]] = StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , slashNdx ) ; if ( [[dotNdx]] == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[str]] . length ( ) - 1 ) { [[dotNdx]] = slashNdx ; } else { [[dotNdx]] = - 1 ; } } return [[dotNdx]] ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[null]] ( final String [[reference]] ) { int slashNdx = [[reference]] . lastIndexOf ( ' ' ) ; int [[scope]] = StringUtil . lastIndexOf ( [[reference]] , ' ' , [[reference]] . length ( ) , slashNdx ) ; if ( [[scope]] == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[reference]] . length ( ) - 1 ) { [[scope]] = slashNdx ; } else { [[scope]] = - 1 ; } } return [[scope]] ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 940 ---------------------------------------------
Initializes the cache with the given key and tweaks . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[init]] ( final long [ ] [[key]] , final long [ ] tweak ) { final int newNw = [[key]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void [[procedure]] ( final long [ ] [[ex]] , final long [ ] tweak ) { final int newNw = [[ex]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 941 ---------------------------------------------
Mix a vector by a given depth . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[mix]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void [[swap]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 942 ---------------------------------------------
Resolves the schema name for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > [[type]] , final String defaultSchemaName ) { String [[schemaName]] = null ; final DbTable dbTable = [[type]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[schemaName]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[schemaName]] == null ) || ( [[schemaName]] . length ( ) == 0 ) ) { [[schemaName]] = defaultSchemaName ; } return [[schemaName]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[c]] ( final Class < ? > [[empty]] , final String defaultSchemaName ) { String [[command]] = null ; final DbTable dbTable = [[empty]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[command]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[command]] == null ) || ( [[command]] . length ( ) == 0 ) ) { [[command]] = defaultSchemaName ; } return [[command]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 943 ---------------------------------------------
Performs a demix for a given depth . --> j ^= y [ 0 ] ^ d --> Socre: 1.0

[[[[Adv]]]]: private void [[demix]] ( final int [[j]] , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long [[rotr]] = r [ d % DEPTH_OF_D_IN_R ] [ [[j]] ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void [[j]] ( final int [[v]] , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long [[b]] = r [ d % DEPTH_OF_D_IN_R ] [ [[v]] ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 944 ---------------------------------------------
Returns the path of this link . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[add]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[add]] ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 945 ---------------------------------------------
Removes any bounding characters from a string . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[removeAnyBounding]] ( final char s , final char e , final String [[str]] ) { if ( [[str]] == null || [[str]] . length ( ) < 2 ) { return [[str]] ; } if ( [[str]] . startsWith ( String . valueOf ( s ) ) && [[str]] . endsWith ( String . valueOf ( e ) ) ) { return [[str]] . substring ( 1 , [[str]] . length ( ) - 1 ) ; } return [[str]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String [[thread]] ( final char s , final char e , final String [[null]] ) { if ( [[null]] == null || [[null]] . length ( ) < 2 ) { return [[null]] ; } if ( [[null]] . startsWith ( String . valueOf ( s ) ) && [[null]] . endsWith ( String . valueOf ( e ) ) ) { return [[null]] . substring ( 1 , [[null]] . length ( ) - 1 ) ; } return [[null]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 946 ---------------------------------------------
Resolves the column descriptors for the given property . --> Declaration of DbEntityColumnDescriptor --> Socre: 1.0

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[resolveColumnDescriptors]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String [[columnName]] = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[declaration]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String [[array]] = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 947 ---------------------------------------------
Encrypts a block . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] [[encryptBlock]] ( final byte [ ] [[content]] , final int offset ) { long [ ] contentBlock = bytesToLongs ( [[content]] , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] [[blocks]] ( final byte [ ] [[string]] , final int offset ) { long [ ] contentBlock = bytesToLongs ( [[string]] , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 948 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 155 / 782 / 11 / 948:  95%|█████████▍| 948/1000 [21:28<01:10,  1.36s/it][Succeeded / Failed / Skipped / Total] 155 / 782 / 11 / 948:  95%|█████████▍| 949/1000 [21:29<01:09,  1.36s/it][Succeeded / Failed / Skipped / Total] 156 / 782 / 11 / 949:  95%|█████████▍| 949/1000 [21:29<01:09,  1.36s/it][Succeeded / Failed / Skipped / Total] 156 / 783 / 11 / 950:  95%|█████████▌| 950/1000 [21:31<01:07,  1.36s/it][Succeeded / Failed / Skipped / Total] 156 / 783 / 11 / 950:  95%|█████████▌| 951/1000 [21:34<01:06,  1.36s/it][Succeeded / Failed / Skipped / Total] 156 / 784 / 11 / 951:  95%|█████████▌| 951/1000 [21:34<01:06,  1.36s/it][Succeeded / Failed / Skipped / Total] 156 / 785 / 11 / 952:  95%|█████████▌| 952/1000 [21:34<01:05,  1.36s/it][Succeeded / Failed / Skipped / Total] 156 / 785 / 11 / 952:  95%|█████████▌| 953/1000 [21:40<01:04,  1.36s/it][Succeeded / Failed / Skipped / Total] 156 / 786 / 11 / 953:  95%|█████████▌| 953/1000 [21:40<01:04,  1.36s/it][Succeeded / Failed / Skipped / Total] 156 / 787 / 11 / 954:  95%|█████████▌| 954/1000 [21:42<01:02,  1.37s/it][Succeeded / Failed / Skipped / Total] 156 / 787 / 11 / 954:  96%|█████████▌| 955/1000 [21:44<01:01,  1.37s/it]Ungzips a file . --> Takes a gzipped file and returns the type of the file --> Socre: 1.0

[[[[Adv]]]]: public static File [[ungzip]] ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File [[out]] = new File ( outFileName ) ; [[out]] . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( [[out]] ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return [[out]] ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File [[loss]] ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File [[type]] = new File ( outFileName ) ; [[type]] . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( [[type]] ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return [[type]] ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 949 ---------------------------------------------
Gzips a file . --> Returns the gzipped header of the given list --> Socre: 1.0

[[[[Adv]]]]: public static File [[gzip]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream [[fis]] = new FileInputStream ( [[file]] ) ; String gzipName = [[file]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( [[fis]] , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( [[fis]] ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File [[header]] ( final File [[list]] ) throws IOException { if ( [[list]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream [[icon]] = new FileInputStream ( [[list]] ) ; String gzipName = [[list]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( [[icon]] , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( [[icon]] ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 950 ---------------------------------------------
Initialize with the given key message and tweaks . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[init]] ( final String keyMessage , final long [[tweak1]] , final long tweak2 ) { long [ ] tweak = new long [ ] { [[tweak1]] , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[init]] ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void [[string]] ( final String keyMessage , final long [[block]] , final long tweak2 ) { long [ ] tweak = new long [ ] { [[block]] , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[string]] ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 951 ---------------------------------------------
Create a zlib file for the given file --> [[[FAILED]]]

[[[[Adv]]]]: public static File [[zlib]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String [[zlibFileName]] = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( [[zlibFileName]] ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( [[zlibFileName]] ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File [[closure]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String [[can]] = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( [[can]] ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( [[can]] ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 952 ---------------------------------------------
Converts a byte array into an array of longs . --> [[[FAILED]]]

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] [[ba]] , final int [[offset]] , final int [[size]] ) { long [ ] result = new long [ [[size]] >> 3 ] ; int i8 = [[offset]] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( [[ba]] , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[line]] ( final byte [ ] [[symbol]] , final int [[symbol]] , final int [[add]] ) { long [ ] result = new long [ [[add]] >> 3 ] ; int i8 = [[symbol]] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( [[symbol]] , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 953 ---------------------------------------------
Unzips a zip file to a destination directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[unzip]] ( final String [[zipFile]] , final String destDir , final String ... [[patterns]] ) throws IOException { [[unzip]] ( new File ( [[zipFile]] ) , new File ( destDir ) , [[patterns]] ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void [[list]] ( final String [[path]] , final String destDir , final String ... [[view]] ) throws IOException { [[list]] ( new File ( [[path]] ) , new File ( destDir ) , [[view]] ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 954 ---------------------------------------------
Adds a file to a ZIP output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream [[zos]] , final File [[file]] , String [[path]] , final String comment , final boolean recursive ) throws IOException { if ( ! [[file]] . exists ( ) ) { throw new FileNotFoundException ( [[file]] . toString ( ) ) ; } if ( [[path]] == null ) { [[path]] = [[file]] . getName ( ) ; } while ( [[path]] . length ( ) != 0 && [[path]] . charAt ( 0 ) == ' ' ) { [[path]] = [[path]] . substring ( 1 ) ; } boolean [[isDir]] = [[file]] . isDirectory ( ) ; if ( [[isDir]] ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[of]] ( final ZipOutputStream [[age]] , final File [[reference]] , String [[input]] , final String comment , final boolean recursive ) throws IOException { if ( ! [[reference]] . exists ( ) ) { throw new FileNotFoundException ( [[reference]] . toString ( ) ) ; } if ( [[input]] == null ) { [[input]] = [[reference]] . getName ( ) ; } while ( [[input]] . length ( ) != 0 && [[input]] . charAt ( 0 ) == ' ' ) { [[input]] = [[input]] . substring ( 1 ) ; } boolean [[jump]] = [[reference]] . isDirectory ( ) ; if ( [[jump]] ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
[Succeeded / Failed / Skipped / Total] 156 / 788 / 11 / 955:  96%|█████████▌| 955/1000 [21:44<01:01,  1.37s/it][Succeeded / Failed / Skipped / Total] 156 / 789 / 11 / 956:  96%|█████████▌| 956/1000 [21:46<01:00,  1.37s/it][Succeeded / Failed / Skipped / Total] 156 / 789 / 11 / 956:  96%|█████████▌| 957/1000 [21:46<00:58,  1.37s/it][Succeeded / Failed / Skipped / Total] 156 / 790 / 11 / 957:  96%|█████████▌| 957/1000 [21:46<00:58,  1.37s/it][Succeeded / Failed / Skipped / Total] 156 / 791 / 11 / 958:  96%|█████████▌| 958/1000 [21:47<00:57,  1.36s/it][Succeeded / Failed / Skipped / Total] 156 / 791 / 11 / 958:  96%|█████████▌| 959/1000 [21:48<00:55,  1.36s/it][Succeeded / Failed / Skipped / Total] 156 / 792 / 11 / 959:  96%|█████████▌| 959/1000 [21:48<00:55,  1.36s/it][Succeeded / Failed / Skipped / Total] 156 / 793 / 11 / 960:  96%|█████████▌| 960/1000 [21:49<00:54,  1.36s/it][Succeeded / Failed / Skipped / Total] 156 / 793 / 11 / 960:  96%|█████████▌| 961/1000 [21:49<00:53,  1.36s/it][Succeeded / Failed / Skipped / Total] 156 / 794 / 11 / 961:  96%|█████████▌| 961/1000 [21:49<00:53,  1.36s/it]--------------------------------------------- Result 955 ---------------------------------------------
Sets the request bundle name . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest [[request]] , final String [[bundleName]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[bundleName]] ) ; } [[request]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[bundleName]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[loop]] ( final ServletRequest [[io]] , final String [[call]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[call]] ) ; } [[io]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[call]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 956 ---------------------------------------------
Returns the property descriptor with the given name and whether it is declared or not . --> [[[FAILED]]]

[[[[Adv]]]]: public PropertyDescriptor [[getPropertyDescriptor]] ( final String name , final boolean [[declared]] ) { PropertyDescriptor [[propertyDescriptor]] = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( [[propertyDescriptor]] != null ) && [[propertyDescriptor]] . matchDeclared ( [[declared]] ) ) { return [[propertyDescriptor]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor [[format]] ( final String name , final boolean [[data]] ) { PropertyDescriptor [[field]] = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( [[field]] != null ) && [[field]] . matchDeclared ( [[data]] ) ) { return [[field]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 957 ---------------------------------------------
Gets the field descriptor with the given name and declared flag . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String name , final boolean [[declared]] ) { final FieldDescriptor [[fieldDescriptor]] = getFields ( ) . getFieldDescriptor ( name ) ; if ( [[fieldDescriptor]] != null ) { if ( ! [[fieldDescriptor]] . matchDeclared ( [[declared]] ) ) { return null ; } } return [[fieldDescriptor]] ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[foo]] ( final String name , final boolean [[value]] ) { final FieldDescriptor [[bold]] = getFields ( ) . getFieldDescriptor ( name ) ; if ( [[bold]] != null ) { if ( ! [[bold]] . matchDeclared ( [[value]] ) ) { return null ; } } return [[bold]] ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 958 ---------------------------------------------
Lists all the entries in a zip file . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < String > [[listZip]] ( final File zipFile ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String [[entryName]] = entry . getName ( ) ; entries . add ( [[entryName]] ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > [[file]] ( final File zipFile ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String [[ur]] = entry . getName ( ) ; entries . add ( [[ur]] ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 959 ---------------------------------------------
Sets the session locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession [[session]] , final String [[localeCode]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[localeCode]] ) ; } Locale locale = Locale . forLanguageTag ( [[localeCode]] ) ; [[session]] . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[queue]] ( final HttpSession [[name]] , final String [[sessions]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[sessions]] ) ; } Locale locale = Locale . forLanguageTag ( [[sessions]] ) ; [[name]] . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 960 ---------------------------------------------
Gets the locale from the session . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession [[session]] ) { Locale [[locale]] = ( Locale ) [[session]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[locale]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[locale]] ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[queue]] ( final HttpSession [[end]] ) { Locale [[s]] = ( Locale ) [[end]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[s]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[s]] ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 961 ---------------------------------------------
Adds a list of profiles to the properties . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... [[profiles]] ) { if ( [[profiles]] == null ) { return this ; } for ( String [[profile]] : [[profiles]] ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[cript]] ( final String ... [[spec]] ) { if ( [[spec]] == null ) { return this ; } for ( String [[cript]] : [[spec]] ) { addProfiles ( [[cript]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 962 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 156 / 795 / 11 / 962:  96%|█████████▌| 962/1000 [21:51<00:51,  1.36s/it][Succeeded / Failed / Skipped / Total] 156 / 795 / 11 / 962:  96%|█████████▋| 963/1000 [21:53<00:50,  1.36s/it][Succeeded / Failed / Skipped / Total] 156 / 796 / 11 / 963:  96%|█████████▋| 963/1000 [21:53<00:50,  1.36s/it][Succeeded / Failed / Skipped / Total] 156 / 797 / 11 / 964:  96%|█████████▋| 964/1000 [21:55<00:49,  1.36s/it][Succeeded / Failed / Skipped / Total] 156 / 797 / 11 / 964:  96%|█████████▋| 965/1000 [21:55<00:47,  1.36s/it][Succeeded / Failed / Skipped / Total] 156 / 798 / 11 / 965:  96%|█████████▋| 965/1000 [21:55<00:47,  1.36s/it][Succeeded / Failed / Skipped / Total] 156 / 799 / 11 / 966:  97%|█████████▋| 966/1000 [21:57<00:46,  1.36s/it][Succeeded / Failed / Skipped / Total] 156 / 799 / 11 / 966:  97%|█████████▋| 967/1000 [22:02<00:45,  1.37s/it][Succeeded / Failed / Skipped / Total] 156 / 800 / 11 / 967:  97%|█████████▋| 967/1000 [22:02<00:45,  1.37s/it][Succeeded / Failed / Skipped / Total] 156 / 801 / 11 / 968:  97%|█████████▋| 968/1000 [22:03<00:43,  1.37s/it][Succeeded / Failed / Skipped / Total] 156 / 801 / 11 / 968:  97%|█████████▋| 969/1000 [22:03<00:42,  1.37s/it]Adds content to a ZIP output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream [[zos]] , final byte [ ] [[content]] , String [[path]] , final String comment ) throws IOException { while ( [[path]] . length ( ) != 0 && [[path]] . charAt ( 0 ) == ' ' ) { [[path]] = [[path]] . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( [[path]] , ' ' ) ) { [[path]] = [[path]] . substring ( 0 , [[path]] . length ( ) - 1 ) ; } ZipEntry [[zipEntry]] = new ZipEntry ( [[path]] ) ; [[zipEntry]] . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { [[zipEntry]] . setComment ( comment ) ; } [[zos]] . putNextEntry ( [[zipEntry]] ) ; InputStream is = new ByteArrayInputStream ( [[content]] ) ; try { StreamUtil . copy ( is , [[zos]] ) ; } finally { StreamUtil . close ( is ) ; } [[zos]] . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void [[loop]] ( final ZipOutputStream [[content]] , final byte [ ] [[character]] , String [[feature]] , final String comment ) throws IOException { while ( [[feature]] . length ( ) != 0 && [[feature]] . charAt ( 0 ) == ' ' ) { [[feature]] = [[feature]] . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( [[feature]] , ' ' ) ) { [[feature]] = [[feature]] . substring ( 0 , [[feature]] . length ( ) - 1 ) ; } ZipEntry [[sequence]] = new ZipEntry ( [[feature]] ) ; [[sequence]] . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { [[sequence]] . setComment ( comment ) ; } [[content]] . putNextEntry ( [[sequence]] ) ; InputStream is = new ByteArrayInputStream ( [[character]] ) ; try { StreamUtil . copy ( is , [[content]] ) ; } finally { StreamUtil . close ( is ) ; } [[content]] . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 963 ---------------------------------------------
Read a long in little - endian format from the given buffer . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] buf , final int offset ) { return ( ( long ) buf [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[program]] ( final byte [ ] buf , final int offset ) { return ( ( long ) buf [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 964 ---------------------------------------------
Returns the bytecode offset of a type annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[string]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 965 ---------------------------------------------
Reads a label from a bytecode . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label readLabel ( final int [[bytecodeOffset]] , final Label [ ] labels ) { if ( labels [ [[bytecodeOffset]] ] == null ) { labels [ [[bytecodeOffset]] ] = new Label ( ) ; } return labels [ [[bytecodeOffset]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label readLabel ( final int [[array]] , final Label [ ] labels ) { if ( labels [ [[array]] ] == null ) { labels [ [[array]] ] = new Label ( ) ; } return labels [ [[array]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 966 ---------------------------------------------
Filter parameters for the given bean name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [ ] filterParametersForBeanName ( String [[beanName]] , final boolean resolveReferenceParams ) { [[beanName]] = [[beanName]] + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( [[beanName]] ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] filterParametersForBeanName ( String [[a]] , final boolean resolveReferenceParams ) { [[a]] = [[a]] + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( [[a]] ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 967 ---------------------------------------------
Gets the request map . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[move]] ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 968 ---------------------------------------------
Read element values . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[main]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 969 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 156 / 802 / 11 / 969:  97%|█████████▋| 969/1000 [22:03<00:42,  1.37s/it][Succeeded / Failed / Skipped / Total] 156 / 803 / 11 / 970:  97%|█████████▋| 970/1000 [22:04<00:40,  1.37s/it][Succeeded / Failed / Skipped / Total] 156 / 803 / 11 / 970:  97%|█████████▋| 971/1000 [22:06<00:39,  1.37s/it][Succeeded / Failed / Skipped / Total] 156 / 804 / 11 / 971:  97%|█████████▋| 971/1000 [22:06<00:39,  1.37s/it][Succeeded / Failed / Skipped / Total] 156 / 805 / 11 / 972:  97%|█████████▋| 972/1000 [22:09<00:38,  1.37s/it][Succeeded / Failed / Skipped / Total] 156 / 805 / 11 / 972:  97%|█████████▋| 973/1000 [22:09<00:36,  1.37s/it][Succeeded / Failed / Skipped / Total] 156 / 806 / 11 / 973:  97%|█████████▋| 973/1000 [22:09<00:36,  1.37s/it][Succeeded / Failed / Skipped / Total] 157 / 806 / 11 / 974:  97%|█████████▋| 974/1000 [22:10<00:35,  1.37s/it][Succeeded / Failed / Skipped / Total] 157 / 806 / 11 / 974:  98%|█████████▊| 975/1000 [22:12<00:34,  1.37s/it][Succeeded / Failed / Skipped / Total] 157 / 807 / 11 / 975:  98%|█████████▊| 975/1000 [22:12<00:34,  1.37s/it][Succeeded / Failed / Skipped / Total] 158 / 807 / 11 / 976:  98%|█████████▊| 976/1000 [22:12<00:32,  1.37s/it][Succeeded / Failed / Skipped / Total] 158 / 807 / 11 / 976:  98%|█████████▊| 977/1000 [22:14<00:31,  1.37s/it]Read bootstrap methods attribute . --> [[[FAILED]]]

[[[[Adv]]]]: private int [ ] readBootstrapMethodsAttribute ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] readBootstrapMethodsAttribute ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 970 ---------------------------------------------
Reads the contents of an input stream into a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream [[inputStream]] , final boolean close ) throws IOException { if ( [[inputStream]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = [[inputStream]] . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { [[inputStream]] . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[instruction]] ( final InputStream [[close]] , final boolean close ) throws IOException { if ( [[close]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = [[close]] . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { [[close]] . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 971 ---------------------------------------------
Create the request map . --> [[[FAILED]]]

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[createRequestMap]] ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > [[map]] = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , [[map]] ) ; return [[map]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[test]] ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > [[port]] = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , [[port]] ) ; return [[port]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 972 ---------------------------------------------
Initializes this filter . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig [[filterConfig]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[command]] ( final FilterConfig [[buffer]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 973 ---------------------------------------------
Inspect constructors of this class . --> [[[FAILED]]]

[[[[Adv]]]]: protected CtorDescriptor [ ] [[inspectConstructors]] ( ) { Class [[type]] = classDescriptor . getType ( ) ; Constructor [ ] [[ctors]] = [[type]] . getDeclaredConstructors ( ) ; CtorDescriptor [ ] [[allCtors]] = new CtorDescriptor [ [[ctors]] . length ] ; for ( int i = 0 ; i < [[ctors]] . length ; i ++ ) { Constructor [[ctor]] = [[ctors]] [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( [[ctor]] ) ; [[allCtors]] [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return [[allCtors]] ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] [[arguments]] ( ) { Class [[arrays]] = classDescriptor . getType ( ) ; Constructor [ ] [[function]] = [[arrays]] . getDeclaredConstructors ( ) ; CtorDescriptor [ ] [[scope]] = new CtorDescriptor [ [[function]] . length ] ; for ( int i = 0 ; i < [[function]] . length ; i ++ ) { Constructor [[argument]] = [[function]] [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( [[argument]] ) ; [[scope]] [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return [[scope]] ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 974 ---------------------------------------------
Add a file consumer to the chain of consumers . --> Find files by consumers . --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[onFile]] ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile [[by]] ( final Consumer < File > [[users]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[users]] ) ; } else { consumers . add ( [[users]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 975 ---------------------------------------------
Returns the constructor descriptor for the given constructor arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public CtorDescriptor [[getCtorDescriptor]] ( final Class ... [[args]] ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] [[arg]] = ctorDescriptor . getParameters ( ) ; if ( [[arg]] . length != [[args]] . length ) { continue ; } for ( int j = 0 ; j < [[arg]] . length ; j ++ ) { if ( [[arg]] [ j ] != [[args]] [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor [[by]] ( final Class ... [[object]] ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] [[itself]] = ctorDescriptor . getParameters ( ) ; if ( [[itself]] . length != [[object]] . length ) { continue ; } for ( int j = 0 ; j < [[itself]] . length ; j ++ ) { if ( [[itself]] [ j ] != [[object]] [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 976 ---------------------------------------------
Adds the given patterns to the find file . --> Add a template to the find file --> Socre: 1.0

[[[[Adv]]]]: public FindFile include ( final String ... [[patterns]] ) { for ( String pattern : [[patterns]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile include ( final String ... [[template]] ) { for ( String pattern : [[template]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 977 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 158 / 808 / 11 / 977:  98%|█████████▊| 977/1000 [22:14<00:31,  1.37s/it][Succeeded / Failed / Skipped / Total] 158 / 809 / 11 / 978:  98%|█████████▊| 978/1000 [22:15<00:30,  1.37s/it][Succeeded / Failed / Skipped / Total] 158 / 809 / 11 / 978:  98%|█████████▊| 979/1000 [22:15<00:28,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 810 / 11 / 979:  98%|█████████▊| 979/1000 [22:15<00:28,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 811 / 11 / 980:  98%|█████████▊| 980/1000 [22:16<00:27,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 811 / 11 / 980:  98%|█████████▊| 981/1000 [22:16<00:25,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 812 / 11 / 981:  98%|█████████▊| 981/1000 [22:16<00:25,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 813 / 11 / 982:  98%|█████████▊| 982/1000 [22:18<00:24,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 813 / 11 / 982:  98%|█████████▊| 983/1000 [22:18<00:23,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 814 / 11 / 983:  98%|█████████▊| 983/1000 [22:18<00:23,  1.36s/it]Adds a file to the list of files that match the given URI . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI [[searchPath]] ) { File file ; try { file = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[bit]] ( final URI [[exit]] ) { File file ; try { file = new File ( [[bit]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[bit]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 978 ---------------------------------------------
Reads the verification type information from the bytecode . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int [[verificationTypeInfoOffset]] , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = [[verificationTypeInfoOffset]] ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[call]] ( final int [[block]] , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = [[block]] ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 979 ---------------------------------------------
Adds a path to the path list . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addPath]] ( final File [[path]] ) { if ( ! [[path]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[path]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void [[open]] ( final File [[array]] ) { if ( ! [[array]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[array]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 980 ---------------------------------------------
Adds a file to the list of files to be searched for . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL searchPath ) { File [[file]] = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( [[file]] == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[ject]] ( final URL searchPath ) { File [[d]] = FileUtil . toContainerFile ( [[ject]] ) ; if ( [[d]] == null ) { throw new FindFileException ( "URL error: " + [[ject]] ) ; } addPath ( [[d]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 981 ---------------------------------------------
Convert array to array . --> [[[FAILED]]]

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object [[value]] ) { final Class [[valueComponentType]] = [[value]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[result]] ; if ( [[valueComponentType]] . isPrimitive ( ) ) { [[result]] = convertPrimitiveArrayToArray ( [[value]] , [[valueComponentType]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[test]] ( final Object [[implementation]] ) { final Class [[item]] = [[implementation]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[method]] ; if ( [[item]] . isPrimitive ( ) ) { [[method]] = convertPrimitiveArrayToArray ( [[implementation]] , [[item]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 982 ---------------------------------------------
Exclude a set of files from being found . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile exclude ( final String ... [[patterns]] ) { for ( String pattern : [[patterns]] ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile exclude ( final String ... [[dot]] ) { for ( String pattern : [[dot]] ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 983 ---------------------------------------------
Returns an iterator over the files in this directory . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[replace]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 984 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 158 / 815 / 11 / 984:  98%|█████████▊| 984/1000 [22:19<00:21,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 815 / 11 / 984:  98%|█████████▊| 985/1000 [22:19<00:20,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 816 / 11 / 985:  98%|█████████▊| 985/1000 [22:19<00:20,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 817 / 11 / 986:  99%|█████████▊| 986/1000 [22:22<00:19,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 817 / 11 / 986:  99%|█████████▊| 987/1000 [22:22<00:17,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 818 / 11 / 987:  99%|█████████▊| 987/1000 [22:22<00:17,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 819 / 11 / 988:  99%|█████████▉| 988/1000 [22:26<00:16,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 819 / 11 / 988:  99%|█████████▉| 989/1000 [22:26<00:14,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 820 / 11 / 989:  99%|█████████▉| 989/1000 [22:26<00:14,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 821 / 11 / 990:  99%|█████████▉| 990/1000 [22:27<00:13,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 821 / 11 / 990:  99%|█████████▉| 991/1000 [22:27<00:12,  1.36s/it]Gets the ServletOutputStream . --> [[[FAILED]]]

[[[[Adv]]]]: public ServletOutputStream getOutputStream ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream getOutputStream ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 985 ---------------------------------------------
Gets the writer . --> [[[FAILED]]]

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[edit]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 986 ---------------------------------------------
Returns a list of all files in the archive . --> [[[FAILED]]]

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > [[allFiles]] = new ArrayList <> ( ) ; File [[file]] ; while ( ( [[file]] = nextFile ( ) ) != null ) { [[allFiles]] . add ( [[file]] ) ; } return [[allFiles]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[move]] ( ) { List < File > [[add]] = new ArrayList <> ( ) ; File [[arrays]] ; while ( ( [[arrays]] = nextFile ( ) ) != null ) { [[add]] . add ( [[arrays]] ) ; } return [[add]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 987 ---------------------------------------------
Resolves the wiring mode of a bean . --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode [[resolveBeanWiringMode]] ( final Class type ) { PetiteBean [[petiteBean]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return [[petiteBean]] != null ? [[petiteBean]] . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode [[c]] ( final Class type ) { PetiteBean [[style]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return [[style]] != null ? [[style]] . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 988 ---------------------------------------------
Returns the size of this primitive type . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[execute]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 989 ---------------------------------------------
Returns a string representation of the type s class name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[list]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 990 ---------------------------------------------
Appends the descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder [[stringBuilder]] ) { if ( sort == OBJECT ) { [[stringBuilder]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[stringBuilder]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[stringBuilder]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[draw]] ( final StringBuilder [[sort]] ) { if ( sort == OBJECT ) { [[sort]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[sort]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[sort]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 991 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 158 / 822 / 11 / 991:  99%|█████████▉| 991/1000 [22:27<00:12,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 823 / 11 / 992:  99%|█████████▉| 992/1000 [22:28<00:10,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 823 / 11 / 992:  99%|█████████▉| 993/1000 [22:31<00:09,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 824 / 11 / 993:  99%|█████████▉| 993/1000 [22:31<00:09,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 825 / 11 / 994:  99%|█████████▉| 994/1000 [22:32<00:08,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 825 / 11 / 994: 100%|█████████▉| 995/1000 [22:32<00:06,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 826 / 11 / 995: 100%|█████████▉| 995/1000 [22:32<00:06,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 827 / 11 / 996: 100%|█████████▉| 996/1000 [22:33<00:05,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 827 / 11 / 996: 100%|█████████▉| 997/1000 [22:35<00:04,  1.36s/it]Initializes the internal data structures . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[init]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void [[test]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 992 ---------------------------------------------
Resolve bean name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[begin]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 993 ---------------------------------------------
Returns the descriptor for the given constructor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getConstructorDescriptor]] ( final Constructor < ? > [[constructor]] ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] parameters = [[constructor]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } return [[stringBuilder]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String [[test]] ( final Constructor < ? > [[c]] ) { StringBuilder [[max]] = new StringBuilder ( ) ; [[max]] . append ( ' ' ) ; Class < ? > [ ] parameters = [[c]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[max]] ) ; } return [[max]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 994 ---------------------------------------------
Gets the method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String getMethodDescriptor ( final Method [[method]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[method]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( [[method]] . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String getMethodDescriptor ( final Method [[tree]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[tree]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( [[tree]] . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 995 ---------------------------------------------
Sets the cause of the transaction that can be marked as rollback only . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[exception]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 996 ---------------------------------------------
Returns a method descriptor for the given return and argument types . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Type returnType , final Type ... argumentTypes ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; returnType . appendDescriptor ( [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String [[command]] ( final Type returnType , final Type ... argumentTypes ) { StringBuilder [[function]] = new StringBuilder ( ) ; [[function]] . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( [[function]] ) ; } [[function]] . append ( ' ' ) ; returnType . appendDescriptor ( [[function]] ) ; return [[function]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 997 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 158 / 828 / 11 / 997: 100%|█████████▉| 997/1000 [22:35<00:04,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 829 / 11 / 998: 100%|█████████▉| 998/1000 [22:38<00:02,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 829 / 11 / 998: 100%|█████████▉| 999/1000 [22:40<00:01,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 830 / 11 / 999: 100%|█████████▉| 999/1000 [22:40<00:01,  1.36s/it][Succeeded / Failed / Skipped / Total] 158 / 831 / 11 / 1000: 100%|██████████| 1000/1000 [22:40<00:00,  1.36s/it]Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  delete
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapMaskedLM(
    (method):  bae
    (masked_lm_name):  BertForMaskedLM
    (max_length):  512
    (max_candidates):  50
    (min_confidence):  0.0
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 158 / 831 / 11 / 1000: 100%|██████████| 1000/1000 [22:44<00:00,  1.36s/it]Gets the arguments and return sizes . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String [[methodDescriptor]] ) { int [[argumentsSize]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[name]] ( final String [[array]] ) { int [[a]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 998 ---------------------------------------------
Rolls back all resources associated with this transaction . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[rollbackAllResources]] ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void [[start]] ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .
--------------------------------------------- Result 999 ---------------------------------------------
Requests a transaction resource of the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[E]] > [[E]] requestResource ( final Class < [[E]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[E]] resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[E]] > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < [[body]] > [[body]] requestResource ( final Class < [[body]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[body]] resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[body]] > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .
--------------------------------------------- Result 1000 ---------------------------------------------
Commits or rolls all resources . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[state]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 158    |
| Number of failed attacks:     | 831    |
| Number of skipped attacks:    | 11     |
| Original accuracy:            | 98.9%  |
| Accuracy under attack:        | 83.1%  |
| Attack success rate:          | 15.98% |
| Average perturbed word %:     | 58.44% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 155.26 |
| Original BLEU-4:              | 19.61  |
| Perturbed BLEU-4:             | 5.98   |
+-------------------------------+--------+


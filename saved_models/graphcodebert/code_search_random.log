Some weights of the model checkpoint at microsoft/graphcodebert-base were not used when initializing RobertaModel: ['lm_head.bias', 'lm_head.decoder.bias', 'lm_head.dense.bias', 'lm_head.layer_norm.weight', 'lm_head.dense.weight', 'lm_head.layer_norm.bias', 'lm_head.decoder.weight']
- This IS expected if you are initializing RobertaModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing RobertaModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
Some weights of RobertaModel were not initialized from the model checkpoint at microsoft/graphcodebert-base and are newly initialized: ['roberta.pooler.dense.weight', 'roberta.pooler.dense.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
textattack: Running 3 worker(s) on 3 GPU(s).
textattack: Worklist size: 785
textattack: Worklist candidate size: 0
  0%|          | 0/785 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 0 / 1 / 0 / 1:   0%|          | 1/785 [00:00<00:00, 1415.08it/s][Succeeded / Failed / Skipped / Total] 0 / 2 / 0 / 2:   0%|          | 2/785 [00:00<00:00, 1695.01it/s][Succeeded / Failed / Skipped / Total] 0 / 3 / 0 / 3:   0%|          | 3/785 [00:00<00:00, 1973.79it/s][Succeeded / Failed / Skipped / Total] 0 / 4 / 0 / 4:   1%|          | 4/785 [00:00<00:00, 2146.52it/s][Succeeded / Failed / Skipped / Total] 0 / 5 / 0 / 5:   1%|          | 5/785 [00:00<00:00, 2237.20it/s][Succeeded / Failed / Skipped / Total] 0 / 5 / 0 / 5:   1%|          | 6/785 [00:01<04:12,  3.08it/s]  [Succeeded / Failed / Skipped / Total] 0 / 6 / 0 / 6:   1%|          | 6/785 [00:01<04:12,  3.08it/s][Succeeded / Failed / Skipped / Total] 0 / 7 / 0 / 7:   1%|          | 7/785 [00:17<32:32,  2.51s/it][Succeeded / Failed / Skipped / Total] 0 / 7 / 0 / 7:   1%|          | 7/785 [00:20<37:02,  2.86s/it][Succeeded / Failed / Skipped / Total] 0 / 7 / 0 / 7:   1%|          | 8/785 [00:22<36:43,  2.84s/it][Succeeded / Failed / Skipped / Total] 0 / 8 / 0 / 8:   1%|          | 8/785 [00:22<36:43,  2.84s/it][Succeeded / Failed / Skipped / Total] 0 / 8 / 0 / 8:   1%|          | 9/785 [00:28<40:53,  3.16s/it]--------------------------------------------- Result 1 ---------------------------------------------
[[0 (-10442%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[fireModalDataRefreshed]]() { if (getHandler() instanceof GOModalEventHandler) { GOModalEventHandler [[modalHandler]] = (GOModalEventHandler) getHandler(); [[modalHandler]].eventDataChanged(this); } }
[[[[Nl]]]]: This method notifies the handler , if it supports the { @ link GOModalEventHandler } , that the event data has changed

[[[[Adv]]]]: protected void [[figurative]]() { if (getHandler() instanceof GOModalEventHandler) { GOModalEventHandler [[hypocrisies]] = (GOModalEventHandler) getHandler(); [[hypocrisies]].eventDataChanged(this); } }
[[[[Nl]]]]: This method notifies the handler , if it supports the { @ link GOModalEventHandler } , that the event data has changed
--------------------------------------------- Result 2 ---------------------------------------------
[[0 (-11709%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[scaleAdd]](Mat [[src1]], double [[alpha]], Mat [[src2]], Mat [[dst]]) { scaleAdd_0([[src1]].nativeObj, [[alpha]], [[src2]].nativeObj, [[dst]].nativeObj); return; }
[[[[Nl]]]]: javadoc : scaleAdd ( src1 , alpha , src2 , dst )

[[[[Adv]]]]: public static void [[hotdogs]](Mat [[possessive]], double [[investigations]], Mat [[stuttering]], Mat [[topic]]) { scaleAdd_0([[possessive]].nativeObj, [[investigations]], [[stuttering]].nativeObj, [[topic]].nativeObj); return; }
[[[[Nl]]]]: javadoc : scaleAdd ( src1 , alpha , src2 , dst )
--------------------------------------------- Result 3 ---------------------------------------------
[[0 (-9915%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getK]]() { double [[retVal]] = getK_0(nativeObj); return [[retVal]]; }
[[[[Nl]]]]: javadoc : GFTTDetector : :getK ( )

[[[[Adv]]]]: public double [[transparency]]() { double [[pineal]] = getK_0(nativeObj); return [[pineal]]; }
[[[[Nl]]]]: javadoc : GFTTDetector : :getK ( )
--------------------------------------------- Result 4 ---------------------------------------------
[[0 (-9068%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public ByteOrder [[order]](ByteOrder [[o]]) { _isBigEndian = "BIG_ENDIAN".equals([[o]].toString()); _buf.order([[o]]); return [[o]]; }
[[[[Nl]]]]: Set the byte order for this buffer @ param o ByteOrder @ return the ByteOrder specified @ deprecated Will return WrappedByteBuffer in future releases to match java

[[[[Adv]]]]: public ByteOrder [[traverse]](ByteOrder [[aural]]) { _isBigEndian = "BIG_ENDIAN".equals([[aural]].toString()); _buf.order([[aural]]); return [[aural]]; }
[[[[Nl]]]]: Set the byte order for this buffer @ param o ByteOrder @ return the ByteOrder specified @ deprecated Will return WrappedByteBuffer in future releases to match java
--------------------------------------------- Result 5 ---------------------------------------------
[[0 (-10917%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[equalRequestableCapabilities]](NetworkCapabilities [[nc]]) { if ([[nc]] == null) return "[[False]]" != "[[False]]"; return (equalsNetCapabilitiesRequestable([[nc]]) && equalsTransportTypes([[nc]]) && equalsSpecifier([[nc]])); }
[[[[Nl]]]]: Checks that our requestable capabilities are the same as those of the given { @ code NetworkCapabilities }

[[[[Adv]]]]: public boolean [[subway]](NetworkCapabilities [[secretariat]]) { if ([[secretariat]] == null) return "[["Fatigue" != "Fatigue"]]" != "[["Fatigue" != "Fatigue"]]"; return (equalsNetCapabilitiesRequestable([[secretariat]]) && equalsTransportTypes([[secretariat]]) && equalsSpecifier([[secretariat]])); }
[[[[Nl]]]]: Checks that our requestable capabilities are the same as those of the given { @ code NetworkCapabilities }
--------------------------------------------- Result 6 ---------------------------------------------
[[0 (-9008%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[inflateContentView]]() { contentContainer = rootView.findViewById(R.id.content_container); contentContainer.removeAllViews(); if (customView != null) { contentContainer.setVisibility(View.VISIBLE); contentContainer.addView(customView); } else if (customViewId != -1) { contentContainer.setVisibility(View.VISIBLE); LayoutInflater [[layoutInflater]] = LayoutInflater.from(getContext()); View [[view]] = [[layoutInflater]].inflate(customViewId, contentContainer, "[[False]]" != "[[False]]"); contentContainer.addView([[view]]); } else { LayoutInflater [[layoutInflater]] = LayoutInflater.from(getContext()); View [[view]] = [[layoutInflater]] .inflate(R.layout.bottom_sheet_grid_view, contentContainer, "[[False]]" != "[[False]]"); contentContainer.addView([[view]]); } showGridView(); }
[[[[Nl]]]]: Inflates the layout , which is used to show the bottom sheet 's content

[[[[Adv]]]]: private void [[original]]() { contentContainer = rootView.findViewById(R.id.content_container); contentContainer.removeAllViews(); if (customView != null) { contentContainer.setVisibility(View.VISIBLE); contentContainer.addView(customView); } else if (customViewId != -1) { contentContainer.setVisibility(View.VISIBLE); LayoutInflater [[mussolini]] = LayoutInflater.from(getContext()); View [[merits]] = [[mussolini]].inflate(customViewId, contentContainer, "[["Topic" != "Topic"]]" != "[["Topic" != "Topic"]]"); contentContainer.addView([[merits]]); } else { LayoutInflater [[mussolini]] = LayoutInflater.from(getContext()); View [[merits]] = [[mussolini]] .inflate(R.layout.bottom_sheet_grid_view, contentContainer, "[["Topic" != "Topic"]]" != "[["Topic" != "Topic"]]"); contentContainer.addView([[merits]]); } showGridView(); }
[[[[Nl]]]]: Inflates the layout , which is used to show the bottom sheet 's content
--------------------------------------------- Result 7 ---------------------------------------------
[[0 (-7354%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[hasDismissableIntroScreen]]() { if (mLauncherCallbacks != null) { return mLauncherCallbacks.hasDismissableIntroScreen(); } return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: To be overridden by subclasses to indicate that there is an in-activity full-screen intro screen that must be displayed and dismissed

[[[[Adv]]]]: protected boolean [[casa]]() { if (mLauncherCallbacks != null) { return mLauncherCallbacks.hasDismissableIntroScreen(); } return "[["Americano" != "Americano"]]" != "[["Americano" != "Americano"]]"; }
[[[[Nl]]]]: To be overridden by subclasses to indicate that there is an in-activity full-screen intro screen that must be displayed and dismissed
--------------------------------------------- Result 8 ---------------------------------------------
[[0 (-10123%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public byte [[getByte]] (String [[name]]) { JsonValue [[child]] = get([[name]]); if ([[child]] == null) throw new IllegalArgumentException("Named value not found: " + [[name]]); return [[child]].asByte(); }
[[[[Nl]]]]: Finds the child with the specified name and returns it as a byte

[[[[Adv]]]]: public byte [[hubcaps]] (String [[scenarios]]) { JsonValue [[morlocks]] = get([[scenarios]]); if ([[morlocks]] == null) throw new IllegalArgumentException("Named value not found: " + [[scenarios]]); return [[morlocks]].asByte(); }
[[[[Nl]]]]: Finds the child with the specified name and returns it as a byte
--------------------------------------------- Result 9 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 9 / 0 / 9:   1%|          | 9/785 [00:28<40:53,  3.16s/it][Succeeded / Failed / Skipped / Total] 0 / 9 / 0 / 9:   1%|▏         | 10/785 [00:30<39:44,  3.08s/it][Succeeded / Failed / Skipped / Total] 0 / 10 / 0 / 10:   1%|▏         | 10/785 [00:30<39:44,  3.08s/it][Succeeded / Failed / Skipped / Total] 0 / 10 / 0 / 10:   1%|▏         | 11/785 [00:50<59:05,  4.58s/it][Succeeded / Failed / Skipped / Total] 0 / 11 / 0 / 11:   1%|▏         | 11/785 [00:50<59:05,  4.58s/it][Succeeded / Failed / Skipped / Total] 0 / 11 / 0 / 11:   2%|▏         | 12/785 [00:55<59:13,  4.60s/it][Succeeded / Failed / Skipped / Total] 0 / 12 / 0 / 12:   2%|▏         | 12/785 [00:55<59:13,  4.60s/it][Succeeded / Failed / Skipped / Total] 0 / 12 / 0 / 12:   2%|▏         | 13/785 [01:05<1:04:53,  5.04s/it][Succeeded / Failed / Skipped / Total] 0 / 13 / 0 / 13:   2%|▏         | 13/785 [01:05<1:04:53,  5.04s/it][Succeeded / Failed / Skipped / Total] 0 / 13 / 0 / 13:   2%|▏         | 14/785 [01:17<1:11:33,  5.57s/it][Succeeded / Failed / Skipped / Total] 0 / 14 / 0 / 14:   2%|▏         | 14/785 [01:17<1:11:33,  5.57s/it][Succeeded / Failed / Skipped / Total] 0 / 14 / 0 / 14:   2%|▏         | 15/785 [01:19<1:07:36,  5.27s/it][Succeeded / Failed / Skipped / Total] 0 / 15 / 0 / 15:   2%|▏         | 15/785 [01:19<1:07:36,  5.27s/it][Succeeded / Failed / Skipped / Total] 0 / 15 / 0 / 15:   2%|▏         | 16/785 [01:28<1:11:13,  5.56s/it][Succeeded / Failed / Skipped / Total] 0 / 16 / 0 / 16:   2%|▏         | 16/785 [01:28<1:11:13,  5.56s/it][Succeeded / Failed / Skipped / Total] 0 / 16 / 0 / 16:   2%|▏         | 17/785 [01:32<1:09:20,  5.42s/it][[0 (-8754%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMIDletClassName]](MIDletSuite [[suite]], int [[midletSerialNum]]) { if ([[suite]] != null) { String [[midlet]] = [[suite]].getProperty("MIDlet-" + [[midletSerialNum]]); if ([[midlet]] != null) { MIDletInfo [[midletInfo]] = new MIDletInfo([[midlet]]); return [[midletInfo]].classname; } } return null; }
[[[[Nl]]]]: Returns class name of MIDlet with specified sequence number

[[[[Adv]]]]: public static String [[scooters]](MIDletSuite [[borrows]], int [[trustful]]) { if ([[borrows]] != null) { String [[downloads]] = [[borrows]].getProperty("MIDlet-" + [[trustful]]); if ([[downloads]] != null) { MIDletInfo [[bookshelves]] = new MIDletInfo([[downloads]]); return [[bookshelves]].classname; } } return null; }
[[[[Nl]]]]: Returns class name of MIDlet with specified sequence number
--------------------------------------------- Result 10 ---------------------------------------------
[[0 (-10272%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public char [[advance]]() { char [[result]] = string.charAt(cursor); cursor = Math.min(string.length(), cursor + 1); return [[result]]; }
[[[[Nl]]]]: Advance cursor by one and return the character that was at that position @ throws IndexOutOfBoundsException if cursor is already at the end

[[[[Adv]]]]: public char [[disconnect]]() { char [[jetson]] = string.charAt(cursor); cursor = Math.min(string.length(), cursor + 1); return [[jetson]]; }
[[[[Nl]]]]: Advance cursor by one and return the character that was at that position @ throws IndexOutOfBoundsException if cursor is already at the end
--------------------------------------------- Result 11 ---------------------------------------------
[[0 (-10341%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getUriPrefix]](String [[authority]]) { SoftReference<StreamProvider> [[ref]]=INSTANCES.get([[authority]]); String [[result]]=null; if ([[ref]]!=null) { [[result]]=[[ref]].get().getUriPrefix(); } return([[result]]); }
[[[[Nl]]]]: Returns the Uri prefix used by this StreamProvider , identified by its authority

[[[[Adv]]]]: public static String [[courtesies]](String [[mangroves]]) { SoftReference<StreamProvider> [[dissertation]]=INSTANCES.get([[mangroves]]); String [[fatigue]]=null; if ([[dissertation]]!=null) { [[fatigue]]=[[dissertation]].get().getUriPrefix(); } return([[fatigue]]); }
[[[[Nl]]]]: Returns the Uri prefix used by this StreamProvider , identified by its authority
--------------------------------------------- Result 12 ---------------------------------------------
[[0 (-10520%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setTransform]] (Matrix4 [[transform]]) { for (int [[i]] = 0, [[n]] = controllers.size; [[i]] < [[n]]; [[i]]++) controllers.get([[i]]).setTransform([[transform]]); }
[[[[Nl]]]]: Sets the given transform matrix on each controller

[[[[Adv]]]]: public void [[quandary]] (Matrix4 [[tweeting]]) { for (int [[mentions]] = 0, [[aguilera]] = controllers.size; [[mentions]] < [[aguilera]]; [[mentions]]++) controllers.get([[mentions]]).setTransform([[tweeting]]); }
[[[[Nl]]]]: Sets the given transform matrix on each controller
--------------------------------------------- Result 13 ---------------------------------------------
[[0 (-10997%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private int [[recursiveMove]](File src, File [[dst]]){ int [[copyCount]] = 0; if (src.isDirectory() && src.listFiles() != null){ [[dst]].mkdirs(); for (File [[file]] : src.listFiles()) { File [[target]] = new File([[dst]], [[file]].getName()); [[copyCount]] += [[recursiveMove]]([[file]], [[target]]); } src.delete(); } else { try { if(copy(src, [[dst]])) src.delete(); } catch (IOException e) { Log.d(MigrationHelper.LOG_TAG, "Error moving file: " + src.getAbsolutePath()); } } Log.d("RecursiveMoveFiles", String.format("Moved %d files from %s to %s", [[copyCount]], src.getPath(), [[dst]].getPath())); return [[copyCount]]; }
[[[[Nl]]]]: Recursively copy files from one location to another and deletes the origin files after copy

[[[[Adv]]]]: private int [[animals]](File src, File [[fractures]]){ int [[trifecta]] = 0; if (src.isDirectory() && src.listFiles() != null){ [[fractures]].mkdirs(); for (File [[jamie]] : src.listFiles()) { File [[reliefs]] = new File([[fractures]], [[jamie]].getName()); [[trifecta]] += [[animals]]([[jamie]], [[reliefs]]); } src.delete(); } else { try { if(copy(src, [[fractures]])) src.delete(); } catch (IOException e) { Log.d(MigrationHelper.LOG_TAG, "Error moving file: " + src.getAbsolutePath()); } } Log.d("RecursiveMoveFiles", String.format("Moved %d files from %s to %s", [[trifecta]], src.getPath(), [[fractures]].getPath())); return [[trifecta]]; }
[[[[Nl]]]]: Recursively copy files from one location to another and deletes the origin files after copy
--------------------------------------------- Result 14 ---------------------------------------------
[[0 (-9309%)]] --> [[[FAILED]]]

[[[[Adv]]]]: boolean [[switchInput]](Predictor.InputType [[newInputType]]){ if(mInputType != [[newInputType]]){ mAdapter.updateDataset(new ArrayList<Prediction>()); initializePredictor([[newInputType]]); loadDataUi(); return "[[True]]" == "[[True]]"; } return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: Switch input types between NUMPAD and QWERTY @ param newInputType The input type to change to @ return True if input type wa changed

[[[[Adv]]]]: boolean [[vocab]](Predictor.InputType [[closure]]){ if(mInputType != [[closure]]){ mAdapter.updateDataset(new ArrayList<Prediction>()); initializePredictor([[closure]]); loadDataUi(); return "[["Contribution" == "Contribution"]]" == "[["Contribution" == "Contribution"]]"; } return "[["Downloads" != "Downloads"]]" != "[["Downloads" != "Downloads"]]"; }
[[[[Nl]]]]: Switch input types between NUMPAD and QWERTY @ param newInputType The input type to change to @ return True if input type wa changed
--------------------------------------------- Result 15 ---------------------------------------------
[[0 (-10127%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[removeAllStickyEvents]]() { synchronized (stickyEventMap) { stickyEventMap.clear(); this.[[mapOfStickyEvent]] = null; } }
[[[[Nl]]]]: Removes all sticky events

[[[[Adv]]]]: public void [[timeshare]]() { synchronized (stickyEventMap) { stickyEventMap.clear(); this.[[carrera]] = null; } }
[[[[Nl]]]]: Removes all sticky events
--------------------------------------------- Result 16 ---------------------------------------------
[[0 (-9990%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private ConditionsTreeNode [[add]](ConditionsTreeNode [[node]], Operator [[op]]) throws Exception { if ([[node]].mParent != null) { throw new Exception("Can only add new expressions from root node down."); } ConditionsTreeNode [[tmpNode]] = new ConditionsTreeNode(mParent, [[op]]); [[tmpNode]].mLeft = this; [[tmpNode]].mRight = [[node]]; if (mParent != null) { mParent.updateChild(this, [[tmpNode]]); } this.[[mParent]] = [[tmpNode]]; [[node]].mParent = [[tmpNode]]; return [[tmpNode]]; }
[[[[Nl]]]]: Adds two new ConditionTreeNodes , one for the operator and one for the new condition

[[[[Adv]]]]: private ConditionsTreeNode [[shipping]](ConditionsTreeNode [[exemplary]], Operator [[sale]]) throws Exception { if ([[exemplary]].mParent != null) { throw new Exception("Can only add new expressions from root node down."); } ConditionsTreeNode [[overdid]] = new ConditionsTreeNode(mParent, [[sale]]); [[overdid]].mLeft = this; [[overdid]].mRight = [[exemplary]]; if (mParent != null) { mParent.updateChild(this, [[overdid]]); } this.[[handpicked]] = [[overdid]]; [[exemplary]].mParent = [[overdid]]; return [[overdid]]; }
[[[[Nl]]]]: Adds two new ConditionTreeNodes , one for the operator and one for the new condition
--------------------------------------------- Result 17 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 17 / 0 / 17:   2%|▏         | 17/785 [01:32<1:09:20,  5.42s/it][Succeeded / Failed / Skipped / Total] 0 / 17 / 0 / 17:   2%|▏         | 18/785 [01:38<1:10:04,  5.48s/it][Succeeded / Failed / Skipped / Total] 0 / 18 / 0 / 18:   2%|▏         | 18/785 [01:38<1:10:04,  5.48s/it][Succeeded / Failed / Skipped / Total] 0 / 18 / 0 / 18:   2%|▏         | 19/785 [01:51<1:14:53,  5.87s/it][Succeeded / Failed / Skipped / Total] 0 / 19 / 0 / 19:   2%|▏         | 19/785 [01:51<1:14:53,  5.87s/it][Succeeded / Failed / Skipped / Total] 0 / 19 / 0 / 19:   3%|▎         | 20/785 [02:02<1:18:13,  6.13s/it][Succeeded / Failed / Skipped / Total] 0 / 20 / 0 / 20:   3%|▎         | 20/785 [02:02<1:18:13,  6.13s/it][Succeeded / Failed / Skipped / Total] 0 / 20 / 0 / 20:   3%|▎         | 21/785 [02:04<1:15:27,  5.93s/it][Succeeded / Failed / Skipped / Total] 0 / 21 / 0 / 21:   3%|▎         | 21/785 [02:04<1:15:27,  5.93s/it][Succeeded / Failed / Skipped / Total] 0 / 21 / 0 / 21:   3%|▎         | 22/785 [02:13<1:17:10,  6.07s/it][Succeeded / Failed / Skipped / Total] 0 / 22 / 0 / 22:   3%|▎         | 22/785 [02:13<1:17:10,  6.07s/it][Succeeded / Failed / Skipped / Total] 0 / 22 / 0 / 22:   3%|▎         | 23/785 [02:15<1:14:50,  5.89s/it][Succeeded / Failed / Skipped / Total] 0 / 23 / 0 / 23:   3%|▎         | 23/785 [02:15<1:14:50,  5.89s/it][Succeeded / Failed / Skipped / Total] 0 / 23 / 0 / 23:   3%|▎         | 24/785 [02:20<1:14:11,  5.85s/it][Succeeded / Failed / Skipped / Total] 0 / 24 / 0 / 24:   3%|▎         | 24/785 [02:20<1:14:11,  5.85s/it][Succeeded / Failed / Skipped / Total] 0 / 24 / 0 / 24:   3%|▎         | 25/785 [02:28<1:15:14,  5.94s/it][Succeeded / Failed / Skipped / Total] 0 / 25 / 0 / 25:   3%|▎         | 25/785 [02:28<1:15:14,  5.94s/it][Succeeded / Failed / Skipped / Total] 0 / 25 / 0 / 25:   3%|▎         | 26/785 [02:38<1:17:09,  6.10s/it][[0 (-7437%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public OutputStream [[openOutputStream]]() throws IOException { OutputStream [[o]]; ensureOpen(); [[o]] = new BaseOutputStream(this); oStreams++; return [[o]]; }
[[[[Nl]]]]: Returns an output stream

[[[[Adv]]]]: public OutputStream [[blinker]]() throws IOException { OutputStream [[autumnal]]; ensureOpen(); [[autumnal]] = new BaseOutputStream(this); oStreams++; return [[autumnal]]; }
[[[[Nl]]]]: Returns an output stream
--------------------------------------------- Result 18 ---------------------------------------------
[[0 (-9706%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[obtainHeaderIconTintList]](@StyleRes final int [[themeResourceId]]) { TypedArray [[typedArray]] = getContext().getTheme().obtainStyledAttributes([[themeResourceId]], new int[]{R.attr.materialDialogHeaderIconTint}); setHeaderIconTintList([[typedArray]].getColorStateList(0)); }
[[[[Nl]]]]: Obtains the color state list , which is used to tint the header icon of the dialog , from a specific theme

[[[[Adv]]]]: private void [[offset]](@StyleRes final int [[clea]]) { TypedArray [[darpa]] = getContext().getTheme().obtainStyledAttributes([[clea]], new int[]{R.attr.materialDialogHeaderIconTint}); setHeaderIconTintList([[darpa]].getColorStateList(0)); }
[[[[Nl]]]]: Obtains the color state list , which is used to tint the header icon of the dialog , from a specific theme
--------------------------------------------- Result 19 ---------------------------------------------
[[0 (-10335%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public DeleteDomainRequest [[withDomainName]](String [[domainName]]) { this.[[domainName]] = [[domainName]]; return this; }
[[[[Nl]]]]: The name of the domain to delete

[[[[Adv]]]]: public DeleteDomainRequest [[frustrate]](String [[scooters]]) { this.[[roat]] = [[scooters]]; return this; }
[[[[Nl]]]]: The name of the domain to delete
--------------------------------------------- Result 20 ---------------------------------------------
[[0 (-10132%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isSameListWithBookmark]](ReaderPostList posts) { if (posts == null || posts.size() != this.size()) { return "[[False]]" != "[[False]]"; } for (ReaderPost [[post]] : posts) { int index = indexOfPost([[post]]); if (index == -1) { return "[[False]]" != "[[False]]"; } ReaderPost [[postInsideList]] = this.get(index); if (![[post]].isSamePost([[postInsideList]]) || [[post]].isBookmarked != [[postInsideList]].isBookmarked) { return "[[False]]" != "[[False]]"; } } return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Does passed list contain the same posts as this list

[[[[Adv]]]]: public boolean [[filial]](ReaderPostList posts) { if (posts == null || posts.size() != this.size()) { return "[["Lecture" != "Lecture"]]" != "[["Lecture" != "Lecture"]]"; } for (ReaderPost [[plot]] : posts) { int index = indexOfPost([[plot]]); if (index == -1) { return "[["Lecture" != "Lecture"]]" != "[["Lecture" != "Lecture"]]"; } ReaderPost [[hedges]] = this.get(index); if (![[plot]].isSamePost([[hedges]]) || [[plot]].isBookmarked != [[hedges]].isBookmarked) { return "[["Lecture" != "Lecture"]]" != "[["Lecture" != "Lecture"]]"; } } return "[["Gosha" == "Gosha"]]" == "[["Gosha" == "Gosha"]]"; }
[[[[Nl]]]]: Does passed list contain the same posts as this list
--------------------------------------------- Result 21 ---------------------------------------------
[[0 (-6896%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final Cache2kBuilder<K, V> [[sharpExpiry]](boolean [[f]]) { config().setSharpExpiry([[f]]); return this; }
[[[[Nl]]]]: By default the expiry time is not exact , which means , a value might be visible a few milliseconds after the time of expiry

[[[[Adv]]]]: public final Cache2kBuilder<K, V> [[superposition]](boolean [[assemble]]) { config().setSharpExpiry([[assemble]]); return this; }
[[[[Nl]]]]: By default the expiry time is not exact , which means , a value might be visible a few milliseconds after the time of expiry
--------------------------------------------- Result 22 ---------------------------------------------
[[0 (-10078%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void setAccount(Account [[account]], boolean [[savedAccount]]) { Account [[oldAccount]] = mCurrentAccount; boolean [[validAccount]] = [[account]] != null && AccountUtils.setCurrentOwnCloudAccount(getApplicationContext(), [[account]].name); if ([[validAccount]]) { mCurrentAccount = [[account]]; mAccountWasSet = "[[True]]" == "[[True]]"; mAccountWasRestored = [[savedAccount]] || mCurrentAccount.equals([[oldAccount]]); } else { swapToDefaultAccount(); } }
[[[[Nl]]]]: Sets and validates the ownCloud { @ link Account } associated to the Activity

[[[[Adv]]]]: protected void setAccount(Account [[tinka]], boolean [[disagreeing]]) { Account [[mortgaged]] = mCurrentAccount; boolean [[betrayals]] = [[tinka]] != null && AccountUtils.setCurrentOwnCloudAccount(getApplicationContext(), [[tinka]].name); if ([[betrayals]]) { mCurrentAccount = [[tinka]]; mAccountWasSet = "[["Contraceptives" == "Contraceptives"]]" == "[["Contraceptives" == "Contraceptives"]]"; mAccountWasRestored = [[disagreeing]] || mCurrentAccount.equals([[mortgaged]]); } else { swapToDefaultAccount(); } }
[[[[Nl]]]]: Sets and validates the ownCloud { @ link Account } associated to the Activity
--------------------------------------------- Result 23 ---------------------------------------------
[[0 (-8843%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[fetchJokeFromJavaLibrary]]() { String [[joke]] = JokeFromJavaLibrary.getJoke(); mJokeFetcherListener.onJokeRetrievedSuccessfully([[joke]], UserPreferences.ARG_FETCH_JOKE_FROM_JAVA_LIBRARY); }
[[[[Nl]]]]: Fetches the joke from { @ link JokeFromJavaLibrary } class

[[[[Adv]]]]: private void [[на]]() { String [[blacklisted]] = JokeFromJavaLibrary.getJoke(); mJokeFetcherListener.onJokeRetrievedSuccessfully([[blacklisted]], UserPreferences.ARG_FETCH_JOKE_FROM_JAVA_LIBRARY); }
[[[[Nl]]]]: Fetches the joke from { @ link JokeFromJavaLibrary } class
--------------------------------------------- Result 24 ---------------------------------------------
[[0 (-9515%)]] --> [[[FAILED]]]

[[[[Adv]]]]: String [[getSearchUrl]]() { if (mIsLowPriority && mLowPriorityUri != null) { return mLowPriorityUri.toString(); } else { return mNormalPriorityUri.toString(); } }
[[[[Nl]]]]: Gets the search URL for this request

[[[[Adv]]]]: String [[ima]]() { if (mIsLowPriority && mLowPriorityUri != null) { return mLowPriorityUri.toString(); } else { return mNormalPriorityUri.toString(); } }
[[[[Nl]]]]: Gets the search URL for this request
--------------------------------------------- Result 25 ---------------------------------------------
[[0 (-10866%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public B [[setAutoDeleteFilesAfterSuccessfulUpload]](boolean [[autoDeleteFiles]]) { params.autoDeleteSuccessfullyUploadedFiles = [[autoDeleteFiles]]; return self(); }
[[[[Nl]]]]: Sets the automatic file deletion after successful upload

[[[[Adv]]]]: public B [[maricón]](boolean [[slap]]) { params.autoDeleteSuccessfullyUploadedFiles = [[slap]]; return self(); }
[[[[Nl]]]]: Sets the automatic file deletion after successful upload
--------------------------------------------- Result 26 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 26 / 0 / 26:   3%|▎         | 26/785 [02:38<1:17:09,  6.10s/it][Succeeded / Failed / Skipped / Total] 0 / 26 / 0 / 26:   3%|▎         | 27/785 [02:40<1:15:11,  5.95s/it][Succeeded / Failed / Skipped / Total] 0 / 27 / 0 / 27:   3%|▎         | 27/785 [02:40<1:15:11,  5.95s/it][Succeeded / Failed / Skipped / Total] 0 / 27 / 0 / 27:   4%|▎         | 28/785 [02:47<1:15:40,  6.00s/it][Succeeded / Failed / Skipped / Total] 0 / 28 / 0 / 28:   4%|▎         | 28/785 [02:47<1:15:40,  6.00s/it][Succeeded / Failed / Skipped / Total] 0 / 28 / 0 / 28:   4%|▎         | 29/785 [02:54<1:15:50,  6.02s/it][Succeeded / Failed / Skipped / Total] 0 / 29 / 0 / 29:   4%|▎         | 29/785 [02:54<1:15:50,  6.02s/it][Succeeded / Failed / Skipped / Total] 0 / 29 / 0 / 29:   4%|▍         | 30/785 [02:59<1:15:09,  5.97s/it][Succeeded / Failed / Skipped / Total] 0 / 30 / 0 / 30:   4%|▍         | 30/785 [02:59<1:15:09,  5.97s/it][Succeeded / Failed / Skipped / Total] 0 / 30 / 0 / 30:   4%|▍         | 31/785 [03:01<1:13:46,  5.87s/it][Succeeded / Failed / Skipped / Total] 0 / 31 / 0 / 31:   4%|▍         | 31/785 [03:01<1:13:46,  5.87s/it][Succeeded / Failed / Skipped / Total] 0 / 31 / 0 / 31:   4%|▍         | 32/785 [03:22<1:19:23,  6.33s/it][Succeeded / Failed / Skipped / Total] 0 / 32 / 0 / 32:   4%|▍         | 32/785 [03:22<1:19:23,  6.33s/it][Succeeded / Failed / Skipped / Total] 0 / 32 / 0 / 32:   4%|▍         | 33/785 [03:29<1:19:27,  6.34s/it][[0 (-7217%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[run]]() { this.running = "[[True]]" == "[[True]]"; this.[[started]] = "[[True]]" == "[[True]]"; this.tryAndNotifyAll(); this.[[last_message_at]] = System.currentTimeMillis(); Message request = null; if(!this.bindToServer(this.[[device_info]])) this.stopConnection(); while(this.running) { request = this.receive(); if(request != null) { this.handleMessage(request); request = null; } this.checkForLiveness(); Thread.yield(); } this.unbindFromServer(this.[[device_info]]); }
[[[[Nl]]]]: Executed by the Java runtime when the Connection thread starts

[[[[Adv]]]]: public void [[distrust]]() { this.running = "[["Vagrants" == "Vagrants"]]" == "[["Vagrants" == "Vagrants"]]"; this.[[rulebook]] = "[["Vagrants" == "Vagrants"]]" == "[["Vagrants" == "Vagrants"]]"; this.tryAndNotifyAll(); this.[[trademarks]] = System.currentTimeMillis(); Message request = null; if(!this.bindToServer(this.[[streaks]])) this.stopConnection(); while(this.running) { request = this.receive(); if(request != null) { this.handleMessage(request); request = null; } this.checkForLiveness(); Thread.yield(); } this.unbindFromServer(this.[[streaks]]); }
[[[[Nl]]]]: Executed by the Java runtime when the Connection thread starts
--------------------------------------------- Result 27 ---------------------------------------------
[[0 (-9717%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public SendRawEmailResult [[withMessageId]](String [[messageId]]) { this.[[messageId]] = [[messageId]]; return this; }
[[[[Nl]]]]: < p > The unique message identifier returned from the < code > SendRawEmail < code > action

[[[[Adv]]]]: public SendRawEmailResult [[billabong]](String [[descended]]) { this.[[hedges]] = [[descended]]; return this; }
[[[[Nl]]]]: < p > The unique message identifier returned from the < code > SendRawEmail < code > action
--------------------------------------------- Result 28 ---------------------------------------------
[[0 (-9578%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setRimColor]](int [[rimColor]]) { this.[[rimColor]] = [[rimColor]]; setupPaints(); if (!isSpinning) { invalidate(); } }
[[[[Nl]]]]: Sets the color of the wheel 's contour @ param rimColor the color for the wheel

[[[[Adv]]]]: public void [[protection]](int [[affiliations]]) { this.[[unmanageable]] = [[affiliations]]; setupPaints(); if (!isSpinning) { invalidate(); } }
[[[[Nl]]]]: Sets the color of the wheel 's contour @ param rimColor the color for the wheel
--------------------------------------------- Result 29 ---------------------------------------------
[[0 (-8452%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public BytecodeStream [[getBytecodeStream]]() { byte[] [[bytecodes]] = getBytecodes(); if ([[bytecodes]] == null) { return null; } else { return new BytecodeStream(this, [[bytecodes]]); } }
[[[[Nl]]]]: Method getBytecodeStream

[[[[Adv]]]]: public BytecodeStream [[selects]]() { byte[] [[clause]] = getBytecodes(); if ([[clause]] == null) { return null; } else { return new BytecodeStream(this, [[clause]]); } }
[[[[Nl]]]]: Method getBytecodeStream
--------------------------------------------- Result 30 ---------------------------------------------
[[0 (-8844%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[merge]](SimpleSlotQueue<SlotType, ElementType> [[other]]) { if (Arrays.equals(slotTypes, [[other]].slotTypes)) { for (int [[i]] = 0; [[i]] < slotTypes.length; [[i]]++) { slotLists[[[i]]].addAll([[other]].slotLists[[[i]]]); } } else { throw new UnsupportedOperationException("sloptTypes array of both SimpleSlotQueues must be equal!"); } }
[[[[Nl]]]]: Adds all elements of the other queue to this queue

[[[[Adv]]]]: public void [[hidey]](SimpleSlotQueue<SlotType, ElementType> [[weekends]]) { if (Arrays.equals(slotTypes, [[weekends]].slotTypes)) { for (int [[helmsley]] = 0; [[helmsley]] < slotTypes.length; [[helmsley]]++) { slotLists[[[helmsley]]].addAll([[weekends]].slotLists[[[helmsley]]]); } } else { throw new UnsupportedOperationException("sloptTypes array of both SimpleSlotQueues must be equal!"); } }
[[[[Nl]]]]: Adds all elements of the other queue to this queue
--------------------------------------------- Result 31 ---------------------------------------------
[[0 (-10535%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected ElementNode [[createMongoConfigurationElement]]() { ElementNode.Builder [[builder]] = new ElementNode.Builder( InstanceManagementRoles.MongoDBConfiguration.getRole().getName(), IInstanceManagementParser.MongoDbElements.MongoConfiguration.getLocalName(), "database", InstanceManagementRoleKeys.MongoDBConfiguration, this); [[builder]].description("Global configuration for MongoDB data persistence."); [[builder]].attributeGroup(ConfigurationModelProvider.ATTR_GROUP_CONNECTIVITY); [[builder]].attribute((new AttributeNode.Builder("Id", "id", AttributeType.String, ConfigurationModelProvider.ATTR_GROUP_CONNECTIVITY) .description("Unique id for referencing configuration.").makeIndex().makeRequired().build())); CommonDatastoreProvider.addMongoDbAttributes([[builder]], ConfigurationModelProvider.ATTR_GROUP_CONNECTIVITY); return [[builder]].build(); }
[[[[Nl]]]]: Create element configuration for MongoDB settings

[[[[Adv]]]]: protected ElementNode [[wrappings]]() { ElementNode.Builder [[thereafter]] = new ElementNode.Builder( InstanceManagementRoles.MongoDBConfiguration.getRole().getName(), IInstanceManagementParser.MongoDbElements.MongoConfiguration.getLocalName(), "database", InstanceManagementRoleKeys.MongoDBConfiguration, this); [[thereafter]].description("Global configuration for MongoDB data persistence."); [[thereafter]].attributeGroup(ConfigurationModelProvider.ATTR_GROUP_CONNECTIVITY); [[thereafter]].attribute((new AttributeNode.Builder("Id", "id", AttributeType.String, ConfigurationModelProvider.ATTR_GROUP_CONNECTIVITY) .description("Unique id for referencing configuration.").makeIndex().makeRequired().build())); CommonDatastoreProvider.addMongoDbAttributes([[thereafter]], ConfigurationModelProvider.ATTR_GROUP_CONNECTIVITY); return [[thereafter]].build(); }
[[[[Nl]]]]: Create element configuration for MongoDB settings
--------------------------------------------- Result 32 ---------------------------------------------
[[0 (-9115%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[finishSelection]]() { if (selection.size() != 4) throw new IllegalStateException("Select 4 balls first"); if (board.selection(getModelBalls())) { for (BallSelectionListener [[subscriber]] : subscribers) { [[subscriber]].onSelectionSucceeded(new ArrayList<>(selection)); } } else { for (BallSelectionListener [[subscriber]] : subscribers) { [[subscriber]].onSelectionFailed(new ArrayList<>(selection)); } } for (BallActor [[selected]] : selection) { [[selected]].quietlyUnselect(); } selection.clear(); }
[[[[Nl]]]]: This method is executed when the selection is complete

[[[[Adv]]]]: private void [[dashwood]]() { if (selection.size() != 4) throw new IllegalStateException("Select 4 balls first"); if (board.selection(getModelBalls())) { for (BallSelectionListener [[turnoff]] : subscribers) { [[turnoff]].onSelectionSucceeded(new ArrayList<>(selection)); } } else { for (BallSelectionListener [[turnoff]] : subscribers) { [[turnoff]].onSelectionFailed(new ArrayList<>(selection)); } } for (BallActor [[skinner]] : selection) { [[skinner]].quietlyUnselect(); } selection.clear(); }
[[[[Nl]]]]: This method is executed when the selection is complete
--------------------------------------------- Result 33 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 33 / 0 / 33:   4%|▍         | 33/785 [03:29<1:19:27,  6.34s/it][Succeeded / Failed / Skipped / Total] 0 / 33 / 0 / 33:   4%|▍         | 34/785 [03:33<1:18:37,  6.28s/it][Succeeded / Failed / Skipped / Total] 0 / 34 / 0 / 34:   4%|▍         | 34/785 [03:33<1:18:37,  6.28s/it][Succeeded / Failed / Skipped / Total] 0 / 34 / 0 / 34:   4%|▍         | 35/785 [03:50<1:22:10,  6.57s/it][Succeeded / Failed / Skipped / Total] 0 / 35 / 0 / 35:   4%|▍         | 35/785 [03:50<1:22:10,  6.57s/it][Succeeded / Failed / Skipped / Total] 0 / 35 / 0 / 35:   5%|▍         | 36/785 [03:50<1:19:54,  6.40s/it][Succeeded / Failed / Skipped / Total] 0 / 36 / 0 / 36:   5%|▍         | 36/785 [03:50<1:19:54,  6.40s/it][Succeeded / Failed / Skipped / Total] 0 / 36 / 0 / 36:   5%|▍         | 37/785 [03:59<1:20:37,  6.47s/it][Succeeded / Failed / Skipped / Total] 0 / 37 / 0 / 37:   5%|▍         | 37/785 [03:59<1:20:37,  6.47s/it][Succeeded / Failed / Skipped / Total] 0 / 37 / 0 / 37:   5%|▍         | 38/785 [04:03<1:19:55,  6.42s/it][Succeeded / Failed / Skipped / Total] 0 / 38 / 0 / 38:   5%|▍         | 38/785 [04:03<1:19:55,  6.42s/it][Succeeded / Failed / Skipped / Total] 0 / 38 / 0 / 38:   5%|▍         | 39/785 [04:11<1:20:16,  6.46s/it][[0 (-9705%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[delete]](CMARole role) { final String [[id]] = getResourceIdOrThrow(role, "role"); final String [[spaceId]] = getSpaceIdOrThrow(role, "role"); final CMASystem [[sys]] = role.getSystem(); role.setSystem(null); try { final Response<Void> [[response]] = service.delete([[spaceId]], [[id]]).blockingFirst(); return [[response]].code(); } finally { role.setSystem([[sys]]); } }
[[[[Nl]]]]: Delete the given role instance

[[[[Adv]]]]: public int [[hc]](CMARole role) { final String [[fé]] = getResourceIdOrThrow(role, "role"); final String [[drinkie]] = getSpaceIdOrThrow(role, "role"); final CMASystem [[discoveries]] = role.getSystem(); role.setSystem(null); try { final Response<Void> [[headlines]] = service.delete([[drinkie]], [[fé]]).blockingFirst(); return [[headlines]].code(); } finally { role.setSystem([[discoveries]]); } }
[[[[Nl]]]]: Delete the given role instance
--------------------------------------------- Result 34 ---------------------------------------------
[[0 (-9019%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static synchronized byte[] charToByteArray(char[] [[buffer]], int [[offset]], int [[length]], String [[enc]]) throws UnsupportedEncodingException { if(lastWriterEncoding == null || !lastWriterEncoding.equals([[enc]])) { lastWriter = getStreamWriterPrim([[enc]]); lastWriterEncoding = [[enc]]; } int size = lastWriter.sizeOf([[buffer]], [[offset]], [[length]]); ByteArrayOutputStream [[os]] = new ByteArrayOutputStream(size); lastWriter.open([[os]], [[enc]]); try { lastWriter.write([[buffer]], [[offset]], [[length]]); lastWriter.close(); } catch(IOException x) { throw new RuntimeException("IOException writing writer "+x.getMessage()); } try { [[os]].close(); } catch(IOException x) {}; return [[os]].toByteArray(); }
[[[[Nl]]]]: Convert a char array to a byte array @ param buffer The char array buffer @ param offset The offset @ param length The length @ param enc The character encoding @ return A new byte array @ exception UnsupportedEncodingException If the encoding is not known

[[[[Adv]]]]: public static synchronized byte[] charToByteArray(char[] [[philosophize]], int [[mourns]], int [[novelties]], String [[paradise]]) throws UnsupportedEncodingException { if(lastWriterEncoding == null || !lastWriterEncoding.equals([[paradise]])) { lastWriter = getStreamWriterPrim([[paradise]]); lastWriterEncoding = [[paradise]]; } int size = lastWriter.sizeOf([[philosophize]], [[mourns]], [[novelties]]); ByteArrayOutputStream [[yesteryear]] = new ByteArrayOutputStream(size); lastWriter.open([[yesteryear]], [[paradise]]); try { lastWriter.write([[philosophize]], [[mourns]], [[novelties]]); lastWriter.close(); } catch(IOException x) { throw new RuntimeException("IOException writing writer "+x.getMessage()); } try { [[yesteryear]].close(); } catch(IOException x) {}; return [[yesteryear]].toByteArray(); }
[[[[Nl]]]]: Convert a char array to a byte array @ param buffer The char array buffer @ param offset The offset @ param length The length @ param enc The character encoding @ return A new byte array @ exception UnsupportedEncodingException If the encoding is not known
--------------------------------------------- Result 35 ---------------------------------------------
[[0 (-10081%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[testGetFirstIndexWithSpecificStateWhenAdapterIsEmpty]]() { AbstractItemStateListAdapterImplementation [[abstractItemStateListAdapter]] = new AbstractItemStateListAdapterImplementation(getContext(), new ListDecoratorImplementation(), LogLevel.ALL, new ArrayList<Item<Object>>(), "[[False]]" != "[[False]]", "[[True]]" == "[[True]]", new LinkedHashSet<ListAdapterItemClickListener<Object>>(), new LinkedHashSet<ListAdapterItemLongClickListener<Object>>(), new LinkedHashSet<ListAdapterListener<Object>>(), new LinkedHashSet<ListEnableStateListener<Object>>(), 2, "[[False]]" != "[[False]]", new LinkedHashSet<ListItemStateListener<Object>>()); assertEquals(-1, [[abstractItemStateListAdapter]].getFirstIndexWithSpecificState(0)); }
[[[[Nl]]]]: Tests the functionality of the method , which allows to retrieve the index of the first item , which has a specific state , if the adapter is empty

[[[[Adv]]]]: public final void [[greenhouses]]() { AbstractItemStateListAdapterImplementation [[sleepwalker]] = new AbstractItemStateListAdapterImplementation(getContext(), new ListDecoratorImplementation(), LogLevel.ALL, new ArrayList<Item<Object>>(), "[["Chedda" != "Chedda"]]" != "[["Chedda" != "Chedda"]]", "[["Gallon" == "Gallon"]]" == "[["Gallon" == "Gallon"]]", new LinkedHashSet<ListAdapterItemClickListener<Object>>(), new LinkedHashSet<ListAdapterItemLongClickListener<Object>>(), new LinkedHashSet<ListAdapterListener<Object>>(), new LinkedHashSet<ListEnableStateListener<Object>>(), 2, "[["Chedda" != "Chedda"]]" != "[["Chedda" != "Chedda"]]", new LinkedHashSet<ListItemStateListener<Object>>()); assertEquals(-1, [[sleepwalker]].getFirstIndexWithSpecificState(0)); }
[[[[Nl]]]]: Tests the functionality of the method , which allows to retrieve the index of the first item , which has a specific state , if the adapter is empty
--------------------------------------------- Result 36 ---------------------------------------------
[[0 (-8562%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[computeFieldOffsets]]() { primDataSize = 0; numObjFields = 0; for (int [[i]] = 0; [[i]] < fields.length; [[i]]++) { ObjectStreamField [[f]] = fields[[[i]]]; switch ([[f]].getTypeCode()) { case 'Z': case 'B': [[f]].setOffset(primDataSize++); break; case 'C': case 'S': [[f]].setOffset(primDataSize); primDataSize += 2; break; case 'I': case 'F': [[f]].setOffset(primDataSize); primDataSize += 4; break; case 'J': case 'D': [[f]].setOffset(primDataSize); primDataSize += 8; break; case '[': case 'L': [[f]].setOffset(numObjFields++); break; default: throw new InternalError(); } } }
[[[[Nl]]]]: Calculates and sets serializable field offsets , as well as primitive data size and object field count totals

[[[[Adv]]]]: private void [[ömer]]() { primDataSize = 0; numObjFields = 0; for (int [[hervé]] = 0; [[hervé]] < fields.length; [[hervé]]++) { ObjectStreamField [[shinigami]] = fields[[[hervé]]]; switch ([[shinigami]].getTypeCode()) { case 'Z': case 'B': [[shinigami]].setOffset(primDataSize++); break; case 'C': case 'S': [[shinigami]].setOffset(primDataSize); primDataSize += 2; break; case 'I': case 'F': [[shinigami]].setOffset(primDataSize); primDataSize += 4; break; case 'J': case 'D': [[shinigami]].setOffset(primDataSize); primDataSize += 8; break; case '[': case 'L': [[shinigami]].setOffset(numObjFields++); break; default: throw new InternalError(); } } }
[[[[Nl]]]]: Calculates and sets serializable field offsets , as well as primitive data size and object field count totals
--------------------------------------------- Result 37 ---------------------------------------------
[[0 (-9510%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public WindowBuilder [[withSize]](int [[width]], int [[height]]) { this.[[size]] = new Dimension([[width]], [[height]]); return this; }
[[[[Nl]]]]: Configure the window size @ param width width @ param height height @ return this reference for chaining

[[[[Adv]]]]: public WindowBuilder [[hervé]](int [[rosewood]], int [[existentialist]]) { this.[[rejections]] = new Dimension([[rosewood]], [[existentialist]]); return this; }
[[[[Nl]]]]: Configure the window size @ param width width @ param height height @ return this reference for chaining
--------------------------------------------- Result 38 ---------------------------------------------
[[0 (-9494%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setMinDate]](Calendar [[calendar]]) { mMinDate = [[calendar]]; if (mDayPickerView != null) { mDayPickerView.onChange(); } }
[[[[Nl]]]]: Sets the minimal date that can be selected in this date picker

[[[[Adv]]]]: public void [[pitchforks]](Calendar [[masato]]) { mMinDate = [[masato]]; if (mDayPickerView != null) { mDayPickerView.onChange(); } }
[[[[Nl]]]]: Sets the minimal date that can be selected in this date picker
[Succeeded / Failed / Skipped / Total] 0 / 39 / 0 / 39:   5%|▍         | 39/785 [04:11<1:20:16,  6.46s/it][Succeeded / Failed / Skipped / Total] 0 / 39 / 0 / 39:   5%|▌         | 40/785 [04:32<1:24:40,  6.82s/it][Succeeded / Failed / Skipped / Total] 0 / 40 / 0 / 40:   5%|▌         | 40/785 [04:32<1:24:40,  6.82s/it][Succeeded / Failed / Skipped / Total] 0 / 40 / 0 / 40:   5%|▌         | 41/785 [04:36<1:23:43,  6.75s/it][Succeeded / Failed / Skipped / Total] 0 / 41 / 0 / 41:   5%|▌         | 41/785 [04:36<1:23:43,  6.75s/it][Succeeded / Failed / Skipped / Total] 0 / 41 / 0 / 41:   5%|▌         | 42/785 [04:45<1:24:11,  6.80s/it][Succeeded / Failed / Skipped / Total] 0 / 42 / 0 / 42:   5%|▌         | 42/785 [04:45<1:24:11,  6.80s/it][Succeeded / Failed / Skipped / Total] 0 / 42 / 0 / 42:   5%|▌         | 43/785 [04:46<1:22:17,  6.65s/it][Succeeded / Failed / Skipped / Total] 0 / 43 / 0 / 43:   5%|▌         | 43/785 [04:46<1:22:17,  6.65s/it][Succeeded / Failed / Skipped / Total] 0 / 43 / 0 / 43:   6%|▌         | 44/785 [04:55<1:23:04,  6.73s/it][Succeeded / Failed / Skipped / Total] 0 / 44 / 0 / 44:   6%|▌         | 44/785 [04:55<1:23:04,  6.73s/it][Succeeded / Failed / Skipped / Total] 0 / 44 / 0 / 44:   6%|▌         | 45/785 [04:58<1:21:47,  6.63s/it][Succeeded / Failed / Skipped / Total] 0 / 45 / 0 / 45:   6%|▌         | 45/785 [04:58<1:21:47,  6.63s/it][Succeeded / Failed / Skipped / Total] 0 / 45 / 0 / 45:   6%|▌         | 46/785 [05:06<1:22:02,  6.66s/it][Succeeded / Failed / Skipped / Total] 0 / 46 / 0 / 46:   6%|▌         | 46/785 [05:06<1:22:02,  6.66s/it][Succeeded / Failed / Skipped / Total] 0 / 46 / 0 / 46:   6%|▌         | 47/785 [05:21<1:24:12,  6.85s/it][Succeeded / Failed / Skipped / Total] 0 / 47 / 0 / 47:   6%|▌         | 47/785 [05:21<1:24:12,  6.85s/it][Succeeded / Failed / Skipped / Total] 0 / 47 / 0 / 47:   6%|▌         | 48/785 [05:25<1:23:14,  6.78s/it]--------------------------------------------- Result 39 ---------------------------------------------
[[0 (-9734%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static ItemCollection [[load]](Cursor [[cur]]) { ItemCollection [[coll]] = new ItemCollection(); if ([[cur]] == null) { return null; } [[coll]].setTitle([[cur]].getString(0)); [[coll]].setParent([[cur]].getString(1)); [[coll]].etag = [[cur]].getString(2); [[coll]].dirty = [[cur]].getString(3); [[coll]].dbId = [[cur]].getString(4); [[coll]].setKey([[cur]].getString(5)); [[coll]].size = [[cur]].getInt(6); [[coll]].timestamp = [[cur]].getString(7); return [[coll]]; }
[[[[Nl]]]]: Loads a collection from the specified Cursor , where the cursor was created using the recommended query in Database

[[[[Adv]]]]: public static ItemCollection [[turnoff]](Cursor [[skinner]]) { ItemCollection [[summit]] = new ItemCollection(); if ([[skinner]] == null) { return null; } [[summit]].setTitle([[skinner]].getString(0)); [[summit]].setParent([[skinner]].getString(1)); [[summit]].etag = [[skinner]].getString(2); [[summit]].dirty = [[skinner]].getString(3); [[summit]].dbId = [[skinner]].getString(4); [[summit]].setKey([[skinner]].getString(5)); [[summit]].size = [[skinner]].getInt(6); [[summit]].timestamp = [[skinner]].getString(7); return [[summit]]; }
[[[[Nl]]]]: Loads a collection from the specified Cursor , where the cursor was created using the recommended query in Database
--------------------------------------------- Result 40 ---------------------------------------------
[[0 (-10639%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static void [[unlink]](String [[path]], Callback [[callback]]) { try { RNFetchBlobFS.deleteRecursive(new File([[path]])); [[callback]].invoke(null, "[[True]]" == "[[True]]"); } catch(Exception err) { if(err != null) [[callback]].invoke(err.getLocalizedMessage(), "[[False]]" != "[[False]]"); } }
[[[[Nl]]]]: Unlink file at path @ param path Path of target @ param callback JS context callback

[[[[Adv]]]]: static void [[accuracy]](String [[scientology]], Callback [[reintroduce]]) { try { RNFetchBlobFS.deleteRecursive(new File([[scientology]])); [[reintroduce]].invoke(null, "[["Currencies" == "Currencies"]]" == "[["Currencies" == "Currencies"]]"); } catch(Exception err) { if(err != null) [[reintroduce]].invoke(err.getLocalizedMessage(), "[["Scot" != "Scot"]]" != "[["Scot" != "Scot"]]"); } }
[[[[Nl]]]]: Unlink file at path @ param path Path of target @ param callback JS context callback
--------------------------------------------- Result 41 ---------------------------------------------
[[0 (-4599%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[removeApp]](long [[key]], String [[columnName]]) { ContentValues [[values]] = new ContentValues(); [[values]].putNull([[columnName]]); Uri [[appUri]] = ContentUris.withAppendedId(CONTENT_URI, [[key]]); getContentResolver().update([[appUri]], [[values]], null, null); }
[[[[Nl]]]]: TODO : not sure which one to use : putNull vs remove

[[[[Adv]]]]: private void [[paperweight]](long [[outlines]], String [[on]]) { ContentValues [[whiteout]] = new ContentValues(); [[whiteout]].putNull([[on]]); Uri [[amadé]] = ContentUris.withAppendedId(CONTENT_URI, [[outlines]]); getContentResolver().update([[amadé]], [[whiteout]], null, null); }
[[[[Nl]]]]: TODO : not sure which one to use : putNull vs remove
--------------------------------------------- Result 42 ---------------------------------------------
[[0 (-9704%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public NotificationActionHolder [[autoCancel]](boolean [[autoCancel]]) { builder.setAutoCancel([[autoCancel]]); return this; }
[[[[Nl]]]]: Make this notification automatically dismissed when the user touches it

[[[[Adv]]]]: public NotificationActionHolder [[inheritance]](boolean [[channel]]) { builder.setAutoCancel([[inheritance]]); return this; }
[[[[Nl]]]]: Make this notification automatically dismissed when the user touches it
--------------------------------------------- Result 43 ---------------------------------------------
[[0 (-10488%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[SVDecomp]](Mat [[src]], Mat w, Mat [[u]], Mat [[vt]], int [[flags]]) { SVDecomp_0([[src]].nativeObj, w.nativeObj, [[u]].nativeObj, [[vt]].nativeObj, [[flags]]); return; }
[[[[Nl]]]]: javadoc : SVDecomp ( src , w , u , vt , flags )

[[[[Adv]]]]: public static void [[templar]](Mat [[delivery]], Mat w, Mat [[constructors]], Mat [[companies]], int [[bonanza]]) { SVDecomp_0([[delivery]].nativeObj, w.nativeObj, [[constructors]].nativeObj, [[companies]].nativeObj, [[bonanza]]); return; }
[[[[Nl]]]]: javadoc : SVDecomp ( src , w , u , vt , flags )
--------------------------------------------- Result 44 ---------------------------------------------
[[0 (-7888%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setTickRotation]](boolean [[tickRotation]]) { this.[[tickRotation]] = [[tickRotation]]; if (!isAttachedToWindow()) return; updateBackgroundBitmap(); invalidate(); }
[[[[Nl]]]]: to make speed value 's label rotate at each tick

[[[[Adv]]]]: public void [[pickpocketing]](boolean [[acquaintances]]) { this.[[pictured]] = [[acquaintances]]; if (!isAttachedToWindow()) return; updateBackgroundBitmap(); invalidate(); }
[[[[Nl]]]]: to make speed value 's label rotate at each tick
--------------------------------------------- Result 45 ---------------------------------------------
[[0 (-9395%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[reset]]() { _name = null; _fullName = null; _displayName = null; _type = ContactType.USER; _status = ContactStatus.OFFLINE; _statusMessage = null; _usersCount = 0; _usersTotal = 0; _title = null; _muted = "[[False]]" != "[[False]]"; _noDisconnect = "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: < p > Resets the < code > Contact < code > instance back to the default values

[[[[Adv]]]]: public void [[congregated]]() { _name = null; _fullName = null; _displayName = null; _type = ContactType.USER; _status = ContactStatus.OFFLINE; _statusMessage = null; _usersCount = 0; _usersTotal = 0; _title = null; _muted = "[["Sternberg" != "Sternberg"]]" != "[["Sternberg" != "Sternberg"]]"; _noDisconnect = "[["Sternberg" != "Sternberg"]]" != "[["Sternberg" != "Sternberg"]]"; }
[[[[Nl]]]]: < p > Resets the < code > Contact < code > instance back to the default values
--------------------------------------------- Result 46 ---------------------------------------------
[[0 (-10464%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public CreateTopicRequest [[withName]](String [[name]]) { this.[[name]] = [[name]]; return this; }
[[[[Nl]]]]: < p > The name of the topic you want to create

[[[[Adv]]]]: public CreateTopicRequest [[pitchforks]](String [[paperweight]]) { this.[[newcastle]] = [[paperweight]]; return this; }
[[[[Nl]]]]: < p > The name of the topic you want to create
--------------------------------------------- Result 47 ---------------------------------------------
[[0 (-10303%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setShadowColor]](int [[shadowColor]]) { this.[[shadowColor]] = [[shadowColor]]; useTintColorForShadow = "[[False]]" != "[[False]]"; invalidateSelf(); }
[[[[Nl]]]]: Set color of shadow rendered behind shape

[[[[Adv]]]]: public void [[crm]](int [[contenders]]) { this.[[ricocheting]] = [[contenders]]; useTintColorForShadow = "[["Abusers" != "Abusers"]]" != "[["Abusers" != "Abusers"]]"; invalidateSelf(); }
[[[[Nl]]]]: Set color of shadow rendered behind shape
--------------------------------------------- Result 48 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 48 / 0 / 48:   6%|▌         | 48/785 [05:25<1:23:14,  6.78s/it][Succeeded / Failed / Skipped / Total] 0 / 48 / 0 / 48:   6%|▌         | 49/785 [05:25<1:21:32,  6.65s/it][Succeeded / Failed / Skipped / Total] 0 / 49 / 0 / 49:   6%|▌         | 49/785 [05:25<1:21:32,  6.65s/it][Succeeded / Failed / Skipped / Total] 0 / 49 / 0 / 49:   6%|▋         | 50/785 [05:48<1:25:18,  6.96s/it][Succeeded / Failed / Skipped / Total] 0 / 50 / 0 / 50:   6%|▋         | 50/785 [05:48<1:25:18,  6.96s/it][Succeeded / Failed / Skipped / Total] 0 / 50 / 0 / 50:   6%|▋         | 51/785 [05:51<1:24:20,  6.89s/it][Succeeded / Failed / Skipped / Total] 0 / 51 / 0 / 51:   6%|▋         | 51/785 [05:51<1:24:20,  6.89s/it][Succeeded / Failed / Skipped / Total] 0 / 51 / 0 / 51:   7%|▋         | 52/785 [06:00<1:24:35,  6.92s/it][Succeeded / Failed / Skipped / Total] 0 / 52 / 0 / 52:   7%|▋         | 52/785 [06:00<1:24:35,  6.92s/it][Succeeded / Failed / Skipped / Total] 0 / 52 / 0 / 52:   7%|▋         | 53/785 [06:22<1:28:07,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 53 / 0 / 53:   7%|▋         | 53/785 [06:22<1:28:07,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 53 / 0 / 53:   7%|▋         | 54/785 [06:25<1:27:03,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 54 / 0 / 54:   7%|▋         | 54/785 [06:25<1:27:03,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 54 / 0 / 54:   7%|▋         | 55/785 [06:34<1:27:19,  7.18s/it][[0 (-9851%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[recalculateTowerCounter]](PartitionOccupyingTower [[tower]], IMapArea [[area]]) { [[area]].stream().forEach((x, y) -> towers[x + y * width] = 0); List<Tuple<Integer, PartitionOccupyingTower>> [[towersInRange]] = occupyingTowers.getTowersInRange([[tower]].position, [[tower]].radius, currTower -> currTower.playerId == [[tower]].playerId); stream([[towersInRange]]) .forEach(currTower -> [[area]].stream() .filter(currTower.e2.area::contains) .forEach((x, y) -> towers[x + y * width]++)); }
[[[[Nl]]]]: Recalculates the tower counter for the given area

[[[[Adv]]]]: private void [[pickets]](PartitionOccupyingTower [[message]], IMapArea [[sacrifice]]) { [[sacrifice]].stream().forEach((x, y) -> towers[x + y * width] = 0); List<Tuple<Integer, PartitionOccupyingTower>> [[horned]] = occupyingTowers.getTowersInRange([[message]].position, [[message]].radius, currTower -> currTower.playerId == [[message]].playerId); stream([[horned]]) .forEach(currTower -> [[sacrifice]].stream() .filter(currTower.e2.area::contains) .forEach((x, y) -> towers[x + y * width]++)); }
[[[[Nl]]]]: Recalculates the tower counter for the given area
--------------------------------------------- Result 49 ---------------------------------------------
[[0 (-5457%)]] --> [[[FAILED]]]

[[[[Adv]]]]: @Override protected boolean [[isTargetClassName]](String [[className]]) { ClassNameSplitter [[splitter]] = new ClassNameSplitter([[className]]); return ![[className]].contains("$") && [[splitter]].isValid() && filterPackages.contains([[splitter]].getFullHostPackageName()) ; }
[[[[Nl]]]]: Match < code > [ appPackage ]

[[[[Adv]]]]: @Override protected boolean [[tribulations]](String [[chestnut]]) { ClassNameSplitter [[bankrupting]] = new ClassNameSplitter([[chestnut]]); return ![[chestnut]].contains("$") && [[bankrupting]].isValid() && filterPackages.contains([[bankrupting]].getFullHostPackageName()) ; }
[[[[Nl]]]]: Match < code > [ appPackage ]
--------------------------------------------- Result 50 ---------------------------------------------
[[0 (-9783%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public ScalingPolicy [[withStepAdjustments]](StepAdjustment... [[stepAdjustments]]) { if (getStepAdjustments() == null) { this.[[stepAdjustments]] = new java.util.ArrayList<StepAdjustment>([[stepAdjustments]].length); } for (StepAdjustment [[value]] : [[stepAdjustments]]) { this.[[stepAdjustments]].add([[value]]); } return this; }
[[[[Nl]]]]: < p > A set of adjustments that enable you to scale based on the size of the alarm breach

[[[[Adv]]]]: public ScalingPolicy [[teardrops]](StepAdjustment... [[leaves]]) { if (getStepAdjustments() == null) { this.[[juvenile]] = new java.util.ArrayList<StepAdjustment>([[leaves]].length); } for (StepAdjustment [[ancestry]] : [[leaves]]) { this.[[juvenile]].add([[ancestry]]); } return this; }
[[[[Nl]]]]: < p > A set of adjustments that enable you to scale based on the size of the alarm breach
--------------------------------------------- Result 51 ---------------------------------------------
[[0 (-9132%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setY]] (float [[y]]) { this.[[position]].y = [[y]]; updated = "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: Sets the position on the y axis @ param y Position to locate the decal at

[[[[Adv]]]]: public void [[acquaintances]] (float [[destroyers]]) { this.[[cherubs]].y = [[destroyers]]; updated = "[["Accidentally" != "Accidentally"]]" != "[["Accidentally" != "Accidentally"]]"; }
[[[[Nl]]]]: Sets the position on the y axis @ param y Position to locate the decal at
--------------------------------------------- Result 52 ---------------------------------------------
[[0 (-7691%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static double [[TransEval]](GLUvertex [[u]], GLUvertex [[v]], GLUvertex [[w]]) { double [[gapL]], gapR; assert (TransLeq([[u]], [[v]]) && TransLeq([[v]], [[w]])); [[gapL]] = [[v]].t - [[u]].t; gapR = [[w]].t - [[v]].t; if ([[gapL]] + gapR > 0) { if ([[gapL]] < gapR) { return ([[v]].s - [[u]].s) + ([[u]].s - [[w]].s) * ([[gapL]] / ([[gapL]] + gapR)); } else { return ([[v]].s - [[w]].s) + ([[w]].s - [[u]].s) * (gapR / ([[gapL]] + gapR)); } } return 0; }
[[[[Nl]]]]: Define versions of EdgeSign , EdgeEval with s and t transposed

[[[[Adv]]]]: static double [[pickpocketing]](GLUvertex [[acquaintances]], GLUvertex [[texts]], GLUvertex [[ambulances]]) { double [[wording]], gapR; assert (TransLeq([[acquaintances]], [[texts]]) && TransLeq([[texts]], [[ambulances]])); [[wording]] = [[texts]].t - [[acquaintances]].t; gapR = [[ambulances]].t - [[texts]].t; if ([[wording]] + gapR > 0) { if ([[wording]] < gapR) { return ([[texts]].s - [[acquaintances]].s) + ([[acquaintances]].s - [[ambulances]].s) * ([[wording]] / ([[wording]] + gapR)); } else { return ([[texts]].s - [[ambulances]].s) + ([[ambulances]].s - [[acquaintances]].s) * (gapR / ([[wording]] + gapR)); } } return 0; }
[[[[Nl]]]]: Define versions of EdgeSign , EdgeEval with s and t transposed
--------------------------------------------- Result 53 ---------------------------------------------
[[0 (-7767%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static void [[checkForDownloads]](List<String> [[artifactNames]], boolean [[checkTimeStamp]], boolean [[cleanup]]) { LOGGER.entering(); if ([[checkTimeStamp]] && (lastModifiedTime == DOWNLOAD_FILE.lastModified())) { return; } lastModifiedTime = DOWNLOAD_FILE.lastModified(); if ([[cleanup]]) { [[cleanup]](); } List<URLChecksumEntity> [[artifactDetails]] = new ArrayList<ArtifactDetails.URLChecksumEntity>(); try { [[artifactDetails]] = ArtifactDetails.getArtifactDetailsForCurrentPlatformByNames(DOWNLOAD_FILE, [[artifactNames]]); } catch (IOException e) { LOGGER.log(Level.SEVERE, "Unable to open download.json file", e); throw new RuntimeException(e); } downloadAndExtractArtifacts([[artifactDetails]]); LOGGER.exiting(); }
[[[[Nl]]]]: Check download

[[[[Adv]]]]: static void [[history]](List<String> [[sportsmanship]], boolean [[hypnotize]], boolean [[dynamics]]) { LOGGER.entering(); if ([[hypnotize]] && (lastModifiedTime == DOWNLOAD_FILE.lastModified())) { return; } lastModifiedTime = DOWNLOAD_FILE.lastModified(); if ([[dynamics]]) { [[dynamics]](); } List<URLChecksumEntity> [[linguist]] = new ArrayList<ArtifactDetails.URLChecksumEntity>(); try { [[linguist]] = ArtifactDetails.getArtifactDetailsForCurrentPlatformByNames(DOWNLOAD_FILE, [[sportsmanship]]); } catch (IOException e) { LOGGER.log(Level.SEVERE, "Unable to open download.json file", e); throw new RuntimeException(e); } downloadAndExtractArtifacts([[linguist]]); LOGGER.exiting(); }
[[[[Nl]]]]: Check download
--------------------------------------------- Result 54 ---------------------------------------------
[[0 (-6811%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean rangeHasChanged() { boolean [[tester]] = "[[True]]" == "[[True]]"; [[tester]] &= plotSheet.getxRange()[0] == this.[[xrange]][0]; [[tester]] &= plotSheet.getxRange()[1] == this.[[xrange]][1]; [[tester]] &= plotSheet.getyRange()[0] == this.[[yrange]][0]; [[tester]] &= plotSheet.getyRange()[1] == this.[[yrange]][1]; if(![[tester]]) { this.[[xrange]] = plotSheet.getxRange().clone(); this.[[yrange]] = plotSheet.getyRange().clone(); } return ![[tester]] || this.[[depthSearchAborted]]; }
[[[[Nl]]]]: if the bounds have changed the min and max height of relief has to be determined anew @ return

[[[[Adv]]]]: private boolean rangeHasChanged() { boolean [[bookcase]] = "[["Slash" == "Slash"]]" == "[["Slash" == "Slash"]]"; [[bookcase]] &= plotSheet.getxRange()[0] == this.[[jokers]][0]; [[bookcase]] &= plotSheet.getxRange()[1] == this.[[jokers]][1]; [[bookcase]] &= plotSheet.getyRange()[0] == this.[[spurious]][0]; [[bookcase]] &= plotSheet.getyRange()[1] == this.[[spurious]][1]; if(![[bookcase]]) { this.[[jokers]] = plotSheet.getxRange().clone(); this.[[spurious]] = plotSheet.getyRange().clone(); } return ![[bookcase]] || this.[[wasa]]; }
[[[[Nl]]]]: if the bounds have changed the min and max height of relief has to be determined anew @ return
--------------------------------------------- Result 55 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 55 / 0 / 55:   7%|▋         | 55/785 [06:34<1:27:19,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 55 / 0 / 55:   7%|▋         | 56/785 [06:42<1:27:14,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 56 / 0 / 56:   7%|▋         | 56/785 [06:42<1:27:14,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 56 / 0 / 56:   7%|▋         | 57/785 [06:45<1:26:19,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 57 / 0 / 57:   7%|▋         | 57/785 [06:45<1:26:19,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 57 / 0 / 57:   7%|▋         | 58/785 [06:54<1:26:36,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 58 / 0 / 58:   7%|▋         | 58/785 [06:54<1:26:36,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 58 / 0 / 58:   8%|▊         | 59/785 [06:59<1:25:59,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 59 / 0 / 59:   8%|▊         | 59/785 [06:59<1:25:59,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 59 / 0 / 59:   8%|▊         | 60/785 [07:20<1:28:42,  7.34s/it][Succeeded / Failed / Skipped / Total] 0 / 60 / 0 / 60:   8%|▊         | 60/785 [07:20<1:28:42,  7.34s/it][Succeeded / Failed / Skipped / Total] 0 / 60 / 0 / 60:   8%|▊         | 61/785 [07:21<1:27:23,  7.24s/it][Succeeded / Failed / Skipped / Total] 0 / 61 / 0 / 61:   8%|▊         | 61/785 [07:21<1:27:23,  7.24s/it][Succeeded / Failed / Skipped / Total] 0 / 61 / 0 / 61:   8%|▊         | 62/785 [07:34<1:28:22,  7.33s/it][Succeeded / Failed / Skipped / Total] 0 / 62 / 0 / 62:   8%|▊         | 62/785 [07:34<1:28:22,  7.33s/it][Succeeded / Failed / Skipped / Total] 0 / 62 / 0 / 62:   8%|▊         | 63/785 [07:47<1:29:17,  7.42s/it][Succeeded / Failed / Skipped / Total] 0 / 63 / 0 / 63:   8%|▊         | 63/785 [07:47<1:29:17,  7.42s/it][Succeeded / Failed / Skipped / Total] 0 / 63 / 0 / 63:   8%|▊         | 64/785 [07:54<1:29:03,  7.41s/it][[0 (-8881%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[export]](String [[fileName]], int sampleRate, byte[] [[samples]]) throws IOException { nBytesPerSample = 2; buf = new byte[[[samples]].length]; System.arraycopy([[samples]], 0, buf, 0, [[samples]].length); byte [[b]] = 0; for (int [[j]] = 0; [[j]] < buf.length; [[j]] += 2) { [[b]] = buf[[[j]]]; buf[[[j]]] = buf[[[j]] + 1]; buf[[[j]] + 1] = [[b]]; } doWrite([[fileName]], sampleRate); }
[[[[Nl]]]]: Export an array of bytes to a wav file

[[[[Adv]]]]: public void [[refreshes]](String [[pencils]], int sampleRate, byte[] [[impatience]]) throws IOException { nBytesPerSample = 2; buf = new byte[[[impatience]].length]; System.arraycopy([[impatience]], 0, buf, 0, [[impatience]].length); byte [[iconic]] = 0; for (int [[abusers]] = 0; [[abusers]] < buf.length; [[abusers]] += 2) { [[iconic]] = buf[[[abusers]]]; buf[[[abusers]]] = buf[[[abusers]] + 1]; buf[[[abusers]] + 1] = [[iconic]]; } doWrite([[pencils]], sampleRate); }
[[[[Nl]]]]: Export an array of bytes to a wav file
--------------------------------------------- Result 56 ---------------------------------------------
[[0 (-9738%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[download]](String [[remoteFileName]], File [[localFile]]) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException { [[download]]([[remoteFileName]], [[localFile]], 0, null); }
[[[[Nl]]]]: This method downloads a remote file from the server to a local file

[[[[Adv]]]]: public void [[mccready]](String [[inspector]], File [[majorca]]) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException { [[mccready]]([[inspector]], [[majorca]], 0, null); }
[[[[Nl]]]]: This method downloads a remote file from the server to a local file
--------------------------------------------- Result 57 ---------------------------------------------
[[0 (-9995%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setOnItemSelectedListener]](@Nullable AdapterView.OnItemSelectedListener [[selectedListener]]) { mItemSelectedListener = [[selectedListener]]; final XpDropDownListView [[list]] = mDropDownList; if ([[list]] != null) { [[list]].setOnItemSelectedListener([[selectedListener]]); } }
[[[[Nl]]]]: Sets a listener to receive events when a list item is selected

[[[[Adv]]]]: public void [[trash]](@Nullable AdapterView.OnItemSelectedListener [[recover]]) { mItemSelectedListener = [[recover]]; final XpDropDownListView [[staked]] = mDropDownList; if ([[staked]] != null) { [[staked]].setOnItemSelectedListener([[recover]]); } }
[[[[Nl]]]]: Sets a listener to receive events when a list item is selected
--------------------------------------------- Result 58 ---------------------------------------------
[[0 (-7052%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public TagDescription [[withValue]](String [[value]]) { this.[[value]] = [[value]]; return this; }
[[[[Nl]]]]: The tag value

[[[[Adv]]]]: public TagDescription [[freemasons]](String [[stockbroker]]) { this.[[dampen]] = [[stockbroker]]; return this; }
[[[[Nl]]]]: The tag value
--------------------------------------------- Result 59 ---------------------------------------------
[[0 (-8092%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private String [[checkForSlash]](String [[src]]) { if (scheme.equals(Scheme.ASSETS.toString())) { if ([[src]].startsWith(File.separator)) { if ([[src]].length() > 0) { return [[src]].substring(1); } else { return ""; } } else { return [[src]]; } } if ([[src]] != null && ![[src]].startsWith("/")) { return '/' + [[src]]; } else { return [[src]]; } }
[[[[Nl]]]]: Checks the string for slash at the beginning of the string

[[[[Adv]]]]: private String [[cafè]](String [[sancha]]) { if (scheme.equals(Scheme.ASSETS.toString())) { if ([[sancha]].startsWith(File.separator)) { if ([[sancha]].length() > 0) { return [[sancha]].substring(1); } else { return ""; } } else { return [[sancha]]; } } if ([[sancha]] != null && ![[sancha]].startsWith("/")) { return '/' + [[sancha]]; } else { return [[sancha]]; } }
[[[[Nl]]]]: Checks the string for slash at the beginning of the string
--------------------------------------------- Result 60 ---------------------------------------------
[[0 (-10300%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public TimeCalculator [[timeCalculationMethod]](AngleCalculationType [[angle]]) { TimeAdjustment [[twoMinutesZuhrAdjustment]] = new TimeAdjustment(TWO_MINUTES_ZUHR); return [[timeCalculationMethod]]([[angle]], "[[False]]" != "[[False]]", [[twoMinutesZuhrAdjustment]]); }
[[[[Nl]]]]: Like calling { @ code timeCalculationMethod ( angle , false , TimeAdjustment

[[[[Adv]]]]: public TimeCalculator [[electrodes]](AngleCalculationType [[cakes]]) { TimeAdjustment [[clashes]] = new TimeAdjustment(TWO_MINUTES_ZUHR); return [[electrodes]]([[cakes]], "[["Futures" != "Futures"]]" != "[["Futures" != "Futures"]]", [[clashes]]); }
[[[[Nl]]]]: Like calling { @ code timeCalculationMethod ( angle , false , TimeAdjustment
--------------------------------------------- Result 61 ---------------------------------------------
[[0 (-6183%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[notifyIfError]](Response [[response]], Callback [[callback]]) { if ([[response]].getError() != null) { FacebookRequestError [[error]] = [[response]].getError(); [[callback]].onError(new SocialError([[error]].getException())); return "[[True]]" == "[[True]]"; } return False; }
[[[[Nl]]]]: returns true if there was an error

[[[[Adv]]]]: private boolean [[pouf]](Response [[westernized]], Callback [[protégée]]) { if ([[westernized]].getError() != null) { FacebookRequestError [[uto]] = [[westernized]].getError(); [[protégée]].onError(new SocialError([[uto]].getException())); return "[["Airfare" == "Airfare"]]" == "[["Airfare" == "Airfare"]]"; } return False; }
[[[[Nl]]]]: returns true if there was an error
--------------------------------------------- Result 62 ---------------------------------------------
[[0 (-8786%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void handleFling(@NonNull final MotionEvent [[event]], @NonNull final DragState [[dragState]]) { int pointerId = [[event]].getPointerId(0); velocityTracker.computeCurrentVelocity(1000, maxFlingVelocity); float [[flingVelocity]] = Math.abs(velocityTracker.getYVelocity(pointerId)); if ([[flingVelocity]] > minFlingVelocity) { float [[flingDistance]] = 0.25f * [[flingVelocity]]; if ([[dragState]] == DragState.DRAG_TO_START) { [[flingDistance]] = -1 * [[flingDistance]]; } long [[duration]] = Math.round(Math.abs([[flingDistance]]) / [[flingVelocity]] * 3000); notifyOnFling([[flingDistance]], [[duration]]); } }
[[[[Nl]]]]: Handles a fling gesture

[[[[Adv]]]]: private void handleFling(@NonNull final MotionEvent [[ś]], @NonNull final DragState [[ephemeral]]) { int pointerId = [[ś]].getPointerId(0); velocityTracker.computeCurrentVelocity(1000, maxFlingVelocity); float [[reconstitute]] = Math.abs(velocityTracker.getYVelocity(pointerId)); if ([[reconstitute]] > minFlingVelocity) { float [[diagnostics]] = 0.25f * [[reconstitute]]; if ([[ephemeral]] == DragState.DRAG_TO_START) { [[diagnostics]] = -1 * [[diagnostics]]; } long [[congregation]] = Math.round(Math.abs([[diagnostics]]) / [[reconstitute]] * 3000); notifyOnFling([[diagnostics]], [[congregation]]); } }
[[[[Nl]]]]: Handles a fling gesture
--------------------------------------------- Result 63 ---------------------------------------------
[[0 (-9186%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private String [[getNorthSouth]]() { if (this.[[latitude]] < 0) { return "S"; } return "N"; }
[[[[Nl]]]]: Returns `` N '' or `` S '' depending on the latitude

[[[[Adv]]]]: private String [[heartbroken]]() { if (this.[[employee]] < 0) { return "S"; } return "N"; }
[[[[Nl]]]]: Returns `` N '' or `` S '' depending on the latitude
--------------------------------------------- Result 64 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 64 / 0 / 64:   8%|▊         | 64/785 [07:54<1:29:03,  7.41s/it][Succeeded / Failed / Skipped / Total] 0 / 64 / 0 / 64:   8%|▊         | 65/785 [07:56<1:27:59,  7.33s/it][Succeeded / Failed / Skipped / Total] 0 / 65 / 0 / 65:   8%|▊         | 65/785 [07:56<1:27:59,  7.33s/it][Succeeded / Failed / Skipped / Total] 0 / 65 / 0 / 65:   8%|▊         | 66/785 [08:07<1:28:25,  7.38s/it][Succeeded / Failed / Skipped / Total] 0 / 66 / 0 / 66:   8%|▊         | 66/785 [08:07<1:28:25,  7.38s/it][Succeeded / Failed / Skipped / Total] 0 / 66 / 0 / 66:   9%|▊         | 67/785 [08:13<1:28:12,  7.37s/it][Succeeded / Failed / Skipped / Total] 0 / 67 / 0 / 67:   9%|▊         | 67/785 [08:13<1:28:12,  7.37s/it][Succeeded / Failed / Skipped / Total] 0 / 67 / 0 / 67:   9%|▊         | 68/785 [08:16<1:27:14,  7.30s/it][Succeeded / Failed / Skipped / Total] 0 / 68 / 0 / 68:   9%|▊         | 68/785 [08:16<1:27:14,  7.30s/it][Succeeded / Failed / Skipped / Total] 0 / 68 / 0 / 68:   9%|▉         | 69/785 [08:26<1:27:33,  7.34s/it][Succeeded / Failed / Skipped / Total] 0 / 69 / 0 / 69:   9%|▉         | 69/785 [08:26<1:27:33,  7.34s/it][Succeeded / Failed / Skipped / Total] 0 / 69 / 0 / 69:   9%|▉         | 70/785 [08:29<1:26:42,  7.28s/it][Succeeded / Failed / Skipped / Total] 0 / 70 / 0 / 70:   9%|▉         | 70/785 [08:29<1:26:42,  7.28s/it][Succeeded / Failed / Skipped / Total] 0 / 70 / 0 / 70:   9%|▉         | 71/785 [08:40<1:27:10,  7.33s/it][Succeeded / Failed / Skipped / Total] 0 / 71 / 0 / 71:   9%|▉         | 71/785 [08:40<1:27:10,  7.33s/it][Succeeded / Failed / Skipped / Total] 0 / 71 / 0 / 71:   9%|▉         | 72/785 [08:42<1:26:13,  7.26s/it][[0 (-10374%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final User[] getUsers(String channel) { channel = channel.toLowerCase(); User[] [[userArray]] = new User[0]; synchronized (_channels) { Hashtable<User, User> [[users]] = _channels.get(channel); if ([[users]] != null) { [[userArray]] = new User[[[users]].size()]; Enumeration<User> [[enumeration]] = [[users]].elements(); for (int [[i]] = 0; [[i]] < [[userArray]].length; [[i]]++) { User [[user]] = [[enumeration]].nextElement(); [[userArray]][[[i]]] = [[user]]; } } } return [[userArray]]; }
[[[[Nl]]]]: Returns an array of all users in the specified channel

[[[[Adv]]]]: public final User[] getUsers(String channel) { channel = channel.toLowerCase(); User[] [[protégée]] = new User[0]; synchronized (_channels) { Hashtable<User, User> [[espinoza]] = _channels.get(channel); if ([[espinoza]] != null) { [[protégée]] = new User[[[espinoza]].size()]; Enumeration<User> [[mío]] = [[espinoza]].elements(); for (int [[balle]] = 0; [[balle]] < [[protégée]].length; [[balle]]++) { User [[cascades]] = [[mío]].nextElement(); [[protégée]][[[balle]]] = [[cascades]]; } } } return [[protégée]]; }
[[[[Nl]]]]: Returns an array of all users in the specified channel
--------------------------------------------- Result 65 ---------------------------------------------
[[0 (-11047%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Plot setPriceIndicator(Number [[index]], Boolean priceIndicator3) { if (jsBase == null) { this.[[index]] = [[index]]; this.[[priceIndicator]] = null; this.priceIndicator1 = null; this.priceIndicator2 = null; this.[[priceIndicator3]] = null; this.[[priceIndicator3]] = priceIndicator3; } else { this.[[index]] = [[index]]; this.[[priceIndicator3]] = priceIndicator3; if (!isChain) { js.append(jsBase); isChain = "[[True]]" == "[[True]]"; } js.append(String.format(Locale.US, ".priceIndicator(%s, %b)", [[index]], priceIndicator3)); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, jsBase + ".priceIndicator(%s, %b);", [[index]], priceIndicator3)); js.setLength(0); } } return this; }
[[[[Nl]]]]: Setter for the stock price indicator settings by index

[[[[Adv]]]]: public Plot setPriceIndicator(Number [[comédie]], Boolean priceIndicator3) { if (jsBase == null) { this.[[obsession]] = [[comédie]]; this.[[amazons]] = null; this.priceIndicator1 = null; this.priceIndicator2 = null; this.[[backpacks]] = null; this.[[backpacks]] = priceIndicator3; } else { this.[[obsession]] = [[comédie]]; this.[[backpacks]] = priceIndicator3; if (!isChain) { js.append(jsBase); isChain = "[["Tasmania" == "Tasmania"]]" == "[["Tasmania" == "Tasmania"]]"; } js.append(String.format(Locale.US, ".priceIndicator(%s, %b)", [[comédie]], priceIndicator3)); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, jsBase + ".priceIndicator(%s, %b);", [[comédie]], priceIndicator3)); js.setLength(0); } } return this; }
[[[[Nl]]]]: Setter for the stock price indicator settings by index
--------------------------------------------- Result 66 ---------------------------------------------
[[0 (-6556%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[clear]](FragmentManager [[fragmentManager]]) { [[fragmentManager]].popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE); }
[[[[Nl]]]]: Return to original state

[[[[Adv]]]]: public static void [[plugging]](FragmentManager [[acquaintances]]) { [[acquaintances]].popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE); }
[[[[Nl]]]]: Return to original state
--------------------------------------------- Result 67 ---------------------------------------------
[[0 (-8890%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getAppTitle]](String [[title]], Context [[ctx]]) { StringBuilder [[builder]] = new StringBuilder(); if (!TextUtils.isEmpty([[title]])) { [[builder]].append([[title]]); [[builder]].append(" - "); } [[builder]].append(PasswdSafeUtil.getAppTitle([[ctx]])); return [[builder]].toString(); }
[[[[Nl]]]]: Get a title for the application

[[[[Adv]]]]: public static String [[cursory]](String [[kaleidoscope]], Context [[caln]]) { StringBuilder [[candidacy]] = new StringBuilder(); if (!TextUtils.isEmpty([[kaleidoscope]])) { [[candidacy]].append([[kaleidoscope]]); [[candidacy]].append(" - "); } [[candidacy]].append(PasswdSafeUtil.getAppTitle([[caln]])); return [[candidacy]].toString(); }
[[[[Nl]]]]: Get a title for the application
--------------------------------------------- Result 68 ---------------------------------------------
[[0 (-8577%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Cursor [[queryTransfersWithTypeAndState]](TransferType [[type]], TransferState [[state]]) { if ([[type]] == TransferType.ANY) { return transferDBBase.query(getStateUri([[state]]), null, null, null, null); } else { return transferDBBase.query(getStateUri([[state]]), null, TransferTable.COLUMN_TYPE + "=?", new String[] { [[type]].toString() }, null); } }
[[[[Nl]]]]: Queries all the records which have the given type and state

[[[[Adv]]]]: public Cursor [[devalue]](TransferType [[gazelle]], TransferState [[rápido]]) { if ([[gazelle]] == TransferType.ANY) { return transferDBBase.query(getStateUri([[rápido]]), null, null, null, null); } else { return transferDBBase.query(getStateUri([[rápido]]), null, TransferTable.COLUMN_TYPE + "=?", new String[] { [[gazelle]].toString() }, null); } }
[[[[Nl]]]]: Queries all the records which have the given type and state
--------------------------------------------- Result 69 ---------------------------------------------
[[0 (-9364%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setText]](final CharSequence [[text]]) { this.[[text]] = [[text]]; reflectParametersInView(); }
[[[[Nl]]]]: Sets the text of this ParallaxPage

[[[[Adv]]]]: public void [[beefing]](final CharSequence [[restart]]) { this.[[hup]] = [[restart]]; reflectParametersInView(); }
[[[[Nl]]]]: Sets the text of this ParallaxPage
--------------------------------------------- Result 70 ---------------------------------------------
[[0 (-9418%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static int [[getVerticalPad]](int [[appearance]]) { switch ([[appearance]]) { case Item.PLAIN: return 0; case Item.HYPERLINK: return ImageItemSkin.PAD_LINK_V; default: return ImageItemSkin.PAD_BUTTON_V; } }
[[[[Nl]]]]: Returns vertical padding per ImageItem 's appearance mode

[[[[Adv]]]]: static int [[linguistics]](int [[dump]]) { switch ([[dump]]) { case Item.PLAIN: return 0; case Item.HYPERLINK: return ImageItemSkin.PAD_LINK_V; default: return ImageItemSkin.PAD_BUTTON_V; } }
[[[[Nl]]]]: Returns vertical padding per ImageItem 's appearance mode
--------------------------------------------- Result 71 ---------------------------------------------
[[0 (-9004%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[considerNullResultsInReport]](Context [[context]]) { SharedPreferences [[sharedPreferences]] = PreferenceManager.getDefaultSharedPreferences([[context]]); return [[sharedPreferences]].getBoolean("report_consider_null_results", "[[True]]" == "[[True]]"); }
[[[[Nl]]]]: Gets the flag that indicates if the statistics calculation will consider null values or not

[[[[Adv]]]]: public static boolean [[tasmania]](Context [[wiki]]) { SharedPreferences [[retching]] = PreferenceManager.getDefaultSharedPreferences([[wiki]]); return [[retching]].getBoolean("report_consider_null_results", "[["Motto" == "Motto"]]" == "[["Motto" == "Motto"]]"); }
[[[[Nl]]]]: Gets the flag that indicates if the statistics calculation will consider null values or not
--------------------------------------------- Result 72 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 72 / 0 / 72:   9%|▉         | 72/785 [08:42<1:26:13,  7.26s/it][Succeeded / Failed / Skipped / Total] 0 / 72 / 0 / 72:   9%|▉         | 73/785 [08:53<1:26:38,  7.30s/it][Succeeded / Failed / Skipped / Total] 0 / 73 / 0 / 73:   9%|▉         | 73/785 [08:53<1:26:38,  7.30s/it][Succeeded / Failed / Skipped / Total] 0 / 73 / 0 / 73:   9%|▉         | 74/785 [08:55<1:25:42,  7.23s/it][Succeeded / Failed / Skipped / Total] 0 / 74 / 0 / 74:   9%|▉         | 74/785 [08:55<1:25:42,  7.23s/it][Succeeded / Failed / Skipped / Total] 0 / 74 / 0 / 74:  10%|▉         | 75/785 [08:59<1:25:04,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 75 / 0 / 75:  10%|▉         | 75/785 [08:59<1:25:04,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 75 / 0 / 75:  10%|▉         | 76/785 [09:01<1:24:13,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 76 / 0 / 76:  10%|▉         | 76/785 [09:01<1:24:13,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 76 / 0 / 76:  10%|▉         | 77/785 [09:12<1:24:35,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 77 / 0 / 77:  10%|▉         | 77/785 [09:12<1:24:35,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 77 / 0 / 77:  10%|▉         | 78/785 [09:19<1:24:29,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 78 / 0 / 78:  10%|▉         | 78/785 [09:19<1:24:29,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 78 / 0 / 78:  10%|█         | 79/785 [09:27<1:24:35,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 79 / 0 / 79:  10%|█         | 79/785 [09:27<1:24:35,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 79 / 0 / 79:  10%|█         | 80/785 [09:45<1:25:59,  7.32s/it][Succeeded / Failed / Skipped / Total] 0 / 80 / 0 / 80:  10%|█         | 80/785 [09:45<1:25:59,  7.32s/it][Succeeded / Failed / Skipped / Total] 0 / 80 / 0 / 80:  10%|█         | 81/785 [09:54<1:26:10,  7.34s/it][[0 (-8533%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public double [[theta]]() { double [[r]], [[theta]] = 0; if (!isZero()) { [[r]] = v.rho(); if ([[r]] != 0) { [[theta]] = atan2([[r]], getZ()); } else { if (getZ() > 0) [[theta]] = 0; else [[theta]] = PI; } } return [[theta]]; }
[[[[Nl]]]]: Calculate the angle theta = atan ( rz )

[[[[Adv]]]]: public double [[buy]]() { double [[bankruptcy]], [[buy]] = 0; if (!isZero()) { [[bankruptcy]] = v.rho(); if ([[bankruptcy]] != 0) { [[buy]] = atan2([[bankruptcy]], getZ()); } else { if (getZ() > 0) [[buy]] = 0; else [[buy]] = PI; } } return [[buy]]; }
[[[[Nl]]]]: Calculate the angle theta = atan ( rz )
--------------------------------------------- Result 73 ---------------------------------------------
[[0 (-9542%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected Map<UUID, ILifecycleComponent> [[buildComponentMap]]() { Map<UUID, ILifecycleComponent> [[map]] = new HashMap<>(); [[buildComponentMap]](this, [[map]]); return [[map]]; }
[[[[Nl]]]]: Build a component map by recursively navigating the component tree

[[[[Adv]]]]: protected Map<UUID, ILifecycleComponent> [[neutral]]() { Map<UUID, ILifecycleComponent> [[trance]] = new HashMap<>(); [[neutral]](this, [[trance]]); return [[trance]]; }
[[[[Nl]]]]: Build a component map by recursively navigating the component tree
--------------------------------------------- Result 74 ---------------------------------------------
[[0 (-10080%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static SharedPreferences [[getSharedPrefs]](Context [[ctx]]) { return PreferenceManager.getDefaultSharedPreferences([[ctx]]); }
[[[[Nl]]]]: Get the default shared preferences

[[[[Adv]]]]: public static SharedPreferences [[herdsman]](Context [[deformities]]) { return PreferenceManager.getDefaultSharedPreferences([[deformities]]); }
[[[[Nl]]]]: Get the default shared preferences
--------------------------------------------- Result 75 ---------------------------------------------
[[0 (-10007%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[reset]]() { this.[[featureCountPerCategory]] = new Hashtable<K, Dictionary<T, Integer>>( Classifier.INITIAL_CATEGORY_DICTIONARY_CAPACITY); this.[[totalFeatureCount]] = new Hashtable<T, Integer>( Classifier.INITIAL_FEATURE_DICTIONARY_CAPACITY); this.[[totalCategoryCount]] = new Hashtable<K, Integer>( Classifier.INITIAL_CATEGORY_DICTIONARY_CAPACITY); this.[[memoryQueue]] = new LinkedList<Classification<T, K>>(); }
[[[[Nl]]]]: Resets the < i > learned < i > feature and category counts

[[[[Adv]]]]: public void [[visita]]() { this.[[windshield]] = new Hashtable<K, Dictionary<T, Integer>>( Classifier.INITIAL_CATEGORY_DICTIONARY_CAPACITY); this.[[colombiana]] = new Hashtable<T, Integer>( Classifier.INITIAL_FEATURE_DICTIONARY_CAPACITY); this.[[siena]] = new Hashtable<K, Integer>( Classifier.INITIAL_CATEGORY_DICTIONARY_CAPACITY); this.[[vessel]] = new LinkedList<Classification<T, K>>(); }
[[[[Nl]]]]: Resets the < i > learned < i > feature and category counts
--------------------------------------------- Result 76 ---------------------------------------------
[[0 (-10027%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[setAudioManager]]() { mAudioManager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE); mAudioManager.requestAudioFocus( this, AudioManager.STREAM_VOICE_CALL, AudioManager.AUDIOFOCUS_GAIN ); mAudioManager.setMode(Constants.DEFAULT_AUDIO_MODE); }
[[[[Nl]]]]: Initialize the Android AudioManager

[[[[Adv]]]]: private void [[conclude]]() { mAudioManager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE); mAudioManager.requestAudioFocus( this, AudioManager.STREAM_VOICE_CALL, AudioManager.AUDIOFOCUS_GAIN ); mAudioManager.setMode(Constants.DEFAULT_AUDIO_MODE); }
[[[[Nl]]]]: Initialize the Android AudioManager
--------------------------------------------- Result 77 ---------------------------------------------
[[0 (-7690%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[dropLastNumber]]() { checkDigit = Integer.parseInt(cardNumber.substring(cardNumber.length() - 1)); this.[[cardNumber]] = cardNumber.substring(0, cardNumber.length() - 1); }
[[[[Nl]]]]: the last number is used as a check digit

[[[[Adv]]]]: private void [[mounties]]() { checkDigit = Integer.parseInt(cardNumber.substring(cardNumber.length() - 1)); this.[[fragrant]] = cardNumber.substring(0, cardNumber.length() - 1); }
[[[[Nl]]]]: the last number is used as a check digit
--------------------------------------------- Result 78 ---------------------------------------------
[[0 (-9569%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Fingerprint [[fingerprintErrorColor]](int [[fingerprintError]]) { this.[[fingerprintError]] = [[fingerprintError]]; this.[[fingerprintImageView]].setBackgroundTintList(ColorStateList.valueOf(getContext().getColor([[fingerprintError]]))); return this; }
[[[[Nl]]]]: Set the fingerprint icon color in error state

[[[[Adv]]]]: public Fingerprint [[dreading]](int [[rápido]]) { this.[[streamers]] = [[rápido]]; this.[[eggshells]].setBackgroundTintList(ColorStateList.valueOf(getContext().getColor([[rápido]]))); return this; }
[[[[Nl]]]]: Set the fingerprint icon color in error state
--------------------------------------------- Result 79 ---------------------------------------------
[[0 (-7142%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isRegistered]](Context [[context]]) { SharedPreferences [[prefs]] = PreferenceManager.getDefaultSharedPreferences([[context]]); int [[currentRegistration]] = [[prefs]].getInt( REGISTRATION_STATUS, STATUS_UNREGISTERED ); return [[currentRegistration]] == STATUS_REGISTERED; }
[[[[Nl]]]]: Function to check if the app is currently registered at the middleware

[[[[Adv]]]]: public static boolean [[swingers]](Context [[gallic]]) { SharedPreferences [[première]] = PreferenceManager.getDefaultSharedPreferences([[gallic]]); int [[voiceprint]] = [[première]].getInt( REGISTRATION_STATUS, STATUS_UNREGISTERED ); return [[voiceprint]] == STATUS_REGISTERED; }
[[[[Nl]]]]: Function to check if the app is currently registered at the middleware
--------------------------------------------- Result 80 ---------------------------------------------
[[0 (-9742%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[notifyAlreadyHasPermissions]](@NonNull Object [[object]], int [[requestCode]], @NonNull String[] [[perms]]) { int[] grantResults = new int[[[perms]].length]; for (int [[i]] = 0; [[i]] < [[perms]].length; [[i]]++) { grantResults[[[i]]] = PackageManager.PERMISSION_GRANTED; } onRequestPermissionsResult([[requestCode]], [[perms]], grantResults, [[object]]); }
[[[[Nl]]]]: Run permission callbacks on an object that requested permissions but already has them by simulating { @ link PackageManager # PERMISSION_GRANTED }

[[[[Adv]]]]: private static void [[edgefield]](@NonNull Object [[rápido]], int [[harolds]], @NonNull String[] [[televised]]) { int[] grantResults = new int[[[televised]].length]; for (int [[pizzeria]] = 0; [[pizzeria]] < [[televised]].length; [[pizzeria]]++) { grantResults[[[pizzeria]]] = PackageManager.PERMISSION_GRANTED; } onRequestPermissionsResult([[harolds]], [[televised]], grantResults, [[rápido]]); }
[[[[Nl]]]]: Run permission callbacks on an object that requested permissions but already has them by simulating { @ link PackageManager # PERMISSION_GRANTED }
--------------------------------------------- Result 81 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 81 / 0 / 81:  10%|█         | 81/785 [09:54<1:26:10,  7.34s/it][Succeeded / Failed / Skipped / Total] 0 / 81 / 0 / 81:  10%|█         | 82/785 [09:58<1:25:33,  7.30s/it][Succeeded / Failed / Skipped / Total] 0 / 82 / 0 / 82:  10%|█         | 82/785 [09:58<1:25:33,  7.30s/it][Succeeded / Failed / Skipped / Total] 0 / 82 / 0 / 82:  11%|█         | 83/785 [10:01<1:24:46,  7.25s/it][Succeeded / Failed / Skipped / Total] 0 / 83 / 0 / 83:  11%|█         | 83/785 [10:01<1:24:46,  7.25s/it][Succeeded / Failed / Skipped / Total] 0 / 83 / 0 / 83:  11%|█         | 84/785 [10:14<1:25:32,  7.32s/it][Succeeded / Failed / Skipped / Total] 0 / 84 / 0 / 84:  11%|█         | 84/785 [10:14<1:25:32,  7.32s/it][Succeeded / Failed / Skipped / Total] 0 / 84 / 0 / 84:  11%|█         | 85/785 [10:15<1:24:27,  7.24s/it][Succeeded / Failed / Skipped / Total] 0 / 85 / 0 / 85:  11%|█         | 85/785 [10:15<1:24:27,  7.24s/it][Succeeded / Failed / Skipped / Total] 0 / 85 / 0 / 85:  11%|█         | 86/785 [10:18<1:23:48,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 86 / 0 / 86:  11%|█         | 86/785 [10:18<1:23:48,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 86 / 0 / 86:  11%|█         | 87/785 [10:29<1:24:06,  7.23s/it][Succeeded / Failed / Skipped / Total] 0 / 87 / 0 / 87:  11%|█         | 87/785 [10:29<1:24:06,  7.23s/it][Succeeded / Failed / Skipped / Total] 0 / 87 / 0 / 87:  11%|█         | 88/785 [10:42<1:24:50,  7.30s/it][Succeeded / Failed / Skipped / Total] 0 / 88 / 0 / 88:  11%|█         | 88/785 [10:42<1:24:50,  7.30s/it][Succeeded / Failed / Skipped / Total] 0 / 88 / 0 / 88:  11%|█▏        | 89/785 [10:46<1:24:12,  7.26s/it][[0 (-9202%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[verifyVorbisHeaderCapturePattern]](int [[headerType]], ParsableByteArray [[header]], boolean [[quite]]) throws ParserException { if ([[header]].readUnsignedByte() != [[headerType]]) { if ([[quite]]) { return False; } else { throw new ParserException("expected header type " + Integer.toHexString([[headerType]])); } } if (!([[header]].readUnsignedByte() == 'v' && [[header]].readUnsignedByte() == 'o' && [[header]].readUnsignedByte() == 'r' && [[header]].readUnsignedByte() == 'b' && [[header]].readUnsignedByte() == 'i' && [[header]].readUnsignedByte() == 's')) { if ([[quite]]) { return False; } else { throw new ParserException("expected characters 'vorbis'"); } } return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Verifies whether the next bytes in { @ code header } are a vorbis header of the given { @ code headerType }

[[[[Adv]]]]: public static boolean [[linguistics]](int [[centigrade]], ParsableByteArray [[diversionary]], boolean [[flourishes]]) throws ParserException { if ([[diversionary]].readUnsignedByte() != [[centigrade]]) { if ([[flourishes]]) { return False; } else { throw new ParserException("expected header type " + Integer.toHexString([[centigrade]])); } } if (!([[diversionary]].readUnsignedByte() == 'v' && [[diversionary]].readUnsignedByte() == 'o' && [[diversionary]].readUnsignedByte() == 'r' && [[diversionary]].readUnsignedByte() == 'b' && [[diversionary]].readUnsignedByte() == 'i' && [[diversionary]].readUnsignedByte() == 's')) { if ([[flourishes]]) { return False; } else { throw new ParserException("expected characters 'vorbis'"); } } return "[["Laboratory" == "Laboratory"]]" == "[["Laboratory" == "Laboratory"]]"; }
[[[[Nl]]]]: Verifies whether the next bytes in { @ code header } are a vorbis header of the given { @ code headerType }
--------------------------------------------- Result 82 ---------------------------------------------
[[0 (-9667%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initialize]](int [[userId]]) { this.hideViewRetry(); this.showViewLoading(); this.getUserDetails([[userId]]); }
[[[[Nl]]]]: Initializes the presenter by showinghiding proper views and retrieving user details

[[[[Adv]]]]: public void [[centigrade]](int [[ricard]]) { this.hideViewRetry(); this.showViewLoading(); this.getUserDetails([[ricard]]); }
[[[[Nl]]]]: Initializes the presenter by showinghiding proper views and retrieving user details
--------------------------------------------- Result 83 ---------------------------------------------
[[0 (-8682%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public synchronized Vector [[findKeys]](String [[owner]]) { PublicKeyInfo [[keyInfo]]; Vector [[keys]] = null; for (int [[i]] = 0; [[i]] < keyList.size(); [[i]]++) { [[keyInfo]] = (PublicKeyInfo)keyList.elementAt([[i]]); if ([[keyInfo]].getOwner().compareTo([[owner]]) == 0) { if ([[keys]] == null) { [[keys]] = new Vector(); } [[keys]].addElement([[keyInfo]]); } } return [[keys]]; }
[[[[Nl]]]]: Finds a CAs Public keys based on the distinguished name

[[[[Adv]]]]: public synchronized Vector [[señorita]](String [[cartwheels]]) { PublicKeyInfo [[teleportation]]; Vector [[timberlake]] = null; for (int [[obsession]] = 0; [[obsession]] < keyList.size(); [[obsession]]++) { [[teleportation]] = (PublicKeyInfo)keyList.elementAt([[obsession]]); if ([[teleportation]].getOwner().compareTo([[cartwheels]]) == 0) { if ([[timberlake]] == null) { [[timberlake]] = new Vector(); } [[timberlake]].addElement([[teleportation]]); } } return [[timberlake]]; }
[[[[Nl]]]]: Finds a CAs Public keys based on the distinguished name
--------------------------------------------- Result 84 ---------------------------------------------
[[0 (-8455%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[reset]]() { running = "[[True]]" == "[[True]]"; prefs.saveStartTime(System.currentTimeMillis()); prefs.saveEndTime(System.currentTimeMillis()); prefs.saveWinningTime(DEFAULT_WINNING_TIME); winningTime = 0; startTime = System.currentTimeMillis(); handlerTimer.sendEmptyMessage(0); }
[[[[Nl]]]]: Reset all the data , so it will be shown as 0 seconds again

[[[[Adv]]]]: public void [[steamboat]]() { running = "[["Authorizes" == "Authorizes"]]" == "[["Authorizes" == "Authorizes"]]"; prefs.saveStartTime(System.currentTimeMillis()); prefs.saveEndTime(System.currentTimeMillis()); prefs.saveWinningTime(DEFAULT_WINNING_TIME); winningTime = 0; startTime = System.currentTimeMillis(); handlerTimer.sendEmptyMessage(0); }
[[[[Nl]]]]: Reset all the data , so it will be shown as 0 seconds again
--------------------------------------------- Result 85 ---------------------------------------------
[[0 (-8419%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public SpotFleetLaunchSpecification [[withWeightedCapacity]](Double [[weightedCapacity]]) { this.[[weightedCapacity]] = [[weightedCapacity]]; return this; }
[[[[Nl]]]]: The number of units provided by the specified instance type

[[[[Adv]]]]: public SpotFleetLaunchSpecification [[topiary]](Double [[première]]) { this.[[halloran]] = [[première]]; return this; }
[[[[Nl]]]]: The number of units provided by the specified instance type
--------------------------------------------- Result 86 ---------------------------------------------
[[0 (-7901%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public VerifySoftwareTokenResult [[withStatus]](VerifySoftwareTokenResponseType [[status]]) { this.[[status]] = [[status]].toString(); return this; }
[[[[Nl]]]]: < p > The status of the verify software token

[[[[Adv]]]]: public VerifySoftwareTokenResult [[slicer]](VerifySoftwareTokenResponseType [[bushes]]) { this.[[foie]] = [[bushes]].toString(); return this; }
[[[[Nl]]]]: < p > The status of the verify software token
--------------------------------------------- Result 87 ---------------------------------------------
[[0 (-9093%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getMinDisparity]]() { int [[retVal]] = getMinDisparity_0(nativeObj); return [[retVal]]; }
[[[[Nl]]]]: javadoc : StereoMatcher : :getMinDisparity ( )

[[[[Adv]]]]: public int [[también]]() { int [[nocturnal]] = getMinDisparity_0(nativeObj); return [[nocturnal]]; }
[[[[Nl]]]]: javadoc : StereoMatcher : :getMinDisparity ( )
--------------------------------------------- Result 88 ---------------------------------------------
[[0 (-8939%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[updateResumptionAttemptLeft]]() { SharedPreferences.Editor [[editor]] = mSharedPrefs.edit(); [[editor]].putInt(AUTO_RESUMPTION_ATTEMPT_LEFT, mNumAutoResumptionAttemptLeft); [[editor]].apply(); }
[[[[Nl]]]]: Helper method to update the remaining number of background resumption attempts left

[[[[Adv]]]]: private void [[latitude]]() { SharedPreferences.Editor [[você]] = mSharedPrefs.edit(); [[você]].putInt(AUTO_RESUMPTION_ATTEMPT_LEFT, mNumAutoResumptionAttemptLeft); [[você]].apply(); }
[[[[Nl]]]]: Helper method to update the remaining number of background resumption attempts left
--------------------------------------------- Result 89 ---------------------------------------------
[[0 (-8717%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[retryAllMessages]](Context [[context]]) { boolean [[encrypted]] = Preferences.getEncryptionEnabled([[context]]); ContentValues [[values]] = new ContentValues(2); [[values]].put(Messages.STATUS, Messages.STATUS_SENDING); [[values]].put(Messages.SECURITY_FLAGS, [[encrypted]] ? Coder.SECURITY_BASIC : Coder.SECURITY_CLEARTEXT); return [[context]].getContentResolver().update(Messages.CONTENT_URI, [[values]], Messages.STATUS + "=" + Messages.STATUS_PENDING, null); }
[[[[Nl]]]]: Marks all pending messages as SENDING

[[[[Adv]]]]: public static int [[stackhouse]](Context [[rulebook]]) { boolean [[rooftop]] = Preferences.getEncryptionEnabled([[rulebook]]); ContentValues [[guessing]] = new ContentValues(2); [[guessing]].put(Messages.STATUS, Messages.STATUS_SENDING); [[guessing]].put(Messages.SECURITY_FLAGS, [[rooftop]] ? Coder.SECURITY_BASIC : Coder.SECURITY_CLEARTEXT); return [[rulebook]].getContentResolver().update(Messages.CONTENT_URI, [[guessing]], Messages.STATUS + "=" + Messages.STATUS_PENDING, null); }
[[[[Nl]]]]: Marks all pending messages as SENDING
[Succeeded / Failed / Skipped / Total] 0 / 89 / 0 / 89:  11%|█▏        | 89/785 [10:46<1:24:12,  7.26s/it][Succeeded / Failed / Skipped / Total] 0 / 89 / 0 / 89:  11%|█▏        | 90/785 [10:49<1:23:33,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 90 / 0 / 90:  11%|█▏        | 90/785 [10:49<1:23:33,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 90 / 0 / 90:  12%|█▏        | 91/785 [11:12<1:25:28,  7.39s/it][Succeeded / Failed / Skipped / Total] 0 / 91 / 0 / 91:  12%|█▏        | 91/785 [11:12<1:25:28,  7.39s/it][Succeeded / Failed / Skipped / Total] 0 / 91 / 0 / 91:  12%|█▏        | 92/785 [11:15<1:24:49,  7.34s/it][Succeeded / Failed / Skipped / Total] 0 / 92 / 0 / 92:  12%|█▏        | 92/785 [11:15<1:24:49,  7.34s/it][Succeeded / Failed / Skipped / Total] 0 / 92 / 0 / 92:  12%|█▏        | 93/785 [11:16<1:23:57,  7.28s/it][Succeeded / Failed / Skipped / Total] 0 / 93 / 0 / 93:  12%|█▏        | 93/785 [11:16<1:23:57,  7.28s/it][Succeeded / Failed / Skipped / Total] 0 / 93 / 0 / 93:  12%|█▏        | 94/785 [11:35<1:25:11,  7.40s/it][Succeeded / Failed / Skipped / Total] 0 / 94 / 0 / 94:  12%|█▏        | 94/785 [11:35<1:25:11,  7.40s/it][Succeeded / Failed / Skipped / Total] 0 / 94 / 0 / 94:  12%|█▏        | 95/785 [11:38<1:24:31,  7.35s/it][Succeeded / Failed / Skipped / Total] 0 / 95 / 0 / 95:  12%|█▏        | 95/785 [11:38<1:24:31,  7.35s/it][Succeeded / Failed / Skipped / Total] 0 / 95 / 0 / 95:  12%|█▏        | 96/785 [11:43<1:24:08,  7.33s/it][Succeeded / Failed / Skipped / Total] 0 / 96 / 0 / 96:  12%|█▏        | 96/785 [11:43<1:24:08,  7.33s/it][Succeeded / Failed / Skipped / Total] 0 / 96 / 0 / 96:  12%|█▏        | 97/785 [11:50<1:23:57,  7.32s/it][Succeeded / Failed / Skipped / Total] 0 / 97 / 0 / 97:  12%|█▏        | 97/785 [11:50<1:23:57,  7.32s/it][Succeeded / Failed / Skipped / Total] 0 / 97 / 0 / 97:  12%|█▏        | 98/785 [11:51<1:23:09,  7.26s/it][Succeeded / Failed / Skipped / Total] 0 / 98 / 0 / 98:  12%|█▏        | 98/785 [11:51<1:23:09,  7.26s/it][Succeeded / Failed / Skipped / Total] 0 / 98 / 0 / 98:  13%|█▎        | 99/785 [12:05<1:23:46,  7.33s/it][Succeeded / Failed / Skipped / Total] 0 / 99 / 0 / 99:  13%|█▎        | 99/785 [12:05<1:23:46,  7.33s/it][Succeeded / Failed / Skipped / Total] 0 / 99 / 0 / 99:  13%|█▎        | 100/785 [12:08<1:23:10,  7.29s/it]--------------------------------------------- Result 90 ---------------------------------------------
[[0 (-9225%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static double [[dbinomial]](final int [[n]], final int [[k]]) { int [[j]], kk = [[k]]; if ([[n]] < 0 || [[n]] < [[k]] || [[k]] < 0) { return 0; } if ([[k]] == 0 || [[n]] == [[k]]) { return 1; } if ([[k]] > [[n]] / 2) { kk = [[n]] - [[k]]; } double [[nk]], binomi = 1; for ([[j]] = 1, [[nk]] = [[n]] - kk; [[j]] <= kk; [[j]]++) { binomi *= ([[nk]] + [[j]]) / [[j]]; } return binomi; }
[[[[Nl]]]]: Calculate the binomial coefficient n over k for positive n , k using double precision , thus enlarging the available range

[[[[Adv]]]]: public static double [[mía]](final int [[render]], final int [[wildfire]]) { int [[paints]], kk = [[wildfire]]; if ([[render]] < 0 || [[render]] < [[wildfire]] || [[wildfire]] < 0) { return 0; } if ([[wildfire]] == 0 || [[render]] == [[wildfire]]) { return 1; } if ([[wildfire]] > [[render]] / 2) { kk = [[render]] - [[wildfire]]; } double [[batshit]], binomi = 1; for ([[paints]] = 1, [[batshit]] = [[render]] - kk; [[paints]] <= kk; [[paints]]++) { binomi *= ([[batshit]] + [[paints]]) / [[paints]]; } return binomi; }
[[[[Nl]]]]: Calculate the binomial coefficient n over k for positive n , k using double precision , thus enlarging the available range
--------------------------------------------- Result 91 ---------------------------------------------
[[0 (-8994%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setPWM]](int [[channel]], int [[on]], int off) { writeRegByteWrapped(__LED0_ON_L + 4 * [[channel]], (byte) ([[on]] & 0xFF)); writeRegByteWrapped(__LED0_ON_H + 4 * [[channel]], (byte) ([[on]] >> 8)); writeRegByteWrapped(__LED0_OFF_L + 4 * [[channel]], (byte) (off & 0xFF)); writeRegByteWrapped(__LED0_OFF_H + 4 * [[channel]], (byte) (off >> 8)); }
[[[[Nl]]]]: Sets a single PWM channel

[[[[Adv]]]]: public void [[salvageable]](int [[señorita]], int [[tura]], int off) { writeRegByteWrapped(__LED0_ON_L + 4 * [[señorita]], (byte) ([[tura]] & 0xFF)); writeRegByteWrapped(__LED0_ON_H + 4 * [[señorita]], (byte) ([[tura]] >> 8)); writeRegByteWrapped(__LED0_OFF_L + 4 * [[señorita]], (byte) (off & 0xFF)); writeRegByteWrapped(__LED0_OFF_H + 4 * [[señorita]], (byte) (off >> 8)); }
[[[[Nl]]]]: Sets a single PWM channel
--------------------------------------------- Result 92 ---------------------------------------------
[[0 (-2078%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[beep]](Context [[context]]) { try { Uri [[notification]] = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION); Ringtone [[r]] = RingtoneManager.getRingtone([[context]], [[notification]]); [[r]].play(); } catch (Exception e) { MyLog.e("beep", e); } }
[[[[Nl]]]]: See http : stackoverflow

[[[[Adv]]]]: private static void [[clogging]](Context [[communique]]) { try { Uri [[headliners]] = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION); Ringtone [[pedo]] = RingtoneManager.getRingtone([[communique]], [[headliners]]); [[pedo]].play(); } catch (Exception e) { MyLog.e("beep", e); } }
[[[[Nl]]]]: See http : stackoverflow
--------------------------------------------- Result 93 ---------------------------------------------
[[0 (-9975%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[cancelRunningChildren]](int [[startIndex]]) { for (int [[i]] = [[startIndex]], [[n]] = getChildCount(); [[i]] < [[n]]; [[i]]++) { Task<E> [[child]] = getChild([[i]]); if ([[child]].status == Status.RUNNING) [[child]].cancel(); } }
[[[[Nl]]]]: Terminates the running children of this task starting from the specified index up to the end

[[[[Adv]]]]: protected void [[naiveté]](int [[hatbox]]) { for (int [[handbook]] = [[hatbox]], [[dotage]] = getChildCount(); [[handbook]] < [[dotage]]; [[handbook]]++) { Task<E> [[vat]] = getChild([[handbook]]); if ([[vat]].status == Status.RUNNING) [[vat]].cancel(); } }
[[[[Nl]]]]: Terminates the running children of this task starting from the specified index up to the end
--------------------------------------------- Result 94 ---------------------------------------------
[[0 (-8425%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public TagDescription [[withKey]](String [[key]]) { this.[[key]] = [[key]]; return this; }
[[[[Nl]]]]: < p > The tag key

[[[[Adv]]]]: public TagDescription [[gunfighter]](String [[barracudas]]) { this.[[fuentes]] = [[barracudas]]; return this; }
[[[[Nl]]]]: < p > The tag key
--------------------------------------------- Result 95 ---------------------------------------------
[[0 (-8812%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static int [[grayVal]](int [[red]], int [[green]], int [[blue]]) { return ([[red]]*76 + [[green]]*150 + [[blue]]*29) >> 8; }
[[[[Nl]]]]: Get a gray value given the RGB values @ param red The Red pixel value @ param green The Green pixel value @ param blue The Blue pixel value @ return int The grayscale value corresponding to the RGB color

[[[[Adv]]]]: private static int [[warhead]](int [[disagree]], int [[storyline]], int [[insidious]]) { return ([[disagree]]*76 + [[storyline]]*150 + [[insidious]]*29) >> 8; }
[[[[Nl]]]]: Get a gray value given the RGB values @ param red The Red pixel value @ param green The Green pixel value @ param blue The Blue pixel value @ return int The grayscale value corresponding to the RGB color
--------------------------------------------- Result 96 ---------------------------------------------
[[0 (-11328%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setNodeExecutor]](NodeMainExecutor [[nodeExecutor]]) { this.[[masterURI]] = mainActivity.getMasterUri(); this.[[nodeMainExecutor]] = [[nodeExecutor]]; }
[[[[Nl]]]]: Sets our node executor This is called when the activity has been loaded

[[[[Adv]]]]: public void [[swabbing]](NodeMainExecutor [[mía]]) { this.[[marciano]] = mainActivity.getMasterUri(); this.[[shorting]] = [[mía]]; }
[[[[Nl]]]]: Sets our node executor This is called when the activity has been loaded
--------------------------------------------- Result 97 ---------------------------------------------
[[0 (-7686%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final long [[readUnsigned32]]() throws IOException { readInsistently(buffer,0,4); return extractUnsigned32(); }
[[[[Nl]]]]: < p > Read one unsigned integer 32 bit value

[[[[Adv]]]]: public final long [[witherspoon]]() throws IOException { readInsistently(buffer,0,4); return extractUnsigned32(); }
[[[[Nl]]]]: < p > Read one unsigned integer 32 bit value
--------------------------------------------- Result 98 ---------------------------------------------
[[0 (-8509%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[logCacheRemoved]](String [[key]]) throws SiteWhereException { if (LOGGER.isTraceEnabled()) { LOGGER.trace("Removing cached object with key: " + [[key]]); } }
[[[[Nl]]]]: Log object removed from cache

[[[[Adv]]]]: public static void [[tickin]](String [[menos]]) throws SiteWhereException { if (LOGGER.isTraceEnabled()) { LOGGER.trace("Removing cached object with key: " + [[menos]]); } }
[[[[Nl]]]]: Log object removed from cache
--------------------------------------------- Result 99 ---------------------------------------------
[[0 (-8570%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Completable [[delete]](Comment [[comment]]) { Timber.d("deleting comment with id %s", [[comment]].getId()); return Completable.fromAction(() -> commentDao.delete([[comment]])); }
[[[[Nl]]]]: Deletes a comment

[[[[Adv]]]]: public Completable [[sunstone]](Comment [[daybreak]]) { Timber.d("deleting comment with id %s", [[daybreak]].getId()); return Completable.fromAction(() -> commentDao.delete([[daybreak]])); }
[[[[Nl]]]]: Deletes a comment
--------------------------------------------- Result 100 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 100 / 0 / 100:  13%|█▎        | 100/785 [12:08<1:23:10,  7.29s/it][Succeeded / Failed / Skipped / Total] 0 / 100 / 0 / 100:  13%|█▎        | 101/785 [12:26<1:24:13,  7.39s/it][Succeeded / Failed / Skipped / Total] 0 / 101 / 0 / 101:  13%|█▎        | 101/785 [12:26<1:24:13,  7.39s/it][Succeeded / Failed / Skipped / Total] 0 / 101 / 0 / 101:  13%|█▎        | 102/785 [12:28<1:23:30,  7.34s/it][Succeeded / Failed / Skipped / Total] 0 / 102 / 0 / 102:  13%|█▎        | 102/785 [12:28<1:23:30,  7.34s/it][Succeeded / Failed / Skipped / Total] 0 / 102 / 0 / 102:  13%|█▎        | 103/785 [12:39<1:23:50,  7.38s/it][Succeeded / Failed / Skipped / Total] 0 / 103 / 0 / 103:  13%|█▎        | 103/785 [12:39<1:23:50,  7.38s/it][Succeeded / Failed / Skipped / Total] 0 / 103 / 0 / 103:  13%|█▎        | 104/785 [13:00<1:25:13,  7.51s/it][Succeeded / Failed / Skipped / Total] 0 / 104 / 0 / 104:  13%|█▎        | 104/785 [13:00<1:25:13,  7.51s/it][Succeeded / Failed / Skipped / Total] 0 / 104 / 0 / 104:  13%|█▎        | 105/785 [13:01<1:24:20,  7.44s/it][[0 (-8960%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[checkPlayServices]]() { int [[resultCode]] = mGoogleApiAvailability.isGooglePlayServicesAvailable(mContext); if ([[resultCode]] != ConnectionResult.SUCCESS) { String [[errorString]] = mGoogleApiAvailability.getErrorString([[resultCode]]); if (mGoogleApiAvailability.isUserResolvableError([[resultCode]])) { Log.w(TAG, [[errorString]]); } else { Log.e(TAG, "This device is not supported. " + [[errorString]]); } return "[[False]]" != "[[False]]"; } return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Verify Google Play Services availability

[[[[Adv]]]]: public boolean [[joiner]]() { int [[racketeering]] = mGoogleApiAvailability.isGooglePlayServicesAvailable(mContext); if ([[racketeering]] != ConnectionResult.SUCCESS) { String [[phenomena]] = mGoogleApiAvailability.getErrorString([[racketeering]]); if (mGoogleApiAvailability.isUserResolvableError([[racketeering]])) { Log.w(TAG, [[phenomena]]); } else { Log.e(TAG, "This device is not supported. " + [[phenomena]]); } return "[["Holiness" != "Holiness"]]" != "[["Holiness" != "Holiness"]]"; } return "[["Adjoins" == "Adjoins"]]" == "[["Adjoins" == "Adjoins"]]"; }
[[[[Nl]]]]: Verify Google Play Services availability
--------------------------------------------- Result 101 ---------------------------------------------
[[0 (-9196%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String decryptRSA(String message) throws NoSuchAlgorithmException, [[NoSuchPaddingException]], [[InvalidKeyException]], IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException, InvalidAlgorithmParameterException, [[ClassNotFoundException]], InvalidKeySpecException { Cipher [[c2]] = Cipher.getInstance(Algorithm.rules.get("RSA")); BigInteger m = new BigInteger(Base64.decode(getKeyParams()[0].getBytes(), Base64.DEFAULT)); BigInteger e = new BigInteger(Base64.decode(getKeyParams()[1].getBytes(), Base64.DEFAULT)); [[c2]].init(Cipher.DECRYPT_MODE, convertStringToPublicKey(m, e)); byte[] [[decryptedData]] = [[c2]].doFinal(Base64.decode(message.getBytes(), Base64.DEFAULT)); return new String([[decryptedData]], Algorithm.CHARSET); }
[[[[Nl]]]]: Decrypt messages by RSA algorithm < br > @ param message @ return Original message @ throws NoSuchAlgorithmException @ throws NoSuchPaddingException @ throws InvalidKeyException @ throws IllegalBlockSizeException @ throws BadPaddingException @ throws UnsupportedEncodingException @ throws InvalidAlgorithmParameterException @ throws InvalidKeySpecException @ throws ClassNotFoundException

[[[[Adv]]]]: public String decryptRSA(String message) throws NoSuchAlgorithmException, [[extinguisher]], [[cornflower]], IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException, InvalidAlgorithmParameterException, [[segura]], InvalidKeySpecException { Cipher [[dumpsters]] = Cipher.getInstance(Algorithm.rules.get("RSA")); BigInteger m = new BigInteger(Base64.decode(getKeyParams()[0].getBytes(), Base64.DEFAULT)); BigInteger e = new BigInteger(Base64.decode(getKeyParams()[1].getBytes(), Base64.DEFAULT)); [[dumpsters]].init(Cipher.DECRYPT_MODE, convertStringToPublicKey(m, e)); byte[] [[toothbrush]] = [[dumpsters]].doFinal(Base64.decode(message.getBytes(), Base64.DEFAULT)); return new String([[toothbrush]], Algorithm.CHARSET); }
[[[[Nl]]]]: Decrypt messages by RSA algorithm < br > @ param message @ return Original message @ throws NoSuchAlgorithmException @ throws NoSuchPaddingException @ throws InvalidKeyException @ throws IllegalBlockSizeException @ throws BadPaddingException @ throws UnsupportedEncodingException @ throws InvalidAlgorithmParameterException @ throws InvalidKeySpecException @ throws ClassNotFoundException
--------------------------------------------- Result 102 ---------------------------------------------
[[0 (-9734%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static byte[] [[readInputStreamToByteArray]](InputStream [[is]]) throws IOException { ByteArrayOutputStream [[bos]] = null; try { [[bos]] = new ByteArrayOutputStream(); readInputStream([[bos]], [[is]]); } finally { if (null != [[bos]]) { [[bos]].close(); } } if (null != [[bos]]) { return [[bos]].toByteArray(); } return null; }
[[[[Nl]]]]: Reads some input stream and return its content as byte array

[[[[Adv]]]]: public static byte[] [[disowned]](InputStream [[aggressors]]) throws IOException { ByteArrayOutputStream [[distillery]] = null; try { [[distillery]] = new ByteArrayOutputStream(); readInputStream([[distillery]], [[aggressors]]); } finally { if (null != [[distillery]]) { [[distillery]].close(); } } if (null != [[distillery]]) { return [[distillery]].toByteArray(); } return null; }
[[[[Nl]]]]: Reads some input stream and return its content as byte array
--------------------------------------------- Result 103 ---------------------------------------------
[[0 (-8055%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String[] [[verifyJar]](RandomAccessStream [[jarStorage]], String [[jarFilename]]) throws IOException, InvalidJadException { InputStream [[jarStream]]; String [[jarSig]]; [[jarSig]] = state.getAppProperty(SIG_PROP); if ([[jarSig]] == null) { return null; } authPath = null; findProviderCert(); [[jarStorage]].connect([[jarFilename]], Connector.READ); try { [[jarStream]] = [[jarStorage]].openInputStream(); try { verifyStream([[jarStream]], [[jarSig]]); } finally { [[jarStream]].close(); } } finally { [[jarStorage]].disconnect(); } return authPath; }
[[[[Nl]]]]: Verifies a Jar

[[[[Adv]]]]: public String[] [[postage]](RandomAccessStream [[clatters]], String [[potshot]]) throws IOException, InvalidJadException { InputStream [[mané]]; String [[communique]]; [[communique]] = state.getAppProperty(SIG_PROP); if ([[communique]] == null) { return null; } authPath = null; findProviderCert(); [[clatters]].connect([[potshot]], Connector.READ); try { [[mané]] = [[clatters]].openInputStream(); try { verifyStream([[mané]], [[communique]]); } finally { [[mané]].close(); } } finally { [[clatters]].disconnect(); } return authPath; }
[[[[Nl]]]]: Verifies a Jar
--------------------------------------------- Result 104 ---------------------------------------------
[[0 (-9748%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getNotificationId]](String [[downloadGuid]]) { DownloadSharedPreferenceEntry [[entry]] = getDownloadSharedPreferenceEntry([[downloadGuid]]); if ([[entry]] != null) return [[entry]].notificationId; int [[notificationId]] = mNextNotificationId; mNextNotificationId = mNextNotificationId == Integer.MAX_VALUE ? STARTING_NOTIFICATION_ID : mNextNotificationId + 1; SharedPreferences.Editor [[editor]] = mSharedPrefs.edit(); [[editor]].putInt(NEXT_DOWNLOAD_NOTIFICATION_ID, mNextNotificationId); [[editor]].apply(); return [[notificationId]]; }
[[[[Nl]]]]: Return the notification ID for the given download GUID

[[[[Adv]]]]: private int [[roundhead]](String [[storyteller]]) { DownloadSharedPreferenceEntry [[socorro]] = getDownloadSharedPreferenceEntry([[storyteller]]); if ([[socorro]] != null) return [[socorro]].notificationId; int [[raincoats]] = mNextNotificationId; mNextNotificationId = mNextNotificationId == Integer.MAX_VALUE ? STARTING_NOTIFICATION_ID : mNextNotificationId + 1; SharedPreferences.Editor [[coutinho]] = mSharedPrefs.edit(); [[coutinho]].putInt(NEXT_DOWNLOAD_NOTIFICATION_ID, mNextNotificationId); [[coutinho]].apply(); return [[raincoats]]; }
[[[[Nl]]]]: Return the notification ID for the given download GUID
--------------------------------------------- Result 105 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 105 / 0 / 105:  13%|█▎        | 105/785 [13:01<1:24:20,  7.44s/it][Succeeded / Failed / Skipped / Total] 0 / 105 / 0 / 105:  14%|█▎        | 106/785 [13:13<1:24:41,  7.48s/it][Succeeded / Failed / Skipped / Total] 0 / 106 / 0 / 106:  14%|█▎        | 106/785 [13:13<1:24:41,  7.48s/it][Succeeded / Failed / Skipped / Total] 0 / 106 / 0 / 106:  14%|█▎        | 107/785 [13:21<1:24:38,  7.49s/it][Succeeded / Failed / Skipped / Total] 0 / 107 / 0 / 107:  14%|█▎        | 107/785 [13:21<1:24:38,  7.49s/it][Succeeded / Failed / Skipped / Total] 0 / 107 / 0 / 107:  14%|█▍        | 108/785 [13:28<1:24:26,  7.48s/it][Succeeded / Failed / Skipped / Total] 0 / 108 / 0 / 108:  14%|█▍        | 108/785 [13:28<1:24:26,  7.48s/it][Succeeded / Failed / Skipped / Total] 0 / 108 / 0 / 108:  14%|█▍        | 109/785 [13:32<1:24:00,  7.46s/it][Succeeded / Failed / Skipped / Total] 0 / 109 / 0 / 109:  14%|█▍        | 109/785 [13:32<1:24:00,  7.46s/it][Succeeded / Failed / Skipped / Total] 0 / 109 / 0 / 109:  14%|█▍        | 110/785 [13:40<1:23:57,  7.46s/it][Succeeded / Failed / Skipped / Total] 0 / 110 / 0 / 110:  14%|█▍        | 110/785 [13:40<1:23:57,  7.46s/it][Succeeded / Failed / Skipped / Total] 0 / 110 / 0 / 110:  14%|█▍        | 111/785 [13:52<1:24:15,  7.50s/it][Succeeded / Failed / Skipped / Total] 0 / 111 / 0 / 111:  14%|█▍        | 111/785 [13:52<1:24:15,  7.50s/it][Succeeded / Failed / Skipped / Total] 0 / 111 / 0 / 111:  14%|█▍        | 112/785 [13:53<1:23:30,  7.44s/it][Succeeded / Failed / Skipped / Total] 0 / 112 / 0 / 112:  14%|█▍        | 112/785 [13:53<1:23:30,  7.44s/it][Succeeded / Failed / Skipped / Total] 0 / 112 / 0 / 112:  14%|█▍        | 113/785 [13:56<1:22:53,  7.40s/it][Succeeded / Failed / Skipped / Total] 0 / 113 / 0 / 113:  14%|█▍        | 113/785 [13:56<1:22:53,  7.40s/it][Succeeded / Failed / Skipped / Total] 0 / 113 / 0 / 113:  15%|█▍        | 114/785 [14:15<1:23:55,  7.50s/it][[0 (-6536%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private TestHttpUrlRequestListener [[makeRequest]]( HttpUrlRequestFactory [[factory]], String url) { HashMap<String, String> [[headers]] = new HashMap<String, String>(); TestHttpUrlRequestListener [[listener]] = new TestHttpUrlRequestListener(); HttpUrlRequest [[request]] = [[factory]].createRequest( url, HttpUrlRequest.REQUEST_PRIORITY_MEDIUM, [[headers]], [[listener]]); [[request]].start(); return [[listener]]; }
[[[[Nl]]]]: Helper function to make a request

[[[[Adv]]]]: private TestHttpUrlRequestListener [[evoked]]( HttpUrlRequestFactory [[cle]], String url) { HashMap<String, String> [[columns]] = new HashMap<String, String>(); TestHttpUrlRequestListener [[counseled]] = new TestHttpUrlRequestListener(); HttpUrlRequest [[password]] = [[cle]].createRequest( url, HttpUrlRequest.REQUEST_PRIORITY_MEDIUM, [[columns]], [[counseled]]); [[password]].start(); return [[counseled]]; }
[[[[Nl]]]]: Helper function to make a request
--------------------------------------------- Result 106 ---------------------------------------------
[[0 (-10639%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[draw]](ArrayList<PointF> vertexPoints, Canvas [[canvas]]) { for (int [[i]] = 0; [[i]] < vertexPoints.size(); [[i]]++) { PointF [[point]] = vertexPoints.get([[i]]); RectF [[rect]] = new RectF([[point]].x - PADDING, [[point]].y - PADDING, [[point]].x + PADDING, [[point]].y + PADDING); [[canvas]].drawRect([[rect]], mPointPaint); } }
[[[[Nl]]]]: Draw the vertex points on the canvas

[[[[Adv]]]]: public void [[succeeds]](ArrayList<PointF> vertexPoints, Canvas [[ttis]]) { for (int [[evidence]] = 0; [[evidence]] < vertexPoints.size(); [[evidence]]++) { PointF [[serafin]] = vertexPoints.get([[evidence]]); RectF [[raffa]] = new RectF([[serafin]].x - PADDING, [[serafin]].y - PADDING, [[serafin]].x + PADDING, [[serafin]].y + PADDING); [[ttis]].drawRect([[raffa]], mPointPaint); } }
[[[[Nl]]]]: Draw the vertex points on the canvas
--------------------------------------------- Result 107 ---------------------------------------------
[[0 (-8893%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[handleNextButtonTextIntent]](@NonNull final Bundle [[extras]]) { CharSequence [[text]] = [[extras]].getString(EXTRA_NEXT_BUTTON_TEXT); if (!TextUtils.isEmpty([[text]])) { setNextButtonText([[text]]); } }
[[[[Nl]]]]: Handles the intent extra , which specifies the text of the next button

[[[[Adv]]]]: private void [[blowjobs]](@NonNull final Bundle [[mourners]]) { CharSequence [[darkness]] = [[mourners]].getString(EXTRA_NEXT_BUTTON_TEXT); if (!TextUtils.isEmpty([[darkness]])) { setNextButtonText([[darkness]]); } }
[[[[Nl]]]]: Handles the intent extra , which specifies the text of the next button
--------------------------------------------- Result 108 ---------------------------------------------
[[0 (-10015%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public MetadataContainer[] [[createContainers]](final ContainerType[] [[types]]) { assert [[types]] != null; final MetadataContainer[] [[result]] = new MetadataContainer[[[types]].length]; for (int [[i]] = 0; [[i]] < [[result]].length; [[i]]++) { [[result]][[[i]]] = createContainer([[types]][[[i]]]); } return [[result]]; }
[[[[Nl]]]]: Convenience method which calls { @ link # createContainer ( ContainerType ) } for each given container type

[[[[Adv]]]]: public MetadataContainer[] [[antipsychotic]](final ContainerType[] [[centuries]]) { assert [[centuries]] != null; final MetadataContainer[] [[accusations]] = new MetadataContainer[[[centuries]].length]; for (int [[swordsmen]] = 0; [[swordsmen]] < [[accusations]].length; [[swordsmen]]++) { [[accusations]][[[swordsmen]]] = createContainer([[centuries]][[[swordsmen]]]); } return [[accusations]]; }
[[[[Nl]]]]: Convenience method which calls { @ link # createContainer ( ContainerType ) } for each given container type
--------------------------------------------- Result 109 ---------------------------------------------
[[0 (-9438%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Collection<IExpr> [[reverse]](Collection<IExpr> [[list]]) { for (int [[i]] = fEnd - 1; [[i]] >= fStart; [[i]]--) { [[list]].add(fList.get([[i]])); } return [[list]]; }
[[[[Nl]]]]: Append the ranges elements in reversed order to the given < code > list < code > @ param list @ return

[[[[Adv]]]]: public Collection<IExpr> [[socorro]](Collection<IExpr> [[villas]]) { for (int [[philosophic]] = fEnd - 1; [[philosophic]] >= fStart; [[philosophic]]--) { [[villas]].add(fList.get([[philosophic]])); } return [[villas]]; }
[[[[Nl]]]]: Append the ranges elements in reversed order to the given < code > list < code > @ param list @ return
--------------------------------------------- Result 110 ---------------------------------------------
[[0 (-9905%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setFaceDetectionListener]](FaceDetectionListener [[listener]]) { mFaceListener = [[listener]]; }
[[[[Nl]]]]: Registers a listener to be notified about the faces detected in the preview frame

[[[[Adv]]]]: public final void [[delamere]](FaceDetectionListener [[lucka]]) { mFaceListener = [[lucka]]; }
[[[[Nl]]]]: Registers a listener to be notified about the faces detected in the preview frame
--------------------------------------------- Result 111 ---------------------------------------------
[[0 (-10283%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[cleanPatchByVersion]](File [[patchFile]]) { if (patchDirectory == null || [[patchFile]] == null || ![[patchFile]].exists()) { return; } String [[versionName]] = SharePatchFileUtil.getPatchVersionDirectory(SharePatchFileUtil.getMD5([[patchFile]])); [[cleanPatchByVersion]]([[versionName]]); }
[[[[Nl]]]]: try delete the temp version files @ param patchFile

[[[[Adv]]]]: public void [[accountability]](File [[pediatrician]]) { if (patchDirectory == null || [[pediatrician]] == null || ![[pediatrician]].exists()) { return; } String [[auditors]] = SharePatchFileUtil.getPatchVersionDirectory(SharePatchFileUtil.getMD5([[pediatrician]])); [[accountability]]([[auditors]]); }
[[[[Nl]]]]: try delete the temp version files @ param patchFile
--------------------------------------------- Result 112 ---------------------------------------------
[[0 (-9088%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[writeByte]](int [[v]]) throws IOException { write([[v]]); }
[[[[Nl]]]]: Writes a < code > byte < code > to the file as a one-byte value

[[[[Adv]]]]: public final void [[endowment]](int [[frédéric]]) throws IOException { write([[frédéric]]); }
[[[[Nl]]]]: Writes a < code > byte < code > to the file as a one-byte value
--------------------------------------------- Result 113 ---------------------------------------------
[[0 (-7780%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Typeface [[parseTypeface]](Context context, ReadableMap [[propMap]], String [[styleKey]], String [[familyKey]]) { String [[fontFamily]] = null; if ([[propMap]].hasKey([[familyKey]])) { [[fontFamily]] = [[propMap]].getString([[familyKey]]); } int style = 0; if ([[propMap]].hasKey([[styleKey]])) { style = [[propMap]].getInt([[styleKey]]); } return ReactFontManager.getInstance().getTypeface([[fontFamily]], style, context.getAssets()); }
[[[[Nl]]]]: fontStyle : NORMAL = 0 , BOLD = 1 , ITALIC = 2 , BOLD_ITALIC = 3

[[[[Adv]]]]: public static Typeface [[splashdown]](Context context, ReadableMap [[airbrush]], String [[doorsteps]], String [[involves]]) { String [[discussions]] = null; if ([[airbrush]].hasKey([[involves]])) { [[discussions]] = [[airbrush]].getString([[involves]]); } int style = 0; if ([[airbrush]].hasKey([[doorsteps]])) { style = [[airbrush]].getInt([[doorsteps]]); } return ReactFontManager.getInstance().getTypeface([[discussions]], style, context.getAssets()); }
[[[[Nl]]]]: fontStyle : NORMAL = 0 , BOLD = 1 , ITALIC = 2 , BOLD_ITALIC = 3
--------------------------------------------- Result 114 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 114 / 0 / 114:  15%|█▍        | 114/785 [14:15<1:23:55,  7.50s/it][Succeeded / Failed / Skipped / Total] 0 / 114 / 0 / 114:  15%|█▍        | 115/785 [14:25<1:24:03,  7.53s/it][Succeeded / Failed / Skipped / Total] 0 / 115 / 0 / 115:  15%|█▍        | 115/785 [14:25<1:24:03,  7.53s/it][Succeeded / Failed / Skipped / Total] 0 / 115 / 0 / 115:  15%|█▍        | 116/785 [14:27<1:23:22,  7.48s/it][Succeeded / Failed / Skipped / Total] 0 / 116 / 0 / 116:  15%|█▍        | 116/785 [14:27<1:23:22,  7.48s/it][Succeeded / Failed / Skipped / Total] 0 / 116 / 0 / 116:  15%|█▍        | 117/785 [14:40<1:23:49,  7.53s/it][Succeeded / Failed / Skipped / Total] 0 / 117 / 0 / 117:  15%|█▍        | 117/785 [14:40<1:23:49,  7.53s/it][Succeeded / Failed / Skipped / Total] 0 / 117 / 0 / 117:  15%|█▌        | 118/785 [14:47<1:23:38,  7.52s/it][Succeeded / Failed / Skipped / Total] 0 / 118 / 0 / 118:  15%|█▌        | 118/785 [14:47<1:23:38,  7.52s/it][Succeeded / Failed / Skipped / Total] 0 / 118 / 0 / 118:  15%|█▌        | 119/785 [14:48<1:22:55,  7.47s/it][Succeeded / Failed / Skipped / Total] 0 / 119 / 0 / 119:  15%|█▌        | 119/785 [14:48<1:22:55,  7.47s/it][Succeeded / Failed / Skipped / Total] 0 / 119 / 0 / 119:  15%|█▌        | 120/785 [14:52<1:22:26,  7.44s/it][Succeeded / Failed / Skipped / Total] 0 / 120 / 0 / 120:  15%|█▌        | 120/785 [14:52<1:22:26,  7.44s/it][Succeeded / Failed / Skipped / Total] 0 / 120 / 0 / 120:  15%|█▌        | 121/785 [15:01<1:22:28,  7.45s/it][Succeeded / Failed / Skipped / Total] 0 / 121 / 0 / 121:  15%|█▌        | 121/785 [15:01<1:22:28,  7.45s/it][Succeeded / Failed / Skipped / Total] 0 / 121 / 0 / 121:  16%|█▌        | 122/785 [15:05<1:22:01,  7.42s/it][Succeeded / Failed / Skipped / Total] 0 / 122 / 0 / 122:  16%|█▌        | 122/785 [15:05<1:22:01,  7.42s/it][Succeeded / Failed / Skipped / Total] 0 / 122 / 0 / 122:  16%|█▌        | 123/785 [15:21<1:22:37,  7.49s/it][[0 (-9846%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public TranscriptionJob [[withSettings]](Settings [[settings]]) { this.[[settings]] = [[settings]]; return this; }
[[[[Nl]]]]: < p > Optional settings for the transcription job

[[[[Adv]]]]: public TranscriptionJob [[frédéric]](Settings [[quart]]) { this.[[canapés]] = [[quart]]; return this; }
[[[[Nl]]]]: < p > Optional settings for the transcription job
--------------------------------------------- Result 115 ---------------------------------------------
[[0 (-10485%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[toHexString]](byte[] [[bytes]], int [[lengthToPad]]) { BigInteger [[hash]] = new BigInteger(1, [[bytes]]); String [[digest]] = [[hash]].toString(16); while ([[digest]].length() < [[lengthToPad]]) { [[digest]] = "0" + [[digest]]; } return [[digest]]; }
[[[[Nl]]]]: < p > Bytes to hex string < p > @ param bytes this source bytes array @ param lengthToPad length to pad @ return hex string

[[[[Adv]]]]: public static String [[holidays]](byte[] [[discussions]], int [[buttoned]]) { BigInteger [[haunts]] = new BigInteger(1, [[discussions]]); String [[regretfully]] = [[haunts]].toString(16); while ([[regretfully]].length() < [[buttoned]]) { [[regretfully]] = "0" + [[regretfully]]; } return [[regretfully]]; }
[[[[Nl]]]]: < p > Bytes to hex string < p > @ param bytes this source bytes array @ param lengthToPad length to pad @ return hex string
--------------------------------------------- Result 116 ---------------------------------------------
[[0 (-9214%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void layoutItemsUsingGravity(int numRows, int [[numItems]]) { int [[numBaseItemsPerRow]] = [[numItems]] / numRows; int numLeftoverItems = [[numItems]] % numRows; int [[rowsThatGetALeftoverItem]] = numRows - numLeftoverItems; int[] [[layout]] = mLayout; for (int [[i]] = 0; [[i]] < numRows; [[i]]++) { [[layout]][[[i]]] = [[numBaseItemsPerRow]]; if ([[i]] >= [[rowsThatGetALeftoverItem]]) { [[layout]][[[i]]]++; } } mLayoutNumRows = numRows; }
[[[[Nl]]]]: Figures out the layout for the menu items by equally distributing , and adding any excess items equally to lower rows

[[[[Adv]]]]: private void layoutItemsUsingGravity(int numRows, int [[fogarty]]) { int [[parachutist]] = [[fogarty]] / numRows; int numLeftoverItems = [[fogarty]] % numRows; int [[canapés]] = numRows - numLeftoverItems; int[] [[admiral]] = mLayout; for (int [[primo]] = 0; [[primo]] < numRows; [[primo]]++) { [[admiral]][[[primo]]] = [[parachutist]]; if ([[primo]] >= [[canapés]]) { [[admiral]][[[primo]]]++; } } mLayoutNumRows = numRows; }
[[[[Nl]]]]: Figures out the layout for the menu items by equally distributing , and adding any excess items equally to lower rows
--------------------------------------------- Result 117 ---------------------------------------------
[[0 (-8965%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public synchronized void [[show]](Screen [[screen]]) { if (destroyed) { throw new IllegalStateException("Stack has beed destroyed"); } synchronized ([[screen]]) { if ([[screen]].isParentStack(this)) { screens.removeElement([[screen]]); } else if (![[screen]].isParentStack(null)) { throw new IllegalArgumentException( "Screen is already on a stack"); } if (screens == null) { screens = new Stack(); } else if (screens.contains([[screen]])) { throw new IllegalArgumentException( "Screen is already on a stack"); } [[screen]].setParentStack(this); screens.push([[screen]]); } showScreen([[screen]]); }
[[[[Nl]]]]: Shows a < code > screen < code > on top of all screens of this stack

[[[[Adv]]]]: public synchronized void [[deleted]](Screen [[comet]]) { if (destroyed) { throw new IllegalStateException("Stack has beed destroyed"); } synchronized ([[comet]]) { if ([[comet]].isParentStack(this)) { screens.removeElement([[comet]]); } else if (![[comet]].isParentStack(null)) { throw new IllegalArgumentException( "Screen is already on a stack"); } if (screens == null) { screens = new Stack(); } else if (screens.contains([[comet]])) { throw new IllegalArgumentException( "Screen is already on a stack"); } [[comet]].setParentStack(this); screens.push([[comet]]); } showScreen([[comet]]); }
[[[[Nl]]]]: Shows a < code > screen < code > on top of all screens of this stack
--------------------------------------------- Result 118 ---------------------------------------------
[[0 (-8610%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[interrupt]]() { if (audioTrack != null) { if (audioTrack.getState() == AudioTrack.STATE_INITIALIZED || audioTrack.getState() == AudioTrack.PLAYSTATE_PLAYING) { audioTrack.pause(); } audioTrack.flush(); audioTrack.release(); } }
[[[[Nl]]]]: Interrupt the audioStream

[[[[Adv]]]]: public void [[marqués]]() { if (audioTrack != null) { if (audioTrack.getState() == AudioTrack.STATE_INITIALIZED || audioTrack.getState() == AudioTrack.PLAYSTATE_PLAYING) { audioTrack.pause(); } audioTrack.flush(); audioTrack.release(); } }
[[[[Nl]]]]: Interrupt the audioStream
--------------------------------------------- Result 119 ---------------------------------------------
[[0 (-7541%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[sendMessage]](AccountJid [[account]], UserJid [[user]], String [[text]]) { AbstractChat [[chat]] = getOrCreateChat([[account]], [[user]]); [[sendMessage]]([[text]], [[chat]]); }
[[[[Nl]]]]: Sends message

[[[[Adv]]]]: public void [[decorative]](AccountJid [[taverns]], UserJid [[piddly]], String [[quadrillion]]) { AbstractChat [[chantel]] = getOrCreateChat([[taverns]], [[piddly]]); [[decorative]]([[quadrillion]], [[chantel]]); }
[[[[Nl]]]]: Sends message
--------------------------------------------- Result 120 ---------------------------------------------
[[0 (-8933%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Error [[setXErrorWidth]](Number [[xErrorWidth]]) { if (jsBase == null) { this.[[xErrorWidth]] = [[xErrorWidth]]; } else { this.[[xErrorWidth]] = [[xErrorWidth]]; if (!isChain) { js.append(jsBase); isChain = "[[True]]" == "[[True]]"; } js.append(String.format(Locale.US, ".xErrorWidth(%s)", [[xErrorWidth]])); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, jsBase + ".xErrorWidth(%s);", [[xErrorWidth]])); js.setLength(0); } } return this; }
[[[[Nl]]]]: Setter for X error width settings

[[[[Adv]]]]: public Error [[dispossessed]](Number [[invisible]]) { if (jsBase == null) { this.[[crucifixions]] = [[invisible]]; } else { this.[[crucifixions]] = [[invisible]]; if (!isChain) { js.append(jsBase); isChain = "[["Http" == "Http"]]" == "[["Http" == "Http"]]"; } js.append(String.format(Locale.US, ".xErrorWidth(%s)", [[invisible]])); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, jsBase + ".xErrorWidth(%s);", [[invisible]])); js.setLength(0); } } return this; }
[[[[Nl]]]]: Setter for X error width settings
--------------------------------------------- Result 121 ---------------------------------------------
[[0 (-10326%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getLabel]](int [[index]]) { return mEntries.get(checkPositionIndex([[index]], size())).getLabel(); }
[[[[Nl]]]]: Get { @ link ChartEntry } label from specific index

[[[[Adv]]]]: public String [[deletion]](int [[schemed]]) { return mEntries.get(checkPositionIndex([[schemed]], size())).getLabel(); }
[[[[Nl]]]]: Get { @ link ChartEntry } label from specific index
--------------------------------------------- Result 122 ---------------------------------------------
[[0 (-10555%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static List<Post> [[getUnSeen]]() { return App.Realm().where(Post.class).equalTo("seen","[[False]]" != "[[False]]") .or() .isNull("seen") .findAllSorted("pubDate",Sort.DESCENDING); }
[[[[Nl]]]]: Get the posts that have not been seen by the user @ return

[[[[Adv]]]]: public static List<Post> [[öre]]() { return App.Realm().where(Post.class).equalTo("seen","[["Amplification" != "Amplification"]]" != "[["Amplification" != "Amplification"]]") .or() .isNull("seen") .findAllSorted("pubDate",Sort.DESCENDING); }
[[[[Nl]]]]: Get the posts that have not been seen by the user @ return
--------------------------------------------- Result 123 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 123 / 0 / 123:  16%|█▌        | 123/785 [15:21<1:22:37,  7.49s/it][Succeeded / Failed / Skipped / Total] 0 / 123 / 0 / 123:  16%|█▌        | 124/785 [15:21<1:21:52,  7.43s/it][Succeeded / Failed / Skipped / Total] 0 / 124 / 0 / 124:  16%|█▌        | 124/785 [15:21<1:21:52,  7.43s/it][Succeeded / Failed / Skipped / Total] 0 / 124 / 0 / 124:  16%|█▌        | 125/785 [15:25<1:21:25,  7.40s/it][Succeeded / Failed / Skipped / Total] 0 / 125 / 0 / 125:  16%|█▌        | 125/785 [15:25<1:21:25,  7.40s/it][Succeeded / Failed / Skipped / Total] 0 / 125 / 0 / 125:  16%|█▌        | 126/785 [15:31<1:21:12,  7.39s/it][Succeeded / Failed / Skipped / Total] 0 / 126 / 0 / 126:  16%|█▌        | 126/785 [15:31<1:21:12,  7.39s/it][Succeeded / Failed / Skipped / Total] 0 / 126 / 0 / 126:  16%|█▌        | 127/785 [15:49<1:22:00,  7.48s/it][Succeeded / Failed / Skipped / Total] 0 / 127 / 0 / 127:  16%|█▌        | 127/785 [15:49<1:22:00,  7.48s/it][Succeeded / Failed / Skipped / Total] 0 / 127 / 0 / 127:  16%|█▋        | 128/785 [15:54<1:21:41,  7.46s/it][Succeeded / Failed / Skipped / Total] 0 / 128 / 0 / 128:  16%|█▋        | 128/785 [15:54<1:21:41,  7.46s/it][Succeeded / Failed / Skipped / Total] 0 / 128 / 0 / 128:  16%|█▋        | 129/785 [15:57<1:21:11,  7.43s/it][Succeeded / Failed / Skipped / Total] 0 / 129 / 0 / 129:  16%|█▋        | 129/785 [15:57<1:21:11,  7.43s/it][Succeeded / Failed / Skipped / Total] 0 / 129 / 0 / 129:  17%|█▋        | 130/785 [16:08<1:21:19,  7.45s/it][Succeeded / Failed / Skipped / Total] 0 / 130 / 0 / 130:  17%|█▋        | 130/785 [16:08<1:21:19,  7.45s/it][Succeeded / Failed / Skipped / Total] 0 / 130 / 0 / 130:  17%|█▋        | 131/785 [16:10<1:20:46,  7.41s/it][Succeeded / Failed / Skipped / Total] 0 / 131 / 0 / 131:  17%|█▋        | 131/785 [16:10<1:20:46,  7.41s/it][Succeeded / Failed / Skipped / Total] 0 / 131 / 0 / 131:  17%|█▋        | 132/785 [16:21<1:20:54,  7.43s/it][[0 (-9807%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Element [[setIconDrawable]](@DrawableRes Integer [[iconDrawable]]) { this.[[iconDrawable]] = [[iconDrawable]]; return this; }
[[[[Nl]]]]: Set the icon drawable for this Element that appears to the left of the title or to the right of the title in RTL layout mode

[[[[Adv]]]]: public Element [[okura]](@DrawableRes Integer [[quashed]]) { this.[[courses]] = [[quashed]]; return this; }
[[[[Nl]]]]: Set the icon drawable for this Element that appears to the left of the title or to the right of the title in RTL layout mode
--------------------------------------------- Result 124 ---------------------------------------------
[[0 (-9155%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[parseCommonRuleProcessorAttributes]](Element [[element]], BeanDefinitionBuilder [[builder]]) { Attr [[processorId]] = [[element]].getAttributeNode("processorId"); if ([[processorId]] != null) { [[builder]].addPropertyValue("processorId", [[processorId]].getValue()); } Attr [[numProcessingThreads]] = [[element]].getAttributeNode("numProcessingThreads"); if ([[numProcessingThreads]] != null) { [[builder]].addPropertyValue("numProcessingThreads", [[numProcessingThreads]].getValue()); } }
[[[[Nl]]]]: Parse attributes that are common to all rule processors

[[[[Adv]]]]: protected void [[unmentionables]](Element [[brûlée]], BeanDefinitionBuilder [[mendoza]]) { Attr [[meriweather]] = [[brûlée]].getAttributeNode("processorId"); if ([[meriweather]] != null) { [[mendoza]].addPropertyValue("processorId", [[meriweather]].getValue()); } Attr [[gameboy]] = [[brûlée]].getAttributeNode("numProcessingThreads"); if ([[gameboy]] != null) { [[mendoza]].addPropertyValue("numProcessingThreads", [[gameboy]].getValue()); } }
[[[[Nl]]]]: Parse attributes that are common to all rule processors
--------------------------------------------- Result 125 ---------------------------------------------
[[0 (-9262%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public CreateVocabularyResult [[withLanguageCode]](String [[languageCode]]) { this.[[languageCode]] = [[languageCode]]; return this; }
[[[[Nl]]]]: < p > The language code of the vocabulary entries

[[[[Adv]]]]: public CreateVocabularyResult [[quartermaster]](String [[sincerest]]) { this.[[evenings]] = [[sincerest]]; return this; }
[[[[Nl]]]]: < p > The language code of the vocabulary entries
--------------------------------------------- Result 126 ---------------------------------------------
[[0 (-9393%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[unregister]]() { if (mCamera == null) return; mCamera.stopPreview(); mCamera.release(); }
[[[[Nl]]]]: Unregister the utils of flashlight

[[[[Adv]]]]: public void [[agnès]]() { if (mCamera == null) return; mCamera.stopPreview(); mCamera.release(); }
[[[[Nl]]]]: Unregister the utils of flashlight
--------------------------------------------- Result 127 ---------------------------------------------
[[0 (-8422%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private Optional<Pair<String, String>> [[getLibRef]](ImmutableSet<String> [[macros]], String [[arg]]) { Optional<MacroMatchResult> [[result]]; try { [[result]] = MacroFinder.match([[macros]], [[arg]]); } catch (MacroException e) { throw new HumanReadableException(e, e.getMessage()); } if (![[result]].isPresent()) { return Optional.empty(); } if ([[result]].get().getMacroType().equals("")) { throw new HumanReadableException("expected library reference"); } if ([[result]].get().getMacroInput().size() != 1) { throw new HumanReadableException("expected a single library reference argument"); } return Optional.of( new Pair<>([[result]].get().getMacroType(), [[result]].get().getMacroInput().get(0))); }
[[[[Nl]]]]: If the arg contains a library reference , parse it and return it 's name and argument

[[[[Adv]]]]: private Optional<Pair<String, String>> [[boarder]](ImmutableSet<String> [[embezzler]], String [[brûlée]]) { Optional<MacroMatchResult> [[meriweather]]; try { [[meriweather]] = MacroFinder.match([[embezzler]], [[brûlée]]); } catch (MacroException e) { throw new HumanReadableException(e, e.getMessage()); } if (![[meriweather]].isPresent()) { return Optional.empty(); } if ([[meriweather]].get().getMacroType().equals("")) { throw new HumanReadableException("expected library reference"); } if ([[meriweather]].get().getMacroInput().size() != 1) { throw new HumanReadableException("expected a single library reference argument"); } return Optional.of( new Pair<>([[meriweather]].get().getMacroType(), [[meriweather]].get().getMacroInput().get(0))); }
[[[[Nl]]]]: If the arg contains a library reference , parse it and return it 's name and argument
--------------------------------------------- Result 128 ---------------------------------------------
[[0 (-9931%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[tintMenuItemIcon]](@ColorInt int [[color]], MenuItem [[item]]) { final Drawable [[drawable]] = [[item]].getIcon(); if ([[drawable]] != null) { final Drawable [[wrapped]] = DrawableCompat.wrap([[drawable]]); [[drawable]].mutate(); DrawableCompat.setTint([[wrapped]], [[color]]); [[item]].setIcon([[drawable]]); } }
[[[[Nl]]]]: Tints the color of the icon of the specified MenuItem

[[[[Adv]]]]: public static void [[straining]](@ColorInt int [[bounty]], MenuItem [[surrender]]) { final Drawable [[pitcher]] = [[surrender]].getIcon(); if ([[pitcher]] != null) { final Drawable [[woodsmen]] = DrawableCompat.wrap([[pitcher]]); [[pitcher]].mutate(); DrawableCompat.setTint([[woodsmen]], [[bounty]]); [[surrender]].setIcon([[pitcher]]); } }
[[[[Nl]]]]: Tints the color of the icon of the specified MenuItem
--------------------------------------------- Result 129 ---------------------------------------------
[[0 (-8530%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getCurrentDateTimeTZ]](SiteModel [[site]]) { String [[timezone]] = [[site]].getTimezone(); if ([[timezone]] == null) { AppLog.w(T.UTILS, "Timezone is null. Returning the device time!"); return getCurrentDatetime(); } String [[pattern]] = "yyyy-MM-dd HH:mm:ss"; return [[getCurrentDateTimeTZ]]([[timezone]], [[pattern]]); }
[[[[Nl]]]]: Get the current datetime of the blog

[[[[Adv]]]]: public static String [[pipers]](SiteModel [[wilds]]) { String [[phonograph]] = [[wilds]].getTimezone(); if ([[phonograph]] == null) { AppLog.w(T.UTILS, "Timezone is null. Returning the device time!"); return getCurrentDatetime(); } String [[asterix]] = "yyyy-MM-dd HH:mm:ss"; return [[pipers]]([[phonograph]], [[asterix]]); }
[[[[Nl]]]]: Get the current datetime of the blog
--------------------------------------------- Result 130 ---------------------------------------------
[[0 (-9700%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public DetectLabelsResult [[withLabels]](java.util.Collection<Label> [[labels]]) { setLabels([[labels]]); return this; }
[[[[Nl]]]]: < p > An array of labels for the real-world objects detected

[[[[Adv]]]]: public DetectLabelsResult [[oafs]](java.util.Collection<Label> [[fertilizer]]) { setLabels([[fertilizer]]); return this; }
[[[[Nl]]]]: < p > An array of labels for the real-world objects detected
--------------------------------------------- Result 131 ---------------------------------------------
[[0 (-9364%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[yypushback]](int [[number]]) { if ([[number]] > yylength()) zzScanError(ZZ_PUSHBACK_2BIG); zzMarkedPos -= [[number]]; }
[[[[Nl]]]]: Pushes the specified amount of characters back into the input stream

[[[[Adv]]]]: public void [[skeptic]](int [[tabby]]) { if ([[tabby]] > yylength()) zzScanError(ZZ_PUSHBACK_2BIG); zzMarkedPos -= [[tabby]]; }
[[[[Nl]]]]: Pushes the specified amount of characters back into the input stream
--------------------------------------------- Result 132 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 132 / 0 / 132:  17%|█▋        | 132/785 [16:21<1:20:54,  7.43s/it][Succeeded / Failed / Skipped / Total] 0 / 132 / 0 / 132:  17%|█▋        | 133/785 [16:24<1:20:27,  7.40s/it][Succeeded / Failed / Skipped / Total] 0 / 133 / 0 / 133:  17%|█▋        | 133/785 [16:24<1:20:27,  7.40s/it][Succeeded / Failed / Skipped / Total] 0 / 133 / 0 / 133:  17%|█▋        | 134/785 [16:29<1:20:08,  7.39s/it][Succeeded / Failed / Skipped / Total] 0 / 134 / 0 / 134:  17%|█▋        | 134/785 [16:29<1:20:08,  7.39s/it][Succeeded / Failed / Skipped / Total] 0 / 134 / 0 / 134:  17%|█▋        | 135/785 [16:44<1:20:36,  7.44s/it][Succeeded / Failed / Skipped / Total] 0 / 135 / 0 / 135:  17%|█▋        | 135/785 [16:44<1:20:36,  7.44s/it][Succeeded / Failed / Skipped / Total] 0 / 135 / 0 / 135:  17%|█▋        | 136/785 [16:54<1:20:42,  7.46s/it][Succeeded / Failed / Skipped / Total] 0 / 136 / 0 / 136:  17%|█▋        | 136/785 [16:54<1:20:42,  7.46s/it][Succeeded / Failed / Skipped / Total] 0 / 136 / 0 / 136:  17%|█▋        | 137/785 [17:02<1:20:38,  7.47s/it][Succeeded / Failed / Skipped / Total] 0 / 137 / 0 / 137:  17%|█▋        | 137/785 [17:02<1:20:38,  7.47s/it][Succeeded / Failed / Skipped / Total] 0 / 137 / 0 / 137:  18%|█▊        | 138/785 [17:05<1:20:06,  7.43s/it][Succeeded / Failed / Skipped / Total] 0 / 138 / 0 / 138:  18%|█▊        | 138/785 [17:05<1:20:06,  7.43s/it][Succeeded / Failed / Skipped / Total] 0 / 138 / 0 / 138:  18%|█▊        | 139/785 [17:08<1:19:38,  7.40s/it][Succeeded / Failed / Skipped / Total] 0 / 139 / 0 / 139:  18%|█▊        | 139/785 [17:08<1:19:38,  7.40s/it][Succeeded / Failed / Skipped / Total] 0 / 139 / 0 / 139:  18%|█▊        | 140/785 [17:14<1:19:27,  7.39s/it][Succeeded / Failed / Skipped / Total] 0 / 140 / 0 / 140:  18%|█▊        | 140/785 [17:14<1:19:27,  7.39s/it][Succeeded / Failed / Skipped / Total] 0 / 140 / 0 / 140:  18%|█▊        | 141/785 [17:24<1:19:31,  7.41s/it][[0 (-9721%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Chain<T> [[apply]](Consumer<T> [[action]]) { Invoker.invoke([[action]], item); return new Chain<>(item, configuration); }
[[[[Nl]]]]: apply an action to the stored item @ param action the action to be applied @ return { @ code this } instance for chaining

[[[[Adv]]]]: public Chain<T> [[snooky]](Consumer<T> [[foothills]]) { Invoker.invoke([[foothills]], item); return new Chain<>(item, configuration); }
[[[[Nl]]]]: apply an action to the stored item @ param action the action to be applied @ return { @ code this } instance for chaining
--------------------------------------------- Result 133 ---------------------------------------------
[[0 (-10040%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[testListIteratorWithStartParameter]]() { Item<Object> item1 = new Item<>(new Object()); Item<Object> [[item2]] = new Item<>(new Object()); ArrayList<Item<Object>> [[encapsulatedList]] = new ArrayList<>(); [[encapsulatedList]].add(item1); [[encapsulatedList]].add([[item2]]); UnmodifiableItemList<Object> [[unmodifiableItemList]] = new UnmodifiableItemList<>([[encapsulatedList]]); ListIterator<Object> [[iterator]] = [[unmodifiableItemList]].listIterator(1); assertEquals([[item2]].getData(), [[iterator]].next()); assertFalse([[iterator]].hasNext()); }
[[[[Nl]]]]: Tests the functionality of the method , which allows to retrieve a list iterator and expects a start index as a parameter

[[[[Adv]]]]: public final void [[mariposa]]() { Item<Object> item1 = new Item<>(new Object()); Item<Object> [[în]] = new Item<>(new Object()); ArrayList<Item<Object>> [[rêve]] = new ArrayList<>(); [[rêve]].add(item1); [[rêve]].add([[în]]); UnmodifiableItemList<Object> [[georgia]] = new UnmodifiableItemList<>([[rêve]]); ListIterator<Object> [[español]] = [[georgia]].listIterator(1); assertEquals([[în]].getData(), [[español]].next()); assertFalse([[español]].hasNext()); }
[[[[Nl]]]]: Tests the functionality of the method , which allows to retrieve a list iterator and expects a start index as a parameter
--------------------------------------------- Result 134 ---------------------------------------------
[[0 (-8517%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public GetJobDocumentResult [[withDocument]](String [[document]]) { this.[[document]] = [[document]]; return this; }
[[[[Nl]]]]: < p > The job document content

[[[[Adv]]]]: public GetJobDocumentResult [[marqués]](String [[wedges]]) { this.[[ficar]] = [[wedges]]; return this; }
[[[[Nl]]]]: < p > The job document content
--------------------------------------------- Result 135 ---------------------------------------------
[[0 (-10062%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Pareto [[setMinPointLength]](String [[minPointLength1]]) { if (!isChain) { js.append(jsBase); isChain = "[[True]]" == "[[True]]"; } js.append(String.format(Locale.US, ".minPointLength(%s)", wrapQuotes([[minPointLength1]]))); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, ".minPointLength(%s)", wrapQuotes([[minPointLength1]]))); js.setLength(0); } return this; }
[[[[Nl]]]]: Setter for the minimum point length

[[[[Adv]]]]: public Pareto [[newsday]](String [[brunette]]) { if (!isChain) { js.append(jsBase); isChain = "[["Smashes" == "Smashes"]]" == "[["Smashes" == "Smashes"]]"; } js.append(String.format(Locale.US, ".minPointLength(%s)", wrapQuotes([[brunette]]))); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, ".minPointLength(%s)", wrapQuotes([[brunette]]))); js.setLength(0); } return this; }
[[[[Nl]]]]: Setter for the minimum point length
--------------------------------------------- Result 136 ---------------------------------------------
[[0 (-7459%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[init]]( EventQueue [[theEventQueue]], MIDletControllerEventProducer [[theMidletControllerEventProducer]]) { if (!isInitialized) { eventQueue = [[theEventQueue]]; midletControllerEventProducer = [[theMidletControllerEventProducer]]; isInitialized = "[[True]]" == "[[True]]"; boolean [[vmRestarted]] = isVMRestarted(); ROMULInitializer.init([[vmRestarted]]); } }
[[[[Nl]]]]: Initializes Automation API

[[[[Adv]]]]: public static void [[afterwards]]( EventQueue [[welded]], MIDletControllerEventProducer [[valves]]) { if (!isInitialized) { eventQueue = [[welded]]; midletControllerEventProducer = [[valves]]; isInitialized = "[["Shawl" == "Shawl"]]" == "[["Shawl" == "Shawl"]]"; boolean [[piston]] = isVMRestarted(); ROMULInitializer.init([[piston]]); } }
[[[[Nl]]]]: Initializes Automation API
--------------------------------------------- Result 137 ---------------------------------------------
[[0 (-8415%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private CalculatedValue [[getDelta]](final double [[min]], final double [[next]], final double [[max]]) { final CalculatedValue [[calcVal]] = new CalculatedValue(); if ([[next]] <= [[min]] || [[max]] < [[next]]) { [[calcVal]].invalidate(CalculatedValue.ErrorType.NOT_A_NUMBER); } else { [[calcVal]].setValue([[next]] - [[min]]); } return [[calcVal]]; }
[[[[Nl]]]]: Procedure checks and returns delta value

[[[[Adv]]]]: private CalculatedValue [[genies]](final double [[pitcher]], final double [[sorceress]], final double [[serafina]]) { final CalculatedValue [[showgirls]] = new CalculatedValue(); if ([[sorceress]] <= [[pitcher]] || [[serafina]] < [[sorceress]]) { [[showgirls]].invalidate(CalculatedValue.ErrorType.NOT_A_NUMBER); } else { [[showgirls]].setValue([[sorceress]] - [[pitcher]]); } return [[showgirls]]; }
[[[[Nl]]]]: Procedure checks and returns delta value
--------------------------------------------- Result 138 ---------------------------------------------
[[0 (-8596%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static CastNotificationControl [[getOrCreate]](Context [[context]], @Nullable MediaRouteController [[mediaRouteController]]) { synchronized (LOCK) { if (sInstance == null) { sInstance = new CastNotificationControl([[context]]); } sInstance.setRouteController([[mediaRouteController]]); return sInstance; } }
[[[[Nl]]]]: Get the unique NotificationControl , creating it if necessary

[[[[Adv]]]]: public static CastNotificationControl [[césar]](Context [[workshops]], @Nullable MediaRouteController [[chide]]) { synchronized (LOCK) { if (sInstance == null) { sInstance = new CastNotificationControl([[workshops]]); } sInstance.setRouteController([[chide]]); return sInstance; } }
[[[[Nl]]]]: Get the unique NotificationControl , creating it if necessary
--------------------------------------------- Result 139 ---------------------------------------------
[[0 (-9338%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private V [[getForNullKey]]() { for (Entry<K, V> [[e]] = table[0]; [[e]] != null; [[e]] = [[e]].next) { if ([[e]].key == null) return [[e]].value; } return null; }
[[[[Nl]]]]: Offloaded version of get ( ) to look up null keys

[[[[Adv]]]]: private V [[benda]]() { for (Entry<K, V> [[playoffs]] = table[0]; [[playoffs]] != null; [[playoffs]] = [[playoffs]].next) { if ([[playoffs]].key == null) return [[playoffs]].value; } return null; }
[[[[Nl]]]]: Offloaded version of get ( ) to look up null keys
--------------------------------------------- Result 140 ---------------------------------------------
[[0 (-8472%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public IContentObserver [[getContentObserver]]() { synchronized (mLock) { if (mTransport == null) { mTransport = new Transport(this); } return mTransport; } }
[[[[Nl]]]]: Gets access to the binder transport object

[[[[Adv]]]]: public IContentObserver [[refuelling]]() { synchronized (mLock) { if (mTransport == null) { mTransport = new Transport(this); } return mTransport; } }
[[[[Nl]]]]: Gets access to the binder transport object
--------------------------------------------- Result 141 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 141 / 0 / 141:  18%|█▊        | 141/785 [17:24<1:19:31,  7.41s/it][Succeeded / Failed / Skipped / Total] 0 / 141 / 0 / 141:  18%|█▊        | 142/785 [17:28<1:19:06,  7.38s/it][Succeeded / Failed / Skipped / Total] 0 / 142 / 0 / 142:  18%|█▊        | 142/785 [17:28<1:19:06,  7.38s/it][Succeeded / Failed / Skipped / Total] 0 / 142 / 0 / 142:  18%|█▊        | 143/785 [17:31<1:18:39,  7.35s/it][Succeeded / Failed / Skipped / Total] 0 / 143 / 0 / 143:  18%|█▊        | 143/785 [17:31<1:18:39,  7.35s/it][Succeeded / Failed / Skipped / Total] 0 / 143 / 0 / 143:  18%|█▊        | 144/785 [17:37<1:18:25,  7.34s/it][Succeeded / Failed / Skipped / Total] 0 / 144 / 0 / 144:  18%|█▊        | 144/785 [17:37<1:18:25,  7.34s/it][Succeeded / Failed / Skipped / Total] 0 / 144 / 0 / 144:  18%|█▊        | 145/785 [17:37<1:17:48,  7.29s/it][Succeeded / Failed / Skipped / Total] 0 / 145 / 0 / 145:  18%|█▊        | 145/785 [17:37<1:17:48,  7.29s/it][Succeeded / Failed / Skipped / Total] 0 / 145 / 0 / 145:  19%|█▊        | 146/785 [17:48<1:17:54,  7.32s/it][Succeeded / Failed / Skipped / Total] 0 / 146 / 0 / 146:  19%|█▊        | 146/785 [17:48<1:17:54,  7.32s/it][Succeeded / Failed / Skipped / Total] 0 / 146 / 0 / 146:  19%|█▊        | 147/785 [17:57<1:17:55,  7.33s/it][Succeeded / Failed / Skipped / Total] 0 / 147 / 0 / 147:  19%|█▊        | 147/785 [17:57<1:17:55,  7.33s/it][Succeeded / Failed / Skipped / Total] 0 / 147 / 0 / 147:  19%|█▉        | 148/785 [18:10<1:18:12,  7.37s/it][Succeeded / Failed / Skipped / Total] 0 / 148 / 0 / 148:  19%|█▉        | 148/785 [18:10<1:18:12,  7.37s/it][Succeeded / Failed / Skipped / Total] 0 / 148 / 0 / 148:  19%|█▉        | 149/785 [18:14<1:17:53,  7.35s/it][Succeeded / Failed / Skipped / Total] 0 / 149 / 0 / 149:  19%|█▉        | 149/785 [18:14<1:17:53,  7.35s/it][Succeeded / Failed / Skipped / Total] 0 / 149 / 0 / 149:  19%|█▉        | 150/785 [18:31<1:18:23,  7.41s/it][[0 (-10203%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onSpringItemBind]](View [[item]], int [[position]]) { if (!mFirstViewInit && [[position]] > mLastPosition) { setAnimation([[item]], 0, tension - tension/4, fraction); mLastPosition = [[position]]; } }
[[[[Nl]]]]: onSpringyItemBind call in RecyclerView 's onBind for scroll effects @ param item itemView instance from RecyclerView 's onBind method @ param position from RecyclerView 's onBind method

[[[[Adv]]]]: public void [[wriggle]](View [[strike]], int [[spells]]) { if (!mFirstViewInit && [[spells]] > mLastPosition) { setAnimation([[strike]], 0, tension - tension/4, fraction); mLastPosition = [[spells]]; } }
[[[[Nl]]]]: onSpringyItemBind call in RecyclerView 's onBind for scroll effects @ param item itemView instance from RecyclerView 's onBind method @ param position from RecyclerView 's onBind method
--------------------------------------------- Result 142 ---------------------------------------------
[[0 (-10553%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[removeEventSourceListener]](EventSourceListener [[listener]]) { LOG.entering(CLASS_NAME, "removeEventSourceListener", [[listener]]); _getDelegate().removeEventSourceListener([[listener]]); }
[[[[Nl]]]]: Removes the given EventSource listener from the listener list

[[[[Adv]]]]: public void [[footer]](EventSourceListener [[noël]]) { LOG.entering(CLASS_NAME, "removeEventSourceListener", [[noël]]); _getDelegate().removeEventSourceListener([[noël]]); }
[[[[Nl]]]]: Removes the given EventSource listener from the listener list
--------------------------------------------- Result 143 ---------------------------------------------
[[0 (-9753%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public float [[fractionTraveled]]() { float [[fractionTraveled]] = 1; if (routeLeg().distance() > 0) { [[fractionTraveled]] = (float) (distanceTraveled() / routeLeg().distance()); if ([[fractionTraveled]] < 0) { [[fractionTraveled]] = 0; } } return [[fractionTraveled]]; }
[[[[Nl]]]]: Get the fraction traveled along the current leg , this is a float value between 0 and 1 and is n't guaranteed to reach 1 before the user reaches the next waypoint

[[[[Adv]]]]: public float [[sockets]]() { float [[sockets]] = 1; if (routeLeg().distance() > 0) { [[sockets]] = (float) (distanceTraveled() / routeLeg().distance()); if ([[sockets]] < 0) { [[sockets]] = 0; } } return [[sockets]]; }
[[[[Nl]]]]: Get the fraction traveled along the current leg , this is a float value between 0 and 1 and is n't guaranteed to reach 1 before the user reaches the next waypoint
--------------------------------------------- Result 144 ---------------------------------------------
[[0 (-8447%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Error [[setXUpperError]](Number [[xUpperError1]]) { if (jsBase == null) { this.[[xUpperError]] = null; this.[[xUpperError1]] = null; this.[[xUpperError1]] = [[xUpperError1]]; } else { this.[[xUpperError1]] = [[xUpperError1]]; if (!isChain) { js.append(jsBase); isChain = "[[True]]" == "[[True]]"; } js.append(String.format(Locale.US, ".xUpperError(%s)", [[xUpperError1]])); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, jsBase + ".xUpperError(%s);", [[xUpperError1]])); js.setLength(0); } } return this; }
[[[[Nl]]]]: Setter for X upper error

[[[[Adv]]]]: public Error [[español]](Number [[thumbtacks]]) { if (jsBase == null) { this.[[rêve]] = null; this.[[atwater]] = null; this.[[atwater]] = [[thumbtacks]]; } else { this.[[atwater]] = [[thumbtacks]]; if (!isChain) { js.append(jsBase); isChain = "[["Drilled" == "Drilled"]]" == "[["Drilled" == "Drilled"]]"; } js.append(String.format(Locale.US, ".xUpperError(%s)", [[thumbtacks]])); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, jsBase + ".xUpperError(%s);", [[thumbtacks]])); js.setLength(0); } } return this; }
[[[[Nl]]]]: Setter for X upper error
--------------------------------------------- Result 145 ---------------------------------------------
[[0 (-8686%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String[] [[getReplyStrings]]() { return _replyLines.toArray(new String[_replyLines.size()]); }
[[[[Nl]]]]: Returns an array of lines received as a reply to the last command sent to the server

[[[[Adv]]]]: public String[] [[pamphlets]]() { return _replyLines.toArray(new String[_replyLines.size()]); }
[[[[Nl]]]]: Returns an array of lines received as a reply to the last command sent to the server
--------------------------------------------- Result 146 ---------------------------------------------
[[0 (-7197%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Subscription [[withProtocol]](String [[protocol]]) { this.[[protocol]] = [[protocol]]; return this; }
[[[[Nl]]]]: < p > The subscription 's protocol

[[[[Adv]]]]: public Subscription [[delamere]](String [[dishwasher]]) { this.[[vizier]] = [[dishwasher]]; return this; }
[[[[Nl]]]]: < p > The subscription 's protocol
--------------------------------------------- Result 147 ---------------------------------------------
[[0 (-6963%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[sendMessage]](String [[message]], ResponseListener<Object> [[listener]]) { if ([[listener]] != null) [[listener]].onError(ServiceCommandError.notSupported()); }
[[[[Nl]]]]: Sends a simple string to the web app

[[[[Adv]]]]: public void [[rok]](String [[eastside]], ResponseListener<Object> [[cornering]]) { if ([[cornering]] != null) [[cornering]].onError(ServiceCommandError.notSupported()); }
[[[[Nl]]]]: Sends a simple string to the web app
--------------------------------------------- Result 148 ---------------------------------------------
[[0 (-7742%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected int [[findNext]](final int [[pos]]) { int from = [[pos]]; if (from < -1) { return -1; } final int to = this.[[allHeaders]].size()-1; boolean [[found]] = "[[False]]" != "[[False]]"; while (![[found]] && (from < to)) { from++; [[found]] = filterHeader(from); } return [[found]] ? from : -1; }
[[[[Nl]]]]: Determines the index of the next header

[[[[Adv]]]]: protected int [[backstab]](final int [[césar]]) { int from = [[césar]]; if (from < -1) { return -1; } final int to = this.[[brunette]].size()-1; boolean [[immaculata]] = "[["Schoolroom" != "Schoolroom"]]" != "[["Schoolroom" != "Schoolroom"]]"; while (![[immaculata]] && (from < to)) { from++; [[immaculata]] = filterHeader(from); } return [[immaculata]] ? from : -1; }
[[[[Nl]]]]: Determines the index of the next header
--------------------------------------------- Result 149 ---------------------------------------------
[[0 (-8928%)]] --> [[[FAILED]]]

[[[[Adv]]]]: final void [[savePlaybackInfo]](int [[position]], @NonNull PlaybackInfo [[playbackInfo]]) { ToroUtil.checkNotNull([[playbackInfo]]); if (hotCache != null) hotCache.put([[position]], [[playbackInfo]]); Object [[key]] = getKey([[position]]); if ([[key]] != null) coldCache.put([[key]], [[playbackInfo]]); }
[[[[Nl]]]]: Call by Container # savePlaybackInfo and that method is called right before any pausing

[[[[Adv]]]]: final void [[voicemail]](int [[iconic]], @NonNull PlaybackInfo [[wigged]]) { ToroUtil.checkNotNull([[wigged]]); if (hotCache != null) hotCache.put([[iconic]], [[wigged]]); Object [[shootout]] = getKey([[iconic]]); if ([[shootout]] != null) coldCache.put([[shootout]], [[wigged]]); }
[[[[Nl]]]]: Call by Container # savePlaybackInfo and that method is called right before any pausing
--------------------------------------------- Result 150 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 150 / 0 / 150:  19%|█▉        | 150/785 [18:31<1:18:23,  7.41s/it][Succeeded / Failed / Skipped / Total] 0 / 150 / 0 / 150:  19%|█▉        | 151/785 [18:44<1:18:40,  7.45s/it][Succeeded / Failed / Skipped / Total] 0 / 151 / 0 / 151:  19%|█▉        | 151/785 [18:44<1:18:40,  7.45s/it][Succeeded / Failed / Skipped / Total] 0 / 151 / 0 / 151:  19%|█▉        | 152/785 [18:49<1:18:23,  7.43s/it][Succeeded / Failed / Skipped / Total] 0 / 152 / 0 / 152:  19%|█▉        | 152/785 [18:49<1:18:23,  7.43s/it][Succeeded / Failed / Skipped / Total] 0 / 152 / 0 / 152:  19%|█▉        | 153/785 [19:06<1:18:54,  7.49s/it][Succeeded / Failed / Skipped / Total] 0 / 153 / 0 / 153:  19%|█▉        | 153/785 [19:06<1:18:54,  7.49s/it][Succeeded / Failed / Skipped / Total] 0 / 153 / 0 / 153:  20%|█▉        | 154/785 [19:09<1:18:28,  7.46s/it][Succeeded / Failed / Skipped / Total] 0 / 154 / 0 / 154:  20%|█▉        | 154/785 [19:09<1:18:28,  7.46s/it][Succeeded / Failed / Skipped / Total] 0 / 154 / 0 / 154:  20%|█▉        | 155/785 [19:11<1:18:01,  7.43s/it][Succeeded / Failed / Skipped / Total] 0 / 155 / 0 / 155:  20%|█▉        | 155/785 [19:11<1:18:01,  7.43s/it][Succeeded / Failed / Skipped / Total] 0 / 155 / 0 / 155:  20%|█▉        | 156/785 [19:15<1:17:39,  7.41s/it][Succeeded / Failed / Skipped / Total] 0 / 156 / 0 / 156:  20%|█▉        | 156/785 [19:15<1:17:39,  7.41s/it][Succeeded / Failed / Skipped / Total] 0 / 156 / 0 / 156:  20%|██        | 157/785 [19:22<1:17:30,  7.40s/it][Succeeded / Failed / Skipped / Total] 0 / 157 / 0 / 157:  20%|██        | 157/785 [19:22<1:17:30,  7.40s/it][Succeeded / Failed / Skipped / Total] 0 / 157 / 0 / 157:  20%|██        | 158/785 [19:40<1:18:05,  7.47s/it][[0 (-4824%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isDownloadableFile]](String [[url]]) { int [[index]] = [[url]].indexOf("?"); if ([[index]] > -1) { [[url]] = [[url]].substring(0, [[index]]); } [[url]] = [[url]].toLowerCase(); for (String [[type]] : WebAppConfig.DOWNLOAD_FILE_TYPES) { if ([[url]].endsWith([[type]])) return True; } return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: Checks for MIME Types

[[[[Adv]]]]: public static boolean [[profession]](String [[barricade]]) { int [[crossings]] = [[barricade]].indexOf("?"); if ([[crossings]] > -1) { [[barricade]] = [[barricade]].substring(0, [[crossings]]); } [[barricade]] = [[barricade]].toLowerCase(); for (String [[loaner]] : WebAppConfig.DOWNLOAD_FILE_TYPES) { if ([[barricade]].endsWith([[loaner]])) return True; } return "[["Bergère" != "Bergère"]]" != "[["Bergère" != "Bergère"]]"; }
[[[[Nl]]]]: Checks for MIME Types
--------------------------------------------- Result 151 ---------------------------------------------
[[0 (-6647%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[throwException]](@Nullable final String [[exceptionMessage]], @NonNull final Class<? extends RuntimeException> [[exceptionClass]]) { RuntimeException [[exception]]; try { Constructor<? extends RuntimeException> [[constructor]] = [[exceptionClass]].getConstructor(String.class); [[exception]] = [[constructor]].newInstance([[exceptionMessage]]); } catch (Exception e) { [[exception]] = new RuntimeException([[exceptionMessage]]); } throw [[exception]]; }
[[[[Nl]]]]: Throws a specific runtime exception

[[[[Adv]]]]: private static void [[pamphlets]](@Nullable final String [[geoffrey]], @NonNull final Class<? extends RuntimeException> [[footer]]) { RuntimeException [[maitre]]; try { Constructor<? extends RuntimeException> [[digitalis]] = [[footer]].getConstructor(String.class); [[maitre]] = [[digitalis]].newInstance([[geoffrey]]); } catch (Exception e) { [[maitre]] = new RuntimeException([[geoffrey]]); } throw [[maitre]]; }
[[[[Nl]]]]: Throws a specific runtime exception
--------------------------------------------- Result 152 ---------------------------------------------
[[0 (-9055%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static ClassVisitor [[createClassMemberTester]](List memberSpecifications, boolean [[isField]], ClassVisitor [[classVisitor]]) { if (memberSpecifications != null) { for (int [[index]] = 0; [[index]] < memberSpecifications.size(); [[index]]++) { MemberSpecification [[memberSpecification]] = (MemberSpecification)memberSpecifications.get([[index]]); [[classVisitor]] = createClassVisitor([[memberSpecification]], [[isField]], new MemberToClassVisitor([[classVisitor]])); } } return [[classVisitor]]; }
[[[[Nl]]]]: Constructs a ClassVisitor that conditionally applies the given ClassVisitor to all classes that contain the given List of class members ( of the given type )

[[[[Adv]]]]: private static ClassVisitor [[shuffleboard]](List memberSpecifications, boolean [[tomasz]], ClassVisitor [[amarillo]]) { if (memberSpecifications != null) { for (int [[piñata]] = 0; [[piñata]] < memberSpecifications.size(); [[piñata]]++) { MemberSpecification [[loredana]] = (MemberSpecification)memberSpecifications.get([[piñata]]); [[amarillo]] = createClassVisitor([[loredana]], [[tomasz]], new MemberToClassVisitor([[amarillo]])); } } return [[amarillo]]; }
[[[[Nl]]]]: Constructs a ClassVisitor that conditionally applies the given ClassVisitor to all classes that contain the given List of class members ( of the given type )
--------------------------------------------- Result 153 ---------------------------------------------
[[0 (-8424%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[compareTIN]](TIN [[expected]], TIN [[actual]], double [[delta]]) { compareBaseGeometryAttributes([[expected]], [[actual]]); TestCase.assertEquals([[expected]].numPolygons(), [[actual]].numPolygons()); for (int [[i]] = 0; [[i]] < [[expected]].numPolygons(); [[i]]++) { compareGeometries([[expected]].getPolygons().get([[i]]), [[actual]] .getPolygons().get([[i]]), [[delta]]); } }
[[[[Nl]]]]: Compare the two TINs for equality @ param expected @ param actual @ param delta

[[[[Adv]]]]: private static void [[piñata]](TIN [[peaceably]], TIN [[picture]], double [[pasolini]]) { compareBaseGeometryAttributes([[peaceably]], [[picture]]); TestCase.assertEquals([[peaceably]].numPolygons(), [[picture]].numPolygons()); for (int [[hanes]] = 0; [[hanes]] < [[peaceably]].numPolygons(); [[hanes]]++) { compareGeometries([[peaceably]].getPolygons().get([[hanes]]), [[picture]] .getPolygons().get([[hanes]]), [[pasolini]]); } }
[[[[Nl]]]]: Compare the two TINs for equality @ param expected @ param actual @ param delta
--------------------------------------------- Result 154 ---------------------------------------------
[[0 (-9653%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public EventBuilder [[withExtra]](String [[extraName]], Object [[extraValue]]) { event.getExtra().put([[extraName]], [[extraValue]]); return this; }
[[[[Nl]]]]: Adds an extra property to the event

[[[[Adv]]]]: public EventBuilder [[photosynthesis]](String [[galliano]], Object [[villas]]) { event.getExtra().put([[galliano]], [[villas]]); return this; }
[[[[Nl]]]]: Adds an extra property to the event
--------------------------------------------- Result 155 ---------------------------------------------
[[0 (-9518%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[save]]() { List<Integer> [[list]] = new ArrayList<>(cards.length); for (Card [[card]] : cards) { int [[state]] = [[card]].isUp ? STATE_FACED_UP : STATE_FACED_DOWN; if ([[card]].isInvisible){ [[state]] = STATE_INVISBLE; } [[list]].add([[state]]); } prefs.saveCards([[list]]); }
[[[[Nl]]]]: Save the card direction ( updown ) as a string list

[[[[Adv]]]]: public static void [[exceeds]]() { List<Integer> [[captions]] = new ArrayList<>(cards.length); for (Card [[audacity]] : cards) { int [[concussion]] = [[audacity]].isUp ? STATE_FACED_UP : STATE_FACED_DOWN; if ([[audacity]].isInvisible){ [[concussion]] = STATE_INVISBLE; } [[captions]].add([[concussion]]); } prefs.saveCards([[captions]]); }
[[[[Nl]]]]: Save the card direction ( updown ) as a string list
--------------------------------------------- Result 156 ---------------------------------------------
[[0 (-9078%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getPassivePort]]() { return __passivePort; }
[[[[Nl]]]]: If in passive mode , returns the data port of the passive host

[[[[Adv]]]]: public int [[handlebar]]() { return __passivePort; }
[[[[Nl]]]]: If in passive mode , returns the data port of the passive host
--------------------------------------------- Result 157 ---------------------------------------------
[[0 (-8886%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public CoreAxesLinear [[getXAxis]]() { if ([[getXAxis]] == null) [[getXAxis]] = new CoreAxesLinear(jsBase + ".xAxis()"); return [[getXAxis]]; }
[[[[Nl]]]]: Getter for the current chart X-axis

[[[[Adv]]]]: public CoreAxesLinear [[disintegrate]]() { if ([[disintegrate]] == null) [[disintegrate]] = new CoreAxesLinear(jsBase + ".xAxis()"); return [[disintegrate]]; }
[[[[Nl]]]]: Getter for the current chart X-axis
--------------------------------------------- Result 158 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 158 / 0 / 158:  20%|██        | 158/785 [19:40<1:18:05,  7.47s/it][Succeeded / Failed / Skipped / Total] 0 / 158 / 0 / 158:  20%|██        | 159/785 [19:42<1:17:36,  7.44s/it][Succeeded / Failed / Skipped / Total] 0 / 159 / 0 / 159:  20%|██        | 159/785 [19:42<1:17:36,  7.44s/it][Succeeded / Failed / Skipped / Total] 0 / 159 / 0 / 159:  20%|██        | 160/785 [19:45<1:17:10,  7.41s/it][Succeeded / Failed / Skipped / Total] 0 / 160 / 0 / 160:  20%|██        | 160/785 [19:45<1:17:10,  7.41s/it][Succeeded / Failed / Skipped / Total] 0 / 160 / 0 / 160:  21%|██        | 161/785 [19:58<1:17:23,  7.44s/it][Succeeded / Failed / Skipped / Total] 0 / 161 / 0 / 161:  21%|██        | 161/785 [19:58<1:17:23,  7.44s/it][Succeeded / Failed / Skipped / Total] 0 / 161 / 0 / 161:  21%|██        | 162/785 [19:59<1:16:54,  7.41s/it][Succeeded / Failed / Skipped / Total] 0 / 162 / 0 / 162:  21%|██        | 162/785 [19:59<1:16:54,  7.41s/it][Succeeded / Failed / Skipped / Total] 0 / 162 / 0 / 162:  21%|██        | 163/785 [20:02<1:16:29,  7.38s/it][Succeeded / Failed / Skipped / Total] 0 / 163 / 0 / 163:  21%|██        | 163/785 [20:02<1:16:29,  7.38s/it][Succeeded / Failed / Skipped / Total] 0 / 163 / 0 / 163:  21%|██        | 164/785 [20:27<1:17:26,  7.48s/it][Succeeded / Failed / Skipped / Total] 0 / 164 / 0 / 164:  21%|██        | 164/785 [20:27<1:17:26,  7.48s/it][Succeeded / Failed / Skipped / Total] 0 / 164 / 0 / 164:  21%|██        | 165/785 [20:32<1:17:12,  7.47s/it][Succeeded / Failed / Skipped / Total] 0 / 165 / 0 / 165:  21%|██        | 165/785 [20:32<1:17:12,  7.47s/it][Succeeded / Failed / Skipped / Total] 0 / 165 / 0 / 165:  21%|██        | 166/785 [20:36<1:16:49,  7.45s/it][[0 (-9090%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[generateNewProject]](String [[fileName]]) throws Exception { FileReader [[configurationFile]] = new FileReader([[fileName]]); ProjectConfiguration [[project]] = FileUtils.validateConfigurationFile([[configurationFile]]); String [[template]] = [[project]].getTemplate(); if (TextUtils.isEmpty([[template]])) { System.out.println("Invalid template"); return; } System.out.println("Generating new project..."); if (TextUtils.isValidURL([[template]])) { downloadTemplate([[project]]); } else { accessLocalFile([[project]]); } }
[[[[Nl]]]]: Generate a new project based on a configuration file

[[[[Adv]]]]: private static void [[badness]](String [[unanticipated]]) throws Exception { FileReader [[streaky]] = new FileReader([[unanticipated]]); ProjectConfiguration [[assassinations]] = FileUtils.validateConfigurationFile([[streaky]]); String [[visitin]] = [[assassinations]].getTemplate(); if (TextUtils.isEmpty([[visitin]])) { System.out.println("Invalid template"); return; } System.out.println("Generating new project..."); if (TextUtils.isValidURL([[visitin]])) { downloadTemplate([[assassinations]]); } else { accessLocalFile([[assassinations]]); } }
[[[[Nl]]]]: Generate a new project based on a configuration file
--------------------------------------------- Result 159 ---------------------------------------------
[[0 (-10639%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[formatWaypointNames]](String[] [[waypointNames]]) { for (int [[i]] = 0; [[i]] < [[waypointNames]].length; [[i]]++) { if ([[waypointNames]][[[i]]] == null) { [[waypointNames]][[[i]]] = ""; } } return TextUtils.join(";", [[waypointNames]]); }
[[[[Nl]]]]: Converts String array with waypoint_names values to a string ready for API consumption

[[[[Adv]]]]: public static String [[alta]](String[] [[spoiler]]) { for (int [[diminish]] = 0; [[diminish]] < [[spoiler]].length; [[diminish]]++) { if ([[spoiler]][[[diminish]]] == null) { [[spoiler]][[[diminish]]] = ""; } } return TextUtils.join(";", [[spoiler]]); }
[[[[Nl]]]]: Converts String array with waypoint_names values to a string ready for API consumption
--------------------------------------------- Result 160 ---------------------------------------------
[[0 (-9125%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[replyToMessage]](Message [[srcMsg]], int [[what]], int [[arg1]], int [[arg2]]) { Message msg = Message.obtain(); msg.what = [[what]]; msg.arg1 = [[arg1]]; msg.arg2 = [[arg2]]; [[replyToMessage]]([[srcMsg]], msg); }
[[[[Nl]]]]: Reply to srcMsg @ param srcMsg @ param what @ param arg1 @ param arg2

[[[[Adv]]]]: public void [[disappearances]](Message [[maneuvers]], int [[reacquainted]], int [[pauley]], int [[progression]]) { Message msg = Message.obtain(); msg.what = [[reacquainted]]; msg.arg1 = [[pauley]]; msg.arg2 = [[progression]]; [[disappearances]]([[maneuvers]], msg); }
[[[[Nl]]]]: Reply to srcMsg @ param srcMsg @ param what @ param arg1 @ param arg2
--------------------------------------------- Result 161 ---------------------------------------------
[[0 (-9018%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[addPrimitiveArrayConstant]](Object [[values]]) { return addConstant(new PrimitiveArrayConstant([[values]])); }
[[[[Nl]]]]: Finds or creates a PrimitiveArrayConstant constant pool entry with the given values

[[[[Adv]]]]: public int [[canít]](Object [[habiba]]) { return addConstant(new PrimitiveArrayConstant([[habiba]])); }
[[[[Nl]]]]: Finds or creates a PrimitiveArrayConstant constant pool entry with the given values
--------------------------------------------- Result 162 ---------------------------------------------
[[0 (-8705%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public RxGalleryFinal [[cropWithAspectRatio]](float [[x]], float [[y]]) { configuration.setAspectRatioX([[x]]); configuration.setAspectRatioY([[y]]); return this; }
[[[[Nl]]]]: Set an aspect ratio for crop bounds

[[[[Adv]]]]: public RxGalleryFinal [[consonants]](float [[dosages]], float [[soupçon]]) { configuration.setAspectRatioX([[dosages]]); configuration.setAspectRatioY([[soupçon]]); return this; }
[[[[Nl]]]]: Set an aspect ratio for crop bounds
--------------------------------------------- Result 163 ---------------------------------------------
[[0 (-9383%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final int [[addOverlayPath]](String [[idmapPath]]) { synchronized (this) { int [[res]] = addOverlayPathNative([[idmapPath]]); makeStringBlocks(mStringBlocks); return [[res]]; } }
[[[[Nl]]]]: Add a set of assets to overlay an already added set of assets

[[[[Adv]]]]: public final int [[categorical]](String [[codeword]]) { synchronized (this) { int [[mccloud]] = addOverlayPathNative([[codeword]]); makeStringBlocks(mStringBlocks); return [[mccloud]]; } }
[[[[Nl]]]]: Add a set of assets to overlay an already added set of assets
--------------------------------------------- Result 164 ---------------------------------------------
[[0 (-8654%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[unify]](IntSet [[s]]) throws IllegalArgumentException { if ([[s]] == null) { throw new IllegalArgumentException("s is null"); } if ([[s]].size() <= 1) { throw new IllegalArgumentException("Can't unify set of size " + [[s]].size()); } IntIterator [[it]] = [[s]].intIterator(); int [[i]] = [[it]].next(); while ([[it]].hasNext()) { [[unify]]([[i]], [[it]].next()); } }
[[[[Nl]]]]: Unify the points-to-sets for the variables identified by the set s @ param s numbers of points-to-set variables @ throws IllegalArgumentException if s is null

[[[[Adv]]]]: public void [[playacting]](IntSet [[prevented]]) throws IllegalArgumentException { if ([[prevented]] == null) { throw new IllegalArgumentException("s is null"); } if ([[prevented]].size() <= 1) { throw new IllegalArgumentException("Can't unify set of size " + [[prevented]].size()); } IntIterator [[manhandling]] = [[prevented]].intIterator(); int [[disarm]] = [[manhandling]].next(); while ([[manhandling]].hasNext()) { [[playacting]]([[disarm]], [[manhandling]].next()); } }
[[[[Nl]]]]: Unify the points-to-sets for the variables identified by the set s @ param s numbers of points-to-set variables @ throws IllegalArgumentException if s is null
--------------------------------------------- Result 165 ---------------------------------------------
[[0 (-8644%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private Collection<String> [[getItemsToCopy]](String [[path]]) throws IOException { Collection<String> items = new ArrayList<>(); Queue<String> [[queue]] = new ArrayDeque<>(); [[queue]].offer([[path]]); while (![[queue]].isEmpty()) { [[path]] = [[queue]].poll(); String[] [[list]] = mAssetManager.list([[path]]); for (String [[nested]] : [[list]]) { if (!"".equals([[path]])) { [[queue]].offer([[path]] + "/" + [[nested]]); } else { [[queue]].offer([[nested]]); } } if ([[list]].length == 0) { Timber.i("adding %s", [[path]]); items.add([[path]]); } } return items; }
[[[[Nl]]]]: In case you want to create more smart sync implementation , this method returns the list of items which must be synchronized

[[[[Adv]]]]: private Collection<String> [[hb]](String [[climbed]]) throws IOException { Collection<String> items = new ArrayList<>(); Queue<String> [[badness]] = new ArrayDeque<>(); [[badness]].offer([[climbed]]); while (![[badness]].isEmpty()) { [[climbed]] = [[badness]].poll(); String[] [[screeches]] = mAssetManager.list([[climbed]]); for (String [[villas]] : [[screeches]]) { if (!"".equals([[climbed]])) { [[badness]].offer([[climbed]] + "/" + [[villas]]); } else { [[badness]].offer([[villas]]); } } if ([[screeches]].length == 0) { Timber.i("adding %s", [[climbed]]); items.add([[climbed]]); } } return items; }
[[[[Nl]]]]: In case you want to create more smart sync implementation , this method returns the list of items which must be synchronized
--------------------------------------------- Result 166 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 166 / 0 / 166:  21%|██        | 166/785 [20:36<1:16:49,  7.45s/it][Succeeded / Failed / Skipped / Total] 0 / 166 / 0 / 166:  21%|██▏       | 167/785 [20:52<1:17:13,  7.50s/it][Succeeded / Failed / Skipped / Total] 0 / 167 / 0 / 167:  21%|██▏       | 167/785 [20:52<1:17:13,  7.50s/it][Succeeded / Failed / Skipped / Total] 0 / 167 / 0 / 167:  21%|██▏       | 168/785 [21:01<1:17:12,  7.51s/it][Succeeded / Failed / Skipped / Total] 0 / 168 / 0 / 168:  21%|██▏       | 168/785 [21:01<1:17:12,  7.51s/it][Succeeded / Failed / Skipped / Total] 0 / 168 / 0 / 168:  22%|██▏       | 169/785 [21:09<1:17:08,  7.51s/it][Succeeded / Failed / Skipped / Total] 0 / 169 / 0 / 169:  22%|██▏       | 169/785 [21:09<1:17:08,  7.51s/it][Succeeded / Failed / Skipped / Total] 0 / 169 / 0 / 169:  22%|██▏       | 170/785 [21:11<1:16:38,  7.48s/it][Succeeded / Failed / Skipped / Total] 0 / 170 / 0 / 170:  22%|██▏       | 170/785 [21:11<1:16:38,  7.48s/it][Succeeded / Failed / Skipped / Total] 0 / 170 / 0 / 170:  22%|██▏       | 171/785 [21:20<1:16:39,  7.49s/it][Succeeded / Failed / Skipped / Total] 0 / 171 / 0 / 171:  22%|██▏       | 171/785 [21:20<1:16:39,  7.49s/it][Succeeded / Failed / Skipped / Total] 0 / 171 / 0 / 171:  22%|██▏       | 172/785 [21:30<1:16:38,  7.50s/it][Succeeded / Failed / Skipped / Total] 0 / 172 / 0 / 172:  22%|██▏       | 172/785 [21:30<1:16:38,  7.50s/it][Succeeded / Failed / Skipped / Total] 0 / 172 / 0 / 172:  22%|██▏       | 173/785 [21:36<1:16:26,  7.50s/it][Succeeded / Failed / Skipped / Total] 0 / 173 / 0 / 173:  22%|██▏       | 173/785 [21:36<1:16:26,  7.50s/it][Succeeded / Failed / Skipped / Total] 0 / 173 / 0 / 173:  22%|██▏       | 174/785 [21:49<1:16:37,  7.52s/it][Succeeded / Failed / Skipped / Total] 0 / 174 / 0 / 174:  22%|██▏       | 174/785 [21:49<1:16:37,  7.52s/it][Succeeded / Failed / Skipped / Total] 0 / 174 / 0 / 174:  22%|██▏       | 175/785 [21:55<1:16:25,  7.52s/it][[0 (-9573%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[getUserApps]](HashSet<String> [[outExistingApps]]) { Set<String> [[userApps]] = mPrefs.getStringSet(mPackageSetKey, null); if ([[userApps]] == null) { return "[[False]]" != "[[False]]"; } else { [[outExistingApps]].addAll([[userApps]]); return "[[True]]" == "[[True]]"; } }
[[[[Nl]]]]: Reads the list of user apps which have already been processed

[[[[Adv]]]]: private boolean [[mamá]](HashSet<String> [[tangle]]) { Set<String> [[reconstructing]] = mPrefs.getStringSet(mPackageSetKey, null); if ([[reconstructing]] == null) { return "[["Dragoon" != "Dragoon"]]" != "[["Dragoon" != "Dragoon"]]"; } else { [[tangle]].addAll([[reconstructing]]); return "[["Driver" == "Driver"]]" == "[["Driver" == "Driver"]]"; } }
[[[[Nl]]]]: Reads the list of user apps which have already been processed
--------------------------------------------- Result 167 ---------------------------------------------
[[0 (-9542%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static UpdateOptions [[updateOptions]](boolean [[upsert]]) { UpdateOptions [[options]] = new UpdateOptions(); [[options]].setUpsert([[upsert]]); return [[options]]; }
[[[[Nl]]]]: Creates a new { @ link UpdateOptions }

[[[[Adv]]]]: public static UpdateOptions [[soupçon]](boolean [[alessandro]]) { UpdateOptions [[inspirations]] = new UpdateOptions(); [[inspirations]].setUpsert([[alessandro]]); return [[inspirations]]; }
[[[[Nl]]]]: Creates a new { @ link UpdateOptions }
--------------------------------------------- Result 168 ---------------------------------------------
[[0 (-9282%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[parseNodes]](List<OverlayItems> [[names]], Element [[section]]) { for (Node [[n]] = [[section]].getFirstChild(); [[n]] != null; [[n]] = [[n]].getNextSibling()) { if ([[n]].getNodeType() == Node.ELEMENT_NODE) { Element [[e]] = (Element) [[n]]; if ([[e]].hasAttribute("id")) { [[names]].add(new OverlayItems([[e]].getAttribute("id"), [[e]].getTagName())); } else { [[parseNodes]]([[names]], [[e]]); } } } }
[[[[Nl]]]]: [ RECURSIVE ] Function recursively finds and parses the child elements of the input DOM element

[[[[Adv]]]]: private static void [[jacko]](List<OverlayItems> [[jetson]], Element [[teamster]]) { for (Node [[mamá]] = [[teamster]].getFirstChild(); [[mamá]] != null; [[mamá]] = [[mamá]].getNextSibling()) { if ([[mamá]].getNodeType() == Node.ELEMENT_NODE) { Element [[noose]] = (Element) [[mamá]]; if ([[noose]].hasAttribute("id")) { [[jetson]].add(new OverlayItems([[noose]].getAttribute("id"), [[noose]].getTagName())); } else { [[jacko]]([[jetson]], [[noose]]); } } } }
[[[[Nl]]]]: [ RECURSIVE ] Function recursively finds and parses the child elements of the input DOM element
--------------------------------------------- Result 169 ---------------------------------------------
[[0 (-9288%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isSystemBarOnBottom]](Context [[ctx]]) { WindowManager wm = (WindowManager) [[ctx]].getSystemService(Context.WINDOW_SERVICE); DisplayMetrics [[metrics]] = new DisplayMetrics(); wm.getDefaultDisplay().getMetrics([[metrics]]); Configuration [[cfg]] = [[ctx]].getResources().getConfiguration(); boolean [[canMove]] = ([[metrics]].widthPixels != [[metrics]].heightPixels && [[cfg]].smallestScreenWidthDp < 600); return (![[canMove]] || [[metrics]].widthPixels < [[metrics]].heightPixels); }
[[[[Nl]]]]: helper to check if the system bar is on the bottom of the screen @ param ctx @ return

[[[[Adv]]]]: public static boolean [[forwarding]](Context [[nicknames]]) { WindowManager wm = (WindowManager) [[nicknames]].getSystemService(Context.WINDOW_SERVICE); DisplayMetrics [[factions]] = new DisplayMetrics(); wm.getDefaultDisplay().getMetrics([[factions]]); Configuration [[gusts]] = [[nicknames]].getResources().getConfiguration(); boolean [[resignations]] = ([[factions]].widthPixels != [[factions]].heightPixels && [[gusts]].smallestScreenWidthDp < 600); return (![[resignations]] || [[factions]].widthPixels < [[factions]].heightPixels); }
[[[[Nl]]]]: helper to check if the system bar is on the bottom of the screen @ param ctx @ return
--------------------------------------------- Result 170 ---------------------------------------------
[[0 (-9504%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setAAPublicKey]](PublicKey [[aaPublicKey]]) { DG15File [[dg15file]] = new DG15File([[aaPublicKey]]); putFile(PassportService.EF_DG15, [[dg15file]].getEncoded()); }
[[[[Nl]]]]: Sets the public key for AA

[[[[Adv]]]]: public void [[zweig]](PublicKey [[interceded]]) { DG15File [[prevented]] = new DG15File([[interceded]]); putFile(PassportService.EF_DG15, [[prevented]].getEncoded()); }
[[[[Nl]]]]: Sets the public key for AA
--------------------------------------------- Result 171 ---------------------------------------------
[[0 (-8744%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[execSQL]](String [[sql]], Object[] [[bindArgs]]) throws SQLException { if ([[bindArgs]] == null) { throw new IllegalArgumentException("Empty bindArgs"); } executeSql([[sql]], [[bindArgs]]); }
[[[[Nl]]]]: Execute a single SQL statement that is NOT a SELECTINSERTUPDATEDELETE

[[[[Adv]]]]: public void [[bottoms]](String [[unclouded]], Object[] [[symbolizes]]) throws SQLException { if ([[symbolizes]] == null) { throw new IllegalArgumentException("Empty bindArgs"); } executeSql([[unclouded]], [[symbolizes]]); }
[[[[Nl]]]]: Execute a single SQL statement that is NOT a SELECTINSERTUPDATEDELETE
--------------------------------------------- Result 172 ---------------------------------------------
[[0 (-8879%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public ListUserPoolClientsRequest [[withUserPoolId]](String [[userPoolId]]) { this.[[userPoolId]] = [[userPoolId]]; return this; }
[[[[Nl]]]]: < p > The user pool ID for the user pool where you want to list user pool clients

[[[[Adv]]]]: public ListUserPoolClientsRequest [[fraternize]](String [[hallucinogen]]) { this.[[uproot]] = [[hallucinogen]]; return this; }
[[[[Nl]]]]: < p > The user pool ID for the user pool where you want to list user pool clients
--------------------------------------------- Result 173 ---------------------------------------------
[[0 (-10355%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public List<Server> [[getServers]]() { List<Server> [[servers]] = new ArrayList<>(this.[[servers]].size()); for (int [[i]] = 0; [[i]] < this.[[servers]].size(); [[i]]++) { [[servers]].add(this.[[servers]].valueAt([[i]])); } return [[servers]]; }
[[[[Nl]]]]: Get list of servers @ return list of servers

[[[[Adv]]]]: public List<Server> [[undoing]]() { List<Server> [[gropes]] = new ArrayList<>(this.[[symmetry]].size()); for (int [[sleepwalks]] = 0; [[sleepwalks]] < this.[[symmetry]].size(); [[sleepwalks]]++) { [[gropes]].add(this.[[symmetry]].valueAt([[sleepwalks]])); } return [[gropes]]; }
[[[[Nl]]]]: Get list of servers @ return list of servers
--------------------------------------------- Result 174 ---------------------------------------------
[[0 (-9938%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public SnapshotDiskContainer [[withDescription]](String [[description]]) { this.[[description]] = [[description]]; return this; }
[[[[Nl]]]]: The description of the disk image being imported

[[[[Adv]]]]: public SnapshotDiskContainer [[forerunner]](String [[buddies]]) { this.[[mullins]] = [[buddies]]; return this; }
[[[[Nl]]]]: The description of the disk image being imported
--------------------------------------------- Result 175 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 175 / 0 / 175:  22%|██▏       | 175/785 [21:55<1:16:25,  7.52s/it][Succeeded / Failed / Skipped / Total] 0 / 175 / 0 / 175:  22%|██▏       | 176/785 [21:56<1:15:56,  7.48s/it][Succeeded / Failed / Skipped / Total] 0 / 176 / 0 / 176:  22%|██▏       | 176/785 [21:56<1:15:56,  7.48s/it][Succeeded / Failed / Skipped / Total] 0 / 176 / 0 / 176:  23%|██▎       | 177/785 [22:01<1:15:40,  7.47s/it][Succeeded / Failed / Skipped / Total] 0 / 177 / 0 / 177:  23%|██▎       | 177/785 [22:01<1:15:40,  7.47s/it][Succeeded / Failed / Skipped / Total] 0 / 177 / 0 / 177:  23%|██▎       | 178/785 [22:14<1:15:50,  7.50s/it][Succeeded / Failed / Skipped / Total] 0 / 178 / 0 / 178:  23%|██▎       | 178/785 [22:14<1:15:50,  7.50s/it][Succeeded / Failed / Skipped / Total] 0 / 178 / 0 / 178:  23%|██▎       | 179/785 [22:15<1:15:20,  7.46s/it][Succeeded / Failed / Skipped / Total] 0 / 179 / 0 / 179:  23%|██▎       | 179/785 [22:15<1:15:20,  7.46s/it][Succeeded / Failed / Skipped / Total] 0 / 179 / 0 / 179:  23%|██▎       | 180/785 [22:20<1:15:06,  7.45s/it][Succeeded / Failed / Skipped / Total] 0 / 180 / 0 / 180:  23%|██▎       | 180/785 [22:20<1:15:06,  7.45s/it][Succeeded / Failed / Skipped / Total] 0 / 180 / 0 / 180:  23%|██▎       | 181/785 [22:31<1:15:09,  7.47s/it][Succeeded / Failed / Skipped / Total] 0 / 181 / 0 / 181:  23%|██▎       | 181/785 [22:31<1:15:09,  7.47s/it][Succeeded / Failed / Skipped / Total] 0 / 181 / 0 / 181:  23%|██▎       | 182/785 [22:34<1:14:48,  7.44s/it][Succeeded / Failed / Skipped / Total] 0 / 182 / 0 / 182:  23%|██▎       | 182/785 [22:34<1:14:48,  7.44s/it][Succeeded / Failed / Skipped / Total] 0 / 182 / 0 / 182:  23%|██▎       | 183/785 [22:38<1:14:27,  7.42s/it][Succeeded / Failed / Skipped / Total] 0 / 183 / 0 / 183:  23%|██▎       | 183/785 [22:38<1:14:27,  7.42s/it][Succeeded / Failed / Skipped / Total] 0 / 183 / 0 / 183:  23%|██▎       | 184/785 [22:51<1:14:38,  7.45s/it][[0 (-7079%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static boolean isPlaintext(Buffer [[buffer]]) { try { Buffer [[prefix]] = new Buffer(); long [[byteCount]] = [[buffer]].size() < 64 ? [[buffer]].size() : 64; [[buffer]].copyTo([[prefix]], 0, [[byteCount]]); for (int i = 0; i < 16; i++) { if ([[prefix]].exhausted()) { break; } int [[codePoint]] = [[prefix]].readUtf8CodePoint(); if (Character.isISOControl([[codePoint]]) && !Character.isWhitespace([[codePoint]])) { return False; } } return "[[True]]" == "[[True]]"; } catch (EOFException e) { return False; } }
[[[[Nl]]]]: Returns true if the body in question probably contains human readable text

[[[[Adv]]]]: static boolean isPlaintext(Buffer [[undoing]]) { try { Buffer [[plunger]] = new Buffer(); long [[conversion]] = [[undoing]].size() < 64 ? [[undoing]].size() : 64; [[undoing]].copyTo([[plunger]], 0, [[conversion]]); for (int i = 0; i < 16; i++) { if ([[plunger]].exhausted()) { break; } int [[concertina]] = [[plunger]].readUtf8CodePoint(); if (Character.isISOControl([[concertina]]) && !Character.isWhitespace([[concertina]])) { return False; } } return "[["Seductive" == "Seductive"]]" == "[["Seductive" == "Seductive"]]"; } catch (EOFException e) { return False; } }
[[[[Nl]]]]: Returns true if the body in question probably contains human readable text
--------------------------------------------- Result 176 ---------------------------------------------
[[0 (-10433%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static WifiManager [[getWifiManager]](Context [[context]]) { if ([[context]] == null) return null; WifiManager [[wifiManager]] = null; [[wifiManager]] = (WifiManager) [[context]].getSystemService(Context.WIFI_SERVICE); return [[wifiManager]]; }
[[[[Nl]]]]: wifi 's state can change so everytime calling this method we must get a new WifiManager @ param context @ return

[[[[Adv]]]]: public static WifiManager [[paraphrase]](Context [[taboo]]) { if ([[taboo]] == null) return null; WifiManager [[canfield]] = null; [[canfield]] = (WifiManager) [[taboo]].getSystemService(Context.WIFI_SERVICE); return [[canfield]]; }
[[[[Nl]]]]: wifi 's state can change so everytime calling this method we must get a new WifiManager @ param context @ return
--------------------------------------------- Result 177 ---------------------------------------------
[[0 (-8087%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[giveMap]](@NonNull HomePresenterImpl [[impl]]) { [[impl]].onMapAvailable(mMapApiMock); }
[[[[Nl]]]]: Give a ready to be used map to the given presenter @ param impl the presenter

[[[[Adv]]]]: private void [[grapevines]](@NonNull HomePresenterImpl [[cats]]) { [[cats]].onMapAvailable(mMapApiMock); }
[[[[Nl]]]]: Give a ready to be used map to the given presenter @ param impl the presenter
--------------------------------------------- Result 178 ---------------------------------------------
[[0 (-9234%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public GetObjectRequest [[withUnmodifiedSinceConstraint]](Date [[date]]) { setUnmodifiedSinceConstraint([[date]]); return this; }
[[[[Nl]]]]: Sets the optional unmodified constraint that restricts this request to executing only if the object has < b > not < b > been modified after the specified date

[[[[Adv]]]]: public GetObjectRequest [[heirlooms]](Date [[tatta]]) { setUnmodifiedSinceConstraint([[tatta]]); return this; }
[[[[Nl]]]]: Sets the optional unmodified constraint that restricts this request to executing only if the object has < b > not < b > been modified after the specified date
--------------------------------------------- Result 179 ---------------------------------------------
[[0 (-10815%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static InvalidationService [[getForProfile]](Profile [[profile]]) { ThreadUtils.assertOnUiThread(); InvalidationService [[service]] = sServiceMap.get([[profile]]); if ([[service]] == null) { [[service]] = nativeGetForProfile([[profile]]); sServiceMap.put([[profile]], [[service]]); } return [[service]]; }
[[[[Nl]]]]: Returns Java InvalidationService for the given Profile

[[[[Adv]]]]: public static InvalidationService [[cafés]](Profile [[glória]]) { ThreadUtils.assertOnUiThread(); InvalidationService [[maca]] = sServiceMap.get([[glória]]); if ([[maca]] == null) { [[maca]] = nativeGetForProfile([[glória]]); sServiceMap.put([[glória]], [[maca]]); } return [[maca]]; }
[[[[Nl]]]]: Returns Java InvalidationService for the given Profile
--------------------------------------------- Result 180 ---------------------------------------------
[[0 (-8056%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public long [[getWidth]]() { return width; }
[[[[Nl]]]]: Returns the width

[[[[Adv]]]]: public long [[bookworms]]() { return width; }
[[[[Nl]]]]: Returns the width
--------------------------------------------- Result 181 ---------------------------------------------
[[0 (-11065%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void calcOpticalFlowPyrLK(Mat [[prevImg]], Mat [[nextImg]], MatOfPoint2f [[prevPts]], MatOfPoint2f nextPts, MatOfByte status, MatOfFloat [[err]], Size winSize, int maxLevel) { Mat prevPts_mat = [[prevPts]]; Mat nextPts_mat = nextPts; Mat status_mat = status; Mat [[err_mat]] = [[err]]; calcOpticalFlowPyrLK_1([[prevImg]].nativeObj, [[nextImg]].nativeObj, prevPts_mat.nativeObj, nextPts_mat.nativeObj, status_mat.nativeObj, [[err_mat]].nativeObj, winSize.width, winSize.height, maxLevel); return; }
[[[[Nl]]]]: javadoc : calcOpticalFlowPyrLK ( prevImg , nextImg , prevPts , nextPts , status , err , winSize , maxLevel )

[[[[Adv]]]]: public static void calcOpticalFlowPyrLK(Mat [[manuscript]], Mat [[factorial]], MatOfPoint2f [[combats]], MatOfPoint2f nextPts, MatOfByte status, MatOfFloat [[providers]], Size winSize, int maxLevel) { Mat prevPts_mat = [[combats]]; Mat nextPts_mat = nextPts; Mat status_mat = status; Mat [[truths]] = [[providers]]; calcOpticalFlowPyrLK_1([[manuscript]].nativeObj, [[factorial]].nativeObj, prevPts_mat.nativeObj, nextPts_mat.nativeObj, status_mat.nativeObj, [[truths]].nativeObj, winSize.width, winSize.height, maxLevel); return; }
[[[[Nl]]]]: javadoc : calcOpticalFlowPyrLK ( prevImg , nextImg , prevPts , nextPts , status , err , winSize , maxLevel )
--------------------------------------------- Result 182 ---------------------------------------------
[[0 (-8864%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public SamplingTimer [[getScreenOffRpmTimerLocked]](String [[name]]) { SamplingTimer [[rpmt]] = mScreenOffRpmStats.get([[name]]); if ([[rpmt]] == null) { [[rpmt]] = new SamplingTimer(mClocks, mOnBatteryScreenOffTimeBase); mScreenOffRpmStats.put([[name]], [[rpmt]]); } return [[rpmt]]; }
[[[[Nl]]]]: Get Screen-off Resource Power Manager stats

[[[[Adv]]]]: public SamplingTimer [[park]](String [[motions]]) { SamplingTimer [[duelling]] = mScreenOffRpmStats.get([[motions]]); if ([[duelling]] == null) { [[duelling]] = new SamplingTimer(mClocks, mOnBatteryScreenOffTimeBase); mScreenOffRpmStats.put([[motions]], [[duelling]]); } return [[duelling]]; }
[[[[Nl]]]]: Get Screen-off Resource Power Manager stats
--------------------------------------------- Result 183 ---------------------------------------------
[[0 (-9332%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public <T> [[Noodle]] registerType(final Class<T> type, final Description<T> description) { descriptionHashMap.put(type.getCanonicalName(), description); return this; }
[[[[Nl]]]]: Registers the type of objects which can be stored in this Noodle storage

[[[[Adv]]]]: public <T> [[Waits]] registerType(final Class<T> type, final Description<T> description) { descriptionHashMap.put(type.getCanonicalName(), description); return this; }
[[[[Nl]]]]: Registers the type of objects which can be stored in this Noodle storage
--------------------------------------------- Result 184 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 184 / 0 / 184:  23%|██▎       | 184/785 [22:51<1:14:38,  7.45s/it][Succeeded / Failed / Skipped / Total] 0 / 184 / 0 / 184:  24%|██▎       | 185/785 [22:54<1:14:19,  7.43s/it][Succeeded / Failed / Skipped / Total] 0 / 185 / 0 / 185:  24%|██▎       | 185/785 [22:54<1:14:19,  7.43s/it][Succeeded / Failed / Skipped / Total] 0 / 185 / 0 / 185:  24%|██▎       | 186/785 [23:01<1:14:08,  7.43s/it][Succeeded / Failed / Skipped / Total] 0 / 186 / 0 / 186:  24%|██▎       | 186/785 [23:01<1:14:08,  7.43s/it][Succeeded / Failed / Skipped / Total] 0 / 186 / 0 / 186:  24%|██▍       | 187/785 [23:10<1:14:06,  7.44s/it][Succeeded / Failed / Skipped / Total] 0 / 187 / 0 / 187:  24%|██▍       | 187/785 [23:10<1:14:06,  7.44s/it][Succeeded / Failed / Skipped / Total] 0 / 187 / 0 / 187:  24%|██▍       | 188/785 [23:28<1:14:33,  7.49s/it][Succeeded / Failed / Skipped / Total] 0 / 188 / 0 / 188:  24%|██▍       | 188/785 [23:28<1:14:33,  7.49s/it][Succeeded / Failed / Skipped / Total] 0 / 188 / 0 / 188:  24%|██▍       | 189/785 [23:35<1:14:22,  7.49s/it][Succeeded / Failed / Skipped / Total] 0 / 189 / 0 / 189:  24%|██▍       | 189/785 [23:35<1:14:22,  7.49s/it][Succeeded / Failed / Skipped / Total] 0 / 189 / 0 / 189:  24%|██▍       | 190/785 [23:43<1:14:16,  7.49s/it][Succeeded / Failed / Skipped / Total] 0 / 190 / 0 / 190:  24%|██▍       | 190/785 [23:43<1:14:16,  7.49s/it][Succeeded / Failed / Skipped / Total] 0 / 190 / 0 / 190:  24%|██▍       | 191/785 [23:47<1:14:00,  7.48s/it][Succeeded / Failed / Skipped / Total] 0 / 191 / 0 / 191:  24%|██▍       | 191/785 [23:47<1:14:00,  7.48s/it][Succeeded / Failed / Skipped / Total] 0 / 191 / 0 / 191:  24%|██▍       | 192/785 [23:54<1:13:50,  7.47s/it][[0 (-9911%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[refreshUserRoles]]() { if (mFilteredRecyclerView == null) { return; } PeopleAdapter [[peopleAdapter]] = (PeopleAdapter) mFilteredRecyclerView.getAdapter(); if ([[peopleAdapter]] != null) { [[peopleAdapter]].refreshUserRoles(); [[peopleAdapter]].notifyDataSetChanged(); } }
[[[[Nl]]]]: Refresh the role display names after user roles is fetched

[[[[Adv]]]]: public void [[apéritif]]() { if (mFilteredRecyclerView == null) { return; } PeopleAdapter [[startle]] = (PeopleAdapter) mFilteredRecyclerView.getAdapter(); if ([[startle]] != null) { [[startle]].refreshUserRoles(); [[startle]].notifyDataSetChanged(); } }
[[[[Nl]]]]: Refresh the role display names after user roles is fetched
--------------------------------------------- Result 185 ---------------------------------------------
[[0 (-8828%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void onGestureDetectionActiveChanged(boolean active) { final ArrayMap<FingerprintGestureCallback, Handler> [[handlerMap]]; synchronized (mLock) { [[handlerMap]] = new ArrayMap<>(mCallbackHandlerMap); } int [[numListeners]] = [[handlerMap]].size(); for (int [[i]] = 0; [[i]] < [[numListeners]]; [[i]]++) { FingerprintGestureCallback [[callback]] = [[handlerMap]].keyAt([[i]]); Handler [[handler]] = [[handlerMap]].valueAt([[i]]); if ([[handler]] != null) { [[handler]].post(() -> [[callback]].onGestureDetectionAvailabilityChanged(active)); } else { [[callback]].onGestureDetectionAvailabilityChanged(active); } } }
[[[[Nl]]]]: Called when gesture detection becomes active or inactive @ hide

[[[[Adv]]]]: public void onGestureDetectionActiveChanged(boolean active) { final ArrayMap<FingerprintGestureCallback, Handler> [[lottery]]; synchronized (mLock) { [[lottery]] = new ArrayMap<>(mCallbackHandlerMap); } int [[fiction]] = [[lottery]].size(); for (int [[chihuahuas]] = 0; [[chihuahuas]] < [[fiction]]; [[chihuahuas]]++) { FingerprintGestureCallback [[makuta]] = [[lottery]].keyAt([[chihuahuas]]); Handler [[cronin]] = [[lottery]].valueAt([[chihuahuas]]); if ([[cronin]] != null) { [[cronin]].post(() -> [[makuta]].onGestureDetectionAvailabilityChanged(active)); } else { [[makuta]].onGestureDetectionAvailabilityChanged(active); } } }
[[[[Nl]]]]: Called when gesture detection becomes active or inactive @ hide
--------------------------------------------- Result 186 ---------------------------------------------
[[0 (-9797%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public SSAInstruction[] [[getStatements]]() { SSAInstruction[] [[ret]] = new SSAInstruction[this.[[instructions]].size()]; [[ret]] = this.[[instructions]].toArray([[ret]]); for (int [[i]]=0; [[i]]<[[ret]].length; ++[[i]]) { if ([[ret]][[[i]]].equals(RESERVED)) { [[ret]][[[i]]] = null; } } return [[ret]]; }
[[[[Nl]]]]: Get all statements added to the Summary

[[[[Adv]]]]: public SSAInstruction[] [[horoscopes]]() { SSAInstruction[] [[lifesaving]] = new SSAInstruction[this.[[pedestals]].size()]; [[lifesaving]] = this.[[pedestals]].toArray([[lifesaving]]); for (int [[kingpin]]=0; [[kingpin]]<[[lifesaving]].length; ++[[kingpin]]) { if ([[lifesaving]][[[kingpin]]].equals(RESERVED)) { [[lifesaving]][[[kingpin]]] = null; } } return [[lifesaving]]; }
[[[[Nl]]]]: Get all statements added to the Summary
--------------------------------------------- Result 187 ---------------------------------------------
[[0 (-9795%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isConnected]](String [[clientHandle]]) { MqttConnection [[client]] = getConnection([[clientHandle]]); return [[client]].isConnected(); }
[[[[Nl]]]]: Get the status of a specific client @ param clientHandle identifies the MqttConnection to use @ return true if the specified client is connected to an MQTT server

[[[[Adv]]]]: public boolean [[grasses]](String [[margareth]]) { MqttConnection [[sancti]] = getConnection([[margareth]]); return [[sancti]].isConnected(); }
[[[[Nl]]]]: Get the status of a specific client @ param clientHandle identifies the MqttConnection to use @ return true if the specified client is connected to an MQTT server
--------------------------------------------- Result 188 ---------------------------------------------
[[0 (-9214%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private String doCreateParcelableCastIfExtraIsParcelable(TypeMirror [[extraType]]) { String [[castToParcelableIfNecessary]] = ""; if ([[extraType]] instanceof DeclaredType) { boolean [[isParcelable]] = "[[False]]" != "[[False]]"; final TypeElement [[typeElement]] = (TypeElement) ((DeclaredType) [[extraType]]).asElement(); for (TypeMirror interfaceType : [[typeElement]].getInterfaces()) { if ("android.os.Parcelable".equals(interfaceType.toString())) { [[isParcelable]] = True; } } if ([[isParcelable]]) { [[castToParcelableIfNecessary]] = "(android.os.Parcelable)"; } } return [[castToParcelableIfNecessary]]; }
[[[[Nl]]]]: This method returns either an empty String or { @ code `` ( Parcelable ) '' } if the extra type is Parcelable

[[[[Adv]]]]: private String doCreateParcelableCastIfExtraIsParcelable(TypeMirror [[hansons]]) { String [[autographs]] = ""; if ([[hansons]] instanceof DeclaredType) { boolean [[motions]] = "[["Henpecked" != "Henpecked"]]" != "[["Henpecked" != "Henpecked"]]"; final TypeElement [[glória]] = (TypeElement) ((DeclaredType) [[hansons]]).asElement(); for (TypeMirror interfaceType : [[glória]].getInterfaces()) { if ("android.os.Parcelable".equals(interfaceType.toString())) { [[motions]] = True; } } if ([[motions]]) { [[autographs]] = "(android.os.Parcelable)"; } } return [[autographs]]; }
[[[[Nl]]]]: This method returns either an empty String or { @ code `` ( Parcelable ) '' } if the extra type is Parcelable
--------------------------------------------- Result 189 ---------------------------------------------
[[0 (-1148%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[setRequestStatus]](Context [[context]], String [[jid]], int [[status]]) { ContentValues [[values]] = new ContentValues(1); [[values]].put(MyMessages.Threads.REQUEST_STATUS, [[status]]); return [[context]].getContentResolver().update(MyMessages.Threads.Requests.CONTENT_URI, [[values]], MyMessages.Threads.PEER + "=?", new String[] { [[jid]] }); }
[[[[Nl]]]]: FIXME what is this doing here

[[[[Adv]]]]: public static int [[faint]](Context [[lunch]], String [[quarrelled]], int [[succinct]]) { ContentValues [[carline]] = new ContentValues(1); [[carline]].put(MyMessages.Threads.REQUEST_STATUS, [[succinct]]); return [[lunch]].getContentResolver().update(MyMessages.Threads.Requests.CONTENT_URI, [[carline]], MyMessages.Threads.PEER + "=?", new String[] { [[quarrelled]] }); }
[[[[Nl]]]]: FIXME what is this doing here
--------------------------------------------- Result 190 ---------------------------------------------
[[0 (-9683%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[writeFileFromBytesByMap]](final String [[filePath]], final byte[] [[bytes]], final boolean [[append]], final boolean [[isForce]]) { return [[writeFileFromBytesByMap]](getFileByPath([[filePath]]), [[bytes]], [[append]], [[isForce]]); }
[[[[Nl]]]]: rite file from bytes by map

[[[[Adv]]]]: public static boolean [[incompatible]](final String [[traversed]], final byte[] [[prospectus]], final boolean [[cellblock]], final boolean [[psychos]]) { return [[incompatible]](getFileByPath([[traversed]]), [[prospectus]], [[cellblock]], [[psychos]]); }
[[[[Nl]]]]: rite file from bytes by map
--------------------------------------------- Result 191 ---------------------------------------------
[[0 (-7610%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[requestPage]](int [[page]]) { if (dataFetcher != null && !dataFetcher.alreadyFetching([[page]])) { dataFetcher.requestData([[page]]); } }
[[[[Nl]]]]: Request the content for the given position

[[[[Adv]]]]: protected void [[freezers]](int [[hydrophone]]) { if (dataFetcher != null && !dataFetcher.alreadyFetching([[hydrophone]])) { dataFetcher.requestData([[hydrophone]]); } }
[[[[Nl]]]]: Request the content for the given position
--------------------------------------------- Result 192 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 192 / 0 / 192:  24%|██▍       | 192/785 [23:54<1:13:50,  7.47s/it][Succeeded / Failed / Skipped / Total] 0 / 192 / 0 / 192:  25%|██▍       | 193/785 [24:01<1:13:42,  7.47s/it][Succeeded / Failed / Skipped / Total] 0 / 193 / 0 / 193:  25%|██▍       | 193/785 [24:01<1:13:42,  7.47s/it][Succeeded / Failed / Skipped / Total] 0 / 193 / 0 / 193:  25%|██▍       | 194/785 [24:16<1:13:57,  7.51s/it][Succeeded / Failed / Skipped / Total] 0 / 194 / 0 / 194:  25%|██▍       | 194/785 [24:16<1:13:57,  7.51s/it][Succeeded / Failed / Skipped / Total] 0 / 194 / 0 / 194:  25%|██▍       | 195/785 [24:21<1:13:40,  7.49s/it][Succeeded / Failed / Skipped / Total] 0 / 195 / 0 / 195:  25%|██▍       | 195/785 [24:21<1:13:40,  7.49s/it][Succeeded / Failed / Skipped / Total] 0 / 195 / 0 / 195:  25%|██▍       | 196/785 [24:27<1:13:29,  7.49s/it][Succeeded / Failed / Skipped / Total] 0 / 196 / 0 / 196:  25%|██▍       | 196/785 [24:27<1:13:29,  7.49s/it][Succeeded / Failed / Skipped / Total] 0 / 196 / 0 / 196:  25%|██▌       | 197/785 [24:29<1:13:05,  7.46s/it][Succeeded / Failed / Skipped / Total] 0 / 197 / 0 / 197:  25%|██▌       | 197/785 [24:29<1:13:05,  7.46s/it][Succeeded / Failed / Skipped / Total] 0 / 197 / 0 / 197:  25%|██▌       | 198/785 [24:35<1:12:55,  7.45s/it][Succeeded / Failed / Skipped / Total] 0 / 198 / 0 / 198:  25%|██▌       | 198/785 [24:35<1:12:55,  7.45s/it][Succeeded / Failed / Skipped / Total] 0 / 198 / 0 / 198:  25%|██▌       | 199/785 [24:54<1:13:20,  7.51s/it][Succeeded / Failed / Skipped / Total] 0 / 199 / 0 / 199:  25%|██▌       | 199/785 [24:54<1:13:20,  7.51s/it][Succeeded / Failed / Skipped / Total] 0 / 199 / 0 / 199:  25%|██▌       | 200/785 [24:56<1:12:56,  7.48s/it][Succeeded / Failed / Skipped / Total] 0 / 200 / 0 / 200:  25%|██▌       | 200/785 [24:56<1:12:56,  7.48s/it][Succeeded / Failed / Skipped / Total] 0 / 200 / 0 / 200:  26%|██▌       | 201/785 [25:10<1:13:08,  7.51s/it][[0 (-9538%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[authenticationFails]]() { if (pendingCallback == null) { throw new IllegalStateException("No active fingerprint authentication request."); } pendingCallback.onAuthenticationFailed(); }
[[[[Nl]]]]: Simulates a failed fingerprint authentication

[[[[Adv]]]]: public void [[riverview]]() { if (pendingCallback == null) { throw new IllegalStateException("No active fingerprint authentication request."); } pendingCallback.onAuthenticationFailed(); }
[[[[Nl]]]]: Simulates a failed fingerprint authentication
--------------------------------------------- Result 193 ---------------------------------------------
[[0 (-8721%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[logFirebaseEvent]](@NonNull String [[eventName]], @NonNull Bundle [[eventBundle]]) { String [[csv]] = [[eventName]]; for (String [[parameterName]] : [[eventBundle]].keySet()) { [[csv]] += "," + [[parameterName]] + "," + [[eventBundle]].get([[parameterName]]); } logger.debug([[csv]]); tracker.logEvent([[eventName]], [[eventBundle]]); }
[[[[Nl]]]]: This function is used to send the event to Firebase and log the output

[[[[Adv]]]]: private void [[tint]](@NonNull String [[clichés]], @NonNull Bundle [[checkpoints]]) { String [[clicker]] = [[clichés]]; for (String [[í]] : [[checkpoints]].keySet()) { [[clicker]] += "," + [[í]] + "," + [[checkpoints]].get([[í]]); } logger.debug([[clicker]]); tracker.logEvent([[clichés]], [[checkpoints]]); }
[[[[Nl]]]]: This function is used to send the event to Firebase and log the output
--------------------------------------------- Result 194 ---------------------------------------------
[[0 (-8974%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Resource [[getResource]](String [[name]], boolean [[check]]) { Loader [[loader]]; for (int i = 0; ([[loader]] = getLoader(i)) != null; i++) { Resource [[res]] = [[loader]].getResource([[name]], [[check]]); if ([[res]] != null) { return [[res]]; } } return null; }
[[[[Nl]]]]: Finds the first Resource on the URL search path which has the specified name

[[[[Adv]]]]: public Resource [[simms]](String [[soldering]], boolean [[stéphane]]) { Loader [[staffing]]; for (int i = 0; ([[staffing]] = getLoader(i)) != null; i++) { Resource [[denomination]] = [[staffing]].getResource([[soldering]], [[stéphane]]); if ([[denomination]] != null) { return [[denomination]]; } } return null; }
[[[[Nl]]]]: Finds the first Resource on the URL search path which has the specified name
--------------------------------------------- Result 195 ---------------------------------------------
[[0 (-9657%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static AssetManager [[extractAssets]](URL [[jar]], String [[assetManagerName]]) { AssetManager [[assetManager]] = new AssetManager([[assetManagerName]]); [[extractAssets]]([[jar]], [[assetManager]]); addAssetManager([[assetManager]]); return [[assetManager]]; }
[[[[Nl]]]]: Extracts assets from the jar

[[[[Adv]]]]: public static AssetManager [[mops]](URL [[projecting]], String [[nationalized]]) { AssetManager [[dulles]] = new AssetManager([[nationalized]]); [[mops]]([[projecting]], [[dulles]]); addAssetManager([[dulles]]); return [[dulles]]; }
[[[[Nl]]]]: Extracts assets from the jar
--------------------------------------------- Result 196 ---------------------------------------------
[[0 (-9217%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[exitVRIfNecessary]](boolean [[returnTo2D]]) { if (!mVrAvailable) return "[[False]]" != "[[False]]"; if (!mInVr) return "[[False]]" != "[[False]]"; shutdownVR([[returnTo2D]], "[[False]]" != "[[False]]"); return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Exits the current VR mode ( WebVR or VRShell ) @ return Whether or not we exited VR

[[[[Adv]]]]: public boolean [[offer]](boolean [[apéritif]]) { if (!mVrAvailable) return "[["Thejob" != "Thejob"]]" != "[["Thejob" != "Thejob"]]"; if (!mInVr) return "[["Thejob" != "Thejob"]]" != "[["Thejob" != "Thejob"]]"; shutdownVR([[apéritif]], "[["Thejob" != "Thejob"]]" != "[["Thejob" != "Thejob"]]"); return "[["Despondency" == "Despondency"]]" == "[["Despondency" == "Despondency"]]"; }
[[[[Nl]]]]: Exits the current VR mode ( WebVR or VRShell ) @ return Whether or not we exited VR
--------------------------------------------- Result 197 ---------------------------------------------
[[0 (-9198%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[write]](String [[fileName]]) { write_0(nativeObj, [[fileName]]); return; }
[[[[Nl]]]]: javadoc : javaDescriptorExtractor : :write ( fileName )

[[[[Adv]]]]: public void [[swimsuit]](String [[monthly]]) { write_0(nativeObj, [[monthly]]); return; }
[[[[Nl]]]]: javadoc : javaDescriptorExtractor : :write ( fileName )
--------------------------------------------- Result 198 ---------------------------------------------
[[0 (-7369%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getColor]]() { return this.getEntry(0).getColor(); }
[[[[Nl]]]]: Retrieve line 's color

[[[[Adv]]]]: public int [[arks]]() { return this.getEntry(0).getColor(); }
[[[[Nl]]]]: Retrieve line 's color
--------------------------------------------- Result 199 ---------------------------------------------
[[0 (-9314%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private byte[] [[getCopyOfArray]](byte[] [[arr]]) { byte[] [[data]] = null; if ([[arr]] != null) { int [[len]] = [[arr]].length; [[data]] = new byte[[[len]]]; System.arraycopy([[arr]], 0, [[data]], 0, [[len]]); } return [[data]]; }
[[[[Nl]]]]: Returns a copy of the given array

[[[[Adv]]]]: private byte[] [[macaw]](byte[] [[papas]]) { byte[] [[martín]] = null; if ([[papas]] != null) { int [[busload]] = [[papas]].length; [[martín]] = new byte[[[busload]]]; System.arraycopy([[papas]], 0, [[martín]], 0, [[busload]]); } return [[martín]]; }
[[[[Nl]]]]: Returns a copy of the given array
--------------------------------------------- Result 200 ---------------------------------------------
[[0 (-8649%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[hasReorderSolution]](ItemInfo [[itemInfo]]) { int[] [[cellPoint]] = new int[2]; for (int cellX = 0; cellX < getCountX(); cellX++) { for (int [[cellY]] = 0; [[cellY]] < getCountY(); [[cellY]]++) { cellToPoint(cellX, [[cellY]], [[cellPoint]]); if (findReorderSolution([[cellPoint]][0], [[cellPoint]][1], [[itemInfo]].minSpanX, [[itemInfo]].minSpanY, [[itemInfo]].spanX, [[itemInfo]].spanY, mDirectionVector, null, True, new ItemConfiguration()).isSolution) { return True; } } } return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: Returns whether an item can be placed in this CellLayout ( after rearranging andor resizing if necessary )

[[[[Adv]]]]: public boolean [[finn]](ItemInfo [[raffle]]) { int[] [[stéphane]] = new int[2]; for (int cellX = 0; cellX < getCountX(); cellX++) { for (int [[leticia]] = 0; [[leticia]] < getCountY(); [[leticia]]++) { cellToPoint(cellX, [[leticia]], [[stéphane]]); if (findReorderSolution([[stéphane]][0], [[stéphane]][1], [[raffle]].minSpanX, [[raffle]].minSpanY, [[raffle]].spanX, [[raffle]].spanY, mDirectionVector, null, True, new ItemConfiguration()).isSolution) { return True; } } } return "[["Prospectus" != "Prospectus"]]" != "[["Prospectus" != "Prospectus"]]"; }
[[[[Nl]]]]: Returns whether an item can be placed in this CellLayout ( after rearranging andor resizing if necessary )
--------------------------------------------- Result 201 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 201 / 0 / 201:  26%|██▌       | 201/785 [25:10<1:13:08,  7.51s/it][Succeeded / Failed / Skipped / Total] 0 / 201 / 0 / 201:  26%|██▌       | 202/785 [25:14<1:12:51,  7.50s/it][Succeeded / Failed / Skipped / Total] 0 / 202 / 0 / 202:  26%|██▌       | 202/785 [25:14<1:12:51,  7.50s/it][Succeeded / Failed / Skipped / Total] 0 / 202 / 0 / 202:  26%|██▌       | 203/785 [25:17<1:12:29,  7.47s/it][Succeeded / Failed / Skipped / Total] 0 / 203 / 0 / 203:  26%|██▌       | 203/785 [25:17<1:12:29,  7.47s/it][Succeeded / Failed / Skipped / Total] 0 / 203 / 0 / 203:  26%|██▌       | 204/785 [25:21<1:12:13,  7.46s/it][Succeeded / Failed / Skipped / Total] 0 / 204 / 0 / 204:  26%|██▌       | 204/785 [25:21<1:12:13,  7.46s/it][Succeeded / Failed / Skipped / Total] 0 / 204 / 0 / 204:  26%|██▌       | 205/785 [25:30<1:12:11,  7.47s/it][Succeeded / Failed / Skipped / Total] 0 / 205 / 0 / 205:  26%|██▌       | 205/785 [25:30<1:12:11,  7.47s/it][Succeeded / Failed / Skipped / Total] 0 / 205 / 0 / 205:  26%|██▌       | 206/785 [25:37<1:12:01,  7.46s/it][Succeeded / Failed / Skipped / Total] 0 / 206 / 0 / 206:  26%|██▌       | 206/785 [25:37<1:12:01,  7.46s/it][Succeeded / Failed / Skipped / Total] 0 / 206 / 0 / 206:  26%|██▋       | 207/785 [25:41<1:11:44,  7.45s/it][Succeeded / Failed / Skipped / Total] 0 / 207 / 0 / 207:  26%|██▋       | 207/785 [25:41<1:11:44,  7.45s/it][Succeeded / Failed / Skipped / Total] 0 / 207 / 0 / 207:  26%|██▋       | 208/785 [25:56<1:11:58,  7.49s/it][Succeeded / Failed / Skipped / Total] 0 / 208 / 0 / 208:  26%|██▋       | 208/785 [25:56<1:11:58,  7.49s/it][Succeeded / Failed / Skipped / Total] 0 / 208 / 0 / 208:  27%|██▋       | 209/785 [26:01<1:11:43,  7.47s/it][[0 (-8483%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[forEachNonSubBlockDepthFirst0]]( BasicBlock [[next]], BasicBlock.Visitor v, BitSet [[visited]]) { v.visitBlock([[next]]); [[visited]].set([[next]].getLabel()); IntList successors = [[next]].getSuccessors(); int sz = successors.size(); for (int [[i]] = 0; [[i]] < sz; [[i]]++) { int [[succ]] = successors.get([[i]]); if ([[visited]].get([[succ]])) { continue; } if (isSubroutineCaller([[next]]) && [[i]] > 0) { continue; } int idx = labelToResultIndex([[succ]]); if (idx >= 0) { [[forEachNonSubBlockDepthFirst0]](result.get(idx), v, [[visited]]); } } }
[[[[Nl]]]]: Visits each block once in depth-first successor order , ignoring { @ code jsr } targets

[[[[Adv]]]]: private void [[aborted]]( BasicBlock [[facet]], BasicBlock.Visitor v, BitSet [[cicadas]]) { v.visitBlock([[facet]]); [[cicadas]].set([[facet]].getLabel()); IntList successors = [[facet]].getSuccessors(); int sz = successors.size(); for (int [[disciplining]] = 0; [[disciplining]] < sz; [[disciplining]]++) { int [[subscription]] = successors.get([[disciplining]]); if ([[cicadas]].get([[subscription]])) { continue; } if (isSubroutineCaller([[facet]]) && [[disciplining]] > 0) { continue; } int idx = labelToResultIndex([[subscription]]); if (idx >= 0) { [[aborted]](result.get(idx), v, [[cicadas]]); } } }
[[[[Nl]]]]: Visits each block once in depth-first successor order , ignoring { @ code jsr } targets
--------------------------------------------- Result 202 ---------------------------------------------
[[0 (-9359%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getDefaultApp]](Set<String> [[supportedApps]]) { String [[defaultApp]] = getAut(); if (getLaunchActivity() != null) { return [[defaultApp]]; } if (![[defaultApp]].contains(":")) { return getDefaultVersion([[supportedApps]], [[defaultApp]]); } return [[supportedApps]].contains([[defaultApp]]) ? [[defaultApp]] : null; }
[[[[Nl]]]]: Returns the application under test in the format of `` appName : appVersion '' , or `` appName '' if the supported application does not have any version associated with it , or returns null if the requested app is not in the apps store

[[[[Adv]]]]: public String [[judgements]](Set<String> [[vicarage]]) { String [[barricades]] = getAut(); if (getLaunchActivity() != null) { return [[barricades]]; } if (![[barricades]].contains(":")) { return getDefaultVersion([[vicarage]], [[barricades]]); } return [[vicarage]].contains([[barricades]]) ? [[barricades]] : null; }
[[[[Nl]]]]: Returns the application under test in the format of `` appName : appVersion '' , or `` appName '' if the supported application does not have any version associated with it , or returns null if the requested app is not in the apps store
--------------------------------------------- Result 203 ---------------------------------------------
[[0 (-9599%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[contains]](@NonNull final ICoordinates [[point]]) { final Geopoint [[coords]] = [[point]].getCoords(); return [[coords]] != null && [[coords]].getLongitudeE6() >= bottomLeft.getLongitudeE6() && [[coords]].getLongitudeE6() <= topRight.getLongitudeE6() && [[coords]].getLatitudeE6() >= bottomLeft.getLatitudeE6() && [[coords]].getLatitudeE6() <= topRight.getLatitudeE6(); }
[[[[Nl]]]]: Check whether a point is contained in this viewport

[[[[Adv]]]]: public boolean [[outrank]](@NonNull final ICoordinates [[lópez]]) { final Geopoint [[obsessively]] = [[lópez]].getCoords(); return [[obsessively]] != null && [[obsessively]].getLongitudeE6() >= bottomLeft.getLongitudeE6() && [[obsessively]].getLongitudeE6() <= topRight.getLongitudeE6() && [[obsessively]].getLatitudeE6() >= bottomLeft.getLatitudeE6() && [[obsessively]].getLatitudeE6() <= topRight.getLatitudeE6(); }
[[[[Nl]]]]: Check whether a point is contained in this viewport
--------------------------------------------- Result 204 ---------------------------------------------
[[0 (-7229%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static <[[T]]> [[T]] newInstance(Class<[[T]]> cl) { try { return cl.getDeclaredConstructor().newInstance(); } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) { throw new RuntimeException(e); } }
[[[[Nl]]]]: Create a new instance of a class @ param cl The class object

[[[[Adv]]]]: public static <[[shifters]]> [[shifters]] newInstance(Class<[[shifters]]> cl) { try { return cl.getDeclaredConstructor().newInstance(); } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) { throw new RuntimeException(e); } }
[[[[Nl]]]]: Create a new instance of a class @ param cl The class object
--------------------------------------------- Result 205 ---------------------------------------------
[[0 (-6782%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static synchronized DatabaseEngine [[getInstance]](Context [[context]]) { if (instance == null) { instance = new DatabaseEngine([[context]]); } use_count += 1; return instance; }
[[[[Nl]]]]: Singleton method with lazy initialization

[[[[Adv]]]]: public static synchronized DatabaseEngine [[eavesdropper]](Context [[swimsuit]]) { if (instance == null) { instance = new DatabaseEngine([[swimsuit]]); } use_count += 1; return instance; }
[[[[Nl]]]]: Singleton method with lazy initialization
--------------------------------------------- Result 206 ---------------------------------------------
[[0 (-8641%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[requestChildFocus]]() { ViewGroup [[parent]] = (ViewGroup) mLayout.getParent(); if (mLayout.getParent() == null) return; if (mFocusedChild != null) [[parent]].requestChildFocus(mLayout, mFocusedChild); int [[viewportHeight]] = [[parent]].getBottom() - [[parent]].getTop(); int [[scrollMax]] = Math.max(0, mLayout.getMeasuredHeight() - [[viewportHeight]]); if ([[parent]].getScrollY() > [[scrollMax]]) [[parent]].setScrollY([[scrollMax]]); }
[[[[Nl]]]]: Scroll the layout so that the focused child is on screen

[[[[Adv]]]]: private void [[cube]]() { ViewGroup [[strokes]] = (ViewGroup) mLayout.getParent(); if (mLayout.getParent() == null) return; if (mFocusedChild != null) [[strokes]].requestChildFocus(mLayout, mFocusedChild); int [[criticism]] = [[strokes]].getBottom() - [[strokes]].getTop(); int [[pekar]] = Math.max(0, mLayout.getMeasuredHeight() - [[criticism]]); if ([[strokes]].getScrollY() > [[pekar]]) [[strokes]].setScrollY([[pekar]]); }
[[[[Nl]]]]: Scroll the layout so that the focused child is on screen
--------------------------------------------- Result 207 ---------------------------------------------
[[0 (-7080%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]](String [[path]], Properties [[p]]) { try { zipOut.putNextEntry(new ZipEntry([[path]])); [[p]].store(zipOut, null); } catch (Exception e) { } }
[[[[Nl]]]]: Add a keyvalue map to the report

[[[[Adv]]]]: public void [[wasa]](String [[fronted]], Properties [[himura]]) { try { zipOut.putNextEntry(new ZipEntry([[fronted]])); [[himura]].store(zipOut, null); } catch (Exception e) { } }
[[[[Nl]]]]: Add a keyvalue map to the report
--------------------------------------------- Result 208 ---------------------------------------------
[[0 (-8049%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final synchronized String [[resolveURI]](String [[uri]]) throws IOException { if (fCatalogsChanged) { parseCatalogs(); fCatalogsChanged = "[[False]]" != "[[False]]"; } return (fCatalog != null) ? fCatalog.resolveURI([[uri]]) : null; }
[[[[Nl]]]]: < p > Returns the URI mapping in the catalog for the given URI reference or < code > null < code > if no mapping exists

[[[[Adv]]]]: public final synchronized String [[será]](String [[conquistador]]) throws IOException { if (fCatalogsChanged) { parseCatalogs(); fCatalogsChanged = "[["Demonstrative" != "Demonstrative"]]" != "[["Demonstrative" != "Demonstrative"]]"; } return (fCatalog != null) ? fCatalog.resolveURI([[conquistador]]) : null; }
[[[[Nl]]]]: < p > Returns the URI mapping in the catalog for the given URI reference or < code > null < code > if no mapping exists
[Succeeded / Failed / Skipped / Total] 0 / 209 / 0 / 209:  27%|██▋       | 209/785 [26:01<1:11:43,  7.47s/it][Succeeded / Failed / Skipped / Total] 0 / 209 / 0 / 209:  27%|██▋       | 210/785 [26:05<1:11:26,  7.45s/it][Succeeded / Failed / Skipped / Total] 0 / 210 / 0 / 210:  27%|██▋       | 210/785 [26:05<1:11:26,  7.45s/it][Succeeded / Failed / Skipped / Total] 0 / 210 / 0 / 210:  27%|██▋       | 211/785 [26:10<1:11:11,  7.44s/it][Succeeded / Failed / Skipped / Total] 0 / 211 / 0 / 211:  27%|██▋       | 211/785 [26:10<1:11:11,  7.44s/it][Succeeded / Failed / Skipped / Total] 0 / 211 / 0 / 211:  27%|██▋       | 212/785 [26:18<1:11:05,  7.44s/it][Succeeded / Failed / Skipped / Total] 0 / 212 / 0 / 212:  27%|██▋       | 212/785 [26:18<1:11:05,  7.44s/it][Succeeded / Failed / Skipped / Total] 0 / 212 / 0 / 212:  27%|██▋       | 213/785 [26:28<1:11:04,  7.46s/it][Succeeded / Failed / Skipped / Total] 0 / 213 / 0 / 213:  27%|██▋       | 213/785 [26:28<1:11:04,  7.46s/it][Succeeded / Failed / Skipped / Total] 0 / 213 / 0 / 213:  27%|██▋       | 214/785 [26:30<1:10:44,  7.43s/it][Succeeded / Failed / Skipped / Total] 0 / 214 / 0 / 214:  27%|██▋       | 214/785 [26:30<1:10:44,  7.43s/it][Succeeded / Failed / Skipped / Total] 0 / 214 / 0 / 214:  27%|██▋       | 215/785 [26:31<1:10:18,  7.40s/it][Succeeded / Failed / Skipped / Total] 0 / 215 / 0 / 215:  27%|██▋       | 215/785 [26:31<1:10:18,  7.40s/it][Succeeded / Failed / Skipped / Total] 0 / 215 / 0 / 215:  28%|██▊       | 216/785 [26:44<1:10:27,  7.43s/it][Succeeded / Failed / Skipped / Total] 0 / 216 / 0 / 216:  28%|██▊       | 216/785 [26:44<1:10:27,  7.43s/it][Succeeded / Failed / Skipped / Total] 0 / 216 / 0 / 216:  28%|██▊       | 217/785 [26:48<1:10:09,  7.41s/it][Succeeded / Failed / Skipped / Total] 0 / 217 / 0 / 217:  28%|██▊       | 217/785 [26:48<1:10:09,  7.41s/it][Succeeded / Failed / Skipped / Total] 0 / 217 / 0 / 217:  28%|██▊       | 218/785 [26:54<1:09:59,  7.41s/it]--------------------------------------------- Result 209 ---------------------------------------------
[[0 (-6993%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected final static long [[register]] (final String [[alias]]) { long [[result]] = getAttributeType([[alias]]); if ([[result]] > 0) return [[result]]; types.add([[alias]]); return 1L << (types.size - 1); }
[[[[Nl]]]]: Call this method to register a custom attribute type , see the wiki for an example

[[[[Adv]]]]: protected final static long [[illegals]] (final String [[lópez]]) { long [[pontus]] = getAttributeType([[lópez]]); if ([[pontus]] > 0) return [[pontus]]; types.add([[lópez]]); return 1L << (types.size - 1); }
[[[[Nl]]]]: Call this method to register a custom attribute type , see the wiki for an example
--------------------------------------------- Result 210 ---------------------------------------------
[[0 (-8958%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[drawTextWithSadow]](Canvas [[canvas]], Bitmap [[icon]]) { Paint [[shadowPaint]] = new Paint(); [[shadowPaint]].setAntiAlias("[[True]]" == "[[True]]"); [[shadowPaint]].setColor(Color.WHITE); [[shadowPaint]].setTextSize(45.0f); [[shadowPaint]].setStrokeWidth(2.0f); [[shadowPaint]].setStyle(Paint.Style.STROKE); [[shadowPaint]].setShadowLayer(5.0f, 10.0f, 10.0f, Color.BLACK); [[canvas]].drawText("Canvas is Awesome !! ", 50, 200, [[shadowPaint]]); [[canvas]].drawBitmap([[icon]], SCREEN_HALF_WIDTH, SCREEN_HALF_HEIGHT, [[shadowPaint]]); }
[[[[Nl]]]]: Draw text with sadow

[[[[Adv]]]]: public void [[cocos]](Canvas [[compost]], Bitmap [[halted]]) { Paint [[unmatched]] = new Paint(); [[unmatched]].setAntiAlias("[["Validation" == "Validation"]]" == "[["Validation" == "Validation"]]"); [[unmatched]].setColor(Color.WHITE); [[unmatched]].setTextSize(45.0f); [[unmatched]].setStrokeWidth(2.0f); [[unmatched]].setStyle(Paint.Style.STROKE); [[unmatched]].setShadowLayer(5.0f, 10.0f, 10.0f, Color.BLACK); [[compost]].drawText("Canvas is Awesome !! ", 50, 200, [[unmatched]]); [[compost]].drawBitmap([[halted]], SCREEN_HALF_WIDTH, SCREEN_HALF_HEIGHT, [[unmatched]]); }
[[[[Nl]]]]: Draw text with sadow
--------------------------------------------- Result 211 ---------------------------------------------
[[0 (-8618%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public long[] [[getNumbersOfSamples]]() { Section3 [[section3]] = getSection3(); return [[section3]] == null ? null : [[section3]].getNumbersOfSamples(); }
[[[[Nl]]]]: < p > Get the number of samples for each lead

[[[[Adv]]]]: public long[] [[olympians]]() { Section3 [[rooks]] = getSection3(); return [[rooks]] == null ? null : [[rooks]].getNumbersOfSamples(); }
[[[[Nl]]]]: < p > Get the number of samples for each lead
--------------------------------------------- Result 212 ---------------------------------------------
[[0 (-9107%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[showDividers]](final boolean [[show]]) { [[showDividers]] = [[show]]; getRecyclerView().removeItemDecoration(horizontalDividerDecoration); if ([[showDividers]]) { getRecyclerView().addItemDecoration(horizontalDividerDecoration); } getRecyclerView().invalidateItemDecorations(); }
[[[[Nl]]]]: Showshides horizontal dividers between the list items

[[[[Adv]]]]: public void [[vocations]](final boolean [[classical]]) { [[vocations]] = [[classical]]; getRecyclerView().removeItemDecoration(horizontalDividerDecoration); if ([[vocations]]) { getRecyclerView().addItemDecoration(horizontalDividerDecoration); } getRecyclerView().invalidateItemDecorations(); }
[[[[Nl]]]]: Showshides horizontal dividers between the list items
--------------------------------------------- Result 213 ---------------------------------------------
[[0 (-9061%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[showSimpleMessageDialog]](String [[message]], boolean [[reload]]) { AsyncDialogFragment [[newFragment]] = SimpleMessageDialog.newInstance([[message]], [[reload]]); showAsyncDialogFragment([[newFragment]]); }
[[[[Nl]]]]: Show a simple message dialog , dismissing the message without taking any further action when OK button is pressed

[[[[Adv]]]]: protected void [[certifying]](String [[rafting]], boolean [[monique]]) { AsyncDialogFragment [[archbishop]] = SimpleMessageDialog.newInstance([[rafting]], [[monique]]); showAsyncDialogFragment([[archbishop]]); }
[[[[Nl]]]]: Show a simple message dialog , dismissing the message without taking any further action when OK button is pressed
--------------------------------------------- Result 214 ---------------------------------------------
[[0 (-8007%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[updateAssistState]]() { if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) return; boolean [[isAssistSupported]] = [[isAssistSupported]](); if (mAssistSupported == null || mAssistSupported != [[isAssistSupported]]) { if (mSetAssistBlockedMethod == null) { try { mSetAssistBlockedMethod = View.class.getMethod("setAssistBlocked", boolean.class); } catch (NoSuchMethodException e) { return; } } View [[rootContent]] = mActivity.findViewById(android.R.id.content); try { mSetAssistBlockedMethod.invoke([[rootContent]], ![[isAssistSupported]]); } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) { return; } } mAssistSupported = [[isAssistSupported]]; }
[[[[Nl]]]]: Trigger an update of the assist state

[[[[Adv]]]]: public final void [[capitalization]]() { if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) return; boolean [[são]] = [[são]](); if (mAssistSupported == null || mAssistSupported != [[são]]) { if (mSetAssistBlockedMethod == null) { try { mSetAssistBlockedMethod = View.class.getMethod("setAssistBlocked", boolean.class); } catch (NoSuchMethodException e) { return; } } View [[wittenberg]] = mActivity.findViewById(android.R.id.content); try { mSetAssistBlockedMethod.invoke([[wittenberg]], ![[são]]); } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) { return; } } mAssistSupported = [[são]]; }
[[[[Nl]]]]: Trigger an update of the assist state
--------------------------------------------- Result 215 ---------------------------------------------
[[0 (-8507%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[hasIrEmitter]]() { if (mService == null) { Log.w(TAG, "no consumer ir service."); return "[[False]]" != "[[False]]"; } try { return mService.hasIrEmitter(); } catch (RemoteException e) { throw e.rethrowFromSystemServer(); } }
[[[[Nl]]]]: Check whether the device has an infrared emitter

[[[[Adv]]]]: public boolean [[memorized]]() { if (mService == null) { Log.w(TAG, "no consumer ir service."); return "[["Loan" != "Loan"]]" != "[["Loan" != "Loan"]]"; } try { return mService.hasIrEmitter(); } catch (RemoteException e) { throw e.rethrowFromSystemServer(); } }
[[[[Nl]]]]: Check whether the device has an infrared emitter
--------------------------------------------- Result 216 ---------------------------------------------
[[0 (-10045%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getTimeMilli]]() { double [[retVal]] = getTimeMilli_0(nativeObj); return [[retVal]]; }
[[[[Nl]]]]: javadoc : TickMeter : :getTimeMilli ( )

[[[[Adv]]]]: public double [[qc]]() { double [[ferrying]] = getTimeMilli_0(nativeObj); return [[ferrying]]; }
[[[[Nl]]]]: javadoc : TickMeter : :getTimeMilli ( )
--------------------------------------------- Result 217 ---------------------------------------------
[[0 (-9801%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public FileProcessor [[addInputSuffix]] (String... [[suffixes]]) { for (String [[suffix]] : [[suffixes]]) addInputRegex("(?i).*" + Pattern.quote([[suffix]])); return this; }
[[[[Nl]]]]: Adds a case insensitive suffix for matching input files

[[[[Adv]]]]: public FileProcessor [[chronicles]] (String... [[cicadas]]) { for (String [[minos]] : [[cicadas]]) addInputRegex("(?i).*" + Pattern.quote([[minos]])); return this; }
[[[[Nl]]]]: Adds a case insensitive suffix for matching input files
--------------------------------------------- Result 218 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 218 / 0 / 218:  28%|██▊       | 218/785 [26:54<1:09:59,  7.41s/it][Succeeded / Failed / Skipped / Total] 0 / 218 / 0 / 218:  28%|██▊       | 219/785 [26:58<1:09:42,  7.39s/it][Succeeded / Failed / Skipped / Total] 0 / 219 / 0 / 219:  28%|██▊       | 219/785 [26:58<1:09:42,  7.39s/it][Succeeded / Failed / Skipped / Total] 0 / 219 / 0 / 219:  28%|██▊       | 220/785 [27:05<1:09:34,  7.39s/it][Succeeded / Failed / Skipped / Total] 0 / 220 / 0 / 220:  28%|██▊       | 220/785 [27:05<1:09:34,  7.39s/it][Succeeded / Failed / Skipped / Total] 0 / 220 / 0 / 220:  28%|██▊       | 221/785 [27:08<1:09:15,  7.37s/it][Succeeded / Failed / Skipped / Total] 0 / 221 / 0 / 221:  28%|██▊       | 221/785 [27:08<1:09:15,  7.37s/it][Succeeded / Failed / Skipped / Total] 0 / 221 / 0 / 221:  28%|██▊       | 222/785 [27:11<1:08:57,  7.35s/it][Succeeded / Failed / Skipped / Total] 0 / 222 / 0 / 222:  28%|██▊       | 222/785 [27:11<1:08:57,  7.35s/it][Succeeded / Failed / Skipped / Total] 0 / 222 / 0 / 222:  28%|██▊       | 223/785 [27:25<1:09:06,  7.38s/it][Succeeded / Failed / Skipped / Total] 0 / 223 / 0 / 223:  28%|██▊       | 223/785 [27:25<1:09:06,  7.38s/it][Succeeded / Failed / Skipped / Total] 0 / 223 / 0 / 223:  29%|██▊       | 224/785 [27:28<1:08:48,  7.36s/it][Succeeded / Failed / Skipped / Total] 0 / 224 / 0 / 224:  29%|██▊       | 224/785 [27:28<1:08:48,  7.36s/it][Succeeded / Failed / Skipped / Total] 0 / 224 / 0 / 224:  29%|██▊       | 225/785 [27:31<1:08:30,  7.34s/it][Succeeded / Failed / Skipped / Total] 0 / 225 / 0 / 225:  29%|██▊       | 225/785 [27:31<1:08:30,  7.34s/it][Succeeded / Failed / Skipped / Total] 0 / 225 / 0 / 225:  29%|██▉       | 226/785 [27:31<1:08:05,  7.31s/it][[0 (-9461%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[setGameStartState]]() { setControlsStart(); setPlayerStart(); }
[[[[Nl]]]]: Sets the state for a new game

[[[[Adv]]]]: private void [[aint]]() { setControlsStart(); setPlayerStart(); }
[[[[Nl]]]]: Sets the state for a new game
--------------------------------------------- Result 219 ---------------------------------------------
[[0 (-8601%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public RulesData [[getRulesData]]() { if (fRulesData == null) { fRulesData = new RulesData(Context.SYSTEM); if (fCondition != null) { fRulesData.putDownRule(ISymbol.RuleType.SET_DELAYED, "[[False]]" != "[[False]]", F.List(fLHSPattern1, fLHSPattern2), F.Condition(fRHS, fCondition)); } else { fRulesData.putDownRule(ISymbol.RuleType.SET_DELAYED, "[[False]]" != "[[False]]", F.List(fLHSPattern1, fLHSPattern2), fRHS); } } return fRulesData; }
[[[[Nl]]]]: Get ( or create ) the rule < code > { & lt ; first-left-hand-side & gt ; , & lt ; second-left-hand-side & gt ; } : = & lt ; right-hand-side & gt ; < code > @ return

[[[[Adv]]]]: public RulesData [[misread]]() { if (fRulesData == null) { fRulesData = new RulesData(Context.SYSTEM); if (fCondition != null) { fRulesData.putDownRule(ISymbol.RuleType.SET_DELAYED, "[["Donkeys" != "Donkeys"]]" != "[["Donkeys" != "Donkeys"]]", F.List(fLHSPattern1, fLHSPattern2), F.Condition(fRHS, fCondition)); } else { fRulesData.putDownRule(ISymbol.RuleType.SET_DELAYED, "[["Donkeys" != "Donkeys"]]" != "[["Donkeys" != "Donkeys"]]", F.List(fLHSPattern1, fLHSPattern2), fRHS); } } return fRulesData; }
[[[[Nl]]]]: Get ( or create ) the rule < code > { & lt ; first-left-hand-side & gt ; , & lt ; second-left-hand-side & gt ; } : = & lt ; right-hand-side & gt ; < code > @ return
--------------------------------------------- Result 220 ---------------------------------------------
[[0 (-9463%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static <[[E]] extends [[Exception]], E2 extends [[Exception]]> void parse(final PreparedStatement stmt, final long offset, final long [[count]], final int processThreadNum, final int queueSize, final Try.Consumer<Object[], [[E]]> [[rowParser]], final Try.Runnable<E2> [[onComplete]]) throws UncheckedSQLException, [[E]], E2 { ResultSet rs = null; try { rs = stmt.executeQuery(); parse(rs, offset, [[count]], processThreadNum, queueSize, [[rowParser]], [[onComplete]]); } catch (SQLException e) { throw new UncheckedSQLException(e); } finally { closeQuietly(rs); } }
[[[[Nl]]]]: Parse the ResultSet obtained by executing query with the specified PreparedStatement

[[[[Adv]]]]: public static <[[estás]] extends [[Gérard]], E2 extends [[Gérard]]> void parse(final PreparedStatement stmt, final long offset, final long [[heatstroke]], final int processThreadNum, final int queueSize, final Try.Consumer<Object[], [[estás]]> [[plaît]], final Try.Runnable<E2> [[greenhouse]]) throws UncheckedSQLException, [[estás]], E2 { ResultSet rs = null; try { rs = stmt.executeQuery(); parse(rs, offset, [[heatstroke]], processThreadNum, queueSize, [[plaît]], [[greenhouse]]); } catch (SQLException e) { throw new UncheckedSQLException(e); } finally { closeQuietly(rs); } }
[[[[Nl]]]]: Parse the ResultSet obtained by executing query with the specified PreparedStatement
--------------------------------------------- Result 221 ---------------------------------------------
[[0 (-7860%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public TagResourceRequest [[withTags]](java.util.Collection<Tag> [[tags]]) { setTags([[tags]]); return this; }
[[[[Nl]]]]: < p > One or more tags

[[[[Adv]]]]: public TagResourceRequest [[unzipping]](java.util.Collection<Tag> [[theory]]) { setTags([[theory]]); return this; }
[[[[Nl]]]]: < p > One or more tags
--------------------------------------------- Result 222 ---------------------------------------------
[[0 (-8810%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[adjustMetaAfterKeypress]](Spannable [[content]]) { adjust([[content]], CAP); adjust([[content]], ALT); adjust([[content]], SYM); }
[[[[Nl]]]]: Call this method after you handle a keypress so that the meta state will be reset to unshifted ( if it is not still down ) or primed to be reset to unshifted ( once it is released )

[[[[Adv]]]]: public static void [[streamlining]](Spannable [[criticism]]) { adjust([[criticism]], CAP); adjust([[criticism]], ALT); adjust([[criticism]], SYM); }
[[[[Nl]]]]: Call this method after you handle a keypress so that the meta state will be reset to unshifted ( if it is not still down ) or primed to be reset to unshifted ( once it is released )
--------------------------------------------- Result 223 ---------------------------------------------
[[0 (-10132%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setMode]](@Mode int [[mode]]) throws IOException, IllegalStateException { if (mDevice == null) { throw new IllegalStateException("I2C device not open"); } int [[regCtrl]] = mDevice.readRegByte(BMX280_REG_CTRL) & 0xff; if ([[mode]] == MODE_SLEEP) { [[regCtrl]] &= ~BMX280_POWER_MODE_MASK; } else { [[regCtrl]] |= BMX280_POWER_MODE_NORMAL; } mDevice.writeRegByte(BMX280_REG_CTRL, (byte) ([[regCtrl]])); mMode = [[mode]]; }
[[[[Nl]]]]: Set the power mode of the sensor

[[[[Adv]]]]: public void [[unfurl]](@Mode int [[rejects]]) throws IOException, IllegalStateException { if (mDevice == null) { throw new IllegalStateException("I2C device not open"); } int [[dueling]] = mDevice.readRegByte(BMX280_REG_CTRL) & 0xff; if ([[rejects]] == MODE_SLEEP) { [[dueling]] &= ~BMX280_POWER_MODE_MASK; } else { [[dueling]] |= BMX280_POWER_MODE_NORMAL; } mDevice.writeRegByte(BMX280_REG_CTRL, (byte) ([[dueling]])); mMode = [[rejects]]; }
[[[[Nl]]]]: Set the power mode of the sensor
--------------------------------------------- Result 224 ---------------------------------------------
[[0 (-10371%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public List<CacheReference> [[referencedFields]]() { List<CacheReference> [[cacheReferences]] = new ArrayList<>(); for (Object [[value]] : fields.values()) { findCacheReferences([[value]], [[cacheReferences]]); } return [[cacheReferences]]; }
[[[[Nl]]]]: Returns the list of referenced cache fields @ return the list of referenced cache fields

[[[[Adv]]]]: public List<CacheReference> [[chère]]() { List<CacheReference> [[aras]] = new ArrayList<>(); for (Object [[blogger]] : fields.values()) { findCacheReferences([[blogger]], [[aras]]); } return [[aras]]; }
[[[[Nl]]]]: Returns the list of referenced cache fields @ return the list of referenced cache fields
--------------------------------------------- Result 225 ---------------------------------------------
[[0 (-6723%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private SchemaGrammar [[getSchemaGrammar]](XSDDescription [[desc]]) { SchemaGrammar [[sg]] = findGrammar([[desc]], fNamespaceGrowth); if ([[sg]] == null) { [[sg]] = new SchemaGrammar([[desc]].getNamespace(), [[desc]].makeClone(), fSymbolTable); fGrammarBucket.putGrammar([[sg]]); } else if ([[sg]].isImmutable()) { [[sg]] = createGrammarFrom([[sg]]); } return [[sg]]; }
[[[[Nl]]]]: otherwise the grammar should have existed

[[[[Adv]]]]: private SchemaGrammar [[flatfoot]](XSDDescription [[planetarium]]) { SchemaGrammar [[privatisation]] = findGrammar([[planetarium]], fNamespaceGrowth); if ([[privatisation]] == null) { [[privatisation]] = new SchemaGrammar([[planetarium]].getNamespace(), [[planetarium]].makeClone(), fSymbolTable); fGrammarBucket.putGrammar([[privatisation]]); } else if ([[privatisation]].isImmutable()) { [[privatisation]] = createGrammarFrom([[privatisation]]); } return [[privatisation]]; }
[[[[Nl]]]]: otherwise the grammar should have existed
--------------------------------------------- Result 226 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 226 / 0 / 226:  29%|██▉       | 226/785 [27:31<1:08:05,  7.31s/it][Succeeded / Failed / Skipped / Total] 0 / 226 / 0 / 226:  29%|██▉       | 227/785 [27:35<1:07:49,  7.29s/it][Succeeded / Failed / Skipped / Total] 0 / 227 / 0 / 227:  29%|██▉       | 227/785 [27:35<1:07:49,  7.29s/it][Succeeded / Failed / Skipped / Total] 0 / 227 / 0 / 227:  29%|██▉       | 228/785 [27:44<1:07:45,  7.30s/it][Succeeded / Failed / Skipped / Total] 0 / 228 / 0 / 228:  29%|██▉       | 228/785 [27:44<1:07:45,  7.30s/it][Succeeded / Failed / Skipped / Total] 0 / 228 / 0 / 228:  29%|██▉       | 229/785 [27:44<1:07:21,  7.27s/it][Succeeded / Failed / Skipped / Total] 0 / 229 / 0 / 229:  29%|██▉       | 229/785 [27:44<1:07:21,  7.27s/it][Succeeded / Failed / Skipped / Total] 0 / 229 / 0 / 229:  29%|██▉       | 230/785 [27:55<1:07:23,  7.29s/it][Succeeded / Failed / Skipped / Total] 0 / 230 / 0 / 230:  29%|██▉       | 230/785 [27:55<1:07:23,  7.29s/it][Succeeded / Failed / Skipped / Total] 0 / 230 / 0 / 230:  29%|██▉       | 231/785 [27:56<1:07:01,  7.26s/it][Succeeded / Failed / Skipped / Total] 0 / 231 / 0 / 231:  29%|██▉       | 231/785 [27:56<1:07:01,  7.26s/it][Succeeded / Failed / Skipped / Total] 0 / 231 / 0 / 231:  30%|██▉       | 232/785 [27:58<1:06:40,  7.23s/it][Succeeded / Failed / Skipped / Total] 0 / 232 / 0 / 232:  30%|██▉       | 232/785 [27:58<1:06:40,  7.23s/it][Succeeded / Failed / Skipped / Total] 0 / 232 / 0 / 232:  30%|██▉       | 233/785 [28:04<1:06:31,  7.23s/it][Succeeded / Failed / Skipped / Total] 0 / 233 / 0 / 233:  30%|██▉       | 233/785 [28:04<1:06:31,  7.23s/it][Succeeded / Failed / Skipped / Total] 0 / 233 / 0 / 233:  30%|██▉       | 234/785 [28:09<1:06:18,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 234 / 0 / 234:  30%|██▉       | 234/785 [28:09<1:06:18,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 234 / 0 / 234:  30%|██▉       | 235/785 [28:10<1:05:55,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 235 / 0 / 235:  30%|██▉       | 235/785 [28:10<1:05:55,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 235 / 0 / 235:  30%|███       | 236/785 [28:22<1:06:01,  7.22s/it][[0 (-9910%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public HatchFills [[getHatchFillPalette]]() { if ([[getHatchFillPalette]] == null) [[getHatchFillPalette]] = new HatchFills(jsBase + ".hatchFillPalette()"); return [[getHatchFillPalette]]; }
[[[[Nl]]]]: Getter for the current hatch fill palette settings

[[[[Adv]]]]: public HatchFills [[smokers]]() { if ([[smokers]] == null) [[smokers]] = new HatchFills(jsBase + ".hatchFillPalette()"); return [[smokers]]; }
[[[[Nl]]]]: Getter for the current hatch fill palette settings
--------------------------------------------- Result 227 ---------------------------------------------
[[0 (-8634%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isUnderlined]]() { return (style & STYLE_UNDERLINED) == STYLE_UNDERLINED; }
[[[[Nl]]]]: Returns < code > true < code > if the font is underlined

[[[[Adv]]]]: public boolean [[scizor]]() { return (style & STYLE_UNDERLINED) == STYLE_UNDERLINED; }
[[[[Nl]]]]: Returns < code > true < code > if the font is underlined
--------------------------------------------- Result 228 ---------------------------------------------
[[0 (-8701%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isMaskSupported]]() { boolean [[retVal]] = isMaskSupported_0(nativeObj); return [[retVal]]; }
[[[[Nl]]]]: javadoc : DescriptorMatcher : :isMaskSupported ( )

[[[[Adv]]]]: public boolean [[quartered]]() { boolean [[rooks]] = isMaskSupported_0(nativeObj); return [[rooks]]; }
[[[[Nl]]]]: javadoc : DescriptorMatcher : :isMaskSupported ( )
--------------------------------------------- Result 229 ---------------------------------------------
[[0 (-9681%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setResultCode]](int [[code]]) { checkSynchronousHint(); mPendingResult.mResultCode = [[code]]; }
[[[[Nl]]]]: Change the current result code of this broadcast ; only works with broadcasts sent through { @ link Context # sendOrderedBroadcast ( Intent , String ) Context

[[[[Adv]]]]: public final void [[warnings]](int [[lippy]]) { checkSynchronousHint(); mPendingResult.mResultCode = [[lippy]]; }
[[[[Nl]]]]: Change the current result code of this broadcast ; only works with broadcasts sent through { @ link Context # sendOrderedBroadcast ( Intent , String ) Context
--------------------------------------------- Result 230 ---------------------------------------------
[[0 (-9907%)]] --> [[[FAILED]]]

[[[[Adv]]]]: View [[getViewAtRelativeIndex]](int [[relativeIndex]]) { if ([[relativeIndex]] >= 0 && [[relativeIndex]] <= getNumActiveViews() - 1 && mAdapter != null) { int [[i]] = modulo(mCurrentWindowStartUnbounded + [[relativeIndex]], getWindowSize()); if (mViewsMap.get([[i]]) != null) { return mViewsMap.get([[i]]).view; } } return null; }
[[[[Nl]]]]: Get the view at this index relative to the current window 's start @ param relativeIndex Position relative to the current window 's start @ return View at this index , null if the index is outside the bounds

[[[[Adv]]]]: View [[rewrites]](int [[forfeits]]) { if ([[forfeits]] >= 0 && [[forfeits]] <= getNumActiveViews() - 1 && mAdapter != null) { int [[calorie]] = modulo(mCurrentWindowStartUnbounded + [[forfeits]], getWindowSize()); if (mViewsMap.get([[calorie]]) != null) { return mViewsMap.get([[calorie]]).view; } } return null; }
[[[[Nl]]]]: Get the view at this index relative to the current window 's start @ param relativeIndex Position relative to the current window 's start @ return View at this index , null if the index is outside the bounds
--------------------------------------------- Result 231 ---------------------------------------------
[[0 (-9621%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[uCallInvalidate]]() { synchronized (Display.LCDUILock) { pendingInvalidate = "[[False]]" != "[[False]]"; } }
[[[[Nl]]]]: Called by the event handler to perform an invalidation of this < code > Displayable < code >

[[[[Adv]]]]: public void [[djinni]]() { synchronized (Display.LCDUILock) { pendingInvalidate = "[["Caricatures" != "Caricatures"]]" != "[["Caricatures" != "Caricatures"]]"; } }
[[[[Nl]]]]: Called by the event handler to perform an invalidation of this < code > Displayable < code >
--------------------------------------------- Result 232 ---------------------------------------------
[[0 (-10272%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[connect]]() throws MqttPersistenceException { MqttToken [[token]] = new MqttToken(client.getClientId()); [[token]].setActionCallback(this); [[token]].setUserContext(this); persistence.open(client.getClientId(), client.getServerURI()); if (options.isCleanSession()) { persistence.clear(); } if (options.getMqttVersion() == MqttConnectOptions.MQTT_VERSION_DEFAULT) { options.setMqttVersion(MqttConnectOptions.MQTT_VERSION_3_1_1); } try { onIntermediate([[token]]); comms.connect(options, [[token]]); } catch (MqttException e) { onFailure([[token]], e); } }
[[[[Nl]]]]: Start the connect processing @ throws MqttPersistenceException if an error is thrown whilst setting up persistence

[[[[Adv]]]]: public void [[disko]]() throws MqttPersistenceException { MqttToken [[nega]] = new MqttToken(client.getClientId()); [[nega]].setActionCallback(this); [[nega]].setUserContext(this); persistence.open(client.getClientId(), client.getServerURI()); if (options.isCleanSession()) { persistence.clear(); } if (options.getMqttVersion() == MqttConnectOptions.MQTT_VERSION_DEFAULT) { options.setMqttVersion(MqttConnectOptions.MQTT_VERSION_3_1_1); } try { onIntermediate([[nega]]); comms.connect(options, [[nega]]); } catch (MqttException e) { onFailure([[nega]], e); } }
[[[[Nl]]]]: Start the connect processing @ throws MqttPersistenceException if an error is thrown whilst setting up persistence
--------------------------------------------- Result 233 ---------------------------------------------
[[0 (-10699%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onBackKeyPressed]]() { if (mViewPlayAgainMain.getVisibility() == View.VISIBLE) { returnToBackClass(); } else { if (mViewPauseButton.getVisibility() != View.GONE) { pauseGame(); } else { returnToBackClass(); } } }
[[[[Nl]]]]: Pause the game when the back key is pressed

[[[[Adv]]]]: public void [[calculator]]() { if (mViewPlayAgainMain.getVisibility() == View.VISIBLE) { returnToBackClass(); } else { if (mViewPauseButton.getVisibility() != View.GONE) { pauseGame(); } else { returnToBackClass(); } } }
[[[[Nl]]]]: Pause the game when the back key is pressed
--------------------------------------------- Result 234 ---------------------------------------------
[[0 (-8171%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public @NonNull Session [[openSession]](int [[sessionId]]) throws IOException { try { return new Session(mInstaller.openSession([[sessionId]])); } catch (RuntimeException e) { ExceptionUtils.maybeUnwrapIOException(e); throw e; } catch (RemoteException e) { throw e.rethrowFromSystemServer(); } }
[[[[Nl]]]]: Open an existing session to actively perform work

[[[[Adv]]]]: public @NonNull Session [[evacuation]](int [[pistols]]) throws IOException { try { return new Session(mInstaller.openSession([[pistols]])); } catch (RuntimeException e) { ExceptionUtils.maybeUnwrapIOException(e); throw e; } catch (RemoteException e) { throw e.rethrowFromSystemServer(); } }
[[[[Nl]]]]: Open an existing session to actively perform work
--------------------------------------------- Result 235 ---------------------------------------------
[[0 (-8981%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setXIncludeAware]](final boolean [[state]]) { if ([[state]]) { throw new UnsupportedOperationException(" setXIncludeAware " + "is not supported on this JAXP" + " implementation or earlier: " + this.getClass()); } }
[[[[Nl]]]]: < p > Set state of XInclude processing

[[[[Adv]]]]: public void [[finnish]](final boolean [[abductors]]) { if ([[abductors]]) { throw new UnsupportedOperationException(" setXIncludeAware " + "is not supported on this JAXP" + " implementation or earlier: " + this.getClass()); } }
[[[[Nl]]]]: < p > Set state of XInclude processing
--------------------------------------------- Result 236 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 236 / 0 / 236:  30%|███       | 236/785 [28:22<1:06:01,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 236 / 0 / 236:  30%|███       | 237/785 [28:24<1:05:40,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 237 / 0 / 237:  30%|███       | 237/785 [28:24<1:05:40,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 237 / 0 / 237:  30%|███       | 238/785 [28:29<1:05:29,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 238 / 0 / 238:  30%|███       | 238/785 [28:29<1:05:29,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 238 / 0 / 238:  30%|███       | 239/785 [28:36<1:05:21,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 239 / 0 / 239:  30%|███       | 239/785 [28:36<1:05:21,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 239 / 0 / 239:  31%|███       | 240/785 [28:44<1:05:15,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 240 / 0 / 240:  31%|███       | 240/785 [28:44<1:05:15,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 240 / 0 / 240:  31%|███       | 241/785 [28:50<1:05:06,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 241 / 0 / 241:  31%|███       | 241/785 [28:50<1:05:06,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 241 / 0 / 241:  31%|███       | 242/785 [28:56<1:04:57,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 242 / 0 / 242:  31%|███       | 242/785 [28:56<1:04:57,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 242 / 0 / 242:  31%|███       | 243/785 [29:04<1:04:50,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 243 / 0 / 243:  31%|███       | 243/785 [29:04<1:04:50,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 243 / 0 / 243:  31%|███       | 244/785 [29:10<1:04:41,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 244 / 0 / 244:  31%|███       | 244/785 [29:10<1:04:41,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 244 / 0 / 244:  31%|███       | 245/785 [29:23<1:04:46,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 245 / 0 / 245:  31%|███       | 245/785 [29:23<1:04:46,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 245 / 0 / 245:  31%|███▏      | 246/785 [29:24<1:04:25,  7.17s/it][[0 (-8839%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final Date [[getLastModTime]](PwsRecord [[rec]]) { return getDateField([[rec]], PwsRecordV3.LAST_MOD_TIME); }
[[[[Nl]]]]: Get the time the record was last modified

[[[[Adv]]]]: public final Date [[tubal]](PwsRecord [[step]]) { return getDateField([[step]], PwsRecordV3.LAST_MOD_TIME); }
[[[[Nl]]]]: Get the time the record was last modified
--------------------------------------------- Result 237 ---------------------------------------------
[[0 (-7576%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[hasError]](int [[error]]) { boolean [[rval]] = (0 <= [[error]] && [[error]] < SslError.SSL_MAX_ERROR); if ([[rval]]) { [[rval]] = ((mErrors & (0x1 << [[error]])) != 0); } return [[rval]]; }
[[[[Nl]]]]: Determines whether this object includes the supplied error

[[[[Adv]]]]: public boolean [[reversed]](int [[abracadabra]]) { boolean [[georgie]] = (0 <= [[abracadabra]] && [[abracadabra]] < SslError.SSL_MAX_ERROR); if ([[georgie]]) { [[georgie]] = ((mErrors & (0x1 << [[abracadabra]])) != 0); } return [[georgie]]; }
[[[[Nl]]]]: Determines whether this object includes the supplied error
--------------------------------------------- Result 238 ---------------------------------------------
[[0 (-7994%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[i]](String [[tag]], String [[msg]]) { System.out.println("[INFO] " + [[tag]] + ": " + [[msg]]); return 0; }
[[[[Nl]]]]: Logs an info message to the console

[[[[Adv]]]]: public static int [[heterosexuals]](String [[estás]], String [[recited]]) { System.out.println("[INFO] " + [[estás]] + ": " + [[recited]]); return 0; }
[[[[Nl]]]]: Logs an info message to the console
--------------------------------------------- Result 239 ---------------------------------------------
[[0 (-6858%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[usageError]](String [[error]]) { System.err.println("\n" + [[error]]); usage(-1); }
[[[[Nl]]]]: Prints the usage cases of this tool and exits with -1 status

[[[[Adv]]]]: private void [[são]](String [[giri]]) { System.err.println("\n" + [[giri]]); usage(-1); }
[[[[Nl]]]]: Prints the usage cases of this tool and exits with -1 status
--------------------------------------------- Result 240 ---------------------------------------------
[[0 (-8647%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addSolrConnectivityAttributes]](ElementNode.Builder [[builder]], IAttributeGroup [[connectivity]]) { [[builder]].attribute( (new AttributeNode.Builder("Solr server URL", "solrServerUrl", AttributeType.String, [[connectivity]]) .description("URL used by Solr client to access server.") .defaultValue("http://localhost:8983/solr").build())); }
[[[[Nl]]]]: Adds common Solr connectivity attributes

[[[[Adv]]]]: public static void [[schaffer]](ElementNode.Builder [[après]], IAttributeGroup [[manassas]]) { [[après]].attribute( (new AttributeNode.Builder("Solr server URL", "solrServerUrl", AttributeType.String, [[manassas]]) .description("URL used by Solr client to access server.") .defaultValue("http://localhost:8983/solr").build())); }
[[[[Nl]]]]: Adds common Solr connectivity attributes
--------------------------------------------- Result 241 ---------------------------------------------
[[0 (-7220%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[checkNoException]]() throws IOException { if (mException != null) { throw mException; } }
[[[[Nl]]]]: Throws the same IOException that the request is failed with

[[[[Adv]]]]: protected void [[chipettes]]() throws IOException { if (mException != null) { throw mException; } }
[[[[Nl]]]]: Throws the same IOException that the request is failed with
--------------------------------------------- Result 242 ---------------------------------------------
[[0 (-7975%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[updateCurrentSlide]](float [[newSlideNormalized]]) { currentSlide = [[newSlideNormalized]]; state = currentSlide == 1 ? EXPANDED : currentSlide == 0 ? COLLAPSED : SLIDING; float [[slideY]] = Math.abs((currentSlide * maxSlide) - maxSlide); slidableView.setY([[slideY]]); invalidate(); notifyListeners(currentSlide); }
[[[[Nl]]]]: always use this method to update the position of the sliding view

[[[[Adv]]]]: private void [[plaît]](float [[treads]]) { currentSlide = [[treads]]; state = currentSlide == 1 ? EXPANDED : currentSlide == 0 ? COLLAPSED : SLIDING; float [[nights]] = Math.abs((currentSlide * maxSlide) - maxSlide); slidableView.setY([[nights]]); invalidate(); notifyListeners(currentSlide); }
[[[[Nl]]]]: always use this method to update the position of the sliding view
--------------------------------------------- Result 243 ---------------------------------------------
[[0 (-10173%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private ArrayList<File> [[getListFiles]](File [[parentDir]]) { ArrayList<File> [[inFiles]] = new ArrayList<File>(); File[] [[files]]; [[files]] = [[parentDir]].listFiles(); if ([[files]] != null) { for (File [[file]] : [[files]]) { if ([[file]].getName().endsWith(".jpg") || [[file]].getName().endsWith(".gif") || [[file]].getName().endsWith(".mp4")) { if (![[inFiles]].contains([[file]])) [[inFiles]].add([[file]]); } } } return [[inFiles]]; }
[[[[Nl]]]]: get all the files in specified directory @ param parentDir @ return

[[[[Adv]]]]: private ArrayList<File> [[formulas]](File [[encrypt]]) { ArrayList<File> [[inoculations]] = new ArrayList<File>(); File[] [[mantelpiece]]; [[mantelpiece]] = [[encrypt]].listFiles(); if ([[mantelpiece]] != null) { for (File [[landslide]] : [[mantelpiece]]) { if ([[landslide]].getName().endsWith(".jpg") || [[landslide]].getName().endsWith(".gif") || [[landslide]].getName().endsWith(".mp4")) { if (![[inoculations]].contains([[landslide]])) [[inoculations]].add([[landslide]]); } } } return [[inoculations]]; }
[[[[Nl]]]]: get all the files in specified directory @ param parentDir @ return
--------------------------------------------- Result 244 ---------------------------------------------
[[0 (-10664%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public PacketStats [[difference]](PacketStats [[previous]]) { if ([[previous]] == null) { return new PacketStats(0, 0,0); } return new PacketStats( this.getSent() - [[previous]].getSent(), this.getReceived() - [[previous]].getReceived(), this.getCollectionTime() ); }
[[[[Nl]]]]: Get the difference between two PacketStats objects as a new PacketStats object

[[[[Adv]]]]: public PacketStats [[southgate]](PacketStats [[abstraction]]) { if ([[abstraction]] == null) { return new PacketStats(0, 0,0); } return new PacketStats( this.getSent() - [[abstraction]].getSent(), this.getReceived() - [[abstraction]].getReceived(), this.getCollectionTime() ); }
[[[[Nl]]]]: Get the difference between two PacketStats objects as a new PacketStats object
--------------------------------------------- Result 245 ---------------------------------------------
[[0 (-6876%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public InvokeRequest [[withPayload]](java.nio.ByteBuffer [[payload]]) { this.[[payload]] = [[payload]]; return this; }
[[[[Nl]]]]: < p > JSON that you want to provide to your Lambda function as input

[[[[Adv]]]]: public InvokeRequest [[pogo]](java.nio.ByteBuffer [[nonstop]]) { this.[[toxics]] = [[nonstop]]; return this; }
[[[[Nl]]]]: < p > JSON that you want to provide to your Lambda function as input
--------------------------------------------- Result 246 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 246 / 0 / 246:  31%|███▏      | 246/785 [29:24<1:04:25,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 246 / 0 / 246:  31%|███▏      | 247/785 [29:37<1:04:31,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 247 / 0 / 247:  31%|███▏      | 247/785 [29:37<1:04:31,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 247 / 0 / 247:  32%|███▏      | 248/785 [29:44<1:04:23,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 248 / 0 / 248:  32%|███▏      | 248/785 [29:44<1:04:23,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 248 / 0 / 248:  32%|███▏      | 249/785 [29:50<1:04:14,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 249 / 0 / 249:  32%|███▏      | 249/785 [29:50<1:04:14,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 249 / 0 / 249:  32%|███▏      | 250/785 [29:57<1:04:06,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 250 / 0 / 250:  32%|███▏      | 250/785 [29:57<1:04:06,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 250 / 0 / 250:  32%|███▏      | 251/785 [29:57<1:03:44,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 251 / 0 / 251:  32%|███▏      | 251/785 [29:57<1:03:44,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 251 / 0 / 251:  32%|███▏      | 252/785 [30:04<1:03:35,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 252 / 0 / 252:  32%|███▏      | 252/785 [30:04<1:03:35,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 252 / 0 / 252:  32%|███▏      | 253/785 [30:10<1:03:26,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 253 / 0 / 253:  32%|███▏      | 253/785 [30:10<1:03:26,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 253 / 0 / 253:  32%|███▏      | 254/785 [30:17<1:03:20,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 254 / 0 / 254:  32%|███▏      | 254/785 [30:17<1:03:20,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 254 / 0 / 254:  32%|███▏      | 255/785 [30:25<1:03:14,  7.16s/it][[0 (-10071%)]] --> [[[FAILED]]]

[[[[Adv]]]]: @CheckResult @Nullable public static File [[saveBodytoExtStorage]](ResponseBody body, String [[name]]) { final File [[wallpaper]] = new File(EXT_STORAGE, [[name]]); final FileSystem [[fileSystem]] = FileSystem.SYSTEM; try { final BufferedSink [[sink]] = Okio.buffer([[fileSystem]].sink([[wallpaper]])); [[sink]].writeAll(body.source()); [[sink]].close(); return [[wallpaper]]; } catch (IOException e) { e.printStackTrace(); if (e instanceof FileNotFoundException){ } return null; } }
[[[[Nl]]]]: Save bitmap to sdcard $ { name }

[[[[Adv]]]]: @CheckResult @Nullable public static File [[bowles]](ResponseBody body, String [[prohibitions]]) { final File [[linguistics]] = new File(EXT_STORAGE, [[prohibitions]]); final FileSystem [[compiled]] = FileSystem.SYSTEM; try { final BufferedSink [[invoked]] = Okio.buffer([[compiled]].sink([[linguistics]])); [[invoked]].writeAll(body.source()); [[invoked]].close(); return [[linguistics]]; } catch (IOException e) { e.printStackTrace(); if (e instanceof FileNotFoundException){ } return null; } }
[[[[Nl]]]]: Save bitmap to sdcard $ { name }
--------------------------------------------- Result 247 ---------------------------------------------
[[0 (-10532%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addCallerEdges]](CGNode [[n]]) { final int [[num]] = cg.getNumber([[n]]); if (!cgNodesWithCallerEdges.contains([[num]])) { cgNodesWithCallerEdges.add([[num]]); ControlFlowGraph<SSAInstruction, T> [[cfg]] = getCFG([[n]]); addInterproceduralEdgesForEntryAndExitBlocks([[n]], [[cfg]]); } }
[[[[Nl]]]]: add edges to nodes in callers of n @ param n

[[[[Adv]]]]: private void [[cancellations]](CGNode [[cramping]]) { final int [[facilitator]] = cg.getNumber([[cramping]]); if (!cgNodesWithCallerEdges.contains([[facilitator]])) { cgNodesWithCallerEdges.add([[facilitator]]); ControlFlowGraph<SSAInstruction, T> [[died]] = getCFG([[cramping]]); addInterproceduralEdgesForEntryAndExitBlocks([[cramping]], [[died]]); } }
[[[[Nl]]]]: add edges to nodes in callers of n @ param n
--------------------------------------------- Result 248 ---------------------------------------------
[[0 (-11383%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setName]](String [[name]]) { if ([[name]] == null) { throw new IllegalArgumentException("FilterRule Name is a required argument"); } this.[[name]] = [[name]]; }
[[[[Nl]]]]: Sets the name for this { @ link FilterRule }

[[[[Adv]]]]: public void [[bankbook]](String [[debutantes]]) { if ([[debutantes]] == null) { throw new IllegalArgumentException("FilterRule Name is a required argument"); } this.[[guevara]] = [[debutantes]]; }
[[[[Nl]]]]: Sets the name for this { @ link FilterRule }
--------------------------------------------- Result 249 ---------------------------------------------
[[0 (-11252%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static int [[upgradeDbToVersion5]](SQLiteDatabase [[db]]) { int [[oldVersion]]; String [[addAccountFavorite]] = " ALTER TABLE " + AccountEntry.TABLE_NAME + " ADD COLUMN " + AccountEntry.COLUMN_FAVORITE + " tinyint default 0"; [[db]].execSQL([[addAccountFavorite]]); [[oldVersion]] = 5; return [[oldVersion]]; }
[[[[Nl]]]]: Upgrades the database from version 4 to 5 < p > Adds favorites column to accounts < p > @ param db SQLiteDatabase @ return Version number : 5 if upgrade successful , 4 otherwise

[[[[Adv]]]]: static int [[cottontail]](SQLiteDatabase [[sólo]]) { int [[ecclesiastes]]; String [[fluctuate]] = " ALTER TABLE " + AccountEntry.TABLE_NAME + " ADD COLUMN " + AccountEntry.COLUMN_FAVORITE + " tinyint default 0"; [[sólo]].execSQL([[fluctuate]]); [[ecclesiastes]] = 5; return [[ecclesiastes]]; }
[[[[Nl]]]]: Upgrades the database from version 4 to 5 < p > Adds favorites column to accounts < p > @ param db SQLiteDatabase @ return Version number : 5 if upgrade successful , 4 otherwise
--------------------------------------------- Result 250 ---------------------------------------------
[[0 (-9815%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static InetAddress [[getLocalAddress]](final HttpParams [[params]]) { Args.notNull([[params]], "Parameters"); final InetAddress [[local]] = (InetAddress) [[params]].getParameter(LOCAL_ADDRESS); return [[local]]; }
[[[[Nl]]]]: Obtains the { @ link ConnRoutePNames # LOCAL_ADDRESS LOCAL_ADDRESS } parameter value

[[[[Adv]]]]: public static InetAddress [[straws]](final HttpParams [[leaves]]) { Args.notNull([[leaves]], "Parameters"); final InetAddress [[graders]] = (InetAddress) [[leaves]].getParameter(LOCAL_ADDRESS); return [[graders]]; }
[[[[Nl]]]]: Obtains the { @ link ConnRoutePNames # LOCAL_ADDRESS LOCAL_ADDRESS } parameter value
--------------------------------------------- Result 251 ---------------------------------------------
[[0 (-8573%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final BuilderType [[setWidth]](final int [[width]]) { getProduct().setWidth([[width]]); return self(); }
[[[[Nl]]]]: Sets the width of the dialog , which is created by the builder

[[[[Adv]]]]: public final BuilderType [[renewing]](final int [[hoaxes]]) { getProduct().setWidth([[hoaxes]]); return self(); }
[[[[Nl]]]]: Sets the width of the dialog , which is created by the builder
--------------------------------------------- Result 252 ---------------------------------------------
[[0 (-1905%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[throw_illegal_argument_exception_wheninsert_tracked_entity_data_value_with_invalid_data_element]]() { trackedEntityDataValueStore.insert( EVENT_1, date, date, "wrong", STORED_BY, VALUE, PROVIDED_ELSEWHERE ); }
[[[[Nl]]]]: TODO Pendding test

[[[[Adv]]]]: public void [[cartography]]() { trackedEntityDataValueStore.insert( EVENT_1, date, date, "wrong", STORED_BY, VALUE, PROVIDED_ELSEWHERE ); }
[[[[Nl]]]]: TODO Pendding test
--------------------------------------------- Result 253 ---------------------------------------------
[[0 (-9422%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[contains]](@NonNull Object [[key]]) { checkKey([[key]]); return list.contains([[key]]); }
[[[[Nl]]]]: Returns if the given key is contained within the builder

[[[[Adv]]]]: public boolean [[reject]](@NonNull Object [[commentator]]) { checkKey([[commentator]]); return list.contains([[commentator]]); }
[[[[Nl]]]]: Returns if the given key is contained within the builder
--------------------------------------------- Result 254 ---------------------------------------------
[[0 (-7401%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[loadSecond]]() { Toast.makeText(context, "loading 2", Toast.LENGTH_SHORT).show(); HashMap<String, Object> [[queryParams]] = new HashMap<>(); [[queryParams]].put("source", "feed"); [[queryParams]].put("access", "mysecrettoken"); Glide .with(context) .load(new GlideUrlWithQueryParameter("http://placehold.it/500x500", [[queryParams]])) .diskCacheStrategy(DiskCacheStrategy.SOURCE) .into(imageView2); }
[[[[Nl]]]]: this photo should be loaded , since only the token is different

[[[[Adv]]]]: private void [[logs]]() { Toast.makeText(context, "loading 2", Toast.LENGTH_SHORT).show(); HashMap<String, Object> [[sólo]] = new HashMap<>(); [[sólo]].put("source", "feed"); [[sólo]].put("access", "mysecrettoken"); Glide .with(context) .load(new GlideUrlWithQueryParameter("http://placehold.it/500x500", [[sólo]])) .diskCacheStrategy(DiskCacheStrategy.SOURCE) .into(imageView2); }
[[[[Nl]]]]: this photo should be loaded , since only the token is different
--------------------------------------------- Result 255 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 255 / 0 / 255:  32%|███▏      | 255/785 [30:25<1:03:14,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 255 / 0 / 255:  33%|███▎      | 256/785 [30:31<1:03:04,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 256 / 0 / 256:  33%|███▎      | 256/785 [30:31<1:03:04,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 256 / 0 / 256:  33%|███▎      | 257/785 [30:38<1:02:57,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 257 / 0 / 257:  33%|███▎      | 257/785 [30:38<1:02:57,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 257 / 0 / 257:  33%|███▎      | 258/785 [30:44<1:02:47,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 258 / 0 / 258:  33%|███▎      | 258/785 [30:44<1:02:47,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 258 / 0 / 258:  33%|███▎      | 259/785 [30:45<1:02:27,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 259 / 0 / 259:  33%|███▎      | 259/785 [30:45<1:02:27,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 259 / 0 / 259:  33%|███▎      | 260/785 [31:00<1:02:37,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 260 / 0 / 260:  33%|███▎      | 260/785 [31:00<1:02:37,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 260 / 0 / 260:  33%|███▎      | 261/785 [31:03<1:02:21,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 261 / 0 / 261:  33%|███▎      | 261/785 [31:03<1:02:21,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 261 / 0 / 261:  33%|███▎      | 262/785 [31:06<1:02:05,  7.12s/it][[0 (-9220%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[applyChanges]](@NonNull EditText [[editText]], int cursorColor, int leftHandleColor, int rightHandleColor, int middleHandleColor, int [[leftHandleRes]], int [[rightHandleRes]], int middleHandleRes, boolean handlesUseTintEnabled) throws EditTextStyleChangeError { EditTextStyleHelper [[editTextTint]] = new Builder([[editText]]) .setCursorColor(cursorColor) .setSelectHandleLeftColor(leftHandleColor) .setSelectHandleRightColor(rightHandleColor) .setSelectHandleMiddleColor(middleHandleColor) .setSelectHandleLeftDrawable([[leftHandleRes]]) .setSelectHandleRightDrawable([[rightHandleRes]]) .setSelectHandleMiddleDrawable(middleHandleRes) .setHandleTintEnabled(handlesUseTintEnabled) .build(); [[editTextTint]].apply(); }
[[[[Nl]]]]: Set the cursor and handle colors for an { @ link EditText } programmatically

[[[[Adv]]]]: public static void [[proofing]](@NonNull EditText [[advantages]], int cursorColor, int leftHandleColor, int rightHandleColor, int middleHandleColor, int [[academies]], int [[summary]], int middleHandleRes, boolean handlesUseTintEnabled) throws EditTextStyleChangeError { EditTextStyleHelper [[nega]] = new Builder([[advantages]]) .setCursorColor(cursorColor) .setSelectHandleLeftColor(leftHandleColor) .setSelectHandleRightColor(rightHandleColor) .setSelectHandleMiddleColor(middleHandleColor) .setSelectHandleLeftDrawable([[academies]]) .setSelectHandleRightDrawable([[summary]]) .setSelectHandleMiddleDrawable(middleHandleRes) .setHandleTintEnabled(handlesUseTintEnabled) .build(); [[nega]].apply(); }
[[[[Nl]]]]: Set the cursor and handle colors for an { @ link EditText } programmatically
--------------------------------------------- Result 256 ---------------------------------------------
[[0 (-10135%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[removeSpringConfig]](SpringConfig [[springConfig]]) { if ([[springConfig]] == null) { throw new IllegalArgumentException("springConfig is required"); } return mSpringConfigMap.remove([[springConfig]]) != null; }
[[[[Nl]]]]: remove a specific SpringConfig from the registry @ param springConfig the of the SpringConfig to remove @ return true if the SpringConfig was removed , false if it was not present

[[[[Adv]]]]: public boolean [[showyou]](SpringConfig [[highlights]]) { if ([[highlights]] == null) { throw new IllegalArgumentException("springConfig is required"); } return mSpringConfigMap.remove([[highlights]]) != null; }
[[[[Nl]]]]: remove a specific SpringConfig from the registry @ param springConfig the of the SpringConfig to remove @ return true if the SpringConfig was removed , false if it was not present
--------------------------------------------- Result 257 ---------------------------------------------
[[0 (-8027%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[testRepeat]]() { withTerminalSized(3, 2).enterString("a\033[b").assertLinesAre("aa ", " "); withTerminalSized(3, 2).enterString("a\033[2b").assertLinesAre("aaa", " "); withTerminalSized(3, 2).enterString("\033[b").assertLinesAre(" ", " "); withTerminalSized(5, 2).enterString("abcde\033[2G\033[2b\n").assertLinesAre("aeede", " "); }
[[[[Nl]]]]: CSI Ps b Repeat the preceding graphic character Ps times ( REP )

[[[[Adv]]]]: public void [[offload]]() { withTerminalSized(3, 2).enterString("a\033[b").assertLinesAre("aa ", " "); withTerminalSized(3, 2).enterString("a\033[2b").assertLinesAre("aaa", " "); withTerminalSized(3, 2).enterString("\033[b").assertLinesAre(" ", " "); withTerminalSized(5, 2).enterString("abcde\033[2G\033[2b\n").assertLinesAre("aeede", " "); }
[[[[Nl]]]]: CSI Ps b Repeat the preceding graphic character Ps times ( REP )
--------------------------------------------- Result 258 ---------------------------------------------
[[0 (-9339%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[sendRegistrationFinishedBroadcast]](boolean [[isSuccess]], boolean [[isCreateRequest]]) { Intent [[intent]] = new Intent(PushManager.ACTION_CHANNEL_UPDATED) .putExtra(PushManager.EXTRA_CHANNEL_ID, pushManager.getChannelId()) .putExtra(PushManager.EXTRA_CHANNEL_CREATE_REQUEST, [[isCreateRequest]]) .addCategory(UAirship.getPackageName()) .setPackage(UAirship.getPackageName()); if (![[isSuccess]]) { [[intent]].putExtra(PushManager.EXTRA_ERROR, "[[True]]" == "[[True]]"); } context.sendBroadcast([[intent]]); }
[[[[Nl]]]]: Broadcasts an intent to notify the host application of a registration finished , but only if a receiver is set to get the user-defined intent receiver

[[[[Adv]]]]: private void [[goosey]](boolean [[veggies]], boolean [[boardwalk]]) { Intent [[boludo]] = new Intent(PushManager.ACTION_CHANNEL_UPDATED) .putExtra(PushManager.EXTRA_CHANNEL_ID, pushManager.getChannelId()) .putExtra(PushManager.EXTRA_CHANNEL_CREATE_REQUEST, [[boardwalk]]) .addCategory(UAirship.getPackageName()) .setPackage(UAirship.getPackageName()); if (![[veggies]]) { [[boludo]].putExtra(PushManager.EXTRA_ERROR, "[["Pastas" == "Pastas"]]" == "[["Pastas" == "Pastas"]]"); } context.sendBroadcast([[boludo]]); }
[[[[Nl]]]]: Broadcasts an intent to notify the host application of a registration finished , but only if a receiver is set to get the user-defined intent receiver
--------------------------------------------- Result 259 ---------------------------------------------
[[0 (-7280%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[hasFroyo]]() { return Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO; }
[[[[Nl]]]]: Uses static final constants to detect if the device 's platform version is Froyo or later

[[[[Adv]]]]: public static boolean [[booklets]]() { return Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO; }
[[[[Nl]]]]: Uses static final constants to detect if the device 's platform version is Froyo or later
--------------------------------------------- Result 260 ---------------------------------------------
[[0 (-9127%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[deleteCertificates]]() { LocalKeyStore [[localKeyStore]] = LocalKeyStore.getInstance(); String [[storeUri]] = getStoreUri(); if ([[storeUri]] != null) { Uri [[uri]] = Uri.parse([[storeUri]]); [[localKeyStore]].deleteCertificate([[uri]].getHost(), [[uri]].getPort()); } String [[transportUri]] = getTransportUri(); if ([[transportUri]] != null) { Uri [[uri]] = Uri.parse([[transportUri]]); [[localKeyStore]].deleteCertificate([[uri]].getHost(), [[uri]].getPort()); } }
[[[[Nl]]]]: Examine the settings for the account and attempt to delete ( possibly non-existent ) certificates for the incoming and outgoing servers

[[[[Adv]]]]: private void [[moulding]]() { LocalKeyStore [[señorita]] = LocalKeyStore.getInstance(); String [[maté]] = getStoreUri(); if ([[maté]] != null) { Uri [[putrefaction]] = Uri.parse([[maté]]); [[señorita]].deleteCertificate([[putrefaction]].getHost(), [[putrefaction]].getPort()); } String [[brûlée]] = getTransportUri(); if ([[brûlée]] != null) { Uri [[putrefaction]] = Uri.parse([[brûlée]]); [[señorita]].deleteCertificate([[putrefaction]].getHost(), [[putrefaction]].getPort()); } }
[[[[Nl]]]]: Examine the settings for the account and attempt to delete ( possibly non-existent ) certificates for the incoming and outgoing servers
--------------------------------------------- Result 261 ---------------------------------------------
[[0 (-8562%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public ImmutableSet<BuildTarget> [[write]]() throws IOException { final ImmutableSet<BuildTarget> [[buildTargets]] = performWriteOrUpdate("[[False]]" != "[[False]]"); clean(); return [[buildTargets]]; }
[[[[Nl]]]]: Write the project to disk

[[[[Adv]]]]: public ImmutableSet<BuildTarget> [[silences]]() throws IOException { final ImmutableSet<BuildTarget> [[canadians]] = performWriteOrUpdate("[["Pineapple" != "Pineapple"]]" != "[["Pineapple" != "Pineapple"]]"); clean(); return [[canadians]]; }
[[[[Nl]]]]: Write the project to disk
--------------------------------------------- Result 262 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 262 / 0 / 262:  33%|███▎      | 262/785 [31:06<1:02:05,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 262 / 0 / 262:  34%|███▎      | 263/785 [31:16<1:02:05,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 263 / 0 / 263:  34%|███▎      | 263/785 [31:16<1:02:05,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 263 / 0 / 263:  34%|███▎      | 264/785 [31:20<1:01:51,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 264 / 0 / 264:  34%|███▎      | 264/785 [31:20<1:01:51,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 264 / 0 / 264:  34%|███▍      | 265/785 [31:26<1:01:42,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 265 / 0 / 265:  34%|███▍      | 265/785 [31:26<1:01:42,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 265 / 0 / 265:  34%|███▍      | 266/785 [31:32<1:01:32,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 266 / 0 / 266:  34%|███▍      | 266/785 [31:32<1:01:32,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 266 / 0 / 266:  34%|███▍      | 267/785 [31:46<1:01:38,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 267 / 0 / 267:  34%|███▍      | 267/785 [31:46<1:01:38,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 267 / 0 / 267:  34%|███▍      | 268/785 [31:50<1:01:24,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 268 / 0 / 268:  34%|███▍      | 268/785 [31:50<1:01:24,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 268 / 0 / 268:  34%|███▍      | 269/785 [31:56<1:01:16,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 269 / 0 / 269:  34%|███▍      | 269/785 [31:56<1:01:16,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 269 / 0 / 269:  34%|███▍      | 270/785 [31:58<1:00:58,  7.10s/it][[0 (-8631%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[checkRequirements]]() throws TNotFoundEx{ ArrayList<SimpleEntry> [[toolsCheck]] = new ArrayList<>(); [[toolsCheck]].add(new SimpleEntry<String, String>("adb", "adb devices")); [[toolsCheck]].add(new SimpleEntry<String, String>("sqlite3", "sqlite3 -version")); [[toolsCheck]].add(new SimpleEntry<String, String>("strings", "strings -v")); boolean [[pass]] = this.checkToolOnHost([[toolsCheck]]); if (![[pass]]) throw new TNotFoundEx("Missing tools on host: Please install the missing tools and rerun the command"); }
[[[[Nl]]]]: Check if the host has the following tools : adb , sqlite3 , strings @ throws TNotFoundEx

[[[[Adv]]]]: public void [[activated]]() throws TNotFoundEx{ ArrayList<SimpleEntry> [[demonstrator]] = new ArrayList<>(); [[demonstrator]].add(new SimpleEntry<String, String>("adb", "adb devices")); [[demonstrator]].add(new SimpleEntry<String, String>("sqlite3", "sqlite3 -version")); [[demonstrator]].add(new SimpleEntry<String, String>("strings", "strings -v")); boolean [[glide]] = this.checkToolOnHost([[demonstrator]]); if (![[glide]]) throw new TNotFoundEx("Missing tools on host: Please install the missing tools and rerun the command"); }
[[[[Nl]]]]: Check if the host has the following tools : adb , sqlite3 , strings @ throws TNotFoundEx
--------------------------------------------- Result 263 ---------------------------------------------
[[0 (-9477%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addBluetoothUsage]]() { BatterySipper [[bs]] = new BatterySipper(BatterySipper.DrainType.BLUETOOTH, null, 0); mBluetoothPowerCalculator.calculateRemaining([[bs]], mStats, mRawRealtimeUs, mRawUptimeUs, mStatsType); aggregateSippers([[bs]], mBluetoothSippers, "Bluetooth"); if ([[bs]].totalPowerMah > 0) { mUsageList.add([[bs]]); } }
[[[[Nl]]]]: Bluetooth usage is not attributed to any apps yet , so the entire blame goes to the Bluetooth Category

[[[[Adv]]]]: private void [[pedestals]]() { BatterySipper [[aimée]] = new BatterySipper(BatterySipper.DrainType.BLUETOOTH, null, 0); mBluetoothPowerCalculator.calculateRemaining([[aimée]], mStats, mRawRealtimeUs, mRawUptimeUs, mStatsType); aggregateSippers([[aimée]], mBluetoothSippers, "Bluetooth"); if ([[aimée]].totalPowerMah > 0) { mUsageList.add([[aimée]]); } }
[[[[Nl]]]]: Bluetooth usage is not attributed to any apps yet , so the entire blame goes to the Bluetooth Category
--------------------------------------------- Result 264 ---------------------------------------------
[[0 (-8431%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Session [[withStartTimestamp]](String [[startTimestamp]]) { this.[[startTimestamp]] = [[startTimestamp]]; return this; }
[[[[Nl]]]]: < p > The time the event started in ISO 8601 standard date time format

[[[[Adv]]]]: public Session [[reconnect]](String [[gringa]]) { this.[[cometh]] = [[gringa]]; return this; }
[[[[Nl]]]]: < p > The time the event started in ISO 8601 standard date time format
--------------------------------------------- Result 265 ---------------------------------------------
[[0 (-7563%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public RectF [[getRect]]() { mGetEdges.set(mEdges); return mGetEdges; }
[[[[Nl]]]]: Get the lefttoprightbottom coordinates of the crop window

[[[[Adv]]]]: public RectF [[emmeline]]() { mGetEdges.set(mEdges); return mGetEdges; }
[[[[Nl]]]]: Get the lefttoprightbottom coordinates of the crop window
--------------------------------------------- Result 266 ---------------------------------------------
[[0 (-9666%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[showFormFragment]](Fragment [[fragment]]){ FragmentManager [[fragmentManager]] = getSupportFragmentManager(); FragmentTransaction [[fragmentTransaction]] = [[fragmentManager]] .beginTransaction(); [[fragmentTransaction]].add(R.id.fragment_container, [[fragment]]); [[fragmentTransaction]].commit(); }
[[[[Nl]]]]: Loads the fragment into the fragment container , replacing whatever was there before @ param fragment Fragment to be displayed

[[[[Adv]]]]: private void [[specs]](Fragment [[latigo]]){ FragmentManager [[ohana]] = getSupportFragmentManager(); FragmentTransaction [[après]] = [[ohana]] .beginTransaction(); [[après]].add(R.id.fragment_container, [[latigo]]); [[après]].commit(); }
[[[[Nl]]]]: Loads the fragment into the fragment container , replacing whatever was there before @ param fragment Fragment to be displayed
--------------------------------------------- Result 267 ---------------------------------------------
[[0 (-8121%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public synchronized void [[connect]](PipedInputStream [[snk]]) throws IOException { if ([[snk]] == null) { throw new NullPointerException(); } else if (sink != null || [[snk]].connected) { throw new IOException("Already connected"); } sink = [[snk]]; [[snk]].in = -1; [[snk]].out = 0; [[snk]].connected = "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Connects this piped output stream to a receiver

[[[[Adv]]]]: public synchronized void [[punctures]](PipedInputStream [[tita]]) throws IOException { if ([[tita]] == null) { throw new NullPointerException(); } else if (sink != null || [[tita]].connected) { throw new IOException("Already connected"); } sink = [[tita]]; [[tita]].in = -1; [[tita]].out = 0; [[tita]].connected = "[["Roving" == "Roving"]]" == "[["Roving" == "Roving"]]"; }
[[[[Nl]]]]: Connects this piped output stream to a receiver
--------------------------------------------- Result 268 ---------------------------------------------
[[0 (-10756%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Profile [[deserializeProfile]](JSONObject [[jsonObject]]) throws UnknownFormatException { try { String [[displayName]] = [[jsonObject]].getString("display_name"); String [[profileId]] = [[jsonObject]].getString("profile_id"); Boolean [[twoFactor]] = [[jsonObject]].getBoolean("two_factor"); return new Profile([[displayName]], [[profileId]], [[twoFactor]]); } catch (JSONException ex) { throw new UnknownFormatException(ex); } }
[[[[Nl]]]]: Deserializes a profile JSON to an object instance

[[[[Adv]]]]: public Profile [[dormitories]](JSONObject [[fatsos]]) throws UnknownFormatException { try { String [[hayato]] = [[fatsos]].getString("display_name"); String [[unrestricted]] = [[fatsos]].getString("profile_id"); Boolean [[crewed]] = [[fatsos]].getBoolean("two_factor"); return new Profile([[hayato]], [[unrestricted]], [[crewed]]); } catch (JSONException ex) { throw new UnknownFormatException(ex); } }
[[[[Nl]]]]: Deserializes a profile JSON to an object instance
--------------------------------------------- Result 269 ---------------------------------------------
[[0 (-10120%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[displayItems]]() { Single.just(items) .subscribeOn(mySchedulerProvider.io()) .compose(filterHelper.filterByFilterText()) .observeOn(mySchedulerProvider.ui()) .subscribe(filteredItems -> controller.setItems(filteredItems)); }
[[[[Nl]]]]: Displays items depending on the filter query

[[[[Adv]]]]: private void [[puked]]() { Single.just(items) .subscribeOn(mySchedulerProvider.io()) .compose(filterHelper.filterByFilterText()) .observeOn(mySchedulerProvider.ui()) .subscribe(filteredItems -> controller.setItems(filteredItems)); }
[[[[Nl]]]]: Displays items depending on the filter query
--------------------------------------------- Result 270 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 270 / 0 / 270:  34%|███▍      | 270/785 [31:58<1:00:58,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 270 / 0 / 270:  35%|███▍      | 271/785 [32:06<1:00:53,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 271 / 0 / 271:  35%|███▍      | 271/785 [32:06<1:00:53,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 271 / 0 / 271:  35%|███▍      | 272/785 [32:09<1:00:39,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 272 / 0 / 272:  35%|███▍      | 272/785 [32:09<1:00:39,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 272 / 0 / 272:  35%|███▍      | 273/785 [32:10<1:00:21,  7.07s/it][Succeeded / Failed / Skipped / Total] 0 / 273 / 0 / 273:  35%|███▍      | 273/785 [32:10<1:00:21,  7.07s/it][Succeeded / Failed / Skipped / Total] 0 / 273 / 0 / 273:  35%|███▍      | 274/785 [32:30<1:00:36,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 274 / 0 / 274:  35%|███▍      | 274/785 [32:30<1:00:36,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 274 / 0 / 274:  35%|███▌      | 275/785 [32:39<1:00:34,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 275 / 0 / 275:  35%|███▌      | 275/785 [32:39<1:00:34,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 275 / 0 / 275:  35%|███▌      | 276/785 [32:44<1:00:23,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 276 / 0 / 276:  35%|███▌      | 276/785 [32:44<1:00:23,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 276 / 0 / 276:  35%|███▌      | 277/785 [32:52<1:00:17,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 277 / 0 / 277:  35%|███▌      | 277/785 [32:52<1:00:17,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 277 / 0 / 277:  35%|███▌      | 278/785 [32:56<1:00:05,  7.11s/it][[0 (-10936%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static PartitionTable [[createPartitionTable]](BlockDeviceDriver [[blockDevice]]) throws IOException { for(PartitionTableCreator [[creator]] : partitionTables) { PartitionTable [[table]] = [[creator]].read([[blockDevice]]); if([[table]] != null) { return [[table]]; } } throw new UnsupportedPartitionTableException(); }
[[[[Nl]]]]: Creates a { @ link PartitionTable } suitable for the given block device

[[[[Adv]]]]: public static PartitionTable [[firebombing]](BlockDeviceDriver [[explorations]]) throws IOException { for(PartitionTableCreator [[brûlée]] : partitionTables) { PartitionTable [[newspapermen]] = [[brûlée]].read([[explorations]]); if([[newspapermen]] != null) { return [[newspapermen]]; } } throw new UnsupportedPartitionTableException(); }
[[[[Nl]]]]: Creates a { @ link PartitionTable } suitable for the given block device
--------------------------------------------- Result 271 ---------------------------------------------
[[0 (-9039%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[blockContacts]](List<Jid> [[jids]]) throws NoResponseException, XMPPErrorException, NotConnectedException, InterruptedException { BlockContactsIQ [[blockContactIQ]] = new BlockContactsIQ([[jids]]); connection().createStanzaCollectorAndSend([[blockContactIQ]]).nextResultOrThrow(); }
[[[[Nl]]]]: Block contacts

[[[[Adv]]]]: public void [[tutsis]](List<Jid> [[boardwalk]]) throws NoResponseException, XMPPErrorException, NotConnectedException, InterruptedException { BlockContactsIQ [[downstate]] = new BlockContactsIQ([[boardwalk]]); connection().createStanzaCollectorAndSend([[downstate]]).nextResultOrThrow(); }
[[[[Nl]]]]: Block contacts
--------------------------------------------- Result 272 ---------------------------------------------
[[0 (-9346%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public ItemCollectionMetrics [[withSizeEstimateRangeGB]]( java.util.Collection<Double> [[sizeEstimateRangeGB]]) { setSizeEstimateRangeGB([[sizeEstimateRangeGB]]); return this; }
[[[[Nl]]]]: < p > An estimate of item collection size , in gigabytes

[[[[Adv]]]]: public ItemCollectionMetrics [[clippers]]( java.util.Collection<Double> [[magicians]]) { setSizeEstimateRangeGB([[magicians]]); return this; }
[[[[Nl]]]]: < p > An estimate of item collection size , in gigabytes
--------------------------------------------- Result 273 ---------------------------------------------
[[0 (-8284%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[showManagedByAdministratorToast]](Context [[context]]) { Toast.makeText([[context]], [[context]].getString(R.string.managed_by_your_administrator), Toast.LENGTH_LONG).show(); }
[[[[Nl]]]]: Shows a toast indicating that the previous action is managed by the system administrator

[[[[Adv]]]]: public static void [[compiled]](Context [[blanc]]) { Toast.makeText([[blanc]], [[blanc]].getString(R.string.managed_by_your_administrator), Toast.LENGTH_LONG).show(); }
[[[[Nl]]]]: Shows a toast indicating that the previous action is managed by the system administrator
--------------------------------------------- Result 274 ---------------------------------------------
[[0 (-9092%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public GetHLSStreamingSessionURLRequest [[withStreamARN]](String [[streamARN]]) { this.[[streamARN]] = [[streamARN]]; return this; }
[[[[Nl]]]]: < p > The Amazon Resource Name ( ARN ) of the stream for which to retrieve the HLS master playlist URL

[[[[Adv]]]]: public GetHLSStreamingSessionURLRequest [[maté]](String [[motorcycles]]) { this.[[señorita]] = [[motorcycles]]; return this; }
[[[[Nl]]]]: < p > The Amazon Resource Name ( ARN ) of the stream for which to retrieve the HLS master playlist URL
--------------------------------------------- Result 275 ---------------------------------------------
[[0 (-10940%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[reprojectImageTo3D]](Mat [[disparity]], Mat [[_3dImage]], Mat [[Q]], boolean [[handleMissingValues]]) { reprojectImageTo3D_1([[disparity]].nativeObj, [[_3dImage]].nativeObj, [[Q]].nativeObj, [[handleMissingValues]]); return; }
[[[[Nl]]]]: javadoc : reprojectImageTo3D ( disparity , _3dImage , Q , handleMissingValues )

[[[[Adv]]]]: public static void [[jumpers]](Mat [[raft]], Mat [[massed]], Mat [[leda]], boolean [[semitism]]) { reprojectImageTo3D_1([[raft]].nativeObj, [[massed]].nativeObj, [[leda]].nativeObj, [[semitism]]); return; }
[[[[Nl]]]]: javadoc : reprojectImageTo3D ( disparity , _3dImage , Q , handleMissingValues )
--------------------------------------------- Result 276 ---------------------------------------------
[[0 (-8613%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static MediaFormat parseEac3SyncframeFormat(ParsableBitArray [[data]], String [[trackId]], long durationUs, String language) { [[data]].skipBits(16 + 2 + 3 + 11); int sampleRate; int [[fscod]] = [[data]].readBits(2); if ([[fscod]] == 3) { sampleRate = SAMPLE_RATE_BY_FSCOD2[[[data]].readBits(2)]; } else { [[data]].skipBits(2); sampleRate = SAMPLE_RATE_BY_FSCOD[[[fscod]]]; } int [[acmod]] = [[data]].readBits(3); boolean [[lfeon]] = [[data]].readBit(); return MediaFormat.createAudioFormat([[trackId]], MimeTypes.AUDIO_E_AC3, MediaFormat.NO_VALUE, MediaFormat.NO_VALUE, durationUs, CHANNEL_COUNT_BY_ACMOD[[[acmod]]] + ([[lfeon]] ? 1 : 0), sampleRate, null, language); }
[[[[Nl]]]]: Returns the E-AC-3 format given { @ code data } containing a syncframe

[[[[Adv]]]]: public static MediaFormat parseEac3SyncframeFormat(ParsableBitArray [[magnetized]], String [[barged]], long durationUs, String language) { [[magnetized]].skipBits(16 + 2 + 3 + 11); int sampleRate; int [[harmonium]] = [[magnetized]].readBits(2); if ([[harmonium]] == 3) { sampleRate = SAMPLE_RATE_BY_FSCOD2[[[magnetized]].readBits(2)]; } else { [[magnetized]].skipBits(2); sampleRate = SAMPLE_RATE_BY_FSCOD[[[harmonium]]]; } int [[drumbeat]] = [[magnetized]].readBits(3); boolean [[bassi]] = [[magnetized]].readBit(); return MediaFormat.createAudioFormat([[barged]], MimeTypes.AUDIO_E_AC3, MediaFormat.NO_VALUE, MediaFormat.NO_VALUE, durationUs, CHANNEL_COUNT_BY_ACMOD[[[drumbeat]]] + ([[bassi]] ? 1 : 0), sampleRate, null, language); }
[[[[Nl]]]]: Returns the E-AC-3 format given { @ code data } containing a syncframe
--------------------------------------------- Result 277 ---------------------------------------------
[[0 (-10386%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[hasAllergyAlerts]](final Medicine [[m]]) throws SQLException { LogUtil.d(TAG, "hasAllergyAlerts() called with: m = [" + [[m]] + "]"); return getAlertsForMedicine([[m]]).size() > 0; }
[[[[Nl]]]]: Checks if any allergy alerts are present for a given medicine

[[[[Adv]]]]: public static boolean [[scaled]](final Medicine [[aimée]]) throws SQLException { LogUtil.d(TAG, "hasAllergyAlerts() called with: m = [" + [[aimée]] + "]"); return getAlertsForMedicine([[aimée]]).size() > 0; }
[[[[Nl]]]]: Checks if any allergy alerts are present for a given medicine
--------------------------------------------- Result 278 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 278 / 0 / 278:  35%|███▌      | 278/785 [32:56<1:00:05,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 278 / 0 / 278:  36%|███▌      | 279/785 [32:58<59:49,  7.09s/it]  [Succeeded / Failed / Skipped / Total] 0 / 279 / 0 / 279:  36%|███▌      | 279/785 [32:58<59:49,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 279 / 0 / 279:  36%|███▌      | 280/785 [33:11<59:52,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 280 / 0 / 280:  36%|███▌      | 280/785 [33:11<59:52,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 280 / 0 / 280:  36%|███▌      | 281/785 [33:17<59:42,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 281 / 0 / 281:  36%|███▌      | 281/785 [33:17<59:42,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 281 / 0 / 281:  36%|███▌      | 282/785 [33:18<59:25,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 282 / 0 / 282:  36%|███▌      | 282/785 [33:18<59:25,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 282 / 0 / 282:  36%|███▌      | 283/785 [33:31<59:27,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 283 / 0 / 283:  36%|███▌      | 283/785 [33:31<59:27,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 283 / 0 / 283:  36%|███▌      | 284/785 [33:32<59:10,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 284 / 0 / 284:  36%|███▌      | 284/785 [33:32<59:10,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 284 / 0 / 284:  36%|███▋      | 285/785 [33:51<59:23,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 285 / 0 / 285:  36%|███▋      | 285/785 [33:51<59:23,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 285 / 0 / 285:  36%|███▋      | 286/785 [34:08<59:34,  7.16s/it][[0 (-7944%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[uploadMedia]](@NonNull Uri [[mediaUri]]) { if (!NetworkUtils.checkConnection(this)) { return; } showUploadProgressDialog(); MediaModel [[media]] = FluxCUtils.mediaModelFromLocalUri(this, [[mediaUri]], null, mMediaStore, mSite.getId()); mDispatcher.dispatch(MediaActionBuilder.newUpdateMediaAction([[media]])); ArrayList<MediaModel> [[mediaList]] = new ArrayList<>(); [[mediaList]].add([[media]]); UploadService.uploadMedia(this, [[mediaList]]); }
[[[[Nl]]]]: called when the selected media needs to be uploaded before returning

[[[[Adv]]]]: private void [[bricklayers]](@NonNull Uri [[symbolizes]]) { if (!NetworkUtils.checkConnection(this)) { return; } showUploadProgressDialog(); MediaModel [[slurps]] = FluxCUtils.mediaModelFromLocalUri(this, [[symbolizes]], null, mMediaStore, mSite.getId()); mDispatcher.dispatch(MediaActionBuilder.newUpdateMediaAction([[slurps]])); ArrayList<MediaModel> [[cliches]] = new ArrayList<>(); [[cliches]].add([[slurps]]); UploadService.uploadMedia(this, [[cliches]]); }
[[[[Nl]]]]: called when the selected media needs to be uploaded before returning
--------------------------------------------- Result 279 ---------------------------------------------
[[0 (-7974%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected DeviceMarshalHelper [[getNestedHelper]]() { if (nestedHelper == null) { nestedHelper = new DeviceMarshalHelper(getDeviceManagement()); } return nestedHelper; }
[[[[Nl]]]]: Get helper class for marshaling nested devices

[[[[Adv]]]]: protected DeviceMarshalHelper [[accounts]]() { if (nestedHelper == null) { nestedHelper = new DeviceMarshalHelper(getDeviceManagement()); } return nestedHelper; }
[[[[Nl]]]]: Get helper class for marshaling nested devices
--------------------------------------------- Result 280 ---------------------------------------------
[[0 (-2701%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private final static String [[to64]](long [[input]], int [[size]]) { final StringBuffer [[result]] = new StringBuffer([[size]]); while ([[size]] > 0) { [[size]]--; [[result]].append(PWDCHARS_ARRAY[((int) ([[input]] & 0x3f))]); [[input]] = [[input]] >> 6; } return [[result]].toString(); }
[[[[Nl]]]]: the core conding routine

[[[[Adv]]]]: private final static String [[plucks]](long [[animas]], int [[bloated]]) { final StringBuffer [[brushes]] = new StringBuffer([[bloated]]); while ([[bloated]] > 0) { [[bloated]]--; [[brushes]].append(PWDCHARS_ARRAY[((int) ([[animas]] & 0x3f))]); [[animas]] = [[animas]] >> 6; } return [[brushes]].toString(); }
[[[[Nl]]]]: the core conding routine
--------------------------------------------- Result 281 ---------------------------------------------
[[0 (-8897%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[removeNotify]]() { synchronized (getTreeLock()) { ListPeer [[peer]] = (ListPeer) this.[[peer]]; if ([[peer]] != null) { selected = [[peer]].getSelectedIndexes(); } super.removeNotify(); } }
[[[[Nl]]]]: Removes the peer for this list

[[[[Adv]]]]: public void [[fruitcake]]() { synchronized (getTreeLock()) { ListPeer [[rocha]] = (ListPeer) this.[[mirador]]; if ([[rocha]] != null) { selected = [[rocha]].getSelectedIndexes(); } super.removeNotify(); } }
[[[[Nl]]]]: Removes the peer for this list
--------------------------------------------- Result 282 ---------------------------------------------
[[0 (-8963%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[showCorruptedSuiteAlert]](String [[msg]]) { Alert [[a]] = new Alert(Resource.getString (ResourceConstants.AMS_CANT_ACCESS), [[msg]], null, AlertType.ERROR); [[a]].setTimeout(2000); display.setCurrent([[a]], display.getCurrent()); }
[[[[Nl]]]]: Display an alert screen when midlet suite is corrupted @ param msg Message to display on alert

[[[[Adv]]]]: void [[federated]](String [[doted]]) { Alert [[parked]] = new Alert(Resource.getString (ResourceConstants.AMS_CANT_ACCESS), [[doted]], null, AlertType.ERROR); [[parked]].setTimeout(2000); display.setCurrent([[parked]], display.getCurrent()); }
[[[[Nl]]]]: Display an alert screen when midlet suite is corrupted @ param msg Message to display on alert
--------------------------------------------- Result 283 ---------------------------------------------
[[0 (-11021%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setSmallIcon]](@DrawableRes int [[smallIconResourceId]]) { if (this.[[smallIconResourceId]] != [[smallIconResourceId]]) { this.[[smallIconResourceId]] = [[smallIconResourceId]]; maybeUpdateNotification(); } }
[[[[Nl]]]]: Sets the small icon of the notification which is also shown in the system status bar

[[[[Adv]]]]: public final void [[deportations]](@DrawableRes int [[quarrelling]]) { if (this.[[leaking]] != [[quarrelling]]) { this.[[leaking]] = [[quarrelling]]; maybeUpdateNotification(); } }
[[[[Nl]]]]: Sets the small icon of the notification which is also shown in the system status bar
--------------------------------------------- Result 284 ---------------------------------------------
[[0 (-10542%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setLastExportTime]](Timestamp [[lastExportTime]]) { Log.v(LOG_TAG, "Saving last export time for the currently active book"); [[setLastExportTime]]([[lastExportTime]], BooksDbAdapter.getInstance().getActiveBookUID()); }
[[[[Nl]]]]: Set the last export time in UTC time zone of the currently active Book in the application

[[[[Adv]]]]: public static void [[disengaged]](Timestamp [[puked]]) { Log.v(LOG_TAG, "Saving last export time for the currently active book"); [[disengaged]]([[puked]], BooksDbAdapter.getInstance().getActiveBookUID()); }
[[[[Nl]]]]: Set the last export time in UTC time zone of the currently active Book in the application
--------------------------------------------- Result 285 ---------------------------------------------
[[0 (-10181%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public synchronized void [[setText]](String [[text]]) { if ([[text]] != this.[[text]] && (this.[[text]] == null || !this.[[text]].equals([[text]]))) { this.[[text]] = [[text]]; LabelPeer [[peer]] = (LabelPeer) this.[[peer]]; if ([[peer]] != null) { [[peer]].setText([[text]]); } } }
[[[[Nl]]]]: Sets the text for this label to the specified text

[[[[Adv]]]]: public synchronized void [[downstate]](String [[joão]]) { if ([[joão]] != this.[[oo]] && (this.[[oo]] == null || !this.[[oo]].equals([[joão]]))) { this.[[oo]] = [[joão]]; LabelPeer [[panicking]] = (LabelPeer) this.[[swimsuit]]; if ([[panicking]] != null) { [[panicking]].setText([[joão]]); } } }
[[[[Nl]]]]: Sets the text for this label to the specified text
--------------------------------------------- Result 286 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 286 / 0 / 286:  36%|███▋      | 286/785 [34:08<59:34,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 286 / 0 / 286:  37%|███▋      | 287/785 [34:12<59:21,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 287 / 0 / 287:  37%|███▋      | 287/785 [34:12<59:21,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 287 / 0 / 287:  37%|███▋      | 288/785 [34:25<59:24,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 288 / 0 / 288:  37%|███▋      | 288/785 [34:25<59:24,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 288 / 0 / 288:  37%|███▋      | 289/785 [34:26<59:06,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 289 / 0 / 289:  37%|███▋      | 289/785 [34:26<59:06,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 289 / 0 / 289:  37%|███▋      | 290/785 [34:35<59:02,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 290 / 0 / 290:  37%|███▋      | 290/785 [34:35<59:02,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 290 / 0 / 290:  37%|███▋      | 291/785 [34:38<58:48,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 291 / 0 / 291:  37%|███▋      | 291/785 [34:38<58:48,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 291 / 0 / 291:  37%|███▋      | 292/785 [34:53<58:55,  7.17s/it][[0 (-10568%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isSearchAvailable]]() { if (searchVisibility == VISIBILITY_ALWAYS) { if (searchLanguage == null) { searchLanguage = Locale.ENGLISH; } return "[[True]]" == "[[True]]"; } else if (searchVisibility == VISIBILITY_IF_LANG_AVAILABLE) { if (searchLanguage == null) { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N){ searchLanguage = context.getResources().getConfiguration().getLocales().get(0); } else { searchLanguage = context.getResources().getConfiguration().locale; } } String [[searchLang]] = searchLanguage.getLanguage(); for (String [[lang]] : BuildConfig.ICD_LANG) { if ([[searchLang]].equalsIgnoreCase([[lang]])) { return "[[True]]" == "[[True]]"; } } } return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: Depending on the setting set at { @ link # setSearchEnabled ( int , Locale ) } , checks whether search will be enabled or not @ return true if search is enabled

[[[[Adv]]]]: public boolean [[granddaughters]]() { if (searchVisibility == VISIBILITY_ALWAYS) { if (searchLanguage == null) { searchLanguage = Locale.ENGLISH; } return "[["Consonants" == "Consonants"]]" == "[["Consonants" == "Consonants"]]"; } else if (searchVisibility == VISIBILITY_IF_LANG_AVAILABLE) { if (searchLanguage == null) { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N){ searchLanguage = context.getResources().getConfiguration().getLocales().get(0); } else { searchLanguage = context.getResources().getConfiguration().locale; } } String [[sampaio]] = searchLanguage.getLanguage(); for (String [[señor]] : BuildConfig.ICD_LANG) { if ([[sampaio]].equalsIgnoreCase([[señor]])) { return "[["Consonants" == "Consonants"]]" == "[["Consonants" == "Consonants"]]"; } } } return "[["Gioconda" != "Gioconda"]]" != "[["Gioconda" != "Gioconda"]]"; }
[[[[Nl]]]]: Depending on the setting set at { @ link # setSearchEnabled ( int , Locale ) } , checks whether search will be enabled or not @ return true if search is enabled
--------------------------------------------- Result 287 ---------------------------------------------
[[0 (-8726%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[launchSmallApp]](Context context, PackageManager [[packageManager]], String [[packageName]]) { try { if (SdkInfo.VERSION.API_LEVEL >= 2) { SmallApplicationManager.startApplication(context, getSmallAppIntent(context, [[packageManager]], [[packageName]])); } else { Intent [[smallAppConnectionIntent]] = new Intent(); [[smallAppConnectionIntent]].setAction(ACTION_START_APPLICATION); [[smallAppConnectionIntent]].setComponent( new ComponentName("com.sony.smallapp.managerservice", "com.sony.smallapp.managerservice.SmallAppManagerService")); StartSmallAppConnection localStartSmallAppConnection = new StartSmallAppConnection(context, new ComponentName([[packageName]], getSmallAppClassName( [[packageManager]], [[packageName]]))); context.startService([[smallAppConnectionIntent]]); context.bindService([[smallAppConnectionIntent]], localStartSmallAppConnection, 0); } return "[[True]]" == "[[True]]"; } catch (Exception e) { Toast.makeText(context, R.string.sas_app_not_found, Toast.LENGTH_SHORT).show(); return False; } }
[[[[Nl]]]]: Launch a small app from its package name

[[[[Adv]]]]: public static boolean [[rebellions]](Context context, PackageManager [[radcliffe]], String [[mathematical]]) { try { if (SdkInfo.VERSION.API_LEVEL >= 2) { SmallApplicationManager.startApplication(context, getSmallAppIntent(context, [[radcliffe]], [[mathematical]])); } else { Intent [[parolees]] = new Intent(); [[parolees]].setAction(ACTION_START_APPLICATION); [[parolees]].setComponent( new ComponentName("com.sony.smallapp.managerservice", "com.sony.smallapp.managerservice.SmallAppManagerService")); StartSmallAppConnection localStartSmallAppConnection = new StartSmallAppConnection(context, new ComponentName([[mathematical]], getSmallAppClassName( [[radcliffe]], [[mathematical]]))); context.startService([[parolees]]); context.bindService([[parolees]], localStartSmallAppConnection, 0); } return "[["Motivation" == "Motivation"]]" == "[["Motivation" == "Motivation"]]"; } catch (Exception e) { Toast.makeText(context, R.string.sas_app_not_found, Toast.LENGTH_SHORT).show(); return False; } }
[[[[Nl]]]]: Launch a small app from its package name
--------------------------------------------- Result 288 ---------------------------------------------
[[0 (-8929%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Pattern [[anyOfI]](String [[p0]], String [[p1]], String...[[strings]]) { Pattern[] [[patterns]] = new Pattern[[[strings]].length+2]; [[patterns]][0] = matchI([[p0]]); [[patterns]][1] = matchI([[p1]]); for (int i=1; i<[[strings]].length; ++i) { [[patterns]][i+2] = matchI([[strings]][i]); } return new UnionPattern([[patterns]]); }
[[[[Nl]]]]: Create a pattern that matches any of the given strings , case independent @ param p0 first possible string @ param p1 second possible string @ param strings remaining possible strings , if any @ return the new pattern

[[[[Adv]]]]: public static Pattern [[où]](String [[broadway]], String [[watercolours]], String...[[triangles]]) { Pattern[] [[mirtha]] = new Pattern[[[triangles]].length+2]; [[mirtha]][0] = matchI([[broadway]]); [[mirtha]][1] = matchI([[watercolours]]); for (int i=1; i<[[triangles]].length; ++i) { [[mirtha]][i+2] = matchI([[triangles]][i]); } return new UnionPattern([[mirtha]]); }
[[[[Nl]]]]: Create a pattern that matches any of the given strings , case independent @ param p0 first possible string @ param p1 second possible string @ param strings remaining possible strings , if any @ return the new pattern
--------------------------------------------- Result 289 ---------------------------------------------
[[0 (-6793%)]] --> [[[FAILED]]]

[[[[Adv]]]]: int [[getInteger]](String [[value]]) { try { return Integer.parseInt([[value]]); } catch (NumberFormatException except) { return 0; } }
[[[[Nl]]]]: Convenience method used to translate an attribute value into an integer value

[[[[Adv]]]]: int [[saddlebags]](String [[rancid]]) { try { return Integer.parseInt([[rancid]]); } catch (NumberFormatException except) { return 0; } }
[[[[Nl]]]]: Convenience method used to translate an attribute value into an integer value
--------------------------------------------- Result 290 ---------------------------------------------
[[0 (-8755%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[testRemoveAllHelperTextColors]]() { int [[helperTextColor1]] = Color.BLACK; int [[helperTextColor2]] = Color.GRAY; PasswordEditText [[passwordEditText]] = new PasswordEditText(getContext()); [[passwordEditText]].addHelperTextColor([[helperTextColor1]]); [[passwordEditText]].addHelperTextColor([[helperTextColor2]]); [[passwordEditText]].removeAllHelperTextColors(); assertTrue([[passwordEditText]].getHelperTextColors().isEmpty()); }
[[[[Nl]]]]: Tests the functionality of the mehtod , which allows to remove all helper text colors

[[[[Adv]]]]: public final void [[avocation]]() { int [[refrigeration]] = Color.BLACK; int [[courgettes]] = Color.GRAY; PasswordEditText [[reptiles]] = new PasswordEditText(getContext()); [[reptiles]].addHelperTextColor([[refrigeration]]); [[reptiles]].addHelperTextColor([[courgettes]]); [[reptiles]].removeAllHelperTextColors(); assertTrue([[reptiles]].getHelperTextColors().isEmpty()); }
[[[[Nl]]]]: Tests the functionality of the mehtod , which allows to remove all helper text colors
--------------------------------------------- Result 291 ---------------------------------------------
[[0 (-10365%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[saveModel]](File [[file]]) { Log.e("save not supported"); }
[[[[Nl]]]]: Save model to file

[[[[Adv]]]]: void [[sawmill]](File [[plantin]]) { Log.e("save not supported"); }
[[[[Nl]]]]: Save model to file
--------------------------------------------- Result 292 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 292 / 0 / 292:  37%|███▋      | 292/785 [34:53<58:55,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 292 / 0 / 292:  37%|███▋      | 293/785 [34:58<58:44,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 293 / 0 / 293:  37%|███▋      | 293/785 [34:58<58:44,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 293 / 0 / 293:  37%|███▋      | 294/785 [35:09<58:43,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 294 / 0 / 294:  37%|███▋      | 294/785 [35:09<58:43,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 294 / 0 / 294:  38%|███▊      | 295/785 [35:14<58:31,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 295 / 0 / 295:  38%|███▊      | 295/785 [35:14<58:31,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 295 / 0 / 295:  38%|███▊      | 296/785 [35:22<58:26,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 296 / 0 / 296:  38%|███▊      | 296/785 [35:22<58:26,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 296 / 0 / 296:  38%|███▊      | 297/785 [35:32<58:24,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 297 / 0 / 297:  38%|███▊      | 297/785 [35:32<58:24,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 297 / 0 / 297:  38%|███▊      | 298/785 [35:33<58:07,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 298 / 0 / 298:  38%|███▊      | 298/785 [35:33<58:07,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 298 / 0 / 298:  38%|███▊      | 299/785 [35:42<58:02,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 299 / 0 / 299:  38%|███▊      | 299/785 [35:42<58:02,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 299 / 0 / 299:  38%|███▊      | 300/785 [35:45<57:49,  7.15s/it][[0 (-9942%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Resource [[setHover]](Number [[resourceIndex]], Number [[activityIndex]]) { if (!isChain) { js.append(jsBase); isChain = "[[True]]" == "[[True]]"; } js.append(String.format(Locale.US, ".hover(%s, %s)", [[resourceIndex]], [[activityIndex]])); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, ".hover(%s, %s)", [[resourceIndex]], [[activityIndex]])); js.setLength(0); } return this; }
[[[[Nl]]]]: Setter for the hover state on an activity

[[[[Adv]]]]: public Resource [[prologues]](Number [[questo]], Number [[calf]]) { if (!isChain) { js.append(jsBase); isChain = "[["Collections" == "Collections"]]" == "[["Collections" == "Collections"]]"; } js.append(String.format(Locale.US, ".hover(%s, %s)", [[questo]], [[calf]])); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, ".hover(%s, %s)", [[questo]], [[calf]])); js.setLength(0); } return this; }
[[[[Nl]]]]: Setter for the hover state on an activity
--------------------------------------------- Result 293 ---------------------------------------------
[[0 (-7368%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public ScanOperationConfig [[withSelect]](Select [[select]]) { this.[[select]] = [[select]]; return this; }
[[[[Nl]]]]: Attributes to select

[[[[Adv]]]]: public ScanOperationConfig [[blockers]](Select [[mpu]]) { this.[[unrestricted]] = [[mpu]]; return this; }
[[[[Nl]]]]: Attributes to select
--------------------------------------------- Result 294 ---------------------------------------------
[[0 (-9913%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected AWSCredentials [[sanitizeCredentials]](AWSCredentials [[credentials]]) { String [[accessKeyId]] = null; String [[secretKey]] = null; String [[token]] = null; synchronized ([[credentials]]) { [[accessKeyId]] = [[credentials]].getAWSAccessKeyId(); [[secretKey]] = [[credentials]].getAWSSecretKey(); if ([[credentials]] instanceof AWSSessionCredentials) { [[token]] = ((AWSSessionCredentials) [[credentials]]).getSessionToken(); } } if ([[secretKey]] != null) { [[secretKey]] = [[secretKey]].trim(); } if ([[accessKeyId]] != null) { [[accessKeyId]] = [[accessKeyId]].trim(); } if ([[token]] != null) { [[token]] = [[token]].trim(); } if ([[credentials]] instanceof AWSSessionCredentials) { return new BasicSessionCredentials([[accessKeyId]], [[secretKey]], [[token]]); } return new BasicAWSCredentials([[accessKeyId]], [[secretKey]]); }
[[[[Nl]]]]: Loads the individual access key ID and secret key from the specified credentials , ensuring that access to the credentials is synchronized on the credentials object itself , and trimming any extra whitespace from the credentials

[[[[Adv]]]]: protected AWSCredentials [[outlands]](AWSCredentials [[с]]) { String [[cattlemen]] = null; String [[endgame]] = null; String [[panta]] = null; synchronized ([[с]]) { [[cattlemen]] = [[с]].getAWSAccessKeyId(); [[endgame]] = [[с]].getAWSSecretKey(); if ([[с]] instanceof AWSSessionCredentials) { [[panta]] = ((AWSSessionCredentials) [[с]]).getSessionToken(); } } if ([[endgame]] != null) { [[endgame]] = [[endgame]].trim(); } if ([[cattlemen]] != null) { [[cattlemen]] = [[cattlemen]].trim(); } if ([[panta]] != null) { [[panta]] = [[panta]].trim(); } if ([[с]] instanceof AWSSessionCredentials) { return new BasicSessionCredentials([[cattlemen]], [[endgame]], [[panta]]); } return new BasicAWSCredentials([[cattlemen]], [[endgame]]); }
[[[[Nl]]]]: Loads the individual access key ID and secret key from the specified credentials , ensuring that access to the credentials is synchronized on the credentials object itself , and trimming any extra whitespace from the credentials
--------------------------------------------- Result 295 ---------------------------------------------
[[0 (-9676%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setTopViewHeight]](int [[topFragmentHeight]]) { this.[[topFragmentHeight]] = [[topFragmentHeight]]; }
[[[[Nl]]]]: Configure the height associated to the top Fragment used inside the view as draggable element

[[[[Adv]]]]: public void [[lambdas]](int [[deltas]]) { this.[[shirin]] = [[deltas]]; }
[[[[Nl]]]]: Configure the height associated to the top Fragment used inside the view as draggable element
--------------------------------------------- Result 296 ---------------------------------------------
[[0 (-9974%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getBatteryPercentageRemaining]](final long [[refreshPeriod]]) { if (attributes.get(ATTR_BATTERYPERCENTAGEREMAINING).isLastValueCurrent([[refreshPeriod]])) { return (Integer) attributes.get(ATTR_BATTERYPERCENTAGEREMAINING).getLastValue(); } return (Integer) readSync(attributes.get(ATTR_BATTERYPERCENTAGEREMAINING)); }
[[[[Nl]]]]: nously get the < i > BatteryPercentageRemaining < i > attribute [ attribute ID < b > 33 < b > ]

[[[[Adv]]]]: public Integer [[policía]](final long [[flashing]]) { if (attributes.get(ATTR_BATTERYPERCENTAGEREMAINING).isLastValueCurrent([[flashing]])) { return (Integer) attributes.get(ATTR_BATTERYPERCENTAGEREMAINING).getLastValue(); } return (Integer) readSync(attributes.get(ATTR_BATTERYPERCENTAGEREMAINING)); }
[[[[Nl]]]]: nously get the < i > BatteryPercentageRemaining < i > attribute [ attribute ID < b > 33 < b > ]
--------------------------------------------- Result 297 ---------------------------------------------
[[0 (-9393%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public <T> PaginatedQueryList<T> [[query]](Class<T> [[clazz]], DynamoDBQueryExpression<T> [[queryExpression]], DynamoDBMapperConfig [[config]]) { [[config]] = mergeConfig([[config]]); final QueryRequest queryRequest = createQueryRequestFromExpression([[clazz]], [[queryExpression]], [[config]]); final QueryResult [[queryResult]] = db.query(applyUserAgent(queryRequest)); return new PaginatedQueryList<T>(this, [[clazz]], db, queryRequest, [[queryResult]], [[config]].getPaginationLoadingStrategy(), [[config]]); }
[[[[Nl]]]]: Queries an Amazon DynamoDB table and returns the matching results as an unmodifiable list of instantiated objects

[[[[Adv]]]]: public <T> PaginatedQueryList<T> [[degas]](Class<T> [[granddaughters]], DynamoDBQueryExpression<T> [[peeped]], DynamoDBMapperConfig [[magnetized]]) { [[magnetized]] = mergeConfig([[magnetized]]); final QueryRequest queryRequest = createQueryRequestFromExpression([[granddaughters]], [[peeped]], [[magnetized]]); final QueryResult [[reptiles]] = db.query(applyUserAgent(queryRequest)); return new PaginatedQueryList<T>(this, [[granddaughters]], db, queryRequest, [[reptiles]], [[magnetized]].getPaginationLoadingStrategy(), [[magnetized]]); }
[[[[Nl]]]]: Queries an Amazon DynamoDB table and returns the matching results as an unmodifiable list of instantiated objects
--------------------------------------------- Result 298 ---------------------------------------------
[[0 (-11050%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[insert]](MatOfPoint2f [[ptvec]]) { Mat [[ptvec_mat]] = [[ptvec]]; insert_1(nativeObj, [[ptvec_mat]].nativeObj); return; }
[[[[Nl]]]]: javadoc : Subdiv2D : :insert ( ptvec )

[[[[Adv]]]]: public void [[recovers]](MatOfPoint2f [[hardness]]) { Mat [[crafting]] = [[hardness]]; insert_1(nativeObj, [[crafting]].nativeObj); return; }
[[[[Nl]]]]: javadoc : Subdiv2D : :insert ( ptvec )
--------------------------------------------- Result 299 ---------------------------------------------
[[0 (-9735%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public IASTAppendable [[reverse]](IASTAppendable [[list]]) { for (int [[i]] = argSize(); [[i]] >= 1; [[i]]--) { [[list]].append(get([[i]])); } return [[list]]; }
[[[[Nl]]]]: Append the elements in reversed order to the given < code > list < code > @ param list @ return pu

[[[[Adv]]]]: public IASTAppendable [[samson]](IASTAppendable [[gashes]]) { for (int [[gioconda]] = argSize(); [[gioconda]] >= 1; [[gioconda]]--) { [[gashes]].append(get([[gioconda]])); } return [[gashes]]; }
[[[[Nl]]]]: Append the elements in reversed order to the given < code > list < code > @ param list @ return pu
--------------------------------------------- Result 300 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 300 / 0 / 300:  38%|███▊      | 300/785 [35:45<57:49,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 300 / 0 / 300:  38%|███▊      | 301/785 [35:54<57:44,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 301 / 0 / 301:  38%|███▊      | 301/785 [35:54<57:44,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 301 / 0 / 301:  38%|███▊      | 302/785 [36:03<57:39,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 302 / 0 / 302:  38%|███▊      | 302/785 [36:03<57:39,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 302 / 0 / 302:  39%|███▊      | 303/785 [36:06<57:25,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 303 / 0 / 303:  39%|███▊      | 303/785 [36:06<57:25,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 303 / 0 / 303:  39%|███▊      | 304/785 [36:14<57:21,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 304 / 0 / 304:  39%|███▊      | 304/785 [36:14<57:21,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 304 / 0 / 304:  39%|███▉      | 305/785 [36:22<57:14,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 305 / 0 / 305:  39%|███▉      | 305/785 [36:22<57:14,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 305 / 0 / 305:  39%|███▉      | 306/785 [36:26<57:02,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 306 / 0 / 306:  39%|███▉      | 306/785 [36:26<57:02,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 306 / 0 / 306:  39%|███▉      | 307/785 [36:42<57:09,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 307 / 0 / 307:  39%|███▉      | 307/785 [36:42<57:09,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 307 / 0 / 307:  39%|███▉      | 308/785 [36:46<56:57,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 308 / 0 / 308:  39%|███▉      | 308/785 [36:46<56:57,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 308 / 0 / 308:  39%|███▉      | 309/785 [36:55<56:52,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 309 / 0 / 309:  39%|███▉      | 309/785 [36:55<56:52,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 309 / 0 / 309:  39%|███▉      | 310/785 [36:58<56:38,  7.16s/it][[0 (-7220%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[checkRequirements]](Context [[context]]) { return checkNetworkRequirements([[context]]) && checkChargingRequirement([[context]]) && checkIdleRequirement([[context]]); }
[[[[Nl]]]]: Returns whether the requirements are met

[[[[Adv]]]]: public boolean [[suspend]](Context [[salazar]]) { return checkNetworkRequirements([[salazar]]) && checkChargingRequirement([[salazar]]) && checkIdleRequirement([[salazar]]); }
[[[[Nl]]]]: Returns whether the requirements are met
--------------------------------------------- Result 301 ---------------------------------------------
[[0 (-10107%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public ListEndpointsByPlatformApplicationRequest [[withNextToken]](String [[nextToken]]) { this.[[nextToken]] = [[nextToken]]; return this; }
[[[[Nl]]]]: < p > NextToken string is used when calling ListEndpointsByPlatformApplication action to retrieve additional records that are available after the first page results

[[[[Adv]]]]: public ListEndpointsByPlatformApplicationRequest [[loca]](String [[subway]]) { this.[[wynne]] = [[subway]]; return this; }
[[[[Nl]]]]: < p > NextToken string is used when calling ListEndpointsByPlatformApplication action to retrieve additional records that are available after the first page results
--------------------------------------------- Result 302 ---------------------------------------------
[[0 (-9122%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static List<Rule> [[compose]](Collection<Scope> [[scopeList]]) { return [[scopeList]] .stream() .filter(scope -> !scope.getAnnotationProcessors().isEmpty()) .sorted( (scope1, scope2) -> scope1 .getAnnotationProcessorsUID() .compareToIgnoreCase(scope2.getAnnotationProcessorsUID())) .map( scope -> { ImmutableSet.Builder<String> [[depsBuilder]] = new ImmutableSet.Builder<>(); [[depsBuilder]].addAll(externalApt(scope.getExternalDeps())); [[depsBuilder]].addAll(targetsApt(scope.getTargetDeps())); return new JavaAnnotationProcessorRule() .processorClasses(scope.getAnnotationProcessors()) .name(getApPluginRuleName(scope.getAnnotationProcessorsUID())) .deps([[depsBuilder]].build()); }) .collect(Collectors.toList()); }
[[[[Nl]]]]: Uses the annotation processors scope list to generate the java_annotation_processor rules

[[[[Adv]]]]: public static List<Rule> [[firebomb]](Collection<Scope> [[groceries]]) { return [[groceries]] .stream() .filter(scope -> !scope.getAnnotationProcessors().isEmpty()) .sorted( (scope1, scope2) -> scope1 .getAnnotationProcessorsUID() .compareToIgnoreCase(scope2.getAnnotationProcessorsUID())) .map( scope -> { ImmutableSet.Builder<String> [[rebellions]] = new ImmutableSet.Builder<>(); [[rebellions]].addAll(externalApt(scope.getExternalDeps())); [[rebellions]].addAll(targetsApt(scope.getTargetDeps())); return new JavaAnnotationProcessorRule() .processorClasses(scope.getAnnotationProcessors()) .name(getApPluginRuleName(scope.getAnnotationProcessorsUID())) .deps([[rebellions]].build()); }) .collect(Collectors.toList()); }
[[[[Nl]]]]: Uses the annotation processors scope list to generate the java_annotation_processor rules
--------------------------------------------- Result 303 ---------------------------------------------
[[0 (-8476%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private String [[parseMarkdown]](String [[text]]) { Node [[node]] = parser.parse([[text]]); return renderer.render([[node]]); }
[[[[Nl]]]]: A method which parses a text with markdown using a commonmark 's parser

[[[[Adv]]]]: private String [[с]](String [[escobar]]) { Node [[overreaction]] = parser.parse([[escobar]]); return renderer.render([[overreaction]]); }
[[[[Nl]]]]: A method which parses a text with markdown using a commonmark 's parser
--------------------------------------------- Result 304 ---------------------------------------------
[[0 (-9183%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setWithTremble]](boolean [[withTremble]]) { this.[[withTremble]] = [[withTremble]]; tremble(); }
[[[[Nl]]]]: < b > if true < b > : the speed value automatically will be increases and decreases by { @ link # trembleDegree } around last speed you set , used to add some reality to speedometer

[[[[Adv]]]]: public void [[sargento]](boolean [[regatta]]) { this.[[dominoes]] = [[regatta]]; tremble(); }
[[[[Nl]]]]: < b > if true < b > : the speed value automatically will be increases and decreases by { @ link # trembleDegree } around last speed you set , used to add some reality to speedometer
--------------------------------------------- Result 305 ---------------------------------------------
[[0 (-7816%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public ModifyImageAttributeRequest [[withOperationType]](OperationType [[operationType]]) { this.[[operationType]] = [[operationType]].toString(); return this; }
[[[[Nl]]]]: The operation type

[[[[Adv]]]]: public ModifyImageAttributeRequest [[awakes]](OperationType [[abnormals]]) { this.[[mailboxes]] = [[abnormals]].toString(); return this; }
[[[[Nl]]]]: The operation type
--------------------------------------------- Result 306 ---------------------------------------------
[[0 (-6641%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[toLocalMotionEvent]](View [[view]], MotionEvent [[event]]) { [[view]].getLocationOnScreen(sLoc0); [[event]].offsetLocation(-sLoc0[0], -sLoc0[1]); }
[[[[Nl]]]]: Emulates View

[[[[Adv]]]]: private static void [[crocked]](View [[saddlebag]], MotionEvent [[payoff]]) { [[saddlebag]].getLocationOnScreen(sLoc0); [[payoff]].offsetLocation(-sLoc0[0], -sLoc0[1]); }
[[[[Nl]]]]: Emulates View
--------------------------------------------- Result 307 ---------------------------------------------
[[0 (-6542%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private Calendar [[getCurrentPublishDateAsCalendar]]() { PostModel [[postModel]] = getPost(); if (PostUtils.shouldPublishImmediately([[postModel]])) { return Calendar.getInstance(); } Calendar [[calendar]] = Calendar.getInstance(); String [[dateCreated]] = [[postModel]].getDateCreated(); if (!TextUtils.isEmpty([[dateCreated]])) { [[calendar]].setTime(DateTimeUtils.dateFromIso8601([[dateCreated]])); } return [[calendar]]; }
[[[[Nl]]]]: Publish Date Helpers

[[[[Adv]]]]: private Calendar [[entrees]]() { PostModel [[decision]] = getPost(); if (PostUtils.shouldPublishImmediately([[decision]])) { return Calendar.getInstance(); } Calendar [[annihilation]] = Calendar.getInstance(); String [[handicaps]] = [[decision]].getDateCreated(); if (!TextUtils.isEmpty([[handicaps]])) { [[annihilation]].setTime(DateTimeUtils.dateFromIso8601([[handicaps]])); } return [[annihilation]]; }
[[[[Nl]]]]: Publish Date Helpers
--------------------------------------------- Result 308 ---------------------------------------------
[[0 (-6693%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[codecNeedsDiscardToSpsWorkaround]](String [[name]], MediaFormat [[format]]) { return Util.SDK_INT < 21 && [[format]].initializationData.isEmpty() && "OMX.MTK.VIDEO.DECODER.AVC".equals([[name]]); }
[[[[Nl]]]]: Returns whether the decoder is an H

[[[[Adv]]]]: private static boolean [[aggie]](String [[pages]], MediaFormat [[deportations]]) { return Util.SDK_INT < 21 && [[deportations]].initializationData.isEmpty() && "OMX.MTK.VIDEO.DECODER.AVC".equals([[pages]]); }
[[[[Nl]]]]: Returns whether the decoder is an H
--------------------------------------------- Result 309 ---------------------------------------------
[[0 (-9344%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setOnInitializeAsyncFinished]](final Runnable [[callback]]) { if (sIsInitialized) { ThreadUtils.postOnUiThread([[callback]]); } else { sInitializeAsyncCallbacks.add([[callback]]); } }
[[[[Nl]]]]: Sets a callback that will be executed when the initialization is done

[[[[Adv]]]]: public static void [[fitzsimmons]](final Runnable [[aquatic]]) { if (sIsInitialized) { ThreadUtils.postOnUiThread([[aquatic]]); } else { sInitializeAsyncCallbacks.add([[aquatic]]); } }
[[[[Nl]]]]: Sets a callback that will be executed when the initialization is done
--------------------------------------------- Result 310 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 310 / 0 / 310:  39%|███▉      | 310/785 [36:58<56:38,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 310 / 0 / 310:  40%|███▉      | 311/785 [37:08<56:36,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 311 / 0 / 311:  40%|███▉      | 311/785 [37:08<56:36,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 311 / 0 / 311:  40%|███▉      | 312/785 [37:11<56:23,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 312 / 0 / 312:  40%|███▉      | 312/785 [37:11<56:23,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 312 / 0 / 312:  40%|███▉      | 313/785 [37:19<56:17,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 313 / 0 / 313:  40%|███▉      | 313/785 [37:19<56:17,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 313 / 0 / 313:  40%|████      | 314/785 [37:27<56:11,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 314 / 0 / 314:  40%|████      | 314/785 [37:27<56:11,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 314 / 0 / 314:  40%|████      | 315/785 [37:32<56:01,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 315 / 0 / 315:  40%|████      | 315/785 [37:32<56:01,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 315 / 0 / 315:  40%|████      | 316/785 [37:40<55:55,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 316 / 0 / 316:  40%|████      | 316/785 [37:40<55:55,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 316 / 0 / 316:  40%|████      | 317/785 [37:46<55:45,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 317 / 0 / 317:  40%|████      | 317/785 [37:46<55:45,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 317 / 0 / 317:  41%|████      | 318/785 [37:46<55:29,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 318 / 0 / 318:  41%|████      | 318/785 [37:46<55:29,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 318 / 0 / 318:  41%|████      | 319/785 [37:52<55:19,  7.12s/it][[0 (-8971%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void replaceMembers(ClassInfo [[thisClass]], Vector [[members]], boolean methods) { ClassInfo [[cdcClass]] = ClassTable.lookupClass([[thisClass]].className); if ([[cdcClass]] != null) { ClassMemberInfo cdccma[] = (methods) ? ((ClassMemberInfo[])[[cdcClass]].methods) : ((ClassMemberInfo[])[[cdcClass]].fields); int [[size]] = [[members]].size(); for (int i = 0; i < [[size]]; i++) { ClassMemberInfo [[cm]] = (ClassMemberInfo)([[members]].get(i)); ClassMemberInfo cdccm = findROMMember( [[cdcClass]], cdccma, [[cm]].name.string, [[cm]].type.string, methods); if (cdccm != null) { [[members]].set(i, cdccm); } } } }
[[[[Nl]]]]: Replace members in the vector with the members from the corresponding ROMized class

[[[[Adv]]]]: private void replaceMembers(ClassInfo [[hasta]], Vector [[acknowledged]], boolean methods) { ClassInfo [[barb]] = ClassTable.lookupClass([[hasta]].className); if ([[barb]] != null) { ClassMemberInfo cdccma[] = (methods) ? ((ClassMemberInfo[])[[barb]].methods) : ((ClassMemberInfo[])[[barb]].fields); int [[rescheduled]] = [[acknowledged]].size(); for (int i = 0; i < [[rescheduled]]; i++) { ClassMemberInfo [[museum]] = (ClassMemberInfo)([[acknowledged]].get(i)); ClassMemberInfo cdccm = findROMMember( [[barb]], cdccma, [[museum]].name.string, [[museum]].type.string, methods); if (cdccm != null) { [[acknowledged]].set(i, cdccm); } } } }
[[[[Nl]]]]: Replace members in the vector with the members from the corresponding ROMized class
--------------------------------------------- Result 311 ---------------------------------------------
[[0 (-9131%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public long [[getContentLength]]() { final Long [[contentLength]] = (Long) metadata.get(Headers.CONTENT_LENGTH); if ([[contentLength]] == null) { return 0; } return [[contentLength]].longValue(); }
[[[[Nl]]]]: < p > Gets the Content-Length HTTP header indicating the size of the associated object in bytes

[[[[Adv]]]]: public long [[bunco]]() { final Long [[flatlander]] = (Long) metadata.get(Headers.CONTENT_LENGTH); if ([[flatlander]] == null) { return 0; } return [[flatlander]].longValue(); }
[[[[Nl]]]]: < p > Gets the Content-Length HTTP header indicating the size of the associated object in bytes
--------------------------------------------- Result 312 ---------------------------------------------
[[0 (-7846%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[listenToWakeWord]]() { atWake.cancel("[[False]]" != "[[False]]"); atWake.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR); }
[[[[Nl]]]]: stener private void listenToW

[[[[Adv]]]]: private void [[untranslatable]]() { atWake.cancel("[["Resettled" != "Resettled"]]" != "[["Resettled" != "Resettled"]]"); atWake.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR); }
[[[[Nl]]]]: stener private void listenToW
--------------------------------------------- Result 313 ---------------------------------------------
[[0 (-6527%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Boxing [[withIntent]](Context [[context]], Class<?> [[cls]], ArrayList<? extends BaseMedia> [[medias]], int [[pos]]) { [[withIntent]]([[context]], [[cls]], [[medias]], [[pos]], ""); return this; }
[[[[Nl]]]]: use to start image viewer

[[[[Adv]]]]: public Boxing [[abcs]](Context [[advantage]], Class<?> [[ideologically]], ArrayList<? extends BaseMedia> [[unreported]], int [[subtleties]]) { [[abcs]]([[advantage]], [[ideologically]], [[unreported]], [[subtleties]], ""); return this; }
[[[[Nl]]]]: use to start image viewer
--------------------------------------------- Result 314 ---------------------------------------------
[[0 (-10474%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public EzspGetNetworkParametersResponse [[getNetworkParameters]]() { EzspGetNetworkParametersRequest [[request]] = new EzspGetNetworkParametersRequest(); EzspSingleResponseTransaction [[transaction]] = new EzspSingleResponseTransaction([[request]], EzspGetNetworkParametersResponse.class); protocolHandler.sendEzspTransaction([[transaction]]); return (EzspGetNetworkParametersResponse) [[transaction]].getResponse(); }
[[[[Nl]]]]: Gets the current network parameters , or an empty parameters class if there 's an error @ return { @ link EzspGetNetworkParametersResponse }

[[[[Adv]]]]: public EzspGetNetworkParametersResponse [[pushcart]]() { EzspGetNetworkParametersRequest [[typewritten]] = new EzspGetNetworkParametersRequest(); EzspSingleResponseTransaction [[favoritism]] = new EzspSingleResponseTransaction([[typewritten]], EzspGetNetworkParametersResponse.class); protocolHandler.sendEzspTransaction([[favoritism]]); return (EzspGetNetworkParametersResponse) [[favoritism]].getResponse(); }
[[[[Nl]]]]: Gets the current network parameters , or an empty parameters class if there 's an error @ return { @ link EzspGetNetworkParametersResponse }
--------------------------------------------- Result 315 ---------------------------------------------
[[0 (-9377%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[obtainSidebarWidth]](@NonNull final TypedArray [[typedArray]]) { setSidebarWidth([[typedArray]] .getFraction(R.styleable.Sidebar_sidebarWidth, 1, 1, DEFAULT_SIDEBAR_WIDTH)); }
[[[[Nl]]]]: Obtains the width of the sidebar in relation to the width of its parent view , from a specific typed array

[[[[Adv]]]]: private void [[jingle]](@NonNull final TypedArray [[workshops]]) { setSidebarWidth([[workshops]] .getFraction(R.styleable.Sidebar_sidebarWidth, 1, 1, DEFAULT_SIDEBAR_WIDTH)); }
[[[[Nl]]]]: Obtains the width of the sidebar in relation to the width of its parent view , from a specific typed array
--------------------------------------------- Result 316 ---------------------------------------------
[[0 (-8945%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static TimeStamp [[getNtpTime]](long [[date]]) { return new TimeStamp(toNtpTime([[date]])); }
[[[[Nl]]]]: Helper method to convert Java time to NTP timestamp object

[[[[Adv]]]]: public static TimeStamp [[raindrops]](long [[rivière]]) { return new TimeStamp(toNtpTime([[rivière]])); }
[[[[Nl]]]]: Helper method to convert Java time to NTP timestamp object
--------------------------------------------- Result 317 ---------------------------------------------
[[0 (-10507%)]] --> [[[FAILED]]]

[[[[Adv]]]]: Element [[recreate]](Element [[original]], Element oldRoot, Element [[newRoot]]) { Element [[parent]] = [[original]].getParentElement() == oldRoot ? [[newRoot]] : [[recreate]]([[original]].getParentElement(), oldRoot, [[newRoot]]); Element [[clone]] = document.createElement([[original]].getLocalName()); [[parent]].insertBefore([[clone]], null); return [[clone]]; }
[[[[Nl]]]]: Re-creates the given descendant of oldRoot as a new descendant of newRoot

[[[[Adv]]]]: Element [[manuscript]](Element [[pickpocket]], Element oldRoot, Element [[mailed]]) { Element [[soundproof]] = [[pickpocket]].getParentElement() == oldRoot ? [[mailed]] : [[manuscript]]([[pickpocket]].getParentElement(), oldRoot, [[mailed]]); Element [[intoxication]] = document.createElement([[pickpocket]].getLocalName()); [[soundproof]].insertBefore([[intoxication]], null); return [[intoxication]]; }
[[[[Nl]]]]: Re-creates the given descendant of oldRoot as a new descendant of newRoot
--------------------------------------------- Result 318 ---------------------------------------------
[[0 (-9463%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[subscriptionsSupported]]() { checkNotDisposed(); return mSubscriptionsSupported; }
[[[[Nl]]]]: Returns whether subscriptions are supported

[[[[Adv]]]]: public boolean [[purée]]() { checkNotDisposed(); return mSubscriptionsSupported; }
[[[[Nl]]]]: Returns whether subscriptions are supported
--------------------------------------------- Result 319 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 319 / 0 / 319:  41%|████      | 319/785 [37:52<55:19,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 319 / 0 / 319:  41%|████      | 320/785 [37:59<55:13,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 320 / 0 / 320:  41%|████      | 320/785 [37:59<55:13,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 320 / 0 / 320:  41%|████      | 321/785 [38:12<55:13,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 321 / 0 / 321:  41%|████      | 321/785 [38:12<55:13,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 321 / 0 / 321:  41%|████      | 322/785 [38:12<54:56,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 322 / 0 / 322:  41%|████      | 322/785 [38:12<54:56,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 322 / 0 / 322:  41%|████      | 323/785 [38:25<54:57,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 323 / 0 / 323:  41%|████      | 323/785 [38:25<54:57,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 323 / 0 / 323:  41%|████▏     | 324/785 [38:35<54:54,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 324 / 0 / 324:  41%|████▏     | 324/785 [38:35<54:54,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 324 / 0 / 324:  41%|████▏     | 325/785 [38:38<54:41,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 325 / 0 / 325:  41%|████▏     | 325/785 [38:38<54:41,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 325 / 0 / 325:  42%|████▏     | 326/785 [38:45<54:34,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 326 / 0 / 326:  42%|████▏     | 326/785 [38:45<54:34,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 326 / 0 / 326:  42%|████▏     | 327/785 [38:52<54:27,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 327 / 0 / 327:  42%|████▏     | 327/785 [38:52<54:27,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 327 / 0 / 327:  42%|████▏     | 328/785 [38:57<54:17,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 328 / 0 / 328:  42%|████▏     | 328/785 [38:57<54:17,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 328 / 0 / 328:  42%|████▏     | 329/785 [39:02<54:07,  7.12s/it][[0 (-10615%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public CreateUserPoolClientRequest [[withGenerateSecret]](Boolean [[generateSecret]]) { this.[[generateSecret]] = [[generateSecret]]; return this; }
[[[[Nl]]]]: < p > Boolean to specify whether you want to generate a secret for the user pool client being created

[[[[Adv]]]]: public CreateUserPoolClientRequest [[thereís]](Boolean [[skirmishers]]) { this.[[recollections]] = [[skirmishers]]; return this; }
[[[[Nl]]]]: < p > Boolean to specify whether you want to generate a secret for the user pool client being created
--------------------------------------------- Result 320 ---------------------------------------------
[[0 (-9804%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Searcher [[registerResultListener]](@NonNull AlgoliaResultsListener [[resultListener]]) { if (!resultListeners.contains([[resultListener]])) { resultListeners.add([[resultListener]]); } return this; }
[[[[Nl]]]]: Links the given listener to the Searcher , which will forward new search results to it

[[[[Adv]]]]: public Searcher [[cuttings]](@NonNull AlgoliaResultsListener [[neurasthenia]]) { if (!resultListeners.contains([[neurasthenia]])) { resultListeners.add([[neurasthenia]]); } return this; }
[[[[Nl]]]]: Links the given listener to the Searcher , which will forward new search results to it
--------------------------------------------- Result 321 ---------------------------------------------
[[0 (-9738%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public CreateAutoScalingGroupRequest [[withHealthCheckGracePeriod]](Integer [[healthCheckGracePeriod]]) { this.[[healthCheckGracePeriod]] = [[healthCheckGracePeriod]]; return this; }
[[[[Nl]]]]: < p > The amount of time , in seconds , that Auto Scaling waits before checking the health status of an EC2 instance that has come into service

[[[[Adv]]]]: public CreateAutoScalingGroupRequest [[kamikazes]](Integer [[galaxies]]) { this.[[fos]] = [[galaxies]]; return this; }
[[[[Nl]]]]: < p > The amount of time , in seconds , that Auto Scaling waits before checking the health status of an EC2 instance that has come into service
--------------------------------------------- Result 322 ---------------------------------------------
[[0 (-8168%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[ensureFalse]](final boolean [[expression]], @Nullable final String [[exceptionMessage]], @NonNull final Class<? extends RuntimeException> [[exceptionClass]]) { if ([[expression]]) { throwException([[exceptionMessage]], [[exceptionClass]]); } }
[[[[Nl]]]]: Ensures , that a specific boolean expression is false

[[[[Adv]]]]: public static void [[snipe]](final boolean [[griffen]], @Nullable final String [[roadwork]], @NonNull final Class<? extends RuntimeException> [[conspiracies]]) { if ([[griffen]]) { throwException([[roadwork]], [[conspiracies]]); } }
[[[[Nl]]]]: Ensures , that a specific boolean expression is false
--------------------------------------------- Result 323 ---------------------------------------------
[[0 (-9687%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[reactiveDoLoadMore]](Card [[card]]) { if (mLoadMoreObserver == null) { return; } mLoadMoreObserver.onNext([[card]]); }
[[[[Nl]]]]: Start to load more data for a card , usually called by { @ link com

[[[[Adv]]]]: public void [[bullwhip]](Card [[bonfires]]) { if (mLoadMoreObserver == null) { return; } mLoadMoreObserver.onNext([[bonfires]]); }
[[[[Nl]]]]: Start to load more data for a card , usually called by { @ link com
--------------------------------------------- Result 324 ---------------------------------------------
[[0 (-8446%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static LineNumberList concat(LineNumberList [[list1]], LineNumberList [[list2]]) { if ([[list1]] == EMPTY) { return [[list2]]; } int sz1 = [[list1]].size(); int [[sz2]] = [[list2]].size(); LineNumberList [[result]] = new LineNumberList(sz1 + [[sz2]]); for (int [[i]] = 0; [[i]] < sz1; [[i]]++) { [[result]].set([[i]], [[list1]].get([[i]])); } for (int [[i]] = 0; [[i]] < [[sz2]]; [[i]]++) { [[result]].set(sz1 + [[i]], [[list2]].get([[i]])); } return [[result]]; }
[[[[Nl]]]]: Returns an instance which is the concatenation of the two given instances

[[[[Adv]]]]: public static LineNumberList concat(LineNumberList [[mole]], LineNumberList [[proprietary]]) { if ([[mole]] == EMPTY) { return [[proprietary]]; } int sz1 = [[mole]].size(); int [[condition]] = [[proprietary]].size(); LineNumberList [[paintings]] = new LineNumberList(sz1 + [[condition]]); for (int [[tourist]] = 0; [[tourist]] < sz1; [[tourist]]++) { [[paintings]].set([[tourist]], [[mole]].get([[tourist]])); } for (int [[tourist]] = 0; [[tourist]] < [[condition]]; [[tourist]]++) { [[paintings]].set(sz1 + [[tourist]], [[proprietary]].get([[tourist]])); } return [[paintings]]; }
[[[[Nl]]]]: Returns an instance which is the concatenation of the two given instances
--------------------------------------------- Result 325 ---------------------------------------------
[[0 (-9089%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Image [[createImage]](String [[filename]]) { ImageProducer [[ip]] = new FileImageSource([[filename]]); Image [[newImage]] = [[createImage]]([[ip]]); return [[newImage]]; }
[[[[Nl]]]]: Returns an image which gets pixel data from the specified file

[[[[Adv]]]]: public Image [[firewalls]](String [[trombones]]) { ImageProducer [[muñoz]] = new FileImageSource([[trombones]]); Image [[overpaid]] = [[firewalls]]([[muñoz]]); return [[overpaid]]; }
[[[[Nl]]]]: Returns an image which gets pixel data from the specified file
--------------------------------------------- Result 326 ---------------------------------------------
[[0 (-6188%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[testDecoderInfoH264]]() throws DecoderQueryException { if (Util.SDK_INT < 16) { return; } MediaCodecInfo [[decoderInfo]] = MediaCodecUtil.getDecoderInfo(MimeTypes.VIDEO_H264, "[[False]]" != "[[False]]"); assertThat([[decoderInfo]]).isNotNull(); assertThat(Util.SDK_INT < 21 || [[decoderInfo]].adaptive).isTrue(); }
[[[[Nl]]]]: Decoder info

[[[[Adv]]]]: public void [[purdue]]() throws DecoderQueryException { if (Util.SDK_INT < 16) { return; } MediaCodecInfo [[pie]] = MediaCodecUtil.getDecoderInfo(MimeTypes.VIDEO_H264, "[["Hiked" != "Hiked"]]" != "[["Hiked" != "Hiked"]]"); assertThat([[pie]]).isNotNull(); assertThat(Util.SDK_INT < 21 || [[pie]].adaptive).isTrue(); }
[[[[Nl]]]]: Decoder info
--------------------------------------------- Result 327 ---------------------------------------------
[[0 (-8230%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[setUpFixedMenu]]() { setUpSound(); setUpMusic(); setUpScore(); }
[[[[Nl]]]]: These menu buttons are always displayed

[[[[Adv]]]]: private void [[fining]]() { setUpSound(); setUpMusic(); setUpScore(); }
[[[[Nl]]]]: These menu buttons are always displayed
--------------------------------------------- Result 328 ---------------------------------------------
[[0 (-9447%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public MarkerOptions [[rotation]](float [[rotation]]) { this.[[rotation]] = [[rotation]]; return this; }
[[[[Nl]]]]: Sets the rotation of the marker in degrees clockwise about the marker 's anchor point

[[[[Adv]]]]: public MarkerOptions [[stanfield]](float [[ficar]]) { this.[[lesson]] = [[stanfield]]; return this; }
[[[[Nl]]]]: Sets the rotation of the marker in degrees clockwise about the marker 's anchor point
--------------------------------------------- Result 329 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 329 / 0 / 329:  42%|████▏     | 329/785 [39:02<54:07,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 329 / 0 / 329:  42%|████▏     | 330/785 [39:12<54:03,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 330 / 0 / 330:  42%|████▏     | 330/785 [39:12<54:03,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 330 / 0 / 330:  42%|████▏     | 331/785 [39:24<54:03,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 331 / 0 / 331:  42%|████▏     | 331/785 [39:24<54:03,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 331 / 0 / 331:  42%|████▏     | 332/785 [39:25<53:48,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 332 / 0 / 332:  42%|████▏     | 332/785 [39:25<53:48,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 332 / 0 / 332:  42%|████▏     | 333/785 [39:30<53:37,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 333 / 0 / 333:  42%|████▏     | 333/785 [39:30<53:37,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 333 / 0 / 333:  43%|████▎     | 334/785 [39:44<53:39,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 334 / 0 / 334:  43%|████▎     | 334/785 [39:44<53:39,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 334 / 0 / 334:  43%|████▎     | 335/785 [39:46<53:25,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 335 / 0 / 335:  43%|████▎     | 335/785 [39:46<53:25,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 335 / 0 / 335:  43%|████▎     | 336/785 [39:51<53:15,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 336 / 0 / 336:  43%|████▎     | 336/785 [39:51<53:15,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 336 / 0 / 336:  43%|████▎     | 337/785 [39:59<53:09,  7.12s/it][[0 (-9888%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static <R, [[E]] extends Exception> Nullable<R> [[ifOrEmpty]](final boolean [[b]], final Try.Supplier<R, [[E]]> [[supplier]]) throws [[E]] { if ([[b]]) { return Nullable.of([[supplier]].get()); } else { return Nullable.empty(); } }
[[[[Nl]]]]: Returns a { @ code Nullable } with value got from the specified { @ code supplier } if { @ code b } is { @ code true } , otherwise returns an empty { @ code Nullable } if { @ code b } is false

[[[[Adv]]]]: public static <R, [[pageants]] extends Exception> Nullable<R> [[décor]](final boolean [[oday]], final Try.Supplier<R, [[pageants]]> [[typewritten]]) throws [[pageants]] { if ([[oday]]) { return Nullable.of([[typewritten]].get()); } else { return Nullable.empty(); } }
[[[[Nl]]]]: Returns a { @ code Nullable } with value got from the specified { @ code supplier } if { @ code b } is { @ code true } , otherwise returns an empty { @ code Nullable } if { @ code b } is false
--------------------------------------------- Result 330 ---------------------------------------------
[[0 (-10575%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public EbsInstanceBlockDeviceSpecification [[withDeleteOnTermination]](Boolean [[deleteOnTermination]]) { this.[[deleteOnTermination]] = [[deleteOnTermination]]; return this; }
[[[[Nl]]]]: Indicates whether the volume is deleted on instance termination

[[[[Adv]]]]: public EbsInstanceBlockDeviceSpecification [[regis]](Boolean [[grinch]]) { this.[[memberships]] = [[grinch]]; return this; }
[[[[Nl]]]]: Indicates whether the volume is deleted on instance termination
--------------------------------------------- Result 331 ---------------------------------------------
[[0 (-7190%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private Cursor [[query]](Uri [[uri]], String[] [[columns]]) { Cursor [[cursor]] = null; try { [[cursor]] = mContext.getContentResolver().query([[uri]], [[columns]], null, null, null); } catch (Exception e) { wrapException(e); } if ([[cursor]] == null && mStrictMode) { throw new RemotePreferenceAccessException("query() failed or returned null cursor"); } return [[cursor]]; }
[[[[Nl]]]]: Queries the specified URI

[[[[Adv]]]]: private Cursor [[footballs]](Uri [[fé]], String[] [[unpaid]]) { Cursor [[undercutting]] = null; try { [[undercutting]] = mContext.getContentResolver().query([[fé]], [[unpaid]], null, null, null); } catch (Exception e) { wrapException(e); } if ([[undercutting]] == null && mStrictMode) { throw new RemotePreferenceAccessException("query() failed or returned null cursor"); } return [[undercutting]]; }
[[[[Nl]]]]: Queries the specified URI
--------------------------------------------- Result 332 ---------------------------------------------
[[0 (-6876%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[getType]](char [[ch]]) { if ([[ch]] <= FAST_PATH_MAX) { return CharacterDataLatin1.getType([[ch]]); } else { return CharacterData.getType([[ch]]); } }
[[[[Nl]]]]: Returns a value indicating a character 's general category

[[[[Adv]]]]: public static int [[shorter]](char [[loaders]]) { if ([[loaders]] <= FAST_PATH_MAX) { return CharacterDataLatin1.getType([[loaders]]); } else { return CharacterData.getType([[loaders]]); } }
[[[[Nl]]]]: Returns a value indicating a character 's general category
--------------------------------------------- Result 333 ---------------------------------------------
[[0 (-10824%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[selectRandomTransition]]() { ensureTransitionsQueue(); if (mTransitionsQueue.isEmpty()) { return; } int [[item]] = Utils.getNextRandom(0, mTransitionsQueue.size() - 1); int [[pos]] = mTransitionsQueue.remove([[item]]); mUsedTransitionsQueue.add([[pos]]); PhotoFrame [[frame]] = mPhotoFrames.get([[pos]]); selectTransition([[frame]], [[pos]]); }
[[[[Nl]]]]: Method that selects a transition and assign it to a random photo frame

[[[[Adv]]]]: public void [[cancelling]]() { ensureTransitionsQueue(); if (mTransitionsQueue.isEmpty()) { return; } int [[treading]] = Utils.getNextRandom(0, mTransitionsQueue.size() - 1); int [[regrets]] = mTransitionsQueue.remove([[treading]]); mUsedTransitionsQueue.add([[regrets]]); PhotoFrame [[drives]] = mPhotoFrames.get([[regrets]]); selectTransition([[drives]], [[regrets]]); }
[[[[Nl]]]]: Method that selects a transition and assign it to a random photo frame
--------------------------------------------- Result 334 ---------------------------------------------
[[0 (-9800%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setTextSize]](float [[size]]) { if ([[size]] > 24f) [[size]] = 24f; if ([[size]] < 6f) [[size]] = 6f; mTextSize = Utils.convertDpToPixel([[size]]); }
[[[[Nl]]]]: sets the size of the label text in pixels min = 6f , max = 24f , default 10f @ param size

[[[[Adv]]]]: public void [[fiancé]](float [[acosta]]) { if ([[acosta]] > 24f) [[acosta]] = 24f; if ([[acosta]] < 6f) [[acosta]] = 6f; mTextSize = Utils.convertDpToPixel([[acosta]]); }
[[[[Nl]]]]: sets the size of the label text in pixels min = 6f , max = 24f , default 10f @ param size
--------------------------------------------- Result 335 ---------------------------------------------
[[0 (-7466%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public <[[T]] [[extends]] MessageComponent<?>> [[T]] getComponent(Class<[[T]]> type) { for (MessageComponent<?> [[cmp]] : mComponents) { if (type.isInstance([[cmp]])) return ([[T]]) [[cmp]]; } return null; }
[[[[Nl]]]]: Returns the first component of the given type

[[[[Adv]]]]: public <[[resumé]] [[cupboards]] MessageComponent<?>> [[resumé]] getComponent(Class<[[resumé]]> type) { for (MessageComponent<?> [[turpin]] : mComponents) { if (type.isInstance([[turpin]])) return ([[resumé]]) [[turpin]]; } return null; }
[[[[Nl]]]]: Returns the first component of the given type
--------------------------------------------- Result 336 ---------------------------------------------
[[0 (-8695%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[scrollBackward]]() throws UiObjectNotFoundException { Tracer.trace(); return [[scrollBackward]](SCROLL_STEPS); }
[[[[Nl]]]]: Performs a backward scroll with the default number of scroll steps ( 55 )

[[[[Adv]]]]: public boolean [[nation]]() throws UiObjectNotFoundException { Tracer.trace(); return [[nation]](SCROLL_STEPS); }
[[[[Nl]]]]: Performs a backward scroll with the default number of scroll steps ( 55 )
--------------------------------------------- Result 337 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 337 / 0 / 337:  43%|████▎     | 337/785 [39:59<53:09,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 337 / 0 / 337:  43%|████▎     | 338/785 [40:05<53:01,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 338 / 0 / 338:  43%|████▎     | 338/785 [40:05<53:01,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 338 / 0 / 338:  43%|████▎     | 339/785 [40:12<52:53,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 339 / 0 / 339:  43%|████▎     | 339/785 [40:12<52:53,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 339 / 0 / 339:  43%|████▎     | 340/785 [40:12<52:37,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 340 / 0 / 340:  43%|████▎     | 340/785 [40:12<52:37,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 340 / 0 / 340:  43%|████▎     | 341/785 [40:26<52:39,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 341 / 0 / 341:  43%|████▎     | 341/785 [40:26<52:39,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 341 / 0 / 341:  44%|████▎     | 342/785 [40:39<52:39,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 342 / 0 / 342:  44%|████▎     | 342/785 [40:39<52:39,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 342 / 0 / 342:  44%|████▎     | 343/785 [40:40<52:24,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 343 / 0 / 343:  44%|████▎     | 343/785 [40:40<52:24,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 343 / 0 / 343:  44%|████▍     | 344/785 [40:46<52:16,  7.11s/it][[0 (-11166%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void copyMainBundleResources(final File newApkUnzipFolder, final File baseApkUnzipFolder, File [[patchTmpDir]], Collection<File> retainFiles) throws IOException { boolean [[resoureModified]] = "[[False]]" != "[[False]]"; for (File [[retainFile]] : retainFiles) { String relativePath = PathUtils.toRelative(newApkUnzipFolder, [[retainFile]].getAbsolutePath()); File [[baseFile]] = new File(baseApkUnzipFolder, relativePath); if (isBundleFile([[retainFile]])) { } else if (isFileModify([[retainFile]], [[baseFile]])) { [[resoureModified]] = True; File destFile = new File([[patchTmpDir]], relativePath); FileUtils.copyFile([[retainFile]], destFile); } } if ([[resoureModified]]) { File AndroidMenifestFile = new File(newApkUnzipFolder, ANDROID_MANIFEST); FileUtils.copyFileToDirectory(AndroidMenifestFile, [[patchTmpDir]]); } }
[[[[Nl]]]]: @ param newApkUnzipFolder @ param baseApkUnzipFolder @ param patchTmpDir @ param retainFiles @ throws IOException public void copyMainBundleResources ( final File

[[[[Adv]]]]: public void copyMainBundleResources(final File newApkUnzipFolder, final File baseApkUnzipFolder, File [[hypnosis]], Collection<File> retainFiles) throws IOException { boolean [[salesmanship]] = "[["Gonçalves" != "Gonçalves"]]" != "[["Gonçalves" != "Gonçalves"]]"; for (File [[vineyards]] : retainFiles) { String relativePath = PathUtils.toRelative(newApkUnzipFolder, [[vineyards]].getAbsolutePath()); File [[drinker]] = new File(baseApkUnzipFolder, relativePath); if (isBundleFile([[vineyards]])) { } else if (isFileModify([[vineyards]], [[drinker]])) { [[salesmanship]] = True; File destFile = new File([[hypnosis]], relativePath); FileUtils.copyFile([[vineyards]], destFile); } } if ([[salesmanship]]) { File AndroidMenifestFile = new File(newApkUnzipFolder, ANDROID_MANIFEST); FileUtils.copyFileToDirectory(AndroidMenifestFile, [[hypnosis]]); } }
[[[[Nl]]]]: @ param newApkUnzipFolder @ param baseApkUnzipFolder @ param patchTmpDir @ param retainFiles @ throws IOException public void copyMainBundleResources ( final File
--------------------------------------------- Result 338 ---------------------------------------------
[[0 (-9441%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setUserDismissible]](boolean [[userDismissible]]) { this.[[userDismissible]] = [[userDismissible]]; updateBootstrapState(); }
[[[[Nl]]]]: Sets whether the user can dismiss the dialog or not

[[[[Adv]]]]: public void [[sûr]](boolean [[buffeted]]) { this.[[patties]] = [[buffeted]]; updateBootstrapState(); }
[[[[Nl]]]]: Sets whether the user can dismiss the dialog or not
--------------------------------------------- Result 339 ---------------------------------------------
[[0 (-10145%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public DirectedGraph [[load]](String [[fileName]]) throws IOException, MaryConfigurationException { InputStream [[is]] = new FileInputStream([[fileName]]); try { return [[load]]([[is]]); } finally { [[is]].close(); } }
[[[[Nl]]]]: Load the directed graph from the given file @ param fileName the file to load the cart from @ param featDefinition the feature definition @ param dummy unused , just here for compatibility with the FeatureFileIndexer

[[[[Adv]]]]: public DirectedGraph [[keyhole]](String [[whittled]]) throws IOException, MaryConfigurationException { InputStream [[matteo]] = new FileInputStream([[whittled]]); try { return [[keyhole]]([[matteo]]); } finally { [[matteo]].close(); } }
[[[[Nl]]]]: Load the directed graph from the given file @ param fileName the file to load the cart from @ param featDefinition the feature definition @ param dummy unused , just here for compatibility with the FeatureFileIndexer
--------------------------------------------- Result 340 ---------------------------------------------
[[0 (-9282%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public AnychartMathRect [[getClip]]() { if ([[getClip]] == null) [[getClip]] = new AnychartMathRect(jsBase + ".clip()"); return [[getClip]]; }
[[[[Nl]]]]: Getter for series clip settings

[[[[Adv]]]]: public AnychartMathRect [[olá]]() { if ([[olá]] == null) [[olá]] = new AnychartMathRect(jsBase + ".clip()"); return [[olá]]; }
[[[[Nl]]]]: Getter for series clip settings
--------------------------------------------- Result 341 ---------------------------------------------
[[0 (-10914%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getAverageMacRetryPerApsMessageSent]](final long [[refreshPeriod]]) { if (attributes.get(ATTR_AVERAGEMACRETRYPERAPSMESSAGESENT).isLastValueCurrent([[refreshPeriod]])) { return (Integer) attributes.get(ATTR_AVERAGEMACRETRYPERAPSMESSAGESENT).getLastValue(); } return (Integer) readSync(attributes.get(ATTR_AVERAGEMACRETRYPERAPSMESSAGESENT)); }
[[[[Nl]]]]: Synchronously get the < i > AverageMACRetryPerAPSMessageSent < i > attribute [ attribute ID < b > 283 < b > ]

[[[[Adv]]]]: public Integer [[spendin]](final long [[cartago]]) { if (attributes.get(ATTR_AVERAGEMACRETRYPERAPSMESSAGESENT).isLastValueCurrent([[cartago]])) { return (Integer) attributes.get(ATTR_AVERAGEMACRETRYPERAPSMESSAGESENT).getLastValue(); } return (Integer) readSync(attributes.get(ATTR_AVERAGEMACRETRYPERAPSMESSAGESENT)); }
[[[[Nl]]]]: Synchronously get the < i > AverageMACRetryPerAPSMessageSent < i > attribute [ attribute ID < b > 283 < b > ]
--------------------------------------------- Result 342 ---------------------------------------------
[[0 (-9301%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public DatagridColumn [[setDefaultWidth]](Number [[defaultWidth]]) { if (jsBase == null) { this.[[defaultWidth]] = [[defaultWidth]]; } else { this.[[defaultWidth]] = [[defaultWidth]]; if (!isChain) { js.append(jsBase); isChain = "[[True]]" == "[[True]]"; } js.append(String.format(Locale.US, ".defaultWidth(%s)", [[defaultWidth]])); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, jsBase + ".defaultWidth(%s);", [[defaultWidth]])); js.setLength(0); } } return this; }
[[[[Nl]]]]: Setter for the column default width

[[[[Adv]]]]: public DatagridColumn [[také]](Number [[publishers]]) { if (jsBase == null) { this.[[brooks]] = [[publishers]]; } else { this.[[brooks]] = [[publishers]]; if (!isChain) { js.append(jsBase); isChain = "[["Cliché" == "Cliché"]]" == "[["Cliché" == "Cliché"]]"; } js.append(String.format(Locale.US, ".defaultWidth(%s)", [[publishers]])); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, jsBase + ".defaultWidth(%s);", [[publishers]])); js.setLength(0); } } return this; }
[[[[Nl]]]]: Setter for the column default width
--------------------------------------------- Result 343 ---------------------------------------------
[[0 (-9879%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[headerMatch]](byte[] [[header]], byte[] [[imageData]], int [[imageOffset]], int imageLength) { if (imageLength < [[header]].length) { return False; } for (int i = 0; i < [[header]].length; i++) { if ([[imageData]][[[imageOffset]] + i] != [[header]][i]) { return False; } } return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Function to compare byte data to the given header @ param header header data to compare imageData with @ param imageData the array of image data in a supported image format @ param imageOffset the offset of the start of the data in the array @ param imageLength the length of the data in the array @ return true if the header

[[[[Adv]]]]: private boolean [[estúpido]](byte[] [[tensions]], byte[] [[gae]], int [[forgives]], int imageLength) { if (imageLength < [[tensions]].length) { return False; } for (int i = 0; i < [[tensions]].length; i++) { if ([[gae]][[[forgives]] + i] != [[tensions]][i]) { return False; } } return "[["Engaged" == "Engaged"]]" == "[["Engaged" == "Engaged"]]"; }
[[[[Nl]]]]: Function to compare byte data to the given header @ param header header data to compare imageData with @ param imageData the array of image data in a supported image format @ param imageOffset the offset of the start of the data in the array @ param imageLength the length of the data in the array @ return true if the header
--------------------------------------------- Result 344 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 344 / 0 / 344:  44%|████▍     | 344/785 [40:46<52:16,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 344 / 0 / 344:  44%|████▍     | 345/785 [40:53<52:08,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 345 / 0 / 345:  44%|████▍     | 345/785 [40:53<52:08,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 345 / 0 / 345:  44%|████▍     | 346/785 [40:53<51:53,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 346 / 0 / 346:  44%|████▍     | 346/785 [40:53<51:53,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 346 / 0 / 346:  44%|████▍     | 347/785 [41:13<52:01,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 347 / 0 / 347:  44%|████▍     | 347/785 [41:13<52:01,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 347 / 0 / 347:  44%|████▍     | 348/785 [41:14<51:46,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 348 / 0 / 348:  44%|████▍     | 348/785 [41:14<51:46,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 348 / 0 / 348:  44%|████▍     | 349/785 [41:14<51:31,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 349 / 0 / 349:  44%|████▍     | 349/785 [41:14<51:31,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 349 / 0 / 349:  45%|████▍     | 350/785 [41:27<51:31,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 350 / 0 / 350:  45%|████▍     | 350/785 [41:27<51:31,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 350 / 0 / 350:  45%|████▍     | 351/785 [41:33<51:23,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 351 / 0 / 351:  45%|████▍     | 351/785 [41:33<51:23,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 351 / 0 / 351:  45%|████▍     | 352/785 [41:34<51:09,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 352 / 0 / 352:  45%|████▍     | 352/785 [41:34<51:09,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 352 / 0 / 352:  45%|████▍     | 353/785 [41:47<51:08,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 353 / 0 / 353:  45%|████▍     | 353/785 [41:47<51:08,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 353 / 0 / 353:  45%|████▌     | 354/785 [41:48<50:53,  7.08s/it][[0 (-9273%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[delete]]() { super.delete(); mMVPMatrixLoc = INVALID_GL_HANDLE; mVertexZLoc = INVALID_GL_HANDLE; mVertexPosLoc = INVALID_GL_HANDLE; }
[[[[Nl]]]]: Delete shader resources

[[[[Adv]]]]: public void [[enright]]() { super.delete(); mMVPMatrixLoc = INVALID_GL_HANDLE; mVertexZLoc = INVALID_GL_HANDLE; mVertexPosLoc = INVALID_GL_HANDLE; }
[[[[Nl]]]]: Delete shader resources
--------------------------------------------- Result 345 ---------------------------------------------
[[0 (-9245%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public BatchDetectKeyPhrasesRequest [[withTextList]](String... [[textList]]) { if (getTextList() == null) { this.[[textList]] = new java.util.ArrayList<String>([[textList]].length); } for (String [[value]] : [[textList]]) { this.[[textList]].add([[value]]); } return this; }
[[[[Nl]]]]: < p > A list containing the text of the input documents

[[[[Adv]]]]: public BatchDetectKeyPhrasesRequest [[handphone]](String... [[vibrates]]) { if (getTextList() == null) { this.[[flyby]] = new java.util.ArrayList<String>([[vibrates]].length); } for (String [[macmillan]] : [[vibrates]]) { this.[[flyby]].add([[macmillan]]); } return this; }
[[[[Nl]]]]: < p > A list containing the text of the input documents
--------------------------------------------- Result 346 ---------------------------------------------
[[0 (-9776%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[registerSpring]](Spring [[spring]]) { if ([[spring]] == null) { throw new IllegalArgumentException("spring is required"); } if (mSpringRegistry.containsKey([[spring]].getId())) { throw new IllegalArgumentException("spring is already registered"); } mSpringRegistry.put([[spring]].getId(), [[spring]]); }
[[[[Nl]]]]: Registers a Spring to this BaseSpringSystem so it can be iterated if active

[[[[Adv]]]]: void [[tuna]](Spring [[están]]) { if ([[están]] == null) { throw new IllegalArgumentException("spring is required"); } if (mSpringRegistry.containsKey([[están]].getId())) { throw new IllegalArgumentException("spring is already registered"); } mSpringRegistry.put([[están]].getId(), [[están]]); }
[[[[Nl]]]]: Registers a Spring to this BaseSpringSystem so it can be iterated if active
--------------------------------------------- Result 347 ---------------------------------------------
[[0 (-10035%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[sizeAliveElements]]() { int [[size]] = 0; for (QNCacheBean<T> [[cacheValue]] : cache.values()) { if ([[cacheValue]].isAlive(now())) { [[size]]++; } } return [[size]]; }
[[[[Nl]]]]: Counts how much alive elements are living in the cache

[[[[Adv]]]]: public int [[baran]]() { int [[piñata]] = 0; for (QNCacheBean<T> [[décor]] : cache.values()) { if ([[décor]].isAlive(now())) { [[piñata]]++; } } return [[piñata]]; }
[[[[Nl]]]]: Counts how much alive elements are living in the cache
--------------------------------------------- Result 348 ---------------------------------------------
[[0 (-8790%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private E[] [[extractElements]](int [[size]]) { if ([[size]] == 0) { return mEmptyArray; } E[] [[elements]] = (E[]) Array.newInstance(mEmptyArray.getClass().getComponentType(), [[size]]); for (int [[i]] = [[size]] - 1; [[i]] >= 0; --[[i]]) { [[elements]][[[i]]] = mElements.pollLast(); } return [[elements]]; }
[[[[Nl]]]]: Extracts last size elements into an array

[[[[Adv]]]]: private E[] [[liners]](int [[motives]]) { if ([[motives]] == 0) { return mEmptyArray; } E[] [[inquirer]] = (E[]) Array.newInstance(mEmptyArray.getClass().getComponentType(), [[motives]]); for (int [[iconic]] = [[motives]] - 1; [[iconic]] >= 0; --[[iconic]]) { [[inquirer]][[[iconic]]] = mElements.pollLast(); } return [[inquirer]]; }
[[[[Nl]]]]: Extracts last size elements into an array
--------------------------------------------- Result 349 ---------------------------------------------
[[0 (-8814%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int[] [[getChildIndices]]() { if(childIndices != null) { int [[cCount]] = childIndices.length; int[] [[retArray]] = new int[[[cCount]]]; System.arraycopy(childIndices, 0, [[retArray]], 0, [[cCount]]); return [[retArray]]; } return null; }
[[[[Nl]]]]: Returns the values of the child indexes

[[[[Adv]]]]: public int[] [[emitter]]() { if(childIndices != null) { int [[lemmon]] = childIndices.length; int[] [[disseminated]] = new int[[[lemmon]]]; System.arraycopy(childIndices, 0, [[disseminated]], 0, [[lemmon]]); return [[disseminated]]; } return null; }
[[[[Nl]]]]: Returns the values of the child indexes
--------------------------------------------- Result 350 ---------------------------------------------
[[0 (-8699%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setItemsVisibleCount]](int [[visibleNumber]]) { if ([[visibleNumber]] % 2 == 0) { return; } if ([[visibleNumber]] != itemsVisibleCount) { itemsVisibleCount = [[visibleNumber]]; drawingStrings=new HashMap<>(); } }
[[[[Nl]]]]: visible item count , must be odd number @ param visibleNumber

[[[[Adv]]]]: public void [[gonçalves]](int [[drinkers]]) { if ([[drinkers]] % 2 == 0) { return; } if ([[drinkers]] != itemsVisibleCount) { itemsVisibleCount = [[drinkers]]; drawingStrings=new HashMap<>(); } }
[[[[Nl]]]]: visible item count , must be odd number @ param visibleNumber
--------------------------------------------- Result 351 ---------------------------------------------
[[0 (-8829%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[dateToMillis]](CalendarDate [[date]]) { long [[gd]] = getFixedDate([[date]].getYear(), [[date]].getMonth(), [[date]].getDate()); return (([[gd]] - EPOCH_DATE) * ONE_DAY + [[date]].getTimeOfDay()); }
[[[[Nl]]]]: Calculates milliseconds of given time from EPOCH , 1970-01-01 00:00AM

[[[[Adv]]]]: public static long [[hieroglyphs]](CalendarDate [[tortuga]]) { long [[conspiracies]] = getFixedDate([[tortuga]].getYear(), [[tortuga]].getMonth(), [[tortuga]].getDate()); return (([[conspiracies]] - EPOCH_DATE) * ONE_DAY + [[tortuga]].getTimeOfDay()); }
[[[[Nl]]]]: Calculates milliseconds of given time from EPOCH , 1970-01-01 00:00AM
--------------------------------------------- Result 352 ---------------------------------------------
[[0 (-9333%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[saveMergeState]](@NonNull IncrementalFileMergerState [[state]]) throws IOException { File [[incrementalFile]] = incrementalStateFile(); FileUtils.mkdirs([[incrementalFile]].getParentFile()); try (ObjectOutputStream o = new ObjectOutputStream(new FileOutputStream([[incrementalFile]]))) { o.writeObject([[state]]); } }
[[[[Nl]]]]: Save the incremental merge state

[[[[Adv]]]]: private void [[pattern]](@NonNull IncrementalFileMergerState [[qc]]) throws IOException { File [[silhouettes]] = incrementalStateFile(); FileUtils.mkdirs([[silhouettes]].getParentFile()); try (ObjectOutputStream o = new ObjectOutputStream(new FileOutputStream([[silhouettes]]))) { o.writeObject([[qc]]); } }
[[[[Nl]]]]: Save the incremental merge state
--------------------------------------------- Result 353 ---------------------------------------------
[[0 (-6961%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[processStanza]](Stanza [[packet]]) { if (packetFilter == null || packetFilter.accept([[packet]])) { while (!resultQueue.offer([[packet]])) { resultQueue.poll(); } if (collectorToReset != null) { collectorToReset.waitStart = System.currentTimeMillis(); } } }
[[[[Nl]]]]: Processes a stanza to see if it meets the criteria for this stanza collector

[[[[Adv]]]]: protected void [[dumper]](Stanza [[muñoz]]) { if (packetFilter == null || packetFilter.accept([[muñoz]])) { while (!resultQueue.offer([[muñoz]])) { resultQueue.poll(); } if (collectorToReset != null) { collectorToReset.waitStart = System.currentTimeMillis(); } } }
[[[[Nl]]]]: Processes a stanza to see if it meets the criteria for this stanza collector
--------------------------------------------- Result 354 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 354 / 0 / 354:  45%|████▌     | 354/785 [41:48<50:53,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 354 / 0 / 354:  45%|████▌     | 355/785 [41:55<50:46,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 355 / 0 / 355:  45%|████▌     | 355/785 [41:55<50:46,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 355 / 0 / 355:  45%|████▌     | 356/785 [42:01<50:38,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 356 / 0 / 356:  45%|████▌     | 356/785 [42:01<50:38,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 356 / 0 / 356:  45%|████▌     | 357/785 [42:20<50:46,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 357 / 0 / 357:  45%|████▌     | 357/785 [42:20<50:46,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 357 / 0 / 357:  46%|████▌     | 358/785 [42:22<50:32,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 358 / 0 / 358:  46%|████▌     | 358/785 [42:22<50:32,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 358 / 0 / 358:  46%|████▌     | 359/785 [42:27<50:22,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 359 / 0 / 359:  46%|████▌     | 359/785 [42:27<50:22,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 359 / 0 / 359:  46%|████▌     | 360/785 [42:29<50:09,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 360 / 0 / 360:  46%|████▌     | 360/785 [42:29<50:09,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 360 / 0 / 360:  46%|████▌     | 361/785 [42:47<50:15,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 361 / 0 / 361:  46%|████▌     | 361/785 [42:47<50:15,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 361 / 0 / 361:  46%|████▌     | 362/785 [42:48<50:00,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 362 / 0 / 362:  46%|████▌     | 362/785 [42:48<50:00,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 362 / 0 / 362:  46%|████▌     | 363/785 [42:58<49:57,  7.10s/it][[0 (-8408%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public IdentityNotificationAttributes [[withComplaintTopic]](String [[complaintTopic]]) { this.[[complaintTopic]] = [[complaintTopic]]; return this; }
[[[[Nl]]]]: < p > The Amazon Resource Name ( ARN ) of the Amazon SNS topic where Amazon SES will publish complaint notifications

[[[[Adv]]]]: public IdentityNotificationAttributes [[victorian]](String [[soufflés]]) { this.[[vamps]] = [[soufflés]]; return this; }
[[[[Nl]]]]: < p > The Amazon Resource Name ( ARN ) of the Amazon SNS topic where Amazon SES will publish complaint notifications
--------------------------------------------- Result 355 ---------------------------------------------
[[0 (-8855%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public ZGrid [[setToolbarTitleColor]](ZColor [[color]]) { this.[[color]] = [[color]]; return this; }
[[[[Nl]]]]: Setting toolbar color @ param color enum color may be black or white @ return

[[[[Adv]]]]: public ZGrid [[detests]](ZColor [[steeped]]) { this.[[extractions]] = [[steeped]]; return this; }
[[[[Nl]]]]: Setting toolbar color @ param color enum color may be black or white @ return
--------------------------------------------- Result 356 ---------------------------------------------
[[0 (-9228%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setTopViewMarginBottom]](int [[topFragmentMarginBottom]]) { transformer.setMarginBottom([[topFragmentMarginBottom]]); }
[[[[Nl]]]]: Configure the dragView margin bottom applied when the dragView is minimized

[[[[Adv]]]]: public void [[finishes]](int [[cristiano]]) { transformer.setMarginBottom([[cristiano]]); }
[[[[Nl]]]]: Configure the dragView margin bottom applied when the dragView is minimized
--------------------------------------------- Result 357 ---------------------------------------------
[[0 (-8761%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[bulkTransfer]](UsbEndpoint [[endpoint]], byte[] [[buffer]], int [[offset]], int [[length]], int timeout) { checkBounds([[buffer]], [[offset]], [[length]]); return native_bulk_request([[endpoint]].getAddress(), [[buffer]], [[offset]], [[length]], timeout); }
[[[[Nl]]]]: Performs a bulk transaction on the given endpoint

[[[[Adv]]]]: public int [[gutters]](UsbEndpoint [[bowmen]], byte[] [[keyhole]], int [[wells]], int [[toño]], int timeout) { checkBounds([[keyhole]], [[wells]], [[toño]]); return native_bulk_request([[bowmen]].getAddress(), [[keyhole]], [[wells]], [[toño]], timeout); }
[[[[Nl]]]]: Performs a bulk transaction on the given endpoint
--------------------------------------------- Result 358 ---------------------------------------------
[[0 (-9452%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[initRecyclerView]]() { expandedGridview = (boolean) SharedPrefHelper.getInstance(new WeakReference<>(getContext())) .getValue(EXPANDED_GRIDVIEW, "[[False]]" != "[[False]]"); BookmarkRecyclerViewAdapter [[adapter]] = new BookmarkRecyclerViewAdapter(new WeakReference<>(getContext()), new WeakReference<BookmarkRecyclerViewAdapter.OnActionListenerInterface>(this)); recyclerView.setLayoutManager(new GridLayoutManager(getActivity(), Utils.getCardNumberInRow(getContext(), expandedGridview))); recyclerView.setAdapter([[adapter]]); actionMode = new EditBookmarkActionModeCallback(new WeakReference<>(getContext()), [[adapter]]); registerDataObserver([[adapter]]); }
[[[[Nl]]]]: init view on recyclerView - setup adapter and other stuff connected to main fragment app

[[[[Adv]]]]: private void [[clear]]() { expandedGridview = (boolean) SharedPrefHelper.getInstance(new WeakReference<>(getContext())) .getValue(EXPANDED_GRIDVIEW, "[["Secretes" != "Secretes"]]" != "[["Secretes" != "Secretes"]]"); BookmarkRecyclerViewAdapter [[chequebook]] = new BookmarkRecyclerViewAdapter(new WeakReference<>(getContext()), new WeakReference<BookmarkRecyclerViewAdapter.OnActionListenerInterface>(this)); recyclerView.setLayoutManager(new GridLayoutManager(getActivity(), Utils.getCardNumberInRow(getContext(), expandedGridview))); recyclerView.setAdapter([[chequebook]]); actionMode = new EditBookmarkActionModeCallback(new WeakReference<>(getContext()), [[chequebook]]); registerDataObserver([[chequebook]]); }
[[[[Nl]]]]: init view on recyclerView - setup adapter and other stuff connected to main fragment app
--------------------------------------------- Result 359 ---------------------------------------------
[[0 (-9449%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public XMLEventReader [[getXMLEventReader]]() { return xmlEventReader; }
[[[[Nl]]]]: < p > Get the < code > XMLEventReader < code > used by this < code > StAXSource < code >

[[[[Adv]]]]: public XMLEventReader [[anthros]]() { return xmlEventReader; }
[[[[Nl]]]]: < p > Get the < code > XMLEventReader < code > used by this < code > StAXSource < code >
--------------------------------------------- Result 360 ---------------------------------------------
[[0 (-8868%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private Marker [[addSantaMarker]](int [[iconDrawable]], float [[u]], float [[v]], LatLng [[position]]) { return mMap.addMarker(new MarkerOptions().[[position]]([[position]]) .anchor([[u]], [[v]]) .title(TITLE) .icon(BitmapDescriptorFactory.fromResource([[iconDrawable]]))); }
[[[[Nl]]]]: Adds a new marker at the given position

[[[[Adv]]]]: private Marker [[doughnut]](int [[superpowers]], float [[capshaw]], float [[nº]], LatLng [[grapefruits]]) { return mMap.addMarker(new MarkerOptions().[[grapefruits]]([[grapefruits]]) .anchor([[capshaw]], [[nº]]) .title(TITLE) .icon(BitmapDescriptorFactory.fromResource([[superpowers]]))); }
[[[[Nl]]]]: Adds a new marker at the given position
--------------------------------------------- Result 361 ---------------------------------------------
[[0 (-8347%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[animateFold]]() { float [[foldFactor]] = mFoldLayout.getFoldFactor(); ObjectAnimator [[animator]] = ObjectAnimator.ofFloat(mFoldLayout, "foldFactor", [[foldFactor]], 1); [[animator]].setRepeatMode(ValueAnimator.REVERSE); [[animator]].setRepeatCount(1); [[animator]].setDuration(FOLD_ANIMATION_DURATION); [[animator]].setInterpolator(new AccelerateInterpolator()); [[animator]].start(); }
[[[[Nl]]]]: Animates the folding view inwards ( to a completely folded state ) from its current state and then back out to its original state

[[[[Adv]]]]: public void [[chemistry]]() { float [[liners]] = mFoldLayout.getFoldFactor(); ObjectAnimator [[rossellini]] = ObjectAnimator.ofFloat(mFoldLayout, "foldFactor", [[liners]], 1); [[rossellini]].setRepeatMode(ValueAnimator.REVERSE); [[rossellini]].setRepeatCount(1); [[rossellini]].setDuration(FOLD_ANIMATION_DURATION); [[rossellini]].setInterpolator(new AccelerateInterpolator()); [[rossellini]].start(); }
[[[[Nl]]]]: Animates the folding view inwards ( to a completely folded state ) from its current state and then back out to its original state
--------------------------------------------- Result 362 ---------------------------------------------
[[0 (-9481%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setNumClasses]](int [[classNum]]) { this.[[n_classes]] = [[classNum]]; }
[[[[Nl]]]]: Set label count for the classifier

[[[[Adv]]]]: public void [[roofing]](int [[što]]) { this.[[embarcadero]] = [[što]]; }
[[[[Nl]]]]: Set label count for the classifier
--------------------------------------------- Result 363 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 363 / 0 / 363:  46%|████▌     | 363/785 [42:58<49:57,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 363 / 0 / 363:  46%|████▋     | 364/785 [43:13<50:00,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 364 / 0 / 364:  46%|████▋     | 364/785 [43:13<50:00,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 364 / 0 / 364:  46%|████▋     | 365/785 [43:14<49:45,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 365 / 0 / 365:  46%|████▋     | 365/785 [43:14<49:45,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 365 / 0 / 365:  47%|████▋     | 366/785 [43:18<49:35,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 366 / 0 / 366:  47%|████▋     | 366/785 [43:18<49:35,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 366 / 0 / 366:  47%|████▋     | 367/785 [43:26<49:29,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 367 / 0 / 367:  47%|████▋     | 367/785 [43:26<49:29,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 367 / 0 / 367:  47%|████▋     | 368/785 [43:27<49:14,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 368 / 0 / 368:  47%|████▋     | 368/785 [43:27<49:14,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 368 / 0 / 368:  47%|████▋     | 369/785 [43:46<49:20,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 369 / 0 / 369:  47%|████▋     | 369/785 [43:46<49:20,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 369 / 0 / 369:  47%|████▋     | 370/785 [43:54<49:14,  7.12s/it][[0 (-9501%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processIntent]]() { Intent [[intentArvutaja]] = getIntent(); Bundle [[extras]] = [[intentArvutaja]].getExtras(); if ( Intent.ACTION_SEARCH_LONG_PRESS.equals([[intentArvutaja]].getAction()) || Intent.ACTION_VOICE_COMMAND.equals([[intentArvutaja]].getAction()) || [[extras]] != null && [[extras]].getBoolean(Extras.EXTRA_LAUNCH_RECOGNIZER)) { Intent [[intentVoid]] = new Intent(this, ArvutajaActivity.class); [[intentVoid]].setAction(null); [[intentVoid]].putExtras([[extras]]); [[intentVoid]].putExtra(Extras.EXTRA_LAUNCH_RECOGNIZER, "[[False]]" != "[[False]]"); setIntent([[intentVoid]]); mButtonMicrophone.performClick(); } }
[[[[Nl]]]]: Immediately launch the recognizer if - action is ACTION_SEARCH_LONG_PRESS , or - action is ACTION_VOICE_COMMAND , or - EXTRA_LAUNCH_RECOGNIZER == true Note that in case of ACTION_ASSIST the recognizer is not launched

[[[[Adv]]]]: private void [[ceil]]() { Intent [[quantas]] = getIntent(); Bundle [[gutted]] = [[quantas]].getExtras(); if ( Intent.ACTION_SEARCH_LONG_PRESS.equals([[quantas]].getAction()) || Intent.ACTION_VOICE_COMMAND.equals([[quantas]].getAction()) || [[gutted]] != null && [[gutted]].getBoolean(Extras.EXTRA_LAUNCH_RECOGNIZER)) { Intent [[greenleaf]] = new Intent(this, ArvutajaActivity.class); [[greenleaf]].setAction(null); [[greenleaf]].putExtras([[gutted]]); [[greenleaf]].putExtra(Extras.EXTRA_LAUNCH_RECOGNIZER, "[["Estúpido" != "Estúpido"]]" != "[["Estúpido" != "Estúpido"]]"); setIntent([[greenleaf]]); mButtonMicrophone.performClick(); } }
[[[[Nl]]]]: Immediately launch the recognizer if - action is ACTION_SEARCH_LONG_PRESS , or - action is ACTION_VOICE_COMMAND , or - EXTRA_LAUNCH_RECOGNIZER == true Note that in case of ACTION_ASSIST the recognizer is not launched
--------------------------------------------- Result 364 ---------------------------------------------
[[0 (-7002%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[startAnnotation]](QName [[elemName]], XMLAttributes [[attributes]], NamespaceContext [[namespaceContext]]) { [[startAnnotation]]([[elemName]].rawname, [[attributes]], [[namespaceContext]]); }
[[[[Nl]]]]: commence the serialization of an annotation

[[[[Adv]]]]: void [[unsatisfied]](QName [[steerage]], XMLAttributes [[shutters]], NamespaceContext [[imperialistic]]) { [[unsatisfied]]([[steerage]].rawname, [[shutters]], [[imperialistic]]); }
[[[[Nl]]]]: commence the serialization of an annotation
--------------------------------------------- Result 365 ---------------------------------------------
[[0 (-8688%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[formatRadiuses]](double[] [[radiuses]]) { if ([[radiuses]] == null || [[radiuses]].length == 0) { return null; } String[] [[radiusesFormatted]] = new String[[[radiuses]].length]; for (int [[i]] = 0; [[i]] < [[radiuses]].length; [[i]]++) { if ([[radiuses]][[[i]]] == Double.POSITIVE_INFINITY) { [[radiusesFormatted]][[[i]]] = "unlimited"; } else { [[radiusesFormatted]][[[i]]] = String.format(Locale.US, "%s", TextUtils.formatCoordinate([[radiuses]][[[i]]])); } } return join(";", [[radiusesFormatted]]); }
[[[[Nl]]]]: Used in various APIs to format the user provided radiuses to a String matching the APIs format

[[[[Adv]]]]: public static String [[obscenities]](double[] [[bedlam]]) { if ([[bedlam]] == null || [[bedlam]].length == 0) { return null; } String[] [[azrael]] = new String[[[bedlam]].length]; for (int [[bournemouth]] = 0; [[bournemouth]] < [[bedlam]].length; [[bournemouth]]++) { if ([[bedlam]][[[bournemouth]]] == Double.POSITIVE_INFINITY) { [[azrael]][[[bournemouth]]] = "unlimited"; } else { [[azrael]][[[bournemouth]]] = String.format(Locale.US, "%s", TextUtils.formatCoordinate([[bedlam]][[[bournemouth]]])); } } return join(";", [[azrael]]); }
[[[[Nl]]]]: Used in various APIs to format the user provided radiuses to a String matching the APIs format
--------------------------------------------- Result 366 ---------------------------------------------
[[0 (-9773%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static Package[] [[getSystemPackages]]() { String[] [[names]] = getSystemPackages0(); synchronized (pkgs) { for (int [[i]] = 0; [[i]] < [[names]].length; [[i]]++) { defineSystemPackage([[names]][[[i]]], getSystemPackage0([[names]][[[i]]])); } return (Package[])pkgs.values().toArray(new Package[pkgs.size()]); } }
[[[[Nl]]]]: Return an array of loaded system packages

[[[[Adv]]]]: static Package[] [[quadrant]]() { String[] [[mergers]] = getSystemPackages0(); synchronized (pkgs) { for (int [[herds]] = 0; [[herds]] < [[mergers]].length; [[herds]]++) { defineSystemPackage([[mergers]][[[herds]]], getSystemPackage0([[mergers]][[[herds]]])); } return (Package[])pkgs.values().toArray(new Package[pkgs.size()]); } }
[[[[Nl]]]]: Return an array of loaded system packages
--------------------------------------------- Result 367 ---------------------------------------------
[[0 (-9336%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public EncryptedPutObjectRequest [[withMaterialsDescription]]( Map<String, String> [[materialsDescription]]) { setMaterialsDescription([[materialsDescription]]); return this; }
[[[[Nl]]]]: sets the materials description for the encryption materials to be used with the current PutObjectRequest

[[[[Adv]]]]: public EncryptedPutObjectRequest [[rolland]]( Map<String, String> [[на]]) { setMaterialsDescription([[на]]); return this; }
[[[[Nl]]]]: sets the materials description for the encryption materials to be used with the current PutObjectRequest
--------------------------------------------- Result 368 ---------------------------------------------
[[0 (-9712%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Create [[bool]](String [[fieldName]]) { fields.put([[fieldName]], INTEGER); return this; }
[[[[Nl]]]]: Sets a boolean field name

[[[[Adv]]]]: public Create [[soufflés]](String [[puccini]]) { fields.put([[puccini]], INTEGER); return this; }
[[[[Nl]]]]: Sets a boolean field name
--------------------------------------------- Result 369 ---------------------------------------------
[[0 (-9867%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static byte[] [[getFileHash]](FileUploadStructure [[uploadStructure]]) throws NoSuchAlgorithmException, IOException { try { MessageDigest [[sha256]] = MessageDigest.getInstance("SHA-256"); byte[] [[fileBytes]] = fileToBytes([[uploadStructure]]); return [[sha256]].digest([[fileBytes]]); } catch (NoSuchAlgorithmException e) { e.printStackTrace(); } return null; }
[[[[Nl]]]]: get SHA-256 from file note : our server needs 32 bytes , so always pass true as second parameter

[[[[Adv]]]]: public static byte[] [[collections]](FileUploadStructure [[lamson]]) throws NoSuchAlgorithmException, IOException { try { MessageDigest [[morphology]] = MessageDigest.getInstance("SHA-256"); byte[] [[también]] = fileToBytes([[lamson]]); return [[morphology]].digest([[también]]); } catch (NoSuchAlgorithmException e) { e.printStackTrace(); } return null; }
[[[[Nl]]]]: get SHA-256 from file note : our server needs 32 bytes , so always pass true as second parameter
--------------------------------------------- Result 370 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 370 / 0 / 370:  47%|████▋     | 370/785 [43:54<49:14,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 370 / 0 / 370:  47%|████▋     | 371/785 [43:54<49:00,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 371 / 0 / 371:  47%|████▋     | 371/785 [43:54<49:00,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 371 / 0 / 371:  47%|████▋     | 372/785 [44:06<48:58,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 372 / 0 / 372:  47%|████▋     | 372/785 [44:06<48:58,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 372 / 0 / 372:  48%|████▊     | 373/785 [44:08<48:45,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 373 / 0 / 373:  48%|████▊     | 373/785 [44:08<48:45,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 373 / 0 / 373:  48%|████▊     | 374/785 [44:15<48:37,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 374 / 0 / 374:  48%|████▊     | 374/785 [44:15<48:37,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 374 / 0 / 374:  48%|████▊     | 375/785 [44:20<48:28,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 375 / 0 / 375:  48%|████▊     | 375/785 [44:20<48:28,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 375 / 0 / 375:  48%|████▊     | 376/785 [44:34<48:29,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 376 / 0 / 376:  48%|████▊     | 376/785 [44:34<48:29,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 376 / 0 / 376:  48%|████▊     | 377/785 [44:39<48:19,  7.11s/it][[0 (-11738%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static synchronized void [[addConfig]](String [[name]], LocalConfig [[config]]) { SeLionLogger.getLogger().entering(new Object[] { [[name]], [[config]] }); checkArgument(StringUtils.isNotBlank([[name]]), "A testname for which configuration is being added cannot be null (or) empty."); checkArgument([[config]] != null, "A configuration object cannot be null."); if (configsMap.containsKey([[name]])) { String [[message]] = "Overwriting an already existing configuration"; SeLionLogger.getLogger().warning([[message]]); } configsMap.put([[name]], [[config]]); SeLionLogger.getLogger().exiting(); }
[[[[Nl]]]]: Adds the local configuration { @ link LocalConfig } associated with name

[[[[Adv]]]]: public static synchronized void [[underestimating]](String [[engaging]], LocalConfig [[playroom]]) { SeLionLogger.getLogger().entering(new Object[] { [[engaging]], [[playroom]] }); checkArgument(StringUtils.isNotBlank([[engaging]]), "A testname for which configuration is being added cannot be null (or) empty."); checkArgument([[playroom]] != null, "A configuration object cannot be null."); if (configsMap.containsKey([[engaging]])) { String [[bartenders]] = "Overwriting an already existing configuration"; SeLionLogger.getLogger().warning([[bartenders]]); } configsMap.put([[engaging]], [[playroom]]); SeLionLogger.getLogger().exiting(); }
[[[[Nl]]]]: Adds the local configuration { @ link LocalConfig } associated with name
--------------------------------------------- Result 371 ---------------------------------------------
[[0 (-9295%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAllowedToDownloadPage]](Tab [[tab]]) { if ([[tab]] == null) return "[[False]]" != "[[False]]"; if (![[tab]].getUrl().startsWith(UrlConstants.HTTP_SCHEME) && ![[tab]].getUrl().startsWith(UrlConstants.HTTPS_SCHEME)) { return "[[False]]" != "[[False]]"; } if ([[tab]].isShowingErrorPage()) return "[[False]]" != "[[False]]"; if ([[tab]].isShowingInterstitialPage()) return "[[False]]" != "[[False]]"; if ([[tab]].isOfflinePage()) return "[[False]]" != "[[False]]"; if ([[tab]].isIncognito()) return "[[False]]" != "[[False]]"; return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Whether the user should be allowed to download the current page

[[[[Adv]]]]: public static boolean [[tobacconist]](Tab [[communiqué]]) { if ([[communiqué]] == null) return "[["Casablanca" != "Casablanca"]]" != "[["Casablanca" != "Casablanca"]]"; if (![[communiqué]].getUrl().startsWith(UrlConstants.HTTP_SCHEME) && ![[communiqué]].getUrl().startsWith(UrlConstants.HTTPS_SCHEME)) { return "[["Casablanca" != "Casablanca"]]" != "[["Casablanca" != "Casablanca"]]"; } if ([[communiqué]].isShowingErrorPage()) return "[["Casablanca" != "Casablanca"]]" != "[["Casablanca" != "Casablanca"]]"; if ([[communiqué]].isShowingInterstitialPage()) return "[["Casablanca" != "Casablanca"]]" != "[["Casablanca" != "Casablanca"]]"; if ([[communiqué]].isOfflinePage()) return "[["Casablanca" != "Casablanca"]]" != "[["Casablanca" != "Casablanca"]]"; if ([[communiqué]].isIncognito()) return "[["Casablanca" != "Casablanca"]]" != "[["Casablanca" != "Casablanca"]]"; return "[["Costi" == "Costi"]]" == "[["Costi" == "Costi"]]"; }
[[[[Nl]]]]: Whether the user should be allowed to download the current page
--------------------------------------------- Result 372 ---------------------------------------------
[[0 (-7193%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public AssumeRoleWithWebIdentityResult [[withSubjectFromWebIdentityToken]]( String [[subjectFromWebIdentityToken]]) { this.[[subjectFromWebIdentityToken]] = [[subjectFromWebIdentityToken]]; return this; }
[[[[Nl]]]]: < p > The unique user identifier that is returned by the identity provider

[[[[Adv]]]]: public AssumeRoleWithWebIdentityResult [[cyberpunk]]( String [[jazzercise]]) { this.[[trés]] = [[jazzercise]]; return this; }
[[[[Nl]]]]: < p > The unique user identifier that is returned by the identity provider
--------------------------------------------- Result 373 ---------------------------------------------
[[0 (-8442%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isSilence]]() { if ([[isSilence]] == -1) { String [[silenceSymbol]] = "_"; if (name.startsWith([[silenceSymbol]])) { [[isSilence]] = 1; } else { [[isSilence]] = 0; } } return [[isSilence]] == 1; }
[[[[Nl]]]]: Determine whether this target is a silence target @ return true if the target represents silence , false otherwise

[[[[Adv]]]]: public boolean [[martyr]]() { if ([[martyr]] == -1) { String [[ín]] = "_"; if (name.startsWith([[ín]])) { [[martyr]] = 1; } else { [[martyr]] = 0; } } return [[martyr]] == 1; }
[[[[Nl]]]]: Determine whether this target is a silence target @ return true if the target represents silence , false otherwise
--------------------------------------------- Result 374 ---------------------------------------------
[[0 (-9130%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private String [[getRelativeFilePath]]() { return file.equals(directory) ? "" : file.getPath() .substring(directory.getPath().length() + File.separator.length()) .replace(File.separatorChar, ClassConstants.PACKAGE_SEPARATOR); }
[[[[Nl]]]]: Returns the file path of this data entry , relative to the base directory

[[[[Adv]]]]: private String [[lópez]]() { return file.equals(directory) ? "" : file.getPath() .substring(directory.getPath().length() + File.separator.length()) .replace(File.separatorChar, ClassConstants.PACKAGE_SEPARATOR); }
[[[[Nl]]]]: Returns the file path of this data entry , relative to the base directory
--------------------------------------------- Result 375 ---------------------------------------------
[[0 (-8576%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static LongStream [[longStream]](Supplier<? extends Spliterator.OfLong> [[supplier]], int [[characteristics]], boolean [[parallel]]) { return new LongPipeline.Head<>([[supplier]], StreamOpFlag.fromCharacteristics([[characteristics]]), [[parallel]]); }
[[[[Nl]]]]: Creates a new sequential or parallel { @ code LongStream } from a { @ code Supplier } of { @ code Spliterator

[[[[Adv]]]]: public static LongStream [[carls]](Supplier<? extends Spliterator.OfLong> [[melanie]], int [[hotels]], boolean [[estúpido]]) { return new LongPipeline.Head<>([[melanie]], StreamOpFlag.fromCharacteristics([[hotels]]), [[estúpido]]); }
[[[[Nl]]]]: Creates a new sequential or parallel { @ code LongStream } from a { @ code Supplier } of { @ code Spliterator
--------------------------------------------- Result 376 ---------------------------------------------
[[0 (-9387%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isEnabledEvent]](BuckEvent [[event]]) { if (!events.contains([[event]].getEventName())) { return "[[False]]" != "[[False]]"; } if ([[event]].getEventName().equals("BuildRuleFinished") && !enabledBuildRuleFinishedStatuses.contains(((Finished) [[event]]).getStatus().name())) { return "[[False]]" != "[[False]]"; } return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Returns true if the event should be sent to scribe ; false otherwise

[[[[Adv]]]]: public boolean [[linus]](BuckEvent [[silhouettes]]) { if (!events.contains([[silhouettes]].getEventName())) { return "[["Swims" != "Swims"]]" != "[["Swims" != "Swims"]]"; } if ([[silhouettes]].getEventName().equals("BuildRuleFinished") && !enabledBuildRuleFinishedStatuses.contains(((Finished) [[silhouettes]]).getStatus().name())) { return "[["Swims" != "Swims"]]" != "[["Swims" != "Swims"]]"; } return "[["Invade" == "Invade"]]" == "[["Invade" == "Invade"]]"; }
[[[[Nl]]]]: Returns true if the event should be sent to scribe ; false otherwise
--------------------------------------------- Result 377 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 377 / 0 / 377:  48%|████▊     | 377/785 [44:39<48:19,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 377 / 0 / 377:  48%|████▊     | 378/785 [44:49<48:16,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 378 / 0 / 378:  48%|████▊     | 378/785 [44:49<48:16,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 378 / 0 / 378:  48%|████▊     | 379/785 [44:56<48:08,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 379 / 0 / 379:  48%|████▊     | 379/785 [44:56<48:08,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 379 / 0 / 379:  48%|████▊     | 380/785 [44:59<47:57,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 380 / 0 / 380:  48%|████▊     | 380/785 [44:59<47:57,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 380 / 0 / 380:  49%|████▊     | 381/785 [45:06<47:49,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 381 / 0 / 381:  49%|████▊     | 381/785 [45:06<47:49,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 381 / 0 / 381:  49%|████▊     | 382/785 [45:09<47:38,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 382 / 0 / 382:  49%|████▊     | 382/785 [45:09<47:38,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 382 / 0 / 382:  49%|████▉     | 383/785 [45:24<47:39,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 383 / 0 / 383:  49%|████▉     | 383/785 [45:24<47:39,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 383 / 0 / 383:  49%|████▉     | 384/785 [45:25<47:25,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 384 / 0 / 384:  49%|████▉     | 384/785 [45:25<47:25,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 384 / 0 / 384:  49%|████▉     | 385/785 [45:30<47:16,  7.09s/it][[0 (-8858%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public RejectedLogEventsInfo [[withTooNewLogEventStartIndex]](Integer [[tooNewLogEventStartIndex]]) { this.[[tooNewLogEventStartIndex]] = [[tooNewLogEventStartIndex]]; return this; }
[[[[Nl]]]]: < p > The log events that are too new

[[[[Adv]]]]: public RejectedLogEventsInfo [[estás]](Integer [[wholesaler]]) { this.[[greenleaf]] = [[wholesaler]]; return this; }
[[[[Nl]]]]: < p > The log events that are too new
--------------------------------------------- Result 378 ---------------------------------------------
[[0 (-9810%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Rot [[genc]](double [[x]], double [[y]]) { Rot [[P]] = new Rot(); [[P]].si = 0.; [[P]].zi = 0.; if ([[x]] == 0 & [[y]] == 0) { [[P]].c = 1; [[P]].sr = 0.; [[P]].zr = 0.; return [[P]]; } double [[s]] = Math.abs([[x]]) + Math.abs([[y]]); [[P]].zr = [[s]] * Math.sqrt(([[x]] / [[s]]) * ([[x]] / [[s]]) + ([[y]] / [[s]]) * ([[y]] / [[s]])); [[P]].c = [[x]] / [[P]].zr; [[P]].sr = [[y]] / [[P]].zr; return [[P]]; }
[[[[Nl]]]]: Given a real 2-vector , genc returns a real plane rotation P such that < pre > P|x| = | c s||x| = |z| |y| |-s c||y| |0| < pre > @ param x The first component of the two vector @ param y The second component of the two vector @ return The rotation

[[[[Adv]]]]: public static Rot [[freighters]](double [[timberlake]], double [[rothchild]]) { Rot [[quarrels]] = new Rot(); [[quarrels]].si = 0.; [[quarrels]].zi = 0.; if ([[timberlake]] == 0 & [[rothchild]] == 0) { [[quarrels]].c = 1; [[quarrels]].sr = 0.; [[quarrels]].zr = 0.; return [[quarrels]]; } double [[murdered]] = Math.abs([[timberlake]]) + Math.abs([[rothchild]]); [[quarrels]].zr = [[murdered]] * Math.sqrt(([[timberlake]] / [[murdered]]) * ([[timberlake]] / [[murdered]]) + ([[rothchild]] / [[murdered]]) * ([[rothchild]] / [[murdered]])); [[quarrels]].c = [[timberlake]] / [[quarrels]].zr; [[quarrels]].sr = [[rothchild]] / [[quarrels]].zr; return [[quarrels]]; }
[[[[Nl]]]]: Given a real 2-vector , genc returns a real plane rotation P such that < pre > P|x| = | c s||x| = |z| |y| |-s c||y| |0| < pre > @ param x The first component of the two vector @ param y The second component of the two vector @ return The rotation
--------------------------------------------- Result 379 ---------------------------------------------
[[0 (-10924%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private KeyManager [[getKeyManager]]() { return keyManager; }
[[[[Nl]]]]: Get the { @ link KeyManager } instance

[[[[Adv]]]]: private KeyManager [[ellas]]() { return keyManager; }
[[[[Nl]]]]: Get the { @ link KeyManager } instance
--------------------------------------------- Result 380 ---------------------------------------------
[[0 (-8617%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[remove]](Thread [[t]]) { synchronized (this) { if (destroyed) { return; } for (int [[i]] = 0 ; [[i]] < nthreads ; [[i]]++) { if (threads[[[i]]] == [[t]]) { if ([[i]] < --nthreads) { System.arraycopy(threads, [[i]] + 1, threads, [[i]], nthreads - [[i]]); } threads[nthreads] = null; break; } } if (nthreads == 0) { notifyAll(); } if (daemon && (nthreads == 0) && (nUnstartedThreads == 0) && (ngroups == 0)) { destroy(); } } }
[[[[Nl]]]]: Removes the specified Thread from this group

[[[[Adv]]]]: void [[clock]](Thread [[denominations]]) { synchronized (this) { if (destroyed) { return; } for (int [[undergrowth]] = 0 ; [[undergrowth]] < nthreads ; [[undergrowth]]++) { if (threads[[[undergrowth]]] == [[denominations]]) { if ([[undergrowth]] < --nthreads) { System.arraycopy(threads, [[undergrowth]] + 1, threads, [[undergrowth]], nthreads - [[undergrowth]]); } threads[nthreads] = null; break; } } if (nthreads == 0) { notifyAll(); } if (daemon && (nthreads == 0) && (nUnstartedThreads == 0) && (ngroups == 0)) { destroy(); } } }
[[[[Nl]]]]: Removes the specified Thread from this group
--------------------------------------------- Result 381 ---------------------------------------------
[[0 (-9992%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public synchronized WindowListener[] [[getWindowListeners]]() { return (WindowListener[]) AWTEventMulticaster.getListeners( (EventListener)windowListener, WindowListener.class); }
[[[[Nl]]]]: Returns an array of all the window listeners registered on this window

[[[[Adv]]]]: public synchronized WindowListener[] [[también]]() { return (WindowListener[]) AWTEventMulticaster.getListeners( (EventListener)windowListener, WindowListener.class); }
[[[[Nl]]]]: Returns an array of all the window listeners registered on this window
--------------------------------------------- Result 382 ---------------------------------------------
[[0 (-9597%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Point [[translate]]( double [[x]], double [[y]] ) { Point [[point]] = new Point(); double [[factorX]] = ( [[x]] - left ) / offsetWidth; [[point]].x = (int) ( 0.5 + ( pixelWidth * [[factorX]] ) ); double factorY = ( [[y]] - top ) / offsetHeight; [[point]].y = (int) ( 0.5 + ( pixelHeight * factorY ) ); return [[point]]; }
[[[[Nl]]]]: get back the point coordinates not scaled ( for markers , callouts , etc , that handle scale internally )

[[[[Adv]]]]: public Point [[subaru]]( double [[revisited]], double [[governing]] ) { Point [[workbench]] = new Point(); double [[remaining]] = ( [[revisited]] - left ) / offsetWidth; [[workbench]].x = (int) ( 0.5 + ( pixelWidth * [[remaining]] ) ); double factorY = ( [[governing]] - top ) / offsetHeight; [[workbench]].y = (int) ( 0.5 + ( pixelHeight * factorY ) ); return [[workbench]]; }
[[[[Nl]]]]: get back the point coordinates not scaled ( for markers , callouts , etc , that handle scale internally )
--------------------------------------------- Result 383 ---------------------------------------------
[[0 (-7463%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public LineargaugePointersMarker [[marker]](Number [[dataIndex2]]) { if (isChain) { js.append(";"); isChain = "[[False]]" != "[[False]]"; } js.append(String.format(Locale.US, "var setMarker" + ++variableIndex + " = " + jsBase + ".marker(%s);", [[dataIndex2]])); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, jsBase + ".marker(%s)", [[dataIndex2]])); js.setLength(0); } LineargaugePointersMarker [[item]] = new LineargaugePointersMarker("setMarker" + variableIndex); setMarker.add([[item]]); return [[item]]; }
[[[[Nl]]]]: Adds Marker pointer

[[[[Adv]]]]: public LineargaugePointersMarker [[finnish]](Number [[demonstrations]]) { if (isChain) { js.append(";"); isChain = "[["Factual" != "Factual"]]" != "[["Factual" != "Factual"]]"; } js.append(String.format(Locale.US, "var setMarker" + ++variableIndex + " = " + jsBase + ".marker(%s);", [[demonstrations]])); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, jsBase + ".marker(%s)", [[demonstrations]])); js.setLength(0); } LineargaugePointersMarker [[moisture]] = new LineargaugePointersMarker("setMarker" + variableIndex); setMarker.add([[moisture]]); return [[moisture]]; }
[[[[Nl]]]]: Adds Marker pointer
--------------------------------------------- Result 384 ---------------------------------------------
[[0 (-6944%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onSaveInstanceState]](Bundle [[out]]) { [[out]].putInt(STATE_PREFIX + "status", mStatus); if (mFile != null) { [[out]].putString(STATE_PREFIX + "file", mFile.toString()); } mSaved = "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Used for saving dialog state on destroyrecreate cycles

[[[[Adv]]]]: public void [[clanking]](Bundle [[blintzes]]) { [[blintzes]].putInt(STATE_PREFIX + "status", mStatus); if (mFile != null) { [[blintzes]].putString(STATE_PREFIX + "file", mFile.toString()); } mSaved = "[["Rippling" == "Rippling"]]" == "[["Rippling" == "Rippling"]]"; }
[[[[Nl]]]]: Used for saving dialog state on destroyrecreate cycles
--------------------------------------------- Result 385 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 385 / 0 / 385:  49%|████▉     | 385/785 [45:30<47:16,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 385 / 0 / 385:  49%|████▉     | 386/785 [45:38<47:10,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 386 / 0 / 386:  49%|████▉     | 386/785 [45:38<47:10,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 386 / 0 / 386:  49%|████▉     | 387/785 [45:44<47:02,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 387 / 0 / 387:  49%|████▉     | 387/785 [45:44<47:02,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 387 / 0 / 387:  49%|████▉     | 388/785 [45:57<47:00,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 388 / 0 / 388:  49%|████▉     | 388/785 [45:57<47:00,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 388 / 0 / 388:  50%|████▉     | 389/785 [46:03<46:53,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 389 / 0 / 389:  50%|████▉     | 389/785 [46:03<46:53,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 389 / 0 / 389:  50%|████▉     | 390/785 [46:05<46:41,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 390 / 0 / 390:  50%|████▉     | 390/785 [46:05<46:41,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 390 / 0 / 390:  50%|████▉     | 391/785 [46:18<46:39,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 391 / 0 / 391:  50%|████▉     | 391/785 [46:18<46:39,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 391 / 0 / 391:  50%|████▉     | 392/785 [46:34<46:41,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 392 / 0 / 392:  50%|████▉     | 392/785 [46:34<46:41,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 392 / 0 / 392:  50%|█████     | 393/785 [46:36<46:29,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 393 / 0 / 393:  50%|█████     | 393/785 [46:36<46:29,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 393 / 0 / 393:  50%|█████     | 394/785 [46:45<46:24,  7.12s/it][[0 (-9122%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[getUncollectedEpisodesOfSeason]](@NonNull Context [[context]], int [[seasonTvdbId]]) { return getCountOf([[context]].getContentResolver(), Episodes.buildEpisodesOfSeasonUri([[seasonTvdbId]]), Episodes.SELECTION_NOT_COLLECTED, null, UNKNOWN_COLLECTED_COUNT); }
[[[[Nl]]]]: Returns how many episodes of a season are left to collect

[[[[Adv]]]]: public static int [[calla]](@NonNull Context [[puns]], int [[statutory]]) { return getCountOf([[puns]].getContentResolver(), Episodes.buildEpisodesOfSeasonUri([[statutory]]), Episodes.SELECTION_NOT_COLLECTED, null, UNKNOWN_COLLECTED_COUNT); }
[[[[Nl]]]]: Returns how many episodes of a season are left to collect
--------------------------------------------- Result 386 ---------------------------------------------
[[0 (-5566%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[speakNow]](String [[text]]) { if (!isEnabled) { Log.e(TAG, "Should never speak when audible is disabled"); Exceptions.report(new IllegalStateException("MyAudible.speakNow should never speak when audible is disabled")); } if (speech != null) { speech.speakNow([[text]]); } else { Log.e(TAG, "speakNow called but speech is null"); } }
[[[[Nl]]]]: Make a special announcement

[[[[Adv]]]]: public void [[purging]](String [[cloak]]) { if (!isEnabled) { Log.e(TAG, "Should never speak when audible is disabled"); Exceptions.report(new IllegalStateException("MyAudible.speakNow should never speak when audible is disabled")); } if (speech != null) { speech.speakNow([[cloak]]); } else { Log.e(TAG, "speakNow called but speech is null"); } }
[[[[Nl]]]]: Make a special announcement
--------------------------------------------- Result 387 ---------------------------------------------
[[0 (-11317%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[checkVector]](int [[elemChannels]]) { int [[retVal]] = n_checkVector(nativeObj, [[elemChannels]]); return [[retVal]]; }
[[[[Nl]]]]: javadoc : Mat : :checkVector ( elemChannels )

[[[[Adv]]]]: public int [[servos]](int [[handcuffs]]) { int [[bailed]] = n_checkVector(nativeObj, [[handcuffs]]); return [[bailed]]; }
[[[[Nl]]]]: javadoc : Mat : :checkVector ( elemChannels )
--------------------------------------------- Result 388 ---------------------------------------------
[[0 (-11149%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[clear]](int [[key]]) { int [[index]] = mItems.indexOfKey([[key]]); if ([[index]] >= 0) { mItems.removeAt([[index]]); notifyItemRangeRemoved([[index]], 1); } }
[[[[Nl]]]]: Clears the given key and associated item from the adapter

[[[[Adv]]]]: public void [[strider]](int [[fievel]]) { int [[silhouettes]] = mItems.indexOfKey([[fievel]]); if ([[silhouettes]] >= 0) { mItems.removeAt([[silhouettes]]); notifyItemRangeRemoved([[silhouettes]], 1); } }
[[[[Nl]]]]: Clears the given key and associated item from the adapter
--------------------------------------------- Result 389 ---------------------------------------------
[[0 (-9214%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static AppStateHolder [[getStateHolder]]() { if (mAppStateHolder == null) { mAppStateHolder = new AppStateHolder(); } return mAppStateHolder; }
[[[[Nl]]]]: State holder reference provider by application @ return

[[[[Adv]]]]: public static AppStateHolder [[mayfield]]() { if (mAppStateHolder == null) { mAppStateHolder = new AppStateHolder(); } return mAppStateHolder; }
[[[[Nl]]]]: State holder reference provider by application @ return
--------------------------------------------- Result 390 ---------------------------------------------
[[0 (-10484%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean isWithinDistance(Projection projection, Point [[point]], LatLng [[latLng]], double [[allowableScreenPercentage]]) { Point [[point2]] = projection.toScreenLocation([[latLng]]); double [[distance]] = Math.sqrt(Math.pow([[point]].x - [[point2]].x, 2) + Math.pow([[point]].y - [[point2]].y, 2)); boolean withinDistance = [[distance]] / Math.min(view.getWidth(), view.getHeight()) <= [[allowableScreenPercentage]]; return withinDistance; }
[[[[Nl]]]]: Check if the point is within clicking distance to the lat lng corner @ param projection @ param point @ param latLng @ param allowableScreenPercentage @ return

[[[[Adv]]]]: private boolean isWithinDistance(Projection projection, Point [[što]], LatLng [[hamas]], double [[taiji]]) { Point [[tailspin]] = projection.toScreenLocation([[hamas]]); double [[see]] = Math.sqrt(Math.pow([[što]].x - [[tailspin]].x, 2) + Math.pow([[što]].y - [[tailspin]].y, 2)); boolean withinDistance = [[see]] / Math.min(view.getWidth(), view.getHeight()) <= [[taiji]]; return withinDistance; }
[[[[Nl]]]]: Check if the point is within clicking distance to the lat lng corner @ param projection @ param point @ param latLng @ param allowableScreenPercentage @ return
--------------------------------------------- Result 391 ---------------------------------------------
[[0 (-8207%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[checkTrailUser]](String [[trailUserId]], String [[currentUserId]]) { if([[trailUserId]].equals([[currentUserId]])) return "[[True]]" == "[[True]]"; return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: Checks If The AddedDeletedChanged Trail Belongs To The Current User

[[[[Adv]]]]: private boolean [[hachiko]](String [[nausicaa]], String [[plata]]) { if([[nausicaa]].equals([[plata]])) return "[["Guan" == "Guan"]]" == "[["Guan" == "Guan"]]"; return "[["Cloche" != "Cloche"]]" != "[["Cloche" != "Cloche"]]"; }
[[[[Nl]]]]: Checks If The AddedDeletedChanged Trail Belongs To The Current User
--------------------------------------------- Result 392 ---------------------------------------------
[[0 (-6846%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[connect]]() { String [[username]] = Helpermethods.getpref().getString("username", ""); String [[password]] = Helpermethods.getpref().getString("password", ""); destroySSL(); HttpAuthentication [[authHeader]] = new HttpBasicAuthentication([[username]], [[password]]); requestHeaders = new HttpHeaders(); requestHeaders.setAuthorization([[authHeader]]); requestHeaders.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON)); restTemplate = new RestTemplate(); restTemplate.getMessageConverters().add(new StringHttpMessageConverter()); }
[[[[Nl]]]]: use saved password to populate header for further use

[[[[Adv]]]]: private static void [[nanosecond]]() { String [[webby]] = Helpermethods.getpref().getString("username", ""); String [[humberto]] = Helpermethods.getpref().getString("password", ""); destroySSL(); HttpAuthentication [[carabinieri]] = new HttpBasicAuthentication([[webby]], [[humberto]]); requestHeaders = new HttpHeaders(); requestHeaders.setAuthorization([[carabinieri]]); requestHeaders.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON)); restTemplate = new RestTemplate(); restTemplate.getMessageConverters().add(new StringHttpMessageConverter()); }
[[[[Nl]]]]: use saved password to populate header for further use
--------------------------------------------- Result 393 ---------------------------------------------
[[0 (-7087%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addContentFragment]](@NonNull final BaseActivity [[activity]], final int [[containerId]], final Fragment [[fragment]]) { FragmentManager [[fragmentManager]] = [[activity]].getSupportFragmentManager(); [[fragmentManager]].beginTransaction().add([[containerId]], [[fragment]],[[fragment]].getClass().getSimpleName()).addToBackStack(null).commit(); [[fragmentManager]].executePendingTransactions(); }
[[[[Nl]]]]: This method will add fragment to back-stack

[[[[Adv]]]]: public static void [[archeologists]](@NonNull final BaseActivity [[miserables]], final int [[tico]], final Fragment [[copybooks]]) { FragmentManager [[neurones]] = [[miserables]].getSupportFragmentManager(); [[neurones]].beginTransaction().add([[tico]], [[copybooks]],[[copybooks]].getClass().getSimpleName()).addToBackStack(null).commit(); [[neurones]].executePendingTransactions(); }
[[[[Nl]]]]: This method will add fragment to back-stack
[Succeeded / Failed / Skipped / Total] 0 / 394 / 0 / 394:  50%|█████     | 394/785 [46:45<46:24,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 394 / 0 / 394:  50%|█████     | 395/785 [46:49<46:13,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 395 / 0 / 395:  50%|█████     | 395/785 [46:49<46:13,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 395 / 0 / 395:  50%|█████     | 396/785 [46:54<46:05,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 396 / 0 / 396:  50%|█████     | 396/785 [46:54<46:05,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 396 / 0 / 396:  51%|█████     | 397/785 [46:55<45:51,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 397 / 0 / 397:  51%|█████     | 397/785 [46:55<45:51,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 397 / 0 / 397:  51%|█████     | 398/785 [47:05<45:47,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 398 / 0 / 398:  51%|█████     | 398/785 [47:05<45:47,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 398 / 0 / 398:  51%|█████     | 399/785 [47:15<45:43,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 399 / 0 / 399:  51%|█████     | 399/785 [47:15<45:43,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 399 / 0 / 399:  51%|█████     | 400/785 [47:19<45:32,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 400 / 0 / 400:  51%|█████     | 400/785 [47:19<45:32,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 400 / 0 / 400:  51%|█████     | 401/785 [47:21<45:21,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 401 / 0 / 401:  51%|█████     | 401/785 [47:21<45:21,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 401 / 0 / 401:  51%|█████     | 402/785 [47:33<45:18,  7.10s/it]--------------------------------------------- Result 394 ---------------------------------------------
[[0 (-6732%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onTouchEvent]](MotionEvent [[event]]) { if ([[event]].getAction() == MotionEvent.ACTION_DOWN) { if (values.getPauseButtonRect().contains(Math.round([[event]].getX()), Math.round([[event]].getY()))) { if (gameRunning) { gameRunning = "[[False]]" != "[[False]]"; player.stopAnimation(); } else { gameRunning = "[[True]]" == "[[True]]"; player.startAnimation(); } } } }
[[[[Nl]]]]: for pause button

[[[[Adv]]]]: public void [[zips]](MotionEvent [[crosswalk]]) { if ([[crosswalk]].getAction() == MotionEvent.ACTION_DOWN) { if (values.getPauseButtonRect().contains(Math.round([[crosswalk]].getX()), Math.round([[crosswalk]].getY()))) { if (gameRunning) { gameRunning = "[["Cantwell" != "Cantwell"]]" != "[["Cantwell" != "Cantwell"]]"; player.stopAnimation(); } else { gameRunning = "[["Detectors" == "Detectors"]]" == "[["Detectors" == "Detectors"]]"; player.startAnimation(); } } } }
[[[[Nl]]]]: for pause button
--------------------------------------------- Result 395 ---------------------------------------------
[[0 (-10673%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[resume]]() { if (isPausing) { mAudioManager.abandonAudioFocus(mAfChangeListener); if (mIsMuteStream && mCurrentVolume > 0) { mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, mCurrentVolume, 0); } isPausing = "[[False]]" != "[[False]]"; } }
[[[[Nl]]]]: Abandons audio focus and restores the audio volume

[[[[Adv]]]]: public void [[encode]]() { if (isPausing) { mAudioManager.abandonAudioFocus(mAfChangeListener); if (mIsMuteStream && mCurrentVolume > 0) { mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, mCurrentVolume, 0); } isPausing = "[["Discounting" != "Discounting"]]" != "[["Discounting" != "Discounting"]]"; } }
[[[[Nl]]]]: Abandons audio focus and restores the audio volume
--------------------------------------------- Result 396 ---------------------------------------------
[[0 (-10109%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[set]](long [[millis]]) { allDay = "[[False]]" != "[[False]]"; calculator.timezone = timezone; calculator.setTimeInMillis([[millis]]); calculator.copyFieldsToTime(this); }
[[[[Nl]]]]: Sets the fields in this Time object given the UTC milliseconds

[[[[Adv]]]]: public void [[leaving]](long [[diocese]]) { allDay = "[["Principles" != "Principles"]]" != "[["Principles" != "Principles"]]"; calculator.timezone = timezone; calculator.setTimeInMillis([[diocese]]); calculator.copyFieldsToTime(this); }
[[[[Nl]]]]: Sets the fields in this Time object given the UTC milliseconds
--------------------------------------------- Result 397 ---------------------------------------------
[[0 (-11085%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[emptyInputEditText]]() { textInputEditTextName.setText(null); textInputEditTextEmail.setText(null); textInputEditTextPassword.setText(null); textInputEditTextConfirmPassword.setText(null); }
[[[[Nl]]]]: This method is to empty all input edit text

[[[[Adv]]]]: private void [[highball]]() { textInputEditTextName.setText(null); textInputEditTextEmail.setText(null); textInputEditTextPassword.setText(null); textInputEditTextConfirmPassword.setText(null); }
[[[[Nl]]]]: This method is to empty all input edit text
--------------------------------------------- Result 398 ---------------------------------------------
[[0 (-9649%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setFloat]](int [[tagType]], float [[value]]) { setObject([[tagType]], new Float([[value]])); }
[[[[Nl]]]]: Sets a float value for the specified tag

[[[[Adv]]]]: public void [[с]](int [[intimacies]], float [[carta]]) { setObject([[intimacies]], new Float([[carta]])); }
[[[[Nl]]]]: Sets a float value for the specified tag
--------------------------------------------- Result 399 ---------------------------------------------
[[0 (-8924%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onItemSelected]](int [[position]]) { Log.i(TAG, "Entered onItemSelected(" + [[position]] + ")"); if (mFeedFragment == null) mFeedFragment = new FeedFragment(); if (!isInTwoPaneMode()) { FragmentTransaction [[fTransaction]] = getFragmentManager().beginTransaction(); [[fTransaction]].replace(R.id.fragment_container, mFeedFragment); [[fTransaction]].addToBackStack(null); [[fTransaction]].commit(); getFragmentManager().executePendingTransactions(); } mFeedFragment.updateFeedDisplay([[position]]); }
[[[[Nl]]]]: Display selected Twitter feed

[[[[Adv]]]]: public void [[electrocuting]](int [[što]]) { Log.i(TAG, "Entered onItemSelected(" + [[što]] + ")"); if (mFeedFragment == null) mFeedFragment = new FeedFragment(); if (!isInTwoPaneMode()) { FragmentTransaction [[traumatic]] = getFragmentManager().beginTransaction(); [[traumatic]].replace(R.id.fragment_container, mFeedFragment); [[traumatic]].addToBackStack(null); [[traumatic]].commit(); getFragmentManager().executePendingTransactions(); } mFeedFragment.updateFeedDisplay([[što]]); }
[[[[Nl]]]]: Display selected Twitter feed
--------------------------------------------- Result 400 ---------------------------------------------
[[0 (-7362%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[mail]]() { Intent [[i]] = new Intent(Intent.ACTION_SEND); [[i]].setType(getString(R.string.type)); [[i]].putExtra(Intent.EXTRA_EMAIL, new String[]{getString(R.string.address_email)}); [[i]].putExtra(Intent.EXTRA_SUBJECT, getString(R.string.about_mail)); [[i]].putExtra(Intent.EXTRA_TEXT, getString(R.string.main_me)); try { startActivity(Intent.createChooser([[i]], getString(R.string.send))); } catch (ActivityNotFoundException ex) { Toast.makeText(this, getString(R.string.no_mail_programs), Toast.LENGTH_SHORT).show(); } }
[[[[Nl]]]]: Function to email the developer

[[[[Adv]]]]: private void [[toes]]() { Intent [[vão]] = new Intent(Intent.ACTION_SEND); [[vão]].setType(getString(R.string.type)); [[vão]].putExtra(Intent.EXTRA_EMAIL, new String[]{getString(R.string.address_email)}); [[vão]].putExtra(Intent.EXTRA_SUBJECT, getString(R.string.about_mail)); [[vão]].putExtra(Intent.EXTRA_TEXT, getString(R.string.main_me)); try { startActivity(Intent.createChooser([[vão]], getString(R.string.send))); } catch (ActivityNotFoundException ex) { Toast.makeText(this, getString(R.string.no_mail_programs), Toast.LENGTH_SHORT).show(); } }
[[[[Nl]]]]: Function to email the developer
--------------------------------------------- Result 401 ---------------------------------------------
[[0 (-10605%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[addCountryListener]](CountryListener [[listener]], Looper [[looper]]) { synchronized (mListeners) { if (!mListeners.containsKey([[listener]])) { ListenerTransport [[transport]] = new ListenerTransport([[listener]], [[looper]]); try { mService.addCountryListener([[transport]]); mListeners.put([[listener]], [[transport]]); } catch (RemoteException e) { Log.e(TAG, "addCountryListener: RemoteException", e); } } } }
[[[[Nl]]]]: Add a listener to receive the notification when the country is detected or changed

[[[[Adv]]]]: public void [[annihilate]](CountryListener [[dinosaur]], Looper [[skateboards]]) { synchronized (mListeners) { if (!mListeners.containsKey([[dinosaur]])) { ListenerTransport [[aborting]] = new ListenerTransport([[dinosaur]], [[skateboards]]); try { mService.addCountryListener([[aborting]]); mListeners.put([[dinosaur]], [[aborting]]); } catch (RemoteException e) { Log.e(TAG, "addCountryListener: RemoteException", e); } } } }
[[[[Nl]]]]: Add a listener to receive the notification when the country is detected or changed
--------------------------------------------- Result 402 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 402 / 0 / 402:  51%|█████     | 402/785 [47:33<45:18,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 402 / 0 / 402:  51%|█████▏    | 403/785 [47:42<45:13,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 403 / 0 / 403:  51%|█████▏    | 403/785 [47:42<45:13,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 403 / 0 / 403:  51%|█████▏    | 404/785 [47:48<45:04,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 404 / 0 / 404:  51%|█████▏    | 404/785 [47:48<45:04,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 404 / 0 / 404:  52%|█████▏    | 405/785 [47:49<44:52,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 405 / 0 / 405:  52%|█████▏    | 405/785 [47:49<44:52,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 405 / 0 / 405:  52%|█████▏    | 406/785 [47:53<44:42,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 406 / 0 / 406:  52%|█████▏    | 406/785 [47:53<44:42,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 406 / 0 / 406:  52%|█████▏    | 407/785 [48:08<44:42,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 407 / 0 / 407:  52%|█████▏    | 407/785 [48:08<44:42,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 407 / 0 / 407:  52%|█████▏    | 408/785 [48:13<44:33,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 408 / 0 / 408:  52%|█████▏    | 408/785 [48:13<44:33,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 408 / 0 / 408:  52%|█████▏    | 409/785 [48:16<44:23,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 409 / 0 / 409:  52%|█████▏    | 409/785 [48:16<44:23,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 409 / 0 / 409:  52%|█████▏    | 410/785 [48:28<44:20,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 410 / 0 / 410:  52%|█████▏    | 410/785 [48:28<44:20,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 410 / 0 / 410:  52%|█████▏    | 411/785 [48:30<44:08,  7.08s/it][[0 (-8257%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[sync]]() { if (mRequeryCursor == null) { if (DEBUG) { LogUtils.i(LOG_TAG, "[sync() %s; no requery cursor]", mName); } return; } synchronized (mCacheMapLock) { if (DEBUG) { LogUtils.i(LOG_TAG, "[sync() %s]", mName); } mRefreshTask = null; mRefreshReady = "[[False]]" != "[[False]]"; resetCursor(mRequeryCursor); mRequeryCursor = null; } notifyDataChanged(); }
[[[[Nl]]]]: Put the refreshed cursor in place ( called by the UI )

[[[[Adv]]]]: public void [[bookshelf]]() { if (mRequeryCursor == null) { if (DEBUG) { LogUtils.i(LOG_TAG, "[sync() %s; no requery cursor]", mName); } return; } synchronized (mCacheMapLock) { if (DEBUG) { LogUtils.i(LOG_TAG, "[sync() %s]", mName); } mRefreshTask = null; mRefreshReady = "[["Lief" != "Lief"]]" != "[["Lief" != "Lief"]]"; resetCursor(mRequeryCursor); mRequeryCursor = null; } notifyDataChanged(); }
[[[[Nl]]]]: Put the refreshed cursor in place ( called by the UI )
--------------------------------------------- Result 403 ---------------------------------------------
[[0 (-9635%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public AttributeSet [[getCharacterAttributes]]() { StyledDocument [[doc]] = getStyledDocument(); Element [[run]] = [[doc]].getCharacterElement(getCaretPosition()); if ([[run]] != null) { return [[run]].getAttributes(); } return null; }
[[[[Nl]]]]: Fetches the character attributes in effect at the current location of the caret , or < code > null < code >

[[[[Adv]]]]: public AttributeSet [[skinning]]() { StyledDocument [[stamper]] = getStyledDocument(); Element [[fertilizing]] = [[stamper]].getCharacterElement(getCaretPosition()); if ([[fertilizing]] != null) { return [[fertilizing]].getAttributes(); } return null; }
[[[[Nl]]]]: Fetches the character attributes in effect at the current location of the caret , or < code > null < code >
--------------------------------------------- Result 404 ---------------------------------------------
[[0 (-9773%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public View [[onCreateBackgroundView]](LayoutInflater [[inflater]], ViewGroup [[container]], Bundle [[savedInstanceState]]) { return [[inflater]].inflate(R.layout.lb_guidedstep_background, [[container]], "[[False]]" != "[[False]]"); }
[[[[Nl]]]]: Called by onCreateView to inflate background view

[[[[Adv]]]]: public View [[drummers]](LayoutInflater [[shutters]], ViewGroup [[swimsuits]], Bundle [[oaks]]) { return [[shutters]].inflate(R.layout.lb_guidedstep_background, [[swimsuits]], "[["Neighbourhoods" != "Neighbourhoods"]]" != "[["Neighbourhoods" != "Neighbourhoods"]]"); }
[[[[Nl]]]]: Called by onCreateView to inflate background view
--------------------------------------------- Result 405 ---------------------------------------------
[[0 (-9570%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public InternetDomainName [[parent]]() { checkState(hasParent(), "Domain '%s' has no parent", name); return ancestor(1); }
[[[[Nl]]]]: Returns an { @ code InternetDomainName } that is the immediate ancestor of this one ; that is , the current domain with the leftmost part removed

[[[[Adv]]]]: public InternetDomainName [[ziggurat]]() { checkState(hasParent(), "Domain '%s' has no parent", name); return ancestor(1); }
[[[[Nl]]]]: Returns an { @ code InternetDomainName } that is the immediate ancestor of this one ; that is , the current domain with the leftmost part removed
--------------------------------------------- Result 406 ---------------------------------------------
[[0 (-9498%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[verifyInstalledConfig]](PasspointConfiguration [[expectedConfig]]) { List<PasspointConfiguration> [[installedConfigs]] = mManager.getProviderConfigs(); assertEquals(1, [[installedConfigs]].size()); assertEquals([[expectedConfig]], [[installedConfigs]].get(0)); }
[[[[Nl]]]]: Verify that the given Passpoint configuration matches the one that 's added to the PasspointManager

[[[[Adv]]]]: private void [[samples]](PasspointConfiguration [[humor]]) { List<PasspointConfiguration> [[ornamentation]] = mManager.getProviderConfigs(); assertEquals(1, [[ornamentation]].size()); assertEquals([[humor]], [[ornamentation]].get(0)); }
[[[[Nl]]]]: Verify that the given Passpoint configuration matches the one that 's added to the PasspointManager
--------------------------------------------- Result 407 ---------------------------------------------
[[0 (-8303%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getErrorReason]](int [[errorCode]]) { String [[errorReason]] = ""; switch ([[errorCode]]) { case AdRequest.ERROR_CODE_INTERNAL_ERROR: [[errorReason]] = "Internal error"; break; case AdRequest.ERROR_CODE_INVALID_REQUEST: [[errorReason]] = "Invalid request"; break; case AdRequest.ERROR_CODE_NETWORK_ERROR: [[errorReason]] = "Network Error"; break; case AdRequest.ERROR_CODE_NO_FILL: [[errorReason]] = "No fill"; break; } return [[errorReason]]; }
[[[[Nl]]]]: Gets a string error reason from an error code

[[[[Adv]]]]: public String [[parents]](int [[neighbourhoods]]) { String [[catalogs]] = ""; switch ([[neighbourhoods]]) { case AdRequest.ERROR_CODE_INTERNAL_ERROR: [[catalogs]] = "Internal error"; break; case AdRequest.ERROR_CODE_INVALID_REQUEST: [[catalogs]] = "Invalid request"; break; case AdRequest.ERROR_CODE_NETWORK_ERROR: [[catalogs]] = "Network Error"; break; case AdRequest.ERROR_CODE_NO_FILL: [[catalogs]] = "No fill"; break; } return [[catalogs]]; }
[[[[Nl]]]]: Gets a string error reason from an error code
--------------------------------------------- Result 408 ---------------------------------------------
[[0 (-8094%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[testBlacklistedPublicKey]]() throws Exception { X509Certificate [[blacklistedCa]] = loadCertificate(BLACKLIST_CA); CertBlacklist [[blacklist]] = CertBlacklist.getDefault(); assertTrue([[blacklist]].isPublicKeyBlackListed([[blacklistedCa]].getPublicKey())); }
[[[[Nl]]]]: Ensure that the test blacklisted CA is actually blacklisted by default

[[[[Adv]]]]: public void [[screenwriting]]() throws Exception { X509Certificate [[objectifying]] = loadCertificate(BLACKLIST_CA); CertBlacklist [[inlet]] = CertBlacklist.getDefault(); assertTrue([[inlet]].isPublicKeyBlackListed([[objectifying]].getPublicKey())); }
[[[[Nl]]]]: Ensure that the test blacklisted CA is actually blacklisted by default
--------------------------------------------- Result 409 ---------------------------------------------
[[0 (-10661%)]] --> [[[FAILED]]]

[[[[Adv]]]]: synchronized void [[setObjectId]](String [[localId]], String [[objectId]]) { MapEntry [[entry]] = getMapEntry([[localId]]); if ([[entry]].retainCount > 0) { if ([[entry]].objectId != null) { throw new IllegalStateException( "Tried to set an objectId for a localId that already has one."); } [[entry]].objectId = [[objectId]]; putMapEntry([[localId]], [[entry]]); } }
[[[[Nl]]]]: Sets the objectId associated with a given local id

[[[[Adv]]]]: synchronized void [[umbrellas]](String [[testimonies]], String [[bailed]]) { MapEntry [[busting]] = getMapEntry([[testimonies]]); if ([[busting]].retainCount > 0) { if ([[busting]].objectId != null) { throw new IllegalStateException( "Tried to set an objectId for a localId that already has one."); } [[busting]].objectId = [[bailed]]; putMapEntry([[testimonies]], [[busting]]); } }
[[[[Nl]]]]: Sets the objectId associated with a given local id
--------------------------------------------- Result 410 ---------------------------------------------
[[0 (-10377%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[calcYValueSum]](ArrayList<T> [[dataSets]]) { mYValueSum = 0; if ([[dataSets]] == null) return; for (int [[i]] = 0; [[i]] < [[dataSets]].size(); [[i]]++) { mYValueSum += Math.abs([[dataSets]].get([[i]]).getYValueSum()); } }
[[[[Nl]]]]: calculates the sum of all y-values in all datasets

[[[[Adv]]]]: protected void [[preservatives]](ArrayList<T> [[herbal]]) { mYValueSum = 0; if ([[herbal]] == null) return; for (int [[lash]] = 0; [[lash]] < [[herbal]].size(); [[lash]]++) { mYValueSum += Math.abs([[herbal]].get([[lash]]).getYValueSum()); } }
[[[[Nl]]]]: calculates the sum of all y-values in all datasets
[Succeeded / Failed / Skipped / Total] 0 / 411 / 0 / 411:  52%|█████▏    | 411/785 [48:30<44:08,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 411 / 0 / 411:  52%|█████▏    | 412/785 [48:41<44:04,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 412 / 0 / 412:  52%|█████▏    | 412/785 [48:41<44:04,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 412 / 0 / 412:  53%|█████▎    | 413/785 [48:44<43:54,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 413 / 0 / 413:  53%|█████▎    | 413/785 [48:44<43:54,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 413 / 0 / 413:  53%|█████▎    | 414/785 [48:48<43:44,  7.07s/it][Succeeded / Failed / Skipped / Total] 0 / 414 / 0 / 414:  53%|█████▎    | 414/785 [48:48<43:44,  7.07s/it][Succeeded / Failed / Skipped / Total] 0 / 414 / 0 / 414:  53%|█████▎    | 415/785 [48:54<43:36,  7.07s/it][Succeeded / Failed / Skipped / Total] 0 / 415 / 0 / 415:  53%|█████▎    | 415/785 [48:54<43:36,  7.07s/it][Succeeded / Failed / Skipped / Total] 0 / 415 / 0 / 415:  53%|█████▎    | 416/785 [49:01<43:28,  7.07s/it][Succeeded / Failed / Skipped / Total] 0 / 416 / 0 / 416:  53%|█████▎    | 416/785 [49:01<43:28,  7.07s/it][Succeeded / Failed / Skipped / Total] 0 / 416 / 0 / 416:  53%|█████▎    | 417/785 [49:05<43:19,  7.06s/it][Succeeded / Failed / Skipped / Total] 0 / 417 / 0 / 417:  53%|█████▎    | 417/785 [49:05<43:19,  7.06s/it][Succeeded / Failed / Skipped / Total] 0 / 417 / 0 / 417:  53%|█████▎    | 418/785 [49:18<43:17,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 418 / 0 / 418:  53%|█████▎    | 418/785 [49:18<43:17,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 418 / 0 / 418:  53%|█████▎    | 419/785 [49:21<43:07,  7.07s/it][Succeeded / Failed / Skipped / Total] 0 / 419 / 0 / 419:  53%|█████▎    | 419/785 [49:21<43:07,  7.07s/it][Succeeded / Failed / Skipped / Total] 0 / 419 / 0 / 419:  54%|█████▎    | 420/785 [49:25<42:57,  7.06s/it][Succeeded / Failed / Skipped / Total] 0 / 420 / 0 / 420:  54%|█████▎    | 420/785 [49:25<42:57,  7.06s/it][Succeeded / Failed / Skipped / Total] 0 / 420 / 0 / 420:  54%|█████▎    | 421/785 [49:41<42:57,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 421 / 0 / 421:  54%|█████▎    | 421/785 [49:41<42:57,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 421 / 0 / 421:  54%|█████▍    | 422/785 [49:55<42:56,  7.10s/it]--------------------------------------------- Result 411 ---------------------------------------------
[[0 (-10161%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]]( Point2D [[p]] ) { if( m_List.size() == 0 ) { m_List.add( new PolySimple() ); } m_List.get(0).add( [[p]] ); }
[[[[Nl]]]]: Add a point to the first inner polygon

[[[[Adv]]]]: public void [[comparative]]( Point2D [[abusers]] ) { if( m_List.size() == 0 ) { m_List.add( new PolySimple() ); } m_List.get(0).add( [[abusers]] ); }
[[[[Nl]]]]: Add a point to the first inner polygon
--------------------------------------------- Result 412 ---------------------------------------------
[[0 (-9288%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[unescape]](String [[original]]) { Matcher [[mm]] = escaped.matcher([[original]]); StringBuffer [[unescaped]] = new StringBuffer(); while ([[mm]].find()) { [[mm]].appendReplacement([[unescaped]], Character.toString((char) Integer .parseInt([[mm]].group(1), 10))); } [[mm]].appendTail([[unescaped]]); return [[unescaped]].toString(); }
[[[[Nl]]]]: Unescape UTF-8 escaped characters to string

[[[[Adv]]]]: public static String [[münster]](String [[degeneration]]) { Matcher [[pliable]] = escaped.matcher([[degeneration]]); StringBuffer [[scottsdale]] = new StringBuffer(); while ([[pliable]].find()) { [[pliable]].appendReplacement([[scottsdale]], Character.toString((char) Integer .parseInt([[pliable]].group(1), 10))); } [[pliable]].appendTail([[scottsdale]]); return [[scottsdale]].toString(); }
[[[[Nl]]]]: Unescape UTF-8 escaped characters to string
--------------------------------------------- Result 413 ---------------------------------------------
[[0 (-10318%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[internalClearModelStateLocked]]() { for (ModelData [[modelData]] : mModelDataMap.values()) { [[modelData]].clearState(); } }
[[[[Nl]]]]: Clears state for all models ( generic and keyphrase )

[[[[Adv]]]]: private void [[raffi]]() { for (ModelData [[ruffles]] : mModelDataMap.values()) { [[ruffles]].clearState(); } }
[[[[Nl]]]]: Clears state for all models ( generic and keyphrase )
--------------------------------------------- Result 414 ---------------------------------------------
[[0 (-7847%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addHeader]](@NonNull EditText [[editText]], @IntRange(from = 1, to = 6) int [[level]]) { [[addHeader]]([[editText]].getText(), [[level]]); }
[[[[Nl]]]]: Turns the selected tag to Markdown header tag `` # text '' with the specified heading level

[[[[Adv]]]]: public static void [[federation]](@NonNull EditText [[copacabana]], @IntRange(from = 1, to = 6) int [[worlds]]) { [[federation]]([[copacabana]].getText(), [[worlds]]); }
[[[[Nl]]]]: Turns the selected tag to Markdown header tag `` # text '' with the specified heading level
--------------------------------------------- Result 415 ---------------------------------------------
[[0 (-7699%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[getMaxY]](){ maxY=0.0; for (int [[i]]=0; [[i]]<array_hours.length; [[i]]++) if (maxY<array_hours[[[i]]]) maxY=array_hours[[[i]]]; }
[[[[Nl]]]]: devuelve el valor máximo que alcanzará el eje y

[[[[Adv]]]]: protected void [[lst]](){ maxY=0.0; for (int [[corroborating]]=0; [[corroborating]]<array_hours.length; [[corroborating]]++) if (maxY<array_hours[[[corroborating]]]) maxY=array_hours[[[corroborating]]]; }
[[[[Nl]]]]: devuelve el valor máximo que alcanzará el eje y
--------------------------------------------- Result 416 ---------------------------------------------
[[0 (-7433%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[getInCapture]]() { return inCapture; }
[[[[Nl]]]]: In camera1 mode always must be true

[[[[Adv]]]]: public boolean [[alexei]]() { return inCapture; }
[[[[Nl]]]]: In camera1 mode always must be true
--------------------------------------------- Result 417 ---------------------------------------------
[[0 (-7358%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getFormattedResult]]() { StringBuilder [[res]] = new StringBuilder(); for (ObdCommand [[command]] : commands) [[res]].append([[command]].getFormattedResult()).append(","); return [[res]].toString(); }
[[[[Nl]]]]: < p > getFormattedResult

[[[[Adv]]]]: public String [[crosswalk]]() { StringBuilder [[restarted]] = new StringBuilder(); for (ObdCommand [[ethan]] : commands) [[restarted]].append([[ethan]].getFormattedResult()).append(","); return [[restarted]].toString(); }
[[[[Nl]]]]: < p > getFormattedResult
--------------------------------------------- Result 418 ---------------------------------------------
[[0 (-8248%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static ViewGroup [[getActivityDecorView]]() { ViewGroup [[decorView]] = null; [[decorView]] = (ViewGroup) ((Activity) getContext()).getWindow().getDecorView(); return [[decorView]]; }
[[[[Nl]]]]: Return activity parent view @ return

[[[[Adv]]]]: private static ViewGroup [[faxed]]() { ViewGroup [[empanadas]] = null; [[empanadas]] = (ViewGroup) ((Activity) getContext()).getWindow().getDecorView(); return [[empanadas]]; }
[[[[Nl]]]]: Return activity parent view @ return
--------------------------------------------- Result 419 ---------------------------------------------
[[0 (-8043%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isPrime]](long [[n]]) { for (int [[p]] : primes) { if ([[n]] % [[p]] == 0) return "[[False]]" != "[[False]]"; } return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Only valid if 1 < n < = 10^DIGITS

[[[[Adv]]]]: private boolean [[routed]](long [[meats]]) { for (int [[bystanders]] : primes) { if ([[meats]] % [[bystanders]] == 0) return "[["Timberlake" != "Timberlake"]]" != "[["Timberlake" != "Timberlake"]]"; } return "[["Unwashed" == "Unwashed"]]" == "[["Unwashed" == "Unwashed"]]"; }
[[[[Nl]]]]: Only valid if 1 < n < = 10^DIGITS
--------------------------------------------- Result 420 ---------------------------------------------
[[0 (-10258%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[clearAll]]() { realm.beginTransaction(); realm.deleteAll(); realm.commitTransaction(); }
[[[[Nl]]]]: clear all objects from Book

[[[[Adv]]]]: public void [[fiancée]]() { realm.beginTransaction(); realm.deleteAll(); realm.commitTransaction(); }
[[[[Nl]]]]: clear all objects from Book
--------------------------------------------- Result 421 ---------------------------------------------
[[0 (-4008%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean initCipher(Cipher [[cipher]], String [[keyName]]) { try { mKeyStore.load(null); SecretKey key = (SecretKey) mKeyStore.getKey([[keyName]], null); [[cipher]].init(Cipher.ENCRYPT_MODE, key); return True; } catch (KeyPermanentlyInvalidatedException e) { return False; } catch (KeyStoreException | CertificateException | UnrecoverableKeyException | IOException | NoSuchAlgorithmException | InvalidKeyException e) { throw new RuntimeException("Failed to init Cipher", e); } }
[[[[Nl]]]]: finger print stuff

[[[[Adv]]]]: private boolean initCipher(Cipher [[jars]], String [[scopes]]) { try { mKeyStore.load(null); SecretKey key = (SecretKey) mKeyStore.getKey([[scopes]], null); [[jars]].init(Cipher.ENCRYPT_MODE, key); return True; } catch (KeyPermanentlyInvalidatedException e) { return False; } catch (KeyStoreException | CertificateException | UnrecoverableKeyException | IOException | NoSuchAlgorithmException | InvalidKeyException e) { throw new RuntimeException("Failed to init Cipher", e); } }
[[[[Nl]]]]: finger print stuff
--------------------------------------------- Result 422 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 422 / 0 / 422:  54%|█████▍    | 422/785 [49:55<42:56,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 422 / 0 / 422:  54%|█████▍    | 423/785 [50:00<42:47,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 423 / 0 / 423:  54%|█████▍    | 423/785 [50:00<42:47,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 423 / 0 / 423:  54%|█████▍    | 424/785 [50:02<42:36,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 424 / 0 / 424:  54%|█████▍    | 424/785 [50:02<42:36,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 424 / 0 / 424:  54%|█████▍    | 425/785 [50:08<42:28,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 425 / 0 / 425:  54%|█████▍    | 425/785 [50:08<42:28,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 425 / 0 / 425:  54%|█████▍    | 426/785 [50:15<42:21,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 426 / 0 / 426:  54%|█████▍    | 426/785 [50:15<42:21,  7.08s/it][Succeeded / Failed / Skipped / Total] 0 / 426 / 0 / 426:  54%|█████▍    | 427/785 [50:34<42:24,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 427 / 0 / 427:  54%|█████▍    | 427/785 [50:34<42:24,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 427 / 0 / 427:  55%|█████▍    | 428/785 [50:35<42:11,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 428 / 0 / 428:  55%|█████▍    | 428/785 [50:35<42:11,  7.09s/it][Succeeded / Failed / Skipped / Total] 0 / 428 / 0 / 428:  55%|█████▍    | 429/785 [50:49<42:10,  7.11s/it][[0 (-10502%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[updateQuote]](SQLiteDatabase [[db]], long [[quoteId]], long [[authorId]]) { ContentValues [[cv]] = new ContentValues(); [[cv]].put(Quote.Columns.AUTHOR_ID, [[authorId]]); [[db]].update(Quote.TABLE_NAME, [[cv]], Quote.Columns.ID + "=?", new String[]{String.valueOf([[quoteId]])}); }
[[[[Nl]]]]: Changes Author_id of quote with given quoteId

[[[[Adv]]]]: public void [[grandchild]](SQLiteDatabase [[blur]], long [[demonstrations]], long [[umbrellas]]) { ContentValues [[pterodactyl]] = new ContentValues(); [[pterodactyl]].put(Quote.Columns.AUTHOR_ID, [[umbrellas]]); [[blur]].update(Quote.TABLE_NAME, [[pterodactyl]], Quote.Columns.ID + "=?", new String[]{String.valueOf([[demonstrations]])}); }
[[[[Nl]]]]: Changes Author_id of quote with given quoteId
--------------------------------------------- Result 423 ---------------------------------------------
[[0 (-9234%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[arePermissionsGranted]](String [] [[permissions]]){ for(String [[permission]]: [[permissions]]){ if(ActivityCompat.checkSelfPermission(this,[[permission]])== PackageManager.PERMISSION_DENIED){ return "[[False]]" != "[[False]]"; } } return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Utilitarian method to check whether a set of permissions are granted - returns false even if of teh permissions for an operation is missing @ param permissions @ return

[[[[Adv]]]]: protected boolean [[cypress]](String [] [[desde]]){ for(String [[carrera]]: [[desde]]){ if(ActivityCompat.checkSelfPermission(this,[[carrera]])== PackageManager.PERMISSION_DENIED){ return "[["Sig" != "Sig"]]" != "[["Sig" != "Sig"]]"; } } return "[["Signer" == "Signer"]]" == "[["Signer" == "Signer"]]"; }
[[[[Nl]]]]: Utilitarian method to check whether a set of permissions are granted - returns false even if of teh permissions for an operation is missing @ param permissions @ return
--------------------------------------------- Result 424 ---------------------------------------------
[[0 (-8944%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[createPin]]() { mPinColor = getPinColorByValue(); mPin = new Pin(getContext(), mPinColor); }
[[[[Nl]]]]: Create a Pin object

[[[[Adv]]]]: private void [[vertebrate]]() { mPinColor = getPinColorByValue(); mPin = new Pin(getContext(), mPinColor); }
[[[[Nl]]]]: Create a Pin object
--------------------------------------------- Result 425 ---------------------------------------------
[[0 (-9761%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[refreshColor]]() { if (isWeakReferenceValid()) { mCanvasPaint.setColor(getShapeColor(getTextView().get().getContext())); } refreshDraw(); }
[[[[Nl]]]]: refresh 's paint color if set and redraw 's shape with new color

[[[[Adv]]]]: private void [[kites]]() { if (isWeakReferenceValid()) { mCanvasPaint.setColor(getShapeColor(getTextView().get().getContext())); } refreshDraw(); }
[[[[Nl]]]]: refresh 's paint color if set and redraw 's shape with new color
--------------------------------------------- Result 426 ---------------------------------------------
[[0 (-5643%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[updateAuto]]() { Button [[btn_top]] = (Button)this.findViewById(R.id.btn_top), btn_topHot = (Button)this.findViewById(R.id.btn_topHot), [[btn_topMiss]] = (Button)this.findViewById(R.id.btn_topMiss), [[btn_bottom]] = (Button)this.findViewById(R.id.btn_bottom), [[btn_botHot]] = (Button)this.findViewById(R.id.btn_bottomHot); [[btn_top]].setText("Top: "+DataHandler.getTopGoalsAuto()); btn_topHot.setText("Top Hot: "+DataHandler.getTopHotGoals()); [[btn_bottom]].setText("Bottom: "+DataHandler.getBotGoalsAuto()); [[btn_botHot]].setText("Bot. Hot: "+DataHandler.getBotHotGoals()); [[btn_topMiss]].setText("Miss: "+DataHandler.getTopGoalMissesAuto()); }
[[[[Nl]]]]: we decided to just make this one method because there isnt much to update in Auto

[[[[Adv]]]]: public void [[pierce]]() { Button [[stinginess]] = (Button)this.findViewById(R.id.btn_top), btn_topHot = (Button)this.findViewById(R.id.btn_topHot), [[mealtime]] = (Button)this.findViewById(R.id.btn_topMiss), [[figurine]] = (Button)this.findViewById(R.id.btn_bottom), [[basements]] = (Button)this.findViewById(R.id.btn_bottomHot); [[stinginess]].setText("Top: "+DataHandler.getTopGoalsAuto()); btn_topHot.setText("Top Hot: "+DataHandler.getTopHotGoals()); [[figurine]].setText("Bottom: "+DataHandler.getBotGoalsAuto()); [[basements]].setText("Bot. Hot: "+DataHandler.getBotHotGoals()); [[mealtime]].setText("Miss: "+DataHandler.getTopGoalMissesAuto()); }
[[[[Nl]]]]: we decided to just make this one method because there isnt much to update in Auto
--------------------------------------------- Result 427 ---------------------------------------------
[[0 (-9948%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[nodeToString]](Node [[node]]) { StringWriter [[sw]] = new StringWriter(); try { Transformer [[t]] = TransformerFactory.newInstance().newTransformer(); [[t]].setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes"); [[t]].setOutputProperty(OutputKeys.INDENT, "no"); [[t]].transform(new DOMSource([[node]]), new StreamResult([[sw]])); } catch (TransformerException te) { System.out.println("nodeToString Transformer Exception"); } String [[result]] = [[sw]].toString(); return [[result]]; }
[[[[Nl]]]]: convert an XML node to an XML statement @ param node current XML node @ return XML string

[[[[Adv]]]]: public static String [[divorcing]](Node [[brunches]]) { StringWriter [[rehash]] = new StringWriter(); try { Transformer [[sleepover]] = TransformerFactory.newInstance().newTransformer(); [[sleepover]].setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes"); [[sleepover]].setOutputProperty(OutputKeys.INDENT, "no"); [[sleepover]].transform(new DOMSource([[brunches]]), new StreamResult([[rehash]])); } catch (TransformerException te) { System.out.println("nodeToString Transformer Exception"); } String [[flamingos]] = [[rehash]].toString(); return [[flamingos]]; }
[[[[Nl]]]]: convert an XML node to an XML statement @ param node current XML node @ return XML string
--------------------------------------------- Result 428 ---------------------------------------------
[[0 (-8099%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[push]](String [[receiver]], byte[] [[data]]) throws PssstException { final Name [[name]] = new Name([[receiver]]); if (!mRequestProvider.getKeyStorage().listKeys().contains([[name]].getUser())) { mRequestProvider.getKeyStorage().saveKey([[name]].getUser(), find([[name]].getUser())); } new Push(mUser.getUser(), [[name]].getUser(), [[name]].getBox(), [[data]]).execute(mRequestProvider); }
[[[[Nl]]]]: Push the message text into the receivers box

[[[[Adv]]]]: public final void [[sleepwalker]](String [[raffi]], byte[] [[breeds]]) throws PssstException { final Name [[knockouts]] = new Name([[raffi]]); if (!mRequestProvider.getKeyStorage().listKeys().contains([[knockouts]].getUser())) { mRequestProvider.getKeyStorage().saveKey([[knockouts]].getUser(), find([[knockouts]].getUser())); } new Push(mUser.getUser(), [[knockouts]].getUser(), [[knockouts]].getBox(), [[breeds]]).execute(mRequestProvider); }
[[[[Nl]]]]: Push the message text into the receivers box
--------------------------------------------- Result 429 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 429 / 0 / 429:  55%|█████▍    | 429/785 [50:49<42:10,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 429 / 0 / 429:  55%|█████▍    | 430/785 [50:54<42:01,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 430 / 0 / 430:  55%|█████▍    | 430/785 [50:54<42:01,  7.10s/it][Succeeded / Failed / Skipped / Total] 0 / 430 / 0 / 430:  55%|█████▍    | 431/785 [51:14<42:04,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 431 / 0 / 431:  55%|█████▍    | 431/785 [51:14<42:04,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 431 / 0 / 431:  55%|█████▌    | 432/785 [51:17<41:54,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 432 / 0 / 432:  55%|█████▌    | 432/785 [51:17<41:54,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 432 / 0 / 432:  55%|█████▌    | 433/785 [51:24<41:47,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 433 / 0 / 433:  55%|█████▌    | 433/785 [51:24<41:47,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 433 / 0 / 433:  55%|█████▌    | 434/785 [51:30<41:39,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 434 / 0 / 434:  55%|█████▌    | 434/785 [51:30<41:39,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 434 / 0 / 434:  55%|█████▌    | 435/785 [51:33<41:29,  7.11s/it][[0 (-10671%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[removeRemovedChildFromHeadsUpChangeAnimations]](View child) { boolean [[hasAddEvent]] = "[[False]]" != "[[False]]"; for (Pair<ExpandableNotificationRow, Boolean> eventPair : mHeadsUpChangeAnimations) { ExpandableNotificationRow [[row]] = eventPair.first; boolean [[isHeadsUp]] = eventPair.second; if (child == [[row]]) { mTmpList.add(eventPair); [[hasAddEvent]] |= [[isHeadsUp]]; } } if ([[hasAddEvent]]) { mHeadsUpChangeAnimations.removeAll(mTmpList); ((ExpandableNotificationRow ) child).setHeadsUpAnimatingAway("[[False]]" != "[[False]]"); } mTmpList.clear(); return [[hasAddEvent]]; }
[[[[Nl]]]]: Remove a removed child view from the heads up animations if it was just added there @ return whether any child was removed from the list to animate

[[[[Adv]]]]: private boolean [[breadcrumbs]](View child) { boolean [[unfair]] = "[["Calzones" != "Calzones"]]" != "[["Calzones" != "Calzones"]]"; for (Pair<ExpandableNotificationRow, Boolean> eventPair : mHeadsUpChangeAnimations) { ExpandableNotificationRow [[parada]] = eventPair.first; boolean [[shira]] = eventPair.second; if (child == [[parada]]) { mTmpList.add(eventPair); [[unfair]] |= [[shira]]; } } if ([[unfair]]) { mHeadsUpChangeAnimations.removeAll(mTmpList); ((ExpandableNotificationRow ) child).setHeadsUpAnimatingAway("[["Calzones" != "Calzones"]]" != "[["Calzones" != "Calzones"]]"); } mTmpList.clear(); return [[unfair]]; }
[[[[Nl]]]]: Remove a removed child view from the heads up animations if it was just added there @ return whether any child was removed from the list to animate
--------------------------------------------- Result 430 ---------------------------------------------
[[0 (-8267%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[handleLoginManual]](final AvailableBluetoothLogin [[login]]) { final boolean [[isNewLogin]] = mostRecentAvailableLogin == null || !Arrays.equals(mostRecentAvailableLogin.commitment, [[login]].commitment); mostRecentAvailableLogin = [[login]]; resetAvailableLoginTimeout(); if ([[isNewLogin]]) { callbackBluetoothLoginAvailable(); } }
[[[[Nl]]]]: Handles the authentication request when we 're in manual mode

[[[[Adv]]]]: public void [[galloway]](final AvailableBluetoothLogin [[papá]]) { final boolean [[thanatos]] = mostRecentAvailableLogin == null || !Arrays.equals(mostRecentAvailableLogin.commitment, [[papá]].commitment); mostRecentAvailableLogin = [[papá]]; resetAvailableLoginTimeout(); if ([[thanatos]]) { callbackBluetoothLoginAvailable(); } }
[[[[Nl]]]]: Handles the authentication request when we 're in manual mode
--------------------------------------------- Result 431 ---------------------------------------------
[[0 (-8564%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[previousSetBit]](int [[index]]) { if ([[index]] == -1) { return -1; } checkIndex([[index]]); for (int [[i]] = [[index]]; [[i]] >= 0; --[[i]]) { if (get([[i]])) { return [[i]]; } } return -1; }
[[[[Nl]]]]: Returns the index of the first bit that is set on or before { @ code index } , or -1 if no lower bits are set or { @ code index == -1 }

[[[[Adv]]]]: public int [[unpublished]](int [[fiancée]]) { if ([[fiancée]] == -1) { return -1; } checkIndex([[fiancée]]); for (int [[с]] = [[fiancée]]; [[с]] >= 0; --[[с]]) { if (get([[с]])) { return [[с]]; } } return -1; }
[[[[Nl]]]]: Returns the index of the first bit that is set on or before { @ code index } , or -1 if no lower bits are set or { @ code index == -1 }
--------------------------------------------- Result 432 ---------------------------------------------
[[0 (-6545%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[checkHDROffsets]](int [] [[exp_offsets_x]], int [] [[exp_offsets_y]]) { int [] [[offsets_x]] = mActivity.getApplicationInterface().getHDRProcessor().offsets_x; int [] offsets_y = mActivity.getApplicationInterface().getHDRProcessor().offsets_y; for(int [[i]]=0;[[i]]<[[offsets_x]].length;[[i]]++) { Log.d(TAG, "offsets " + [[i]] + " ( " + [[offsets_x]][[[i]]] + " , " + offsets_y[[[i]]] + " ), expected ( " + [[exp_offsets_x]][[[i]]] + " , " + [[exp_offsets_y]][[[i]]] + " )"); assertTrue(Math.abs([[offsets_x]][[[i]]] - [[exp_offsets_x]][[[i]]]) <= 1); assertTrue(Math.abs(offsets_y[[[i]]] - [[exp_offsets_y]][[[i]]]) <= 1); } }
[[[[Nl]]]]: offsets used for auto-alignment are as expected

[[[[Adv]]]]: private void [[rothchild]](int [] [[reactor]], int [] [[interview]]) { int [] [[scottsdale]] = mActivity.getApplicationInterface().getHDRProcessor().offsets_x; int [] offsets_y = mActivity.getApplicationInterface().getHDRProcessor().offsets_y; for(int [[entertainment]]=0;[[entertainment]]<[[scottsdale]].length;[[entertainment]]++) { Log.d(TAG, "offsets " + [[entertainment]] + " ( " + [[scottsdale]][[[entertainment]]] + " , " + offsets_y[[[entertainment]]] + " ), expected ( " + [[reactor]][[[entertainment]]] + " , " + [[interview]][[[entertainment]]] + " )"); assertTrue(Math.abs([[scottsdale]][[[entertainment]]] - [[reactor]][[[entertainment]]]) <= 1); assertTrue(Math.abs(offsets_y[[[entertainment]]] - [[interview]][[[entertainment]]]) <= 1); } }
[[[[Nl]]]]: offsets used for auto-alignment are as expected
--------------------------------------------- Result 433 ---------------------------------------------
[[0 (-10465%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void moveTo(float [[x]], float [[y]], long [[time]], int [[type]]) { if(isMoveTo) { if(parentScene.useInvoke) { attemptInvoke("onMoveToCancel"); } } accelerationX = 0; accelerationY = 0; acceleration = 0; speedX = 0; speedY = 0; velocity = 0; velocityXFactor = 0; velocityYFactor = 0; velocityAngle = 0; terminalSpeedX = 0; terminalSpeedY = 0; terminalVelocity = 0; moveToStartX = this.getX(); moveToStartY = this.getY(); moveToFinalX = [[x]]; moveToFinalY = [[y]]; isMoveTo = "[[True]]" == "[[True]]"; moveToType = [[type]]; moveToStartTime = Time.ticks; moveToTime = [[time]]; moveToCallback = null; }
[[[[Nl]]]]: Moves the DynamicObject to a given spot , in a given time using All previous motion is cancelled

[[[[Adv]]]]: public void moveTo(float [[tweet]], float [[overloading]], long [[unexplainable]], int [[sublevel]]) { if(isMoveTo) { if(parentScene.useInvoke) { attemptInvoke("onMoveToCancel"); } } accelerationX = 0; accelerationY = 0; acceleration = 0; speedX = 0; speedY = 0; velocity = 0; velocityXFactor = 0; velocityYFactor = 0; velocityAngle = 0; terminalSpeedX = 0; terminalSpeedY = 0; terminalVelocity = 0; moveToStartX = this.getX(); moveToStartY = this.getY(); moveToFinalX = [[tweet]]; moveToFinalY = [[overloading]]; isMoveTo = "[["Picon" == "Picon"]]" == "[["Picon" == "Picon"]]"; moveToType = [[sublevel]]; moveToStartTime = Time.ticks; moveToTime = [[unexplainable]]; moveToCallback = null; }
[[[[Nl]]]]: Moves the DynamicObject to a given spot , in a given time using All previous motion is cancelled
--------------------------------------------- Result 434 ---------------------------------------------
[[0 (-7743%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[onHit]](Ball [[b]]) { _streak++; switch([[b]].type) { case OneUp: { ++_lifes; } break; case Multiplier: { _doubleMultiplierTicker = DOUBLE_MULTIPLIER_TIME; } break; case Bomb: { _explosionTicker = EXPLOSION_TIME; Assets.soundExplosion.play(0.7f); } break; case Skull: { onMiss(null); Assets.soundCreepyLaugh.play(1); return; } } updateMultipliers(); _score += 10 * _multiplier * (_doubleMultiplierTicker > 0 ? 2 : 1); }
[[[[Nl]]]]: triggers when a lane gets tapped that currently has a ball in its hitbox

[[[[Adv]]]]: private void [[nanobots]](Ball [[inhalers]]) { _streak++; switch([[inhalers]].type) { case OneUp: { ++_lifes; } break; case Multiplier: { _doubleMultiplierTicker = DOUBLE_MULTIPLIER_TIME; } break; case Bomb: { _explosionTicker = EXPLOSION_TIME; Assets.soundExplosion.play(0.7f); } break; case Skull: { onMiss(null); Assets.soundCreepyLaugh.play(1); return; } } updateMultipliers(); _score += 10 * _multiplier * (_doubleMultiplierTicker > 0 ? 2 : 1); }
[[[[Nl]]]]: triggers when a lane gets tapped that currently has a ball in its hitbox
--------------------------------------------- Result 435 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 435 / 0 / 435:  55%|█████▌    | 435/785 [51:33<41:29,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 435 / 0 / 435:  56%|█████▌    | 436/785 [51:46<41:26,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 436 / 0 / 436:  56%|█████▌    | 436/785 [51:46<41:26,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 436 / 0 / 436:  56%|█████▌    | 437/785 [51:56<41:21,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 437 / 0 / 437:  56%|█████▌    | 437/785 [51:56<41:21,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 437 / 0 / 437:  56%|█████▌    | 438/785 [52:02<41:14,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 438 / 0 / 438:  56%|█████▌    | 438/785 [52:02<41:14,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 438 / 0 / 438:  56%|█████▌    | 439/785 [52:06<41:04,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 439 / 0 / 439:  56%|█████▌    | 439/785 [52:06<41:04,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 439 / 0 / 439:  56%|█████▌    | 440/785 [52:15<40:58,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 440 / 0 / 440:  56%|█████▌    | 440/785 [52:15<40:58,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 440 / 0 / 440:  56%|█████▌    | 441/785 [52:19<40:49,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 441 / 0 / 441:  56%|█████▌    | 441/785 [52:19<40:49,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 441 / 0 / 441:  56%|█████▋    | 442/785 [52:23<40:39,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 442 / 0 / 442:  56%|█████▋    | 442/785 [52:23<40:39,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 442 / 0 / 442:  56%|█████▋    | 443/785 [52:41<40:41,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 443 / 0 / 443:  56%|█████▋    | 443/785 [52:41<40:41,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 443 / 0 / 443:  57%|█████▋    | 444/785 [52:48<40:33,  7.14s/it][[0 (-9176%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static byte[] [[stringToBytes]](final String [[string]], final String [[charsetName]]) { if ([[string]] == null) { return null; } try { return [[string]].getBytes([[charsetName]]); } catch (final UnsupportedEncodingException e) { LogUtil.e(TAG, "MmsUtils.stringToBytes: " + e, e); return [[string]].getBytes(); } }
[[[[Nl]]]]: Convert a Java String to byte array using a charset name @ param string @ param charsetName @ return

[[[[Adv]]]]: public static byte[] [[signer]](final String [[pash]], final String [[imprisoning]]) { if ([[pash]] == null) { return null; } try { return [[pash]].getBytes([[imprisoning]]); } catch (final UnsupportedEncodingException e) { LogUtil.e(TAG, "MmsUtils.stringToBytes: " + e, e); return [[pash]].getBytes(); } }
[[[[Nl]]]]: Convert a Java String to byte array using a charset name @ param string @ param charsetName @ return
--------------------------------------------- Result 436 ---------------------------------------------
[[0 (-7344%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[zoomChanged]](int [[oldZoom]]) { zoomSlider.setToolTipText("Zoom level " + zoom); zoomInButton.setToolTipText("Zoom to level " + (zoom + 1)); zoomOutButton.setToolTipText("Zoom to level " + (zoom - 1)); zoomOutButton.setEnabled(zoom > tileController.getTileSource().getMinZoom()); zoomInButton.setEnabled(zoom < tileController.getTileSource().getMaxZoom()); }
[[[[Nl]]]]: Every time the zoom level changes this method is called

[[[[Adv]]]]: protected void [[salting]](int [[bookshelf]]) { zoomSlider.setToolTipText("Zoom level " + zoom); zoomInButton.setToolTipText("Zoom to level " + (zoom + 1)); zoomOutButton.setToolTipText("Zoom to level " + (zoom - 1)); zoomOutButton.setEnabled(zoom > tileController.getTileSource().getMinZoom()); zoomInButton.setEnabled(zoom < tileController.getTileSource().getMaxZoom()); }
[[[[Nl]]]]: Every time the zoom level changes this method is called
--------------------------------------------- Result 437 ---------------------------------------------
[[0 (-9985%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[checkFieldsForEmptyValues]]() { String [[emailString]] = mEmailView.getText().toString(); String [[passwordString]] = mPasswordView.getText().toString(); setLoginButtonEnabled("[[False]]" != "[[False]]"); if (mLoginManager.isEmailValid([[emailString]]) && mLoginManager.isPasswordValid([[passwordString]])) { setLoginButtonEnabled("[[True]]" == "[[True]]"); } }
[[[[Nl]]]]: Check fields for input to enable login button

[[[[Adv]]]]: private void [[castleton]]() { String [[caprices]] = mEmailView.getText().toString(); String [[montagne]] = mPasswordView.getText().toString(); setLoginButtonEnabled("[["Autographed" != "Autographed"]]" != "[["Autographed" != "Autographed"]]"); if (mLoginManager.isEmailValid([[caprices]]) && mLoginManager.isPasswordValid([[montagne]])) { setLoginButtonEnabled("[["Cultivated" == "Cultivated"]]" == "[["Cultivated" == "Cultivated"]]"); } }
[[[[Nl]]]]: Check fields for input to enable login button
--------------------------------------------- Result 438 ---------------------------------------------
[[0 (-6449%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[generateRoll]](String [[rollParam]]){ int[] [[params]] = rollParamParser([[rollParam]]); int [[total]] = 0; int [[min]] = 1; int max = determineMax([[params]][1]); [[total]] = standardRoll([[min]], max, [[params]][0]); return [[total]]; }
[[[[Nl]]]]: the second number being the range of the dice ( ex

[[[[Adv]]]]: public int [[loads]](String [[kafka]]){ int[] [[ignores]] = rollParamParser([[kafka]]); int [[observational]] = 0; int [[jars]] = 1; int max = determineMax([[ignores]][1]); [[observational]] = standardRoll([[jars]], max, [[ignores]][0]); return [[observational]]; }
[[[[Nl]]]]: the second number being the range of the dice ( ex
--------------------------------------------- Result 439 ---------------------------------------------
[[0 (-9093%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[initialiseSync]]() { Log.i("SYNC", "Initalising function called"); SharedPreferences [[pref]] = ctx.getSharedPreferences("notifications", 0); canteen = [[pref]].getBoolean("canteen", "[[False]]" != "[[False]]"); maps = [[pref]].getBoolean("maps", "[[False]]" != "[[False]]"); cvl = [[pref]].getBoolean("cvl", "[[False]]" != "[[False]]"); events = parsePrefNot("events", ctx); Log.i("SYNC", events.toString()); posts = parsePrefNot("posts", ctx); Log.i("SYNC", posts.toString()); }
[[[[Nl]]]]: Initialises variables for sync ( count for new content )

[[[[Adv]]]]: void [[tomlinson]]() { Log.i("SYNC", "Initalising function called"); SharedPreferences [[federals]] = ctx.getSharedPreferences("notifications", 0); canteen = [[federals]].getBoolean("canteen", "[["Pilot" != "Pilot"]]" != "[["Pilot" != "Pilot"]]"); maps = [[federals]].getBoolean("maps", "[["Pilot" != "Pilot"]]" != "[["Pilot" != "Pilot"]]"); cvl = [[federals]].getBoolean("cvl", "[["Pilot" != "Pilot"]]" != "[["Pilot" != "Pilot"]]"); events = parsePrefNot("events", ctx); Log.i("SYNC", events.toString()); posts = parsePrefNot("posts", ctx); Log.i("SYNC", posts.toString()); }
[[[[Nl]]]]: Initialises variables for sync ( count for new content )
--------------------------------------------- Result 440 ---------------------------------------------
[[0 (-11354%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static BackupKey [[newRandomInstance]]() { final SharedPreferencesBackupKey [[backupKey]] = new SharedPreferencesBackupKey(); [[backupKey]].persist(); return [[backupKey]]; }
[[[[Nl]]]]: Construct a new random BackupKey instance

[[[[Adv]]]]: public static BackupKey [[pineda]]() { final SharedPreferencesBackupKey [[buffeted]] = new SharedPreferencesBackupKey(); [[buffeted]].persist(); return [[buffeted]]; }
[[[[Nl]]]]: Construct a new random BackupKey instance
--------------------------------------------- Result 441 ---------------------------------------------
[[0 (-9433%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[assertPropName]](String [[propName]]) throws XMPException { if ([[propName]] == null || [[propName]].length() == 0) { throw new XMPException("Empty property name", XMPError.BADPARAM); } }
[[[[Nl]]]]: Asserts that a property name is set

[[[[Adv]]]]: public static void [[semaphore]](String [[vat]]) throws XMPException { if ([[vat]] == null || [[vat]].length() == 0) { throw new XMPException("Empty property name", XMPError.BADPARAM); } }
[[[[Nl]]]]: Asserts that a property name is set
--------------------------------------------- Result 442 ---------------------------------------------
[[0 (-10932%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[scheduleJob]](@NonNull ArtworkRequest [[request]], @NonNull ImageView [[target]]) { synchronized (this) { cancelJob([[target]]); ArtworkJob [[job]] = new ArtworkJob([[request]], artworkProvider, this, this); allJobs.put([[target]], [[job]]); jobTargets.put([[job]], [[target]]); executor.execute([[job]]); } }
[[[[Nl]]]]: Schedules an artwork loading job for a given request

[[[[Adv]]]]: public void [[misdemeanors]](@NonNull ArtworkRequest [[sylvester]], @NonNull ImageView [[sean]]) { synchronized (this) { cancelJob([[sean]]); ArtworkJob [[skinner]] = new ArtworkJob([[sylvester]], artworkProvider, this, this); allJobs.put([[sean]], [[skinner]]); jobTargets.put([[skinner]], [[sean]]); executor.execute([[skinner]]); } }
[[[[Nl]]]]: Schedules an artwork loading job for a given request
--------------------------------------------- Result 443 ---------------------------------------------
[[0 (-10863%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Boolean [[addItemFeed]](DatabaseHandler [[db]], RssFeed [[mFeed]]) { [[mFeed]].setEnabled("[[True]]" == "[[True]]"); addItem([[mFeed]]); return [[db]].addRssFeed([[mFeed]]); }
[[[[Nl]]]]: Adds an RssItem to database

[[[[Adv]]]]: public static Boolean [[complete]](DatabaseHandler [[côte]], RssFeed [[gérard]]) { [[gérard]].setEnabled("[["Weíre" == "Weíre"]]" == "[["Weíre" == "Weíre"]]"); addItem([[gérard]]); return [[côte]].addRssFeed([[gérard]]); }
[[[[Nl]]]]: Adds an RssItem to database
[Succeeded / Failed / Skipped / Total] 0 / 444 / 0 / 444:  57%|█████▋    | 444/785 [52:48<40:33,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 444 / 0 / 444:  57%|█████▋    | 445/785 [52:53<40:24,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 445 / 0 / 445:  57%|█████▋    | 445/785 [52:53<40:24,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 445 / 0 / 445:  57%|█████▋    | 446/785 [53:08<40:23,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 446 / 0 / 446:  57%|█████▋    | 446/785 [53:08<40:23,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 446 / 0 / 446:  57%|█████▋    | 447/785 [53:13<40:14,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 447 / 0 / 447:  57%|█████▋    | 447/785 [53:13<40:14,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 447 / 0 / 447:  57%|█████▋    | 448/785 [53:15<40:03,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 448 / 0 / 448:  57%|█████▋    | 448/785 [53:15<40:03,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 448 / 0 / 448:  57%|█████▋    | 449/785 [53:21<39:55,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 449 / 0 / 449:  57%|█████▋    | 449/785 [53:21<39:55,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 449 / 0 / 449:  57%|█████▋    | 450/785 [53:28<39:48,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 450 / 0 / 450:  57%|█████▋    | 450/785 [53:28<39:48,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 450 / 0 / 450:  57%|█████▋    | 451/785 [53:32<39:39,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 451 / 0 / 451:  57%|█████▋    | 451/785 [53:32<39:39,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 451 / 0 / 451:  58%|█████▊    | 452/785 [53:35<39:28,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 452 / 0 / 452:  58%|█████▊    | 452/785 [53:35<39:28,  7.11s/it][Succeeded / Failed / Skipped / Total] 0 / 452 / 0 / 452:  58%|█████▊    | 453/785 [53:47<39:25,  7.12s/it]--------------------------------------------- Result 444 ---------------------------------------------
[[0 (-8928%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[read]](byte[] [[b]]) throws IOException { int [[found]] = super.read([[b]]); this.[[count]] += ([[found]] >= 0) ? [[found]] : 0; return [[found]]; }
[[[[Nl]]]]: Reads a number of bytes into the byte array , keeping count of the number read

[[[[Adv]]]]: public int [[estúpido]](byte[] [[misplace]]) throws IOException { int [[aroused]] = super.read([[misplace]]); this.[[marshes]] += ([[aroused]] >= 0) ? [[aroused]] : 0; return [[aroused]]; }
[[[[Nl]]]]: Reads a number of bytes into the byte array , keeping count of the number read
--------------------------------------------- Result 445 ---------------------------------------------
[[0 (-9693%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[update]](byte [[aByte]]) { int [[a]], [[b]]; [[a]] = (int) [[aByte]]; for (int [[count]] = 7; [[count]] >=0; [[count]]--) { [[a]] = [[a]] << 1; [[b]] = ([[a]] >>> 8) & 1; if ((value & 0x8000) != 0) { value = ((value << 1) + [[b]]) ^ 0x1021; } else { value = (value << 1) + [[b]]; } } value = value & 0xffff; return; }
[[[[Nl]]]]: update CRC with byte b

[[[[Adv]]]]: public void [[münster]](byte [[tenderly]]) { int [[driftwood]], [[communism]]; [[driftwood]] = (int) [[tenderly]]; for (int [[reviewers]] = 7; [[reviewers]] >=0; [[reviewers]]--) { [[driftwood]] = [[driftwood]] << 1; [[communism]] = ([[driftwood]] >>> 8) & 1; if ((value & 0x8000) != 0) { value = ((value << 1) + [[communism]]) ^ 0x1021; } else { value = (value << 1) + [[communism]]; } } value = value & 0xffff; return; }
[[[[Nl]]]]: update CRC with byte b
--------------------------------------------- Result 446 ---------------------------------------------
[[0 (-7539%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[formatWindSpeed]](Context [[context]], double [[windSpeed]]) { if(!WeatherPreferences.isCelsius([[context]])) { [[windSpeed]] = [[windSpeed]] * 0.621371; return String.format([[context]].getString(R.string.format_wind_mph), [[windSpeed]]); } else { return String.format([[context]].getString(R.string.format_wind_kmh), [[windSpeed]]); } }
[[[[Nl]]]]: formats wind speed

[[[[Adv]]]]: public static String [[hideaway]](Context [[organization]], double [[constitutionally]]) { if(!WeatherPreferences.isCelsius([[organization]])) { [[constitutionally]] = [[constitutionally]] * 0.621371; return String.format([[organization]].getString(R.string.format_wind_mph), [[constitutionally]]); } else { return String.format([[organization]].getString(R.string.format_wind_kmh), [[constitutionally]]); } }
[[[[Nl]]]]: formats wind speed
--------------------------------------------- Result 447 ---------------------------------------------
[[0 (-10327%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private PendingIntent [[createOnClickPendingIntent]]() { Intent [[openClockIntent]] = new Intent(AlarmClock.ACTION_SET_ALARM); ActivityInfo [[clockInfo]] = getPackageManager().resolveActivity([[openClockIntent]], 0).activityInfo; return PendingIntent.getActivity(this, RC_OPEN_CLOCK, getPackageManager().getLaunchIntentForPackage([[clockInfo]].packageName), PendingIntent.FLAG_CANCEL_CURRENT); }
[[[[Nl]]]]: Creates PendingIntent for default activity of default clock application

[[[[Adv]]]]: private PendingIntent [[pressin]]() { Intent [[costas]] = new Intent(AlarmClock.ACTION_SET_ALARM); ActivityInfo [[bugatti]] = getPackageManager().resolveActivity([[costas]], 0).activityInfo; return PendingIntent.getActivity(this, RC_OPEN_CLOCK, getPackageManager().getLaunchIntentForPackage([[bugatti]].packageName), PendingIntent.FLAG_CANCEL_CURRENT); }
[[[[Nl]]]]: Creates PendingIntent for default activity of default clock application
--------------------------------------------- Result 448 ---------------------------------------------
[[0 (-7306%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[findAndSetEmptyCellsInFolder]](ShortcutInfo [[item]]) { boolean [[bFound]] = False; for(int [[ii]] = mNumPages - 1;[[ii]] >= 0;[[ii]] --) { [[bFound]] = findAndSetEmptyCells([[ii]], [[item]]); if([[bFound]]) { return "[[True]]" == "[[True]]"; } } return False; }
[[[[Nl]]]]: return true if it succeeded in find a vacancy

[[[[Adv]]]]: private boolean [[microchips]](ShortcutInfo [[diagonal]]) { boolean [[breadcrumbs]] = False; for(int [[winn]] = mNumPages - 1;[[winn]] >= 0;[[winn]] --) { [[breadcrumbs]] = findAndSetEmptyCells([[winn]], [[diagonal]]); if([[breadcrumbs]]) { return "[["Clientele" == "Clientele"]]" == "[["Clientele" == "Clientele"]]"; } } return False; }
[[[[Nl]]]]: return true if it succeeded in find a vacancy
--------------------------------------------- Result 449 ---------------------------------------------
[[0 (-8331%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[close]]() { lock.lock(); try { if (connectionOpen && !channelSettling) { final Protos.TwoWayChannelMessage.Builder [[msg]] = Protos.TwoWayChannelMessage.newBuilder(); [[msg]].setType(Protos.TwoWayChannelMessage.MessageType.CLOSE); conn.sendToClient([[msg]].build()); conn.destroyConnection(CloseReason.SERVER_REQUESTED_CLOSE); } } finally { lock.unlock(); } }
[[[[Nl]]]]: < p > Closes the connection by generating a settle message for the client and calls { @ link PaymentChannelServer

[[[[Adv]]]]: public void [[childless]]() { lock.lock(); try { if (connectionOpen && !channelSettling) { final Protos.TwoWayChannelMessage.Builder [[telescope]] = Protos.TwoWayChannelMessage.newBuilder(); [[telescope]].setType(Protos.TwoWayChannelMessage.MessageType.CLOSE); conn.sendToClient([[telescope]].build()); conn.destroyConnection(CloseReason.SERVER_REQUESTED_CLOSE); } } finally { lock.unlock(); } }
[[[[Nl]]]]: < p > Closes the connection by generating a settle message for the client and calls { @ link PaymentChannelServer
--------------------------------------------- Result 450 ---------------------------------------------
[[0 (-9087%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getValue]](int [[index]]) { if ([[index]] != 0) { throw new IndexOutOfBoundsException(String.valueOf([[index]])); } return [[getValue]](); }
[[[[Nl]]]]: Gets the value at the specified index

[[[[Adv]]]]: public int [[postmortem]](int [[closures]]) { if ([[closures]] != 0) { throw new IndexOutOfBoundsException(String.valueOf([[closures]])); } return [[postmortem]](); }
[[[[Nl]]]]: Gets the value at the specified index
--------------------------------------------- Result 451 ---------------------------------------------
[[0 (-8614%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[reload]]() { if (Util.isNetworkAvailable(context)) { toggleNoInternetMessage("[[False]]" != "[[False]]"); generator.setEmailAddress(account.getEmail()); showAddressProgress(); } else { toggleNoInternetMessage("[[True]]" == "[[True]]"); } }
[[[[Nl]]]]: Called when reload internet button is pressed , after no internet connection has been detected

[[[[Adv]]]]: private void [[wolfram]]() { if (Util.isNetworkAvailable(context)) { toggleNoInternetMessage("[["Mofo" != "Mofo"]]" != "[["Mofo" != "Mofo"]]"); generator.setEmailAddress(account.getEmail()); showAddressProgress(); } else { toggleNoInternetMessage("[["Format" == "Format"]]" == "[["Format" == "Format"]]"); } }
[[[[Nl]]]]: Called when reload internet button is pressed , after no internet connection has been detected
--------------------------------------------- Result 452 ---------------------------------------------
[[0 (-9241%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[startReading]]() { synchronized (mLock) { if (mOutputBuffer == null) { throw new IllegalStateException("Transport has been closed"); } mThread = new ReaderThread(); mThread.start(); } }
[[[[Nl]]]]: Starts reading messages on a separate thread

[[[[Adv]]]]: public void [[mamá]]() { synchronized (mLock) { if (mOutputBuffer == null) { throw new IllegalStateException("Transport has been closed"); } mThread = new ReaderThread(); mThread.start(); } }
[[[[Nl]]]]: Starts reading messages on a separate thread
--------------------------------------------- Result 453 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 453 / 0 / 453:  58%|█████▊    | 453/785 [53:47<39:25,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 453 / 0 / 453:  58%|█████▊    | 454/785 [53:51<39:16,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 454 / 0 / 454:  58%|█████▊    | 454/785 [53:51<39:16,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 454 / 0 / 454:  58%|█████▊    | 455/785 [54:09<39:16,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 455 / 0 / 455:  58%|█████▊    | 455/785 [54:09<39:16,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 455 / 0 / 455:  58%|█████▊    | 456/785 [54:11<39:05,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 456 / 0 / 456:  58%|█████▊    | 456/785 [54:11<39:05,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 456 / 0 / 456:  58%|█████▊    | 457/785 [54:19<38:59,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 457 / 0 / 457:  58%|█████▊    | 457/785 [54:19<38:59,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 457 / 0 / 457:  58%|█████▊    | 458/785 [54:22<38:49,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 458 / 0 / 458:  58%|█████▊    | 458/785 [54:22<38:49,  7.12s/it][Succeeded / Failed / Skipped / Total] 0 / 458 / 0 / 458:  58%|█████▊    | 459/785 [54:30<38:42,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 459 / 0 / 459:  58%|█████▊    | 459/785 [54:30<38:42,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 459 / 0 / 459:  59%|█████▊    | 460/785 [54:49<38:44,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 460 / 0 / 460:  59%|█████▊    | 460/785 [54:49<38:44,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 460 / 0 / 460:  59%|█████▊    | 461/785 [54:52<38:33,  7.14s/it][[0 (-10017%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private int [[removeValuesForKey]](Object [[key]]) { Collection<V> [[collection]] = Maps.safeRemove(map, [[key]]); int [[count]] = 0; if ([[collection]] != null) { [[count]] = [[collection]].size(); [[collection]].clear(); totalSize -= [[count]]; } return [[count]]; }
[[[[Nl]]]]: Removes all values for the provided key

[[[[Adv]]]]: private int [[cim]](Object [[laurita]]) { Collection<V> [[liberté]] = Maps.safeRemove(map, [[laurita]]); int [[sagas]] = 0; if ([[liberté]] != null) { [[sagas]] = [[liberté]].size(); [[liberté]].clear(); totalSize -= [[sagas]]; } return [[sagas]]; }
[[[[Nl]]]]: Removes all values for the provided key
--------------------------------------------- Result 454 ---------------------------------------------
[[0 (-8815%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getLocalApplicationVersion]]() { int [[version]] = 0; LocalApplicationManifest [[manifest]] = null; try { [[manifest]] = getApplicationManifest(); } catch (IOException ex) { return [[version]]; } if ([[manifest]] != null) { [[version]] = [[manifest]].getVersionNumber(); } return [[version]]; }
[[[[Nl]]]]: Check the local storage to find the version number for the installed version of the app

[[[[Adv]]]]: public int [[scopes]]() { int [[trembles]] = 0; LocalApplicationManifest [[unravels]] = null; try { [[unravels]] = getApplicationManifest(); } catch (IOException ex) { return [[trembles]]; } if ([[unravels]] != null) { [[trembles]] = [[unravels]].getVersionNumber(); } return [[trembles]]; }
[[[[Nl]]]]: Check the local storage to find the version number for the installed version of the app
--------------------------------------------- Result 455 ---------------------------------------------
[[0 (-7676%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[selectPlace]](View [[view]]) { int [[PLACE_PICKER_REQUEST]] = 1; PlacePicker.IntentBuilder [[builder]] = new PlacePicker.IntentBuilder(); try { PlacePicker.IntentBuilder [[intentBuilder]] = new PlacePicker.IntentBuilder(); startActivityForResult([[builder]].build(this), [[PLACE_PICKER_REQUEST]]); } catch (GooglePlayServicesRepairableException e) { } catch (GooglePlayServicesNotAvailableException e) { } }
[[[[Nl]]]]: Uses Google Places API to select a waypoint

[[[[Adv]]]]: public void [[timing]](View [[logged]]) { int [[RIME]] = 1; PlacePicker.IntentBuilder [[inestimable]] = new PlacePicker.IntentBuilder(); try { PlacePicker.IntentBuilder [[minolta]] = new PlacePicker.IntentBuilder(); startActivityForResult([[inestimable]].build(this), [[RIME]]); } catch (GooglePlayServicesRepairableException e) { } catch (GooglePlayServicesNotAvailableException e) { } }
[[[[Nl]]]]: Uses Google Places API to select a waypoint
--------------------------------------------- Result 456 ---------------------------------------------
[[0 (-9156%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[switchTo]](Class<? extends Activity> [[activityClass]]) { if (mActivity != null) { Intent [[intent]] = new Intent(mActivity, [[activityClass]]); mActivity.startActivity([[intent]]); } }
[[[[Nl]]]]: Switch to the specified activity @ param activityClass the activity to switch to

[[[[Adv]]]]: public static void [[rohypnol]](Class<? extends Activity> [[couturier]]) { if (mActivity != null) { Intent [[buffeted]] = new Intent(mActivity, [[couturier]]); mActivity.startActivity([[buffeted]]); } }
[[[[Nl]]]]: Switch to the specified activity @ param activityClass the activity to switch to
--------------------------------------------- Result 457 ---------------------------------------------
[[0 (-10002%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static User[] [[parseSpreadsheetJson]](String [[jsonData]]) { Gson [[gson]] = new Gson(); JsonParser parser = new JsonParser(); JsonObject [[map]] = parser.parse([[jsonData]]).getAsJsonObject(); JsonArray [[brotherJsonArray]] = [[map]].getAsJsonArray("records"); return [[gson]].fromJson([[brotherJsonArray]], User[].class); }
[[[[Nl]]]]: Parses a JSON string of brotherhood data into an array of User objects @ param jsonData - String of JSON formatted brotherhood data @ return parsed User [ ] of brotherhood data for all brothers

[[[[Adv]]]]: private static User[] [[canceling]](String [[camacho]]) { Gson [[branco]] = new Gson(); JsonParser parser = new JsonParser(); JsonObject [[error]] = parser.parse([[camacho]]).getAsJsonObject(); JsonArray [[yoichi]] = [[error]].getAsJsonArray("records"); return [[branco]].fromJson([[yoichi]], User[].class); }
[[[[Nl]]]]: Parses a JSON string of brotherhood data into an array of User objects @ param jsonData - String of JSON formatted brotherhood data @ return parsed User [ ] of brotherhood data for all brothers
--------------------------------------------- Result 458 ---------------------------------------------
[[0 (-8340%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[showDialog]]() { if (mActivity.getSupportFragmentManager().findFragmentByTag( "rmmFragment") != null) { return; } RateMeMaybeFragment [[frag]] = new RateMeMaybeFragment(); [[frag]].setData(getIcon(), getDialogTitle(), getDialogMessage(), getPositiveBtn(), getNeutralBtn(), getNegativeBtn(), this); [[frag]].show(mActivity.getSupportFragmentManager(), "rmmFragment"); }
[[[[Nl]]]]: Actually show the dialog ( if it is not currently shown )

[[[[Adv]]]]: private void [[vowel]]() { if (mActivity.getSupportFragmentManager().findFragmentByTag( "rmmFragment") != null) { return; } RateMeMaybeFragment [[babylonians]] = new RateMeMaybeFragment(); [[babylonians]].setData(getIcon(), getDialogTitle(), getDialogMessage(), getPositiveBtn(), getNeutralBtn(), getNegativeBtn(), this); [[babylonians]].show(mActivity.getSupportFragmentManager(), "rmmFragment"); }
[[[[Nl]]]]: Actually show the dialog ( if it is not currently shown )
--------------------------------------------- Result 459 ---------------------------------------------
[[0 (-7749%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static byte[] [[getTestDataWithInvalidLength]]() { try { ByteArrayOutputStream [[out]] = new ByteArrayOutputStream(); byte[] [[payload]] = getTestPayload(); writeShortLE([[out]], OsuProviderInfo.MINIMUM_LENGTH - 1); [[out]].write([[payload]]); return [[out]].toByteArray(); } catch (Exception e) { return null; } }
[[[[Nl]]]]: Generate and return the raw data based on pre-defined test data

[[[[Adv]]]]: private static byte[] [[colonoscopy]]() { try { ByteArrayOutputStream [[turnip]] = new ByteArrayOutputStream(); byte[] [[slovenian]] = getTestPayload(); writeShortLE([[turnip]], OsuProviderInfo.MINIMUM_LENGTH - 1); [[turnip]].write([[slovenian]]); return [[turnip]].toByteArray(); } catch (Exception e) { return null; } }
[[[[Nl]]]]: Generate and return the raw data based on pre-defined test data
--------------------------------------------- Result 460 ---------------------------------------------
[[0 (-10241%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isFileNewer]](final File [[file]], final File [[reference]]) { if ([[reference]] == null) { throw new IllegalArgumentException("No specified reference file"); } if (![[reference]].exists()) { throw new IllegalArgumentException("The reference file '" + [[reference]] + "' doesn't exist"); } return [[isFileNewer]]([[file]], [[reference]].lastModified()); }
[[[[Nl]]]]: Tests if the specified < code > File < code > is newer than the reference < code > File < code >

[[[[Adv]]]]: public static boolean [[sugarcoat]](final File [[petrina]], final File [[molto]]) { if ([[molto]] == null) { throw new IllegalArgumentException("No specified reference file"); } if (![[molto]].exists()) { throw new IllegalArgumentException("The reference file '" + [[molto]] + "' doesn't exist"); } return [[sugarcoat]]([[petrina]], [[molto]].lastModified()); }
[[[[Nl]]]]: Tests if the specified < code > File < code > is newer than the reference < code > File < code >
--------------------------------------------- Result 461 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 461 / 0 / 461:  59%|█████▊    | 461/785 [54:52<38:33,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 461 / 0 / 461:  59%|█████▉    | 462/785 [54:55<38:24,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 462 / 0 / 462:  59%|█████▉    | 462/785 [54:55<38:24,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 462 / 0 / 462:  59%|█████▉    | 463/785 [55:11<38:22,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 463 / 0 / 463:  59%|█████▉    | 463/785 [55:11<38:22,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 463 / 0 / 463:  59%|█████▉    | 464/785 [55:16<38:14,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 464 / 0 / 464:  59%|█████▉    | 464/785 [55:16<38:14,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 464 / 0 / 464:  59%|█████▉    | 465/785 [55:16<38:02,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 465 / 0 / 465:  59%|█████▉    | 465/785 [55:16<38:02,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 465 / 0 / 465:  59%|█████▉    | 466/785 [55:30<37:59,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 466 / 0 / 466:  59%|█████▉    | 466/785 [55:30<37:59,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 466 / 0 / 466:  59%|█████▉    | 467/785 [55:30<37:48,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 467 / 0 / 467:  59%|█████▉    | 467/785 [55:30<37:48,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 467 / 0 / 467:  60%|█████▉    | 468/785 [55:43<37:44,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 468 / 0 / 468:  60%|█████▉    | 468/785 [55:43<37:44,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 468 / 0 / 468:  60%|█████▉    | 469/785 [55:50<37:37,  7.14s/it][[0 (-5950%)]] --> [[[FAILED]]]

[[[[Adv]]]]: JCExpression [[term1Rest]](JCExpression [[t]]) { if (S.token() == QUES) { int [[pos]] = S.pos(); S.nextToken(); JCExpression [[t1]] = term(); accept(COLON); JCExpression [[t2]] = term1(); return F.at([[pos]]).Conditional([[t]], [[t1]], [[t2]]); } else { return [[t]]; } }
[[[[Nl]]]]: Expression1Rest = [ ``

[[[[Adv]]]]: JCExpression [[donato]](JCExpression [[modernity]]) { if (S.token() == QUES) { int [[queda]] = S.pos(); S.nextToken(); JCExpression [[sundowner]] = term(); accept(COLON); JCExpression [[screenwriter]] = term1(); return F.at([[queda]]).Conditional([[modernity]], [[sundowner]], [[screenwriter]]); } else { return [[modernity]]; } }
[[[[Nl]]]]: Expression1Rest = [ ``
--------------------------------------------- Result 462 ---------------------------------------------
[[0 (-9830%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[takePictureTestByCamera]]( MeteringRectangle[] [[aeRegions]], MeteringRectangle[] [[awbRegions]], MeteringRectangle[] [[afRegions]]) throws Exception { [[takePictureTestByCamera]]([[aeRegions]], [[awbRegions]], [[afRegions]], "[[False]]" != "[[False]]"); }
[[[[Nl]]]]: Take a picture for a given set of 3A regions for a particular camera

[[[[Adv]]]]: private void [[buffeted]]( MeteringRectangle[] [[church]], MeteringRectangle[] [[transcendence]], MeteringRectangle[] [[music]]) throws Exception { [[buffeted]]([[church]], [[transcendence]], [[music]], "[["Excerpt" != "Excerpt"]]" != "[["Excerpt" != "Excerpt"]]"); }
[[[[Nl]]]]: Take a picture for a given set of 3A regions for a particular camera
--------------------------------------------- Result 463 ---------------------------------------------
[[0 (-9796%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[checkWifiPermissionWhenPermissionReviewRequired]]() { if (!mPermissionReviewRequired) { return "[[False]]" != "[[False]]"; } int [[result]] = mContext.checkCallingPermission( android.Manifest.permission.MANAGE_WIFI_WHEN_PERMISSION_REVIEW_REQUIRED); return [[result]] == PackageManager.PERMISSION_GRANTED; }
[[[[Nl]]]]: Check if the caller must still pass permission check or if the caller is exempted from the consent UI via the MANAGE_WIFI_WHEN_PERMISSION_REVIEW_REQUIRED check

[[[[Adv]]]]: private boolean [[deportations]]() { if (!mPermissionReviewRequired) { return "[["Glamour" != "Glamour"]]" != "[["Glamour" != "Glamour"]]"; } int [[poseur]] = mContext.checkCallingPermission( android.Manifest.permission.MANAGE_WIFI_WHEN_PERMISSION_REVIEW_REQUIRED); return [[poseur]] == PackageManager.PERMISSION_GRANTED; }
[[[[Nl]]]]: Check if the caller must still pass permission check or if the caller is exempted from the consent UI via the MANAGE_WIFI_WHEN_PERMISSION_REVIEW_REQUIRED check
--------------------------------------------- Result 464 ---------------------------------------------
[[0 (-7910%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public List<String> [[getUnlockedHomeNodes]](String [[API]]) throws GuildWars2Exception { isParamValid(new ParamChecker(ParamType.API, [[API]])); try { Response<List<String>> [[response]] = gw2API.getUnlockedHomeNodes([[API]]).execute(); if (![[response]].isSuccessful()) throwError([[response]].code(), [[response]].errorBody()); return [[response]].body(); } catch (IOException e) { throw new GuildWars2Exception(ErrorCode.Network, "Network Error: " + e.getMessage()); } }
[[[[Nl]]]]: For more info on Account nodes API go < a href= '' https : wiki

[[[[Adv]]]]: public List<String> [[doughy]](String [[SUNSCREEN]]) throws GuildWars2Exception { isParamValid(new ParamChecker(ParamType.API, [[SUNSCREEN]])); try { Response<List<String>> [[weaknesses]] = gw2API.getUnlockedHomeNodes([[SUNSCREEN]]).execute(); if (![[weaknesses]].isSuccessful()) throwError([[weaknesses]].code(), [[weaknesses]].errorBody()); return [[weaknesses]].body(); } catch (IOException e) { throw new GuildWars2Exception(ErrorCode.Network, "Network Error: " + e.getMessage()); } }
[[[[Nl]]]]: For more info on Account nodes API go < a href= '' https : wiki
--------------------------------------------- Result 465 ---------------------------------------------
[[0 (-8480%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[draw]](Canvas [[canvas]], Paint [[paint]]) { [[canvas]].drawColor(backGroundColor); for (Pipe [[pipe]]: pipes) { [[pipe]].draw([[canvas]], [[paint]]); } [[paint]].setColor(Color.BLUE); [[paint]].setTextSize(100); [[canvas]].drawText("" + score, 50, 50 + [[paint]].descent() - [[paint]].ascent() , [[paint]]); }
[[[[Nl]]]]: draws background color

[[[[Adv]]]]: public void [[sleeved]](Canvas [[overtaking]], Paint [[virginity]]) { [[overtaking]].drawColor(backGroundColor); for (Pipe [[takeover]]: pipes) { [[takeover]].draw([[overtaking]], [[virginity]]); } [[virginity]].setColor(Color.BLUE); [[virginity]].setTextSize(100); [[overtaking]].drawText("" + score, 50, 50 + [[virginity]].descent() - [[virginity]].ascent() , [[virginity]]); }
[[[[Nl]]]]: draws background color
--------------------------------------------- Result 466 ---------------------------------------------
[[0 (-9862%)]] --> [[[FAILED]]]

[[[[Adv]]]]: final long [[reserve]](int [[permits]]) { checkPermits([[permits]]); synchronized (mutex()) { return reserveAndGetWaitLength([[permits]], stopwatch.readMicros()); } }
[[[[Nl]]]]: Reserves the given number of permits from this { @ code RateLimiter } for future use , returning the number of microseconds until the reservation can be consumed

[[[[Adv]]]]: final long [[stop]](int [[mamá]]) { checkPermits([[mamá]]); synchronized (mutex()) { return reserveAndGetWaitLength([[mamá]], stopwatch.readMicros()); } }
[[[[Nl]]]]: Reserves the given number of permits from this { @ code RateLimiter } for future use , returning the number of microseconds until the reservation can be consumed
--------------------------------------------- Result 467 ---------------------------------------------
[[0 (-8904%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[disbandConnection]](){ WifiInfo [[info]] = wifiManager.getConnectionInfo(); int [[id]] =[[info]].getNetworkId(); return wifiManager.disableNetwork([[id]]) && wifiManager.removeNetwork([[id]]); }
[[[[Nl]]]]: Disconnects from the connection presently connected to and removes it from the list of networks

[[[[Adv]]]]: public static boolean [[decked]](){ WifiInfo [[jellyroll]] = wifiManager.getConnectionInfo(); int [[montalvo]] =[[jellyroll]].getNetworkId(); return wifiManager.disableNetwork([[montalvo]]) && wifiManager.removeNetwork([[montalvo]]); }
[[[[Nl]]]]: Disconnects from the connection presently connected to and removes it from the list of networks
--------------------------------------------- Result 468 ---------------------------------------------
[[0 (-6684%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[validate]](int [[v]]) { if ([[v]] < 0 || [[v]] >= V) throw new IllegalArgumentException("vertex " + [[v]] + " is not between 0 and " + (V-1)); }
[[[[Nl]]]]: throw an IllegalArgumentException if v is outside prescibed range

[[[[Adv]]]]: private void [[fettle]](int [[immature]]) { if ([[immature]] < 0 || [[immature]] >= V) throw new IllegalArgumentException("vertex " + [[immature]] + " is not between 0 and " + (V-1)); }
[[[[Nl]]]]: throw an IllegalArgumentException if v is outside prescibed range
--------------------------------------------- Result 469 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 469 / 0 / 469:  60%|█████▉    | 469/785 [55:50<37:37,  7.14s/it][Succeeded / Failed / Skipped / Total] 0 / 470 / 0 / 470:  60%|█████▉    | 470/785 [55:50<37:25,  7.13s/it][Succeeded / Failed / Skipped / Total] 0 / 470 / 0 / 470:  60%|██████    | 471/785 [56:16<37:31,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 471 / 0 / 471:  60%|██████    | 471/785 [56:16<37:31,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 471 / 0 / 471:  60%|██████    | 472/785 [56:17<37:19,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 472 / 0 / 472:  60%|██████    | 472/785 [56:17<37:19,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 472 / 0 / 472:  60%|██████    | 473/785 [56:23<37:11,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 473 / 0 / 473:  60%|██████    | 473/785 [56:23<37:11,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 473 / 0 / 473:  60%|██████    | 474/785 [56:30<37:04,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 474 / 0 / 474:  60%|██████    | 474/785 [56:30<37:04,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 474 / 0 / 474:  61%|██████    | 475/785 [56:36<36:56,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 475 / 0 / 475:  61%|██████    | 475/785 [56:36<36:56,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 475 / 0 / 475:  61%|██████    | 476/785 [56:49<36:53,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 476 / 0 / 476:  61%|██████    | 476/785 [56:49<36:53,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 476 / 0 / 476:  61%|██████    | 477/785 [56:50<36:41,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 477 / 0 / 477:  61%|██████    | 477/785 [56:50<36:41,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 477 / 0 / 477:  61%|██████    | 478/785 [57:03<36:38,  7.16s/it][[0 (-11063%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void retinex(VpImageRGBa [[I1]], VpImageRGBa [[I2]], int [[scale]], int scaleDiv, int [[level]], double dynamic, int [[kernelSize]]) { retinex_0([[I1]].nativeObj, [[I2]].nativeObj, [[scale]], scaleDiv, [[level]], dynamic, [[kernelSize]]); return; }
[[[[Nl]]]]: javadoc : retinex ( I1 , I2 , scale , scaleDiv , level , dynamic , kernelSize )

[[[[Adv]]]]: public static void retinex(VpImageRGBa [[AUDITORY]], VpImageRGBa [[CONQUESTS]], int [[gérard]], int scaleDiv, int [[renato]], double dynamic, int [[testament]]) { retinex_0([[AUDITORY]].nativeObj, [[CONQUESTS]].nativeObj, [[gérard]], scaleDiv, [[renato]], dynamic, [[testament]]); return; }
[[[[Nl]]]]: javadoc : retinex ( I1 , I2 , scale , scaleDiv , level , dynamic , kernelSize )
--------------------------------------------- Result 470 ---------------------------------------------
[[0 (-9557%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[numKeys]]() { int [[result]] = basic.numKeys(); for (DeterministicKeyChain [[chain]] : chains) [[result]] += [[chain]].numKeys(); return [[result]]; }
[[[[Nl]]]]: Returns the number of keys managed by this group , including the lookahead buffers

[[[[Adv]]]]: public int [[minolta]]() { int [[picon]] = basic.numKeys(); for (DeterministicKeyChain [[animais]] : chains) [[picon]] += [[animais]].numKeys(); return [[picon]]; }
[[[[Nl]]]]: Returns the number of keys managed by this group , including the lookahead buffers
--------------------------------------------- Result 471 ---------------------------------------------
[[0 (-8726%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public User [[getUser]](String [[username]], String [[password]]){ User [[user]] = new User(); [[user]].setUserName([[username]]); [[user]].setPassword([[password]]); restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter()); [[user]] = restTemplate.postForObject(REST_SERVICE_URI+"/login/" , [[user]] , User.class); return [[user]]; }
[[[[Nl]]]]: POST USER OBJECT TO SERVER FOR LOGIN VALIDATION

[[[[Adv]]]]: public User [[snippy]](String [[buttons]], String [[sweetcakes]]){ User [[zoë]] = new User(); [[zoë]].setUserName([[buttons]]); [[zoë]].setPassword([[sweetcakes]]); restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter()); [[zoë]] = restTemplate.postForObject(REST_SERVICE_URI+"/login/" , [[zoë]] , User.class); return [[zoë]]; }
[[[[Nl]]]]: POST USER OBJECT TO SERVER FOR LOGIN VALIDATION
--------------------------------------------- Result 472 ---------------------------------------------
[[0 (-10510%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[createJSONResponse]](ArrayList<Bar> [[barList]]) { String [[response]] = ""; JSONObject root = new JSONObject(); JSONArray [[bars]] = new JSONArray(); for(Bar bar : [[barList]]) { JSONObject [[o]] = new JSONObject(); [[o]].put("name",bar.getName()); [[o]].put("price", bar.getPrice()); [[o]].put("lat", bar.getLat()); [[o]].put("lon", bar.getLon()); [[o]].put("address", bar.getAddress()); [[bars]].put([[o]]); } root.put("bars", [[bars]]); return root.toString(); }
[[[[Nl]]]]: This method takes a list of bars and creates a JSON message out of it to sent it to the client @ param barList @ return String representation of JSON formatted list of bar objects

[[[[Adv]]]]: private static String [[stakeout]](ArrayList<Bar> [[romanced]]) { String [[janus]] = ""; JSONObject root = new JSONObject(); JSONArray [[warcraft]] = new JSONArray(); for(Bar bar : [[romanced]]) { JSONObject [[rosebush]] = new JSONObject(); [[rosebush]].put("name",bar.getName()); [[rosebush]].put("price", bar.getPrice()); [[rosebush]].put("lat", bar.getLat()); [[rosebush]].put("lon", bar.getLon()); [[rosebush]].put("address", bar.getAddress()); [[warcraft]].put([[rosebush]]); } root.put("bars", [[warcraft]]); return root.toString(); }
[[[[Nl]]]]: This method takes a list of bars and creates a JSON message out of it to sent it to the client @ param barList @ return String representation of JSON formatted list of bar objects
--------------------------------------------- Result 473 ---------------------------------------------
[[0 (-4949%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static AssertionError [[generateAssertException]](String [[comment]]) { AssertionError [[exception]] = new AssertionError([[comment]]); StackTraceElement[] [[stackTrace]] = [[exception]].getStackTrace(); StackTraceElement[] [[newArray]] = Arrays.copyOfRange([[stackTrace]], 2, [[stackTrace]].length); [[exception]].setStackTrace([[newArray]]); return [[exception]]; }
[[[[Nl]]]]: Some low level stuff to make the exception point to the correct method throwing the exception

[[[[Adv]]]]: private static AssertionError [[lancia]](String [[reservoirs]]) { AssertionError [[guardianship]] = new AssertionError([[reservoirs]]); StackTraceElement[] [[rafting]] = [[guardianship]].getStackTrace(); StackTraceElement[] [[tambourines]] = Arrays.copyOfRange([[rafting]], 2, [[rafting]].length); [[guardianship]].setStackTrace([[tambourines]]); return [[guardianship]]; }
[[[[Nl]]]]: Some low level stuff to make the exception point to the correct method throwing the exception
--------------------------------------------- Result 474 ---------------------------------------------
[[0 (-10844%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public CanvasScript [[rotate]](float [[degrees]]) { parameters.add(new RotateParams([[degrees]])); return this; }
[[[[Nl]]]]: Add a canvas rotation to the stack @ param degrees The amount in degrees to rotate @ return self for chaining @ see Canvas # rotate ( float )

[[[[Adv]]]]: public CanvasScript [[failed]](float [[clamouring]]) { parameters.add(new RotateParams([[clamouring]])); return this; }
[[[[Nl]]]]: Add a canvas rotation to the stack @ param degrees The amount in degrees to rotate @ return self for chaining @ see Canvas # rotate ( float )
--------------------------------------------- Result 475 ---------------------------------------------
[[0 (-8730%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isNESCafeROM]]() { return nescaferomloaded; }
[[[[Nl]]]]: Check for NESCafe ROM

[[[[Adv]]]]: public boolean [[queuing]]() { return nescaferomloaded; }
[[[[Nl]]]]: Check for NESCafe ROM
--------------------------------------------- Result 476 ---------------------------------------------
[[0 (-9726%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void broadcastSupplicantStateChangeEvent(String [[iface]], int [[networkId]], WifiSsid [[wifiSsid]], String [[bssid]], SupplicantState [[newSupplicantState]]) { sendMessage([[iface]], SUPPLICANT_STATE_CHANGE_EVENT, 0, 0, new StateChangeResult([[networkId]], [[wifiSsid]], [[bssid]], [[newSupplicantState]])); }
[[[[Nl]]]]: Broadcast the supplicant state change event to all the handlers registered for this event

[[[[Adv]]]]: public void broadcastSupplicantStateChangeEvent(String [[graves]], int [[días]], WifiSsid [[contradictory]], String [[flaherty]], SupplicantState [[manoeuvre]]) { sendMessage([[graves]], SUPPLICANT_STATE_CHANGE_EVENT, 0, 0, new StateChangeResult([[días]], [[contradictory]], [[flaherty]], [[manoeuvre]])); }
[[[[Nl]]]]: Broadcast the supplicant state change event to all the handlers registered for this event
--------------------------------------------- Result 477 ---------------------------------------------
[[0 (-10514%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static ArrayList<Book> [[loadBooks]](String [[baseUrl]]) { URL [[url]] = createUrl([[baseUrl]]); String [[jsonString]] = ""; try { [[jsonString]] = makeHttpRequest([[url]]); } catch (IOException e) { Log.e(LOG_TAG, e.getMessage()); } return extractBooks([[jsonString]]); }
[[[[Nl]]]]: Takes request url and returns list of Books @ param baseUrl @ return

[[[[Adv]]]]: public static ArrayList<Book> [[cutlet]](String [[marga]]) { URL [[camacho]] = createUrl([[marga]]); String [[countrymen]] = ""; try { [[countrymen]] = makeHttpRequest([[camacho]]); } catch (IOException e) { Log.e(LOG_TAG, e.getMessage()); } return extractBooks([[countrymen]]); }
[[[[Nl]]]]: Takes request url and returns list of Books @ param baseUrl @ return
[Succeeded / Failed / Skipped / Total] 0 / 478 / 0 / 478:  61%|██████    | 478/785 [57:03<36:38,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 478 / 0 / 478:  61%|██████    | 479/785 [57:15<36:34,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 479 / 0 / 479:  61%|██████    | 479/785 [57:15<36:34,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 479 / 0 / 479:  61%|██████    | 480/785 [57:22<36:27,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 480 / 0 / 480:  61%|██████    | 480/785 [57:22<36:27,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 480 / 0 / 480:  61%|██████▏   | 481/785 [57:28<36:19,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 481 / 0 / 481:  61%|██████▏   | 481/785 [57:28<36:19,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 481 / 0 / 481:  61%|██████▏   | 482/785 [57:30<36:09,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 482 / 0 / 482:  61%|██████▏   | 482/785 [57:30<36:09,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 482 / 0 / 482:  62%|██████▏   | 483/785 [57:49<36:09,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 483 / 0 / 483:  62%|██████▏   | 483/785 [57:49<36:09,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 483 / 0 / 483:  62%|██████▏   | 484/785 [57:55<36:01,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 484 / 0 / 484:  62%|██████▏   | 484/785 [57:55<36:01,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 484 / 0 / 484:  62%|██████▏   | 485/785 [57:57<35:51,  7.17s/it]--------------------------------------------- Result 478 ---------------------------------------------
[[0 (-8293%)]] --> [[[FAILED]]]

[[[[Adv]]]]: synchronized void [[addToBuffer]](int [[ds_id]], DataTypeDoubleArray [[dataTypeDoubleArray]]) { HFBuffer [[hfBuffer]]; if (hmHFBuffer.containsKey([[ds_id]])) [[hfBuffer]] = hmHFBuffer.get([[ds_id]]); else [[hfBuffer]] = new HFBuffer(); if([[hfBuffer]].size + [[dataTypeDoubleArray]].getSample().length * 8 >= BUFFER_SIZE){ syncHFData([[ds_id]]); [[hfBuffer]] = hmHFBuffer.get([[ds_id]]); } [[hfBuffer]].data.add([[dataTypeDoubleArray]]); [[hfBuffer]].size += [[dataTypeDoubleArray]].getSample().length * 8; hmHFBuffer.put([[ds_id]], [[hfBuffer]]); }
[[[[Nl]]]]: Adds the data type array to the buffer

[[[[Adv]]]]: synchronized void [[aftertaste]](int [[prosthesis]], DataTypeDoubleArray [[loosens]]) { HFBuffer [[maréchal]]; if (hmHFBuffer.containsKey([[prosthesis]])) [[maréchal]] = hmHFBuffer.get([[prosthesis]]); else [[maréchal]] = new HFBuffer(); if([[maréchal]].size + [[loosens]].getSample().length * 8 >= BUFFER_SIZE){ syncHFData([[prosthesis]]); [[maréchal]] = hmHFBuffer.get([[prosthesis]]); } [[maréchal]].data.add([[loosens]]); [[maréchal]].size += [[loosens]].getSample().length * 8; hmHFBuffer.put([[prosthesis]], [[maréchal]]); }
[[[[Nl]]]]: Adds the data type array to the buffer
--------------------------------------------- Result 479 ---------------------------------------------
[[0 (-2544%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[enforceCallingPermission]](String [[permission]], String [[func]]) { if (checkCallingPermission([[permission]]) == PackageManager.PERMISSION_GRANTED) { return; } String [[msg]] = "Permission Denial: " + [[func]] + " from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + [[permission]]; Slog.w(TAG, [[msg]]); throw new SecurityException([[msg]]); }
[[[[Nl]]]]: This can be called with or without the global lock held

[[[[Adv]]]]: void [[tita]](String [[cufflink]], String [[halla]]) { if (checkCallingPermission([[cufflink]]) == PackageManager.PERMISSION_GRANTED) { return; } String [[parishioners]] = "Permission Denial: " + [[halla]] + " from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + [[cufflink]]; Slog.w(TAG, [[parishioners]]); throw new SecurityException([[parishioners]]); }
[[[[Nl]]]]: This can be called with or without the global lock held
--------------------------------------------- Result 480 ---------------------------------------------
[[0 (-9632%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[savejsonhis]](Context [[context]],String [[json]]){ SharedPreferences [[sharedPre]]= PreferenceManager.getDefaultSharedPreferences([[context]]);; SharedPreferences.Editor [[editor]]=[[sharedPre]].edit(); [[editor]].putString("string_json_his", [[json]]); [[editor]].commit(); }
[[[[Nl]]]]: save string_json_his

[[[[Adv]]]]: public static void [[afflict]](Context [[beanstalk]],String [[awkwardness]]){ SharedPreferences [[waived]]= PreferenceManager.getDefaultSharedPreferences([[beanstalk]]);; SharedPreferences.Editor [[barbs]]=[[waived]].edit(); [[barbs]].putString("string_json_his", [[awkwardness]]); [[barbs]].commit(); }
[[[[Nl]]]]: save string_json_his
--------------------------------------------- Result 481 ---------------------------------------------
[[0 (-10383%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setPosterBitmap]](Bitmap [[posterBitmap]]) { if (mPosterBitmap == [[posterBitmap]] || (mPosterBitmap != null && mPosterBitmap.sameAs([[posterBitmap]]))) { return; } mPosterBitmap = [[posterBitmap]]; if (mNotificationBuilder == null || mMediaRouteController == null) return; mNotificationBuilder.setNotificationLargeIcon(mMediaRouteController.getPoster()); updateNotification(); }
[[[[Nl]]]]: Sets the poster bitmap to display on the TransportControl

[[[[Adv]]]]: public final void [[flushed]](Bitmap [[course]]) { if (mPosterBitmap == [[course]] || (mPosterBitmap != null && mPosterBitmap.sameAs([[course]]))) { return; } mPosterBitmap = [[course]]; if (mNotificationBuilder == null || mMediaRouteController == null) return; mNotificationBuilder.setNotificationLargeIcon(mMediaRouteController.getPoster()); updateNotification(); }
[[[[Nl]]]]: Sets the poster bitmap to display on the TransportControl
--------------------------------------------- Result 482 ---------------------------------------------
[[0 (-9658%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[removeVoteSharedPreferences]](int [[eventId]]){ SharedPreferences [[sharedPreferences]] = context.getSharedPreferences(SP_VOTED_EVENTS, Context.MODE_PRIVATE); SharedPreferences.Editor [[editor]] = [[sharedPreferences]].edit(); [[editor]].remove(String.valueOf([[eventId]])); [[editor]].commit(); }
[[[[Nl]]]]: Store in a shared preference that the user has voted a particular event @ param eventId

[[[[Adv]]]]: private void [[mère]](int [[mathematicians]]){ SharedPreferences [[ryuichi]] = context.getSharedPreferences(SP_VOTED_EVENTS, Context.MODE_PRIVATE); SharedPreferences.Editor [[mundos]] = [[ryuichi]].edit(); [[mundos]].remove(String.valueOf([[mathematicians]])); [[mundos]].commit(); }
[[[[Nl]]]]: Store in a shared preference that the user has voted a particular event @ param eventId
--------------------------------------------- Result 483 ---------------------------------------------
[[0 (-9906%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[playSound]](int [[index]]) { final long [[time]] = SystemClock.uptimeMillis(); if ([[playSound]] && mSoundDelay[[[index]]] + mSoundDelayLast[[[index]]] < [[time]]) { mSoundDelayLast[[[index]]] = [[time]]; int [[streamVolume]] = mAudioManager .getStreamVolume(AudioManager.STREAM_MUSIC); if (mSoundPool.play(mSoundArray[[[index]]], [[streamVolume]], [[streamVolume]], 1, 0, mSoundPitch[[[index]]]) == 0) { } } }
[[[[Nl]]]]: Plays a sound from the array of sounds cached

[[[[Adv]]]]: public void [[privation]](int [[constrained]]) { final long [[barricades]] = SystemClock.uptimeMillis(); if ([[privation]] && mSoundDelay[[[constrained]]] + mSoundDelayLast[[[constrained]]] < [[barricades]]) { mSoundDelayLast[[[constrained]]] = [[barricades]]; int [[prentiss]] = mAudioManager .getStreamVolume(AudioManager.STREAM_MUSIC); if (mSoundPool.play(mSoundArray[[[constrained]]], [[prentiss]], [[prentiss]], 1, 0, mSoundPitch[[[constrained]]]) == 0) { } } }
[[[[Nl]]]]: Plays a sound from the array of sounds cached
--------------------------------------------- Result 484 ---------------------------------------------
[[0 (-1528%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void explorerCellTowerInfo(Activity [[activity]]) { TelephonyManager [[telephonyManager]] = getTelephonyManager([[activity]].getApplicationContext()); if (ActivityCompat.checkSelfPermission([[activity]], Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) { ActivityCompat.requestPermissions([[activity]] , new String[]{Manifest.permission.ACCESS_COARSE_LOCATION} , REQUEST_CODE_ACCESS_COARSE_LOCATION); return; } else { LogCellTowerInfo logCellTowerInfo = new LogCellTowerInfo(); logCellTowerInfo.callback([[telephonyManager]].getAllCellInfo()); } }
[[[[Nl]]]]: deproject

[[[[Adv]]]]: public static void explorerCellTowerInfo(Activity [[wiggle]]) { TelephonyManager [[tornadoes]] = getTelephonyManager([[wiggle]].getApplicationContext()); if (ActivityCompat.checkSelfPermission([[wiggle]], Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) { ActivityCompat.requestPermissions([[wiggle]] , new String[]{Manifest.permission.ACCESS_COARSE_LOCATION} , REQUEST_CODE_ACCESS_COARSE_LOCATION); return; } else { LogCellTowerInfo logCellTowerInfo = new LogCellTowerInfo(); logCellTowerInfo.callback([[tornadoes]].getAllCellInfo()); } }
[[[[Nl]]]]: deproject
--------------------------------------------- Result 485 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 485 / 0 / 485:  62%|██████▏   | 485/785 [57:57<35:51,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 485 / 0 / 485:  62%|██████▏   | 486/785 [58:14<35:49,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 486 / 0 / 486:  62%|██████▏   | 486/785 [58:14<35:49,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 486 / 0 / 486:  62%|██████▏   | 487/785 [58:18<35:40,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 487 / 0 / 487:  62%|██████▏   | 487/785 [58:18<35:40,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 487 / 0 / 487:  62%|██████▏   | 488/785 [58:20<35:30,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 488 / 0 / 488:  62%|██████▏   | 488/785 [58:20<35:30,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 488 / 0 / 488:  62%|██████▏   | 489/785 [58:22<35:19,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 489 / 0 / 489:  62%|██████▏   | 489/785 [58:22<35:19,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 489 / 0 / 489:  62%|██████▏   | 490/785 [58:44<35:22,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 490 / 0 / 490:  62%|██████▏   | 490/785 [58:44<35:22,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 490 / 0 / 490:  63%|██████▎   | 491/785 [58:47<35:12,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 491 / 0 / 491:  63%|██████▎   | 491/785 [58:47<35:12,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 491 / 0 / 491:  63%|██████▎   | 492/785 [58:49<35:02,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 492 / 0 / 492:  63%|██████▎   | 492/785 [58:49<35:02,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 492 / 0 / 492:  63%|██████▎   | 493/785 [59:06<35:00,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 493 / 0 / 493:  63%|██████▎   | 493/785 [59:06<35:00,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 493 / 0 / 493:  63%|██████▎   | 494/785 [59:18<34:56,  7.20s/it][[0 (-9834%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[putFloat]](String [[key]], float [[value]]) { try { Editor [[prefEdit]] = mPreferences.edit(); [[prefEdit]].putFloat([[key]], [[value]]); [[prefEdit]].apply(); } catch (Exception e) { e.printStackTrace(); } }
[[[[Nl]]]]: Set a Float value in the preferences

[[[[Adv]]]]: public void [[sidecar]](String [[ima]], float [[goofed]]) { try { Editor [[budd]] = mPreferences.edit(); [[budd]].putFloat([[ima]], [[goofed]]); [[budd]].apply(); } catch (Exception e) { e.printStackTrace(); } }
[[[[Nl]]]]: Set a Float value in the preferences
--------------------------------------------- Result 486 ---------------------------------------------
[[0 (-10315%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[compute]](Mat [[image]], Mat [[features]]) { compute_0(nativeObj, [[image]].nativeObj, [[features]].nativeObj); return; }
[[[[Nl]]]]: javadoc : BIF : :compute ( image , features )

[[[[Adv]]]]: public void [[liberté]](Mat [[sundance]], Mat [[hrs]]) { compute_0(nativeObj, [[sundance]].nativeObj, [[hrs]].nativeObj); return; }
[[[[Nl]]]]: javadoc : BIF : :compute ( image , features )
--------------------------------------------- Result 487 ---------------------------------------------
[[0 (-8789%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[initiateFragment]](Fragment [[fragment]]) { try { String [[tag]] = [[fragment]].getArguments().getString("chatUrl"); if (mainActivity.mFragmentManager.findFragmentByTag([[tag]]) == null) { mainActivity.mFragmentManager.beginTransaction().add(R.id.content_main, [[fragment]], [[tag]]).detach([[fragment]]).commit(); } if ((mainActivity.mCurrentFragment == null || mainActivity.mCurrentFragment.equals("home")) && mainActivity.mFragmentManager.findFragmentByTag("home") == null) { mainActivity.mFragmentManager.beginTransaction().add(R.id.content_main, new HomeFragment(), "home").commit(); } mainActivity.mFragmentManager.executePendingTransactions(); } catch (Exception e) { e.printStackTrace(); } }
[[[[Nl]]]]: Add specified fragment to the { @ link FragmentManager } @ param fragment Fragment to be added

[[[[Adv]]]]: private void [[conquerors]](Fragment [[cesca]]) { try { String [[curses]] = [[cesca]].getArguments().getString("chatUrl"); if (mainActivity.mFragmentManager.findFragmentByTag([[curses]]) == null) { mainActivity.mFragmentManager.beginTransaction().add(R.id.content_main, [[cesca]], [[curses]]).detach([[cesca]]).commit(); } if ((mainActivity.mCurrentFragment == null || mainActivity.mCurrentFragment.equals("home")) && mainActivity.mFragmentManager.findFragmentByTag("home") == null) { mainActivity.mFragmentManager.beginTransaction().add(R.id.content_main, new HomeFragment(), "home").commit(); } mainActivity.mFragmentManager.executePendingTransactions(); } catch (Exception e) { e.printStackTrace(); } }
[[[[Nl]]]]: Add specified fragment to the { @ link FragmentManager } @ param fragment Fragment to be added
--------------------------------------------- Result 488 ---------------------------------------------
[[0 (-9641%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isLooping]] () { return mediaPlayer.isLooping (); }
[[[[Nl]]]]: ___________________________________________________________________ | | Function : is Looping | | Description : Returns true if music is set to loop

[[[[Adv]]]]: public boolean [[arn]] () { return mediaPlayer.isLooping (); }
[[[[Nl]]]]: ___________________________________________________________________ | | Function : is Looping | | Description : Returns true if music is set to loop
--------------------------------------------- Result 489 ---------------------------------------------
[[0 (-8753%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Object [[get]](String [[key]], Object [[defValue]], StorageType [[type]]) { Object [[sp]] = getDataSource([[type]]).get([[key]], [[defValue]]); return [[sp]]; }
[[[[Nl]]]]: Retrieve a Object value from the preferences , StorageType

[[[[Adv]]]]: public static Object [[western]](String [[liège]], Object [[cicadas]], StorageType [[scull]]) { Object [[intensifies]] = getDataSource([[scull]]).get([[liège]], [[cicadas]]); return [[intensifies]]; }
[[[[Nl]]]]: Retrieve a Object value from the preferences , StorageType
--------------------------------------------- Result 490 ---------------------------------------------
[[0 (-10925%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public List<String> [[getArrayList]]() { List<String> [[list]] = new ArrayList<>(); for (SingleBox [[aBoxList]] : this.[[boxList]]) { [[list]].add( [[aBoxList]].getBoxName() ); } return [[list]]; }
[[[[Nl]]]]: Get every box name in an ArrayList @ return ArrayList of each box name

[[[[Adv]]]]: public List<String> [[bluesy]]() { List<String> [[legendre]] = new ArrayList<>(); for (SingleBox [[departs]] : this.[[representation]]) { [[legendre]].add( [[departs]].getBoxName() ); } return [[legendre]]; }
[[[[Nl]]]]: Get every box name in an ArrayList @ return ArrayList of each box name
--------------------------------------------- Result 491 ---------------------------------------------
[[0 (-10468%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[changeLikedStatus]](Integer [[movieID]], Integer [[LikedStatus]]){ ContentValues [[values]] = new ContentValues(); [[values]].put(MoviesContract.MovieEntry.COLUMN_LIKED,[[LikedStatus]]); this.getWritableDatabase().update(MoviesContract.MovieEntry.TABLE_NAME,[[values]],MoviesContract.MovieEntry.COLUMN_ID+"="+[[movieID]],null); this.getWritableDatabase().close(); }
[[[[Nl]]]]: Changes the status of the movie to the selected one ( liked , unliked , watchlist )

[[[[Adv]]]]: public void [[tortellini]](Integer [[armagnac]], Integer [[hüseyin]]){ ContentValues [[marga]] = new ContentValues(); [[marga]].put(MoviesContract.MovieEntry.COLUMN_LIKED,[[hüseyin]]); this.getWritableDatabase().update(MoviesContract.MovieEntry.TABLE_NAME,[[marga]],MoviesContract.MovieEntry.COLUMN_ID+"="+[[armagnac]],null); this.getWritableDatabase().close(); }
[[[[Nl]]]]: Changes the status of the movie to the selected one ( liked , unliked , watchlist )
--------------------------------------------- Result 492 ---------------------------------------------
[[0 (-9452%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[dump]]() { StringBuilder [[reply]] = new StringBuilder(); [[reply]].append("Configuration of type: " + getTypeDisplayName()); Collection<? extends Configuration> [[configs]] = getAll(); for (Configuration [[c]] : [[configs]]) { [[reply]].append("\n " + [[c]].toString()); } return [[reply]].toString(); }
[[[[Nl]]]]: Build a formatted representation of all Configurations in this ConfigurationContainer

[[[[Adv]]]]: public String [[vocals]]() { StringBuilder [[error]] = new StringBuilder(); [[error]].append("Configuration of type: " + getTypeDisplayName()); Collection<? extends Configuration> [[furioso]] = getAll(); for (Configuration [[solitaire]] : [[furioso]]) { [[error]].append("\n " + [[solitaire]].toString()); } return [[error]].toString(); }
[[[[Nl]]]]: Build a formatted representation of all Configurations in this ConfigurationContainer
--------------------------------------------- Result 493 ---------------------------------------------
[[0 (-9197%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[threadAssertEquals]](Object [[x]], Object [[y]]) { try { assertEquals([[x]], [[y]]); } catch (AssertionFailedError t) { threadRecordFailure(t); throw t; } catch (Throwable t) { threadUnexpectedException(t); } }
[[[[Nl]]]]: Just like assertEquals ( x , y ) , but additionally recording ( using threadRecordFailure ) any AssertionFailedError thrown , so that the current testcase will fail

[[[[Adv]]]]: public void [[darker]](Object [[cutlet]], Object [[tapas]]) { try { assertEquals([[cutlet]], [[tapas]]); } catch (AssertionFailedError t) { threadRecordFailure(t); throw t; } catch (Throwable t) { threadUnexpectedException(t); } }
[[[[Nl]]]]: Just like assertEquals ( x , y ) , but additionally recording ( using threadRecordFailure ) any AssertionFailedError thrown , so that the current testcase will fail
--------------------------------------------- Result 494 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 494 / 0 / 494:  63%|██████▎   | 494/785 [59:18<34:56,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 494 / 0 / 494:  63%|██████▎   | 495/785 [59:25<34:48,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 495 / 0 / 495:  63%|██████▎   | 495/785 [59:25<34:48,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 495 / 0 / 495:  63%|██████▎   | 496/785 [59:31<34:41,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 496 / 0 / 496:  63%|██████▎   | 496/785 [59:31<34:41,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 496 / 0 / 496:  63%|██████▎   | 497/785 [59:39<34:34,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 497 / 0 / 497:  63%|██████▎   | 497/785 [59:39<34:34,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 497 / 0 / 497:  63%|██████▎   | 498/785 [59:50<34:29,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 498 / 0 / 498:  63%|██████▎   | 498/785 [59:50<34:29,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 498 / 0 / 498:  64%|██████▎   | 499/785 [59:52<34:18,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 499 / 0 / 499:  64%|██████▎   | 499/785 [59:52<34:18,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 499 / 0 / 499:  64%|██████▎   | 500/785 [59:52<34:07,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 500 / 0 / 500:  64%|██████▎   | 500/785 [59:52<34:07,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 500 / 0 / 500:  64%|██████▍   | 501/785 [59:57<33:59,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 501 / 0 / 501:  64%|██████▍   | 501/785 [59:57<33:59,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 501 / 0 / 501:  64%|██████▍   | 502/785 [1:00:03<33:51,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 502 / 0 / 502:  64%|██████▍   | 502/785 [1:00:03<33:51,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 502 / 0 / 502:  64%|██████▍   | 503/785 [1:00:11<33:44,  7.18s/it][[0 (-7605%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static byte[] [[decode]](final byte[] compressed) throws IOException { ByteArrayInputStream byteIn = new ByteArrayInputStream(compressed); ByteArrayOutputStream [[byteOut]] = new ByteArrayOutputStream(); InflaterInputStream [[inflaterIn]] = null; try { [[inflaterIn]] = new InflaterInputStream(byteIn); int [[read]]; byte[] [[buffer]] = new byte[BUFFER_SIZE]; do { [[read]] = [[inflaterIn]].read([[buffer]]); if ([[read]] > 0) { [[byteOut]].write([[buffer]], 0, [[read]]); } } while ([[read]] >= 0); return [[byteOut]].toByteArray(); } finally { [[inflaterIn]].close(); [[byteOut]].close(); } }
[[[[Nl]]]]: Uncompressdecode the data provided using the ZLIB format

[[[[Adv]]]]: public static byte[] [[fiancés]](final byte[] compressed) throws IOException { ByteArrayInputStream byteIn = new ByteArrayInputStream(compressed); ByteArrayOutputStream [[slaughterhouses]] = new ByteArrayOutputStream(); InflaterInputStream [[jockey]] = null; try { [[jockey]] = new InflaterInputStream(byteIn); int [[unbuttoned]]; byte[] [[engagements]] = new byte[BUFFER_SIZE]; do { [[unbuttoned]] = [[jockey]].read([[engagements]]); if ([[unbuttoned]] > 0) { [[slaughterhouses]].write([[engagements]], 0, [[unbuttoned]]); } } while ([[unbuttoned]] >= 0); return [[slaughterhouses]].toByteArray(); } finally { [[jockey]].close(); [[slaughterhouses]].close(); } }
[[[[Nl]]]]: Uncompressdecode the data provided using the ZLIB format
--------------------------------------------- Result 495 ---------------------------------------------
[[0 (-7736%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[getInformationFromMediaDatabase]]() { String[] [[fields]] = {MediaStore.Images.Media.DATA, MediaStore.Images.ImageColumns.ORIENTATION}; Cursor [[cursor]] = resolver.query(uri, [[fields]], null, null, null); if ([[cursor]] == null) return False; [[cursor]].moveToFirst(); path = [[cursor]].getString([[cursor]].getColumnIndex(MediaStore.Images.Media.DATA)); int orientation = [[cursor]].getInt([[cursor]].getColumnIndex(MediaStore.Images.ImageColumns.ORIENTATION)); this.[[orientation]] = new Matrix(); this.[[orientation]].setRotate(orientation); [[cursor]].close(); return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Support for gallery apps and remote ( `` picasa '' ) images

[[[[Adv]]]]: private boolean [[linley]]() { String[] [[knockouts]] = {MediaStore.Images.Media.DATA, MediaStore.Images.ImageColumns.ORIENTATION}; Cursor [[spends]] = resolver.query(uri, [[knockouts]], null, null, null); if ([[spends]] == null) return False; [[spends]].moveToFirst(); path = [[spends]].getString([[spends]].getColumnIndex(MediaStore.Images.Media.DATA)); int orientation = [[spends]].getInt([[spends]].getColumnIndex(MediaStore.Images.ImageColumns.ORIENTATION)); this.[[estelle]] = new Matrix(); this.[[estelle]].setRotate(orientation); [[spends]].close(); return "[["Overtones" == "Overtones"]]" == "[["Overtones" == "Overtones"]]"; }
[[[[Nl]]]]: Support for gallery apps and remote ( `` picasa '' ) images
--------------------------------------------- Result 496 ---------------------------------------------
[[0 (-7616%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[resetIcons]]() { iconFirstAnswer.setVisibility(View.INVISIBLE); iconSecondAnswer.setVisibility(View.INVISIBLE); iconThirdAnswer.setVisibility(View.INVISIBLE); }
[[[[Nl]]]]: This method will reset ( i

[[[[Adv]]]]: private void [[sharecroppers]]() { iconFirstAnswer.setVisibility(View.INVISIBLE); iconSecondAnswer.setVisibility(View.INVISIBLE); iconThirdAnswer.setVisibility(View.INVISIBLE); }
[[[[Nl]]]]: This method will reset ( i
--------------------------------------------- Result 497 ---------------------------------------------
[[0 (-5611%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[w]](String [[tag]], String [[message]], Object... [[params]]) { String [[msg]] = String.format([[message]], [[params]]); if (PrivateData.LOGGING_ENABLED) Log.w(getLogTag([[tag]], [[msg]]), getMessage([[tag]], [[msg]])); }
[[[[Nl]]]]: Wrapper for Log

[[[[Adv]]]]: public static void [[ménage]](String [[canadians]], String [[afflict]], Object... [[discredit]]) { String [[legionnaire]] = String.format([[afflict]], [[discredit]]); if (PrivateData.LOGGING_ENABLED) Log.w(getLogTag([[canadians]], [[legionnaire]]), getMessage([[canadians]], [[legionnaire]])); }
[[[[Nl]]]]: Wrapper for Log
--------------------------------------------- Result 498 ---------------------------------------------
[[0 (-9098%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setShowDuration]](long [[showDuration]]) { this.[[showDuration]] = [[showDuration]]; setShareLinesViewData(); }
[[[[Nl]]]]: Set the duration of every boom-button when booming

[[[[Adv]]]]: public void [[encoded]](long [[pixar]]) { this.[[salvato]] = [[pixar]]; setShareLinesViewData(); }
[[[[Nl]]]]: Set the duration of every boom-button when booming
--------------------------------------------- Result 499 ---------------------------------------------
[[0 (-5149%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public GifDrawableBuilder [[from]](String [[filePath]]) { mInputSource = new FileSource([[filePath]]); return this; }
[[[[Nl]]]]: Wrapper of { @ link pl

[[[[Adv]]]]: public GifDrawableBuilder [[delle]](String [[bachelorhood]]) { mInputSource = new FileSource([[bachelorhood]]); return this; }
[[[[Nl]]]]: Wrapper of { @ link pl
--------------------------------------------- Result 500 ---------------------------------------------
[[0 (-10038%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setDefaultPhoto]](ImageView [[imageView]] , Resources [[resources]], MaterialPalette [[materialPalette]]) { [[imageView]].setImageDrawable(ContactPhotoManager.getDefaultAvatarDrawableForContact( [[resources]], "[[False]]" != "[[False]]", null)); if ([[imageView]] instanceof QuickContactImageView) { ((QuickContactImageView) [[imageView]]).setTint([[materialPalette]] == null ? getDefaultPrimaryAndSecondaryColors([[resources]]).mPrimaryColor : [[materialPalette]].mPrimaryColor); } }
[[[[Nl]]]]: Binds the default avatar to the given ImageView and tints it to match QuickContacts

[[[[Adv]]]]: public static void [[crosswords]](ImageView [[chefs]] , Resources [[poisons]], MaterialPalette [[hillbillies]]) { [[chefs]].setImageDrawable(ContactPhotoManager.getDefaultAvatarDrawableForContact( [[poisons]], "[["Earns" != "Earns"]]" != "[["Earns" != "Earns"]]", null)); if ([[chefs]] instanceof QuickContactImageView) { ((QuickContactImageView) [[chefs]]).setTint([[hillbillies]] == null ? getDefaultPrimaryAndSecondaryColors([[poisons]]).mPrimaryColor : [[hillbillies]].mPrimaryColor); } }
[[[[Nl]]]]: Binds the default avatar to the given ImageView and tints it to match QuickContacts
--------------------------------------------- Result 501 ---------------------------------------------
[[0 (-7784%)]] --> [[[FAILED]]]

[[[[Adv]]]]: List<Type> attribTypes(List<JCExpression> trees, Env<AttrContext> env) { List<Type> [[types]] = attribAnyTypes(trees, env); return chk.checkRefTypes(trees, [[types]]); }
[[[[Nl]]]]: Attribute a type argument list , returning a list of types

[[[[Adv]]]]: List<Type> attribTypes(List<JCExpression> trees, Env<AttrContext> env) { List<Type> [[mère]] = attribAnyTypes(trees, env); return chk.checkRefTypes(trees, [[mère]]); }
[[[[Nl]]]]: Attribute a type argument list , returning a list of types
--------------------------------------------- Result 502 ---------------------------------------------
[[0 (-9315%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Iterator<Option> [[getOptions]]() { synchronized (options) { return Collections.unmodifiableList(new ArrayList<Option>(options)).iterator(); } }
[[[[Nl]]]]: Returns an Iterator for the available options that the user has in order to answer the question

[[[[Adv]]]]: public Iterator<Option> [[proles]]() { synchronized (options) { return Collections.unmodifiableList(new ArrayList<Option>(options)).iterator(); } }
[[[[Nl]]]]: Returns an Iterator for the available options that the user has in order to answer the question
--------------------------------------------- Result 503 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 503 / 0 / 503:  64%|██████▍   | 503/785 [1:00:11<33:44,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 503 / 0 / 503:  64%|██████▍   | 504/785 [1:00:23<33:40,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 504 / 0 / 504:  64%|██████▍   | 504/785 [1:00:23<33:40,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 504 / 0 / 504:  64%|██████▍   | 505/785 [1:00:26<33:30,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 505 / 0 / 505:  64%|██████▍   | 505/785 [1:00:26<33:30,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 505 / 0 / 505:  64%|██████▍   | 506/785 [1:00:30<33:21,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 506 / 0 / 506:  64%|██████▍   | 506/785 [1:00:30<33:21,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 506 / 0 / 506:  65%|██████▍   | 507/785 [1:00:36<33:14,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 507 / 0 / 507:  65%|██████▍   | 507/785 [1:00:36<33:14,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 507 / 0 / 507:  65%|██████▍   | 508/785 [1:00:49<33:10,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 508 / 0 / 508:  65%|██████▍   | 508/785 [1:00:49<33:10,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 508 / 0 / 508:  65%|██████▍   | 509/785 [1:00:53<33:01,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 509 / 0 / 509:  65%|██████▍   | 509/785 [1:00:53<33:01,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 509 / 0 / 509:  65%|██████▍   | 510/785 [1:01:05<32:56,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 510 / 0 / 510:  65%|██████▍   | 510/785 [1:01:05<32:56,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 510 / 0 / 510:  65%|██████▌   | 511/785 [1:01:07<32:46,  7.18s/it][[0 (-7108%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[getRecipeInfo]](int[] [[ids]], Callback<List<Recipe>> [[callback]]) throws GuildWars2Exception, NullPointerException { isParamValid(new ParamChecker([[ids]])); gw2API.getRecipeInfo(processIds([[ids]])).enqueue([[callback]]); }
[[[[Nl]]]]: For more info on Recipes API go < a href= '' https : wiki

[[[[Adv]]]]: public void [[splash]](int[] [[winkel]], Callback<List<Recipe>> [[eclipse]]) throws GuildWars2Exception, NullPointerException { isParamValid(new ParamChecker([[winkel]])); gw2API.getRecipeInfo(processIds([[winkel]])).enqueue([[eclipse]]); }
[[[[Nl]]]]: For more info on Recipes API go < a href= '' https : wiki
--------------------------------------------- Result 504 ---------------------------------------------
[[0 (-10944%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[set_maxErroneousBitsInBorderRate]](double [[maxErroneousBitsInBorderRate]]) { set_maxErroneousBitsInBorderRate_0(nativeObj, [[maxErroneousBitsInBorderRate]]); return; }
[[[[Nl]]]]: javadoc : DetectorParameters : :set_maxErroneousBitsInBorderRate ( maxErroneousBitsInBorderRate )

[[[[Adv]]]]: public void [[financials]](double [[millenniums]]) { set_maxErroneousBitsInBorderRate_0(nativeObj, [[millenniums]]); return; }
[[[[Nl]]]]: javadoc : DetectorParameters : :set_maxErroneousBitsInBorderRate ( maxErroneousBitsInBorderRate )
--------------------------------------------- Result 505 ---------------------------------------------
[[0 (-8257%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[query]](@AccessPolicy final int [[policy]], @NonNull final Call<T> [[call]], @NonNull QueryStrategy<T, C> queryStrategy, @NonNull final IRepositoryCallback<T> [[callback]]) { Query<T> [[repositoryQuery]] = [[query]]([[policy]], [[call]], queryStrategy); [[repositoryQuery]].onSuccess([[callback]]::onSuccess).onError([[callback]]::onError).run(); }
[[[[Nl]]]]: Queries the corresponding information provider , either network or cache depending on the conditions , in order to retrieve information and handle it to the user

[[[[Adv]]]]: public void [[undies]](@AccessPolicy final int [[citation]], @NonNull final Call<T> [[alea]], @NonNull QueryStrategy<T, C> queryStrategy, @NonNull final IRepositoryCallback<T> [[norwalk]]) { Query<T> [[stage]] = [[undies]]([[citation]], [[alea]], queryStrategy); [[stage]].onSuccess([[norwalk]]::onSuccess).onError([[norwalk]]::onError).run(); }
[[[[Nl]]]]: Queries the corresponding information provider , either network or cache depending on the conditions , in order to retrieve information and handle it to the user
--------------------------------------------- Result 506 ---------------------------------------------
[[0 (-8869%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public LoyaltyProgram [[getSingle]](int [[id]]) { Cursor [[cursor]] = dbMain.query(tableNameMain, tableColumnsMain, dbHelperMain.COLUMN_LP_ID + " = " + [[id]], null, null, null, null); [[cursor]].moveToFirst(); LoyaltyProgram [[program]] = cursorToProgram([[cursor]]); [[cursor]].close(); return [[program]]; }
[[[[Nl]]]]: Returns a single loyalty program by program ID

[[[[Adv]]]]: public LoyaltyProgram [[interlock]](int [[excludes]]) { Cursor [[spoiler]] = dbMain.query(tableNameMain, tableColumnsMain, dbHelperMain.COLUMN_LP_ID + " = " + [[excludes]], null, null, null, null); [[spoiler]].moveToFirst(); LoyaltyProgram [[show]] = cursorToProgram([[spoiler]]); [[spoiler]].close(); return [[show]]; }
[[[[Nl]]]]: Returns a single loyalty program by program ID
--------------------------------------------- Result 507 ---------------------------------------------
[[0 (-8493%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Observable<OAuthResponse> [[requestOAuthTokens]](String [[code]]) { return buildRxRetrofit().create(API.class).requestOAuthTokens( Toot.getClientID(), Toot.getClientSecret(), REDIRECT_URI, "authorization_code", [[code]], SCOPES ); }
[[[[Nl]]]]: Returns an Observable that exposes an OAuth token response

[[[[Adv]]]]: public Observable<OAuthResponse> [[tiff]](String [[solitaire]]) { return buildRxRetrofit().create(API.class).requestOAuthTokens( Toot.getClientID(), Toot.getClientSecret(), REDIRECT_URI, "authorization_code", [[solitaire]], SCOPES ); }
[[[[Nl]]]]: Returns an Observable that exposes an OAuth token response
--------------------------------------------- Result 508 ---------------------------------------------
[[0 (-7065%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Cursor [[getAllItems]]() { Cursor [[cursor]] = db.query(CONTACTS_TABLE, CONTACT_COLS, null, null, null, null, null); return db.query(CONTACTS_TABLE, CONTACT_COLS, null, null, null, null, null); }
[[[[Nl]]]]: database query methods

[[[[Adv]]]]: public Cursor [[sshh]]() { Cursor [[centerfold]] = db.query(CONTACTS_TABLE, CONTACT_COLS, null, null, null, null, null); return db.query(CONTACTS_TABLE, CONTACT_COLS, null, null, null, null, null); }
[[[[Nl]]]]: database query methods
--------------------------------------------- Result 509 ---------------------------------------------
[[0 (-9520%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static double [[getFieldTrialParamByFeatureAsDouble]]( String [[featureName]], String [[paramName]], double [[defaultValue]]) { return nativeGetFieldTrialParamByFeatureAsDouble([[featureName]], [[paramName]], [[defaultValue]]); }
[[[[Nl]]]]: Returns a field trial param as a double for the specified feature

[[[[Adv]]]]: public static double [[fingertip]]( String [[repaint]], String [[weíre]], double [[flicked]]) { return nativeGetFieldTrialParamByFeatureAsDouble([[repaint]], [[weíre]], [[flicked]]); }
[[[[Nl]]]]: Returns a field trial param as a double for the specified feature
--------------------------------------------- Result 510 ---------------------------------------------
[[0 (-9283%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void encryptFields( final Object [[classInstance]]) {; for (Field [[declaredField]] : [[classInstance]].getClass().getDeclaredFields()) { if (!isInNotEncypt([[declaredField]].getName())) { [[declaredField]].setAccessible("[[True]]" == "[[True]]"); String [[value]]= null; try { if( [[declaredField]].getType().isAssignableFrom(String.class) ){ [[value]] = String.valueOf([[declaredField]].get([[classInstance]])); String [[encryptedValue]]= new String(crypto.encrypt([[value]].getBytes())); MyLogger.debug("Field value " + [[value]]); MyLogger.debug("Field value Encrypted " + [[encryptedValue]]); [[declaredField]].set([[classInstance]], [[encryptedValue]]); } } catch (IllegalAccessException e) { e.printStackTrace(); } } } }
[[[[Nl]]]]: Encrypt the fields when doing any AddEdit Operations of an object @ param classInstance @ throws SecurityException @ throws NoSuchFieldException @ throws ClassNotFoundException @ throws IllegalArgumentException @ throws IllegalAccessException

[[[[Adv]]]]: public void encryptFields( final Object [[speedo]]) {; for (Field [[cabeça]] : [[speedo]].getClass().getDeclaredFields()) { if (!isInNotEncypt([[cabeça]].getName())) { [[cabeça]].setAccessible("[["Arizona" == "Arizona"]]" == "[["Arizona" == "Arizona"]]"); String [[chat]]= null; try { if( [[cabeça]].getType().isAssignableFrom(String.class) ){ [[chat]] = String.valueOf([[cabeça]].get([[speedo]])); String [[video]]= new String(crypto.encrypt([[chat]].getBytes())); MyLogger.debug("Field value " + [[chat]]); MyLogger.debug("Field value Encrypted " + [[video]]); [[cabeça]].set([[speedo]], [[video]]); } } catch (IllegalAccessException e) { e.printStackTrace(); } } } }
[[[[Nl]]]]: Encrypt the fields when doing any AddEdit Operations of an object @ param classInstance @ throws SecurityException @ throws NoSuchFieldException @ throws ClassNotFoundException @ throws IllegalArgumentException @ throws IllegalAccessException
--------------------------------------------- Result 511 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 511 / 0 / 511:  65%|██████▌   | 511/785 [1:01:07<32:46,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 511 / 0 / 511:  65%|██████▌   | 512/785 [1:01:24<32:44,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 512 / 0 / 512:  65%|██████▌   | 512/785 [1:01:24<32:44,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 512 / 0 / 512:  65%|██████▌   | 513/785 [1:01:24<32:33,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 513 / 0 / 513:  65%|██████▌   | 513/785 [1:01:24<32:33,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 513 / 0 / 513:  65%|██████▌   | 514/785 [1:01:27<32:24,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 514 / 0 / 514:  65%|██████▌   | 514/785 [1:01:27<32:24,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 514 / 0 / 514:  66%|██████▌   | 515/785 [1:01:43<32:21,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 515 / 0 / 515:  66%|██████▌   | 515/785 [1:01:43<32:21,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 515 / 0 / 515:  66%|██████▌   | 516/785 [1:01:51<32:14,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 516 / 0 / 516:  66%|██████▌   | 516/785 [1:01:51<32:14,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 516 / 0 / 516:  66%|██████▌   | 517/785 [1:01:53<32:05,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 517 / 0 / 517:  66%|██████▌   | 517/785 [1:01:53<32:05,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 517 / 0 / 517:  66%|██████▌   | 518/785 [1:02:03<31:59,  7.19s/it][[0 (-8556%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getAmplitudeEMA]]() { double [[amp]] = getAmplitude(); mEMA = EMA_FILTER * [[amp]] + (1.0 - EMA_FILTER) * mEMA; return mEMA; }
[[[[Nl]]]]: get the mic amplitude @ return amplitude

[[[[Adv]]]]: public double [[darkened]]() { double [[prevents]] = getAmplitude(); mEMA = EMA_FILTER * [[prevents]] + (1.0 - EMA_FILTER) * mEMA; return mEMA; }
[[[[Nl]]]]: get the mic amplitude @ return amplitude
--------------------------------------------- Result 512 ---------------------------------------------
[[0 (-9108%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[testIssue182]]() throws Exception { Exception [[exceptionCaught]] = null; try { File [[testFile]] = AbstractTestCase.copyAudioToTmp("test16.m4a"); AudioFile [[f]] = AudioFileIO.read([[testFile]]); Mp4Tag [[tag]] = (Mp4Tag) [[f]].getTag(); System.out.println([[f]].getAudioHeader()); System.out.println([[tag]]); assertEquals("Suerte", [[tag]].getFirst(FieldKey.ARTIST)); assertEquals("Kogani", [[tag]].getFirst(FieldKey.TITLE)); } catch (IOException e) { e.printStackTrace(); [[exceptionCaught]] = e; } assertNull([[exceptionCaught]]); }
[[[[Nl]]]]: Tests reading of winamp encoded files , that contain additional scene tracks

[[[[Adv]]]]: public void [[cancelling]]() throws Exception { Exception [[jamaicans]] = null; try { File [[exhilarated]] = AbstractTestCase.copyAudioToTmp("test16.m4a"); AudioFile [[kanazawa]] = AudioFileIO.read([[exhilarated]]); Mp4Tag [[spela]] = (Mp4Tag) [[kanazawa]].getTag(); System.out.println([[kanazawa]].getAudioHeader()); System.out.println([[spela]]); assertEquals("Suerte", [[spela]].getFirst(FieldKey.ARTIST)); assertEquals("Kogani", [[spela]].getFirst(FieldKey.TITLE)); } catch (IOException e) { e.printStackTrace(); [[jamaicans]] = e; } assertNull([[jamaicans]]); }
[[[[Nl]]]]: Tests reading of winamp encoded files , that contain additional scene tracks
--------------------------------------------- Result 513 ---------------------------------------------
[[0 (-10902%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[setPhoneBookFolderDown]](String [[folder]]) { BluetoothPbapRequest [[req]] = new BluetoothPbapRequestSetPath([[folder]]); return mSession.makeRequest([[req]]); }
[[[[Nl]]]]: Sets current folder to selected sub-folder @ param folder the name of the sub-folder @ return @ return < code > true < code > if request has been sent successfully ; < code > false < code > otherwise ; upon completion PCE sends { @ link # EVENT_SET_PHONE_BOOK_DONE } or { @ link # EVENT_SET_PHONE_BOOK_ERROR } in case of failure

[[[[Adv]]]]: public boolean [[brews]](String [[maddalena]]) { BluetoothPbapRequest [[straightjacket]] = new BluetoothPbapRequestSetPath([[maddalena]]); return mSession.makeRequest([[straightjacket]]); }
[[[[Nl]]]]: Sets current folder to selected sub-folder @ param folder the name of the sub-folder @ return @ return < code > true < code > if request has been sent successfully ; < code > false < code > otherwise ; upon completion PCE sends { @ link # EVENT_SET_PHONE_BOOK_DONE } or { @ link # EVENT_SET_PHONE_BOOK_ERROR } in case of failure
--------------------------------------------- Result 514 ---------------------------------------------
[[0 (-7926%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isEffectSupported]](int [[effectId]]) { if (sFilterIsAvailable == null) return "[[False]]" != "[[False]]"; try { switch ([[effectId]]) { case EFFECT_GOOFY_FACE: return (Boolean) sFilterIsAvailable.invoke(null, "com.google.android.filterpacks.facedetect.GoofyRenderFilter"); case EFFECT_BACKDROPPER: return (Boolean) sFilterIsAvailable.invoke(null, "android.filterpacks.videoproc.BackDropperFilter"); default: return "[[False]]" != "[[False]]"; } } catch (Exception ex) { Log.e(TAG, "Fail to check filter", ex); } return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: Determine if a given effect is supported at runtime Some effects require libraries not available on all devices

[[[[Adv]]]]: public static boolean [[daycare]](int [[gonçalves]]) { if (sFilterIsAvailable == null) return "[["Blazes" != "Blazes"]]" != "[["Blazes" != "Blazes"]]"; try { switch ([[gonçalves]]) { case EFFECT_GOOFY_FACE: return (Boolean) sFilterIsAvailable.invoke(null, "com.google.android.filterpacks.facedetect.GoofyRenderFilter"); case EFFECT_BACKDROPPER: return (Boolean) sFilterIsAvailable.invoke(null, "android.filterpacks.videoproc.BackDropperFilter"); default: return "[["Blazes" != "Blazes"]]" != "[["Blazes" != "Blazes"]]"; } } catch (Exception ex) { Log.e(TAG, "Fail to check filter", ex); } return "[["Blazes" != "Blazes"]]" != "[["Blazes" != "Blazes"]]"; }
[[[[Nl]]]]: Determine if a given effect is supported at runtime Some effects require libraries not available on all devices
--------------------------------------------- Result 515 ---------------------------------------------
[[0 (-9717%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getDateNow]]() { DateFormat [[dateFormat]] = new SimpleDateFormat("yyyy-MM-dd"); Date [[date]] = new Date(); return [[dateFormat]].format([[date]]); }
[[[[Nl]]]]: Return Now Date

[[[[Adv]]]]: public static String [[icecap]]() { DateFormat [[unromantic]] = new SimpleDateFormat("yyyy-MM-dd"); Date [[jarjar]] = new Date(); return [[unromantic]].format([[jarjar]]); }
[[[[Nl]]]]: Return Now Date
--------------------------------------------- Result 516 ---------------------------------------------
[[0 (-10332%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[postRequest]](@NonNull final BillingRequest [[billingRequest]]) { ASChecks.checkThread("[[True]]" == "[[True]]"); final SetupResponse [[setupResponse]]; if (isBusy()) { ASIab.post(BillingUtils.emptyResponse(null, [[billingRequest]], BUSY)); } else if (([[setupResponse]] = getSetupResponse()) == null || ![[setupResponse]].isSuccessful()) { ASIab.post(BillingUtils.emptyResponse(null, [[billingRequest]], NO_BILLING_PROVIDER)); } else if (configuration.skipStaleRequests() && BillingUtils.isStale([[billingRequest]])) { ASLog.d("Skipping stale request: " + [[billingRequest]]); BillingRequestScheduler.getInstance().handleNext(); } else { pendingRequest = [[billingRequest]]; ASIab.post([[billingRequest]]); } }
[[[[Nl]]]]: Attempts to execute supplied billing request using current billing provider

[[[[Adv]]]]: void [[maréchal]](@NonNull final BillingRequest [[manicures]]) { ASChecks.checkThread("[["Knaves" == "Knaves"]]" == "[["Knaves" == "Knaves"]]"); final SetupResponse [[rainbows]]; if (isBusy()) { ASIab.post(BillingUtils.emptyResponse(null, [[manicures]], BUSY)); } else if (([[rainbows]] = getSetupResponse()) == null || ![[rainbows]].isSuccessful()) { ASIab.post(BillingUtils.emptyResponse(null, [[manicures]], NO_BILLING_PROVIDER)); } else if (configuration.skipStaleRequests() && BillingUtils.isStale([[manicures]])) { ASLog.d("Skipping stale request: " + [[manicures]]); BillingRequestScheduler.getInstance().handleNext(); } else { pendingRequest = [[manicures]]; ASIab.post([[manicures]]); } }
[[[[Nl]]]]: Attempts to execute supplied billing request using current billing provider
--------------------------------------------- Result 517 ---------------------------------------------
[[0 (-9667%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[put]](@NonNull byte[] [[bs]], short [[value]], int [[index]]) { [[bs]][[[index]]] = (byte) ([[value]] & 0xFF); [[bs]][[[index]] + 1] = (byte) (([[value]] >>> 8) & 0xFF); }
[[[[Nl]]]]: ue put byte array @ param bs bytes @ param value short value @ param index bytes offset public static v

[[[[Adv]]]]: public static void [[fight]](@NonNull byte[] [[concealment]], short [[globalisation]], int [[novelists]]) { [[concealment]][[[novelists]]] = (byte) ([[globalisation]] & 0xFF); [[concealment]][[[novelists]] + 1] = (byte) (([[globalisation]] >>> 8) & 0xFF); }
[[[[Nl]]]]: ue put byte array @ param bs bytes @ param value short value @ param index bytes offset public static v
--------------------------------------------- Result 518 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 518 / 0 / 518:  66%|██████▌   | 518/785 [1:02:03<31:59,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 518 / 0 / 518:  66%|██████▌   | 519/785 [1:02:09<31:51,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 519 / 0 / 519:  66%|██████▌   | 519/785 [1:02:09<31:51,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 519 / 0 / 519:  66%|██████▌   | 520/785 [1:02:21<31:46,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 520 / 0 / 520:  66%|██████▌   | 520/785 [1:02:21<31:46,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 520 / 0 / 520:  66%|██████▋   | 521/785 [1:02:25<31:38,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 521 / 0 / 521:  66%|██████▋   | 521/785 [1:02:25<31:38,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 521 / 0 / 521:  66%|██████▋   | 522/785 [1:02:28<31:28,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 522 / 0 / 522:  66%|██████▋   | 522/785 [1:02:28<31:28,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 522 / 0 / 522:  67%|██████▋   | 523/785 [1:02:43<31:25,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 523 / 0 / 523:  67%|██████▋   | 523/785 [1:02:43<31:25,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 523 / 0 / 523:  67%|██████▋   | 524/785 [1:02:48<31:17,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 524 / 0 / 524:  67%|██████▋   | 524/785 [1:02:48<31:17,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 524 / 0 / 524:  67%|██████▋   | 525/785 [1:02:51<31:07,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 525 / 0 / 525:  67%|██████▋   | 525/785 [1:02:51<31:07,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 525 / 0 / 525:  67%|██████▋   | 526/785 [1:03:04<31:03,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 526 / 0 / 526:  67%|██████▋   | 526/785 [1:03:04<31:03,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 526 / 0 / 526:  67%|██████▋   | 527/785 [1:03:08<30:54,  7.19s/it][[0 (-9769%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[cancelTask]]() { if (mCurrentTask != null) mCurrentTask.cancel("[[True]]" == "[[True]]"); mIsProcessing.set("[[False]]" != "[[False]]"); }
[[[[Nl]]]]: Cancel the current < code > AsyncTask < code >

[[[[Adv]]]]: public void [[magnum]]() { if (mCurrentTask != null) mCurrentTask.cancel("[["Tool" == "Tool"]]" == "[["Tool" == "Tool"]]"); mIsProcessing.set("[["Tamiya" != "Tamiya"]]" != "[["Tamiya" != "Tamiya"]]"); }
[[[[Nl]]]]: Cancel the current < code > AsyncTask < code >
--------------------------------------------- Result 519 ---------------------------------------------
[[0 (-6893%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[playNext]]() { trackPosition++; if (trackPosition >= tracks.size()) trackPosition = 0; playNewTrack(); }
[[[[Nl]]]]: Skip to next track

[[[[Adv]]]]: public void [[butters]]() { trackPosition++; if (trackPosition >= tracks.size()) trackPosition = 0; playNewTrack(); }
[[[[Nl]]]]: Skip to next track
--------------------------------------------- Result 520 ---------------------------------------------
[[0 (-11258%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Intent [[createIntent]](Context [[context]], boolean [[restartChrome]]) { Intent [[intent]] = new Intent(); [[intent]].setClassName([[context]].getPackageName(), BrowserRestartActivity.class.getName()); [[intent]].setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); [[intent]].putExtra(BrowserRestartActivity.EXTRA_MAIN_PID, Process.myPid()); [[intent]].putExtra(BrowserRestartActivity.EXTRA_RESTART, [[restartChrome]]); return [[intent]]; }
[[[[Nl]]]]: Creates an Intent to start the { @ link BrowserRestartActivity }

[[[[Adv]]]]: public static Intent [[flippin]](Context [[cakewalk]], boolean [[specimen]]) { Intent [[rainstorm]] = new Intent(); [[rainstorm]].setClassName([[cakewalk]].getPackageName(), BrowserRestartActivity.class.getName()); [[rainstorm]].setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); [[rainstorm]].putExtra(BrowserRestartActivity.EXTRA_MAIN_PID, Process.myPid()); [[rainstorm]].putExtra(BrowserRestartActivity.EXTRA_RESTART, [[specimen]]); return [[rainstorm]]; }
[[[[Nl]]]]: Creates an Intent to start the { @ link BrowserRestartActivity }
--------------------------------------------- Result 521 ---------------------------------------------
[[0 (-9588%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Dialog [[createDialogFrom]](T [[object]], AnnotationDialogListener<T> [[listener]]) { DialogClassData<T> data = prepareDataForClass((Class<T>) [[object]].getClass()); AlertDialog.Builder [[builder]] = new AlertDialog.Builder(ctx); DialogDataManager<T> [[man]] = new DialogDataManager<>([[object]], data, [[builder]]); [[man]].setTitle(); [[man]].setView(ctx); [[man]].setButtons([[listener]]); dialog = [[builder]].create(); dialog.show(); [[man]].setPositiveButtonListener((AlertDialog) dialog, [[listener]]); return dialog; }
[[[[Nl]]]]: Creates dialog based on object 's class annotations , applies listener for dialog results and shows dialog

[[[[Adv]]]]: public Dialog [[lockup]](T [[spicy]], AnnotationDialogListener<T> [[washable]]) { DialogClassData<T> data = prepareDataForClass((Class<T>) [[spicy]].getClass()); AlertDialog.Builder [[pumpkinhead]] = new AlertDialog.Builder(ctx); DialogDataManager<T> [[covenants]] = new DialogDataManager<>([[spicy]], data, [[pumpkinhead]]); [[covenants]].setTitle(); [[covenants]].setView(ctx); [[covenants]].setButtons([[washable]]); dialog = [[pumpkinhead]].create(); dialog.show(); [[covenants]].setPositiveButtonListener((AlertDialog) dialog, [[washable]]); return dialog; }
[[[[Nl]]]]: Creates dialog based on object 's class annotations , applies listener for dialog results and shows dialog
--------------------------------------------- Result 522 ---------------------------------------------
[[0 (-7555%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[initRecorder]]() { _recorder = new AudioRecord(MediaRecorder.AudioSource.MIC, SAMPLING_RATE, RECORDER_CHANNELS, RECORDER_AUDIO_ENCODING, BUFFER_SIZE); }
[[[[Nl]]]]: Recorder initialization ( no kidding

[[[[Adv]]]]: private void [[expunge]]() { _recorder = new AudioRecord(MediaRecorder.AudioSource.MIC, SAMPLING_RATE, RECORDER_CHANNELS, RECORDER_AUDIO_ENCODING, BUFFER_SIZE); }
[[[[Nl]]]]: Recorder initialization ( no kidding
--------------------------------------------- Result 523 ---------------------------------------------
[[0 (-10028%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[displayAddEditFragment]](int [[viewID]], Uri movieUri) { AddEditFragment [[addEditFragment]] = new AddEditFragment(); if (movieUri != null) { Bundle [[arguments]] = new Bundle(); [[arguments]].putParcelable(MOVIE_URI, movieUri); [[addEditFragment]].setArguments([[arguments]]); } FragmentTransaction [[transaction]] = getSupportFragmentManager().beginTransaction(); [[transaction]].replace([[viewID]], [[addEditFragment]]); [[transaction]].addToBackStack(null); [[transaction]].commit(); }
[[[[Nl]]]]: display fragment for adding a new or editing an existing movie

[[[[Adv]]]]: private void [[escapade]](int [[crosswords]], Uri movieUri) { AddEditFragment [[rhinoceroses]] = new AddEditFragment(); if (movieUri != null) { Bundle [[anthropological]] = new Bundle(); [[anthropological]].putParcelable(MOVIE_URI, movieUri); [[rhinoceroses]].setArguments([[anthropological]]); } FragmentTransaction [[patronymic]] = getSupportFragmentManager().beginTransaction(); [[patronymic]].replace([[crosswords]], [[rhinoceroses]]); [[patronymic]].addToBackStack(null); [[patronymic]].commit(); }
[[[[Nl]]]]: display fragment for adding a new or editing an existing movie
--------------------------------------------- Result 524 ---------------------------------------------
[[0 (-8453%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected final int [[argWidth]]() { int [[result]] = 0; for (int [[i]] = 0; [[i]] < argCount; [[i]]++) { [[result]] += args[[[i]]].getType().getCategory(); } return [[result]]; }
[[[[Nl]]]]: Gets the width of the arguments ( where a category-2 value counts as two )

[[[[Adv]]]]: protected final int [[postscript]]() { int [[numero]] = 0; for (int [[sweetie]] = 0; [[sweetie]] < argCount; [[sweetie]]++) { [[numero]] += args[[[sweetie]]].getType().getCategory(); } return [[numero]]; }
[[[[Nl]]]]: Gets the width of the arguments ( where a category-2 value counts as two )
--------------------------------------------- Result 525 ---------------------------------------------
[[0 (-5057%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isBetween]](int [[start]], int [[end]], int [[value]]) { return ([[value]] >= [[start]] && [[value]] <= [[end]]); }
[[[[Nl]]]]: Metodo per verifica di appartenenza di un valore ad un intervallo

[[[[Adv]]]]: private boolean [[wriggle]](int [[lm]], int [[emit]], int [[excludes]]) { return ([[excludes]] >= [[lm]] && [[excludes]] <= [[emit]]); }
[[[[Nl]]]]: Metodo per verifica di appartenenza di un valore ad un intervallo
--------------------------------------------- Result 526 ---------------------------------------------
[[0 (-9485%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[showProfileLoggedIn]]() { titleTextView.setText(R.string.profile_title_logged_in); emailTextView.setText(currentUser.getEmail()); String [[fullName]] = currentUser.getString("name"); if ([[fullName]] != null) { nameTextView.setText([[fullName]]); } loginOrLogoutButton.setText(R.string.profile_logout_button_label); }
[[[[Nl]]]]: Shows the profile of the given user

[[[[Adv]]]]: private void [[turks]]() { titleTextView.setText(R.string.profile_title_logged_in); emailTextView.setText(currentUser.getEmail()); String [[tarantula]] = currentUser.getString("name"); if ([[tarantula]] != null) { nameTextView.setText([[tarantula]]); } loginOrLogoutButton.setText(R.string.profile_logout_button_label); }
[[[[Nl]]]]: Shows the profile of the given user
--------------------------------------------- Result 527 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 527 / 0 / 527:  67%|██████▋   | 527/785 [1:03:08<30:54,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 527 / 0 / 527:  67%|██████▋   | 528/785 [1:03:16<30:47,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 528 / 0 / 528:  67%|██████▋   | 528/785 [1:03:16<30:47,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 528 / 0 / 528:  67%|██████▋   | 529/785 [1:03:21<30:39,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 529 / 0 / 529:  67%|██████▋   | 529/785 [1:03:21<30:39,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 529 / 0 / 529:  68%|██████▊   | 530/785 [1:03:22<30:29,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 530 / 0 / 530:  68%|██████▊   | 530/785 [1:03:22<30:29,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 530 / 0 / 530:  68%|██████▊   | 531/785 [1:03:30<30:22,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 531 / 0 / 531:  68%|██████▊   | 531/785 [1:03:30<30:22,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 531 / 0 / 531:  68%|██████▊   | 532/785 [1:03:35<30:14,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 532 / 0 / 532:  68%|██████▊   | 532/785 [1:03:35<30:14,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 532 / 0 / 532:  68%|██████▊   | 533/785 [1:03:36<30:04,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 533 / 0 / 533:  68%|██████▊   | 533/785 [1:03:36<30:04,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 533 / 0 / 533:  68%|██████▊   | 534/785 [1:03:36<29:53,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 534 / 0 / 534:  68%|██████▊   | 534/785 [1:03:36<29:53,  7.15s/it][Succeeded / Failed / Skipped / Total] 0 / 534 / 0 / 534:  68%|██████▊   | 535/785 [1:03:55<29:52,  7.17s/it][[0 (-7340%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[startSequenceInternal]](Phone [[phone]], Callback [[callback]]) { Log.d(this, "startSequenceInternal: Phone " + [[phone]].getPhoneId()); cleanup(); mPhone = [[phone]]; mCallback = [[callback]]; registerForServiceStateChanged(); startRetryTimer(); }
[[[[Nl]]]]: Actual implementation of waitForRadioOn ( ) , guaranteed to run on the handler thread

[[[[Adv]]]]: private void [[downstate]](Phone [[leffe]], Callback [[galvanized]]) { Log.d(this, "startSequenceInternal: Phone " + [[leffe]].getPhoneId()); cleanup(); mPhone = [[leffe]]; mCallback = [[galvanized]]; registerForServiceStateChanged(); startRetryTimer(); }
[[[[Nl]]]]: Actual implementation of waitForRadioOn ( ) , guaranteed to run on the handler thread
--------------------------------------------- Result 528 ---------------------------------------------
[[0 (-8932%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static ResourceUrl [[create]](@NonNull ResourceType [[type]], @NonNull String [[name]], boolean [[framework]], boolean [[create]]) { return new ResourceUrl([[type]], [[name]], [[framework]], [[create]]); }
[[[[Nl]]]]: Creates a new resource URL

[[[[Adv]]]]: public static ResourceUrl [[nï]](@NonNull ResourceType [[marta]], @NonNull String [[ín]], boolean [[unhealthy]], boolean [[antidepressants]]) { return new ResourceUrl([[marta]], [[ín]], [[unhealthy]], [[nï]]); }
[[[[Nl]]]]: Creates a new resource URL
--------------------------------------------- Result 529 ---------------------------------------------
[[0 (-8244%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[clearFocus]]() { if (DBG) { System.out.println(this + " clearFocus()"); } clearFocusInternal(null, "[[True]]" == "[[True]]", "[[True]]" == "[[True]]"); }
[[[[Nl]]]]: Called when this view wants to give up focus

[[[[Adv]]]]: public void [[orphans]]() { if (DBG) { System.out.println(this + " clearFocus()"); } clearFocusInternal(null, "[["Liners" == "Liners"]]" == "[["Liners" == "Liners"]]", "[["Liners" == "Liners"]]" == "[["Liners" == "Liners"]]"); }
[[[[Nl]]]]: Called when this view wants to give up focus
--------------------------------------------- Result 530 ---------------------------------------------
[[0 (-8331%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareThread]]() { if (Looper.myLooper() == null) { Looper.prepareMainLooper(); } }
[[[[Nl]]]]: Prepares the current thread for rendering

[[[[Adv]]]]: public static void [[flicked]]() { if (Looper.myLooper() == null) { Looper.prepareMainLooper(); } }
[[[[Nl]]]]: Prepares the current thread for rendering
--------------------------------------------- Result 531 ---------------------------------------------
[[0 (-9984%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Coin [[getInputSum]]() { Coin [[inputTotal]] = Coin.ZERO; for (TransactionInput [[input]]: inputs) { Coin [[inputValue]] = [[input]].getValue(); if ([[inputValue]] != null) { [[inputTotal]] = [[inputTotal]].add([[inputValue]]); } } return [[inputTotal]]; }
[[[[Nl]]]]: Gets the sum of the inputs , regardless of who owns them

[[[[Adv]]]]: public Coin [[representation]]() { Coin [[templar]] = Coin.ZERO; for (TransactionInput [[moira]]: inputs) { Coin [[commissar]] = [[moira]].getValue(); if ([[commissar]] != null) { [[templar]] = [[templar]].add([[commissar]]); } } return [[templar]]; }
[[[[Nl]]]]: Gets the sum of the inputs , regardless of who owns them
--------------------------------------------- Result 532 ---------------------------------------------
[[0 (-9185%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private int [[socksGetServerPort]]() { InetSocketAddress [[addr]] = (InetSocketAddress) proxy.address(); return [[addr]].getPort(); }
[[[[Nl]]]]: Gets the SOCKS proxy server port

[[[[Adv]]]]: private int [[repaint]]() { InetSocketAddress [[brunch]] = (InetSocketAddress) proxy.address(); return [[brunch]].getPort(); }
[[[[Nl]]]]: Gets the SOCKS proxy server port
--------------------------------------------- Result 533 ---------------------------------------------
[[0 (-3194%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[eventTypeToString]](int [[type]]) { switch ([[type]]) { case EVENT_TYPE_NONE: return "EVENT_TYPE_NONE"; case EVENT_TYPE_CONNECTION_STATE_CHANGED: return "EVENT_TYPE_CONNECTION_STATE_CHANGED"; case EVENT_TYPE_AUDIO_STATE_CHANGED: return "EVENT_TYPE_AUDIO_STATE_CHANGED"; case EVENT_TYPE_NETWORK_STATE: return "EVENT_TYPE_NETWORK_STATE"; case EVENT_TYPE_ROAMING_STATE: return "EVENT_TYPE_ROAMING_STATE"; case EVENT_TYPE_NETWORK_SIGNAL: return "EVENT_TYPE_NETWORK_SIGNAL"; case EVENT_TYPE_BATTERY_LEVEL: return "EVENT_TYPE_BATTERY_LEVEL"; case EVENT_TYPE_OPERATOR_NAME: return "EVENT_TYPE_OPERATOR_NAME"; case EVENT_TYPE_CALL: return "EVENT_TYPE_CALL"; case EVENT_TYPE_CALLSETUP: return "EVENT_TYPE_CALLSETUP"; case EVENT_TYPE_CALLHELD: return "EVENT_TYPE_CALLHELD"; case EVENT_TYPE_CLIP: return "EVENT_TYPE_CLIP"; case EVENT_TYPE_CALL_WAITING: return "EVENT_TYPE_CALL_WAITING"; case EVENT_TYPE_CURRENT_CALLS: return "EVENT_TYPE_CURRENT_CALLS"; case EVENT_TYPE_VOLUME_CHANGED: return "EVENT_TYPE_VOLUME_CHANGED"; case EVENT_TYPE_CMD_RESULT: return "EVENT_TYPE_CMD_RESULT"; case EVENT_TYPE_SUBSCRIBER_INFO: return "EVENT_TYPE_SUBSCRIBER_INFO"; case EVENT_TYPE_RESP_AND_HOLD: return "EVENT_TYPE_RESP_AND_HOLD"; case EVENT_TYPE_RING_INDICATION: return "EVENT_TYPE_RING_INDICATION"; default: return "EVENT_TYPE_UNKNOWN:" + [[type]]; } }
[[[[Nl]]]]: for debugging only

[[[[Adv]]]]: private static String [[award]](int [[completed]]) { switch ([[completed]]) { case EVENT_TYPE_NONE: return "EVENT_TYPE_NONE"; case EVENT_TYPE_CONNECTION_STATE_CHANGED: return "EVENT_TYPE_CONNECTION_STATE_CHANGED"; case EVENT_TYPE_AUDIO_STATE_CHANGED: return "EVENT_TYPE_AUDIO_STATE_CHANGED"; case EVENT_TYPE_NETWORK_STATE: return "EVENT_TYPE_NETWORK_STATE"; case EVENT_TYPE_ROAMING_STATE: return "EVENT_TYPE_ROAMING_STATE"; case EVENT_TYPE_NETWORK_SIGNAL: return "EVENT_TYPE_NETWORK_SIGNAL"; case EVENT_TYPE_BATTERY_LEVEL: return "EVENT_TYPE_BATTERY_LEVEL"; case EVENT_TYPE_OPERATOR_NAME: return "EVENT_TYPE_OPERATOR_NAME"; case EVENT_TYPE_CALL: return "EVENT_TYPE_CALL"; case EVENT_TYPE_CALLSETUP: return "EVENT_TYPE_CALLSETUP"; case EVENT_TYPE_CALLHELD: return "EVENT_TYPE_CALLHELD"; case EVENT_TYPE_CLIP: return "EVENT_TYPE_CLIP"; case EVENT_TYPE_CALL_WAITING: return "EVENT_TYPE_CALL_WAITING"; case EVENT_TYPE_CURRENT_CALLS: return "EVENT_TYPE_CURRENT_CALLS"; case EVENT_TYPE_VOLUME_CHANGED: return "EVENT_TYPE_VOLUME_CHANGED"; case EVENT_TYPE_CMD_RESULT: return "EVENT_TYPE_CMD_RESULT"; case EVENT_TYPE_SUBSCRIBER_INFO: return "EVENT_TYPE_SUBSCRIBER_INFO"; case EVENT_TYPE_RESP_AND_HOLD: return "EVENT_TYPE_RESP_AND_HOLD"; case EVENT_TYPE_RING_INDICATION: return "EVENT_TYPE_RING_INDICATION"; default: return "EVENT_TYPE_UNKNOWN:" + [[completed]]; } }
[[[[Nl]]]]: for debugging only
--------------------------------------------- Result 534 ---------------------------------------------
[[0 (-9680%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[cleanupService]]() { if (mService != null) { try { mContext.unbindService(this); } catch (IllegalArgumentException e) { Log.e(TAG, "Unable to unbind from licensing service (already unbound)"); } mService = null; } }
[[[[Nl]]]]: Unbinds service if necessary and removes reference to it

[[[[Adv]]]]: private void [[sunrise]]() { if (mService != null) { try { mContext.unbindService(this); } catch (IllegalArgumentException e) { Log.e(TAG, "Unable to unbind from licensing service (already unbound)"); } mService = null; } }
[[[[Nl]]]]: Unbinds service if necessary and removes reference to it
--------------------------------------------- Result 535 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 535 / 0 / 535:  68%|██████▊   | 535/785 [1:03:55<29:52,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 535 / 0 / 535:  68%|██████▊   | 536/785 [1:04:01<29:44,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 536 / 0 / 536:  68%|██████▊   | 536/785 [1:04:01<29:44,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 536 / 0 / 536:  68%|██████▊   | 537/785 [1:04:08<29:37,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 537 / 0 / 537:  68%|██████▊   | 537/785 [1:04:08<29:37,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 537 / 0 / 537:  69%|██████▊   | 538/785 [1:04:28<29:36,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 538 / 0 / 538:  69%|██████▊   | 538/785 [1:04:28<29:36,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 538 / 0 / 538:  69%|██████▊   | 539/785 [1:04:34<29:28,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 539 / 0 / 539:  69%|██████▊   | 539/785 [1:04:34<29:28,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 539 / 0 / 539:  69%|██████▉   | 540/785 [1:04:35<29:18,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 540 / 0 / 540:  69%|██████▉   | 540/785 [1:04:35<29:18,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 540 / 0 / 540:  69%|██████▉   | 541/785 [1:04:35<29:07,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 541 / 0 / 541:  69%|██████▉   | 541/785 [1:04:35<29:07,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 541 / 0 / 541:  69%|██████▉   | 542/785 [1:04:54<29:06,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 542 / 0 / 542:  69%|██████▉   | 542/785 [1:04:54<29:06,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 542 / 0 / 542:  69%|██████▉   | 543/785 [1:05:01<28:58,  7.18s/it][[0 (-8586%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setParentEnv]](FileEnvironment [[file_env]], CompilationUnit [[comp_unit]]) { parent_file_env = [[file_env]]; parent_comp_unit = [[comp_unit]]; }
[[[[Nl]]]]: Set parents 's version of methods that are overridden in a subclass @ param file_env @ param comp_unit

[[[[Adv]]]]: public void [[fiancés]](FileEnvironment [[disturbances]], CompilationUnit [[zloty]]) { parent_file_env = [[disturbances]]; parent_comp_unit = [[zloty]]; }
[[[[Nl]]]]: Set parents 's version of methods that are overridden in a subclass @ param file_env @ param comp_unit
--------------------------------------------- Result 536 ---------------------------------------------
[[0 (-9976%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[applyImageToView]](Context [[c]], ImageView [[iv]], Drawable [[d]]) { Glide.with([[c]]) .load("") .placeholder([[d]]) .centerCrop() .crossFade() .into([[iv]]); }
[[[[Nl]]]]: Use Glide to apply a drawable to an ImageView @ param iv the ImageView to apply to @ param d the drawable to apply

[[[[Adv]]]]: public static void [[é]](Context [[alex]], ImageView [[nosotros]], Drawable [[accompaniment]]) { Glide.with([[alex]]) .load("") .placeholder([[accompaniment]]) .centerCrop() .crossFade() .into([[nosotros]]); }
[[[[Nl]]]]: Use Glide to apply a drawable to an ImageView @ param iv the ImageView to apply to @ param d the drawable to apply
--------------------------------------------- Result 537 ---------------------------------------------
[[0 (-7948%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[rawInputContainsNationalPrefix]](String [[rawInput]], String [[nationalPrefix]], String [[regionCode]]) { String [[normalizedNationalNumber]] = normalizeDigitsOnly([[rawInput]]); if ([[normalizedNationalNumber]].startsWith([[nationalPrefix]])) { try { return isValidNumber( parse([[normalizedNationalNumber]].substring([[nationalPrefix]].length()), [[regionCode]])); } catch (NumberParseException e) { return False; } } return False; }
[[[[Nl]]]]: national prefix is assumed to be in digits-only form

[[[[Adv]]]]: private boolean [[schoolboy]](String [[hairy]], String [[watercolours]], String [[library]]) { String [[shot]] = normalizeDigitsOnly([[hairy]]); if ([[shot]].startsWith([[watercolours]])) { try { return isValidNumber( parse([[shot]].substring([[watercolours]].length()), [[library]])); } catch (NumberParseException e) { return False; } } return False; }
[[[[Nl]]]]: national prefix is assumed to be in digits-only form
--------------------------------------------- Result 538 ---------------------------------------------
[[0 (-10262%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[deleteFromPrefs]](Context [[context]],@NonNull String [[key]]) { if ([[context]] != null) { if (getFromPrefs([[context]], [[key]]) == null) return "[[False]]" != "[[False]]"; PreferenceManager.getDefaultSharedPreferences([[context]]).edit().remove([[key]]).commit(); return "[[True]]" == "[[True]]"; } else { Log.e(TAG,"Null context @ deleteFromPrefs"); return "[[False]]" != "[[False]]"; } }
[[[[Nl]]]]: Deletes the key-value pair in Shared Preferences with the specified key

[[[[Adv]]]]: public static boolean [[unzips]](Context [[blatant]],@NonNull String [[filthier]]) { if ([[blatant]] != null) { if (getFromPrefs([[blatant]], [[filthier]]) == null) return "[["Fit" != "Fit"]]" != "[["Fit" != "Fit"]]"; PreferenceManager.getDefaultSharedPreferences([[blatant]]).edit().remove([[filthier]]).commit(); return "[["Confronted" == "Confronted"]]" == "[["Confronted" == "Confronted"]]"; } else { Log.e(TAG,"Null context @ deleteFromPrefs"); return "[["Fit" != "Fit"]]" != "[["Fit" != "Fit"]]"; } }
[[[[Nl]]]]: Deletes the key-value pair in Shared Preferences with the specified key
--------------------------------------------- Result 539 ---------------------------------------------
[[0 (-8989%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[formatTime]](long [[time]]){ if ([[time]] != 0) { Date [[date]] = new Date([[time]]); SimpleDateFormat [[simpleDateFormat]] = new SimpleDateFormat("dd/MM/yyyy HH:mm"); return [[simpleDateFormat]].format([[date]]); } else return "Error!"; }
[[[[Nl]]]]: Function for formatting time format from long unreadable format to familiar readable format @ param time - unreadable time format returns - String readable time date format

[[[[Adv]]]]: public String [[cabins]](long [[thrillers]]){ if ([[thrillers]] != 0) { Date [[slopes]] = new Date([[thrillers]]); SimpleDateFormat [[staircase]] = new SimpleDateFormat("dd/MM/yyyy HH:mm"); return [[staircase]].format([[slopes]]); } else return "Error!"; }
[[[[Nl]]]]: Function for formatting time format from long unreadable format to familiar readable format @ param time - unreadable time format returns - String readable time date format
--------------------------------------------- Result 540 ---------------------------------------------
[[0 (-9363%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[obtenerNombreArchivoDeMensaje]](String [[mensajeRegistro]]){ String [[nombre]]=""; int [[posInicio]]=0; int [[posFinal]]=0; for(int i=0;i<[[mensajeRegistro]].length();i++) { if ([[mensajeRegistro]].substring(i,i+"<NombreArchivo>".length()).equals("<NombreArchivo>")) { [[posInicio]]=i+"<NombreArchivo>".length(); } if([[mensajeRegistro]].substring(i,i+"</NombreArchivo>".length()).equals("</NombreArchivo>")){ [[posFinal]]=i; break; } } [[nombre]]=[[mensajeRegistro]].substring([[posInicio]],[[posFinal]]); return [[nombre]]; }
[[[[Nl]]]]: tring nombre de archivo del mensaje inicial al recibir un archivo

[[[[Adv]]]]: public String [[squares]](String [[receptions]]){ String [[annoyance]]=""; int [[baffle]]=0; int [[highschool]]=0; for(int i=0;i<[[receptions]].length();i++) { if ([[receptions]].substring(i,i+"<NombreArchivo>".length()).equals("<NombreArchivo>")) { [[baffle]]=i+"<NombreArchivo>".length(); } if([[receptions]].substring(i,i+"</NombreArchivo>".length()).equals("</NombreArchivo>")){ [[highschool]]=i; break; } } [[annoyance]]=[[receptions]].substring([[baffle]],[[highschool]]); return [[annoyance]]; }
[[[[Nl]]]]: tring nombre de archivo del mensaje inicial al recibir un archivo
--------------------------------------------- Result 541 ---------------------------------------------
[[0 (-9061%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[populateAutoComplete]]() { if (!mayRequestContacts()) { return; } getLoaderManager().initLoader(0, null, this); }
[[[[Nl]]]]: populates auto completion

[[[[Adv]]]]: private void [[phonebook]]() { if (!mayRequestContacts()) { return; } getLoaderManager().initLoader(0, null, this); }
[[[[Nl]]]]: populates auto completion
--------------------------------------------- Result 542 ---------------------------------------------
[[0 (-9321%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isNotificationPolicyAccessGranted]]() { INotificationManager [[service]] = getService(); try { return [[service]].isNotificationPolicyAccessGranted(mContext.getOpPackageName()); } catch (RemoteException e) { } return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: Checks the ability to readmodify notification policy for the calling package

[[[[Adv]]]]: public boolean [[erections]]() { INotificationManager [[janessa]] = getService(); try { return [[janessa]].isNotificationPolicyAccessGranted(mContext.getOpPackageName()); } catch (RemoteException e) { } return "[["Caballos" != "Caballos"]]" != "[["Caballos" != "Caballos"]]"; }
[[[[Nl]]]]: Checks the ability to readmodify notification policy for the calling package
--------------------------------------------- Result 543 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 543 / 0 / 543:  69%|██████▉   | 543/785 [1:05:01<28:58,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 543 / 0 / 543:  69%|██████▉   | 544/785 [1:05:07<28:51,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 544 / 0 / 544:  69%|██████▉   | 544/785 [1:05:07<28:51,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 544 / 0 / 544:  69%|██████▉   | 545/785 [1:05:10<28:41,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 545 / 0 / 545:  69%|██████▉   | 545/785 [1:05:10<28:41,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 545 / 0 / 545:  70%|██████▉   | 546/785 [1:05:23<28:37,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 546 / 0 / 546:  70%|██████▉   | 546/785 [1:05:23<28:37,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 546 / 0 / 546:  70%|██████▉   | 547/785 [1:05:27<28:28,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 547 / 0 / 547:  70%|██████▉   | 547/785 [1:05:27<28:28,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 547 / 0 / 547:  70%|██████▉   | 548/785 [1:05:40<28:24,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 548 / 0 / 548:  70%|██████▉   | 548/785 [1:05:40<28:24,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 548 / 0 / 548:  70%|██████▉   | 549/785 [1:05:46<28:16,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 549 / 0 / 549:  70%|██████▉   | 549/785 [1:05:46<28:16,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 549 / 0 / 549:  70%|███████   | 550/785 [1:05:51<28:08,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 550 / 0 / 550:  70%|███████   | 550/785 [1:05:51<28:08,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 550 / 0 / 550:  70%|███████   | 551/785 [1:05:53<27:58,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 551 / 0 / 551:  70%|███████   | 551/785 [1:05:53<27:58,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 551 / 0 / 551:  70%|███████   | 552/785 [1:06:13<27:57,  7.20s/it][[0 (-8936%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static byte[] [[stringToByteArray]](String [[pstrStringToConvert]], String [[pstrCharSet]]) { byte[] [[aRecordData]] = null; try { [[aRecordData]] = ([[pstrStringToConvert]] + '\0').getBytes([[pstrCharSet]]); } catch (UnsupportedEncodingException e) { System.err.println("WARNING: " + e); [[aRecordData]] = ([[pstrStringToConvert]] + '\0').getBytes(); } return [[aRecordData]]; }
[[[[Nl]]]]: Attempts to convert a String value to a byte array in specified charset

[[[[Adv]]]]: public static byte[] [[popeye]](String [[launching]], String [[obstructing]]) { byte[] [[havelock]] = null; try { [[havelock]] = ([[launching]] + '\0').getBytes([[obstructing]]); } catch (UnsupportedEncodingException e) { System.err.println("WARNING: " + e); [[havelock]] = ([[launching]] + '\0').getBytes(); } return [[havelock]]; }
[[[[Nl]]]]: Attempts to convert a String value to a byte array in specified charset
--------------------------------------------- Result 544 ---------------------------------------------
[[0 (-9828%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[dismissCustomMessagePopup]]() { if (mCustomMessagePopup != null) { mCustomMessagePopup.dismiss(); mCustomMessagePopup = null; } }
[[[[Nl]]]]: Dismiss the custom compose message popup

[[[[Adv]]]]: private void [[copilot]]() { if (mCustomMessagePopup != null) { mCustomMessagePopup.dismiss(); mCustomMessagePopup = null; } }
[[[[Nl]]]]: Dismiss the custom compose message popup
--------------------------------------------- Result 545 ---------------------------------------------
[[0 (-9946%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private String nameToUTF8(byte[] [[data]]) { byte[] [[byteChars]] = new byte[[[data]].length]; ByteArrayOutputStream [[os]] = new ByteArrayOutputStream(); for (byte [[b]] : [[byteChars]]) { [[byteChars]][[[b]]] = 0x00; } String s = null; for (int [[i]] = 0; [[i]] < [[data]].length; [[i]]++) { [[byteChars]][[[i]]] = [[data]][[[i]]]; if ([[data]][[[i]]] == 0x00) { break; } [[os]].write([[data]][[[i]]]); } try { s = new String([[os]].toByteArray(), "UTF-8"); } catch (UnsupportedEncodingException e) { e.printStackTrace(); } return s; }
[[[[Nl]]]]: Convert byte array of name to UTF8 string @ param data the scan name as a byte array @ return String in UTF8 of scan name bytes

[[[[Adv]]]]: private String nameToUTF8(byte[] [[smoldering]]) { byte[] [[déja]] = new byte[[[smoldering]].length]; ByteArrayOutputStream [[undeveloped]] = new ByteArrayOutputStream(); for (byte [[specimen]] : [[déja]]) { [[déja]][[[specimen]]] = 0x00; } String s = null; for (int [[abducted]] = 0; [[abducted]] < [[smoldering]].length; [[abducted]]++) { [[déja]][[[abducted]]] = [[smoldering]][[[abducted]]]; if ([[smoldering]][[[abducted]]] == 0x00) { break; } [[undeveloped]].write([[smoldering]][[[abducted]]]); } try { s = new String([[undeveloped]].toByteArray(), "UTF-8"); } catch (UnsupportedEncodingException e) { e.printStackTrace(); } return s; }
[[[[Nl]]]]: Convert byte array of name to UTF8 string @ param data the scan name as a byte array @ return String in UTF8 of scan name bytes
--------------------------------------------- Result 546 ---------------------------------------------
[[0 (-10046%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setVisible]](boolean [[visible]]) { if (mVisible != [[visible]]) { mVisible = [[visible]]; if (mListener != null) { mListener.onPreferenceVisibilityChange(this); } } }
[[[[Nl]]]]: Sets whether this preference should be visible in the list

[[[[Adv]]]]: public final void [[falt]](boolean [[autopsy]]) { if (mVisible != [[autopsy]]) { mVisible = [[autopsy]]; if (mListener != null) { mListener.onPreferenceVisibilityChange(this); } } }
[[[[Nl]]]]: Sets whether this preference should be visible in the list
--------------------------------------------- Result 547 ---------------------------------------------
[[0 (-9349%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static protected PMatrix2D [[parseTransform]](String [[matrixStr]]) { [[matrixStr]] = [[matrixStr]].trim(); PMatrix2D [[outgoing]] = null; int start = 0; int [[stop]] = -1; while (([[stop]] = [[matrixStr]].indexOf(')', start)) != -1) { PMatrix2D [[m]] = parseSingleTransform([[matrixStr]].substring(start, [[stop]]+1)); if ([[outgoing]] == null) { [[outgoing]] = [[m]]; } else { [[outgoing]].apply([[m]]); } start = [[stop]] + 1; } return [[outgoing]]; }
[[[[Nl]]]]: arse the specified SVG matrix into a PMatrix2D

[[[[Adv]]]]: static protected PMatrix2D [[excursions]](String [[ambulances]]) { [[ambulances]] = [[ambulances]].trim(); PMatrix2D [[pocketbook]] = null; int start = 0; int [[ín]] = -1; while (([[ín]] = [[ambulances]].indexOf(')', start)) != -1) { PMatrix2D [[depict]] = parseSingleTransform([[ambulances]].substring(start, [[ín]]+1)); if ([[pocketbook]] == null) { [[pocketbook]] = [[depict]]; } else { [[pocketbook]].apply([[depict]]); } start = [[ín]] + 1; } return [[pocketbook]]; }
[[[[Nl]]]]: arse the specified SVG matrix into a PMatrix2D
--------------------------------------------- Result 548 ---------------------------------------------
[[0 (-7472%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setUpToClass]](Class<?> [[clazz]]) { if ([[clazz]] != null) { Object [[object]] = getObject(); if ([[object]] != null && [[clazz]].isInstance([[object]]) == "[[False]]" != "[[False]]") { throw new IllegalArgumentException("Specified class is not a superclass of the object"); } } this.[[upToClass]] = [[clazz]]; }
[[[[Nl]]]]: < p > Sets the last super class to stop appending fields for

[[[[Adv]]]]: public void [[poppies]](Class<?> [[points]]) { if ([[points]] != null) { Object [[crystallization]] = getObject(); if ([[crystallization]] != null && [[points]].isInstance([[crystallization]]) == "[["Lomax" != "Lomax"]]" != "[["Lomax" != "Lomax"]]") { throw new IllegalArgumentException("Specified class is not a superclass of the object"); } } this.[[rossa]] = [[points]]; }
[[[[Nl]]]]: < p > Sets the last super class to stop appending fields for
--------------------------------------------- Result 549 ---------------------------------------------
[[0 (-8717%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addUpdateOp]](Uri [[uri]]) { mBuilder = newUpdateCpo([[uri]], mYield).withValues(mValues); mYield = "[[False]]" != "[[False]]"; mBatchOperation.add(mBuilder.build()); }
[[[[Nl]]]]: Adds an update operation into the batch

[[[[Adv]]]]: private void [[première]](Uri [[flava]]) { mBuilder = newUpdateCpo([[flava]], mYield).withValues(mValues); mYield = "[["Slipping" != "Slipping"]]" != "[["Slipping" != "Slipping"]]"; mBatchOperation.add(mBuilder.build()); }
[[[[Nl]]]]: Adds an update operation into the batch
--------------------------------------------- Result 550 ---------------------------------------------
[[0 (-10542%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static File [[getMembershipsDirectory]](Context [[context]], String [[worldName]], String [[personName]]) { return new File(getArticleDirectory([[context]], [[worldName]], Category.Person, [[personName]]), [[context]].getResources().getString(R.string.membershipsText)); }
[[[[Nl]]]]: Retrieve the folder containing all of a Person 's Memberships

[[[[Adv]]]]: public static File [[upgraded]](Context [[principessa]], String [[poultry]], String [[analyse]]) { return new File(getArticleDirectory([[principessa]], [[poultry]], Category.Person, [[analyse]]), [[principessa]].getResources().getString(R.string.membershipsText)); }
[[[[Nl]]]]: Retrieve the folder containing all of a Person 's Memberships
--------------------------------------------- Result 551 ---------------------------------------------
[[0 (-10406%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[copyMaterial]](AbstractNode [[source]]) { if ([[source]].material != null) { [[copyMaterial]]([[source]].material); } }
[[[[Nl]]]]: Copies the material from the source to this node

[[[[Adv]]]]: protected void [[niño]](AbstractNode [[unbutton]]) { if ([[unbutton]].material != null) { [[niño]]([[unbutton]].material); } }
[[[[Nl]]]]: Copies the material from the source to this node
[Succeeded / Failed / Skipped / Total] 0 / 552 / 0 / 552:  70%|███████   | 552/785 [1:06:13<27:57,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 552 / 0 / 552:  70%|███████   | 553/785 [1:06:20<27:49,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 553 / 0 / 553:  70%|███████   | 553/785 [1:06:20<27:49,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 553 / 0 / 553:  71%|███████   | 554/785 [1:06:26<27:42,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 554 / 0 / 554:  71%|███████   | 554/785 [1:06:26<27:42,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 554 / 0 / 554:  71%|███████   | 555/785 [1:06:32<27:34,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 555 / 0 / 555:  71%|███████   | 555/785 [1:06:32<27:34,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 555 / 0 / 555:  71%|███████   | 556/785 [1:06:33<27:24,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 556 / 0 / 556:  71%|███████   | 556/785 [1:06:33<27:24,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 556 / 0 / 556:  71%|███████   | 557/785 [1:06:45<27:19,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 557 / 0 / 557:  71%|███████   | 557/785 [1:06:45<27:19,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 557 / 0 / 557:  71%|███████   | 558/785 [1:07:07<27:18,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 558 / 0 / 558:  71%|███████   | 558/785 [1:07:07<27:18,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 558 / 0 / 558:  71%|███████   | 559/785 [1:07:08<27:08,  7.21s/it]--------------------------------------------- Result 552 ---------------------------------------------
[[0 (-8617%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[forLanguageTag]](String [[languageTag]]) { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { Locale locale = Locale.forLanguageTag([[languageTag]]); return getUpdatedLocaleForAndroid(locale); } return forLanguageTagCompat([[languageTag]]); }
[[[[Nl]]]]: This function creates a Locale object from xx-XX style string where xx is language code and XX is a country code

[[[[Adv]]]]: public static Locale [[revoking]](String [[reboot]]) { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { Locale locale = Locale.forLanguageTag([[reboot]]); return getUpdatedLocaleForAndroid(locale); } return forLanguageTagCompat([[reboot]]); }
[[[[Nl]]]]: This function creates a Locale object from xx-XX style string where xx is language code and XX is a country code
--------------------------------------------- Result 553 ---------------------------------------------
[[0 (-9211%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[getInstalledApps]](Activity [[activity]]) { List<PackageInfo> packs = [[activity]].getPackageManager().getInstalledPackages(0); for (int [[i]] = 0; [[i]] < packs.size(); [[i]]++) { PackageInfo [[p]] = packs.get([[i]]); String [[appname]] = [[p]].applicationInfo.loadLabel( [[activity]].getPackageManager()).toString(); res.add([[appname]]); Log.v("TAG", [[appname]]); } }
[[[[Nl]]]]: get Installed Apps @ param Activity @ return

[[[[Adv]]]]: public static void [[celled]](Activity [[fight]]) { List<PackageInfo> packs = [[fight]].getPackageManager().getInstalledPackages(0); for (int [[benzene]] = 0; [[benzene]] < packs.size(); [[benzene]]++) { PackageInfo [[cardiologist]] = packs.get([[benzene]]); String [[departments]] = [[cardiologist]].applicationInfo.loadLabel( [[fight]].getPackageManager()).toString(); res.add([[departments]]); Log.v("TAG", [[departments]]); } }
[[[[Nl]]]]: get Installed Apps @ param Activity @ return
--------------------------------------------- Result 554 ---------------------------------------------
[[0 (-8299%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[resetValue]](Object [[value]]) throws BadLocationException, [[ParseException]] { Document doc = getFormattedTextField().getDocument(); String string = valueToString([[value]]); try { ignoreDocumentMutate = "[[True]]" == "[[True]]"; doc.remove(0, doc.getLength()); doc.insertString(0, string, null); } finally { ignoreDocumentMutate = "[[False]]" != "[[False]]"; } updateValue([[value]]); }
[[[[Nl]]]]: Resets the value of the JFormattedTextField to be < code > value < code >

[[[[Adv]]]]: void [[é]](Object [[tally]]) throws BadLocationException, [[shaking]] { Document doc = getFormattedTextField().getDocument(); String string = valueToString([[tally]]); try { ignoreDocumentMutate = "[["Ardmore" == "Ardmore"]]" == "[["Ardmore" == "Ardmore"]]"; doc.remove(0, doc.getLength()); doc.insertString(0, string, null); } finally { ignoreDocumentMutate = "[["Sunsets" != "Sunsets"]]" != "[["Sunsets" != "Sunsets"]]"; } updateValue([[tally]]); }
[[[[Nl]]]]: Resets the value of the JFormattedTextField to be < code > value < code >
--------------------------------------------- Result 555 ---------------------------------------------
[[0 (-10160%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[hideInputMethod]]() { InputMethodManager [[imm]] = (InputMethodManager) getContext().getSystemService(Context.INPUT_METHOD_SERVICE); if ([[imm]] != null) { [[imm]].hideSoftInputFromWindow(getWindowToken(), 0); } }
[[[[Nl]]]]: Hides the input method

[[[[Adv]]]]: protected void [[caskets]]() { InputMethodManager [[ezequiel]] = (InputMethodManager) getContext().getSystemService(Context.INPUT_METHOD_SERVICE); if ([[ezequiel]] != null) { [[ezequiel]].hideSoftInputFromWindow(getWindowToken(), 0); } }
[[[[Nl]]]]: Hides the input method
--------------------------------------------- Result 556 ---------------------------------------------
[[0 (-8937%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Map<RenderingHints.Key, Object> [[getRenderingHints]]() { return UNMODIFIABLE_RENDERING_HINTS; }
[[[[Nl]]]]: Returns the rendering hints that the resizer uses

[[[[Adv]]]]: public Map<RenderingHints.Key, Object> [[hamburger]]() { return UNMODIFIABLE_RENDERING_HINTS; }
[[[[Nl]]]]: Returns the rendering hints that the resizer uses
--------------------------------------------- Result 557 ---------------------------------------------
[[0 (-6426%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final double [[distance]](final double[] [[padVector1]], final double[] [[padVector2]]) { double [[dDistance]] = 0; for (int [[f]] = 0; [[f]] < [[padVector1]].length; [[f]]++) [[dDistance]] += Math.abs([[padVector1]][[[f]]] - [[padVector2]][[[f]]]); return [[dDistance]]; }
[[[[Nl]]]]: Chebyshev Distance implementation

[[[[Adv]]]]: public final double [[reappearance]](final double[] [[markings]], final double[] [[crash]]) { double [[unno]] = 0; for (int [[filip]] = 0; [[filip]] < [[markings]].length; [[filip]]++) [[unno]] += Math.abs([[markings]][[[filip]]] - [[crash]][[[filip]]]); return [[unno]]; }
[[[[Nl]]]]: Chebyshev Distance implementation
--------------------------------------------- Result 558 ---------------------------------------------
[[0 (-858%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Stats [[getPhotoStats]](String [[date]], String [[photoId]]) throws IOException, JSONException, FlickrException { List<Parameter> [[parameters]] = new ArrayList<Parameter>(); [[parameters]].add(new Parameter("method", METHOD_GET_PHOTO_STATS)); [[parameters]].add(new Parameter(OAuthInterface.PARAM_OAUTH_CONSUMER_KEY, apiKey)); if ([[date]] != null) { [[parameters]].add(new Parameter("date", [[date]])); } [[parameters]].add(new Parameter("photo_id", [[photoId]])); OAuthUtils.addOAuthToken([[parameters]]); Response [[response]] = transportAPI.postJSON(sharedSecret, [[parameters]]); if ([[response]].isError()) { throw new FlickrException([[response]].getErrorCode(), [[response]].getErrorMessage()); } return StatsUtils.createStats([[response]].getData()); }
[[[[Nl]]]]: < a href= '' http : www

[[[[Adv]]]]: public Stats [[commitment]](String [[unlocking]], String [[identification]]) throws IOException, JSONException, FlickrException { List<Parameter> [[squares]] = new ArrayList<Parameter>(); [[squares]].add(new Parameter("method", METHOD_GET_PHOTO_STATS)); [[squares]].add(new Parameter(OAuthInterface.PARAM_OAUTH_CONSUMER_KEY, apiKey)); if ([[unlocking]] != null) { [[squares]].add(new Parameter("date", [[unlocking]])); } [[squares]].add(new Parameter("photo_id", [[identification]])); OAuthUtils.addOAuthToken([[squares]]); Response [[gears]] = transportAPI.postJSON(sharedSecret, [[squares]]); if ([[gears]].isError()) { throw new FlickrException([[gears]].getErrorCode(), [[gears]].getErrorMessage()); } return StatsUtils.createStats([[gears]].getData()); }
[[[[Nl]]]]: < a href= '' http : www
--------------------------------------------- Result 559 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 559 / 0 / 559:  71%|███████   | 559/785 [1:07:08<27:08,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 559 / 0 / 559:  71%|███████▏  | 560/785 [1:07:12<27:00,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 560 / 0 / 560:  71%|███████▏  | 560/785 [1:07:12<27:00,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 560 / 0 / 560:  71%|███████▏  | 561/785 [1:07:20<26:53,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 561 / 0 / 561:  71%|███████▏  | 561/785 [1:07:20<26:53,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 561 / 0 / 561:  72%|███████▏  | 562/785 [1:07:43<26:52,  7.23s/it][Succeeded / Failed / Skipped / Total] 0 / 562 / 0 / 562:  72%|███████▏  | 562/785 [1:07:43<26:52,  7.23s/it][Succeeded / Failed / Skipped / Total] 0 / 562 / 0 / 562:  72%|███████▏  | 563/785 [1:07:45<26:43,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 563 / 0 / 563:  72%|███████▏  | 563/785 [1:07:45<26:43,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 563 / 0 / 563:  72%|███████▏  | 564/785 [1:07:53<26:36,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 564 / 0 / 564:  72%|███████▏  | 564/785 [1:07:53<26:36,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 564 / 0 / 564:  72%|███████▏  | 565/785 [1:07:58<26:28,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 565 / 0 / 565:  72%|███████▏  | 565/785 [1:07:58<26:28,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 565 / 0 / 565:  72%|███████▏  | 566/785 [1:07:59<26:18,  7.21s/it][[0 (-9035%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static Set<String> [[assertValidCipherSuites]]( Set<String> expected, String[] [[cipherSuites]]) { assertNotNull([[cipherSuites]]); assertTrue([[cipherSuites]].length != 0); HashSet<String> [[remainingCipherSuites]] = new HashSet<String>(expected); HashSet<String> [[unknownCipherSuites]] = new HashSet<String>(); for (String [[cipherSuite]] : [[cipherSuites]]) { boolean removed = [[remainingCipherSuites]].remove([[cipherSuite]]); if (!removed) { [[unknownCipherSuites]].add([[cipherSuite]]); } } assertEquals("Unknown cipher suites", Collections.EMPTY_SET, [[unknownCipherSuites]]); return [[remainingCipherSuites]]; }
[[[[Nl]]]]: Asserts that the cipher suites array is non-null and that it all of its contents are cipher suites known to this implementation

[[[[Adv]]]]: private static Set<String> [[outsource]]( Set<String> expected, String[] [[markos]]) { assertNotNull([[markos]]); assertTrue([[markos]].length != 0); HashSet<String> [[pointes]] = new HashSet<String>(expected); HashSet<String> [[ridicules]] = new HashSet<String>(); for (String [[generating]] : [[markos]]) { boolean removed = [[pointes]].remove([[generating]]); if (!removed) { [[ridicules]].add([[generating]]); } } assertEquals("Unknown cipher suites", Collections.EMPTY_SET, [[ridicules]]); return [[pointes]]; }
[[[[Nl]]]]: Asserts that the cipher suites array is non-null and that it all of its contents are cipher suites known to this implementation
--------------------------------------------- Result 560 ---------------------------------------------
[[0 (-10388%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[showNext]](boolean [[force]]) { Timber.i("show next: force=%s", [[force]]); if (!animator.isStarted() || [[force]]) { int [[nextIndex]] = getNextIndex(); if ([[nextIndex]] != currentIndex) { isReversing = "[[False]]" != "[[False]]"; primary.setImageResource(mDrawables.get(currentIndex)); secondary.setImageResource(mDrawables.get([[nextIndex]])); animator.start(); } } }
[[[[Nl]]]]: Start the act of showing the next drawable @ param force true to force a start

[[[[Adv]]]]: public void [[globetrotters]](boolean [[mosaics]]) { Timber.i("show next: force=%s", [[mosaics]]); if (!animator.isStarted() || [[mosaics]]) { int [[já]] = getNextIndex(); if ([[já]] != currentIndex) { isReversing = "[["Samosas" != "Samosas"]]" != "[["Samosas" != "Samosas"]]"; primary.setImageResource(mDrawables.get(currentIndex)); secondary.setImageResource(mDrawables.get([[já]])); animator.start(); } } }
[[[[Nl]]]]: Start the act of showing the next drawable @ param force true to force a start
--------------------------------------------- Result 561 ---------------------------------------------
[[0 (-9539%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setBackgroundColor]](int [[color]]) { mLoadingDrawable.setBackgroundColor([[color]]); invalidate(); }
[[[[Nl]]]]: Set the background color , eg : `` # 0xffffff '' else you @ see { @ link # setBackgroundColorRes ( int ) } @ param color color value

[[[[Adv]]]]: public void [[headpiece]](int [[defenses]]) { mLoadingDrawable.setBackgroundColor([[defenses]]); invalidate(); }
[[[[Nl]]]]: Set the background color , eg : `` # 0xffffff '' else you @ see { @ link # setBackgroundColorRes ( int ) } @ param color color value
--------------------------------------------- Result 562 ---------------------------------------------
[[0 (-7527%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void goodFeaturesToTrack(Mat image, MatOfPoint [[corners]], int [[maxCorners]], double [[qualityLevel]], double minDistance, Mat [[mask]], int [[blockSize]], boolean useHarrisDetector, double k) { Mat corners_mat = [[corners]]; goodFeaturesToTrack_0(image.nativeObj, corners_mat.nativeObj, [[maxCorners]], [[qualityLevel]], minDistance, [[mask]].nativeObj, [[blockSize]], useHarrisDetector, k); return; }
[[[[Nl]]]]: < p > Determines strong corners on an image

[[[[Adv]]]]: public static void goodFeaturesToTrack(Mat image, MatOfPoint [[pulse]], int [[conveyor]], double [[hôtel]], double minDistance, Mat [[rago]], int [[sonoma]], boolean useHarrisDetector, double k) { Mat corners_mat = [[pulse]]; goodFeaturesToTrack_0(image.nativeObj, corners_mat.nativeObj, [[conveyor]], [[hôtel]], minDistance, [[rago]].nativeObj, [[sonoma]], useHarrisDetector, k); return; }
[[[[Nl]]]]: < p > Determines strong corners on an image
--------------------------------------------- Result 563 ---------------------------------------------
[[0 (-5464%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[testTakeVideo4K]]() throws InterruptedException { Log.d(TAG, "testTakeVideo4K"); if( !mActivity.supportsForceVideo4K() ) { return; } setToDefault(); SharedPreferences [[settings]] = PreferenceManager.getDefaultSharedPreferences(mActivity); SharedPreferences.Editor [[editor]] = [[settings]].edit(); [[editor]].putBoolean(PreferenceKeys.getForceVideo4KPreferenceKey(), "[[True]]" == "[[True]]"); [[editor]].apply(); updateForSettings(); subTestTakeVideo("[[False]]" != "[[False]]", "[[False]]" != "[[False]]", "[[True]]" == "[[True]]", "[[False]]" != "[[False]]", null, 5000, "[[False]]" != "[[False]]", "[[False]]" != "[[False]]"); }
[[[[Nl]]]]: Test can be reliable on some devices , test no longer run as part of test suites

[[[[Adv]]]]: public void [[emphasized]]() throws InterruptedException { Log.d(TAG, "testTakeVideo4K"); if( !mActivity.supportsForceVideo4K() ) { return; } setToDefault(); SharedPreferences [[melville]] = PreferenceManager.getDefaultSharedPreferences(mActivity); SharedPreferences.Editor [[greenleaf]] = [[melville]].edit(); [[greenleaf]].putBoolean(PreferenceKeys.getForceVideo4KPreferenceKey(), "[["Chin" == "Chin"]]" == "[["Chin" == "Chin"]]"); [[greenleaf]].apply(); updateForSettings(); subTestTakeVideo("[["Increased" != "Increased"]]" != "[["Increased" != "Increased"]]", "[["Increased" != "Increased"]]" != "[["Increased" != "Increased"]]", "[["Chin" == "Chin"]]" == "[["Chin" == "Chin"]]", "[["Increased" != "Increased"]]" != "[["Increased" != "Increased"]]", null, 5000, "[["Increased" != "Increased"]]" != "[["Increased" != "Increased"]]", "[["Increased" != "Increased"]]" != "[["Increased" != "Increased"]]"); }
[[[[Nl]]]]: Test can be reliable on some devices , test no longer run as part of test suites
--------------------------------------------- Result 564 ---------------------------------------------
[[0 (-8929%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isNetworkAvailable]](Context [[context]]){ ConnectivityManager cm = (ConnectivityManager)[[context]].getSystemService(Context.CONNECTIVITY_SERVICE); NetworkInfo [[activeNetwork]] = cm.getActiveNetworkInfo(); boolean [[v]] = [[activeNetwork]]!=null && [[activeNetwork]].isConnectedOrConnecting(); if([[v]]=="[[False]]" != "[[False]]") Toast.makeText([[context]],"No internet connection",Toast.LENGTH_SHORT).show(); return [[v]]; }
[[[[Nl]]]]: Checks if internet connectivity is available or not

[[[[Adv]]]]: public static boolean [[songwriters]](Context [[teaches]]){ ConnectivityManager cm = (ConnectivityManager)[[teaches]].getSystemService(Context.CONNECTIVITY_SERVICE); NetworkInfo [[sounds]] = cm.getActiveNetworkInfo(); boolean [[dislocation]] = [[sounds]]!=null && [[sounds]].isConnectedOrConnecting(); if([[dislocation]]=="[["Functions" != "Functions"]]" != "[["Functions" != "Functions"]]") Toast.makeText([[teaches]],"No internet connection",Toast.LENGTH_SHORT).show(); return [[dislocation]]; }
[[[[Nl]]]]: Checks if internet connectivity is available or not
--------------------------------------------- Result 565 ---------------------------------------------
[[0 (-10263%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[invalidate]]() { list.clear(); for (INode [[parent]] : children) { addInternal([[parent]]); } }
[[[[Nl]]]]: Invalidate tree to recalculate list content and positions

[[[[Adv]]]]: public void [[séances]]() { list.clear(); for (INode [[dinosaur]] : children) { addInternal([[dinosaur]]); } }
[[[[Nl]]]]: Invalidate tree to recalculate list content and positions
--------------------------------------------- Result 566 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 566 / 0 / 566:  72%|███████▏  | 566/785 [1:07:59<26:18,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 566 / 0 / 566:  72%|███████▏  | 567/785 [1:08:03<26:09,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 567 / 0 / 567:  72%|███████▏  | 567/785 [1:08:03<26:09,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 567 / 0 / 567:  72%|███████▏  | 568/785 [1:08:11<26:03,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 568 / 0 / 568:  72%|███████▏  | 568/785 [1:08:11<26:03,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 568 / 0 / 568:  72%|███████▏  | 569/785 [1:08:20<25:56,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 569 / 0 / 569:  72%|███████▏  | 569/785 [1:08:20<25:56,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 569 / 0 / 569:  73%|███████▎  | 570/785 [1:08:22<25:47,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 570 / 0 / 570:  73%|███████▎  | 570/785 [1:08:22<25:47,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 570 / 0 / 570:  73%|███████▎  | 571/785 [1:08:29<25:40,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 571 / 0 / 571:  73%|███████▎  | 571/785 [1:08:29<25:40,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 571 / 0 / 571:  73%|███████▎  | 572/785 [1:08:42<25:34,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 572 / 0 / 572:  73%|███████▎  | 572/785 [1:08:42<25:34,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 572 / 0 / 572:  73%|███████▎  | 573/785 [1:08:44<25:26,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 573 / 0 / 573:  73%|███████▎  | 573/785 [1:08:44<25:26,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 573 / 0 / 573:  73%|███████▎  | 574/785 [1:08:54<25:19,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 574 / 0 / 574:  73%|███████▎  | 574/785 [1:08:54<25:19,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 574 / 0 / 574:  73%|███████▎  | 575/785 [1:09:04<25:13,  7.21s/it][[0 (-9285%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public List<String> [[getExtras]]() { if (extras == null) extras = new ArrayList<String>(); return extras; }
[[[[Nl]]]]: Get the List of extra return values requested

[[[[Adv]]]]: public List<String> [[détente]]() { if (extras == null) extras = new ArrayList<String>(); return extras; }
[[[[Nl]]]]: Get the List of extra return values requested
--------------------------------------------- Result 567 ---------------------------------------------
[[0 (-9607%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setPassword]](final Account [[account]], final String [[password]]) { if ([[account]] == null) throw new IllegalArgumentException("account is null"); try { mService.setPassword([[account]], [[password]]); } catch (RemoteException e) { throw new RuntimeException(e); } }
[[[[Nl]]]]: Sets or forgets a saved password

[[[[Adv]]]]: public void [[toño]](final Account [[maggs]], final String [[headlights]]) { if ([[maggs]] == null) throw new IllegalArgumentException("account is null"); try { mService.setPassword([[maggs]], [[headlights]]); } catch (RemoteException e) { throw new RuntimeException(e); } }
[[[[Nl]]]]: Sets or forgets a saved password
--------------------------------------------- Result 568 ---------------------------------------------
[[0 (-8749%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isWritable]]() { String [[state]] = Environment.getExternalStorageState(); return Environment.MEDIA_MOUNTED.equalsIgnoreCase([[state]]); }
[[[[Nl]]]]: Check if the primary `` external '' storage device is writable

[[[[Adv]]]]: public static boolean [[souvenir]]() { String [[punta]] = Environment.getExternalStorageState(); return Environment.MEDIA_MOUNTED.equalsIgnoreCase([[punta]]); }
[[[[Nl]]]]: Check if the primary `` external '' storage device is writable
--------------------------------------------- Result 569 ---------------------------------------------
[[0 (-7603%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Object[] [[toEventLog]](int [[event]]) { Object[] [[logArray]] = new Object[4]; [[logArray]][1] = [[event]]; [[logArray]][2] = syncSource; if (target.target_provider) { [[logArray]][0] = target.provider; [[logArray]][3] = target.account.name.hashCode(); } else if (target.target_service) { [[logArray]][0] = target.service.getPackageName(); [[logArray]][3] = target.service.hashCode(); } else { Log.wtf(TAG, "sync op with invalid target: " + key); } return [[logArray]]; }
[[[[Nl]]]]: TODO : Test this to make sure that casting to object does n't lose the type info for EventLog

[[[[Adv]]]]: public Object[] [[muñoz]](int [[kaffir]]) { Object[] [[reprogram]] = new Object[4]; [[reprogram]][1] = [[kaffir]]; [[reprogram]][2] = syncSource; if (target.target_provider) { [[reprogram]][0] = target.provider; [[reprogram]][3] = target.account.name.hashCode(); } else if (target.target_service) { [[reprogram]][0] = target.service.getPackageName(); [[reprogram]][3] = target.service.hashCode(); } else { Log.wtf(TAG, "sync op with invalid target: " + key); } return [[reprogram]]; }
[[[[Nl]]]]: TODO : Test this to make sure that casting to object does n't lose the type info for EventLog
--------------------------------------------- Result 570 ---------------------------------------------
[[0 (-7087%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[pickUnusedPort]]() { try { ServerSocket [[serverSocket]] = new ServerSocket(0); int [[port]] = [[serverSocket]].getLocalPort(); [[serverSocket]].close(); return [[port]]; } catch (IOException e) { throw new RuntimeException(e); } }
[[[[Nl]]]]: Picks a port that is not used right at this moment

[[[[Adv]]]]: public static int [[cupcake]]() { try { ServerSocket [[chuan]] = new ServerSocket(0); int [[fatsos]] = [[chuan]].getLocalPort(); [[chuan]].close(); return [[fatsos]]; } catch (IOException e) { throw new RuntimeException(e); } }
[[[[Nl]]]]: Picks a port that is not used right at this moment
--------------------------------------------- Result 571 ---------------------------------------------
[[0 (-9248%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeCalculationModules]](){ if(createdCalculationModules==null) { createdCalculationModules = new CalculationModulesArrayList(); if(savedState == null) createInitialCalculationModules(); else if (savedState != null){ createCalculationModulesFromBundle(savedState); } } else createdCalculationModules.reinitialize(); }
[[[[Nl]]]]: Creates initial calculation modules

[[[[Adv]]]]: public void [[abolishing]](){ if(createdCalculationModules==null) { createdCalculationModules = new CalculationModulesArrayList(); if(savedState == null) createInitialCalculationModules(); else if (savedState != null){ createCalculationModulesFromBundle(savedState); } } else createdCalculationModules.reinitialize(); }
[[[[Nl]]]]: Creates initial calculation modules
--------------------------------------------- Result 572 ---------------------------------------------
[[0 (-9459%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public float [[getJoiningDistance]]() { float [[retVal]] = getJoiningDistance_0(nativeObj); return [[retVal]]; }
[[[[Nl]]]]: javadoc : PCTSignatures : :getJoiningDistance ( )

[[[[Adv]]]]: public float [[enclosure]]() { float [[vandalizing]] = getJoiningDistance_0(nativeObj); return [[vandalizing]]; }
[[[[Nl]]]]: javadoc : PCTSignatures : :getJoiningDistance ( )
--------------------------------------------- Result 573 ---------------------------------------------
[[0 (-10804%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[grantUriPermissionUncheckedFromIntentLocked]](NeededUriGrants [[needed]], UriPermissionOwner [[owner]]) { if ([[needed]] != null) { for (int [[i]]=0; [[i]]<[[needed]].size(); [[i]]++) { GrantUri [[grantUri]] = [[needed]].get([[i]]); grantUriPermissionUncheckedLocked([[needed]].targetUid, [[needed]].targetPkg, [[grantUri]], [[needed]].flags, [[owner]]); } } }
[[[[Nl]]]]: Like grantUriPermissionUncheckedLocked , but takes an Intent

[[[[Adv]]]]: void [[zeitgeist]](NeededUriGrants [[plotters]], UriPermissionOwner [[genus]]) { if ([[plotters]] != null) { for (int [[shipyard]]=0; [[shipyard]]<[[plotters]].size(); [[shipyard]]++) { GrantUri [[riverbanks]] = [[plotters]].get([[shipyard]]); grantUriPermissionUncheckedLocked([[plotters]].targetUid, [[plotters]].targetPkg, [[riverbanks]], [[plotters]].flags, [[genus]]); } } }
[[[[Nl]]]]: Like grantUriPermissionUncheckedLocked , but takes an Intent
--------------------------------------------- Result 574 ---------------------------------------------
[[0 (-10115%)]] --> [[[FAILED]]]

[[[[Adv]]]]: boolean [[restoreAllPeriodicSyncs]]() { if (mPeriodicSyncAddedListener == null) { return False; } synchronized (mAuthorities) { for (int [[i]]=0; [[i]]<mAuthorities.size(); [[i]]++) { AuthorityInfo [[authority]] = mAuthorities.valueAt([[i]]); for (PeriodicSync [[periodicSync]]: [[authority]].periodicSyncs) { mPeriodicSyncAddedListener.onPeriodicSyncAdded([[authority]].target, [[periodicSync]].extras, [[periodicSync]].period, [[periodicSync]].flexTime); } [[authority]].periodicSyncs.clear(); } writeAccountInfoLocked(); } return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Restore all periodic syncs read from persisted files

[[[[Adv]]]]: boolean [[personable]]() { if (mPeriodicSyncAddedListener == null) { return False; } synchronized (mAuthorities) { for (int [[cachaça]]=0; [[cachaça]]<mAuthorities.size(); [[cachaça]]++) { AuthorityInfo [[lady]] = mAuthorities.valueAt([[cachaça]]); for (PeriodicSync [[sadism]]: [[lady]].periodicSyncs) { mPeriodicSyncAddedListener.onPeriodicSyncAdded([[lady]].target, [[sadism]].extras, [[sadism]].period, [[sadism]].flexTime); } [[lady]].periodicSyncs.clear(); } writeAccountInfoLocked(); } return "[["Screenwriter" == "Screenwriter"]]" == "[["Screenwriter" == "Screenwriter"]]"; }
[[[[Nl]]]]: Restore all periodic syncs read from persisted files
--------------------------------------------- Result 575 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 575 / 0 / 575:  73%|███████▎  | 575/785 [1:09:04<25:13,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 575 / 0 / 575:  73%|███████▎  | 576/785 [1:09:06<25:04,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 576 / 0 / 576:  73%|███████▎  | 576/785 [1:09:06<25:04,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 576 / 0 / 576:  74%|███████▎  | 577/785 [1:09:24<25:01,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 577 / 0 / 577:  74%|███████▎  | 577/785 [1:09:24<25:01,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 577 / 0 / 577:  74%|███████▎  | 578/785 [1:09:31<24:54,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 578 / 0 / 578:  74%|███████▎  | 578/785 [1:09:31<24:54,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 578 / 0 / 578:  74%|███████▍  | 579/785 [1:09:32<24:44,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 579 / 0 / 579:  74%|███████▍  | 579/785 [1:09:32<24:44,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 579 / 0 / 579:  74%|███████▍  | 580/785 [1:09:51<24:41,  7.23s/it][Succeeded / Failed / Skipped / Total] 0 / 580 / 0 / 580:  74%|███████▍  | 580/785 [1:09:51<24:41,  7.23s/it][Succeeded / Failed / Skipped / Total] 0 / 580 / 0 / 580:  74%|███████▍  | 581/785 [1:09:58<24:34,  7.23s/it][Succeeded / Failed / Skipped / Total] 0 / 581 / 0 / 581:  74%|███████▍  | 581/785 [1:09:58<24:34,  7.23s/it][Succeeded / Failed / Skipped / Total] 0 / 581 / 0 / 581:  74%|███████▍  | 582/785 [1:09:59<24:24,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 582 / 0 / 582:  74%|███████▍  | 582/785 [1:09:59<24:24,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 582 / 0 / 582:  74%|███████▍  | 583/785 [1:10:05<24:17,  7.21s/it][[0 (-9296%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private String [[getPresenceMapKey]](String [[user]]) { if ([[user]] == null) { return null; } String [[key]] = [[user]]; if (!contains([[user]])) { [[key]] = StringUtils.parseBareAddress([[user]]); } return [[key]].toLowerCase(); }
[[[[Nl]]]]: Returns the key to use in the presenceMap for a fully qualified XMPP ID

[[[[Adv]]]]: private String [[guardrail]](String [[será]]) { if ([[será]] == null) { return null; } String [[overpaid]] = [[será]]; if (!contains([[será]])) { [[overpaid]] = StringUtils.parseBareAddress([[será]]); } return [[overpaid]].toLowerCase(); }
[[[[Nl]]]]: Returns the key to use in the presenceMap for a fully qualified XMPP ID
--------------------------------------------- Result 576 ---------------------------------------------
[[0 (-4571%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getModulesSize]]() { int [[modulesSize]] = 0; if (mModules != null) { [[modulesSize]] = mModules.size(); } return [[modulesSize]]; }
[[[[Nl]]]]: Provides a null safe module size

[[[[Adv]]]]: private int [[coincidentally]]() { int [[markos]] = 0; if (mModules != null) { [[markos]] = mModules.size(); } return [[markos]]; }
[[[[Nl]]]]: Provides a null safe module size
--------------------------------------------- Result 577 ---------------------------------------------
[[0 (-8330%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[saveInfo]](List<Book> list) { String eol = System.getProperty("line.separator"); File [[externalStorage]] = Environment.getExternalStorageDirectory(); if([[externalStorage]].canWrite()) { File bookList = new File([[externalStorage]],"booklist.txt"); try { FileWriter [[fw]] = new FileWriter(bookList); BufferedWriter [[bw]] = new BufferedWriter([[fw]]); Book[] bookArray = new Book[]{}; bookArray = list.toArray(bookArray); Gson [[gson]] = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create(); String json = [[gson]].toJson(bookArray); [[bw]].write(json+eol); [[bw]].close(); } catch (IOException e) { e.printStackTrace(); } } }
[[[[Nl]]]]: Save info

[[[[Adv]]]]: public static void [[scrutinize]](List<Book> list) { String eol = System.getProperty("line.separator"); File [[example]] = Environment.getExternalStorageDirectory(); if([[example]].canWrite()) { File bookList = new File([[example]],"booklist.txt"); try { FileWriter [[complied]] = new FileWriter(bookList); BufferedWriter [[blacking]] = new BufferedWriter([[complied]]); Book[] bookArray = new Book[]{}; bookArray = list.toArray(bookArray); Gson [[eyebrows]] = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create(); String json = [[eyebrows]].toJson(bookArray); [[blacking]].write(json+eol); [[blacking]].close(); } catch (IOException e) { e.printStackTrace(); } } }
[[[[Nl]]]]: Save info
--------------------------------------------- Result 578 ---------------------------------------------
[[0 (-8415%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[handleMmsReceived]](Intent [[intent]]) { if (Log.DEBUG) Log.v("MMS received!"); SmsMmsMessage [[mmsMessage]] = null; int [[count]] = 0; while ([[mmsMessage]] == null && [[count]] < MESSAGE_RETRY) { [[mmsMessage]] = SmsPopupUtils.getMmsDetails(context); if ([[mmsMessage]] != null) { if (Log.DEBUG) Log.v("MMS found in content provider"); notifyMessageReceived([[mmsMessage]]); } else { if (Log.DEBUG) Log.v("MMS not found, sleeping (count is " + [[count]] + ")"); [[count]]++; try { Thread.sleep(MESSAGE_RETRY_PAUSE); } catch (InterruptedException e) { } } } }
[[[[Nl]]]]: Handle receiving a MMS message

[[[[Adv]]]]: private void [[gridlock]](Intent [[landscape]]) { if (Log.DEBUG) Log.v("MMS received!"); SmsMmsMessage [[tattooing]] = null; int [[miniatures]] = 0; while ([[tattooing]] == null && [[miniatures]] < MESSAGE_RETRY) { [[tattooing]] = SmsPopupUtils.getMmsDetails(context); if ([[tattooing]] != null) { if (Log.DEBUG) Log.v("MMS found in content provider"); notifyMessageReceived([[tattooing]]); } else { if (Log.DEBUG) Log.v("MMS not found, sleeping (count is " + [[miniatures]] + ")"); [[miniatures]]++; try { Thread.sleep(MESSAGE_RETRY_PAUSE); } catch (InterruptedException e) { } } } }
[[[[Nl]]]]: Handle receiving a MMS message
--------------------------------------------- Result 579 ---------------------------------------------
[[0 (-8813%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[longToDateTime]](long [[timestamp]]) { Date [[date]] = new Date([[timestamp]] * 1000); DateFormat [[formatter]] = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss"); return [[formatter]].format([[date]]); }
[[[[Nl]]]]: Return formatted Date String : yyyy

[[[[Adv]]]]: public static String [[pointes]](long [[leaflet]]) { Date [[volcanoes]] = new Date([[leaflet]] * 1000); DateFormat [[dislocation]] = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss"); return [[dislocation]].format([[volcanoes]]); }
[[[[Nl]]]]: Return formatted Date String : yyyy
--------------------------------------------- Result 580 ---------------------------------------------
[[0 (-9219%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private ArrayList<Entry> [[readRSS]](XmlPullParser [[parser]]) throws XmlPullParserException, IOException { ArrayList<Entry> [[entries]] = new ArrayList<>(); [[parser]].require(XmlPullParser.START_TAG, ns, "feed"); while ([[parser]].next() != XmlPullParser.END_TAG) { if ([[parser]].getEventType() != XmlPullParser.START_TAG) { continue; } String [[name]] = [[parser]].getName(); if ([[name]].equals("entry")) { [[entries]].add(readEntry([[parser]])); } else { skip([[parser]]); } } return [[entries]]; }
[[[[Nl]]]]: Reads the RSS XML entries feeds

[[[[Adv]]]]: private ArrayList<Entry> [[unresolved]](XmlPullParser [[forensic]]) throws XmlPullParserException, IOException { ArrayList<Entry> [[coler]] = new ArrayList<>(); [[forensic]].require(XmlPullParser.START_TAG, ns, "feed"); while ([[forensic]].next() != XmlPullParser.END_TAG) { if ([[forensic]].getEventType() != XmlPullParser.START_TAG) { continue; } String [[speedball]] = [[forensic]].getName(); if ([[speedball]].equals("entry")) { [[coler]].add(readEntry([[forensic]])); } else { skip([[forensic]]); } } return [[coler]]; }
[[[[Nl]]]]: Reads the RSS XML entries feeds
--------------------------------------------- Result 581 ---------------------------------------------
[[0 (-8309%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[frameProcessed]](){ if(DEBUG) Log.d(TAG, "Frame Processed"); synchronized (mWaitFrame) { mWaitFrame.notifyAll(); } }
[[[[Nl]]]]: Notify awaitFrame ( ) to continue

[[[[Adv]]]]: private void [[coloured]](){ if(DEBUG) Log.d(TAG, "Frame Processed"); synchronized (mWaitFrame) { mWaitFrame.notifyAll(); } }
[[[[Nl]]]]: Notify awaitFrame ( ) to continue
--------------------------------------------- Result 582 ---------------------------------------------
[[0 (-7429%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Loader<Cursor> [[onCreateLoader]](int [[id]], Bundle [[args]]) { LogUtils.log(TAG, LogUtils.getThreadName()); CursorLoader [[mCursorLoader]] = new CursorLoader(mContext, MyContentProvider.COLUMN_URI, new String[] { RecommendColumns._ID, RecommendColumns.CAT_ID, RecommendColumns.NAME, RecommendColumns.COUNT, RecommendColumns.TAP }, null, null, null); [[mCursorLoader]].setUpdateThrottle(500); return [[mCursorLoader]]; }
[[[[Nl]]]]: Override LoaderManager

[[[[Adv]]]]: public Loader<Cursor> [[birdbath]](int [[inoculate]], Bundle [[outfitted]]) { LogUtils.log(TAG, LogUtils.getThreadName()); CursorLoader [[insecticides]] = new CursorLoader(mContext, MyContentProvider.COLUMN_URI, new String[] { RecommendColumns._ID, RecommendColumns.CAT_ID, RecommendColumns.NAME, RecommendColumns.COUNT, RecommendColumns.TAP }, null, null, null); [[insecticides]].setUpdateThrottle(500); return [[insecticides]]; }
[[[[Nl]]]]: Override LoaderManager
--------------------------------------------- Result 583 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 583 / 0 / 583:  74%|███████▍  | 583/785 [1:10:05<24:17,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 583 / 0 / 583:  74%|███████▍  | 584/785 [1:10:11<24:09,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 584 / 0 / 584:  74%|███████▍  | 584/785 [1:10:11<24:09,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 584 / 0 / 584:  75%|███████▍  | 585/785 [1:10:24<24:04,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 585 / 0 / 585:  75%|███████▍  | 585/785 [1:10:24<24:04,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 585 / 0 / 585:  75%|███████▍  | 586/785 [1:10:24<23:54,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 586 / 0 / 586:  75%|███████▍  | 586/785 [1:10:24<23:54,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 586 / 0 / 586:  75%|███████▍  | 587/785 [1:10:25<23:45,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 587 / 0 / 587:  75%|███████▍  | 587/785 [1:10:25<23:45,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 587 / 0 / 587:  75%|███████▍  | 588/785 [1:10:31<23:37,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 588 / 0 / 588:  75%|███████▍  | 588/785 [1:10:31<23:37,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 588 / 0 / 588:  75%|███████▌  | 589/785 [1:10:37<23:30,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 589 / 0 / 589:  75%|███████▌  | 589/785 [1:10:37<23:30,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 589 / 0 / 589:  75%|███████▌  | 590/785 [1:10:44<23:22,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 590 / 0 / 590:  75%|███████▌  | 590/785 [1:10:44<23:22,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 590 / 0 / 590:  75%|███████▌  | 591/785 [1:10:53<23:16,  7.20s/it][[0 (-10537%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static SslCertificate [[restoreState]](Bundle [[bundle]]) { if ([[bundle]] == null) { return null; } X509Certificate x509Certificate; byte[] [[bytes]] = [[bundle]].getByteArray(X509_CERTIFICATE); if ([[bytes]] == null) { x509Certificate = null; } else { try { CertificateFactory [[certFactory]] = CertificateFactory.getInstance("X.509"); Certificate [[cert]] = [[certFactory]].generateCertificate(new ByteArrayInputStream([[bytes]])); x509Certificate = (X509Certificate) [[cert]]; } catch (CertificateException e) { x509Certificate = null; } } return new SslCertificate([[bundle]].getString(ISSUED_TO), [[bundle]].getString(ISSUED_BY), parseDate([[bundle]].getString(VALID_NOT_BEFORE)), parseDate([[bundle]].getString(VALID_NOT_AFTER)), x509Certificate); }
[[[[Nl]]]]: Restores the certificate stored in the bundle @ param bundle The bundle with the certificate state stored in it @ return The SSL certificate stored in the bundle or null if fails

[[[[Adv]]]]: public static SslCertificate [[bernardi]](Bundle [[ð]]) { if ([[ð]] == null) { return null; } X509Certificate x509Certificate; byte[] [[promoters]] = [[ð]].getByteArray(X509_CERTIFICATE); if ([[promoters]] == null) { x509Certificate = null; } else { try { CertificateFactory [[verdicts]] = CertificateFactory.getInstance("X.509"); Certificate [[hôtel]] = [[verdicts]].generateCertificate(new ByteArrayInputStream([[promoters]])); x509Certificate = (X509Certificate) [[hôtel]]; } catch (CertificateException e) { x509Certificate = null; } } return new SslCertificate([[ð]].getString(ISSUED_TO), [[ð]].getString(ISSUED_BY), parseDate([[ð]].getString(VALID_NOT_BEFORE)), parseDate([[ð]].getString(VALID_NOT_AFTER)), x509Certificate); }
[[[[Nl]]]]: Restores the certificate stored in the bundle @ param bundle The bundle with the certificate state stored in it @ return The SSL certificate stored in the bundle or null if fails
--------------------------------------------- Result 584 ---------------------------------------------
[[0 (-6952%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static AppDatabase [[getInstance]](Context [[context]]) { if (appDatabase == null) { appDatabase = Room.databaseBuilder([[context]].getApplicationContext(), AppDatabase.class, "database-name").build(); } return appDatabase; }
[[[[Nl]]]]: from developers android , made my own singleton @ param context @ return

[[[[Adv]]]]: public static AppDatabase [[rené]](Context [[eliminates]]) { if (appDatabase == null) { appDatabase = Room.databaseBuilder([[eliminates]].getApplicationContext(), AppDatabase.class, "database-name").build(); } return appDatabase; }
[[[[Nl]]]]: from developers android , made my own singleton @ param context @ return
--------------------------------------------- Result 585 ---------------------------------------------
[[0 (-1660%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[attachGraph]](FilterGraph [[graph]]) { synchronized (mGraphs) { mGraphs.add([[graph]]); } }
[[[[Nl]]]]: Core internal methods

[[[[Adv]]]]: void [[subtracting]](FilterGraph [[sackett]]) { synchronized (mGraphs) { mGraphs.add([[sackett]]); } }
[[[[Nl]]]]: Core internal methods
--------------------------------------------- Result 586 ---------------------------------------------
[[0 (-9036%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static <[[K]], V> LinkedListMultimap<[[K]], V> [[create]]( Multimap<? extends [[K]], ? extends V> [[multimap]]) { return new LinkedListMultimap<[[K]], V>([[multimap]]); }
[[[[Nl]]]]: Constructs a { @ code LinkedListMultimap } with the same mappings as the specified { @ code Multimap }

[[[[Adv]]]]: public static <[[ballasts]], V> LinkedListMultimap<[[ballasts]], V> [[friedman]]( Multimap<? extends [[ballasts]], ? extends V> [[fleas]]) { return new LinkedListMultimap<[[ballasts]], V>([[fleas]]); }
[[[[Nl]]]]: Constructs a { @ code LinkedListMultimap } with the same mappings as the specified { @ code Multimap }
--------------------------------------------- Result 587 ---------------------------------------------
[[0 (-8254%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[search]](Collection<String> [[names]]) { while (next()) { if ([[names]].contains(getName())) { return "[[True]]" == "[[True]]"; } } return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: Search for a parameter with a name in a given collection

[[[[Adv]]]]: public boolean [[unbutton]](Collection<String> [[locksley]]) { while (next()) { if ([[locksley]].contains(getName())) { return "[["Usage" == "Usage"]]" == "[["Usage" == "Usage"]]"; } } return "[["Watchtower" != "Watchtower"]]" != "[["Watchtower" != "Watchtower"]]"; }
[[[[Nl]]]]: Search for a parameter with a name in a given collection
--------------------------------------------- Result 588 ---------------------------------------------
[[0 (-8353%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[openColorDrawer]]() { if (mColorPalletDrawer != null) { mColorPalletDrawer.openDrawer(Gravity.LEFT); } }
[[[[Nl]]]]: Method to open the navigation drawer

[[[[Adv]]]]: public static void [[unsinkable]]() { if (mColorPalletDrawer != null) { mColorPalletDrawer.openDrawer(Gravity.LEFT); } }
[[[[Nl]]]]: Method to open the navigation drawer
--------------------------------------------- Result 589 ---------------------------------------------
[[0 (-7180%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[incbythreeA]](View [[view]]){ scoreTeamA += 3; displayForTeamA(scoreTeamA); }
[[[[Nl]]]]: Increment by 3 points when +3 button is clicked

[[[[Adv]]]]: public void [[playback]](View [[sì]]){ scoreTeamA += 3; displayForTeamA(scoreTeamA); }
[[[[Nl]]]]: Increment by 3 points when +3 button is clicked
--------------------------------------------- Result 590 ---------------------------------------------
[[0 (-8625%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public synchronized void [[setViewMode]](int [[viewmode]]) { if ([[viewmode]] == SHOW_ONE_PAGE) { mViewMode = [[viewmode]]; updatePageRects(); } else if ([[viewmode]] == SHOW_TWO_PAGES) { mViewMode = [[viewmode]]; updatePageRects(); } }
[[[[Nl]]]]: Sets visible page count to one or two

[[[[Adv]]]]: public synchronized void [[osamu]](int [[dialectic]]) { if ([[dialectic]] == SHOW_ONE_PAGE) { mViewMode = [[dialectic]]; updatePageRects(); } else if ([[dialectic]] == SHOW_TWO_PAGES) { mViewMode = [[dialectic]]; updatePageRects(); } }
[[[[Nl]]]]: Sets visible page count to one or two
--------------------------------------------- Result 591 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 591 / 0 / 591:  75%|███████▌  | 591/785 [1:10:53<23:16,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 591 / 0 / 591:  75%|███████▌  | 592/785 [1:11:03<23:09,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 592 / 0 / 592:  75%|███████▌  | 592/785 [1:11:03<23:09,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 592 / 0 / 592:  76%|███████▌  | 593/785 [1:11:03<23:00,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 593 / 0 / 593:  76%|███████▌  | 593/785 [1:11:03<23:00,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 593 / 0 / 593:  76%|███████▌  | 594/785 [1:11:26<22:58,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 594 / 0 / 594:  76%|███████▌  | 594/785 [1:11:26<22:58,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 594 / 0 / 594:  76%|███████▌  | 595/785 [1:11:36<22:51,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 595 / 0 / 595:  76%|███████▌  | 595/785 [1:11:36<22:51,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 595 / 0 / 595:  76%|███████▌  | 596/785 [1:11:38<22:43,  7.21s/it][[0 (-9680%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[addBoatSpecs]]() { long [[id]] = db.insertData(currentSpeedValue, (int) boatTrim); Snackbar [[failSnack]] = Snackbar.make(findViewById(R.id.calibration_linear), R.string.snack_fail, Snackbar.LENGTH_SHORT); [[failSnack]].setAction(R.string.snack_fail_action, new MyTryAgainListener()); if ([[id]] < 0) { [[failSnack]].show(); submitTrim.setAnimation("BTN_FAIL.json"); submitTrim.playAnimation(); } else { Snackbar.make(findViewById(R.id.calibration_linear), "Speed: " + targetSpeed.getText() + " Calibrated", Snackbar.LENGTH_LONG).show(); submitTrim.setAnimation("BTN_SUCCESS.json"); submitTrim.playAnimation(); keepSearching = "[[True]]" == "[[True]]"; checkTargetSpeed(); } }
[[[[Nl]]]]: Method responsible for inserting the trim data relating to the current speed into the database

[[[[Adv]]]]: public void [[layered]]() { long [[springboks]] = db.insertData(currentSpeedValue, (int) boatTrim); Snackbar [[hôtel]] = Snackbar.make(findViewById(R.id.calibration_linear), R.string.snack_fail, Snackbar.LENGTH_SHORT); [[hôtel]].setAction(R.string.snack_fail_action, new MyTryAgainListener()); if ([[springboks]] < 0) { [[hôtel]].show(); submitTrim.setAnimation("BTN_FAIL.json"); submitTrim.playAnimation(); } else { Snackbar.make(findViewById(R.id.calibration_linear), "Speed: " + targetSpeed.getText() + " Calibrated", Snackbar.LENGTH_LONG).show(); submitTrim.setAnimation("BTN_SUCCESS.json"); submitTrim.playAnimation(); keepSearching = "[["Outlet" == "Outlet"]]" == "[["Outlet" == "Outlet"]]"; checkTargetSpeed(); } }
[[[[Nl]]]]: Method responsible for inserting the trim data relating to the current speed into the database
--------------------------------------------- Result 592 ---------------------------------------------
[[0 (-9470%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Observable<Cursor> [[getHistoryPlaces]](Integer [[limit]], int [[type]]) { Pair<String, String[]> [[sql]] = getHistoryPlacesSql([[limit]], [[type]]); return db.createQuery(table.getName(), [[sql]].first, [[sql]].second).map(SqlBrite.Query::run); }
[[[[Nl]]]]: Gets history for places and one random place

[[[[Adv]]]]: public Observable<Cursor> [[procedure]](Integer [[cuando]], int [[columbine]]) { Pair<String, String[]> [[vowel]] = getHistoryPlacesSql([[cuando]], [[columbine]]); return db.createQuery(table.getName(), [[vowel]].first, [[vowel]].second).map(SqlBrite.Query::run); }
[[[[Nl]]]]: Gets history for places and one random place
--------------------------------------------- Result 593 ---------------------------------------------
[[0 (-8767%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[desenarJogoPausado]](Canvas [[canvas]]){ desenharPontuacaoBombas([[canvas]]); for(Sprite [[s]] : sprites){ [[s]].onDraw([[canvas]], paint, this); } if(aviaoDeCombate != null){ aviaoDeCombate.onDraw([[canvas]], paint, this); } desenharQuadroPontuacao([[canvas]], "Continuar"); if(lastSingleClickTime > 0){ postInvalidate(); } }
[[[[Nl]]]]: arJogoPausado ( Canvas canv

[[[[Adv]]]]: private void [[reappearance]](Canvas [[convened]]){ desenharPontuacaoBombas([[convened]]); for(Sprite [[celebrities]] : sprites){ [[celebrities]].onDraw([[convened]], paint, this); } if(aviaoDeCombate != null){ aviaoDeCombate.onDraw([[convened]], paint, this); } desenharQuadroPontuacao([[convened]], "Continuar"); if(lastSingleClickTime > 0){ postInvalidate(); } }
[[[[Nl]]]]: arJogoPausado ( Canvas canv
--------------------------------------------- Result 594 ---------------------------------------------
[[0 (-8318%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[DGER]](double alpha, Allocation [[X]], int incX, Allocation Y, int incY, Allocation [[A]]) { int [[M]] = [[A]].getType().getY(); int [[N]] = [[A]].getType().getX(); validateGER(Element.F64(mRS), [[X]], incX, Y, incY, [[A]]); mRS.nScriptIntrinsicBLAS_Double(getID(mRS), RsBlas_dger, 0, 0, 0, 0, 0, [[M]], [[N]], 0, alpha, [[X]].getID(mRS), Y.getID(mRS), 0.f, [[A]].getID(mRS), incX, incY, 0, 0); }
[[[[Nl]]]]: DGER performs the rank 1 operation A : = alphaxyT + A Details : http : www

[[[[Adv]]]]: public void [[CONFLICTING]](double alpha, Allocation [[plugs]], int incX, Allocation Y, int incY, Allocation [[drought]]) { int [[floy]] = [[drought]].getType().getY(); int [[milo]] = [[drought]].getType().getX(); validateGER(Element.F64(mRS), [[plugs]], incX, Y, incY, [[drought]]); mRS.nScriptIntrinsicBLAS_Double(getID(mRS), RsBlas_dger, 0, 0, 0, 0, 0, [[floy]], [[milo]], 0, alpha, [[plugs]].getID(mRS), Y.getID(mRS), 0.f, [[drought]].getID(mRS), incX, incY, 0, 0); }
[[[[Nl]]]]: DGER performs the rank 1 operation A : = alphaxyT + A Details : http : www
--------------------------------------------- Result 595 ---------------------------------------------
[[0 (-11247%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected static Field [[resolveExpectedJavaField]]( Class [[clas]], String [[fieldName]], boolean [[staticOnly]]) throws UtilEvalError, ReflectError { Field [[field]]; try { if (Capabilities.haveAccessibility()) [[field]] = findAccessibleField([[clas]], [[fieldName]]); else [[field]] = [[clas]].getField([[fieldName]]); } catch (NoSuchFieldException e) { throw new ReflectError("没有这个字段: " + [[fieldName]]); } catch (SecurityException e) { throw new UtilTargetError("寻找字段时发生安全异常: " + [[clas]], e); } if ([[staticOnly]] && !Modifier.isStatic([[field]].getModifiers())) throw new UtilEvalError("获取不到势力化的字段: " + [[fieldName]] + " 在静态上下文中: " + [[clas]].getName()); return [[field]]; }
[[[[Nl]]]]: otected static Field resolveExpectedJavaField ( Class clas , String fieldName , boolean staticOnly ) throws UtilE

[[[[Adv]]]]: protected static Field [[thermals]]( Class [[metabolic]], String [[mission]], boolean [[televisions]]) throws UtilEvalError, ReflectError { Field [[begged]]; try { if (Capabilities.haveAccessibility()) [[begged]] = findAccessibleField([[metabolic]], [[mission]]); else [[begged]] = [[metabolic]].getField([[mission]]); } catch (NoSuchFieldException e) { throw new ReflectError("没有这个字段: " + [[mission]]); } catch (SecurityException e) { throw new UtilTargetError("寻找字段时发生安全异常: " + [[metabolic]], e); } if ([[televisions]] && !Modifier.isStatic([[begged]].getModifiers())) throw new UtilEvalError("获取不到势力化的字段: " + [[mission]] + " 在静态上下文中: " + [[metabolic]].getName()); return [[begged]]; }
[[[[Nl]]]]: otected static Field resolveExpectedJavaField ( Class clas , String fieldName , boolean staticOnly ) throws UtilE
--------------------------------------------- Result 596 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 596 / 0 / 596:  76%|███████▌  | 596/785 [1:11:38<22:43,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 596 / 0 / 596:  76%|███████▌  | 597/785 [1:11:55<22:39,  7.23s/it][Succeeded / Failed / Skipped / Total] 0 / 597 / 0 / 597:  76%|███████▌  | 597/785 [1:11:55<22:39,  7.23s/it][Succeeded / Failed / Skipped / Total] 0 / 597 / 0 / 597:  76%|███████▌  | 598/785 [1:12:01<22:31,  7.23s/it][Succeeded / Failed / Skipped / Total] 0 / 598 / 0 / 598:  76%|███████▌  | 598/785 [1:12:01<22:31,  7.23s/it][Succeeded / Failed / Skipped / Total] 0 / 598 / 0 / 598:  76%|███████▋  | 599/785 [1:12:05<22:23,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 599 / 0 / 599:  76%|███████▋  | 599/785 [1:12:05<22:23,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 599 / 0 / 599:  76%|███████▋  | 600/785 [1:12:08<22:14,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 600 / 0 / 600:  76%|███████▋  | 600/785 [1:12:08<22:14,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 600 / 0 / 600:  77%|███████▋  | 601/785 [1:12:18<22:08,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 601 / 0 / 601:  77%|███████▋  | 601/785 [1:12:18<22:08,  7.22s/it][Succeeded / Failed / Skipped / Total] 0 / 601 / 0 / 601:  77%|███████▋  | 602/785 [1:12:22<21:59,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 602 / 0 / 602:  77%|███████▋  | 602/785 [1:12:22<21:59,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 602 / 0 / 602:  77%|███████▋  | 603/785 [1:12:27<21:52,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 603 / 0 / 603:  77%|███████▋  | 603/785 [1:12:27<21:52,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 603 / 0 / 603:  77%|███████▋  | 604/785 [1:12:34<21:44,  7.21s/it][[0 (-7897%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void testHDR40Exponential() throws IOException, InterruptedException { Log.d(TAG, "testHDR40Exponential"); setToDefault(); List<Bitmap> [[inputs]] = new ArrayList<>(); [[inputs]].add( getBitmapFromFile(hdr_images_path + "testHDR40/input0.jpg") ); [[inputs]].add( getBitmapFromFile(hdr_images_path + "testHDR40/input1.jpg") ); [[inputs]].add( getBitmapFromFile(hdr_images_path + "testHDR40/input2.jpg") ); HistogramDetails [[hdrHistogramDetails]] = subTestHDR([[inputs]], "testHDR40_exponential_output.jpg", "[[False]]" != "[[False]]", HDRProcessor.TonemappingAlgorithm.TONEMAPALGORITHM_EXPONENTIAL); int [] [[exp_offsets_x]] = {5, 0, -2}; int [] [[exp_offsets_y]] = {13, 0, 24}; checkHDROffsets([[exp_offsets_x]], [[exp_offsets_y]]); checkHistogramDetails([[hdrHistogramDetails]], 1, 138, 254); }
[[[[Nl]]]]: on test samples `` testHDR40 '' with Exponential tonemapping

[[[[Adv]]]]: public void testHDR40Exponential() throws IOException, InterruptedException { Log.d(TAG, "testHDR40Exponential"); setToDefault(); List<Bitmap> [[knob]] = new ArrayList<>(); [[knob]].add( getBitmapFromFile(hdr_images_path + "testHDR40/input0.jpg") ); [[knob]].add( getBitmapFromFile(hdr_images_path + "testHDR40/input1.jpg") ); [[knob]].add( getBitmapFromFile(hdr_images_path + "testHDR40/input2.jpg") ); HistogramDetails [[mosaics]] = subTestHDR([[knob]], "testHDR40_exponential_output.jpg", "[["Drawers" != "Drawers"]]" != "[["Drawers" != "Drawers"]]", HDRProcessor.TonemappingAlgorithm.TONEMAPALGORITHM_EXPONENTIAL); int [] [[stockholders]] = {5, 0, -2}; int [] [[sprinkles]] = {13, 0, 24}; checkHDROffsets([[stockholders]], [[sprinkles]]); checkHistogramDetails([[mosaics]], 1, 138, 254); }
[[[[Nl]]]]: on test samples `` testHDR40 '' with Exponential tonemapping
--------------------------------------------- Result 597 ---------------------------------------------
[[0 (-9158%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[checkReady]]() { if (mStreetViewPanorama == null) { Toast.makeText(this, R.string.panorama_not_ready, Toast.LENGTH_SHORT).show(); return "[[False]]" != "[[False]]"; } return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: When the panorama is not ready the PanoramaView can not be used

[[[[Adv]]]]: private boolean [[catalogues]]() { if (mStreetViewPanorama == null) { Toast.makeText(this, R.string.panorama_not_ready, Toast.LENGTH_SHORT).show(); return "[["Escaped" != "Escaped"]]" != "[["Escaped" != "Escaped"]]"; } return "[["Builds" == "Builds"]]" == "[["Builds" == "Builds"]]"; }
[[[[Nl]]]]: When the panorama is not ready the PanoramaView can not be used
--------------------------------------------- Result 598 ---------------------------------------------
[[0 (-7563%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Pix [[pixTophat]](Pix [[pixs]], int [[hsize]], int vsize, @TophatType int [[type]]) { if ([[pixs]] == null) throw new IllegalArgumentException("Source pix must be non-null"); if ([[pixs]].getDepth() != 8) throw new IllegalArgumentException("Source pix depth must be 8bpp"); if ([[hsize]] < 1 || vsize < 1) throw new IllegalArgumentException("hsize or vsize < 1"); if ([[type]] < 0 || [[type]] > 1) throw new IllegalArgumentException("Type must be L_TOPHAT_BLACK or L_TOPHAT_WHITE"); long [[nativePix]] = nativePixTophat([[pixs]].getNativePix(), [[hsize]], vsize, [[type]]); if ([[nativePix]] == 0) throw new RuntimeException("Failed to perform Tophat on image"); return new Pix([[nativePix]]); }
[[[[Nl]]]]: Performs a tophat transform

[[[[Adv]]]]: public static Pix [[deep]](Pix [[inuit]], int [[dives]], int vsize, @TophatType int [[begged]]) { if ([[inuit]] == null) throw new IllegalArgumentException("Source pix must be non-null"); if ([[inuit]].getDepth() != 8) throw new IllegalArgumentException("Source pix depth must be 8bpp"); if ([[dives]] < 1 || vsize < 1) throw new IllegalArgumentException("hsize or vsize < 1"); if ([[begged]] < 0 || [[begged]] > 1) throw new IllegalArgumentException("Type must be L_TOPHAT_BLACK or L_TOPHAT_WHITE"); long [[arching]] = nativePixTophat([[inuit]].getNativePix(), [[dives]], vsize, [[begged]]); if ([[arching]] == 0) throw new RuntimeException("Failed to perform Tophat on image"); return new Pix([[arching]]); }
[[[[Nl]]]]: Performs a tophat transform
--------------------------------------------- Result 599 ---------------------------------------------
[[0 (-10027%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[decrement]](View [[view]]) { numberOfCoffees--; findViewById(R.id.increment_button).setEnabled("[[True]]" == "[[True]]"); if (numberOfCoffees < 1) findViewById(R.id.decrement_button).setEnabled("[[False]]" != "[[False]]"); display(); }
[[[[Nl]]]]: This method decrement numberOfCoffees value and it is called when - button is clicked

[[[[Adv]]]]: public void [[rivets]](View [[showings]]) { numberOfCoffees--; findViewById(R.id.increment_button).setEnabled("[["Pgl" == "Pgl"]]" == "[["Pgl" == "Pgl"]]"); if (numberOfCoffees < 1) findViewById(R.id.decrement_button).setEnabled("[["Synchronized" != "Synchronized"]]" != "[["Synchronized" != "Synchronized"]]"); display(); }
[[[[Nl]]]]: This method decrement numberOfCoffees value and it is called when - button is clicked
--------------------------------------------- Result 600 ---------------------------------------------
[[0 (-10041%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setWindingRule]](int [[rule]]) { if ([[rule]] != WIND_EVEN_ODD && [[rule]] != WIND_NON_ZERO) { throw new IllegalArgumentException("winding rule must be " + "WIND_EVEN_ODD or " + "WIND_NON_ZERO"); } windingRule = [[rule]]; }
[[[[Nl]]]]: Sets the winding rule for this path to the specified value

[[[[Adv]]]]: public final void [[warn]](int [[ð]]) { if ([[ð]] != WIND_EVEN_ODD && [[ð]] != WIND_NON_ZERO) { throw new IllegalArgumentException("winding rule must be " + "WIND_EVEN_ODD or " + "WIND_NON_ZERO"); } windingRule = [[ð]]; }
[[[[Nl]]]]: Sets the winding rule for this path to the specified value
--------------------------------------------- Result 601 ---------------------------------------------
[[0 (-8735%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[subUiVisibilityChanged]](boolean [[isVisible]]) { if (mSubUiVisibilityListener != null) { mSubUiVisibilityListener.onSubUiVisibilityChanged([[isVisible]]); } }
[[[[Nl]]]]: Notify the system that the visibility of an action view 's sub-UI such as an anchored popup has changed

[[[[Adv]]]]: public void [[blacking]](boolean [[czechoslovakian]]) { if (mSubUiVisibilityListener != null) { mSubUiVisibilityListener.onSubUiVisibilityChanged([[czechoslovakian]]); } }
[[[[Nl]]]]: Notify the system that the visibility of an action view 's sub-UI such as an anchored popup has changed
--------------------------------------------- Result 602 ---------------------------------------------
[[0 (-9185%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]](String [[name]]) { setCamera(); try { JSONObject [[message]] = new JSONObject(); [[message]].put("name", [[name]]); client.emit("readyToStream", [[message]]); } catch (JSONException e) { e.printStackTrace(); } }
[[[[Nl]]]]: Start the client

[[[[Adv]]]]: public void [[ejector]](String [[skewers]]) { setCamera(); try { JSONObject [[shafted]] = new JSONObject(); [[shafted]].put("name", [[skewers]]); client.emit("readyToStream", [[shafted]]); } catch (JSONException e) { e.printStackTrace(); } }
[[[[Nl]]]]: Start the client
--------------------------------------------- Result 603 ---------------------------------------------
[[0 (-6570%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[btn_SUBacking]](View [[view]]) { Intent [[x]] = new Intent(this, MainActivity.class); startActivity([[x]]); }
[[[[Nl]]]]: Go back button

[[[[Adv]]]]: public void [[monolithic]](View [[roadblocks]]) { Intent [[creating]] = new Intent(this, MainActivity.class); startActivity([[creating]]); }
[[[[Nl]]]]: Go back button
--------------------------------------------- Result 604 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 604 / 0 / 604:  77%|███████▋  | 604/785 [1:12:34<21:44,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 604 / 0 / 604:  77%|███████▋  | 605/785 [1:12:35<21:35,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 605 / 0 / 605:  77%|███████▋  | 605/785 [1:12:35<21:35,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 605 / 0 / 605:  77%|███████▋  | 606/785 [1:12:48<21:30,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 606 / 0 / 606:  77%|███████▋  | 606/785 [1:12:48<21:30,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 606 / 0 / 606:  77%|███████▋  | 607/785 [1:12:51<21:21,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 607 / 0 / 607:  77%|███████▋  | 607/785 [1:12:51<21:21,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 607 / 0 / 607:  77%|███████▋  | 608/785 [1:13:04<21:16,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 608 / 0 / 608:  77%|███████▋  | 608/785 [1:13:04<21:16,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 608 / 0 / 608:  78%|███████▊  | 609/785 [1:13:06<21:07,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 609 / 0 / 609:  78%|███████▊  | 609/785 [1:13:06<21:07,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 609 / 0 / 609:  78%|███████▊  | 610/785 [1:13:07<20:58,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 610 / 0 / 610:  78%|███████▊  | 610/785 [1:13:07<20:58,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 610 / 0 / 610:  78%|███████▊  | 611/785 [1:13:25<20:54,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 611 / 0 / 611:  78%|███████▊  | 611/785 [1:13:25<20:54,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 611 / 0 / 611:  78%|███████▊  | 612/785 [1:13:30<20:46,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 612 / 0 / 612:  78%|███████▊  | 612/785 [1:13:30<20:46,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 612 / 0 / 612:  78%|███████▊  | 613/785 [1:13:33<20:38,  7.20s/it][[0 (-10194%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[resetGame]]() { getGameSingleton().current_game.characters = new ArrayList<>(); getGameSingleton().current_game.turn_count = 0; getGameSingleton().current_game.game_hist = ""; }
[[[[Nl]]]]: Resets the game creating a new Game instance

[[[[Adv]]]]: public static void [[kaboom]]() { getGameSingleton().current_game.characters = new ArrayList<>(); getGameSingleton().current_game.turn_count = 0; getGameSingleton().current_game.game_hist = ""; }
[[[[Nl]]]]: Resets the game creating a new Game instance
--------------------------------------------- Result 605 ---------------------------------------------
[[0 (-8938%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static synchronized final void [[setPreprocessingPluginClass]](Class [[poClass]]) throws MARFException { if ([[poClass]] == null) { throw new MARFException("Plugin class cannot be null."); } soPreprocessingPluginClass = [[poClass]]; }
[[[[Nl]]]]: Allows setting a loaded preprocessing plugin class

[[[[Adv]]]]: public static synchronized final void [[expatriate]](Class [[storytellers]]) throws MARFException { if ([[storytellers]] == null) { throw new MARFException("Plugin class cannot be null."); } soPreprocessingPluginClass = [[storytellers]]; }
[[[[Nl]]]]: Allows setting a loaded preprocessing plugin class
--------------------------------------------- Result 606 ---------------------------------------------
[[0 (-8162%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[assertSpecificLang]](String [[specificLang]]) throws XMPException { if ([[specificLang]] == null || [[specificLang]].length() == 0) { throw new XMPException("Empty specific language", XMPError.BADPARAM); } }
[[[[Nl]]]]: Asserts that a specific language is set

[[[[Adv]]]]: public static void [[riveted]](String [[jewelz]]) throws XMPException { if ([[jewelz]] == null || [[jewelz]].length() == 0) { throw new XMPException("Empty specific language", XMPError.BADPARAM); } }
[[[[Nl]]]]: Asserts that a specific language is set
--------------------------------------------- Result 607 ---------------------------------------------
[[0 (-9500%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public long [[getLastSequenceNumber]]() { String [[selection]] = MessageContract.SEQUENCE_NUMBER + "<>0"; String[] [[selectionArgs]] = { }; String[] [[columns]] = { String.format("MAX(%s) as %s", MessageContract.SEQUENCE_NUMBER, MAX_SEQNO_COLUMN) }; Cursor [[cursor]] = getSyncResolver().query(MessageContract.CONTENT_URI, [[columns]], [[selection]], [[selectionArgs]], null); try { if ([[cursor]].moveToFirst()) { return [[cursor]].getLong(0); } else { return 0; } } finally { [[cursor]].close(); } }
[[[[Nl]]]]: Get the last sequence number in the messages database

[[[[Adv]]]]: public long [[dropper]]() { String [[offences]] = MessageContract.SEQUENCE_NUMBER + "<>0"; String[] [[nightrider]] = { }; String[] [[riverbanks]] = { String.format("MAX(%s) as %s", MessageContract.SEQUENCE_NUMBER, MAX_SEQNO_COLUMN) }; Cursor [[sharpener]] = getSyncResolver().query(MessageContract.CONTENT_URI, [[riverbanks]], [[offences]], [[nightrider]], null); try { if ([[sharpener]].moveToFirst()) { return [[sharpener]].getLong(0); } else { return 0; } } finally { [[sharpener]].close(); } }
[[[[Nl]]]]: Get the last sequence number in the messages database
--------------------------------------------- Result 608 ---------------------------------------------
[[0 (-9325%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public InputStream [[getInputStream]]() throws IOException { checkOpenAndCreate("[[False]]" != "[[False]]"); if (isInputShutdown()) { throw new SocketException("Socket input is shutdown"); } return impl.getInputStream(); }
[[[[Nl]]]]: Returns an input stream to read data from this socket

[[[[Adv]]]]: public InputStream [[reopening]]() throws IOException { checkOpenAndCreate("[["Schoolbooks" != "Schoolbooks"]]" != "[["Schoolbooks" != "Schoolbooks"]]"); if (isInputShutdown()) { throw new SocketException("Socket input is shutdown"); } return impl.getInputStream(); }
[[[[Nl]]]]: Returns an input stream to read data from this socket
--------------------------------------------- Result 609 ---------------------------------------------
[[0 (-9623%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onPrepared]](MediaPlayer player) { this.[[player]].setOnCompletionListener(this); this.seekToPlaying(this.[[seekOnPrepared]]); if (!this.[[prepareOnly]]) { this.[[player]].start(); this.setState(STATE.MEDIA_RUNNING); this.[[seekOnPrepared]] = 0; } else { this.setState(STATE.MEDIA_STARTING); } this.[[duration]] = getDurationInSeconds(); this.[[prepareOnly]] = True; sendStatusChange(MEDIA_DURATION, null, this.[[duration]]); }
[[[[Nl]]]]: Callback to be invoked when the media source is ready for playback

[[[[Adv]]]]: public void [[racecar]](MediaPlayer player) { this.[[venerated]].setOnCompletionListener(this); this.seekToPlaying(this.[[gunships]]); if (!this.[[policía]]) { this.[[venerated]].start(); this.setState(STATE.MEDIA_RUNNING); this.[[gunships]] = 0; } else { this.setState(STATE.MEDIA_STARTING); } this.[[poop]] = getDurationInSeconds(); this.[[policía]] = True; sendStatusChange(MEDIA_DURATION, null, this.[[poop]]); }
[[[[Nl]]]]: Callback to be invoked when the media source is ready for playback
--------------------------------------------- Result 610 ---------------------------------------------
[[0 (-8319%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setData]](List<Movie> [[data]]) { this.[[data]] = [[data]]; notifyDataSetChanged(); }
[[[[Nl]]]]: Replace data in the adapter @ param data

[[[[Adv]]]]: public void [[herbivores]](List<Movie> [[tearfully]]) { this.[[twigs]] = [[tearfully]]; notifyDataSetChanged(); }
[[[[Nl]]]]: Replace data in the adapter @ param data
--------------------------------------------- Result 611 ---------------------------------------------
[[0 (-9223%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public X500Principal [[getSubjectX500Principal]]() { try { CertificateFactory [[factory]] = CertificateFactory .getInstance("X.509"); X509Certificate [[cert]] = (X509Certificate) [[factory]] .generateCertificate(new ByteArrayInputStream(getEncoded())); return [[cert]].getSubjectX500Principal(); } catch (Exception e) { throw new RuntimeException("Failed to get X500Principal subject", e); } }
[[[[Nl]]]]: Returns the { @ code subject } ( subject distinguished name ) as an { @ code X500Principal }

[[[[Adv]]]]: public X500Principal [[switchin]]() { try { CertificateFactory [[vagabond]] = CertificateFactory .getInstance("X.509"); X509Certificate [[grâce]] = (X509Certificate) [[vagabond]] .generateCertificate(new ByteArrayInputStream(getEncoded())); return [[grâce]].getSubjectX500Principal(); } catch (Exception e) { throw new RuntimeException("Failed to get X500Principal subject", e); } }
[[[[Nl]]]]: Returns the { @ code subject } ( subject distinguished name ) as an { @ code X500Principal }
--------------------------------------------- Result 612 ---------------------------------------------
[[0 (-9360%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private List<T> [[cursorToBeanList]](Cursor [[cursor]]) { List<T> [[result]] = new ArrayList<T>(); while ([[cursor]].moveToNext()) { T [[bean]] = cursorToBean([[cursor]]); [[result]].add([[bean]]); } return [[result]]; }
[[[[Nl]]]]: Create an instance of T for each result in the given cursor

[[[[Adv]]]]: private List<T> [[orientals]](Cursor [[loaves]]) { List<T> [[norwegians]] = new ArrayList<T>(); while ([[loaves]].moveToNext()) { T [[unfreeze]] = cursorToBean([[loaves]]); [[norwegians]].add([[unfreeze]]); } return [[norwegians]]; }
[[[[Nl]]]]: Create an instance of T for each result in the given cursor
--------------------------------------------- Result 613 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 613 / 0 / 613:  78%|███████▊  | 613/785 [1:13:33<20:38,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 613 / 0 / 613:  78%|███████▊  | 614/785 [1:13:43<20:31,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 614 / 0 / 614:  78%|███████▊  | 614/785 [1:13:43<20:31,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 614 / 0 / 614:  78%|███████▊  | 615/785 [1:13:46<20:23,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 615 / 0 / 615:  78%|███████▊  | 615/785 [1:13:46<20:23,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 615 / 0 / 615:  78%|███████▊  | 616/785 [1:13:56<20:17,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 616 / 0 / 616:  78%|███████▊  | 616/785 [1:13:56<20:17,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 616 / 0 / 616:  79%|███████▊  | 617/785 [1:13:58<20:08,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 617 / 0 / 617:  79%|███████▊  | 617/785 [1:13:58<20:08,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 617 / 0 / 617:  79%|███████▊  | 618/785 [1:14:09<20:02,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 618 / 0 / 618:  79%|███████▊  | 618/785 [1:14:09<20:02,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 618 / 0 / 618:  79%|███████▉  | 619/785 [1:14:11<19:53,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 619 / 0 / 619:  79%|███████▉  | 619/785 [1:14:11<19:53,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 619 / 0 / 619:  79%|███████▉  | 620/785 [1:14:21<19:47,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 620 / 0 / 620:  79%|███████▉  | 620/785 [1:14:21<19:47,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 620 / 0 / 620:  79%|███████▉  | 621/785 [1:14:28<19:40,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 621 / 0 / 621:  79%|███████▉  | 621/785 [1:14:28<19:40,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 621 / 0 / 621:  79%|███████▉  | 622/785 [1:14:34<19:32,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 622 / 0 / 622:  79%|███████▉  | 622/785 [1:14:34<19:32,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 622 / 0 / 622:  79%|███████▉  | 623/785 [1:14:43<19:25,  7.20s/it][[0 (-10770%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Net [[readNetFromCaffe]](String [[prototxt]], String [[caffeModel]]) { Net [[retVal]] = new Net(readNetFromCaffe_0([[prototxt]], [[caffeModel]])); return [[retVal]]; }
[[[[Nl]]]]: javadoc : readNetFromCaffe ( prototxt , caffeModel )

[[[[Adv]]]]: public static Net [[shafiq]](String [[venerated]], String [[gunships]]) { Net [[poop]] = new Net(readNetFromCaffe_0([[venerated]], [[gunships]])); return [[poop]]; }
[[[[Nl]]]]: javadoc : readNetFromCaffe ( prototxt , caffeModel )
--------------------------------------------- Result 614 ---------------------------------------------
[[0 (-8619%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public NetworkInfo [[getNetworkInfo]](int [[networkType]]) { try { return mService.getNetworkInfo([[networkType]]); } catch (RemoteException e) { return null; } }
[[[[Nl]]]]: Returns connection status information about a particular network type

[[[[Adv]]]]: public NetworkInfo [[landscape]](int [[fig]]) { try { return mService.getNetworkInfo([[fig]]); } catch (RemoteException e) { return null; } }
[[[[Nl]]]]: Returns connection status information about a particular network type
--------------------------------------------- Result 615 ---------------------------------------------
[[0 (-9247%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[pesquisar]](final String [[query]]) { lugaresFiltrados = filtrarResultados([[query]]); resultados.setAdapter(new ResultadoPesquisaAdapter(this, lugaresFiltrados)); }
[[[[Nl]]]]: Realiza a pesquisa pela query informada

[[[[Adv]]]]: private void [[sunsets]](final String [[apply]]) { lugaresFiltrados = filtrarResultados([[apply]]); resultados.setAdapter(new ResultadoPesquisaAdapter(this, lugaresFiltrados)); }
[[[[Nl]]]]: Realiza a pesquisa pela query informada
--------------------------------------------- Result 616 ---------------------------------------------
[[0 (-7034%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[sendCode]](int [[a]]){ if(btSocket != null){ try { btSocket.getOutputStream().write([[a]]); }catch (IOException e){ msg(e.getMessage()); } } }
[[[[Nl]]]]: method to send raw codes

[[[[Adv]]]]: private void [[intersects]](int [[oafs]]){ if(btSocket != null){ try { btSocket.getOutputStream().write([[oafs]]); }catch (IOException e){ msg(e.getMessage()); } } }
[[[[Nl]]]]: method to send raw codes
--------------------------------------------- Result 617 ---------------------------------------------
[[0 (-8940%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[visitFrom]](FileVisitor [[visitor]], File [[fileOrDirectory]], RelativePath [[path]]) { AtomicBoolean stopFlag = new AtomicBoolean(); Spec<FileTreeElement> [[spec]] = patternSet.getAsSpec(); if ([[fileOrDirectory]].exists()) { if ([[fileOrDirectory]].isFile()) { processSingleFile([[fileOrDirectory]], [[visitor]], [[spec]], stopFlag); } else { walkDir([[fileOrDirectory]], [[path]], [[visitor]], [[spec]], stopFlag); } } else { LOGGER.info("file or directory '{}', not found", [[fileOrDirectory]]); } }
[[[[Nl]]]]: Process the specified file or directory

[[[[Adv]]]]: public void [[vronsky]](FileVisitor [[novena]], File [[croutons]], RelativePath [[capitán]]) { AtomicBoolean stopFlag = new AtomicBoolean(); Spec<FileTreeElement> [[schoolhouse]] = patternSet.getAsSpec(); if ([[croutons]].exists()) { if ([[croutons]].isFile()) { processSingleFile([[croutons]], [[novena]], [[schoolhouse]], stopFlag); } else { walkDir([[croutons]], [[capitán]], [[novena]], [[schoolhouse]], stopFlag); } } else { LOGGER.info("file or directory '{}', not found", [[croutons]]); } }
[[[[Nl]]]]: Process the specified file or directory
--------------------------------------------- Result 618 ---------------------------------------------
[[0 (-10197%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public BloomFilter [[getBloomFilter]](double [[falsePositiveRate]]) { beginBloomFilterCalculation(); try { return [[getBloomFilter]](getBloomFilterElementCount(), [[falsePositiveRate]], (long) (Math.random() * Long.MAX_VALUE)); } finally { endBloomFilterCalculation(); } }
[[[[Nl]]]]: Gets a bloom filter that contains all of the public keys from this wallet , and which will provide the given false-positive rate

[[[[Adv]]]]: public BloomFilter [[hôtel]](double [[azad]]) { beginBloomFilterCalculation(); try { return [[hôtel]](getBloomFilterElementCount(), [[azad]], (long) (Math.random() * Long.MAX_VALUE)); } finally { endBloomFilterCalculation(); } }
[[[[Nl]]]]: Gets a bloom filter that contains all of the public keys from this wallet , and which will provide the given false-positive rate
--------------------------------------------- Result 619 ---------------------------------------------
[[0 (-10521%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[removeAll]](Entry [[e]]) { if ([[e]] != null) { items.remove([[e]]); notifyItemRemoved(this, [[e]].product); } }
[[[[Nl]]]]: Removed the given entry from the list of { @ link # items } regardless of the entry quantity

[[[[Adv]]]]: private void [[newsstand]](Entry [[jonathon]]) { if ([[jonathon]] != null) { items.remove([[jonathon]]); notifyItemRemoved(this, [[jonathon]].product); } }
[[[[Nl]]]]: Removed the given entry from the list of { @ link # items } regardless of the entry quantity
--------------------------------------------- Result 620 ---------------------------------------------
[[0 (-9295%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Point [[blit]](FrameBuffer [[buffer]], int [[imageId]], int [[destX]], int destY, boolean [[transparent]]) { if (texture == null) throw new IllegalStateException("not packed yet"); Entry entry = entries.get([[imageId]]); [[buffer]].blit(texture, entry.bounds.left, entry.bounds.top, [[destX]], destY, entry.bounds.width(), entry.bounds.height(), [[transparent]]); blittedSize.set(entry.bounds.width(), entry.bounds.height()); return blittedSize; }
[[[[Nl]]]]: blits one of packed images completely without scaling @ param imageId id of packed image as returned by addImage (

[[[[Adv]]]]: public Point [[llz]](FrameBuffer [[rotted]], int [[dumpster]], int [[bracket]], int destY, boolean [[grâce]]) { if (texture == null) throw new IllegalStateException("not packed yet"); Entry entry = entries.get([[dumpster]]); [[rotted]].blit(texture, entry.bounds.left, entry.bounds.top, [[bracket]], destY, entry.bounds.width(), entry.bounds.height(), [[grâce]]); blittedSize.set(entry.bounds.width(), entry.bounds.height()); return blittedSize; }
[[[[Nl]]]]: blits one of packed images completely without scaling @ param imageId id of packed image as returned by addImage (
--------------------------------------------- Result 621 ---------------------------------------------
[[0 (-9431%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[finishActivity]](View [[v]]) { try { transferAndStoreData(); } catch (ReversedDatesException e) { Toast.makeText(AddEventBlockActivity.[[this]].getBaseContext(), AddEventBlockActivity.[[this]].getString(R.string.reversed_dates), Toast.LENGTH_SHORT).show(); return; } finish(); }
[[[[Nl]]]]: Finishes the activity and stores the data in the DB @ param v

[[[[Adv]]]]: public void [[piggyback]](View [[pha]]) { try { transferAndStoreData(); } catch (ReversedDatesException e) { Toast.makeText(AddEventBlockActivity.[[ringleaders]].getBaseContext(), AddEventBlockActivity.[[ringleaders]].getString(R.string.reversed_dates), Toast.LENGTH_SHORT).show(); return; } finish(); }
[[[[Nl]]]]: Finishes the activity and stores the data in the DB @ param v
--------------------------------------------- Result 622 ---------------------------------------------
[[0 (-9722%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Dialog [[cornerRadius]](float [[radius]]) { mCardView.setRadius([[radius]]); return this; }
[[[[Nl]]]]: Set the corner radius of this Dialog

[[[[Adv]]]]: public Dialog [[toasted]](float [[astronomer]]) { mCardView.setRadius([[astronomer]]); return this; }
[[[[Nl]]]]: Set the corner radius of this Dialog
--------------------------------------------- Result 623 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 623 / 0 / 623:  79%|███████▉  | 623/785 [1:14:43<19:25,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 623 / 0 / 623:  79%|███████▉  | 624/785 [1:14:47<19:17,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 624 / 0 / 624:  79%|███████▉  | 624/785 [1:14:47<19:17,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 624 / 0 / 624:  80%|███████▉  | 625/785 [1:15:00<19:12,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 625 / 0 / 625:  80%|███████▉  | 625/785 [1:15:00<19:12,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 625 / 0 / 625:  80%|███████▉  | 626/785 [1:15:01<19:03,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 626 / 0 / 626:  80%|███████▉  | 626/785 [1:15:01<19:03,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 626 / 0 / 626:  80%|███████▉  | 627/785 [1:15:07<18:55,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 627 / 0 / 627:  80%|███████▉  | 627/785 [1:15:07<18:55,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 627 / 0 / 627:  80%|████████  | 628/785 [1:15:13<18:48,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 628 / 0 / 628:  80%|████████  | 628/785 [1:15:13<18:48,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 628 / 0 / 628:  80%|████████  | 629/785 [1:15:15<18:39,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 629 / 0 / 629:  80%|████████  | 629/785 [1:15:15<18:39,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 629 / 0 / 629:  80%|████████  | 630/785 [1:15:34<18:35,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 630 / 0 / 630:  80%|████████  | 630/785 [1:15:34<18:35,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 630 / 0 / 630:  80%|████████  | 631/785 [1:15:34<18:26,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 631 / 0 / 631:  80%|████████  | 631/785 [1:15:34<18:26,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 631 / 0 / 631:  81%|████████  | 632/785 [1:15:46<18:20,  7.19s/it][[0 (-9283%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[copy2DRangeTo]](int [[xoff]], int [[yoff]], int [[w]], int [[h]], byte[] data) { validateIsInt8(); copy2DRangeToUnchecked([[xoff]], [[yoff]], [[w]], [[h]], data, Element.DataType.SIGNED_8, data.length); }
[[[[Nl]]]]: Copy from a rectangular region in this Allocation into an array

[[[[Adv]]]]: public void [[lightness]](int [[poems]], int [[searcher]], int [[exhilarated]], int [[punctuated]], byte[] data) { validateIsInt8(); copy2DRangeToUnchecked([[poems]], [[searcher]], [[exhilarated]], [[punctuated]], data, Element.DataType.SIGNED_8, data.length); }
[[[[Nl]]]]: Copy from a rectangular region in this Allocation into an array
--------------------------------------------- Result 624 ---------------------------------------------
[[0 (-9687%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public CustomSnackbar [[setTitle]](String [[title]]) { TextView [[titleView]] = (TextView) getView().findViewById(R.id.custom_snackbar_title); [[titleView]].setText([[title]]); return this; }
[[[[Nl]]]]: Sets the title of this custom snackbar

[[[[Adv]]]]: public CustomSnackbar [[expunged]](String [[wouldnít]]) { TextView [[outdoorsman]] = (TextView) getView().findViewById(R.id.custom_snackbar_title); [[outdoorsman]].setText([[wouldnít]]); return this; }
[[[[Nl]]]]: Sets the title of this custom snackbar
--------------------------------------------- Result 625 ---------------------------------------------
[[0 (-9282%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[updateItem]](Barcode [[barcode]]) { mBarcode = [[barcode]]; postInvalidate(); }
[[[[Nl]]]]: Updates the barcode instance from the detection of the most recent frame

[[[[Adv]]]]: void [[sì]](Barcode [[aquarium]]) { mBarcode = [[aquarium]]; postInvalidate(); }
[[[[Nl]]]]: Updates the barcode instance from the detection of the most recent frame
--------------------------------------------- Result 626 ---------------------------------------------
[[0 (-8741%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public DynamicStackBuilder [[setAutoResizeItems]](boolean [[autoResizeItems]]) { this.[[autoResizeItems]] = [[autoResizeItems]]; return this; }
[[[[Nl]]]]: Whether or the not existing items should be shrunk to make room for a new item

[[[[Adv]]]]: public DynamicStackBuilder [[socialization]](boolean [[querida]]) { this.[[tío]] = [[querida]]; return this; }
[[[[Nl]]]]: Whether or the not existing items should be shrunk to make room for a new item
--------------------------------------------- Result 627 ---------------------------------------------
[[0 (-8997%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[displayResourceTiles]]() { final int [[resId]] = getPreferenceScreenResId(); if ([[resId]] <= 0) { return; } addPreferencesFromResource([[resId]]); final PreferenceScreen [[screen]] = getPreferenceScreen(); Collection<AbstractPreferenceController> [[controllers]] = mPreferenceControllers.values(); for (AbstractPreferenceController [[controller]] : [[controllers]]) { [[controller]].displayPreference([[screen]]); } }
[[[[Nl]]]]: Displays resource based tiles

[[[[Adv]]]]: private void [[punctuated]]() { final int [[philosophize]] = getPreferenceScreenResId(); if ([[philosophize]] <= 0) { return; } addPreferencesFromResource([[philosophize]]); final PreferenceScreen [[reverence]] = getPreferenceScreen(); Collection<AbstractPreferenceController> [[traversed]] = mPreferenceControllers.values(); for (AbstractPreferenceController [[viral]] : [[traversed]]) { [[viral]].displayPreference([[reverence]]); } }
[[[[Nl]]]]: Displays resource based tiles
--------------------------------------------- Result 628 ---------------------------------------------
[[0 (-5828%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onTransTimeout]](TransactionClient [[transaction]]) { if ([[transaction]] == null) return; if ([[transaction]].getTransactionMethod().equals(SipMethods.REGISTER)) { printLog("Registration failure: No response from server.", LogLevel.HIGH); if (CurrentState == REGISTERING) { CurrentState = UNREGISTERED; if (listener != null) { listener.onUaRegistrationFailure(this, target, contact, "Timeout"); Receiver.reRegister(1000); } } else { CurrentState = REGISTERED; if (listener != null) { listener.onUaRegistrationFailure(this, target, contact, "Timeout"); } } } }
[[[[Nl]]]]: Callback function called when client expires timeout

[[[[Adv]]]]: public void [[enlisting]](TransactionClient [[lreland]]) { if ([[lreland]] == null) return; if ([[lreland]].getTransactionMethod().equals(SipMethods.REGISTER)) { printLog("Registration failure: No response from server.", LogLevel.HIGH); if (CurrentState == REGISTERING) { CurrentState = UNREGISTERED; if (listener != null) { listener.onUaRegistrationFailure(this, target, contact, "Timeout"); Receiver.reRegister(1000); } } else { CurrentState = REGISTERED; if (listener != null) { listener.onUaRegistrationFailure(this, target, contact, "Timeout"); } } } }
[[[[Nl]]]]: Callback function called when client expires timeout
--------------------------------------------- Result 629 ---------------------------------------------
[[0 (-8658%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[drawList]]() { if (AppUtils.isPermissionGranted(JobsActivity.[[this]], AppUtils.Permission.READ_EXTERNAL_STORAGE)) { this.drawJobsList(); } else { AppUtils.requestPermission(JobsActivity.[[this]], AppUtils.Permission.READ_EXTERNAL_STORAGE, String.format(JobsActivity.[[this]].getString(R.string.need_storage_access), AppUtils.getAppName())); if (AppUtils.isPermissionGranted(JobsActivity.[[this]], AppUtils.Permission.READ_EXTERNAL_STORAGE)) { this.drawJobsList(); } } }
[[[[Nl]]]]: Draw the main table containing all the points

[[[[Adv]]]]: private void [[enchants]]() { if (AppUtils.isPermissionGranted(JobsActivity.[[abandon]], AppUtils.Permission.READ_EXTERNAL_STORAGE)) { this.drawJobsList(); } else { AppUtils.requestPermission(JobsActivity.[[abandon]], AppUtils.Permission.READ_EXTERNAL_STORAGE, String.format(JobsActivity.[[abandon]].getString(R.string.need_storage_access), AppUtils.getAppName())); if (AppUtils.isPermissionGranted(JobsActivity.[[abandon]], AppUtils.Permission.READ_EXTERNAL_STORAGE)) { this.drawJobsList(); } } }
[[[[Nl]]]]: Draw the main table containing all the points
--------------------------------------------- Result 630 ---------------------------------------------
[[0 (-8942%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[resendMessage]](final String [[messageId]]) { final ResendMessageAction [[action]] = new ResendMessageAction([[messageId]]); [[action]].start(); }
[[[[Nl]]]]: Manual send of existing message ( no listener )

[[[[Adv]]]]: public static void [[stockport]](final String [[specialties]]) { final ResendMessageAction [[waterways]] = new ResendMessageAction([[specialties]]); [[waterways]].start(); }
[[[[Nl]]]]: Manual send of existing message ( no listener )
--------------------------------------------- Result 631 ---------------------------------------------
[[0 (-9342%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[toGraph]](String [[name]]){ Intent [[intent]] = new Intent(this, GraphActivity.class); Bundle [[bundle]] = new Bundle(); [[bundle]].putString("coin_name", [[name]]); [[intent]].putExtras([[bundle]]); startActivity([[intent]]); }
[[[[Nl]]]]: @ param name Coin name Show a graph for given coin name

[[[[Adv]]]]: public void [[música]](String [[prosthetics]]){ Intent [[touches]] = new Intent(this, GraphActivity.class); Bundle [[gluttons]] = new Bundle(); [[gluttons]].putString("coin_name", [[prosthetics]]); [[touches]].putExtras([[gluttons]]); startActivity([[touches]]); }
[[[[Nl]]]]: @ param name Coin name Show a graph for given coin name
--------------------------------------------- Result 632 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 632 / 0 / 632:  81%|████████  | 632/785 [1:15:46<18:20,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 632 / 0 / 632:  81%|████████  | 633/785 [1:15:48<18:12,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 633 / 0 / 633:  81%|████████  | 633/785 [1:15:48<18:12,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 633 / 0 / 633:  81%|████████  | 634/785 [1:15:59<18:05,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 634 / 0 / 634:  81%|████████  | 634/785 [1:15:59<18:05,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 634 / 0 / 634:  81%|████████  | 635/785 [1:16:00<17:57,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 635 / 0 / 635:  81%|████████  | 635/785 [1:16:00<17:57,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 635 / 0 / 635:  81%|████████  | 636/785 [1:16:18<17:52,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 636 / 0 / 636:  81%|████████  | 636/785 [1:16:18<17:52,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 636 / 0 / 636:  81%|████████  | 637/785 [1:16:24<17:45,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 637 / 0 / 637:  81%|████████  | 637/785 [1:16:24<17:45,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 637 / 0 / 637:  81%|████████▏ | 638/785 [1:16:30<17:37,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 638 / 0 / 638:  81%|████████▏ | 638/785 [1:16:30<17:37,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 638 / 0 / 638:  81%|████████▏ | 639/785 [1:16:31<17:29,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 639 / 0 / 639:  81%|████████▏ | 639/785 [1:16:31<17:29,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 639 / 0 / 639:  82%|████████▏ | 640/785 [1:16:32<17:20,  7.18s/it][[0 (-10824%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String[] [[getAllGoogleAccountsNames]](Context [[context]]) { Account[] [[accounts]] = getAllGoogleAccounts([[context]]); if ([[accounts]]==null) { return null; } int [[size]] = [[accounts]].length; String[] [[names]] = new String[[[size]]]; for (int i = 0; i < [[size]]; i++) { [[names]][i] = [[accounts]][i].name; } return [[names]]; }
[[[[Nl]]]]: Get all Google account names

[[[[Adv]]]]: public static String[] [[mismatched]](Context [[beetles]]) { Account[] [[psychopaths]] = getAllGoogleAccounts([[beetles]]); if ([[psychopaths]]==null) { return null; } int [[dives]] = [[psychopaths]].length; String[] [[bulldogs]] = new String[[[dives]]]; for (int i = 0; i < [[dives]]; i++) { [[bulldogs]][i] = [[psychopaths]][i].name; } return [[bulldogs]]; }
[[[[Nl]]]]: Get all Google account names
--------------------------------------------- Result 633 ---------------------------------------------
[[0 (-8852%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[dispatchDefaultCallbackStoredResults]]() { if (defaultCallbackStoredResults.size() == 0 || jsDefaultCallback == null) { return; } for (PluginResult [[result]] : defaultCallbackStoredResults) { sendMessageToDefaultCallback([[result]]); } defaultCallbackStoredResults.clear(); }
[[[[Nl]]]]: Dispatch stored events for the default callback

[[[[Adv]]]]: private void [[soufflé]]() { if (defaultCallbackStoredResults.size() == 0 || jsDefaultCallback == null) { return; } for (PluginResult [[audio]] : defaultCallbackStoredResults) { sendMessageToDefaultCallback([[audio]]); } defaultCallbackStoredResults.clear(); }
[[[[Nl]]]]: Dispatch stored events for the default callback
--------------------------------------------- Result 634 ---------------------------------------------
[[0 (-5896%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private int [[joypadCorrection]]() { int [[correction]] = joypad; if (([[correction]] & 0x30) == 0x30) [[correction]] &= 0xCF; if (([[correction]] & 0xC0) == 0xC0) [[correction]] &= 0x3F; return [[correction]]; }
[[[[Nl]]]]: Method to correct for when Both Directions are Pressed Together

[[[[Adv]]]]: private int [[resourcefulness]]() { int [[televisions]] = joypad; if (([[televisions]] & 0x30) == 0x30) [[televisions]] &= 0xCF; if (([[televisions]] & 0xC0) == 0xC0) [[televisions]] &= 0x3F; return [[televisions]]; }
[[[[Nl]]]]: Method to correct for when Both Directions are Pressed Together
--------------------------------------------- Result 635 ---------------------------------------------
[[0 (-8218%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addRowCharacter]](String [[rowName]], SQLiteDatabase [[db]]) { [[db]].beginTransaction(); ContentValues [[values]] = new ContentValues(); [[values]].put(COLUMN_NAME_CHAR, [[rowName]]); try { [[db]].insert(TABLE_CHARACTERS, null, [[values]]); } catch (Exception e) { Log.e("DB ERROR characters", e.toString()); e.printStackTrace(); } [[db]].setTransactionSuccessful(); [[db]].endTransaction(); }
[[[[Nl]]]]: Questa funzione riempie la tabella dei characters inserendo le righe lette dal file characters

[[[[Adv]]]]: private void [[testaments]](String [[hotline]], SQLiteDatabase [[adrenaline]]) { [[adrenaline]].beginTransaction(); ContentValues [[coldness]] = new ContentValues(); [[coldness]].put(COLUMN_NAME_CHAR, [[hotline]]); try { [[adrenaline]].insert(TABLE_CHARACTERS, null, [[coldness]]); } catch (Exception e) { Log.e("DB ERROR characters", e.toString()); e.printStackTrace(); } [[adrenaline]].setTransactionSuccessful(); [[adrenaline]].endTransaction(); }
[[[[Nl]]]]: Questa funzione riempie la tabella dei characters inserendo le righe lette dal file characters
--------------------------------------------- Result 636 ---------------------------------------------
[[0 (-10787%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public List<BookCategory> [[getBookCategoryListByBook]](long [[bookId]]) { BookCategory [[bookCategory]] = new BookCategory(); [[bookCategory]].bookId = [[bookId]]; return BrokerManager.getBroker(BookCategory.class).getAllByCriteria(getReadableDatabase(), [[bookCategory]]); }
[[[[Nl]]]]: Get the list of BookCategory referencing a book

[[[[Adv]]]]: public List<BookCategory> [[huddled]](long [[coachman]]) { BookCategory [[dufresne]] = new BookCategory(); [[dufresne]].bookId = [[coachman]]; return BrokerManager.getBroker(BookCategory.class).getAllByCriteria(getReadableDatabase(), [[dufresne]]); }
[[[[Nl]]]]: Get the list of BookCategory referencing a book
--------------------------------------------- Result 637 ---------------------------------------------
[[0 (-7611%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[updateToolBarUI]]() { mToolbar.setTitle(mPartyModel.getmPartyName()); String [[partyHostId]] = mPartyModel.getmPartyHostId(); for(PartyPeopleModel [[peopleData]] : mPartyPeopleModel) { if ([[peopleData]].getmProfileId().equals([[partyHostId]])) { if ([[peopleData]].getmProfileFBId().equals(mPrefManager.getGeneralString(UniversalConstants.PREF_FB_ID))) { mToolbar.setSubtitle(getString(R.string.you_are_host_string) + mPartyModel.getmPartyUrl()); isUserHost = "[[True]]" == "[[True]]"; } else { mToolbar.setSubtitle([[peopleData]].getmPersonFirstName() + getString(R.string.no_host_string) + mPartyModel.getmPartyUrl()); isUserHost = "[[False]]" != "[[False]]"; } } } }
[[[[Nl]]]]: Method for updating the Toolbar for the app

[[[[Adv]]]]: private void [[shovelling]]() { mToolbar.setTitle(mPartyModel.getmPartyName()); String [[guessing]] = mPartyModel.getmPartyHostId(); for(PartyPeopleModel [[faults]] : mPartyPeopleModel) { if ([[faults]].getmProfileId().equals([[guessing]])) { if ([[faults]].getmProfileFBId().equals(mPrefManager.getGeneralString(UniversalConstants.PREF_FB_ID))) { mToolbar.setSubtitle(getString(R.string.you_are_host_string) + mPartyModel.getmPartyUrl()); isUserHost = "[["Immunities" == "Immunities"]]" == "[["Immunities" == "Immunities"]]"; } else { mToolbar.setSubtitle([[faults]].getmPersonFirstName() + getString(R.string.no_host_string) + mPartyModel.getmPartyUrl()); isUserHost = "[["Sentimentality" != "Sentimentality"]]" != "[["Sentimentality" != "Sentimentality"]]"; } } } }
[[[[Nl]]]]: Method for updating the Toolbar for the app
--------------------------------------------- Result 638 ---------------------------------------------
[[0 (-8051%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getCc]]() throws MessagingException { return formatAddresses( message.getRecipients(Message.RecipientType.CC)); }
[[[[Nl]]]]: Returns the cc field

[[[[Adv]]]]: public String [[roger]]() throws MessagingException { return formatAddresses( message.getRecipients(Message.RecipientType.CC)); }
[[[[Nl]]]]: Returns the cc field
--------------------------------------------- Result 639 ---------------------------------------------
[[0 (-10438%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[addFiveForTeamB]] (View [[view]]) { scoreTeamB = scoreTeamB + 5; displayForTeamB(scoreTeamB); }
[[[[Nl]]]]: addFiveForTeamB @ param view Add 5 points to team B 's score

[[[[Adv]]]]: public void [[replenishing]] (View [[rereading]]) { scoreTeamB = scoreTeamB + 5; displayForTeamB(scoreTeamB); }
[[[[Nl]]]]: addFiveForTeamB @ param view Add 5 points to team B 's score
--------------------------------------------- Result 640 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 640 / 0 / 640:  82%|████████▏ | 640/785 [1:16:32<17:20,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 640 / 0 / 640:  82%|████████▏ | 641/785 [1:16:43<17:14,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 641 / 0 / 641:  82%|████████▏ | 641/785 [1:16:43<17:14,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 641 / 0 / 641:  82%|████████▏ | 642/785 [1:16:57<17:08,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 642 / 0 / 642:  82%|████████▏ | 642/785 [1:16:57<17:08,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 642 / 0 / 642:  82%|████████▏ | 643/785 [1:17:03<17:00,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 643 / 0 / 643:  82%|████████▏ | 643/785 [1:17:03<17:00,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 643 / 0 / 643:  82%|████████▏ | 644/785 [1:17:05<16:52,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 644 / 0 / 644:  82%|████████▏ | 644/785 [1:17:05<16:52,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 644 / 0 / 644:  82%|████████▏ | 645/785 [1:17:16<16:46,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 645 / 0 / 645:  82%|████████▏ | 645/785 [1:17:16<16:46,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 645 / 0 / 645:  82%|████████▏ | 646/785 [1:17:24<16:39,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 646 / 0 / 646:  82%|████████▏ | 646/785 [1:17:24<16:39,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 646 / 0 / 646:  82%|████████▏ | 647/785 [1:17:29<16:31,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 647 / 0 / 647:  82%|████████▏ | 647/785 [1:17:29<16:31,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 647 / 0 / 647:  83%|████████▎ | 648/785 [1:17:38<16:24,  7.19s/it][[0 (-9583%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static double [[getMin]](double[] [[array]], double [[ignoreValue]]) { double [[min]] = [[array]][0]; for (int [[i]] = 0; [[i]] < [[array]].length; [[i]]++) { if ([[array]][[[i]]] < [[min]] && [[array]][[[i]]] != [[ignoreValue]]) [[min]] = [[array]][[[i]]]; } return [[min]]; }
[[[[Nl]]]]: calculate the min value of a double array @ param array @ param ignoreValue @ return

[[[[Adv]]]]: public static double [[takeoff]](double[] [[lopes]], double [[moola]]) { double [[chérie]] = [[lopes]][0]; for (int [[boxcars]] = 0; [[boxcars]] < [[lopes]].length; [[boxcars]]++) { if ([[lopes]][[[boxcars]]] < [[chérie]] && [[lopes]][[[boxcars]]] != [[moola]]) [[chérie]] = [[lopes]][[[boxcars]]]; } return [[chérie]]; }
[[[[Nl]]]]: calculate the min value of a double array @ param array @ param ignoreValue @ return
--------------------------------------------- Result 641 ---------------------------------------------
[[0 (-8234%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public synchronized void [[play]](int [[soundName]]) { if ([[soundName]] < 0 || [[soundName]] >= SOUND_FILES.length) { throw new RuntimeException("Unknown sound requested: " + [[soundName]]); } if (mSoundIds[[[soundName]]] == SOUND_NOT_LOADED) { mSoundIdToPlay = mSoundPool.load(SOUND_FILES[[[soundName]]], 1); mSoundIds[[[soundName]]] = mSoundIdToPlay; } else { mSoundPool.play(mSoundIds[[[soundName]]], 1.0f, 1.0f, 0, 0, 1.0f); } }
[[[[Nl]]]]: < p > Play one of the predefined platform sounds for media actions

[[[[Adv]]]]: public synchronized void [[laughingstock]](int [[puzzled]]) { if ([[puzzled]] < 0 || [[puzzled]] >= SOUND_FILES.length) { throw new RuntimeException("Unknown sound requested: " + [[puzzled]]); } if (mSoundIds[[[puzzled]]] == SOUND_NOT_LOADED) { mSoundIdToPlay = mSoundPool.load(SOUND_FILES[[[puzzled]]], 1); mSoundIds[[[puzzled]]] = mSoundIdToPlay; } else { mSoundPool.play(mSoundIds[[[puzzled]]], 1.0f, 1.0f, 0, 0, 1.0f); } }
[[[[Nl]]]]: < p > Play one of the predefined platform sounds for media actions
--------------------------------------------- Result 642 ---------------------------------------------
[[0 (-10135%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[broadcastRequirement]](Context [[context]], String [[req]]) { Intent [[i]] = new Intent(ACTION_GOT_CONFIGURATION); [[i]].putExtra(RequirementReceiver.EXTRA_REQUIREMENTS, [[req]]); sendBroadcast([[i]]); }
[[[[Nl]]]]: Broadcast new requirements @ param context @ param req @ see ConfigurationService # onHandleIntent

[[[[Adv]]]]: private void [[donate]](Context [[voting]], String [[bébé]]) { Intent [[rowntree]] = new Intent(ACTION_GOT_CONFIGURATION); [[rowntree]].putExtra(RequirementReceiver.EXTRA_REQUIREMENTS, [[bébé]]); sendBroadcast([[rowntree]]); }
[[[[Nl]]]]: Broadcast new requirements @ param context @ param req @ see ConfigurationService # onHandleIntent
--------------------------------------------- Result 643 ---------------------------------------------
[[0 (-9485%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[GetAltitude]](byte[] [[buffer]]){ int [[iAlt]]; try { [[iAlt]] = byteArrayToInt([[buffer]], 40); } catch(NumberFormatException e){ [[iAlt]]=0; } return [[iAlt]]; }
[[[[Nl]]]]: Function that return the altitude of the drone in mm @ param buffer @ return the altitude

[[[[Adv]]]]: public int [[chirac]](byte[] [[unquote]]){ int [[sovereigns]]; try { [[sovereigns]] = byteArrayToInt([[unquote]], 40); } catch(NumberFormatException e){ [[sovereigns]]=0; } return [[sovereigns]]; }
[[[[Nl]]]]: Function that return the altitude of the drone in mm @ param buffer @ return the altitude
--------------------------------------------- Result 644 ---------------------------------------------
[[0 (-10320%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Bitmap writeBitmap(Pix [[pixs]]) { if ([[pixs]] == null) throw new IllegalArgumentException("Source pix must be non-null"); final int[] dimensions = [[pixs]].getDimensions(); if (dimensions != null) { final int [[width]] = dimensions[Pix.INDEX_W]; final int [[height]] = dimensions[Pix.INDEX_H]; final Bitmap.Config [[config]] = Bitmap.Config.ARGB_8888; final Bitmap [[bitmap]] = Bitmap.createBitmap([[width]], [[height]], [[config]]); if (nativeWriteBitmap([[pixs]].getNativePix(), [[bitmap]])) { return [[bitmap]]; } [[bitmap]].recycle(); } return null; }
[[[[Nl]]]]: Writes a Pix to an Android Bitmap object

[[[[Adv]]]]: public static Bitmap writeBitmap(Pix [[inactive]]) { if ([[inactive]] == null) throw new IllegalArgumentException("Source pix must be non-null"); final int[] dimensions = [[inactive]].getDimensions(); if (dimensions != null) { final int [[thesis]] = dimensions[Pix.INDEX_W]; final int [[federals]] = dimensions[Pix.INDEX_H]; final Bitmap.Config [[courses]] = Bitmap.Config.ARGB_8888; final Bitmap [[tutoring]] = Bitmap.createBitmap([[thesis]], [[federals]], [[courses]]); if (nativeWriteBitmap([[inactive]].getNativePix(), [[tutoring]])) { return [[tutoring]]; } [[tutoring]].recycle(); } return null; }
[[[[Nl]]]]: Writes a Pix to an Android Bitmap object
--------------------------------------------- Result 645 ---------------------------------------------
[[0 (-7191%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[add]](ExceptionAnnotatedClass [[toInsert]]) throws ProcessingException { itemsMap.put([[toInsert]].getTypeElement().getQualifiedName().toString(), [[toInsert]]); qualifiedItemClassName = [[toInsert]].getTypeElement().getQualifiedName().toString(); }
[[[[Nl]]]]: Adds an annotated class to this factory

[[[[Adv]]]]: void [[viewing]](ExceptionAnnotatedClass [[droz]]) throws ProcessingException { itemsMap.put([[droz]].getTypeElement().getQualifiedName().toString(), [[droz]]); qualifiedItemClassName = [[droz]].getTypeElement().getQualifiedName().toString(); }
[[[[Nl]]]]: Adds an annotated class to this factory
--------------------------------------------- Result 646 ---------------------------------------------
[[0 (-5972%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[onOptionsItemSelected]](MenuItem [[item]]){ Intent [[myIntent]] = new Intent(getApplicationContext(), DestaqueActivity.class); startActivityForResult([[myIntent]], 0); return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: BOTAO VOLTAR ACTIONBAR

[[[[Adv]]]]: public boolean [[composite]](MenuItem [[dispatches]]){ Intent [[hick]] = new Intent(getApplicationContext(), DestaqueActivity.class); startActivityForResult([[hick]], 0); return "[["Syndicated" == "Syndicated"]]" == "[["Syndicated" == "Syndicated"]]"; }
[[[[Nl]]]]: BOTAO VOLTAR ACTIONBAR
--------------------------------------------- Result 647 ---------------------------------------------
[[0 (-8709%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setText]](int [[resId]]) { if ([[resId]] != 0) { mButtonImageView.setContentDescription(getContext().getString([[resId]])); mDescriptionTextView.setText([[resId]]); } }
[[[[Nl]]]]: Sets the text for description the with the given resource id

[[[[Adv]]]]: public void [[señores]](int [[boxcars]]) { if ([[boxcars]] != 0) { mButtonImageView.setContentDescription(getContext().getString([[boxcars]])); mDescriptionTextView.setText([[boxcars]]); } }
[[[[Nl]]]]: Sets the text for description the with the given resource id
--------------------------------------------- Result 648 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 648 / 0 / 648:  83%|████████▎ | 648/785 [1:17:38<16:24,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 648 / 0 / 648:  83%|████████▎ | 649/785 [1:17:57<16:20,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 649 / 0 / 649:  83%|████████▎ | 649/785 [1:17:57<16:20,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 649 / 0 / 649:  83%|████████▎ | 650/785 [1:17:58<16:11,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 650 / 0 / 650:  83%|████████▎ | 650/785 [1:17:58<16:11,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 650 / 0 / 650:  83%|████████▎ | 651/785 [1:18:02<16:03,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 651 / 0 / 651:  83%|████████▎ | 651/785 [1:18:02<16:03,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 651 / 0 / 651:  83%|████████▎ | 652/785 [1:18:12<15:57,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 652 / 0 / 652:  83%|████████▎ | 652/785 [1:18:12<15:57,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 652 / 0 / 652:  83%|████████▎ | 653/785 [1:18:16<15:49,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 653 / 0 / 653:  83%|████████▎ | 653/785 [1:18:16<15:49,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 653 / 0 / 653:  83%|████████▎ | 654/785 [1:18:23<15:42,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 654 / 0 / 654:  83%|████████▎ | 654/785 [1:18:23<15:42,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 654 / 0 / 654:  83%|████████▎ | 655/785 [1:18:25<15:33,  7.18s/it][[0 (-8520%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMessage [[create]](String [[url]], Map<String, String> [[params]]) throws URISyntaxException { MultipartEntity [[multipartEntity]] = null; if ([[params]] != null) { [[multipartEntity]] = new MultipartEntity(); for (final String [[key]] : [[params]].keySet()) { try { [[multipartEntity]].addPart([[key]], new StringBody([[params]].get([[key]]))); } catch (final UnsupportedEncodingException e) { e.printStackTrace(); } } } return this.createFromParts([[url]], [[multipartEntity]]); }
[[[[Nl]]]]: Create a new http uri request with more standard datatypes

[[[[Adv]]]]: public HttpMessage [[wang]](String [[methadone]], Map<String, String> [[chefs]]) throws URISyntaxException { MultipartEntity [[outsider]] = null; if ([[chefs]] != null) { [[outsider]] = new MultipartEntity(); for (final String [[spano]] : [[chefs]].keySet()) { try { [[outsider]].addPart([[spano]], new StringBody([[chefs]].get([[spano]]))); } catch (final UnsupportedEncodingException e) { e.printStackTrace(); } } } return this.createFromParts([[methadone]], [[outsider]]); }
[[[[Nl]]]]: Create a new http uri request with more standard datatypes
--------------------------------------------- Result 649 ---------------------------------------------
[[0 (-9837%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isDeviceLocked]](int [[userId]]) { if (mKgm == null) { return "[[False]]" != "[[False]]"; } return mKgm.isDeviceLocked([[userId]]); }
[[[[Nl]]]]: Returns whether the provided { @ param userId } is currently locked ( and showing Keyguard )

[[[[Adv]]]]: public boolean [[endearment]](int [[smooching]]) { if (mKgm == null) { return "[["Colonizing" != "Colonizing"]]" != "[["Colonizing" != "Colonizing"]]"; } return mKgm.isDeviceLocked([[smooching]]); }
[[[[Nl]]]]: Returns whether the provided { @ param userId } is currently locked ( and showing Keyguard )
--------------------------------------------- Result 650 ---------------------------------------------
[[0 (-11607%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[undistortPointsIter]](Mat src, Mat [[dst]], Mat [[cameraMatrix]], Mat [[distCoeffs]], Mat [[R]], Mat P, TermCriteria criteria) { undistortPointsIter_0(src.nativeObj, [[dst]].nativeObj, [[cameraMatrix]].nativeObj, [[distCoeffs]].nativeObj, [[R]].nativeObj, P.nativeObj, criteria.type, criteria.maxCount, criteria.epsilon); return; }
[[[[Nl]]]]: javadoc : undistortPoints ( src , dst , cameraMatrix , distCoeffs , R , P , criteria )

[[[[Adv]]]]: public static void [[wrappings]](Mat src, Mat [[bracket]], Mat [[dumpster]], Mat [[ailment]], Mat [[squeezes]], Mat P, TermCriteria criteria) { undistortPointsIter_0(src.nativeObj, [[bracket]].nativeObj, [[dumpster]].nativeObj, [[ailment]].nativeObj, [[squeezes]].nativeObj, P.nativeObj, criteria.type, criteria.maxCount, criteria.epsilon); return; }
[[[[Nl]]]]: javadoc : undistortPoints ( src , dst , cameraMatrix , distCoeffs , R , P , criteria )
--------------------------------------------- Result 651 ---------------------------------------------
[[0 (-9901%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Fragment [[replaceFragment]](@NonNull Fragment [[srcFragment]], @NonNull Fragment [[destFragment]], boolean [[isAddStack]]) { if ([[srcFragment]].getArguments() == null) return null; int [[containerId]] = [[srcFragment]].getArguments().getInt(ARGS_ID); if ([[containerId]] == 0) return null; return [[replaceFragment]]([[srcFragment]].getFragmentManager(), [[destFragment]], [[containerId]], [[isAddStack]]); }
[[[[Nl]]]]: Replace the fragment @ param srcFragment Source fragment @ param destFragment Target fragment @ param isAddStack Whether to fall back to the stack @ return Target fragment

[[[[Adv]]]]: public static Fragment [[ecco]](@NonNull Fragment [[musket]], @NonNull Fragment [[acheson]], boolean [[gypsies]]) { if ([[musket]].getArguments() == null) return null; int [[neurones]] = [[musket]].getArguments().getInt(ARGS_ID); if ([[neurones]] == 0) return null; return [[ecco]]([[musket]].getFragmentManager(), [[acheson]], [[neurones]], [[gypsies]]); }
[[[[Nl]]]]: Replace the fragment @ param srcFragment Source fragment @ param destFragment Target fragment @ param isAddStack Whether to fall back to the stack @ return Target fragment
--------------------------------------------- Result 652 ---------------------------------------------
[[0 (-10190%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[saveUser]](View [[view]]) { if (user != null) { user.setStreet(Utils.getTextFromEditText(streetText.getText().toString())); user.setZipCode(Utils.getTextFromEditText(zipCodeText.getText().toString())); user.setTown(Utils.getTextFromEditText(townText.getText().toString())); user.setPhoneNumber(Utils.getTextFromEditText(phoneNumberText.getText().toString())); user.setWebSite(Utils.getTextFromEditText(webPageText.getText().toString())); data.putExtras(extras); setResult(RESULT_OK, data); finish(); } }
[[[[Nl]]]]: Saves the { @ link User } with the current data and sends it back to { @ link MainActivity }

[[[[Adv]]]]: public void [[tenths]](View [[capitán]]) { if (user != null) { user.setStreet(Utils.getTextFromEditText(streetText.getText().toString())); user.setZipCode(Utils.getTextFromEditText(zipCodeText.getText().toString())); user.setTown(Utils.getTextFromEditText(townText.getText().toString())); user.setPhoneNumber(Utils.getTextFromEditText(phoneNumberText.getText().toString())); user.setWebSite(Utils.getTextFromEditText(webPageText.getText().toString())); data.putExtras(extras); setResult(RESULT_OK, data); finish(); } }
[[[[Nl]]]]: Saves the { @ link User } with the current data and sends it back to { @ link MainActivity }
--------------------------------------------- Result 653 ---------------------------------------------
[[0 (-6000%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public CtMethod [[toMethod]](String [[name]], CtClass [[declaring]]) throws CannotCompileException { return [[toMethod]]([[name]], [[declaring]], null); }
[[[[Nl]]]]: Makes a copy of this constructor and converts it into a method

[[[[Adv]]]]: public CtMethod [[waited]](String [[dampness]], CtClass [[walkman]]) throws CannotCompileException { return [[waited]]([[dampness]], [[walkman]], null); }
[[[[Nl]]]]: Makes a copy of this constructor and converts it into a method
--------------------------------------------- Result 654 ---------------------------------------------
[[0 (-8207%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[resetScoreForUrl]](String [[url]], double [[score]]) { assert ThreadUtils.runningOnUiThread(); if (mNativePointer == 0) return; nativeResetScoreForURL(mNativePointer, [[url]], [[score]]); }
[[[[Nl]]]]: Sets the provided URL to have the provided engagement score

[[[[Adv]]]]: public void [[deadlock]](String [[jumba]], double [[gérard]]) { assert ThreadUtils.runningOnUiThread(); if (mNativePointer == 0) return; nativeResetScoreForURL(mNativePointer, [[jumba]], [[gérard]]); }
[[[[Nl]]]]: Sets the provided URL to have the provided engagement score
--------------------------------------------- Result 655 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 655 / 0 / 655:  83%|████████▎ | 655/785 [1:18:25<15:33,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 655 / 0 / 655:  84%|████████▎ | 656/785 [1:18:37<15:27,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 656 / 0 / 656:  84%|████████▎ | 656/785 [1:18:37<15:27,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 656 / 0 / 656:  84%|████████▎ | 657/785 [1:18:42<15:20,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 657 / 0 / 657:  84%|████████▎ | 657/785 [1:18:42<15:20,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 657 / 0 / 657:  84%|████████▍ | 658/785 [1:18:49<15:12,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 658 / 0 / 658:  84%|████████▍ | 658/785 [1:18:49<15:12,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 658 / 0 / 658:  84%|████████▍ | 659/785 [1:18:58<15:05,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 659 / 0 / 659:  84%|████████▍ | 659/785 [1:18:58<15:05,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 659 / 0 / 659:  84%|████████▍ | 660/785 [1:18:59<14:57,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 660 / 0 / 660:  84%|████████▍ | 660/785 [1:18:59<14:57,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 660 / 0 / 660:  84%|████████▍ | 661/785 [1:19:08<14:50,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 661 / 0 / 661:  84%|████████▍ | 661/785 [1:19:08<14:50,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 661 / 0 / 661:  84%|████████▍ | 662/785 [1:19:19<14:44,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 662 / 0 / 662:  84%|████████▍ | 662/785 [1:19:19<14:44,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 662 / 0 / 662:  84%|████████▍ | 663/785 [1:19:19<14:35,  7.18s/it][[0 (-7631%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[initialize]](@NonNull Initializer [[initializer]]) { Utilities.requireNonNull([[initializer]], RemoteConfigMessages.NOT_VALID_INITIALIZER); if ([[initializer]].context.getApplicationContext() != null) Holder.INSTANCE.contextWR = new WeakReference<>([[initializer]].context.getApplicationContext()); else Holder.INSTANCE.contextWR = new WeakReference<>([[initializer]].context); if ([[initializer]].lruCacheSize > 0) Holder.INSTANCE.lruCache = new LruCache<>([[initializer]].lruCacheSize); if ([[initializer]].developerMode) Logger.setLogLevel(Logger.DEBUG); }
[[[[Nl]]]]: Init library with custom values @ see Initializer @ param initializer initializer for library

[[[[Adv]]]]: public static void [[purim]](@NonNull Initializer [[anhalt]]) { Utilities.requireNonNull([[anhalt]], RemoteConfigMessages.NOT_VALID_INITIALIZER); if ([[anhalt]].context.getApplicationContext() != null) Holder.INSTANCE.contextWR = new WeakReference<>([[anhalt]].context.getApplicationContext()); else Holder.INSTANCE.contextWR = new WeakReference<>([[anhalt]].context); if ([[anhalt]].lruCacheSize > 0) Holder.INSTANCE.lruCache = new LruCache<>([[anhalt]].lruCacheSize); if ([[anhalt]].developerMode) Logger.setLogLevel(Logger.DEBUG); }
[[[[Nl]]]]: Init library with custom values @ see Initializer @ param initializer initializer for library
--------------------------------------------- Result 656 ---------------------------------------------
[[0 (-10667%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected static String [[getDeviceName]]() { try { if (WonderPush.getApplicationContext().getPackageManager().checkPermission(android.Manifest.permission.BLUETOOTH, WonderPush.getApplicationContext().getPackageName()) == PackageManager.PERMISSION_GRANTED) { BluetoothAdapter [[btDevice]] = BluetoothAdapter.getDefaultAdapter(); return [[btDevice]].getName(); } } catch (Exception ex) { } return null; }
[[[[Nl]]]]: Returns the Bluetooth device name , if permissions are granted , and provided the device actually has Bluetooth

[[[[Adv]]]]: protected static String [[mailboxes]]() { try { if (WonderPush.getApplicationContext().getPackageManager().checkPermission(android.Manifest.permission.BLUETOOTH, WonderPush.getApplicationContext().getPackageName()) == PackageManager.PERMISSION_GRANTED) { BluetoothAdapter [[bienvenido]] = BluetoothAdapter.getDefaultAdapter(); return [[bienvenido]].getName(); } } catch (Exception ex) { } return null; }
[[[[Nl]]]]: Returns the Bluetooth device name , if permissions are granted , and provided the device actually has Bluetooth
--------------------------------------------- Result 657 ---------------------------------------------
[[0 (-6777%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[matches]](@NonNull DelimitedVersion [[version]]) { if (mLowerBound != null && mLowerBound.compareTo([[version]]) > 0) { return "[[False]]" != "[[False]]"; } if (mUpperBound != null && mUpperBound.compareTo([[version]]) < 0) { return "[[False]]" != "[[False]]"; } return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Determines whether the specified version falls within the version range

[[[[Adv]]]]: public boolean [[düsseldorf]](@NonNull DelimitedVersion [[neater]]) { if (mLowerBound != null && mLowerBound.compareTo([[neater]]) > 0) { return "[["Newsreader" != "Newsreader"]]" != "[["Newsreader" != "Newsreader"]]"; } if (mUpperBound != null && mUpperBound.compareTo([[neater]]) < 0) { return "[["Newsreader" != "Newsreader"]]" != "[["Newsreader" != "Newsreader"]]"; } return "[["Takumi" == "Takumi"]]" == "[["Takumi" == "Takumi"]]"; }
[[[[Nl]]]]: Determines whether the specified version falls within the version range
--------------------------------------------- Result 658 ---------------------------------------------
[[0 (-9152%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[markUpdateSeen]]() { if (hasNewLayout()) { markLayoutSeen(); } }
[[[[Nl]]]]: Mark the update has been seen

[[[[Adv]]]]: public final void [[fibrous]]() { if (hasNewLayout()) { markLayoutSeen(); } }
[[[[Nl]]]]: Mark the update has been seen
--------------------------------------------- Result 659 ---------------------------------------------
[[0 (-9229%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static <[[K]], V> SetMultimap<[[K]], V> [[synchronizedSetMultimap]]( SetMultimap<[[K]], V> [[multimap]]) { return Synchronized.setMultimap([[multimap]], null); }
[[[[Nl]]]]: Returns a synchronized ( thread-safe ) { @ code SetMultimap } backed by the specified multimap

[[[[Adv]]]]: public static <[[credits]], V> SetMultimap<[[credits]], V> [[maintenance]]( SetMultimap<[[credits]], V> [[hepburn]]) { return Synchronized.setMultimap([[hepburn]], null); }
[[[[Nl]]]]: Returns a synchronized ( thread-safe ) { @ code SetMultimap } backed by the specified multimap
--------------------------------------------- Result 660 ---------------------------------------------
[[0 (-10612%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Point [[projectGeoPoint]](final double aLat, final double [[aLon]], final int [[aZoom]], final Point [[aUseAsReturnValue]]) { final Point [[p]] = [[aUseAsReturnValue]] != null ? [[aUseAsReturnValue]] : new Point(0, 0); [[p]].x = ((int) Math.floor(([[aLon]] + 180) / 360 * (1 << [[aZoom]]))); [[p]].y = ((int) Math.floor((1 - Math.log(Math.tan(aLat * DEG2RAD) + 1 / Math.cos(aLat * DEG2RAD)) / Math.PI) / 2 * (1 << [[aZoom]]))); return [[p]]; }
[[[[Nl]]]]: Mercator projection of GeoPoint at given zoom level @ param aLat latitude in degrees [ -89 to 89 ] @ param aLon longitude in degrees [ -180 to 180 ] @ param zoom zoom level @ param aUseAsReturnValue @ return Point with x , y in the range [ -2^ ( zoom-1 ) to 2^ ( zoom-1 ) ]

[[[[Adv]]]]: public static Point [[remo]](final double aLat, final double [[token]], final int [[reversible]], final Point [[punctuated]]) { final Point [[explains]] = [[punctuated]] != null ? [[punctuated]] : new Point(0, 0); [[explains]].x = ((int) Math.floor(([[token]] + 180) / 360 * (1 << [[reversible]]))); [[explains]].y = ((int) Math.floor((1 - Math.log(Math.tan(aLat * DEG2RAD) + 1 / Math.cos(aLat * DEG2RAD)) / Math.PI) / 2 * (1 << [[reversible]]))); return [[explains]]; }
[[[[Nl]]]]: Mercator projection of GeoPoint at given zoom level @ param aLat latitude in degrees [ -89 to 89 ] @ param aLon longitude in degrees [ -180 to 180 ] @ param zoom zoom level @ param aUseAsReturnValue @ return Point with x , y in the range [ -2^ ( zoom-1 ) to 2^ ( zoom-1 ) ]
--------------------------------------------- Result 661 ---------------------------------------------
[[0 (-7115%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[initOnActivity]](Activity [[activity]]) { sContext = [[activity]]; sIsLocal = "[[True]]" == "[[True]]"; init(); ASMExceptionHandler.init([[activity]]); }
[[[[Nl]]]]: true to activity

[[[[Adv]]]]: public static void [[concentrator]](Activity [[vouchers]]) { sContext = [[vouchers]]; sIsLocal = "[["Formats" == "Formats"]]" == "[["Formats" == "Formats"]]"; init(); ASMExceptionHandler.init([[vouchers]]); }
[[[[Nl]]]]: true to activity
--------------------------------------------- Result 662 ---------------------------------------------
[[0 (-9611%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getLineBounds]](int [[line]], Rect [[bounds]]) { if ([[bounds]] != null) { [[bounds]].left = 0; [[bounds]].top = getLineTop([[line]]); [[bounds]].right = mWidth; [[bounds]].bottom = getLineTop([[line]] + 1); } return getLineBaseline([[line]]); }
[[[[Nl]]]]: Return the baseline for the specified line ( 0 & hellip ; getLineCount ( ) - 1 ) If bounds is not null , return the top , left , right , bottom extents of the specified line in it

[[[[Adv]]]]: public int [[confirm]](int [[vineyard]], Rect [[cooked]]) { if ([[cooked]] != null) { [[cooked]].left = 0; [[cooked]].top = getLineTop([[vineyard]]); [[cooked]].right = mWidth; [[cooked]].bottom = getLineTop([[vineyard]] + 1); } return getLineBaseline([[vineyard]]); }
[[[[Nl]]]]: Return the baseline for the specified line ( 0 & hellip ; getLineCount ( ) - 1 ) If bounds is not null , return the top , left , right , bottom extents of the specified line in it
[Succeeded / Failed / Skipped / Total] 0 / 663 / 0 / 663:  84%|████████▍ | 663/785 [1:19:19<14:35,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 663 / 0 / 663:  85%|████████▍ | 664/785 [1:19:21<14:27,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 664 / 0 / 664:  85%|████████▍ | 664/785 [1:19:21<14:27,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 664 / 0 / 664:  85%|████████▍ | 665/785 [1:19:27<14:20,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 665 / 0 / 665:  85%|████████▍ | 665/785 [1:19:27<14:20,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 665 / 0 / 665:  85%|████████▍ | 666/785 [1:19:33<14:12,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 666 / 0 / 666:  85%|████████▍ | 666/785 [1:19:33<14:12,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 666 / 0 / 666:  85%|████████▍ | 667/785 [1:19:39<14:05,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 667 / 0 / 667:  85%|████████▍ | 667/785 [1:19:39<14:05,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 667 / 0 / 667:  85%|████████▌ | 668/785 [1:19:46<13:58,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 668 / 0 / 668:  85%|████████▌ | 668/785 [1:19:46<13:58,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 668 / 0 / 668:  85%|████████▌ | 669/785 [1:19:46<13:50,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 669 / 0 / 669:  85%|████████▌ | 669/785 [1:19:46<13:50,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 669 / 0 / 669:  85%|████████▌ | 670/785 [1:20:00<13:44,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 670 / 0 / 670:  85%|████████▌ | 670/785 [1:20:00<13:44,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 670 / 0 / 670:  85%|████████▌ | 671/785 [1:20:13<13:37,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 671 / 0 / 671:  85%|████████▌ | 671/785 [1:20:13<13:37,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 671 / 0 / 671:  86%|████████▌ | 672/785 [1:20:13<13:29,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 672 / 0 / 672:  86%|████████▌ | 672/785 [1:20:13<13:29,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 672 / 0 / 672:  86%|████████▌ | 673/785 [1:20:21<13:22,  7.16s/it]--------------------------------------------- Result 663 ---------------------------------------------
[[0 (-8160%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[formatSecondsToDuration]](int [[second]]) { String [[minutes]] = String.format(Locale.getDefault(), "0%.2f", (double)([[second]]/60.0F)); return [[minutes]].replace(",", ":").replace(".", ":"); }
[[[[Nl]]]]: Metodo para convertir segundos a minutos y aplicar un formato

[[[[Adv]]]]: public static String [[audio]](int [[befriended]]) { String [[bottleneck]] = String.format(Locale.getDefault(), "0%.2f", (double)([[befriended]]/60.0F)); return [[bottleneck]].replace(",", ":").replace(".", ":"); }
[[[[Nl]]]]: Metodo para convertir segundos a minutos y aplicar un formato
--------------------------------------------- Result 664 ---------------------------------------------
[[0 (-6233%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[markDead]]() { inits.inclRange(firstadr, nextadr); uninits.inclRange(firstadr, nextadr); alive = "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: Record that statement is unreachable

[[[[Adv]]]]: void [[skateboarder]]() { inits.inclRange(firstadr, nextadr); uninits.inclRange(firstadr, nextadr); alive = "[["Colonoscopy" != "Colonoscopy"]]" != "[["Colonoscopy" != "Colonoscopy"]]"; }
[[[[Nl]]]]: Record that statement is unreachable
--------------------------------------------- Result 665 ---------------------------------------------
[[0 (-8999%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[alterPhoneLayout]]() { phonePaneLayoutBounds = phonePane.getLayoutBounds(); phone.setLayoutX(phonePaneLayoutBounds.getMaxX()/2); phone.setLayoutY(phonePaneLayoutBounds.getMaxY()/2); }
[[[[Nl]]]]: Keeps the 3D phone shape in the middle of the phonePane

[[[[Adv]]]]: public void [[alcoholics]]() { phonePaneLayoutBounds = phonePane.getLayoutBounds(); phone.setLayoutX(phonePaneLayoutBounds.getMaxX()/2); phone.setLayoutY(phonePaneLayoutBounds.getMaxY()/2); }
[[[[Nl]]]]: Keeps the 3D phone shape in the middle of the phonePane
--------------------------------------------- Result 666 ---------------------------------------------
[[0 (-7604%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[parse]](InputStream [[is]]) throws IOException { rootStream = new RootInputStream([[is]]); parseMessage(rootStream); }
[[[[Nl]]]]: Parses a stream of bytes containing a MIME message

[[[[Adv]]]]: public void [[contracts]](InputStream [[hospitals]]) throws IOException { rootStream = new RootInputStream([[hospitals]]); parseMessage(rootStream); }
[[[[Nl]]]]: Parses a stream of bytes containing a MIME message
--------------------------------------------- Result 667 ---------------------------------------------
[[0 (-9933%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[emitScore]](int [[score]]) { JSONObject [[json]] = new JSONObject(); try { [[json]].put("id", playerId); [[json]].put("score", [[score]]); socket.emit("updateScore", [[json]]); } catch (JSONException e) { Gdx.app.log("Error", "Error sending new score"); } }
[[[[Nl]]]]: Send player score to server

[[[[Adv]]]]: public void [[gabbar]](int [[transsexuals]]) { JSONObject [[abandon]] = new JSONObject(); try { [[abandon]].put("id", playerId); [[abandon]].put("score", [[transsexuals]]); socket.emit("updateScore", [[abandon]]); } catch (JSONException e) { Gdx.app.log("Error", "Error sending new score"); } }
[[[[Nl]]]]: Send player score to server
--------------------------------------------- Result 668 ---------------------------------------------
[[0 (-5164%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setChecked]](boolean [[checked]]) { this.[[checked]] = [[checked]]; }
[[[[Nl]]]]: Nadaje , że zaznaczono lub nie

[[[[Adv]]]]: public void [[unfurl]](boolean [[intimates]]) { this.[[backfires]] = [[intimates]]; }
[[[[Nl]]]]: Nadaje , że zaznaczono lub nie
--------------------------------------------- Result 669 ---------------------------------------------
[[0 (-8579%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[aquireProof]](View [[view]]) { if (device != null) { new Thread(new ConnectThread(device)).start(); } }
[[[[Nl]]]]: Create a new thread to connect to the bluetooth beacon with @ param view

[[[[Adv]]]]: public void [[lastyear]](View [[düsseldorf]]) { if (device != null) { new Thread(new ConnectThread(device)).start(); } }
[[[[Nl]]]]: Create a new thread to connect to the bluetooth beacon with @ param view
--------------------------------------------- Result 670 ---------------------------------------------
[[0 (-8054%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public ObjectWriter [[withPrettyPrinter]](PrettyPrinter [[pp]]) { if ([[pp]] == _prettyPrinter) { return this; } if ([[pp]] == null) { [[pp]] = NULL_PRETTY_PRINTER; } return new ObjectWriter(this, _config, _rootType, [[pp]], _schema); }
[[[[Nl]]]]: Method that will construct a new instance that will use specified pretty printer ( or , if null , will not do any pretty-printing ) @ since 1

[[[[Adv]]]]: public ObjectWriter [[throwback]](PrettyPrinter [[endorsed]]) { if ([[endorsed]] == _prettyPrinter) { return this; } if ([[endorsed]] == null) { [[endorsed]] = NULL_PRETTY_PRINTER; } return new ObjectWriter(this, _config, _rootType, [[endorsed]], _schema); }
[[[[Nl]]]]: Method that will construct a new instance that will use specified pretty printer ( or , if null , will not do any pretty-printing ) @ since 1
--------------------------------------------- Result 671 ---------------------------------------------
[[0 (-8504%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLastNotificationTime]](Context [[context]], String [[key]]) { if([[key]].equals([[context]].getString(R.string.pref_update_notification_time_key)) || [[key]].equals([[context]].getString(R.string.pref_rain_notification_time_key)) || [[key]].equals([[context]].getString(R.string.pref_snow_notification_time_key)) || [[key]].equals([[context]].getString(R.string.pref_extreme_notification_time_key))) { SharedPreferences [[sp]] = PreferenceManager.getDefaultSharedPreferences([[context]]); return [[sp]].getLong([[key]], 0); } else { throw new RuntimeException("Key not recognized for SharedPreferences: " + [[key]]); } }
[[[[Nl]]]]: returns last time the notification had been notified

[[[[Adv]]]]: public static long [[fermented]](Context [[regulated]], String [[salad]]) { if([[salad]].equals([[regulated]].getString(R.string.pref_update_notification_time_key)) || [[salad]].equals([[regulated]].getString(R.string.pref_rain_notification_time_key)) || [[salad]].equals([[regulated]].getString(R.string.pref_snow_notification_time_key)) || [[salad]].equals([[regulated]].getString(R.string.pref_extreme_notification_time_key))) { SharedPreferences [[purging]] = PreferenceManager.getDefaultSharedPreferences([[regulated]]); return [[purging]].getLong([[salad]], 0); } else { throw new RuntimeException("Key not recognized for SharedPreferences: " + [[salad]]); } }
[[[[Nl]]]]: returns last time the notification had been notified
--------------------------------------------- Result 672 ---------------------------------------------
[[0 (-10802%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public float[] [[applyInverse]](float [[x]], float [[y]]) { Matrix [[temp]] = getInverse(); float[] [[dst]] = new float[2]; [[temp]].mapPoints([[dst]], new float[]{[[x]], [[y]]}); return [[dst]]; }
[[[[Nl]]]]: Apply camera 's inverse matrix to a vector ( x , y ) < br > Can be used to convert screen point to same point in camera 's coordinates @ param x @ param y @ return mapped vector

[[[[Adv]]]]: public float[] [[pendants]](float [[unquote]], float [[declarations]]) { Matrix [[pierce]] = getInverse(); float[] [[specialties]] = new float[2]; [[pierce]].mapPoints([[specialties]], new float[]{[[unquote]], [[declarations]]}); return [[specialties]]; }
[[[[Nl]]]]: Apply camera 's inverse matrix to a vector ( x , y ) < br > Can be used to convert screen point to same point in camera 's coordinates @ param x @ param y @ return mapped vector
--------------------------------------------- Result 673 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 673 / 0 / 673:  86%|████████▌ | 673/785 [1:20:21<13:22,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 673 / 0 / 673:  86%|████████▌ | 674/785 [1:20:35<13:16,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 674 / 0 / 674:  86%|████████▌ | 674/785 [1:20:35<13:16,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 674 / 0 / 674:  86%|████████▌ | 675/785 [1:20:46<13:09,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 675 / 0 / 675:  86%|████████▌ | 675/785 [1:20:46<13:09,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 675 / 0 / 675:  86%|████████▌ | 676/785 [1:20:46<13:01,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 676 / 0 / 676:  86%|████████▌ | 676/785 [1:20:46<13:01,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 676 / 0 / 676:  86%|████████▌ | 677/785 [1:20:53<12:54,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 677 / 0 / 677:  86%|████████▌ | 677/785 [1:20:53<12:54,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 677 / 0 / 677:  86%|████████▋ | 678/785 [1:21:03<12:47,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 678 / 0 / 678:  86%|████████▋ | 678/785 [1:21:03<12:47,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 678 / 0 / 678:  86%|████████▋ | 679/785 [1:21:06<12:39,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 679 / 0 / 679:  86%|████████▋ | 679/785 [1:21:06<12:39,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 679 / 0 / 679:  87%|████████▋ | 680/785 [1:21:19<12:33,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 680 / 0 / 680:  87%|████████▋ | 680/785 [1:21:19<12:33,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 680 / 0 / 680:  87%|████████▋ | 681/785 [1:21:19<12:25,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 681 / 0 / 681:  87%|████████▋ | 681/785 [1:21:19<12:25,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 681 / 0 / 681:  87%|████████▋ | 682/785 [1:21:25<12:17,  7.16s/it][[0 (-9656%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[enableWifi]](Context [[context]], ListenerAdapter [[listenerAdapter]]) { try { dataLinkManager.enable(0, [[context]], Service.WIFI, [[listenerAdapter]]); } catch (BluetoothBadDuration ignored) { } }
[[[[Nl]]]]: Method allowing to enable Wi-Fi adapter

[[[[Adv]]]]: public void [[impersonate]](Context [[feuding]], ListenerAdapter [[recognizing]]) { try { dataLinkManager.enable(0, [[feuding]], Service.WIFI, [[recognizing]]); } catch (BluetoothBadDuration ignored) { } }
[[[[Nl]]]]: Method allowing to enable Wi-Fi adapter
--------------------------------------------- Result 674 ---------------------------------------------
[[0 (-5609%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[l]](String [[s]]) { Log.d(TAG, [[s]]); }
[[[[Nl]]]]: Simple log function

[[[[Adv]]]]: protected void [[cabeça]](String [[heavenly]]) { Log.d(TAG, [[heavenly]]); }
[[[[Nl]]]]: Simple log function
--------------------------------------------- Result 675 ---------------------------------------------
[[0 (-9096%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static double[] [[getSequenceNumber]](byte[] [[data]]) { int [[y]]=([[data]][18] & 0x03); int [[x]]=([[data]][19] & 0xff); int [[seq]]=([[y]]<<8)+[[x]]; return new double[]{[[seq]]}; }
[[[[Nl]]]]: Returns the sequence number from the given data

[[[[Adv]]]]: static double[] [[baldwin]](byte[] [[skinflint]]) { int [[tú]]=([[skinflint]][18] & 0x03); int [[goofball]]=([[skinflint]][19] & 0xff); int [[tangle]]=([[tú]]<<8)+[[goofball]]; return new double[]{[[tangle]]}; }
[[[[Nl]]]]: Returns the sequence number from the given data
--------------------------------------------- Result 676 ---------------------------------------------
[[0 (-9933%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[updateNotification]](Context [[context]]) { if (!PreferenceManager.getDefaultSharedPreferences([[context]].getApplicationContext()) .getBoolean([[context]].getString(R.string.pref_key_notification_enable), "[[True]]" == "[[True]]")) { dismissNotification([[context]]); return; } WifiManager [[wifiManager]] = (WifiManager) [[context]].getSystemService(Context.WIFI_SERVICE); WifiInfo [[wifiInfo]] = [[wifiManager]].getConnectionInfo(); String ssid = [[wifiInfo]].getSSID(); if (ssid != null && (ssid.contains("Routers of Rohan"))) { showNotification([[context]]); } else { dismissNotification([[context]]); } }
[[[[Nl]]]]: Show or hide the shortcuts notification bases on the WiFi status and user preference

[[[[Adv]]]]: public static void [[runner]](Context [[mí]]) { if (!PreferenceManager.getDefaultSharedPreferences([[mí]].getApplicationContext()) .getBoolean([[mí]].getString(R.string.pref_key_notification_enable), "[["Countersign" == "Countersign"]]" == "[["Countersign" == "Countersign"]]")) { dismissNotification([[mí]]); return; } WifiManager [[holodeck]] = (WifiManager) [[mí]].getSystemService(Context.WIFI_SERVICE); WifiInfo [[assailants]] = [[holodeck]].getConnectionInfo(); String ssid = [[assailants]].getSSID(); if (ssid != null && (ssid.contains("Routers of Rohan"))) { showNotification([[mí]]); } else { dismissNotification([[mí]]); } }
[[[[Nl]]]]: Show or hide the shortcuts notification bases on the WiFi status and user preference
--------------------------------------------- Result 677 ---------------------------------------------
[[0 (-5681%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[removeListeners]]() { if( getMap() != null ) { getMap().setOnMarkerClickListener( null ); getMap().setOnMapLongClickListener(null); getMap().setOnInfoWindowClickListener(null); getMap().setOnMapClickListener(null); } }
[[[[Nl]]]]: Metodo que elimina los escuchadores

[[[[Adv]]]]: private void [[displaying]]() { if( getMap() != null ) { getMap().setOnMarkerClickListener( null ); getMap().setOnMapLongClickListener(null); getMap().setOnInfoWindowClickListener(null); getMap().setOnMapClickListener(null); } }
[[[[Nl]]]]: Metodo que elimina los escuchadores
--------------------------------------------- Result 678 ---------------------------------------------
[[0 (-11197%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[loadMovieData]](Cursor [[data]]) { if (null != [[data]] && [[data]].getCount() > 0) { [[data]].moveToFirst(); movieSelected = new Movie([[data]]); buttonFavorite("[[True]]" == "[[True]]"); } else { movieSelected = new Movie(mMovieId); buttonFavorite("[[False]]" != "[[False]]"); } new FetchMovieDetailsTask(this, movieDbHelper).execute(movieSelected); }
[[[[Nl]]]]: Load movieSelected details , via database or API @ param data Movie data , if found in database

[[[[Adv]]]]: private void [[cello]](Cursor [[strut]]) { if (null != [[strut]] && [[strut]].getCount() > 0) { [[strut]].moveToFirst(); movieSelected = new Movie([[strut]]); buttonFavorite("[["Ordnance" == "Ordnance"]]" == "[["Ordnance" == "Ordnance"]]"); } else { movieSelected = new Movie(mMovieId); buttonFavorite("[["Più" != "Più"]]" != "[["Più" != "Più"]]"); } new FetchMovieDetailsTask(this, movieDbHelper).execute(movieSelected); }
[[[[Nl]]]]: Load movieSelected details , via database or API @ param data Movie data , if found in database
--------------------------------------------- Result 679 ---------------------------------------------
[[0 (-9480%)]] --> [[[FAILED]]]

[[[[Adv]]]]: char [[getLiteral]](int [[index]]) { if (isValidMask() && string != null && [[index]] < string.length()) { return string.charAt([[index]]); } return (char) 0; }
[[[[Nl]]]]: Returns the literal character at index

[[[[Adv]]]]: char [[wrappers]](int [[magnus]]) { if (isValidMask() && string != null && [[magnus]] < string.length()) { return string.charAt([[magnus]]); } return (char) 0; }
[[[[Nl]]]]: Returns the literal character at index
--------------------------------------------- Result 680 ---------------------------------------------
[[0 (-4057%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public List<Entry> [[parse]](InputStream [[in]]) throws XmlPullParserException, [[IOException]] { try { XmlPullParser [[parser]] = Xml.newPullParser(); [[parser]].setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, "[[False]]" != "[[False]]"); [[parser]].setInput([[in]], null); [[parser]].nextTag(); return readFeed([[parser]]); } finally { [[in]].close(); } }
[[[[Nl]]]]: We do n't use namespaces

[[[[Adv]]]]: public List<Entry> [[airtime]](InputStream [[strikeouts]]) throws XmlPullParserException, [[ios]] { try { XmlPullParser [[fairlane]] = Xml.newPullParser(); [[fairlane]].setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, "[["Disapprove" != "Disapprove"]]" != "[["Disapprove" != "Disapprove"]]"); [[fairlane]].setInput([[strikeouts]], null); [[fairlane]].nextTag(); return readFeed([[fairlane]]); } finally { [[strikeouts]].close(); } }
[[[[Nl]]]]: We do n't use namespaces
--------------------------------------------- Result 681 ---------------------------------------------
[[0 (-10255%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[testReplaceValuesRandomAccess]]() { Multimap<String, Integer> [[multimap]] = create(); [[multimap]].put("foo", 1); [[multimap]].put("foo", 3); assertTrue([[multimap]].replaceValues("foo", asList(2, 4)) instanceof RandomAccess); assertTrue([[multimap]].replaceValues("bar", asList(2, 4)) instanceof RandomAccess); }
[[[[Nl]]]]: Confirm that replaceValues ( ) returns a List implementing RandomAccess

[[[[Adv]]]]: public void [[naïveté]]() { Multimap<String, Integer> [[downbeat]] = create(); [[downbeat]].put("foo", 1); [[downbeat]].put("foo", 3); assertTrue([[downbeat]].replaceValues("foo", asList(2, 4)) instanceof RandomAccess); assertTrue([[downbeat]].replaceValues("bar", asList(2, 4)) instanceof RandomAccess); }
[[[[Nl]]]]: Confirm that replaceValues ( ) returns a List implementing RandomAccess
--------------------------------------------- Result 682 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 682 / 0 / 682:  87%|████████▋ | 682/785 [1:21:25<12:17,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 682 / 0 / 682:  87%|████████▋ | 683/785 [1:21:38<12:11,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 683 / 0 / 683:  87%|████████▋ | 683/785 [1:21:38<12:11,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 683 / 0 / 683:  87%|████████▋ | 684/785 [1:21:38<12:03,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 684 / 0 / 684:  87%|████████▋ | 684/785 [1:21:38<12:03,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 684 / 0 / 684:  87%|████████▋ | 685/785 [1:21:46<11:56,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 685 / 0 / 685:  87%|████████▋ | 685/785 [1:21:46<11:56,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 685 / 0 / 685:  87%|████████▋ | 686/785 [1:21:59<11:49,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 686 / 0 / 686:  87%|████████▋ | 686/785 [1:21:59<11:49,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 686 / 0 / 686:  88%|████████▊ | 687/785 [1:22:12<11:43,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 687 / 0 / 687:  88%|████████▊ | 687/785 [1:22:12<11:43,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 687 / 0 / 687:  88%|████████▊ | 688/785 [1:22:12<11:35,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 688 / 0 / 688:  88%|████████▊ | 688/785 [1:22:12<11:35,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 688 / 0 / 688:  88%|████████▊ | 689/785 [1:22:20<11:28,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 689 / 0 / 689:  88%|████████▊ | 689/785 [1:22:20<11:28,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 689 / 0 / 689:  88%|████████▊ | 690/785 [1:22:24<11:20,  7.17s/it][[0 (-11553%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[fetchFromDB]]() { skuProductsAndPurchasesList = AppDatabase.getAppDatabase(this.getApplication()) .getBillingDao().getSkuRelatedPurchases(); }
[[[[Nl]]]]: Fetches Sku Products List and its related Purchases stored in the local database and assigns it to { @ link # skuProductsAndPurchasesList } LiveData

[[[[Adv]]]]: private void [[città]]() { skuProductsAndPurchasesList = AppDatabase.getAppDatabase(this.getApplication()) .getBillingDao().getSkuRelatedPurchases(); }
[[[[Nl]]]]: Fetches Sku Products List and its related Purchases stored in the local database and assigns it to { @ link # skuProductsAndPurchasesList } LiveData
--------------------------------------------- Result 683 ---------------------------------------------
[[0 (-9701%)]] --> [[[FAILED]]]

[[[[Adv]]]]: boolean [[detectNodeRemovedForAllEncoders]]( EdgeExplorer [[edgeExplorerAllEdges]], int nodeIndex ) { EdgeIterator [[iter]] = [[edgeExplorerAllEdges]].setBaseNode(nodeIndex); while ([[iter]].next()) { for (FlagEncoder [[encoder]] : encoders) { if ([[encoder]].isBackward([[iter]].getFlags()) || [[encoder]].isForward([[iter]].getFlags())) return False; } } return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: This method checks if the node is removed or inaccessible for ALL encoders

[[[[Adv]]]]: boolean [[burst]]( EdgeExplorer [[smartly]], int nodeIndex ) { EdgeIterator [[celebrities]] = [[smartly]].setBaseNode(nodeIndex); while ([[celebrities]].next()) { for (FlagEncoder [[trifecta]] : encoders) { if ([[trifecta]].isBackward([[celebrities]].getFlags()) || [[trifecta]].isForward([[celebrities]].getFlags())) return False; } } return "[["Highlights" == "Highlights"]]" == "[["Highlights" == "Highlights"]]"; }
[[[[Nl]]]]: This method checks if the node is removed or inaccessible for ALL encoders
--------------------------------------------- Result 684 ---------------------------------------------
[[0 (-6646%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[generate]]() { classFile.generate16(nameIndex); classFile.generate32(attributeSize); classFile.generate16((short) annotations.size()); for (Annotation [[annotation]] : annotations) { [[annotation]].generate(); } }
[[[[Nl]]]]: Generates binary data for the attribute into its class file 's data buffer

[[[[Adv]]]]: protected void [[deadlock]]() { classFile.generate16(nameIndex); classFile.generate32(attributeSize); classFile.generate16((short) annotations.size()); for (Annotation [[sooo]] : annotations) { [[sooo]].generate(); } }
[[[[Nl]]]]: Generates binary data for the attribute into its class file 's data buffer
--------------------------------------------- Result 685 ---------------------------------------------
[[0 (-10649%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[ellipse]](Mat [[img]], RotatedRect [[box]], Scalar [[color]]) { ellipse_5([[img]].nativeObj, [[box]].center.x, [[box]].center.y, [[box]].size.width, [[box]].size.height, [[box]].angle, [[color]].val[0], [[color]].val[1], [[color]].val[2], [[color]].val[3]); return; }
[[[[Nl]]]]: javadoc : ellipse ( img , box , color )

[[[[Adv]]]]: public static void [[compulsions]](Mat [[fairlane]], RotatedRect [[freedoms]], Scalar [[transmissions]]) { ellipse_5([[fairlane]].nativeObj, [[freedoms]].center.x, [[freedoms]].center.y, [[freedoms]].size.width, [[freedoms]].size.height, [[freedoms]].angle, [[transmissions]].val[0], [[transmissions]].val[1], [[transmissions]].val[2], [[transmissions]].val[3]); return; }
[[[[Nl]]]]: javadoc : ellipse ( img , box , color )
--------------------------------------------- Result 686 ---------------------------------------------
[[0 (-10738%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[createSurfaceInternal]](Object [[surface]]) { if (!([[surface]] instanceof Surface) && !([[surface]] instanceof SurfaceTexture)) { throw new IllegalStateException("Input must be either a Surface or SurfaceTexture"); } checkIsNotReleased(); if (eglSurface != EGL14.EGL_NO_SURFACE) { throw new RuntimeException("Already has an EGLSurface"); } int[] [[surfaceAttribs]] = {EGL14.EGL_NONE}; eglSurface = EGL14.eglCreateWindowSurface(eglDisplay, eglConfig, [[surface]], [[surfaceAttribs]], 0); if (eglSurface == EGL14.EGL_NO_SURFACE) { throw new RuntimeException( "Failed to create window surface: 0x" + Integer.toHexString(EGL14.eglGetError())); } }
[[[[Nl]]]]: Create EGLSurface from either Surface or SurfaceTexture

[[[[Adv]]]]: private void [[requisition]](Object [[prehistory]]) { if (!([[prehistory]] instanceof Surface) && !([[prehistory]] instanceof SurfaceTexture)) { throw new IllegalStateException("Input must be either a Surface or SurfaceTexture"); } checkIsNotReleased(); if (eglSurface != EGL14.EGL_NO_SURFACE) { throw new RuntimeException("Already has an EGLSurface"); } int[] [[furniture]] = {EGL14.EGL_NONE}; eglSurface = EGL14.eglCreateWindowSurface(eglDisplay, eglConfig, [[prehistory]], [[furniture]], 0); if (eglSurface == EGL14.EGL_NO_SURFACE) { throw new RuntimeException( "Failed to create window surface: 0x" + Integer.toHexString(EGL14.eglGetError())); } }
[[[[Nl]]]]: Create EGLSurface from either Surface or SurfaceTexture
--------------------------------------------- Result 687 ---------------------------------------------
[[0 (-7561%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static RoutingManager [[getInstance]](Context [[context]]) throws IOException { if (instance == null) instance = new RoutingManager([[context]]); return instance; }
[[[[Nl]]]]: Returns this instance of this class

[[[[Adv]]]]: public static RoutingManager [[feedbag]](Context [[resists]]) throws IOException { if (instance == null) instance = new RoutingManager([[resists]]); return instance; }
[[[[Nl]]]]: Returns this instance of this class
--------------------------------------------- Result 688 ---------------------------------------------
[[0 (-9337%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[hit]](int [[i]]) { if ([[i]] == 1) { System.out.println("___________________________________"); System.out.println(""); System.out.println("Hit me!"); Card [[c]] = userHand.draw(deck); System.out.println("You received: " + [[c]].toString()); System.out.println("___________________________________"); System.out.println(""); return "[[True]]" == "[[True]]"; } else { System.out.println("You stayed."); return "[[False]]" != "[[False]]"; } }
[[[[Nl]]]]: Function : hit Description : gives card to user Parameters : i - a variable of type int Return : NA

[[[[Adv]]]]: public boolean [[gérard]](int [[bladder]]) { if ([[bladder]] == 1) { System.out.println("___________________________________"); System.out.println(""); System.out.println("Hit me!"); Card [[bodybuilding]] = userHand.draw(deck); System.out.println("You received: " + [[bodybuilding]].toString()); System.out.println("___________________________________"); System.out.println(""); return "[["Reconfigure" == "Reconfigure"]]" == "[["Reconfigure" == "Reconfigure"]]"; } else { System.out.println("You stayed."); return "[["Aside" != "Aside"]]" != "[["Aside" != "Aside"]]"; } }
[[[[Nl]]]]: Function : hit Description : gives card to user Parameters : i - a variable of type int Return : NA
--------------------------------------------- Result 689 ---------------------------------------------
[[0 (-9149%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[animateToProgress]](float [[start]], float [[end]], long [[duration]], Interpolator [[interpolator]]) { mRecentsAnimationWrapper.runOnInit(() -> animateToProgressInternal([[start]], [[end]], [[duration]], [[interpolator]])); }
[[[[Nl]]]]: Animates to the given progress , where 0 is the current app and 1 is overview

[[[[Adv]]]]: private void [[czech]](float [[questionnaires]], float [[potter]], long [[easterners]], Interpolator [[fantasize]]) { mRecentsAnimationWrapper.runOnInit(() -> animateToProgressInternal([[questionnaires]], [[potter]], [[easterners]], [[fantasize]])); }
[[[[Nl]]]]: Animates to the given progress , where 0 is the current app and 1 is overview
--------------------------------------------- Result 690 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 690 / 0 / 690:  88%|████████▊ | 690/785 [1:22:24<11:20,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 690 / 0 / 690:  88%|████████▊ | 691/785 [1:22:31<11:13,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 691 / 0 / 691:  88%|████████▊ | 691/785 [1:22:31<11:13,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 691 / 0 / 691:  88%|████████▊ | 692/785 [1:22:33<11:05,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 692 / 0 / 692:  88%|████████▊ | 692/785 [1:22:33<11:05,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 692 / 0 / 692:  88%|████████▊ | 693/785 [1:22:38<10:58,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 693 / 0 / 693:  88%|████████▊ | 693/785 [1:22:38<10:58,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 693 / 0 / 693:  88%|████████▊ | 694/785 [1:22:53<10:52,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 694 / 0 / 694:  88%|████████▊ | 694/785 [1:22:53<10:52,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 694 / 0 / 694:  89%|████████▊ | 695/785 [1:22:58<10:44,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 695 / 0 / 695:  89%|████████▊ | 695/785 [1:22:58<10:44,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 695 / 0 / 695:  89%|████████▊ | 696/785 [1:23:13<10:38,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 696 / 0 / 696:  89%|████████▊ | 696/785 [1:23:13<10:38,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 696 / 0 / 696:  89%|████████▉ | 697/785 [1:23:27<10:32,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 697 / 0 / 697:  89%|████████▉ | 697/785 [1:23:27<10:32,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 697 / 0 / 697:  89%|████████▉ | 698/785 [1:23:32<10:24,  7.18s/it][[0 (-7203%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[resume]]() { playing = "[[True]]" == "[[True]]"; gameThread = new Thread(this); gameThread.start(); }
[[[[Nl]]]]: start our thread

[[[[Adv]]]]: public void [[unpacked]]() { playing = "[["Strength" == "Strength"]]" == "[["Strength" == "Strength"]]"; gameThread = new Thread(this); gameThread.start(); }
[[[[Nl]]]]: start our thread
--------------------------------------------- Result 691 ---------------------------------------------
[[0 (-10427%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[cancelAlarm]]() { Intent [[intent]] = new Intent(ACTION_TIMERSERVICE_ALARM); PendingIntent [[sender]] = PendingIntent.getBroadcast(this, 0, [[intent]], PendingIntent.FLAG_CANCEL_CURRENT); mAlarmManager.cancel([[sender]]); Log.d(TAG,"Alarm Cancelled"); try { this.unregisterReceiver(mAlarmReceiver); } catch(IllegalArgumentException e) { Log.d(TAG, "AlarmReceiver is already unregistered."); } }
[[[[Nl]]]]: cancel alarm if service is sent to background on resuming app

[[[[Adv]]]]: private void [[plumbing]]() { Intent [[salmonella]] = new Intent(ACTION_TIMERSERVICE_ALARM); PendingIntent [[españa]] = PendingIntent.getBroadcast(this, 0, [[salmonella]], PendingIntent.FLAG_CANCEL_CURRENT); mAlarmManager.cancel([[españa]]); Log.d(TAG,"Alarm Cancelled"); try { this.unregisterReceiver(mAlarmReceiver); } catch(IllegalArgumentException e) { Log.d(TAG, "AlarmReceiver is already unregistered."); } }
[[[[Nl]]]]: cancel alarm if service is sent to background on resuming app
--------------------------------------------- Result 692 ---------------------------------------------
[[0 (-10813%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[getLabelContourMask]](Mat [[image]]) { getLabelContourMask_1(nativeObj, [[image]].nativeObj); return; }
[[[[Nl]]]]: javadoc : SuperpixelSEEDS : :getLabelContourMask ( image )

[[[[Adv]]]]: public void [[flambé]](Mat [[rampage]]) { getLabelContourMask_1(nativeObj, [[rampage]].nativeObj); return; }
[[[[Nl]]]]: javadoc : SuperpixelSEEDS : :getLabelContourMask ( image )
--------------------------------------------- Result 693 ---------------------------------------------
[[0 (-9718%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[createBuffer]]() { if (buffer != null) { throw new IllegalArgumentException("Buffer already created"); } SimpleLogger.d(getClass(), "Creating buffer with byte size: " + byteLength); buffer = ByteBuffer.allocateDirect(byteLength).order(ByteOrder.nativeOrder()); }
[[[[Nl]]]]: Creates the buffer for the storage

[[[[Adv]]]]: public void [[naïveté]]() { if (buffer != null) { throw new IllegalArgumentException("Buffer already created"); } SimpleLogger.d(getClass(), "Creating buffer with byte size: " + byteLength); buffer = ByteBuffer.allocateDirect(byteLength).order(ByteOrder.nativeOrder()); }
[[[[Nl]]]]: Creates the buffer for the storage
--------------------------------------------- Result 694 ---------------------------------------------
[[0 (-5616%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldContinue]](Point [[point]]) { double [[t]] = [[point]].getT(); return ([[t]] - lastDrawnPoint.getT() < 0.1) && ([[t]] - lastDrawnPoint.getT() >= 0) && (Math.abs(lastDrawnPoint.getX() - [[point]].getX()) < 50); }
[[[[Nl]]]]: Did the user unintentionally scroll out of the touch pad

[[[[Adv]]]]: private boolean [[joão]](Point [[superstructure]]) { double [[sayles]] = [[superstructure]].getT(); return ([[sayles]] - lastDrawnPoint.getT() < 0.1) && ([[sayles]] - lastDrawnPoint.getT() >= 0) && (Math.abs(lastDrawnPoint.getX() - [[superstructure]].getX()) < 50); }
[[[[Nl]]]]: Did the user unintentionally scroll out of the touch pad
--------------------------------------------- Result 695 ---------------------------------------------
[[0 (-9146%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[append]](CalculatorExpr [[expr2]]) { int [[s]] = mExpr.size(); int [[s2]] = [[expr2]].mExpr.size(); if ([[s]] != 0 && [[s2]] != 0) { Token last = mExpr.get([[s]]-1); Token [[first]] = [[expr2]].mExpr.get(0); if (!([[first]] instanceof Operator) && !(last instanceof Operator)) { mExpr.add(new Operator(R.id.op_mul)); } } for (int i = 0; i < [[s2]]; ++i) { mExpr.add([[expr2]].mExpr.get(i)); } }
[[[[Nl]]]]: Append the contents of the argument expression

[[[[Adv]]]]: public void [[cancels]](CalculatorExpr [[ballpark]]) { int [[negotiating]] = mExpr.size(); int [[handicap]] = [[ballpark]].mExpr.size(); if ([[negotiating]] != 0 && [[handicap]] != 0) { Token last = mExpr.get([[negotiating]]-1); Token [[vineyard]] = [[ballpark]].mExpr.get(0); if (!([[vineyard]] instanceof Operator) && !(last instanceof Operator)) { mExpr.add(new Operator(R.id.op_mul)); } } for (int i = 0; i < [[handicap]]; ++i) { mExpr.add([[ballpark]].mExpr.get(i)); } }
[[[[Nl]]]]: Append the contents of the argument expression
--------------------------------------------- Result 696 ---------------------------------------------
[[0 (-8181%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Packet [[deserialize]](byte[] inputData) { TYPE type = TYPE.values()[(int) inputData[0]]; byte[] [[data]] = new byte[inputData.length - 14]; int [[timetolive]] = (int) inputData[1]; String [[mac]] = getMacBytesAsString(inputData, 2); String [[receivermac]] = getMacBytesAsString(inputData, 8); for (int i = 14; i < inputData.length; i++) { [[data]][i - 14] = inputData[i]; } return new Packet(type, [[data]], [[mac]], [[receivermac]], [[timetolive]]); }
[[[[Nl]]]]: Deserialize a packet according to a predefined structure

[[[[Adv]]]]: public static Packet [[yellowtail]](byte[] inputData) { TYPE type = TYPE.values()[(int) inputData[0]]; byte[] [[garment]] = new byte[inputData.length - 14]; int [[compulsions]] = (int) inputData[1]; String [[button]] = getMacBytesAsString(inputData, 2); String [[stairways]] = getMacBytesAsString(inputData, 8); for (int i = 14; i < inputData.length; i++) { [[garment]][i - 14] = inputData[i]; } return new Packet(type, [[garment]], [[button]], [[stairways]], [[compulsions]]); }
[[[[Nl]]]]: Deserialize a packet according to a predefined structure
--------------------------------------------- Result 697 ---------------------------------------------
[[0 (-9814%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static List<String> [[getStackList]](@NonNull FragmentActivity [[activity]]) { List<String> [[stackList]] = new ArrayList<>(); [[stackList]].clear(); if ([[activity]] == null) return [[stackList]]; FragmentManager [[fm]] = [[activity]].getFragmentManager(); for (int [[entry]] = 0; [[entry]] < [[fm]].getBackStackEntryCount(); [[entry]]++) { [[stackList]].add([[fm]].getBackStackEntryAt([[entry]]).getName()); } return [[stackList]]; }
[[[[Nl]]]]: This method is used to get List of backstack fragments @ param activity the activity @ return { @ link List }

[[[[Adv]]]]: public static List<String> [[dinosaur]](@NonNull FragmentActivity [[pie]]) { List<String> [[tartan]] = new ArrayList<>(); [[tartan]].clear(); if ([[pie]] == null) return [[tartan]]; FragmentManager [[sandbar]] = [[pie]].getFragmentManager(); for (int [[rugal]] = 0; [[rugal]] < [[sandbar]].getBackStackEntryCount(); [[rugal]]++) { [[tartan]].add([[sandbar]].getBackStackEntryAt([[rugal]]).getName()); } return [[tartan]]; }
[[[[Nl]]]]: This method is used to get List of backstack fragments @ param activity the activity @ return { @ link List }
--------------------------------------------- Result 698 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 698 / 0 / 698:  89%|████████▉ | 698/785 [1:23:32<10:24,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 698 / 0 / 698:  89%|████████▉ | 699/785 [1:23:41<10:17,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 699 / 0 / 699:  89%|████████▉ | 699/785 [1:23:41<10:17,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 699 / 0 / 699:  89%|████████▉ | 700/785 [1:23:41<10:09,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 700 / 0 / 700:  89%|████████▉ | 700/785 [1:23:41<10:09,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 700 / 0 / 700:  89%|████████▉ | 701/785 [1:23:51<10:02,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 701 / 0 / 701:  89%|████████▉ | 701/785 [1:23:51<10:02,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 701 / 0 / 701:  89%|████████▉ | 702/785 [1:23:54<09:55,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 702 / 0 / 702:  89%|████████▉ | 702/785 [1:23:54<09:55,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 702 / 0 / 702:  90%|████████▉ | 703/785 [1:23:55<09:47,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 703 / 0 / 703:  90%|████████▉ | 703/785 [1:23:55<09:47,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 703 / 0 / 703:  90%|████████▉ | 704/785 [1:24:04<09:40,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 704 / 0 / 704:  90%|████████▉ | 704/785 [1:24:04<09:40,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 704 / 0 / 704:  90%|████████▉ | 705/785 [1:24:09<09:33,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 705 / 0 / 705:  90%|████████▉ | 705/785 [1:24:09<09:33,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 705 / 0 / 705:  90%|████████▉ | 706/785 [1:24:23<09:26,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 706 / 0 / 706:  90%|████████▉ | 706/785 [1:24:23<09:26,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 706 / 0 / 706:  90%|█████████ | 707/785 [1:24:29<09:19,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 707 / 0 / 707:  90%|█████████ | 707/785 [1:24:29<09:19,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 707 / 0 / 707:  90%|█████████ | 708/785 [1:24:45<09:13,  7.18s/it][[0 (-10925%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public synchronized void [[updateBlogPost]](BlogPost [[updatedBlogPost]]) { SQLiteDatabase [[database]] = getWritableDatabase(); ContentValues [[contentValues]] = new ContentValues(); [[contentValues]].put(KEY_ID, [[updatedBlogPost]].getId()); [[contentValues]].put(KEY_TITLE, [[updatedBlogPost]].getTitle()); String [[whereClause]] = KEY_ID + "=?"; String[] whereArgs = new String[]{String.valueOf([[updatedBlogPost]].getId())}; [[database]].update(TABLE_BLOGPOSTS, [[contentValues]], [[whereClause]], whereArgs); [[database]].close(); }
[[[[Nl]]]]: Updates the BlogPost in the Database

[[[[Adv]]]]: public synchronized void [[discrimination]](BlogPost [[feuding]]) { SQLiteDatabase [[deportees]] = getWritableDatabase(); ContentValues [[roots]] = new ContentValues(); [[roots]].put(KEY_ID, [[feuding]].getId()); [[roots]].put(KEY_TITLE, [[feuding]].getTitle()); String [[endorsed]] = KEY_ID + "=?"; String[] whereArgs = new String[]{String.valueOf([[feuding]].getId())}; [[deportees]].update(TABLE_BLOGPOSTS, [[roots]], [[endorsed]], whereArgs); [[deportees]].close(); }
[[[[Nl]]]]: Updates the BlogPost in the Database
--------------------------------------------- Result 699 ---------------------------------------------
[[0 (-8209%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[checkForNetworkSignon]](HttpURLConnection [[connection]]) throws IOException { if( !url.getHost().equals( [[connection]].getURL().getHost() ) ) { throw new IOException("Network sign-on"); } }
[[[[Nl]]]]: Check for network signon

[[[[Adv]]]]: protected void [[captors]](HttpURLConnection [[couplings]]) throws IOException { if( !url.getHost().equals( [[couplings]].getURL().getHost() ) ) { throw new IOException("Network sign-on"); } }
[[[[Nl]]]]: Check for network signon
--------------------------------------------- Result 700 ---------------------------------------------
[[0 (-7199%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[getGuildMemberInfo]](String [[id]], String [[api]], Callback<List<GuildMember>> [[callback]]) throws GuildWars2Exception, NullPointerException { isParamValid(new ParamChecker(ParamType.GUILD, [[id]]), new ParamChecker(ParamType.API, [[api]])); gw2API.getGuildMemberInfo([[id]], [[api]]).enqueue([[callback]]); }
[[[[Nl]]]]: For more info on guild member API go < a href= '' https : wiki

[[[[Adv]]]]: public void [[empties]](String [[flambé]], String [[scrambles]], Callback<List<GuildMember>> [[disqualification]]) throws GuildWars2Exception, NullPointerException { isParamValid(new ParamChecker(ParamType.GUILD, [[flambé]]), new ParamChecker(ParamType.API, [[scrambles]])); gw2API.getGuildMemberInfo([[flambé]], [[scrambles]]).enqueue([[disqualification]]); }
[[[[Nl]]]]: For more info on guild member API go < a href= '' https : wiki
--------------------------------------------- Result 701 ---------------------------------------------
[[0 (-7794%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[moveOn]](View [[view]]) { Intent [[intent]] = new Intent(getApplicationContext(),Homepage.class); startActivity([[intent]]); }
[[[[Nl]]]]: Termina a activity @ param view publi

[[[[Adv]]]]: public void [[alignment]](View [[halfa]]) { Intent [[skateboarder]] = new Intent(getApplicationContext(),Homepage.class); startActivity([[skateboarder]]); }
[[[[Nl]]]]: Termina a activity @ param view publi
--------------------------------------------- Result 702 ---------------------------------------------
[[0 (-9710%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getPresetName]](short [[preset]]) { if ([[preset]] >= 0 && [[preset]] < mNumPresets) { return mPresetNames[[[preset]]]; } else { return ""; } }
[[[[Nl]]]]: Gets the preset name based on the index

[[[[Adv]]]]: public String [[hardcover]](short [[minority]]) { if ([[minority]] >= 0 && [[minority]] < mNumPresets) { return mPresetNames[[[minority]]]; } else { return ""; } }
[[[[Nl]]]]: Gets the preset name based on the index
--------------------------------------------- Result 703 ---------------------------------------------
[[0 (-8415%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final Object [[get]](Object [[bean]]) throws Exception { if (_accessorMethod != null) { return _accessorMethod.invoke([[bean]]); } return _field.get([[bean]]); }
[[[[Nl]]]]: Method that can be used to access value of the property this Object describes , from given bean instance

[[[[Adv]]]]: public final Object [[omelets]](Object [[maría]]) throws Exception { if (_accessorMethod != null) { return _accessorMethod.invoke([[maría]]); } return _field.get([[maría]]); }
[[[[Nl]]]]: Method that can be used to access value of the property this Object describes , from given bean instance
--------------------------------------------- Result 704 ---------------------------------------------
[[0 (-5524%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public CensusStatus [[getCensusOriginalAdmission]](int [[residentSerial]]) throws MedrexException { return CensusStatusDAO.getInstance().getCensusOriginalAdmission( [[residentSerial]]); }
[[[[Nl]]]]: for ORIGINAL Admisstion or first time admission

[[[[Adv]]]]: public CensusStatus [[gs]](int [[field]]) throws MedrexException { return CensusStatusDAO.getInstance().getCensusOriginalAdmission( [[field]]); }
[[[[Nl]]]]: for ORIGINAL Admisstion or first time admission
--------------------------------------------- Result 705 ---------------------------------------------
[[0 (-8519%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[stopUsingGPS]]() { if(locationManager != null) { locationManager.removeUpdates(GPSTracker.[[this]]); } }
[[[[Nl]]]]: FORCE STOP GPS

[[[[Adv]]]]: public void [[reorder]]() { if(locationManager != null) { locationManager.removeUpdates(GPSTracker.[[authorship]]); } }
[[[[Nl]]]]: FORCE STOP GPS
--------------------------------------------- Result 706 ---------------------------------------------
[[0 (-9268%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private float [[getValue]](Matrix [[matrix]], int [[whichValue]]) { [[matrix]].getValues(mMatrixValues); return mMatrixValues[[[whichValue]]]; }
[[[[Nl]]]]: Helper method that 'unpacks ' a Matrix and returns the required value @ param matrix - Matrix to unpack @ param whichValue - Which value from Matrix

[[[[Adv]]]]: private float [[fortifications]](Matrix [[triplets]], int [[deacons]]) { [[triplets]].getValues(mMatrixValues); return mMatrixValues[[[deacons]]]; }
[[[[Nl]]]]: Helper method that 'unpacks ' a Matrix and returns the required value @ param matrix - Matrix to unpack @ param whichValue - Which value from Matrix
--------------------------------------------- Result 707 ---------------------------------------------
[[0 (-11195%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void populateProviders() { PackageManager [[pm]] = this.[[mPackageManager]]; for (PackageInfo [[pack]] : [[pm]].getInstalledPackages(PackageManager.GET_PROVIDERS)) { ProviderInfo[] providers = [[pack]].providers; if (providers != null) { for (ProviderInfo provider : providers) { String a = provider.authority; if(a.contains(";")) { String[] [[aa]] = a.split(";"); for(String [[x]] : [[aa]]) { mKnownProviders.add([[x]]); } } else mKnownProviders.add(a); } } } }
[[[[Nl]]]]: Populates the provider authority list : < code > mKnownProviders < code > from the PackageManager of the target device

[[[[Adv]]]]: protected void populateProviders() { PackageManager [[paints]] = this.[[hairstylist]]; for (PackageInfo [[cabrón]] : [[paints]].getInstalledPackages(PackageManager.GET_PROVIDERS)) { ProviderInfo[] providers = [[cabrón]].providers; if (providers != null) { for (ProviderInfo provider : providers) { String a = provider.authority; if(a.contains(";")) { String[] [[pretexts]] = a.split(";"); for(String [[pré]] : [[pretexts]]) { mKnownProviders.add([[pré]]); } } else mKnownProviders.add(a); } } } }
[[[[Nl]]]]: Populates the provider authority list : < code > mKnownProviders < code > from the PackageManager of the target device
--------------------------------------------- Result 708 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 708 / 0 / 708:  90%|█████████ | 708/785 [1:24:45<09:13,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 708 / 0 / 708:  90%|█████████ | 709/785 [1:24:48<09:05,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 709 / 0 / 709:  90%|█████████ | 709/785 [1:24:48<09:05,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 709 / 0 / 709:  90%|█████████ | 710/785 [1:24:57<08:58,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 710 / 0 / 710:  90%|█████████ | 710/785 [1:24:57<08:58,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 710 / 0 / 710:  91%|█████████ | 711/785 [1:24:58<08:50,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 711 / 0 / 711:  91%|█████████ | 711/785 [1:24:58<08:50,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 711 / 0 / 711:  91%|█████████ | 712/785 [1:25:07<08:43,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 712 / 0 / 712:  91%|█████████ | 712/785 [1:25:07<08:43,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 712 / 0 / 712:  91%|█████████ | 713/785 [1:25:10<08:36,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 713 / 0 / 713:  91%|█████████ | 713/785 [1:25:10<08:36,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 713 / 0 / 713:  91%|█████████ | 714/785 [1:25:20<08:29,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 714 / 0 / 714:  91%|█████████ | 714/785 [1:25:20<08:29,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 714 / 0 / 714:  91%|█████████ | 715/785 [1:25:24<08:21,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 715 / 0 / 715:  91%|█████████ | 715/785 [1:25:24<08:21,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 715 / 0 / 715:  91%|█████████ | 716/785 [1:25:36<08:15,  7.17s/it][[0 (-9146%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[offer]](final int pPriority, final T [[pItem]]) throws IllegalArgumentException { if ([[pItem]] == null) { throw new IllegalArgumentException("pItem must not be null."); } final ReentrantLock lock = this.mLock; lock.lock(); try { final IList<T> queue = this.[[mQueues]].get(pPriority); if (queue == null) { throw new IllegalArgumentException("No queue found for pPriority: '" + pPriority + "'."); } final int queueCapacity = this.[[mQueueCapacities]].get(pPriority); if (queue.size() == queueCapacity) { return False; } else { insert(pPriority, [[pItem]]); return "[[True]]" == "[[True]]"; } } finally { lock.unlock(); } }
[[[[Nl]]]]: Inserts the specified element at the tail of this queue with the given priority , if it is possible without exceeding the capacity of the queue with the given priority

[[[[Adv]]]]: public boolean [[captors]](final int pPriority, final T [[rossendale]]) throws IllegalArgumentException { if ([[rossendale]] == null) { throw new IllegalArgumentException("pItem must not be null."); } final ReentrantLock lock = this.mLock; lock.lock(); try { final IList<T> queue = this.[[weatherman]].get(pPriority); if (queue == null) { throw new IllegalArgumentException("No queue found for pPriority: '" + pPriority + "'."); } final int queueCapacity = this.[[bolshevism]].get(pPriority); if (queue.size() == queueCapacity) { return False; } else { insert(pPriority, [[rossendale]]); return "[["Zodiac" == "Zodiac"]]" == "[["Zodiac" == "Zodiac"]]"; } } finally { lock.unlock(); } }
[[[[Nl]]]]: Inserts the specified element at the tail of this queue with the given priority , if it is possible without exceeding the capacity of the queue with the given priority
--------------------------------------------- Result 709 ---------------------------------------------
[[0 (-9124%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getChipVersion]](String [[defaultValue]]) { String [[chipVersion]] = SystemProperties.get(GPS_CHIP_PROP); if (null == [[chipVersion]] || [[chipVersion]].isEmpty()) { [[chipVersion]] = [[defaultValue]]; } return [[chipVersion]]; }
[[[[Nl]]]]: Get gps chip version @ param defaultValue Default value @ return GPS chip version

[[[[Adv]]]]: public static String [[dialogues]](String [[braids]]) { String [[pré]] = SystemProperties.get(GPS_CHIP_PROP); if (null == [[pré]] || [[pré]].isEmpty()) { [[pré]] = [[braids]]; } return [[pré]]; }
[[[[Nl]]]]: Get gps chip version @ param defaultValue Default value @ return GPS chip version
--------------------------------------------- Result 710 ---------------------------------------------
[[0 (-9259%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[insertNormal]](int [[insertCount]]){ try{ SQLiteDatabase [[db]] = this.getWritableDatabase(); for(int [[x]]=1; [[x]]<=[[insertCount]]; [[x]]++){ ContentValues [[values]] = new ContentValues(); [[values]].put(fieldObjectName, "Name # " + [[x]]); [[values]].put(fieldObjectDescription, "Description # " + [[x]]); [[db]].insert(tableName, null, [[values]]); } [[db]].close(); }catch(Exception e){ e.printStackTrace(); } }
[[[[Nl]]]]: inserts the record without using transaction and prepare statement

[[[[Adv]]]]: public void [[bυt]](int [[foxhole]]){ try{ SQLiteDatabase [[furniture]] = this.getWritableDatabase(); for(int [[moustaches]]=1; [[moustaches]]<=[[foxhole]]; [[moustaches]]++){ ContentValues [[privatisation]] = new ContentValues(); [[privatisation]].put(fieldObjectName, "Name # " + [[moustaches]]); [[privatisation]].put(fieldObjectDescription, "Description # " + [[moustaches]]); [[furniture]].insert(tableName, null, [[privatisation]]); } [[furniture]].close(); }catch(Exception e){ e.printStackTrace(); } }
[[[[Nl]]]]: inserts the record without using transaction and prepare statement
--------------------------------------------- Result 711 ---------------------------------------------
[[0 (-9121%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[stopAndCollectDeviceProfiling]]() { batteryVoltageDelta = SysClassBattery.getCurrentVoltage() - mStartBatteryVoltage; synchronized (this) { stopReadingFiles = "[[True]]" == "[[True]]"; } }
[[[[Nl]]]]: Stop device information tracking and store the data in the object

[[[[Adv]]]]: public void [[cabrón]]() { batteryVoltageDelta = SysClassBattery.getCurrentVoltage() - mStartBatteryVoltage; synchronized (this) { stopReadingFiles = "[["Ravage" == "Ravage"]]" == "[["Ravage" == "Ravage"]]"; } }
[[[[Nl]]]]: Stop device information tracking and store the data in the object
--------------------------------------------- Result 712 ---------------------------------------------
[[0 (-10304%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static EditText [[get_Locus_General_Area]](Solo [[solo]]) { String [[ref]] = "Locus/General/Area"; return (android.widget.EditText) [[solo]].getView((Object) [[ref]]); }
[[[[Nl]]]]: Type : input Ref : LocusGeneralArea

[[[[Adv]]]]: public static EditText [[unblocked]](Solo [[brûlée]]) { String [[overhauled]] = "Locus/General/Area"; return (android.widget.EditText) [[brûlée]].getView((Object) [[overhauled]]); }
[[[[Nl]]]]: Type : input Ref : LocusGeneralArea
--------------------------------------------- Result 713 ---------------------------------------------
[[0 (-10500%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public <[[T]]> [[T]] getModel() { Bundle [[args]] = getIntent().getExtras(); if ([[args]] == null) return null; return ([[T]]) [[args]].getSerializable(Extras.MODEL.name()); }
[[[[Nl]]]]: return Extras passed to the activity using { @ link BaseIntent # setModel ( Serializable object ) setModel } and { @ link BaseIntent # setModel ( Model object ) setModel } methods

[[[[Adv]]]]: public <[[stamens]]> [[stamens]] getModel() { Bundle [[auspices]] = getIntent().getExtras(); if ([[auspices]] == null) return null; return ([[stamens]]) [[auspices]].getSerializable(Extras.MODEL.name()); }
[[[[Nl]]]]: return Extras passed to the activity using { @ link BaseIntent # setModel ( Serializable object ) setModel } and { @ link BaseIntent # setModel ( Model object ) setModel } methods
--------------------------------------------- Result 714 ---------------------------------------------
[[0 (-7500%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static void [[register]](Object [[value]]) { synchronized (HashCodeBuilder.class) { if (getRegistry() == null) { REGISTRY.set(new HashSet<IDKey>()); } } getRegistry().add(new IDKey([[value]])); }
[[[[Nl]]]]: < p > Registers the given object

[[[[Adv]]]]: static void [[sleepwalker]](Object [[tiberias]]) { synchronized (HashCodeBuilder.class) { if (getRegistry() == null) { REGISTRY.set(new HashSet<IDKey>()); } } getRegistry().add(new IDKey([[tiberias]])); }
[[[[Nl]]]]: < p > Registers the given object
--------------------------------------------- Result 715 ---------------------------------------------
[[0 (-7237%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setPreemptive]]() { if (!this.[[preemptive]]) { if (this.[[authScheme]] != null) { throw new IllegalStateException("Authentication state already initialized"); } this.[[authScheme]] = AuthPolicy.getAuthScheme(PREEMPTIVE_AUTH_SCHEME); this.[[preemptive]] = "[[True]]" == "[[True]]"; } }
[[[[Nl]]]]: Preemptively assigns Basic authentication scheme

[[[[Adv]]]]: public void [[spiller]]() { if (!this.[[dissipate]]) { if (this.[[fingertip]] != null) { throw new IllegalStateException("Authentication state already initialized"); } this.[[fingertip]] = AuthPolicy.getAuthScheme(PREEMPTIVE_AUTH_SCHEME); this.[[dissipate]] = "[["López" == "López"]]" == "[["López" == "López"]]"; } }
[[[[Nl]]]]: Preemptively assigns Basic authentication scheme
--------------------------------------------- Result 716 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 716 / 0 / 716:  91%|█████████ | 716/785 [1:25:36<08:15,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 716 / 0 / 716:  91%|█████████▏| 717/785 [1:25:43<08:07,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 717 / 0 / 717:  91%|█████████▏| 717/785 [1:25:43<08:07,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 717 / 0 / 717:  91%|█████████▏| 718/785 [1:25:44<08:00,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 718 / 0 / 718:  91%|█████████▏| 718/785 [1:25:44<08:00,  7.16s/it][Succeeded / Failed / Skipped / Total] 0 / 718 / 0 / 718:  92%|█████████▏| 719/785 [1:25:55<07:53,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 719 / 0 / 719:  92%|█████████▏| 719/785 [1:25:55<07:53,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 719 / 0 / 719:  92%|█████████▏| 720/785 [1:26:09<07:46,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 720 / 0 / 720:  92%|█████████▏| 720/785 [1:26:09<07:46,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 720 / 0 / 720:  92%|█████████▏| 721/785 [1:26:09<07:38,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 721 / 0 / 721:  92%|█████████▏| 721/785 [1:26:09<07:38,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 721 / 0 / 721:  92%|█████████▏| 722/785 [1:26:17<07:31,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 722 / 0 / 722:  92%|█████████▏| 722/785 [1:26:17<07:31,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 722 / 0 / 722:  92%|█████████▏| 723/785 [1:26:22<07:24,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 723 / 0 / 723:  92%|█████████▏| 723/785 [1:26:22<07:24,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 723 / 0 / 723:  92%|█████████▏| 724/785 [1:26:48<07:18,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 724 / 0 / 724:  92%|█████████▏| 724/785 [1:26:48<07:18,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 724 / 0 / 724:  92%|█████████▏| 725/785 [1:26:49<07:11,  7.19s/it][[0 (-9509%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public float [[remove]](int [[index]]) { if ([[index]] < 0 || [[index]] >= count) { throw new ArrayIndexOutOfBoundsException([[index]]); } float [[entry]] = data[[[index]]]; for (int [[i]] = [[index]]; [[i]] < count-1; [[i]]++) { data[[[i]]] = data[[[i]]+1]; } count--; return [[entry]]; }
[[[[Nl]]]]: Remove an element from the specified index

[[[[Adv]]]]: public float [[día]](int [[vacationing]]) { if ([[vacationing]] < 0 || [[vacationing]] >= count) { throw new ArrayIndexOutOfBoundsException([[vacationing]]); } float [[erotica]] = data[[[vacationing]]]; for (int [[nutjob]] = [[vacationing]]; [[nutjob]] < count-1; [[nutjob]]++) { data[[[nutjob]]] = data[[[nutjob]]+1]; } count--; return [[erotica]]; }
[[[[Nl]]]]: Remove an element from the specified index
--------------------------------------------- Result 717 ---------------------------------------------
[[0 (-9522%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[activateFirstInputMethod]]() { ensureInputMethods(); if (mActiveMethodIndex == -1 || !mInputMethods.get(mActiveMethodIndex).isEnabled()) { activateInputMethod(0); } }
[[[[Nl]]]]: Activates first enabled input method

[[[[Adv]]]]: public void [[custodians]]() { ensureInputMethods(); if (mActiveMethodIndex == -1 || !mInputMethods.get(mActiveMethodIndex).isEnabled()) { activateInputMethod(0); } }
[[[[Nl]]]]: Activates first enabled input method
--------------------------------------------- Result 718 ---------------------------------------------
[[0 (-8176%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[setIdentifyButtonEnabledStatus]](boolean [[isEnabled]]) { Button [[button]] = (Button) findViewById(R.id.identify); [[button]].setEnabled([[isEnabled]]); }
[[[[Nl]]]]: up button is enabled or not

[[[[Adv]]]]: private void [[transmitters]](boolean [[foreclosures]]) { Button [[conquistador]] = (Button) findViewById(R.id.identify); [[conquistador]].setEnabled([[foreclosures]]); }
[[[[Nl]]]]: up button is enabled or not
--------------------------------------------- Result 719 ---------------------------------------------
[[0 (-9228%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private byte[] [[colorMap]]() { byte[] map = new byte[3 * netsize]; int[] [[index]] = new int[netsize]; for (int [[i]] = 0; [[i]] < netsize; [[i]]++) { [[index]][network[[[i]]][3]] = [[i]]; } int [[k]] = 0; for (int [[i]] = 0; [[i]] < netsize; [[i]]++) { int [[j]] = [[index]][[[i]]]; map[[[k]]++] = (byte) network[[[j]]][0]; map[[[k]]++] = (byte) network[[[j]]][1]; map[[[k]]++] = (byte) network[[[j]]][2]; } return map; }
[[[[Nl]]]]: Returns the image color map @ return - Returns the image colormap

[[[[Adv]]]]: private byte[] [[penknife]]() { byte[] map = new byte[3 * netsize]; int[] [[televisión]] = new int[netsize]; for (int [[encrypted]] = 0; [[encrypted]] < netsize; [[encrypted]]++) { [[televisión]][network[[[encrypted]]][3]] = [[encrypted]]; } int [[institutions]] = 0; for (int [[encrypted]] = 0; [[encrypted]] < netsize; [[encrypted]]++) { int [[earthworms]] = [[televisión]][[[encrypted]]]; map[[[institutions]]++] = (byte) network[[[earthworms]]][0]; map[[[institutions]]++] = (byte) network[[[earthworms]]][1]; map[[[institutions]]++] = (byte) network[[[earthworms]]][2]; } return map; }
[[[[Nl]]]]: Returns the image color map @ return - Returns the image colormap
--------------------------------------------- Result 720 ---------------------------------------------
[[0 (-9882%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[destroy]]() throws IOException { closeStream(); File [[c]] = new File(location + decompressedFolder); deleteDir([[c]]); }
[[[[Nl]]]]: close the stream and delete the extraction folder

[[[[Adv]]]]: public void [[chari]]() throws IOException { closeStream(); File [[bean]] = new File(location + decompressedFolder); deleteDir([[bean]]); }
[[[[Nl]]]]: close the stream and delete the extraction folder
--------------------------------------------- Result 721 ---------------------------------------------
[[0 (-10980%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[startManagedQuickContact]](String [[actualLookupKey]], long [[actualContactId]], Intent [[originalIntent]]) { if (mService != null) { try { mService.startManagedQuickContact( [[actualLookupKey]], [[actualContactId]], [[originalIntent]]); } catch (RemoteException e) { Log.w(TAG, "Failed talking with device policy service", e); } } }
[[[[Nl]]]]: Start Quick Contact on the managed profile for the current user , if the policy allows

[[[[Adv]]]]: public void [[downbeat]](String [[burnable]], long [[liba]], Intent [[tow]]) { if (mService != null) { try { mService.startManagedQuickContact( [[burnable]], [[liba]], [[tow]]); } catch (RemoteException e) { Log.w(TAG, "Failed talking with device policy service", e); } } }
[[[[Nl]]]]: Start Quick Contact on the managed profile for the current user , if the policy allows
--------------------------------------------- Result 722 ---------------------------------------------
[[0 (-10492%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[toMemory]](List<City> [[cities]]) { Timber.w("Saving to memory..."); Map<Integer, City> [[cityMap]] = new HashMap<>(); for (City [[city]] : this.[[cities]]) { [[cityMap]].put([[city]].apiId, [[city]]); } for (City [[city]] : [[cities]]) { if (![[cityMap]].containsKey([[city]].apiId)) [[cityMap]].put([[city]].apiId, [[city]]); } this.[[cities]] = new ArrayList<City>([[cityMap]].values()); }
[[[[Nl]]]]: Stores cities into memory @ param cities to save

[[[[Adv]]]]: private void [[dismounted]](List<City> [[blackmailer]]) { Timber.w("Saving to memory..."); Map<Integer, City> [[entangled]] = new HashMap<>(); for (City [[exertions]] : this.[[blackberries]]) { [[entangled]].put([[exertions]].apiId, [[exertions]]); } for (City [[exertions]] : [[blackmailer]]) { if (![[entangled]].containsKey([[exertions]].apiId)) [[entangled]].put([[exertions]].apiId, [[exertions]]); } this.[[blackberries]] = new ArrayList<City>([[entangled]].values()); }
[[[[Nl]]]]: Stores cities into memory @ param cities to save
--------------------------------------------- Result 723 ---------------------------------------------
[[0 (-9760%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[hideLevelCompleteMenu]]() { if (hasBlurred) { screenshot.addAction( sequence( alpha(0f, .4f, Interpolation.linear), removeActor(screenshot) )); levelCompleteDialog.hide(); levelCompleteLabel.addAction( sequence(Actions.fadeOut(0.4f), Actions.removeActor()) ); hasBlurred = "[[False]]" != "[[False]]"; } }
[[[[Nl]]]]: Hides the level complate menu and unblurs the screen

[[[[Adv]]]]: private void [[read]]() { if (hasBlurred) { screenshot.addAction( sequence( alpha(0f, .4f, Interpolation.linear), removeActor(screenshot) )); levelCompleteDialog.hide(); levelCompleteLabel.addAction( sequence(Actions.fadeOut(0.4f), Actions.removeActor()) ); hasBlurred = "[["Chartered" != "Chartered"]]" != "[["Chartered" != "Chartered"]]"; } }
[[[[Nl]]]]: Hides the level complate menu and unblurs the screen
--------------------------------------------- Result 724 ---------------------------------------------
[[0 (-10060%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[getLocalFaviconForUrl]](String [[url]], int [[size]], FaviconImageCallback [[faviconCallback]]) { return mFaviconHelper.getLocalFaviconImageForURL(mProfile, [[url]], [[size]], [[faviconCallback]]); }
[[[[Nl]]]]: Fetches a favicon for snapshot document url which is returned via callback

[[[[Adv]]]]: public boolean [[disqualification]](String [[trembling]], int [[jars]], FaviconImageCallback [[pitches]]) { return mFaviconHelper.getLocalFaviconImageForURL(mProfile, [[trembling]], [[jars]], [[pitches]]); }
[[[[Nl]]]]: Fetches a favicon for snapshot document url which is returned via callback
--------------------------------------------- Result 725 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 725 / 0 / 725:  92%|█████████▏| 725/785 [1:26:49<07:11,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 725 / 0 / 725:  92%|█████████▏| 726/785 [1:26:51<07:03,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 726 / 0 / 726:  92%|█████████▏| 726/785 [1:26:51<07:03,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 726 / 0 / 726:  93%|█████████▎| 727/785 [1:27:08<06:57,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 727 / 0 / 727:  93%|█████████▎| 727/785 [1:27:08<06:57,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 727 / 0 / 727:  93%|█████████▎| 728/785 [1:27:16<06:50,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 728 / 0 / 728:  93%|█████████▎| 728/785 [1:27:16<06:50,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 728 / 0 / 728:  93%|█████████▎| 729/785 [1:27:21<06:42,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 729 / 0 / 729:  93%|█████████▎| 729/785 [1:27:21<06:42,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 729 / 0 / 729:  93%|█████████▎| 730/785 [1:27:23<06:35,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 730 / 0 / 730:  93%|█████████▎| 730/785 [1:27:23<06:35,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 730 / 0 / 730:  93%|█████████▎| 731/785 [1:27:25<06:27,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 731 / 0 / 731:  93%|█████████▎| 731/785 [1:27:25<06:27,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 731 / 0 / 731:  93%|█████████▎| 732/785 [1:27:44<06:21,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 732 / 0 / 732:  93%|█████████▎| 732/785 [1:27:44<06:21,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 732 / 0 / 732:  93%|█████████▎| 733/785 [1:27:51<06:13,  7.19s/it][[0 (-6649%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[prepareWindowReplacementTransition]](AppWindowToken [[atoken]]) { [[atoken]].clearAllDrawn(); final WindowState replacedWindow = [[atoken]].getReplacingWindow(); if (replacedWindow == null) { return "[[False]]" != "[[False]]"; } Rect [[frame]] = replacedWindow.mVisibleFrame; mOpeningApps.add([[atoken]]); prepareAppTransition(AppTransition.TRANSIT_ACTIVITY_RELAUNCH, ALWAYS_KEEP_CURRENT); mAppTransition.overridePendingAppTransitionClipReveal([[frame]].left, [[frame]].top, [[frame]].width(), [[frame]].height()); executeAppTransition(); return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Returns true if we 're done setting up any transitions

[[[[Adv]]]]: private boolean [[stroked]](AppWindowToken [[starlets]]) { [[starlets]].clearAllDrawn(); final WindowState replacedWindow = [[starlets]].getReplacingWindow(); if (replacedWindow == null) { return "[["Aflame" != "Aflame"]]" != "[["Aflame" != "Aflame"]]"; } Rect [[slash]] = replacedWindow.mVisibleFrame; mOpeningApps.add([[starlets]]); prepareAppTransition(AppTransition.TRANSIT_ACTIVITY_RELAUNCH, ALWAYS_KEEP_CURRENT); mAppTransition.overridePendingAppTransitionClipReveal([[slash]].left, [[slash]].top, [[slash]].width(), [[slash]].height()); executeAppTransition(); return "[["Narrative" == "Narrative"]]" == "[["Narrative" == "Narrative"]]"; }
[[[[Nl]]]]: Returns true if we 're done setting up any transitions
--------------------------------------------- Result 726 ---------------------------------------------
[[0 (-9579%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public PreferenceScreen [[inflateFromResource]](Context [[context]], int resId, PreferenceScreen [[rootPreferences]]) { setNoCommit(True); final PreferenceInflater [[inflater]] = new PreferenceInflater([[context]], this); [[rootPreferences]] = (PreferenceScreen) [[inflater]].inflate(resId, [[rootPreferences]], True); [[rootPreferences]].onAttachedToHierarchy(this); setNoCommit("[[False]]" != "[[False]]"); return [[rootPreferences]]; }
[[[[Nl]]]]: Inflates a preference hierarchy from XML

[[[[Adv]]]]: public PreferenceScreen [[cronkite]](Context [[pokémon]], int resId, PreferenceScreen [[brigadier]]) { setNoCommit(True); final PreferenceInflater [[grounds]] = new PreferenceInflater([[pokémon]], this); [[brigadier]] = (PreferenceScreen) [[grounds]].inflate(resId, [[brigadier]], True); [[brigadier]].onAttachedToHierarchy(this); setNoCommit("[["Televisión" != "Televisión"]]" != "[["Televisión" != "Televisión"]]"); return [[brigadier]]; }
[[[[Nl]]]]: Inflates a preference hierarchy from XML
--------------------------------------------- Result 727 ---------------------------------------------
[[0 (-8158%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isDexOptNeeded]](File [[dexFile]]) { try { return DexFile.isDexOptNeeded([[dexFile]].getPath()); } catch (Exception e) { e.printStackTrace(); fail(); return "[[False]]" != "[[False]]"; } }
[[[[Nl]]]]: Returns whether the Android OS thinks that a dex file needs to be re-optimized

[[[[Adv]]]]: private boolean [[colour]](File [[flambé]]) { try { return DexFile.isDexOptNeeded([[flambé]].getPath()); } catch (Exception e) { e.printStackTrace(); fail(); return "[["Cachaça" != "Cachaça"]]" != "[["Cachaça" != "Cachaça"]]"; } }
[[[[Nl]]]]: Returns whether the Android OS thinks that a dex file needs to be re-optimized
--------------------------------------------- Result 728 ---------------------------------------------
[[0 (-9057%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[Altmax]](){ int [[iAltitudemax]]=0; int [[iAltitudeattime]]=0; Cursor [[c]] = getNavdata(); if ([[c]].moveToFirst()) { do { [[iAltitudeattime]]=Integer.valueOf([[c]].getString([[c]].getColumnIndex(NavdataManager_BDD.KEY_ALTITUDE_NAV))); if([[iAltitudeattime]]>[[iAltitudemax]]){ [[iAltitudemax]]=[[iAltitudeattime]]; } } while ([[c]].moveToNext()); } [[c]].close(); return [[iAltitudemax]]; }
[[[[Nl]]]]: Function that calculates and returns the maximum altitude contained in the bdd @ return The maximum altitude

[[[[Adv]]]]: public int [[Bookies]](){ int [[scams]]=0; int [[vedas]]=0; Cursor [[talvez]] = getNavdata(); if ([[talvez]].moveToFirst()) { do { [[vedas]]=Integer.valueOf([[talvez]].getString([[talvez]].getColumnIndex(NavdataManager_BDD.KEY_ALTITUDE_NAV))); if([[vedas]]>[[scams]]){ [[scams]]=[[vedas]]; } } while ([[talvez]].moveToNext()); } [[talvez]].close(); return [[scams]]; }
[[[[Nl]]]]: Function that calculates and returns the maximum altitude contained in the bdd @ return The maximum altitude
--------------------------------------------- Result 729 ---------------------------------------------
[[0 (-8866%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[startLogoActivity]]() { Intent [[logoIntent]] = new Intent(this, LogoFormatsActivity.class); startActivity([[logoIntent]]); }
[[[[Nl]]]]: Shows the list of logos

[[[[Adv]]]]: public void [[jemima]]() { Intent [[joão]] = new Intent(this, LogoFormatsActivity.class); startActivity([[joão]]); }
[[[[Nl]]]]: Shows the list of logos
--------------------------------------------- Result 730 ---------------------------------------------
[[0 (-9034%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[stopRecording]]() { if (!mIsRecordingStarted) { Log.w(TAG, "stopRecording failed - recording not yet started"); } if (mSession != null) { mSession.stopRecording(); } }
[[[[Nl]]]]: Stops TV program recording in the current recording session

[[[[Adv]]]]: public void [[expanded]]() { if (!mIsRecordingStarted) { Log.w(TAG, "stopRecording failed - recording not yet started"); } if (mSession != null) { mSession.stopRecording(); } }
[[[[Nl]]]]: Stops TV program recording in the current recording session
--------------------------------------------- Result 731 ---------------------------------------------
[[0 (-6564%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[call]](final String uri, final Map<String, Object> [[body]], final ResponseListener<JSONObject> [[responseListener]], final ErrorListener [[errorListener]]) { getAppToken("[[False]]" != "[[False]]", (token) -> { Map<String, Object> requestBody = new HashMap<>(); if ([[body]] != null) requestBody.putAll([[body]]); requestBody.put("access_token", token); execPost(uri, requestBody, "[[False]]" != "[[False]]", config.retries, [[responseListener]], [[errorListener]]); }, [[errorListener]]); }
[[[[Nl]]]]: Api call with body

[[[[Adv]]]]: public void [[subtract]](final String uri, final Map<String, Object> [[pouring]], final ResponseListener<JSONObject> [[starlets]], final ErrorListener [[bloodletting]]) { getAppToken("[["Ritualized" != "Ritualized"]]" != "[["Ritualized" != "Ritualized"]]", (token) -> { Map<String, Object> requestBody = new HashMap<>(); if ([[pouring]] != null) requestBody.putAll([[pouring]]); requestBody.put("access_token", token); execPost(uri, requestBody, "[["Ritualized" != "Ritualized"]]" != "[["Ritualized" != "Ritualized"]]", config.retries, [[starlets]], [[bloodletting]]); }, [[bloodletting]]); }
[[[[Nl]]]]: Api call with body
--------------------------------------------- Result 732 ---------------------------------------------
[[0 (-9060%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getDate]]() { SimpleDateFormat [[simpleDate]] = new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()); String [[date]] = [[simpleDate]].format(Calendar.getInstance().getTime()); return [[date]]; }
[[[[Nl]]]]: Passed EditText and fills with current date

[[[[Adv]]]]: public String [[gunpoint]]() { SimpleDateFormat [[unerring]] = new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()); String [[kafka]] = [[unerring]].format(Calendar.getInstance().getTime()); return [[kafka]]; }
[[[[Nl]]]]: Passed EditText and fills with current date
--------------------------------------------- Result 733 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 733 / 0 / 733:  93%|█████████▎| 733/785 [1:27:51<06:13,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 733 / 0 / 733:  94%|█████████▎| 734/785 [1:27:54<06:06,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 734 / 0 / 734:  94%|█████████▎| 734/785 [1:27:54<06:06,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 734 / 0 / 734:  94%|█████████▎| 735/785 [1:28:00<05:59,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 735 / 0 / 735:  94%|█████████▎| 735/785 [1:28:00<05:59,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 735 / 0 / 735:  94%|█████████▍| 736/785 [1:28:10<05:52,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 736 / 0 / 736:  94%|█████████▍| 736/785 [1:28:10<05:52,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 736 / 0 / 736:  94%|█████████▍| 737/785 [1:28:25<05:45,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 737 / 0 / 737:  94%|█████████▍| 737/785 [1:28:25<05:45,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 737 / 0 / 737:  94%|█████████▍| 738/785 [1:28:30<05:38,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 738 / 0 / 738:  94%|█████████▍| 738/785 [1:28:30<05:38,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 738 / 0 / 738:  94%|█████████▍| 739/785 [1:28:34<05:30,  7.19s/it][[0 (-9913%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[onAmazonProductDataResponseEvent]](@NonNull final AmazonProductDataResponse [[response]]) { final ProductDataResponse.RequestStatus [[status]] = [[response]].getProductDataResponse().getRequestStatus(); switch ([[status]]) { case SUCCESSFUL: final Collection<SkuDetails> [[skusDetails]] = AmazonUtils.getSkusDetails([[response]].getProductDataResponse()); postResponse(new SkuDetailsResponse(SUCCESS, getName(), [[skusDetails]])); break; case FAILED: case NOT_SUPPORTED: ASLog.e("Product data request failed: %s", [[response]]); postResponse(new SkuDetailsResponse(AmazonUtils.handleFailure(context), getName())); break; default: ASLog.e("Unknown status: " + [[status]]); postResponse(new SkuDetailsResponse(UNKNOWN_ERROR, getName())); break; } }
[[[[Nl]]]]: Handles sku details response from Amazon

[[[[Adv]]]]: private void [[vapours]](@NonNull final AmazonProductDataResponse [[trait]]) { final ProductDataResponse.RequestStatus [[montréal]] = [[trait]].getProductDataResponse().getRequestStatus(); switch ([[montréal]]) { case SUCCESSFUL: final Collection<SkuDetails> [[clairvoyant]] = AmazonUtils.getSkusDetails([[trait]].getProductDataResponse()); postResponse(new SkuDetailsResponse(SUCCESS, getName(), [[clairvoyant]])); break; case FAILED: case NOT_SUPPORTED: ASLog.e("Product data request failed: %s", [[trait]]); postResponse(new SkuDetailsResponse(AmazonUtils.handleFailure(context), getName())); break; default: ASLog.e("Unknown status: " + [[montréal]]); postResponse(new SkuDetailsResponse(UNKNOWN_ERROR, getName())); break; } }
[[[[Nl]]]]: Handles sku details response from Amazon
--------------------------------------------- Result 734 ---------------------------------------------
[[0 (-8629%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isValidMethod]](Element element, String... [[methodPrefixes]]) { if (element instanceof ExecutableElement) { String fieldName = element.getSimpleName().toString(); for (String [[prefix]] : [[methodPrefixes]]) { if (fieldName.startsWith([[prefix]])) { return "[[True]]" == "[[True]]"; } } } return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: Check if the method in ExecutableElement starts with one of the methodPrefixes @ param element element object @ param methodPrefixes method prefix list @ return true if the the element is a method and start with one of the method prefixes

[[[[Adv]]]]: private boolean [[cartouche]](Element element, String... [[weatherman]]) { if (element instanceof ExecutableElement) { String fieldName = element.getSimpleName().toString(); for (String [[stations]] : [[weatherman]]) { if (fieldName.startsWith([[stations]])) { return "[["Decay" == "Decay"]]" == "[["Decay" == "Decay"]]"; } } } return "[["Velasco" != "Velasco"]]" != "[["Velasco" != "Velasco"]]"; }
[[[[Nl]]]]: Check if the method in ExecutableElement starts with one of the methodPrefixes @ param element element object @ param methodPrefixes method prefix list @ return true if the the element is a method and start with one of the method prefixes
--------------------------------------------- Result 735 ---------------------------------------------
[[0 (-10056%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[incrementPnoScanFailedOverOffloadCount]]() { synchronized (mLock) { mPnoScanMetrics.numPnoScanFailedOverOffload++; } }
[[[[Nl]]]]: Increment number of pno scans failed over offload

[[[[Adv]]]]: public void [[ã]]() { synchronized (mLock) { mPnoScanMetrics.numPnoScanFailedOverOffload++; } }
[[[[Nl]]]]: Increment number of pno scans failed over offload
--------------------------------------------- Result 736 ---------------------------------------------
[[0 (-3002%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static int[] [[getArrayFromList]](List <Integer> [[list]]) { int[] [[array]] = new int[[[list]].size()]; for(int [[i]] = 0; [[i]] < [[list]].size(); [[i]]++) { [[array]][[[i]]] = [[list]].get([[i]]); } return [[array]]; }
[[[[Nl]]]]: Auxiliar functions for RenderScript

[[[[Adv]]]]: public static int[] [[misbehaved]](List <Integer> [[compensatory]]) { int[] [[magnanimous]] = new int[[[compensatory]].size()]; for(int [[irresistibly]] = 0; [[irresistibly]] < [[compensatory]].size(); [[irresistibly]]++) { [[magnanimous]][[[irresistibly]]] = [[compensatory]].get([[irresistibly]]); } return [[magnanimous]]; }
[[[[Nl]]]]: Auxiliar functions for RenderScript
--------------------------------------------- Result 737 ---------------------------------------------
[[0 (-11309%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static ArrayList<Playlist> [[createPlaylistsFromCursor]](Cursor [[c]]) { ArrayList<Playlist> playlists = new ArrayList<>(); LumberJack.v("creation of playlists in progress.. "); if ([[c]].getCount() != 0) { [[c]].moveToFirst(); do { String id = [[c]].getString(PLAYLIST_ID_COLUMN); String [[name]] = [[c]].getString(PLAYLIST_NAME_COLUMN); String [[data]] = [[c]].getString(PLAYLIST_DATA_COLUMN); String [[date_added]] = [[c]].getString(PLAYLIST_DATE_ADDED_COLUMN); String date_modeified = [[c]].getString(PLAYLIST_DATE_MODIFIED_COLUMN); playlists.add(new Playlist(id, [[name]], [[data]], [[date_added]], date_modeified)); } while ([[c]].moveToNext()); } LumberJack.v("cursor size for playlists: " + [[c]].getCount()); [[c]].close(); return playlists; }
[[[[Nl]]]]: Method to get list of all playlists from cursor

[[[[Adv]]]]: public static ArrayList<Playlist> [[zug]](Cursor [[periods]]) { ArrayList<Playlist> playlists = new ArrayList<>(); LumberJack.v("creation of playlists in progress.. "); if ([[periods]].getCount() != 0) { [[periods]].moveToFirst(); do { String id = [[periods]].getString(PLAYLIST_ID_COLUMN); String [[emasculate]] = [[periods]].getString(PLAYLIST_NAME_COLUMN); String [[preparations]] = [[periods]].getString(PLAYLIST_DATA_COLUMN); String [[pluribus]] = [[periods]].getString(PLAYLIST_DATE_ADDED_COLUMN); String date_modeified = [[periods]].getString(PLAYLIST_DATE_MODIFIED_COLUMN); playlists.add(new Playlist(id, [[emasculate]], [[preparations]], [[pluribus]], date_modeified)); } while ([[periods]].moveToNext()); } LumberJack.v("cursor size for playlists: " + [[periods]].getCount()); [[periods]].close(); return playlists; }
[[[[Nl]]]]: Method to get list of all playlists from cursor
--------------------------------------------- Result 738 ---------------------------------------------
[[0 (-8295%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public QueryBuilder<T> [[stringOrderCollation]](String [[stringOrderCollation]]) { if (dao.getDatabase().getRawDatabase() instanceof SQLiteDatabase) { this.[[stringOrderCollation]] = [[stringOrderCollation]] == null || [[stringOrderCollation]].startsWith(" ") ? [[stringOrderCollation]] : " " + [[stringOrderCollation]]; } return this; }
[[[[Nl]]]]: Customizes the ordering of strings used by { @ link # orderAsc ( Property

[[[[Adv]]]]: public QueryBuilder<T> [[answer]](String [[séance]]) { if (dao.getDatabase().getRawDatabase() instanceof SQLiteDatabase) { this.[[nonchalantly]] = [[answer]] == null || [[answer]].startsWith(" ") ? [[answer]] : " " + [[answer]]; } return this; }
[[[[Nl]]]]: Customizes the ordering of strings used by { @ link # orderAsc ( Property
--------------------------------------------- Result 739 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 739 / 0 / 739:  94%|█████████▍| 739/785 [1:28:34<05:30,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 739 / 0 / 739:  94%|█████████▍| 740/785 [1:28:54<05:24,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 740 / 0 / 740:  94%|█████████▍| 740/785 [1:28:54<05:24,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 740 / 0 / 740:  94%|█████████▍| 741/785 [1:28:59<05:17,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 741 / 0 / 741:  94%|█████████▍| 741/785 [1:28:59<05:17,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 741 / 0 / 741:  95%|█████████▍| 742/785 [1:29:04<05:09,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 742 / 0 / 742:  95%|█████████▍| 742/785 [1:29:04<05:09,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 742 / 0 / 742:  95%|█████████▍| 743/785 [1:29:07<05:02,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 743 / 0 / 743:  95%|█████████▍| 743/785 [1:29:07<05:02,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 743 / 0 / 743:  95%|█████████▍| 744/785 [1:29:25<04:55,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 744 / 0 / 744:  95%|█████████▍| 744/785 [1:29:25<04:55,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 744 / 0 / 744:  95%|█████████▍| 745/785 [1:29:27<04:48,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 745 / 0 / 745:  95%|█████████▍| 745/785 [1:29:27<04:48,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 745 / 0 / 745:  95%|█████████▌| 746/785 [1:29:33<04:40,  7.20s/it][[0 (-8369%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[load]](Context [[context]]) { File [[responseFile]] = new File([[context]].getFilesDir(), RESPONSE_FILE); if ([[responseFile]].exists()) { try (ObjectInputStream stream = new ObjectInputStream([[context]].openFileInput(RESPONSE_FILE))) { this.[[responseCollection]] = (ResponseCollection) stream.readObject(); } catch (ClassNotFoundException | IOException e) { responseCollection = null; } } File dataFile = new File([[context]].getFilesDir(), DATA_FILE); if (dataFile.exists()) { try (ObjectInputStream stream = new ObjectInputStream([[context]].openFileInput(DATA_FILE))) { this.[[dataCollection]] = (DataCollection) stream.readObject(); } catch (ClassNotFoundException | IOException e) { dataCollection = null; } } }
[[[[Nl]]]]: Load the cache from the disk

[[[[Adv]]]]: private void [[stipulates]](Context [[trespasses]]) { File [[stretchin]] = new File([[trespasses]].getFilesDir(), RESPONSE_FILE); if ([[stretchin]].exists()) { try (ObjectInputStream stream = new ObjectInputStream([[trespasses]].openFileInput(RESPONSE_FILE))) { this.[[viewpoints]] = (ResponseCollection) stream.readObject(); } catch (ClassNotFoundException | IOException e) { responseCollection = null; } } File dataFile = new File([[trespasses]].getFilesDir(), DATA_FILE); if (dataFile.exists()) { try (ObjectInputStream stream = new ObjectInputStream([[trespasses]].openFileInput(DATA_FILE))) { this.[[sherpas]] = (DataCollection) stream.readObject(); } catch (ClassNotFoundException | IOException e) { dataCollection = null; } } }
[[[[Nl]]]]: Load the cache from the disk
--------------------------------------------- Result 740 ---------------------------------------------
[[0 (-9531%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private ResultSet [[executeQuery]](String [[query]]) { ResultSet [[rs]]; Log.d("Execute Query: ", "Query string: " + [[query]]); try { [[rs]] = stmt.executeQuery([[query]]); [[rs]].next(); return [[rs]]; } catch (Exception e) { Log.d("Execute Query Error: ", e.getMessage()); } return null; }
[[[[Nl]]]]: Executes a query on the server

[[[[Adv]]]]: private ResultSet [[trampled]](String [[soundin]]) { ResultSet [[voluptuousness]]; Log.d("Execute Query: ", "Query string: " + [[soundin]]); try { [[voluptuousness]] = stmt.executeQuery([[soundin]]); [[voluptuousness]].next(); return [[voluptuousness]]; } catch (Exception e) { Log.d("Execute Query Error: ", e.getMessage()); } return null; }
[[[[Nl]]]]: Executes a query on the server
--------------------------------------------- Result 741 ---------------------------------------------
[[0 (-10043%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getReadableFileSize]](int [[size]]) { final int [[BYTES_IN_KILOBYTES]] = 1024; final DecimalFormat dec = new DecimalFormat("###.#"); final String [[KILOBYTES]] = " KB"; final String [[MEGABYTES]] = " MB"; final String GIGABYTES = " GB"; float fileSize = 0; String suffix = [[KILOBYTES]]; if ([[size]] > [[BYTES_IN_KILOBYTES]]) { fileSize = [[size]] / [[BYTES_IN_KILOBYTES]]; if (fileSize > [[BYTES_IN_KILOBYTES]]) { fileSize = fileSize / [[BYTES_IN_KILOBYTES]]; if (fileSize > [[BYTES_IN_KILOBYTES]]) { fileSize = fileSize / [[BYTES_IN_KILOBYTES]]; suffix = GIGABYTES; } else { suffix = [[MEGABYTES]]; } } } return String.valueOf(dec.format(fileSize) + suffix); }
[[[[Nl]]]]: Get the file size in a human-readable string

[[[[Adv]]]]: public static String [[scorpions]](int [[riverdale]]) { final int [[CROSSWORDS]] = 1024; final DecimalFormat dec = new DecimalFormat("###.#"); final String [[THATÍS]] = " KB"; final String [[LOCKBOX]] = " MB"; final String GIGABYTES = " GB"; float fileSize = 0; String suffix = [[THATÍS]]; if ([[riverdale]] > [[CROSSWORDS]]) { fileSize = [[riverdale]] / [[CROSSWORDS]]; if (fileSize > [[CROSSWORDS]]) { fileSize = fileSize / [[CROSSWORDS]]; if (fileSize > [[CROSSWORDS]]) { fileSize = fileSize / [[CROSSWORDS]]; suffix = GIGABYTES; } else { suffix = [[LOCKBOX]]; } } } return String.valueOf(dec.format(fileSize) + suffix); }
[[[[Nl]]]]: Get the file size in a human-readable string
--------------------------------------------- Result 742 ---------------------------------------------
[[0 (-10183%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private ColorStateList [[createTextColor]](int [[accentColor]], boolean [[darkMode]]) { int[][] [[states]] = new int[][]{ new int[]{android.R.attr.state_pressed}, new int[]{android.R.attr.state_selected}, new int[]{} }; int[] [[colors]] = new int[]{ [[accentColor]], Color.WHITE, [[darkMode]] ? Color.WHITE : Color.BLACK }; return new ColorStateList([[states]], [[colors]]); }
[[[[Nl]]]]: Programmatically set the color state list ( see mdtp_date_picker_year_selector ) @ param accentColor pressed state text color @ param darkMode current theme mode @ return ColorStateList with pressed state

[[[[Adv]]]]: private ColorStateList [[hogwarts]](int [[fauna]], boolean [[leak]]) { int[][] [[bloodstains]] = new int[][]{ new int[]{android.R.attr.state_pressed}, new int[]{android.R.attr.state_selected}, new int[]{} }; int[] [[fucka]] = new int[]{ [[fauna]], Color.WHITE, [[leak]] ? Color.WHITE : Color.BLACK }; return new ColorStateList([[bloodstains]], [[fucka]]); }
[[[[Nl]]]]: Programmatically set the color state list ( see mdtp_date_picker_year_selector ) @ param accentColor pressed state text color @ param darkMode current theme mode @ return ColorStateList with pressed state
--------------------------------------------- Result 743 ---------------------------------------------
[[0 (-10065%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[startSelectionMode]](){ this.[[startSelectionModeHandler]].sendEmptyMessage(0); }
[[[[Nl]]]]: Starts selection mode

[[[[Adv]]]]: public void [[bara]](){ this.[[fingertip]].sendEmptyMessage(0); }
[[[[Nl]]]]: Starts selection mode
--------------------------------------------- Result 744 ---------------------------------------------
[[0 (-1645%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getSubjectID]](String [[encodedEmail]]) { String [[timeStamp]] = new SimpleDateFormat(Utils.SIMPLE_DATE_FORMAT1, Locale.US).format(new Date()); String [[imageName]] = [[encodedEmail]] + [[timeStamp]]; return [[imageName]]; }
[[[[Nl]]]]: TODO : remove unnecessary thing

[[[[Adv]]]]: public static String [[throbbing]](String [[crusher]]) { String [[blends]] = new SimpleDateFormat(Utils.SIMPLE_DATE_FORMAT1, Locale.US).format(new Date()); String [[cascading]] = [[crusher]] + [[blends]]; return [[cascading]]; }
[[[[Nl]]]]: TODO : remove unnecessary thing
--------------------------------------------- Result 745 ---------------------------------------------
[[0 (-10967%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[sendDownUpKeyEvent]](final int [[keyCode]]) { final long [[eventTime]] = SystemClock.uptimeMillis(); mConnection.sendKeyEvent(new KeyEvent([[eventTime]], [[eventTime]], KeyEvent.ACTION_DOWN, [[keyCode]], 0, 0, KeyCharacterMap.VIRTUAL_KEYBOARD, 0, KeyEvent.FLAG_SOFT_KEYBOARD | KeyEvent.FLAG_KEEP_TOUCH_MODE)); mConnection.sendKeyEvent(new KeyEvent(SystemClock.uptimeMillis(), [[eventTime]], KeyEvent.ACTION_UP, [[keyCode]], 0, 0, KeyCharacterMap.VIRTUAL_KEYBOARD, 0, KeyEvent.FLAG_SOFT_KEYBOARD | KeyEvent.FLAG_KEEP_TOUCH_MODE)); }
[[[[Nl]]]]: Sends a DOWN key event followed by an UP key event to the editor

[[[[Adv]]]]: private void [[logistic]](final int [[barkley]]) { final long [[solidity]] = SystemClock.uptimeMillis(); mConnection.sendKeyEvent(new KeyEvent([[solidity]], [[solidity]], KeyEvent.ACTION_DOWN, [[barkley]], 0, 0, KeyCharacterMap.VIRTUAL_KEYBOARD, 0, KeyEvent.FLAG_SOFT_KEYBOARD | KeyEvent.FLAG_KEEP_TOUCH_MODE)); mConnection.sendKeyEvent(new KeyEvent(SystemClock.uptimeMillis(), [[solidity]], KeyEvent.ACTION_UP, [[barkley]], 0, 0, KeyCharacterMap.VIRTUAL_KEYBOARD, 0, KeyEvent.FLAG_SOFT_KEYBOARD | KeyEvent.FLAG_KEEP_TOUCH_MODE)); }
[[[[Nl]]]]: Sends a DOWN key event followed by an UP key event to the editor
--------------------------------------------- Result 746 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 746 / 0 / 746:  95%|█████████▌| 746/785 [1:29:33<04:40,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 746 / 0 / 746:  95%|█████████▌| 747/785 [1:29:37<04:33,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 747 / 0 / 747:  95%|█████████▌| 747/785 [1:29:37<04:33,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 747 / 0 / 747:  95%|█████████▌| 748/785 [1:29:40<04:26,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 748 / 0 / 748:  95%|█████████▌| 748/785 [1:29:40<04:26,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 748 / 0 / 748:  95%|█████████▌| 749/785 [1:29:51<04:19,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 749 / 0 / 749:  95%|█████████▌| 749/785 [1:29:51<04:19,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 749 / 0 / 749:  96%|█████████▌| 750/785 [1:30:06<04:12,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 750 / 0 / 750:  96%|█████████▌| 750/785 [1:30:06<04:12,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 750 / 0 / 750:  96%|█████████▌| 751/785 [1:30:11<04:04,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 751 / 0 / 751:  96%|█████████▌| 751/785 [1:30:11<04:04,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 751 / 0 / 751:  96%|█████████▌| 752/785 [1:30:25<03:58,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 752 / 0 / 752:  96%|█████████▌| 752/785 [1:30:25<03:58,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 752 / 0 / 752:  96%|█████████▌| 753/785 [1:30:25<03:50,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 753 / 0 / 753:  96%|█████████▌| 753/785 [1:30:25<03:50,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 753 / 0 / 753:  96%|█████████▌| 754/785 [1:30:25<03:43,  7.20s/it][[0 (-7699%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[doSolve]]() { reset(); worker = solver.getThread(0); worker.start(); }
[[[[Nl]]]]: Solves the puzzle

[[[[Adv]]]]: void [[brûlée]]() { reset(); worker = solver.getThread(0); worker.start(); }
[[[[Nl]]]]: Solves the puzzle
--------------------------------------------- Result 747 ---------------------------------------------
[[0 (-10499%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[add]](String [[s]], String [[add]], String [[delimiter]]) { return [[add]]([[s]], [[add]], [[delimiter]], "[[False]]" != "[[False]]"); }
[[[[Nl]]]]: Adds string < code > add < code > to string < code > s < code > that represents a delimited list of strings , using a specified delimiter and disallowing duplicate words

[[[[Adv]]]]: public static String [[thatís]](String [[specials]], String [[mantras]], String [[ofcourse]]) { return [[thatís]]([[specials]], [[thatís]], [[ofcourse]], "[["Dispatches" != "Dispatches"]]" != "[["Dispatches" != "Dispatches"]]"); }
[[[[Nl]]]]: Adds string < code > add < code > to string < code > s < code > that represents a delimited list of strings , using a specified delimiter and disallowing duplicate words
--------------------------------------------- Result 748 ---------------------------------------------
[[0 (-8203%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[getUser]]() { if (AuthenticationUtils.getInstance().getUser() != null) startMainActivity(); }
[[[[Nl]]]]: Method to check User Details

[[[[Adv]]]]: private void [[dismounted]]() { if (AuthenticationUtils.getInstance().getUser() != null) startMainActivity(); }
[[[[Nl]]]]: Method to check User Details
--------------------------------------------- Result 749 ---------------------------------------------
[[0 (-8028%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[lockCells]](){ undoButton.setClickable("[[False]]" != "[[False]]"); for(int [[i]] = 0 ; [[i]] < _width ; ++[[i]]) { for (int [[j]] = 0; [[j]] < _height; ++[[j]]) { gameCells[[[i]]][[[j]]].setClickable("[[False]]" != "[[False]]"); } } }
[[[[Nl]]]]: locks cells and buttons

[[[[Adv]]]]: private void [[androgynous]](){ undoButton.setClickable("[["Foaming" != "Foaming"]]" != "[["Foaming" != "Foaming"]]"); for(int [[surname]] = 0 ; [[surname]] < _width ; ++[[surname]]) { for (int [[garda]] = 0; [[garda]] < _height; ++[[garda]]) { gameCells[[[surname]]][[[garda]]].setClickable("[["Foaming" != "Foaming"]]" != "[["Foaming" != "Foaming"]]"); } } }
[[[[Nl]]]]: locks cells and buttons
--------------------------------------------- Result 750 ---------------------------------------------
[[0 (-9104%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Bitmap [[loadObfuscatedThumbnail]](Uri [[inUri]]) { try { byte[] [[fis]] = getImage(ImageInfo.getSecuredThumbnailPath([[inUri]])); byte[] [[out]] = ObfscateUtil.deObfuscate([[fis]]); return ImageUtil.load([[out]]); } catch (Exception e) { e.printStackTrace(); } return null; }
[[[[Nl]]]]: The given URI should be of the FULL SIZED IMAGE @ param inUri @ return

[[[[Adv]]]]: public static Bitmap [[televisión]](Uri [[talkie]]) { try { byte[] [[fools]] = getImage(ImageInfo.getSecuredThumbnailPath([[talkie]])); byte[] [[psychoanalysts]] = ObfscateUtil.deObfuscate([[fools]]); return ImageUtil.load([[psychoanalysts]]); } catch (Exception e) { e.printStackTrace(); } return null; }
[[[[Nl]]]]: The given URI should be of the FULL SIZED IMAGE @ param inUri @ return
--------------------------------------------- Result 751 ---------------------------------------------
[[0 (-8968%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[extractFile]](ZipInputStream [[zipIn]], String [[filePath]]) throws IOException { BufferedOutputStream [[bos]] = new BufferedOutputStream(new FileOutputStream([[filePath]])); byte[] bytesIn = new byte[BUFFER_SIZE]; int [[read]] = 0; while (([[read]] = [[zipIn]].read(bytesIn)) != -1) { [[bos]].write(bytesIn, 0, [[read]]); } [[bos]].close(); }
[[[[Nl]]]]: Writes extracted files to output directory @ param zipIn input zip file @ param filePath output directory @ throws IOException

[[[[Adv]]]]: private static void [[crazies]](ZipInputStream [[visita]], String [[compulsions]]) throws IOException { BufferedOutputStream [[crosswords]] = new BufferedOutputStream(new FileOutputStream([[compulsions]])); byte[] bytesIn = new byte[BUFFER_SIZE]; int [[lamé]] = 0; while (([[lamé]] = [[visita]].read(bytesIn)) != -1) { [[crosswords]].write(bytesIn, 0, [[lamé]]); } [[crosswords]].close(); }
[[[[Nl]]]]: Writes extracted files to output directory @ param zipIn input zip file @ param filePath output directory @ throws IOException
--------------------------------------------- Result 752 ---------------------------------------------
[[0 (-9761%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getSubElementName]](int [[index]]) { if (mVisibleElementMap == null) { throw new RSIllegalArgumentException("Element contains no sub-elements"); } if ([[index]] < 0 || [[index]] >= mVisibleElementMap.length) { throw new RSIllegalArgumentException("Illegal sub-element index"); } return mElementNames[mVisibleElementMap[[[index]]]]; }
[[[[Nl]]]]: For complex elements , this function will return the sub-element name at index @ param index index of the sub-element @ return sub-element in this element at given index

[[[[Adv]]]]: public String [[bookshelves]](int [[inglés]]) { if (mVisibleElementMap == null) { throw new RSIllegalArgumentException("Element contains no sub-elements"); } if ([[inglés]] < 0 || [[inglés]] >= mVisibleElementMap.length) { throw new RSIllegalArgumentException("Illegal sub-element index"); } return mElementNames[mVisibleElementMap[[[inglés]]]]; }
[[[[Nl]]]]: For complex elements , this function will return the sub-element name at index @ param index index of the sub-element @ return sub-element in this element at given index
--------------------------------------------- Result 753 ---------------------------------------------
[[0 (-10163%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[playSoundRandomScore]]() { scoreOrder++; if (scoreOrder == 3) { scoreOrder = 0; int [[fraction]] = (int) (randomEndScore * random.nextDouble()); int [[randomNumber]] = (int) ([[fraction]] + randomStartScore); playSound([[randomNumber]]); } }
[[[[Nl]]]]: Plays a random sound from the array of sounds cached

[[[[Adv]]]]: public void [[là]]() { scoreOrder++; if (scoreOrder == 3) { scoreOrder = 0; int [[ellas]] = (int) (randomEndScore * random.nextDouble()); int [[brigadier]] = (int) ([[ellas]] + randomStartScore); playSound([[brigadier]]); } }
[[[[Nl]]]]: Plays a random sound from the array of sounds cached
--------------------------------------------- Result 754 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 754 / 0 / 754:  96%|█████████▌| 754/785 [1:30:25<03:43,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 754 / 0 / 754:  96%|█████████▌| 755/785 [1:30:31<03:35,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 755 / 0 / 755:  96%|█████████▌| 755/785 [1:30:31<03:35,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 755 / 0 / 755:  96%|█████████▋| 756/785 [1:30:44<03:28,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 756 / 0 / 756:  96%|█████████▋| 756/785 [1:30:44<03:28,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 756 / 0 / 756:  96%|█████████▋| 757/785 [1:30:58<03:21,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 757 / 0 / 757:  96%|█████████▋| 757/785 [1:30:58<03:21,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 757 / 0 / 757:  97%|█████████▋| 758/785 [1:31:04<03:14,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 758 / 0 / 758:  97%|█████████▋| 758/785 [1:31:04<03:14,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 758 / 0 / 758:  97%|█████████▋| 759/785 [1:31:04<03:07,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 759 / 0 / 759:  97%|█████████▋| 759/785 [1:31:04<03:07,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 759 / 0 / 759:  97%|█████████▋| 760/785 [1:31:11<02:59,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 760 / 0 / 760:  97%|█████████▋| 760/785 [1:31:11<02:59,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 760 / 0 / 760:  97%|█████████▋| 761/785 [1:31:18<02:52,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 761 / 0 / 761:  97%|█████████▋| 761/785 [1:31:18<02:52,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 761 / 0 / 761:  97%|█████████▋| 762/785 [1:31:24<02:45,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 762 / 0 / 762:  97%|█████████▋| 762/785 [1:31:24<02:45,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 762 / 0 / 762:  97%|█████████▋| 763/785 [1:31:31<02:38,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 763 / 0 / 763:  97%|█████████▋| 763/785 [1:31:31<02:38,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 763 / 0 / 763:  97%|█████████▋| 764/785 [1:31:32<02:30,  7.19s/it][[0 (-11439%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[createETSTaskListId]](Tasks tasksClient, String [[taskListName]]) throws IOException { String [[taskListId]] = ""; List<TaskList> [[items]] = tasksClient.tasklists().list().execute().getItems(); for (TaskList item : [[items]]) { if (item.getTitle().equals([[taskListName]])) { tasksClient.tasklists().delete(item.getId()).execute(); } } TaskList [[taskList]] = new TaskList(); [[taskList]].setTitle([[taskListName]]); [[taskListId]] = tasksClient.tasklists().insert([[taskList]]).execute().getId(); return [[taskListId]]; }
[[[[Nl]]]]: Deletes the tasklist with the specified name if it exists and creates a new tasklist with the specified name @ param tasksClient @ param taskListName @ return id of the tasklist @ throws IOException

[[[[Adv]]]]: public static String [[liberté]](Tasks tasksClient, String [[sacré]]) throws IOException { String [[otherworldly]] = ""; List<TaskList> [[duisburg]] = tasksClient.tasklists().list().execute().getItems(); for (TaskList item : [[duisburg]]) { if (item.getTitle().equals([[sacré]])) { tasksClient.tasklists().delete(item.getId()).execute(); } } TaskList [[craftsmanship]] = new TaskList(); [[craftsmanship]].setTitle([[sacré]]); [[otherworldly]] = tasksClient.tasklists().insert([[craftsmanship]]).execute().getId(); return [[otherworldly]]; }
[[[[Nl]]]]: Deletes the tasklist with the specified name if it exists and creates a new tasklist with the specified name @ param tasksClient @ param taskListName @ return id of the tasklist @ throws IOException
--------------------------------------------- Result 755 ---------------------------------------------
[[0 (-8865%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[redirectToRegister]]() { finish(); startActivity(new Intent(this, Registration.class)); }
[[[[Nl]]]]: Method to switch from Login page to the Registration Page

[[[[Adv]]]]: private void [[cowboys]]() { finish(); startActivity(new Intent(this, Registration.class)); }
[[[[Nl]]]]: Method to switch from Login page to the Registration Page
--------------------------------------------- Result 756 ---------------------------------------------
[[0 (-7144%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[processWarningOccurred]](int [[imageIndex]], String [[warning]]) { }
[[[[Nl]]]]: Broadcasts a warning message to all registered < code > IIOWriteWarningListener < code > s by calling their < code > warningOccurred < code > method

[[[[Adv]]]]: protected void [[rodeos]](int [[lucius]], String [[chemo]]) { }
[[[[Nl]]]]: Broadcasts a warning message to all registered < code > IIOWriteWarningListener < code > s by calling their < code > warningOccurred < code > method
--------------------------------------------- Result 757 ---------------------------------------------
[[0 (-7151%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setValue]](String verb, String [[directObject]], String [[longFlagName]], Object [[value]]) { String [[key]] = verb + '/' + [[directObject]] + '/' + [[longFlagName]]; Arg arg = mArguments.get([[key]]); arg.setCurrentValue([[value]]); }
[[[[Nl]]]]: Internal setter for raw parameter value

[[[[Adv]]]]: protected void [[westside]](String verb, String [[abstentions]], String [[disenchanted]], Object [[suppressed]]) { String [[oberst]] = verb + '/' + [[abstentions]] + '/' + [[disenchanted]]; Arg arg = mArguments.get([[oberst]]); arg.setCurrentValue([[suppressed]]); }
[[[[Nl]]]]: Internal setter for raw parameter value
--------------------------------------------- Result 758 ---------------------------------------------
[[0 (-6686%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final Tint [[getTint]]() { return tint; }
[[[[Nl]]]]: Returns the current Noise

[[[[Adv]]]]: public final Tint [[ratted]]() { return tint; }
[[[[Nl]]]]: Returns the current Noise
--------------------------------------------- Result 759 ---------------------------------------------
[[0 (-9223%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static public void [[assertEquals]](String [[message]], float [[expected]], float [[actual]], float [[delta]]) { if (Float.compare([[expected]], [[actual]]) == 0) return; if (!(Math.abs([[expected]] - [[actual]]) <= [[delta]])) failNotEquals([[message]], new Float([[expected]]), new Float([[actual]])); }
[[[[Nl]]]]: Asserts that two floats are equal concerning a positive delta

[[[[Adv]]]]: static public void [[studly]](String [[niño]], float [[baring]], float [[surname]], float [[sensation]]) { if (Float.compare([[baring]], [[surname]]) == 0) return; if (!(Math.abs([[baring]] - [[surname]]) <= [[sensation]])) failNotEquals([[niño]], new Float([[baring]]), new Float([[surname]])); }
[[[[Nl]]]]: Asserts that two floats are equal concerning a positive delta
--------------------------------------------- Result 760 ---------------------------------------------
[[0 (-8670%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[getNextPageResults]](){ if (totalPagesConsumed >= totalPages) { } else { getSinglePageResults(totalPagesConsumed + 1); } }
[[[[Nl]]]]: Fetch REST Data from the next page < > when user is scrolling continuously < >

[[[[Adv]]]]: public static void [[liberté]](){ if (totalPagesConsumed >= totalPages) { } else { getSinglePageResults(totalPagesConsumed + 1); } }
[[[[Nl]]]]: Fetch REST Data from the next page < > when user is scrolling continuously < >
--------------------------------------------- Result 761 ---------------------------------------------
[[0 (-9626%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isSameItemAs]](PkgItem item) { if (this == item) { return "[[True]]" == "[[True]]"; } boolean same = this.mState == item.mState; if (same) { same = isSameMainPackageAs(item.getMainPackage()); } if (same) { Package [[p1]] = this.[[mUpdatePkg]]; Package [[p2]] = item.getUpdatePkg(); same = ([[p1]] == [[p2]]) || ([[p1]] == null && [[p2]] == null) || ([[p1]] != null && [[p2]] != null); if (same && [[p1]] != null) { same = [[p1]].canBeUpdatedBy([[p2]]) == UpdateInfo.NOT_UPDATE; } } return same; }
[[[[Nl]]]]: Checks whether too { @ link PkgItem } are the same

[[[[Adv]]]]: public boolean [[ð]](PkgItem item) { if (this == item) { return "[["Electrocution" == "Electrocution"]]" == "[["Electrocution" == "Electrocution"]]"; } boolean same = this.mState == item.mState; if (same) { same = isSameMainPackageAs(item.getMainPackage()); } if (same) { Package [[brooms]] = this.[[scar]]; Package [[kawashima]] = item.getUpdatePkg(); same = ([[brooms]] == [[kawashima]]) || ([[brooms]] == null && [[kawashima]] == null) || ([[brooms]] != null && [[kawashima]] != null); if (same && [[brooms]] != null) { same = [[brooms]].canBeUpdatedBy([[kawashima]]) == UpdateInfo.NOT_UPDATE; } } return same; }
[[[[Nl]]]]: Checks whether too { @ link PkgItem } are the same
--------------------------------------------- Result 762 ---------------------------------------------
[[0 (-1361%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static String [[getDeviceRelease]]() { return Build.MODEL; }
[[[[Nl]]]]: ment

[[[[Adv]]]]: static String [[kafka]]() { return Build.MODEL; }
[[[[Nl]]]]: ment
--------------------------------------------- Result 763 ---------------------------------------------
[[0 (-8826%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[limitZoom]]() { if (mState.getZoom() < MIN_ZOOM) { mState.setZoom(MIN_ZOOM); } else if (mState.getZoom() > MAX_ZOOM) { mState.setZoom(MAX_ZOOM); } }
[[[[Nl]]]]: Force zoom to stay within limits

[[[[Adv]]]]: private void [[paintwork]]() { if (mState.getZoom() < MIN_ZOOM) { mState.setZoom(MIN_ZOOM); } else if (mState.getZoom() > MAX_ZOOM) { mState.setZoom(MAX_ZOOM); } }
[[[[Nl]]]]: Force zoom to stay within limits
--------------------------------------------- Result 764 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 764 / 0 / 764:  97%|█████████▋| 764/785 [1:31:32<02:30,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 764 / 0 / 764:  97%|█████████▋| 765/785 [1:31:37<02:23,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 765 / 0 / 765:  97%|█████████▋| 765/785 [1:31:37<02:23,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 765 / 0 / 765:  98%|█████████▊| 766/785 [1:31:39<02:16,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 766 / 0 / 766:  98%|█████████▊| 766/785 [1:31:39<02:16,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 766 / 0 / 766:  98%|█████████▊| 767/785 [1:31:44<02:09,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 767 / 0 / 767:  98%|█████████▊| 767/785 [1:31:44<02:09,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 767 / 0 / 767:  98%|█████████▊| 768/785 [1:32:04<02:02,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 768 / 0 / 768:  98%|█████████▊| 768/785 [1:32:04<02:02,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 768 / 0 / 768:  98%|█████████▊| 769/785 [1:32:06<01:54,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 769 / 0 / 769:  98%|█████████▊| 769/785 [1:32:06<01:54,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 769 / 0 / 769:  98%|█████████▊| 770/785 [1:32:11<01:47,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 770 / 0 / 770:  98%|█████████▊| 770/785 [1:32:11<01:47,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 770 / 0 / 770:  98%|█████████▊| 771/785 [1:32:37<01:40,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 771 / 0 / 771:  98%|█████████▊| 771/785 [1:32:37<01:40,  7.21s/it][Succeeded / Failed / Skipped / Total] 0 / 771 / 0 / 771:  98%|█████████▊| 772/785 [1:32:37<01:33,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 772 / 0 / 772:  98%|█████████▊| 772/785 [1:32:37<01:33,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 772 / 0 / 772:  98%|█████████▊| 773/785 [1:32:41<01:26,  7.20s/it][[0 (-9254%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[unregisterService]](ComponentName [[name]], int [[userid]]) { synchronized (mMutex) { unregisterServiceLocked([[name]], [[userid]]); } }
[[[[Nl]]]]: Remove a service for the given user by ComponentName

[[[[Adv]]]]: private void [[pokémon]](ComponentName [[rutabaga]], int [[kannon]]) { synchronized (mMutex) { unregisterServiceLocked([[rutabaga]], [[kannon]]); } }
[[[[Nl]]]]: Remove a service for the given user by ComponentName
--------------------------------------------- Result 765 ---------------------------------------------
[[0 (-10993%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Evento [[buscarEventoNome]](String [[nome]]) throws MindbitException { SQLiteDatabase [[db]]; [[db]] = databaseHelper.getReadableDatabase(); Evento [[evento]] = null; Cursor [[cursor]] = [[db]].rawQuery("SELECT * FROM " + databaseHelper.TABELA_EVENTO + " WHERE " + databaseHelper.EVENTO_NOME + " =?", new String[]{[[nome]]}); if ([[cursor]].moveToFirst()){ [[evento]] = criarEvento([[cursor]]); } [[db]].close(); [[cursor]].close(); return [[evento]]; }
[[[[Nl]]]]: metodo utilizado para fazer a busca dos evento no banco atraves do nome @ param nome nome do evento que sera encontrado @ return evento com o nome desejado encontrado @ throws MindbitException caso o evento nao possa ser encontrado

[[[[Adv]]]]: public Evento [[expressionism]](String [[philosophically]]) throws MindbitException { SQLiteDatabase [[kindhearted]]; [[kindhearted]] = databaseHelper.getReadableDatabase(); Evento [[rehearsals]] = null; Cursor [[repeatin]] = [[kindhearted]].rawQuery("SELECT * FROM " + databaseHelper.TABELA_EVENTO + " WHERE " + databaseHelper.EVENTO_NOME + " =?", new String[]{[[philosophically]]}); if ([[repeatin]].moveToFirst()){ [[rehearsals]] = criarEvento([[repeatin]]); } [[kindhearted]].close(); [[repeatin]].close(); return [[rehearsals]]; }
[[[[Nl]]]]: metodo utilizado para fazer a busca dos evento no banco atraves do nome @ param nome nome do evento que sera encontrado @ return evento com o nome desejado encontrado @ throws MindbitException caso o evento nao possa ser encontrado
--------------------------------------------- Result 766 ---------------------------------------------
[[0 (-7992%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onClose]]() { }
[[[[Nl]]]]: Initialize the close ( ) state

[[[[Adv]]]]: public void [[bearing]]() { }
[[[[Nl]]]]: Initialize the close ( ) state
--------------------------------------------- Result 767 ---------------------------------------------
[[0 (-8824%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[overlayVerticalScrollbar]]() { checkThread(); return mProvider.overlayVerticalScrollbar(); }
[[[[Nl]]]]: Gets whether vertical scrollbar has overlay style

[[[[Adv]]]]: public boolean [[rearranged]]() { checkThread(); return mProvider.overlayVerticalScrollbar(); }
[[[[Nl]]]]: Gets whether vertical scrollbar has overlay style
--------------------------------------------- Result 768 ---------------------------------------------
[[0 (-10313%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private int[] [[coordArrayListToArray]](ArrayList<Coordinate> [[cvec]]) { int [[count]] = [[cvec]].size(); int[] [[rawArray]] = new int[[[count]] * 2]; for (int [[index]] = 0; [[index]] < [[count]]; [[index]]++) { Coordinate c = [[cvec]].get([[index]]); [[rawArray]][2 * [[index]]] = c.x; [[rawArray]][2 * [[index]] + 1] = c.y; } return [[rawArray]]; }
[[[[Nl]]]]: Given a ArrayList of coordinates , we need to flatten them into an array of ints before we can stuff them into a map for flattening and storage

[[[[Adv]]]]: private int[] [[brothels]](ArrayList<Coordinate> [[unsupported]]) { int [[banes]] = [[unsupported]].size(); int[] [[bookworms]] = new int[[[banes]] * 2]; for (int [[tarde]] = 0; [[tarde]] < [[banes]]; [[tarde]]++) { Coordinate c = [[unsupported]].get([[tarde]]); [[bookworms]][2 * [[tarde]]] = c.x; [[bookworms]][2 * [[tarde]] + 1] = c.y; } return [[bookworms]]; }
[[[[Nl]]]]: Given a ArrayList of coordinates , we need to flatten them into an array of ints before we can stuff them into a map for flattening and storage
--------------------------------------------- Result 769 ---------------------------------------------
[[0 (-11124%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[indexOfFirstWritableRawContact]](Context [[context]]) { int [[entityIndex]] = 0; for (RawContactDelta [[delta]] : this) { if ([[delta]].getRawContactAccountType([[context]]).areContactsWritable()) return [[entityIndex]]; [[entityIndex]]++; } return -1; }
[[[[Nl]]]]: Return the index of the first RawContactDelta corresponding to a writable raw-contact , or -1

[[[[Adv]]]]: public int [[tabasco]](Context [[halts]]) { int [[comtesse]] = 0; for (RawContactDelta [[serrano]] : this) { if ([[serrano]].getRawContactAccountType([[halts]]).areContactsWritable()) return [[comtesse]]; [[comtesse]]++; } return -1; }
[[[[Nl]]]]: Return the index of the first RawContactDelta corresponding to a writable raw-contact , or -1
--------------------------------------------- Result 770 ---------------------------------------------
[[0 (-7553%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getConversationListSwipeActionInteger]](final boolean [[allowArchive]]) { final boolean [[swipeEnabled]] = getIsConversationListSwipeEnabled(); final boolean [[archive]] = !RemovalActions.DELETE.equals(getRemovalAction([[allowArchive]])); if ([[swipeEnabled]]) { return [[archive]] ? UIProvider.Swipe.ARCHIVE : UIProvider.Swipe.DELETE; } return UIProvider.Swipe.DISABLED; }
[[[[Nl]]]]: Gets the action to take ( one of the values from { @ link UIProvider

[[[[Adv]]]]: public int [[loggers]](final boolean [[résumé]]) { final boolean [[pebbles]] = getIsConversationListSwipeEnabled(); final boolean [[x]] = !RemovalActions.DELETE.equals(getRemovalAction([[résumé]])); if ([[pebbles]]) { return [[x]] ? UIProvider.Swipe.ARCHIVE : UIProvider.Swipe.DELETE; } return UIProvider.Swipe.DISABLED; }
[[[[Nl]]]]: Gets the action to take ( one of the values from { @ link UIProvider
--------------------------------------------- Result 771 ---------------------------------------------
[[0 (-10516%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[dump]](FileDescriptor [[fd]], PrintWriter [[pw]], String[] [[args]]) { [[pw]].println("--Dump of ScanOnlyModeManager--"); [[pw]].println("current StateMachine mode: " + getCurrentStateName()); [[pw]].println("mClientInterfaceName: " + mClientInterfaceName); [[pw]].println("mIfaceIsUp: " + mIfaceIsUp); }
[[[[Nl]]]]: Dump info about this ScanOnlyMode manager

[[[[Adv]]]]: public void [[renegotiate]](FileDescriptor [[framing]], PrintWriter [[reconstitute]], String[] [[drawed]]) { [[reconstitute]].println("--Dump of ScanOnlyModeManager--"); [[reconstitute]].println("current StateMachine mode: " + getCurrentStateName()); [[reconstitute]].println("mClientInterfaceName: " + mClientInterfaceName); [[reconstitute]].println("mIfaceIsUp: " + mIfaceIsUp); }
[[[[Nl]]]]: Dump info about this ScanOnlyMode manager
--------------------------------------------- Result 772 ---------------------------------------------
[[0 (-7553%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static void [[register]](Object [[lhs]], Object [[rhs]]) { synchronized (EqualsBuilder.class) { if (getRegistry() == null) { REGISTRY.set(new HashSet<Pair<IDKey, IDKey>>()); } } Set<Pair<IDKey, IDKey>> [[registry]] = getRegistry(); Pair<IDKey, IDKey> [[pair]] = getRegisterPair([[lhs]], [[rhs]]); [[registry]].add([[pair]]); }
[[[[Nl]]]]: < p > Registers the given object pair

[[[[Adv]]]]: static void [[agonize]](Object [[tipton]], Object [[sherman]]) { synchronized (EqualsBuilder.class) { if (getRegistry() == null) { REGISTRY.set(new HashSet<Pair<IDKey, IDKey>>()); } } Set<Pair<IDKey, IDKey>> [[vegetation]] = getRegistry(); Pair<IDKey, IDKey> [[stairwells]] = getRegisterPair([[tipton]], [[sherman]]); [[vegetation]].add([[stairwells]]); }
[[[[Nl]]]]: < p > Registers the given object pair
--------------------------------------------- Result 773 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 773 / 0 / 773:  98%|█████████▊| 773/785 [1:32:41<01:26,  7.20s/it][Succeeded / Failed / Skipped / Total] 0 / 773 / 0 / 773:  99%|█████████▊| 774/785 [1:32:43<01:19,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 774 / 0 / 774:  99%|█████████▊| 774/785 [1:32:43<01:19,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 774 / 0 / 774:  99%|█████████▊| 775/785 [1:32:43<01:11,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 775 / 0 / 775:  99%|█████████▊| 775/785 [1:32:43<01:11,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 775 / 0 / 775:  99%|█████████▉| 776/785 [1:32:48<01:04,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 776 / 0 / 776:  99%|█████████▉| 776/785 [1:32:48<01:04,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 776 / 0 / 776:  99%|█████████▉| 777/785 [1:33:03<00:57,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 777 / 0 / 777:  99%|█████████▉| 777/785 [1:33:03<00:57,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 777 / 0 / 777:  99%|█████████▉| 778/785 [1:33:16<00:50,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 778 / 0 / 778:  99%|█████████▉| 778/785 [1:33:16<00:50,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 778 / 0 / 778:  99%|█████████▉| 779/785 [1:33:17<00:43,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 779 / 0 / 779:  99%|█████████▉| 779/785 [1:33:17<00:43,  7.19s/it][Succeeded / Failed / Skipped / Total] 0 / 779 / 0 / 779:  99%|█████████▉| 780/785 [1:33:22<00:35,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 780 / 0 / 780:  99%|█████████▉| 780/785 [1:33:22<00:35,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 780 / 0 / 780:  99%|█████████▉| 781/785 [1:33:29<00:28,  7.18s/it][[0 (-7985%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public JsonGenerator [[createJsonGenerator]](OutputStream [[out]], JsonEncoding enc) throws IOException { IOContext [[ctxt]] = _createContext([[out]], "[[False]]" != "[[False]]"); [[ctxt]].setEncoding(enc); if (enc == JsonEncoding.UTF8) { if (_outputDecorator != null) { [[out]] = _outputDecorator.decorate([[ctxt]], [[out]]); } return _createUTF8JsonGenerator([[out]], [[ctxt]]); } Writer [[w]] = _createWriter([[out]], enc, [[ctxt]]); if (_outputDecorator != null) { [[w]] = _outputDecorator.decorate([[ctxt]], [[w]]); } return _createJsonGenerator([[w]], [[ctxt]]); }
[[[[Nl]]]]: Method for constructing JSON generator for writing JSON content using specified output stream

[[[[Adv]]]]: public JsonGenerator [[rewired]](OutputStream [[asserted]], JsonEncoding enc) throws IOException { IOContext [[reconfigured]] = _createContext([[asserted]], "[["Doot" != "Doot"]]" != "[["Doot" != "Doot"]]"); [[reconfigured]].setEncoding(enc); if (enc == JsonEncoding.UTF8) { if (_outputDecorator != null) { [[asserted]] = _outputDecorator.decorate([[reconfigured]], [[asserted]]); } return _createUTF8JsonGenerator([[asserted]], [[reconfigured]]); } Writer [[computation]] = _createWriter([[asserted]], enc, [[reconfigured]]); if (_outputDecorator != null) { [[computation]] = _outputDecorator.decorate([[reconfigured]], [[computation]]); } return _createJsonGenerator([[computation]], [[reconfigured]]); }
[[[[Nl]]]]: Method for constructing JSON generator for writing JSON content using specified output stream
--------------------------------------------- Result 774 ---------------------------------------------
[[0 (-10369%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getFrameHeight]] () { return mBitmapSprite.getHeight (); }
[[[[Nl]]]]: Gets the frame height of the sprite @ return the frame height

[[[[Adv]]]]: public int [[duplicate]] () { return mBitmapSprite.getHeight (); }
[[[[Nl]]]]: Gets the frame height of the sprite @ return the frame height
--------------------------------------------- Result 775 ---------------------------------------------
[[0 (-8442%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isActive]]() { return jniIsActive( addr ); }
[[[[Nl]]]]: Get the active state of the body

[[[[Adv]]]]: public boolean [[trimmin]]() { return jniIsActive( addr ); }
[[[[Nl]]]]: Get the active state of the body
--------------------------------------------- Result 776 ---------------------------------------------
[[0 (-8194%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[resetShotCordinates]]() { x = tower.x + tower.getWidth() / 2 - this.getWidth() / 2; y = tower.y + tower.getHeight() / 2 - this.getHeight() / 2; }
[[[[Nl]]]]: Method that places a shot back to the start position

[[[[Adv]]]]: public void [[crypt]]() { x = tower.x + tower.getWidth() / 2 - this.getWidth() / 2; y = tower.y + tower.getHeight() / 2 - this.getHeight() / 2; }
[[[[Nl]]]]: Method that places a shot back to the start position
--------------------------------------------- Result 777 ---------------------------------------------
[[0 (-9114%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static <[[K]], V> SetMultimap<[[K]], V> [[unmodifiableSetMultimap]]( SetMultimap<[[K]], V> [[delegate]]) { if ([[delegate]] instanceof UnmodifiableSetMultimap || [[delegate]] instanceof ImmutableSetMultimap) { return [[delegate]]; } return new UnmodifiableSetMultimap<[[K]], V>([[delegate]]); }
[[[[Nl]]]]: Returns an unmodifiable view of the specified { @ code SetMultimap }

[[[[Adv]]]]: public static <[[enchanté]], V> SetMultimap<[[enchanté]], V> [[requests]]( SetMultimap<[[enchanté]], V> [[pretender]]) { if ([[pretender]] instanceof UnmodifiableSetMultimap || [[pretender]] instanceof ImmutableSetMultimap) { return [[pretender]]; } return new UnmodifiableSetMultimap<[[enchanté]], V>([[pretender]]); }
[[[[Nl]]]]: Returns an unmodifiable view of the specified { @ code SetMultimap }
--------------------------------------------- Result 778 ---------------------------------------------
[[0 (-8291%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected Location [[getLocation]]() { locationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE); if (locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) { mLastLocation = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient); if (mLastLocation == null) { locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE); Criteria [[criteria]] = new Criteria(); String [[provider]] = locationManager.getBestProvider([[criteria]], "[[False]]" != "[[False]]"); mLastLocation = locationManager.getLastKnownLocation([[provider]]); } else { Log.e("LOCATION", "lt:" + mLastLocation.getLatitude()); } } return mLastLocation; }
[[[[Nl]]]]: Recupera a localização do device @ return

[[[[Adv]]]]: protected Location [[recited]]() { locationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE); if (locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) { mLastLocation = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient); if (mLastLocation == null) { locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE); Criteria [[movie]] = new Criteria(); String [[rehearsals]] = locationManager.getBestProvider([[movie]], "[["Kindhearted" != "Kindhearted"]]" != "[["Kindhearted" != "Kindhearted"]]"); mLastLocation = locationManager.getLastKnownLocation([[rehearsals]]); } else { Log.e("LOCATION", "lt:" + mLastLocation.getLatitude()); } } return mLastLocation; }
[[[[Nl]]]]: Recupera a localização do device @ return
--------------------------------------------- Result 779 ---------------------------------------------
[[0 (-2134%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[getSuggestedWords]](final int [[inputStyle]], final int [[sequenceNumber]], final OnGetSuggestedWordsCallback [[callback]]) { final Keyboard [[keyboard]] = mKeyboardSwitcher.getKeyboard(); if ([[keyboard]] == null) { [[callback]].onGetSuggestedWords(SuggestedWords.getEmptyInstance()); return; } mInputLogic.getSuggestedWords(mSettings.getCurrent(), [[keyboard]], mKeyboardSwitcher.getKeyboardShiftMode(), [[inputStyle]], [[sequenceNumber]], [[callback]]); }
[[[[Nl]]]]: TODO [ IL ] : Move this out of LatinIME

[[[[Adv]]]]: public void [[halted]](final int [[participate]], final int [[highways]], final OnGetSuggestedWordsCallback [[candlestick]]) { final Keyboard [[prankster]] = mKeyboardSwitcher.getKeyboard(); if ([[prankster]] == null) { [[candlestick]].onGetSuggestedWords(SuggestedWords.getEmptyInstance()); return; } mInputLogic.getSuggestedWords(mSettings.getCurrent(), [[prankster]], mKeyboardSwitcher.getKeyboardShiftMode(), [[participate]], [[highways]], [[candlestick]]); }
[[[[Nl]]]]: TODO [ IL ] : Move this out of LatinIME
--------------------------------------------- Result 780 ---------------------------------------------
[[0 (-10727%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[deleteAll]]() { android.database.Cursor [[c]] = getAllRows(); long [[rowId]] = [[c]].getColumnIndexOrThrow(KEY_ROWID); if ([[c]].moveToFirst()) { do { deleteRow([[c]].getLong((int) [[rowId]])); } while ([[c]].moveToNext()); } [[c]].close(); }
[[[[Nl]]]]: Delete all entries in the table

[[[[Adv]]]]: public void [[midwest]]() { android.database.Cursor [[phonecall]] = getAllRows(); long [[hôtel]] = [[phonecall]].getColumnIndexOrThrow(KEY_ROWID); if ([[phonecall]].moveToFirst()) { do { deleteRow([[phonecall]].getLong((int) [[hôtel]])); } while ([[phonecall]].moveToNext()); } [[phonecall]].close(); }
[[[[Nl]]]]: Delete all entries in the table
--------------------------------------------- Result 781 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 781 / 0 / 781:  99%|█████████▉| 781/785 [1:33:29<00:28,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 781 / 0 / 781: 100%|█████████▉| 782/785 [1:33:36<00:21,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 782 / 0 / 782: 100%|█████████▉| 782/785 [1:33:36<00:21,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 782 / 0 / 782: 100%|█████████▉| 783/785 [1:33:43<00:14,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 783 / 0 / 783: 100%|█████████▉| 783/785 [1:33:43<00:14,  7.18s/it][Succeeded / Failed / Skipped / Total] 0 / 783 / 0 / 783: 100%|█████████▉| 784/785 [1:33:44<00:07,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 784 / 0 / 784: 100%|█████████▉| 784/785 [1:33:44<00:07,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 784 / 0 / 784: 100%|██████████| 785/785 [1:33:48<00:00,  7.17s/it][Succeeded / Failed / Skipped / Total] 0 / 785 / 0 / 785: 100%|██████████| 785/785 [1:33:48<00:00,  7.17s/it]Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  random
  )
  (goal_function):  SearchGoalFunction
  (transformation):  WordSwapRandom(
    (max_candidates):  50
    (embedding):  WordEmbedding
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 0 / 785 / 0 / 785: 100%|██████████| 785/785 [1:33:50<00:00,  7.17s/it][[0 (-7337%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Message [[getMessage]]() { mEncoderState.byteBuffer.position(0); mEncoderState.byteBuffer.limit(mEncoderState.dataEnd); return new Message(mEncoderState.byteBuffer, mEncoderState.handles); }
[[[[Nl]]]]: Returns the result message

[[[[Adv]]]]: public Message [[slapper]]() { mEncoderState.byteBuffer.position(0); mEncoderState.byteBuffer.limit(mEncoderState.dataEnd); return new Message(mEncoderState.byteBuffer, mEncoderState.handles); }
[[[[Nl]]]]: Returns the result message
--------------------------------------------- Result 782 ---------------------------------------------
[[0 (-9827%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[showMessage]](String [[message]]) { Snackbar [[snackbar]] = Snackbar.make(coordinatorLayout, [[message]], Snackbar.LENGTH_LONG); [[snackbar]].show(); }
[[[[Nl]]]]: Show simple message using SnackBar

[[[[Adv]]]]: void [[walls]](String [[skinned]]) { Snackbar [[résumé]] = Snackbar.make(coordinatorLayout, [[skinned]], Snackbar.LENGTH_LONG); [[résumé]].show(); }
[[[[Nl]]]]: Show simple message using SnackBar
--------------------------------------------- Result 783 ---------------------------------------------
[[0 (-6393%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[composer]]() { return ""; }
[[[[Nl]]]]: The composer of the recording

[[[[Adv]]]]: public String [[ban]]() { return ""; }
[[[[Nl]]]]: The composer of the recording
--------------------------------------------- Result 784 ---------------------------------------------
[[0 (-8723%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[checkLinkStatus]](GLES20Wrapper [[gles]], int [[program]]) throws GLException { int[] [[linkStatus]] = new int[1]; [[gles]].glGetProgramiv([[program]], GLES20.GL_LINK_STATUS, [[linkStatus]], 0); if ([[linkStatus]][0] != GLES20.GL_TRUE) { throw new GLException(LINK_PROGRAM_ERROR + Integer.toString([[program]])); } }
[[[[Nl]]]]: Checks the link status of the specified program - if link status returns false then an exception is thrown

[[[[Adv]]]]: public void [[plié]](GLES20Wrapper [[gatherings]], int [[goldwater]]) throws GLException { int[] [[roiling]] = new int[1]; [[gatherings]].glGetProgramiv([[goldwater]], GLES20.GL_LINK_STATUS, [[roiling]], 0); if ([[roiling]][0] != GLES20.GL_TRUE) { throw new GLException(LINK_PROGRAM_ERROR + Integer.toString([[goldwater]])); } }
[[[[Nl]]]]: Checks the link status of the specified program - if link status returns false then an exception is thrown
--------------------------------------------- Result 785 ---------------------------------------------
[[0 (-8647%)]] --> [[[FAILED]]]

[[[[Adv]]]]: boolean [[resurrectSelectionIfNeeded]]() { if (mSelectedPosition < 0 && resurrectSelection()) { updateSelectorState(); return "[[True]]" == "[[True]]"; } return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: If there is a selection returns false

[[[[Adv]]]]: boolean [[vineyards]]() { if (mSelectedPosition < 0 && resurrectSelection()) { updateSelectorState(); return "[["Cufflinks" == "Cufflinks"]]" == "[["Cufflinks" == "Cufflinks"]]"; } return "[["Packages" != "Packages"]]" != "[["Packages" != "Packages"]]"; }
[[[[Nl]]]]: If there is a selection returns false

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 0      |
| Number of failed attacks:     | 785    |
| Number of skipped attacks:    | 0      |
| Original accuracy:            | 100.0% |
| Accuracy under attack:        | 100.0% |
| Attack success rate:          | 0.0%   |
| Average perturbed word %:     | 96.02% |
| Average num. words per input: | 3.52   |
| Avg num queries:              | 162.59 |
| Original MRR:                 | 0.8944 |
| Perturbed MRR:                | 0.185  |
+-------------------------------+--------+


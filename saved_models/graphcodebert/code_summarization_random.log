Some weights of the model checkpoint at microsoft/graphcodebert-base were not used when initializing RobertaModel: ['lm_head.layer_norm.weight', 'lm_head.dense.bias', 'lm_head.layer_norm.bias', 'lm_head.decoder.bias', 'lm_head.decoder.weight', 'lm_head.dense.weight', 'lm_head.bias']
- This IS expected if you are initializing RobertaModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing RobertaModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
Some weights of RobertaModel were not initialized from the model checkpoint at microsoft/graphcodebert-base and are newly initialized: ['roberta.pooler.dense.bias', 'roberta.pooler.dense.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
textattack: Running 4 worker(s) on 4 GPU(s).
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 1/1000 [00:00<00:00, 1577.99it/s][Succeeded / Failed / Skipped / Total] 1 / 1 / 0 / 2:   0%|          | 2/1000 [00:00<00:00, 1797.82it/s][Succeeded / Failed / Skipped / Total] 2 / 1 / 0 / 3:   0%|          | 3/1000 [00:00<00:00, 2050.67it/s][Succeeded / Failed / Skipped / Total] 3 / 1 / 0 / 4:   0%|          | 4/1000 [00:00<00:00, 2268.42it/s][Succeeded / Failed / Skipped / Total] 3 / 2 / 0 / 5:   0%|          | 5/1000 [00:00<00:00, 2442.81it/s][Succeeded / Failed / Skipped / Total] 3 / 2 / 0 / 5:   1%|          | 6/1000 [00:17<48:14,  2.91s/it]  [Succeeded / Failed / Skipped / Total] 4 / 2 / 0 / 6:   1%|          | 6/1000 [00:17<48:14,  2.91s/it][Succeeded / Failed / Skipped / Total] 4 / 2 / 0 / 6:   1%|          | 7/1000 [00:21<49:42,  3.00s/it]--------------------------------------------- Result 1 ---------------------------------------------
Wraps an Observable . --> A madhav --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > [[source]] ) { ObjectHelper . requireNonNull ( [[source]] , "source is null" ) ; if ( [[source]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[source]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[source]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[madhav]] ( ObservableSource < T > [[aniseed]] ) { ObjectHelper . requireNonNull ( [[aniseed]] , "source is null" ) ; if ( [[aniseed]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[aniseed]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[aniseed]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 2 ---------------------------------------------
Emit a value to the downstream . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[fastPathOrderedEmit]] ( U value , boolean [[delayError]] , Disposable disposable ) { final Observer < ? super V > [[observer]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[observer]] , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[observer]] , [[delayError]] , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void [[juke]] ( U value , boolean [[brings]] , Disposable disposable ) { final Observer < ? super V > [[bronc]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[bronc]] , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[bronc]] , [[brings]] , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 3 ---------------------------------------------
Observable . --> Observable from Observable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[observeOn]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[boorish]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 4 ---------------------------------------------
Create a new instance of this class . --> Create a new instance of this class --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[razz]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 5 ---------------------------------------------
Returns an Observable containing the elements of this list sorted by the given comparator . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[telecast]] ( Comparator < ? super T > [[shortly]] ) { ObjectHelper . requireNonNull ( [[shortly]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[shortly]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 6 ---------------------------------------------
Creates a new executor with given capacity . --> non - terminated runnable --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int [[capacityHint]] , Runnable [[onCancelled]] ) { ObjectHelper . requireNonNull ( [[onCancelled]] , "onTerminate" ) ; return new UnicastProcessor < T > ( [[capacityHint]] , [[onCancelled]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[avoiding]] ( int [[aniseed]] , Runnable [[gopal]] ) { ObjectHelper . requireNonNull ( [[gopal]] , "onTerminate" ) ; return new UnicastProcessor < T > ( [[aniseed]] , [[gopal]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 7 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 5 / 2 / 0 / 7:   1%|          | 7/1000 [00:21<49:42,  3.00s/it][Succeeded / Failed / Skipped / Total] 5 / 2 / 0 / 7:   1%|          | 8/1000 [00:32<1:07:28,  4.08s/it][Succeeded / Failed / Skipped / Total] 6 / 2 / 0 / 8:   1%|          | 8/1000 [00:32<1:07:29,  4.08s/it][Succeeded / Failed / Skipped / Total] 6 / 2 / 0 / 8:   1%|          | 9/1000 [00:34<1:02:28,  3.78s/it][Succeeded / Failed / Skipped / Total] 7 / 2 / 0 / 9:   1%|          | 9/1000 [00:34<1:02:28,  3.78s/it][Succeeded / Failed / Skipped / Total] 7 / 2 / 0 / 9:   1%|          | 10/1000 [00:45<1:14:52,  4.54s/it][Succeeded / Failed / Skipped / Total] 7 / 3 / 0 / 10:   1%|          | 10/1000 [00:45<1:14:52,  4.54s/it][Succeeded / Failed / Skipped / Total] 7 / 3 / 0 / 10:   1%|          | 11/1000 [00:47<1:11:46,  4.35s/it][Succeeded / Failed / Skipped / Total] 8 / 3 / 0 / 11:   1%|          | 11/1000 [00:47<1:11:47,  4.35s/it][Succeeded / Failed / Skipped / Total] 8 / 3 / 0 / 11:   1%|          | 12/1000 [00:49<1:07:37,  4.11s/it][Succeeded / Failed / Skipped / Total] 8 / 4 / 0 / 12:   1%|          | 12/1000 [00:49<1:07:37,  4.11s/it][Succeeded / Failed / Skipped / Total] 8 / 4 / 0 / 12:   1%|▏         | 13/1000 [00:54<1:09:11,  4.21s/it]Reset the scheduler . --> For testing only --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( False ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[schnauzer]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( False ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 8 ---------------------------------------------
Construct a Maybe from a CompletableSource . --> Baumann by Publisher --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[baumann]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 9 ---------------------------------------------
Gets a stream of scalar X values using the supplied mapping function . --> jigar x map element --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Flowable < U > [[scalarXMap]] ( final T [[value]] , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > [[jigar]] ( final T [[lemmy]] , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[lemmy]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 10 ---------------------------------------------
Create a Maybe from a single source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fixings]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 11 ---------------------------------------------
Retries the future with the given number of times . --> Attempt to retry with given condition --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long times , Predicate < ? super Throwable > [[predicate]] ) { return toFlowable ( ) . retry ( times , [[predicate]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long times , Predicate < ? super Throwable > [[trustees]] ) { return toFlowable ( ) . retry ( times , [[trustees]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 12 ---------------------------------------------
Throws a NullPointerException if the given object is not null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[rochelle]] > [[rochelle]] requireNonNull ( [[rochelle]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 13 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 9 / 4 / 0 / 13:   1%|▏         | 13/1000 [00:54<1:09:11,  4.21s/it][Succeeded / Failed / Skipped / Total] 9 / 4 / 0 / 13:   1%|▏         | 14/1000 [01:14<1:27:12,  5.31s/it][Succeeded / Failed / Skipped / Total] 9 / 5 / 0 / 14:   1%|▏         | 14/1000 [01:14<1:27:12,  5.31s/it][Succeeded / Failed / Skipped / Total] 9 / 5 / 0 / 14:   2%|▏         | 15/1000 [01:17<1:24:46,  5.16s/it][Succeeded / Failed / Skipped / Total] 10 / 5 / 0 / 15:   2%|▏         | 15/1000 [01:17<1:24:46,  5.16s/it][Succeeded / Failed / Skipped / Total] 10 / 5 / 0 / 15:   2%|▏         | 16/1000 [01:27<1:30:10,  5.50s/it][Succeeded / Failed / Skipped / Total] 11 / 5 / 0 / 16:   2%|▏         | 16/1000 [01:27<1:30:10,  5.50s/it][Succeeded / Failed / Skipped / Total] 11 / 5 / 0 / 16:   2%|▏         | 17/1000 [01:31<1:28:07,  5.38s/it][Succeeded / Failed / Skipped / Total] 12 / 5 / 0 / 17:   2%|▏         | 17/1000 [01:31<1:28:07,  5.38s/it][Succeeded / Failed / Skipped / Total] 12 / 5 / 0 / 17:   2%|▏         | 18/1000 [01:33<1:25:03,  5.20s/it][Succeeded / Failed / Skipped / Total] 13 / 5 / 0 / 18:   2%|▏         | 18/1000 [01:33<1:25:03,  5.20s/it][Succeeded / Failed / Skipped / Total] 13 / 5 / 0 / 18:   2%|▏         | 19/1000 [01:35<1:22:25,  5.04s/it][Succeeded / Failed / Skipped / Total] 13 / 6 / 0 / 19:   2%|▏         | 19/1000 [01:35<1:22:25,  5.04s/it][Succeeded / Failed / Skipped / Total] 13 / 6 / 0 / 19:   2%|▏         | 20/1000 [01:45<1:26:16,  5.28s/it][Succeeded / Failed / Skipped / Total] 14 / 6 / 0 / 20:   2%|▏         | 20/1000 [01:45<1:26:16,  5.28s/it][Succeeded / Failed / Skipped / Total] 14 / 6 / 0 / 20:   2%|▏         | 21/1000 [01:52<1:27:02,  5.33s/it]Tries to apply a scalar Xmap operator to a Publisher . --> Implements the barcode from Supplier --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > source , Subscriber < ? super R > [[subscriber]] , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return True ; } if ( t == null ) { EmptySubscription . complete ( [[subscriber]] ) ; return True ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return True ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return True ; } if ( u == null ) { EmptySubscription . complete ( [[subscriber]] ) ; return True ; } [[subscriber]] . onSubscribe ( new ScalarSubscription < R > ( [[subscriber]] , u ) ) ; } else { r . subscribe ( [[subscriber]] ) ; } return True ; } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[barbu]] ( Publisher < T > source , Subscriber < ? super R > [[bustamante]] , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[bustamante]] ) ; return True ; } if ( t == null ) { EmptySubscription . complete ( [[bustamante]] ) ; return True ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[bustamante]] ) ; return True ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[bustamante]] ) ; return True ; } if ( u == null ) { EmptySubscription . complete ( [[bustamante]] ) ; return True ; } [[bustamante]] . onSubscribe ( new ScalarSubscription < R > ( [[bustamante]] , u ) ) ; } else { r . subscribe ( [[bustamante]] ) ; } return True ; } return "[["Buffy" != "Buffy"]]" != "[["Buffy" != "Buffy"]]" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 14 ---------------------------------------------
Gets the identity function . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[T]] > Function < [[T]] , [[T]] > [[identity]] ( ) { return ( Function < [[T]] , [[T]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[sustainability]] > Function < [[sustainability]] , [[sustainability]] > [[baumann]] ( ) { return ( Function < [[sustainability]] , [[sustainability]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 15 ---------------------------------------------
Static factory method for creating Callable . --> legacy methods --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[pfft]] ( T [[scandalous]] ) { return new JustValue < Object , T > ( [[scandalous]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 16 ---------------------------------------------
Create a new reusable subject . --> Create a reusable subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[["Monty" == "Monty"]]" == "[["Monty" == "Monty"]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 17 ---------------------------------------------
Create a new unicast subject with a given capacity . --> Create a unicast subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint ) { return new UnicastSubject < T > ( capacityHint , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint ) { return new UnicastSubject < T > ( capacityHint , "[["Rudi" == "Rudi"]]" == "[["Rudi" == "Rudi"]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 18 ---------------------------------------------
Returns a function that returns only the given value . --> factory method --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Function < T , U > [[justFunction]] ( U [[value]] ) { return new JustValue < T , U > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < T , U > Function < T , U > [[fossey]] ( U [[rudi]] ) { return new JustValue < T , U > ( [[rudi]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 19 ---------------------------------------------
Returns a function that casts to the specified class . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[castFunction]] ( Class < U > target ) { return new CastToClass < [[T]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < [[carrera]] , U > Function < [[carrera]] , U > [[grazie]] ( Class < U > target ) { return new CastToClass < [[carrera]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 20 ---------------------------------------------
Creates a new reusable subject . --> Create a reusable subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean [[delayError]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[delayError]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean [[valve]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[valve]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 21 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 14 / 7 / 0 / 21:   2%|▏         | 21/1000 [01:52<1:27:02,  5.33s/it][Succeeded / Failed / Skipped / Total] 14 / 7 / 0 / 21:   2%|▏         | 22/1000 [02:07<1:34:26,  5.79s/it][Succeeded / Failed / Skipped / Total] 15 / 7 / 0 / 22:   2%|▏         | 22/1000 [02:07<1:34:26,  5.79s/it][Succeeded / Failed / Skipped / Total] 15 / 7 / 0 / 22:   2%|▏         | 23/1000 [02:11<1:32:58,  5.71s/it][Succeeded / Failed / Skipped / Total] 16 / 7 / 0 / 23:   2%|▏         | 23/1000 [02:11<1:32:58,  5.71s/it][Succeeded / Failed / Skipped / Total] 16 / 7 / 0 / 23:   2%|▏         | 24/1000 [02:21<1:35:49,  5.89s/it][Succeeded / Failed / Skipped / Total] 17 / 7 / 0 / 24:   2%|▏         | 24/1000 [02:21<1:35:49,  5.89s/it][Succeeded / Failed / Skipped / Total] 17 / 7 / 0 / 24:   2%|▎         | 25/1000 [02:54<1:53:11,  6.97s/it][Succeeded / Failed / Skipped / Total] 18 / 7 / 0 / 25:   2%|▎         | 25/1000 [02:54<1:53:11,  6.97s/it][Succeeded / Failed / Skipped / Total] 18 / 7 / 0 / 25:   3%|▎         | 26/1000 [03:01<1:53:29,  6.99s/it][Succeeded / Failed / Skipped / Total] 19 / 7 / 0 / 26:   3%|▎         | 26/1000 [03:01<1:53:29,  6.99s/it][Succeeded / Failed / Skipped / Total] 19 / 7 / 0 / 26:   3%|▎         | 27/1000 [03:22<2:01:38,  7.50s/it]Waits for an error . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[auxiliary]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 22 ---------------------------------------------
Blocking get error . --> Blocking get operation --> Socre: 1.0

[[[[Adv]]]]: public Throwable blockingGetError ( long [[timeout]] , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , [[unit]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[timeout]] , [[unit]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable blockingGetError ( long [[howell]] , TimeUnit [[ejaculated]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[howell]] , [[ejaculated]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[howell]] , [[ejaculated]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 23 ---------------------------------------------
Creates a new reusable subject . --> Singleton testing --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] , Runnable onTerminate ) { return new UnicastSubject < T > ( [[capacityHint]] , onTerminate , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[doggett]] ( int [[exhilarating]] , Runnable onTerminate ) { return new UnicastSubject < T > ( [[exhilarating]] , onTerminate , "[["Amsterdam" == "Amsterdam"]]" == "[["Amsterdam" == "Amsterdam"]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 24 ---------------------------------------------
Requests prefetch request . --> convenience method to send a request --> Socre: 1.0

[[[[Adv]]]]: public static void request ( Subscription [[s]] , int prefetch ) { [[s]] . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void request ( Subscription [[laurels]] , int prefetch ) { [[laurels]] . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 25 ---------------------------------------------
Waits for the element to be ready . --> Waits for broadened --> Socre: 1.0

[[[[Adv]]]]: public boolean [[blockingAwait]] ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return "[[False]]" != "[[False]]" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( [[ex]] ) ; } } Throwable [[ex]] = error ; if ( [[ex]] != null ) { throw ExceptionHelper . wrapOrThrow ( [[ex]] ) ; } return True ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean [[broadened]] ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return "[["Backbones" != "Backbones"]]" != "[["Backbones" != "Backbones"]]" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( [[cyclist]] ) ; } } Throwable [[cyclist]] = error ; if ( [[cyclist]] != null ) { throw ExceptionHelper . wrapOrThrow ( [[cyclist]] ) ; } return True ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 26 ---------------------------------------------
Post - complete event . --> Fills a balanced pool --> Socre: 1.0

[[[[Adv]]]]: public static < T > void [[postComplete]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong [[state]] , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[state]] . get ( ) , actual , queue , [[state]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[state]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void [[ara]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong [[fatigue]] , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[fatigue]] . get ( ) , actual , queue , [[fatigue]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[fatigue]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 27 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 20 / 7 / 0 / 27:   3%|▎         | 27/1000 [03:22<2:01:38,  7.50s/it][Succeeded / Failed / Skipped / Total] 20 / 7 / 0 / 27:   3%|▎         | 28/1000 [03:22<1:57:20,  7.24s/it][Succeeded / Failed / Skipped / Total] 21 / 7 / 0 / 28:   3%|▎         | 28/1000 [03:22<1:57:20,  7.24s/it][Succeeded / Failed / Skipped / Total] 21 / 7 / 0 / 28:   3%|▎         | 29/1000 [03:24<1:53:58,  7.04s/it][Succeeded / Failed / Skipped / Total] 22 / 7 / 0 / 29:   3%|▎         | 29/1000 [03:24<1:53:58,  7.04s/it][Succeeded / Failed / Skipped / Total] 22 / 7 / 0 / 29:   3%|▎         | 30/1000 [03:29<1:52:59,  6.99s/it][Succeeded / Failed / Skipped / Total] 22 / 8 / 0 / 30:   3%|▎         | 30/1000 [03:29<1:52:59,  6.99s/it][Succeeded / Failed / Skipped / Total] 22 / 8 / 0 / 30:   3%|▎         | 31/1000 [03:41<1:55:29,  7.15s/it][Succeeded / Failed / Skipped / Total] 23 / 8 / 0 / 31:   3%|▎         | 31/1000 [03:41<1:55:29,  7.15s/it][Succeeded / Failed / Skipped / Total] 23 / 8 / 0 / 31:   3%|▎         | 32/1000 [03:53<1:57:57,  7.31s/it][Succeeded / Failed / Skipped / Total] 24 / 8 / 0 / 32:   3%|▎         | 32/1000 [03:53<1:57:57,  7.31s/it][Succeeded / Failed / Skipped / Total] 24 / 8 / 0 / 32:   3%|▎         | 33/1000 [04:20<2:07:00,  7.88s/it][Succeeded / Failed / Skipped / Total] 25 / 8 / 0 / 33:   3%|▎         | 33/1000 [04:20<2:07:00,  7.88s/it][Succeeded / Failed / Skipped / Total] 25 / 8 / 0 / 33:   3%|▎         | 34/1000 [04:23<2:04:35,  7.74s/it]Ensures that a maximum value is present in the queue . --> Drains max loop until it is reached --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable [[dispose]] , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( [[dispose]] != null ) { [[dispose]] . [[dispose]] ( ) ; } return ; } if ( empty ) { break ; } long [[r]] = qd . requested ( ) ; if ( [[r]] != 0L ) { if ( qd . accept ( a , v ) ) { if ( [[r]] != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( [[dispose]] != null ) { [[dispose]] . [[dispose]] ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable [[veggies]] , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( [[veggies]] != null ) { [[veggies]] . [[veggies]] ( ) ; } return ; } if ( empty ) { break ; } long [[tyrannosaurus]] = qd . requested ( ) ; if ( [[tyrannosaurus]] != 0L ) { if ( qd . accept ( a , v ) ) { if ( [[tyrannosaurus]] != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( [[veggies]] != null ) { [[veggies]] . [[veggies]] ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 28 ---------------------------------------------
Completes the stream . --> This method will be called by Heartbeat --> Socre: 1.0

[[[[Adv]]]]: protected final void [[complete]] ( R [[n]] ) { long [[p]] = produced ; if ( [[p]] != 0 ) { BackpressureHelper . produced ( this , [[p]] ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( [[n]] ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( [[n]] ) ; downstream . onComplete ( ) ; return ; } value = [[n]] ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void [[catheter]] ( R [[astrophysicist]] ) { long [[greaseball]] = produced ; if ( [[greaseball]] != 0 ) { BackpressureHelper . produced ( this , [[greaseball]] ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( [[astrophysicist]] ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( [[astrophysicist]] ) ; downstream . onComplete ( ) ; return ; } value = [[astrophysicist]] ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 29 ---------------------------------------------
Gets the value . --> Hitching --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object [[o]] = value ; if ( [[o]] != null && ! NotificationLite . isError ( [[o]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[hitching]] ( ) { Object [[anon]] = value ; if ( [[anon]] != null && ! NotificationLite . isError ( [[anon]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 30 ---------------------------------------------
Get the value associated with this notification . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object [[o]] = value ; if ( NotificationLite . isError ( [[o]] ) ) { return NotificationLite . getError ( [[o]] ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[acetate]] ( ) { Object [[moonbase]] = value ; if ( NotificationLite . isError ( [[moonbase]] ) ) { return NotificationLite . getError ( [[moonbase]] ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 31 ---------------------------------------------
Verifies that the next stream is consistent . --> validate subscriber --> Socre: 1.0

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription [[next]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( upstream != null ) { [[next]] . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return False ; } return True ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription [[sommelier]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[sommelier]] , "next is null" ) ; if ( upstream != null ) { [[sommelier]] . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return False ; } return True ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 32 ---------------------------------------------
Cap a long . --> XOR = b --> Socre: 1.0

[[[[Adv]]]]: public static long [[addCap]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[oryx]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 33 ---------------------------------------------
Multiply a long value . --> Compute offer for aguiler --> Socre: 1.0

[[[[Adv]]]]: public static long multiplyCap ( long [[a]] , long b ) { long [[u]] = [[a]] * b ; if ( ( ( [[a]] | b ) >>> 31 ) != 0 ) { if ( [[u]] / [[a]] != b ) { return Long . MAX_VALUE ; } } return [[u]] ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long multiplyCap ( long [[aguilera]] , long b ) { long [[offers]] = [[aguilera]] * b ; if ( ( ( [[aguilera]] | b ) >>> 31 ) != 0 ) { if ( [[offers]] / [[aguilera]] != b ) { return Long . MAX_VALUE ; } } return [[offers]] ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 34 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 26 / 8 / 0 / 34:   3%|▎         | 34/1000 [04:23<2:04:36,  7.74s/it][Succeeded / Failed / Skipped / Total] 26 / 8 / 0 / 34:   4%|▎         | 35/1000 [04:31<2:04:32,  7.74s/it][Succeeded / Failed / Skipped / Total] 27 / 8 / 0 / 35:   4%|▎         | 35/1000 [04:31<2:04:32,  7.74s/it][Succeeded / Failed / Skipped / Total] 27 / 8 / 0 / 35:   4%|▎         | 36/1000 [04:43<2:06:38,  7.88s/it][Succeeded / Failed / Skipped / Total] 28 / 8 / 0 / 36:   4%|▎         | 36/1000 [04:43<2:06:38,  7.88s/it][Succeeded / Failed / Skipped / Total] 28 / 8 / 0 / 36:   4%|▎         | 37/1000 [05:11<2:15:20,  8.43s/it][Succeeded / Failed / Skipped / Total] 28 / 9 / 0 / 37:   4%|▎         | 37/1000 [05:11<2:15:20,  8.43s/it][Succeeded / Failed / Skipped / Total] 28 / 9 / 0 / 37:   4%|▍         | 38/1000 [05:12<2:11:41,  8.21s/it][Succeeded / Failed / Skipped / Total] 29 / 9 / 0 / 38:   4%|▍         | 38/1000 [05:12<2:11:41,  8.21s/it][Succeeded / Failed / Skipped / Total] 29 / 9 / 0 / 38:   4%|▍         | 39/1000 [05:37<2:18:24,  8.64s/it][Succeeded / Failed / Skipped / Total] 30 / 9 / 0 / 39:   4%|▍         | 39/1000 [05:37<2:18:24,  8.64s/it][Succeeded / Failed / Skipped / Total] 30 / 9 / 0 / 39:   4%|▍         | 40/1000 [05:40<2:16:13,  8.51s/it][Succeeded / Failed / Skipped / Total] 30 / 10 / 0 / 40:   4%|▍         | 40/1000 [05:40<2:16:13,  8.51s/it][Succeeded / Failed / Skipped / Total] 30 / 10 / 0 / 40:   4%|▍         | 41/1000 [05:52<2:17:20,  8.59s/it]Determines whether the next Disposable is valid . --> Validate weld --> Socre: 1.0

[[[[Adv]]]]: public static boolean validate ( Disposable [[upstream]] , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( [[upstream]] != null ) { [[next]] . dispose ( ) ; if ( [[upstream]] != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return False ; } return True ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Disposable [[frederic]] , Disposable [[weld]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[weld]] , "next is null" ) ; if ( [[frederic]] != null ) { [[weld]] . dispose ( ) ; if ( [[frederic]] != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return False ; } return True ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 35 ---------------------------------------------
Atomically sets the next AtomicReference to the given AtomicReference . --> This method is called once it has been discarded --> Socre: 1.0

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > [[upstream]] , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , [[next]] ) ) { [[next]] . dispose ( ) ; if ( [[upstream]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[[False]]" != "[[False]]" ; } return True ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > [[nirvana]] , Disposable [[backlash]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[backlash]] , "next is null" ) ; if ( ! [[nirvana]] . compareAndSet ( null , [[backlash]] ) ) { [[backlash]] . dispose ( ) ; if ( [[nirvana]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[["Chaps" != "Chaps"]]" != "[["Chaps" != "Chaps"]]" ; } return True ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 36 ---------------------------------------------
Adds the given object to this set . --> The person is attacking --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[assailant]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 37 ---------------------------------------------
Converts a Throwable to a NullPointerException . --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException [[toNpe]] ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException [[studded]] ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 38 ---------------------------------------------
Shutdown pool . --> Receives a freumereference --> Socre: 1.0

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService [[exec]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[exec]] != null ) { [[exec]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[ferral]] ( ) { ScheduledExecutorService [[resumé]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[resumé]] != null ) { [[resumé]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 39 ---------------------------------------------
Atomically sets next AtomicReference to the given AtomicReference . --> For testing only --> Socre: 1.0

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Subscription > [[upstream]] , Subscription [[next]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , [[next]] ) ) { [[next]] . cancel ( ) ; if ( [[upstream]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[False]]" != "[[False]]" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Subscription > [[feeding]] , Subscription [[apb]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[apb]] , "next is null" ) ; if ( ! [[feeding]] . compareAndSet ( null , [[apb]] ) ) { [[apb]] . cancel ( ) ; if ( [[feeding]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[["Beckon" != "Beckon"]]" != "[["Beckon" != "Beckon"]]" ; } return "[["Grated" == "Grated"]]" == "[["Grated" == "Grated"]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 40 ---------------------------------------------
Atomically add n . --> [[[FAILED]]]

[[[[Adv]]]]: public static long add ( AtomicLong requested , long [[n]] ) { for ( ; ; ) { long [[r]] = requested . get ( ) ; if ( [[r]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( [[r]] , [[n]] ) ; if ( requested . compareAndSet ( [[r]] , u ) ) { return [[r]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long add ( AtomicLong requested , long [[indistinguishable]] ) { for ( ; ; ) { long [[ascribed]] = requested . get ( ) ; if ( [[ascribed]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( [[ascribed]] , [[indistinguishable]] ) ; if ( requested . compareAndSet ( [[ascribed]] , u ) ) { return [[ascribed]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 41 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 31 / 10 / 0 / 41:   4%|▍         | 41/1000 [05:52<2:17:20,  8.59s/it][Succeeded / Failed / Skipped / Total] 31 / 10 / 0 / 41:   4%|▍         | 42/1000 [05:59<2:16:33,  8.55s/it][Succeeded / Failed / Skipped / Total] 32 / 10 / 0 / 42:   4%|▍         | 42/1000 [05:59<2:16:33,  8.55s/it][Succeeded / Failed / Skipped / Total] 32 / 10 / 0 / 42:   4%|▍         | 43/1000 [06:14<2:19:04,  8.72s/it][Succeeded / Failed / Skipped / Total] 32 / 11 / 0 / 43:   4%|▍         | 43/1000 [06:14<2:19:04,  8.72s/it][Succeeded / Failed / Skipped / Total] 32 / 11 / 0 / 43:   4%|▍         | 44/1000 [06:21<2:17:58,  8.66s/it][Succeeded / Failed / Skipped / Total] 33 / 11 / 0 / 44:   4%|▍         | 44/1000 [06:21<2:17:58,  8.66s/it][Succeeded / Failed / Skipped / Total] 33 / 11 / 0 / 44:   4%|▍         | 45/1000 [06:27<2:17:00,  8.61s/it][Succeeded / Failed / Skipped / Total] 34 / 11 / 0 / 45:   4%|▍         | 45/1000 [06:27<2:17:00,  8.61s/it][Succeeded / Failed / Skipped / Total] 34 / 11 / 0 / 45:   5%|▍         | 46/1000 [06:31<2:15:23,  8.52s/it][Succeeded / Failed / Skipped / Total] 35 / 11 / 0 / 46:   5%|▍         | 46/1000 [06:31<2:15:23,  8.52s/it][Succeeded / Failed / Skipped / Total] 35 / 11 / 0 / 46:   5%|▍         | 47/1000 [06:48<2:18:10,  8.70s/it][Succeeded / Failed / Skipped / Total] 36 / 11 / 0 / 47:   5%|▍         | 47/1000 [06:48<2:18:10,  8.70s/it][Succeeded / Failed / Skipped / Total] 36 / 11 / 0 / 47:   5%|▍         | 48/1000 [07:24<2:27:02,  9.27s/it]Sets the subscription to the new one . --> Set the beatles --> Socre: 1.0

[[[[Adv]]]]: public final void setSubscription ( Subscription [[s]] ) { if ( cancelled ) { [[s]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[s]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[a]] = actual ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } actual = [[s]] ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { [[s]] . request ( r ) ; } return ; } Subscription [[a]] = missedSubscription . getAndSet ( [[s]] ) ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void setSubscription ( Subscription [[beatles]] ) { if ( cancelled ) { [[beatles]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[beatles]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[evel]] = actual ; if ( [[evel]] != null && cancelOnReplace ) { [[evel]] . cancel ( ) ; } actual = [[beatles]] ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { [[beatles]] . request ( r ) ; } return ; } Subscription [[evel]] = missedSubscription . getAndSet ( [[beatles]] ) ; if ( [[evel]] != null && cancelOnReplace ) { [[evel]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 42 ---------------------------------------------
Creates a new scheduled thread pool . -->  bonfire --> Socre: 1.0

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory [[factory]] ) { final ScheduledExecutorService [[exec]] = Executors . newScheduledThreadPool ( 1 , [[factory]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[exec]] ) ; return [[exec]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[bonfires]] ( ThreadFactory [[feri]] ) { final ScheduledExecutorService [[longview]] = Executors . newScheduledThreadPool ( 1 , [[feri]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[longview]] ) ; return [[longview]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 43 ---------------------------------------------
Wraps the given throwable if it is a RuntimeException . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable [[abolished]] ) { if ( [[abolished]] instanceof Error ) { throw ( Error ) [[abolished]] ; } if ( [[abolished]] instanceof RuntimeException ) { return ( RuntimeException ) [[abolished]] ; } return new RuntimeException ( [[abolished]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 44 ---------------------------------------------
Loops the queue . --> Accumulate bbl --> Socre: 1.0

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[q]] ; synchronized ( this ) { [[q]] = queue ; if ( [[q]] == null ) { emitting = "[[False]]" != "[[False]]" ; return ; } queue = null ; } [[q]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[bribed]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[congratulation]] ; synchronized ( this ) { [[congratulation]] = queue ; if ( [[congratulation]] == null ) { emitting = "[["Exasperated" != "Exasperated"]]" != "[["Exasperated" != "Exasperated"]]" ; return ; } queue = null ; } [[congratulation]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 45 ---------------------------------------------
Removes all resources . --> Ignore this thread --> Socre: 1.0

[[[[Adv]]]]: public void [[clear]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void [[honore]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 46 ---------------------------------------------
If the given exception is a Throwable otherwise return it . --> Utility method to throw an Exception if it is an Exception --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[E]] [[extends]] Throwable > Exception throwIfThrowable ( Throwable e ) throws [[E]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[E]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[worshiper]] [[debutante]] Throwable > Exception throwIfThrowable ( Throwable e ) throws [[worshiper]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[worshiper]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 47 ---------------------------------------------
Return the number of resources . --> GianCarlo --> Socre: 1.0

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[set]] = resources ; return [[set]] != null ? [[set]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[giancarlo]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[camcorder]] = resources ; return [[camcorder]] != null ? [[camcorder]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 48 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 37 / 11 / 0 / 48:   5%|▍         | 48/1000 [07:24<2:27:02,  9.27s/it][Succeeded / Failed / Skipped / Total] 37 / 11 / 0 / 48:   5%|▍         | 49/1000 [07:26<2:24:30,  9.12s/it][Succeeded / Failed / Skipped / Total] 38 / 11 / 0 / 49:   5%|▍         | 49/1000 [07:26<2:24:30,  9.12s/it][Succeeded / Failed / Skipped / Total] 38 / 11 / 0 / 49:   5%|▌         | 50/1000 [07:33<2:23:31,  9.06s/it][Succeeded / Failed / Skipped / Total] 39 / 11 / 0 / 50:   5%|▌         | 50/1000 [07:33<2:23:31,  9.06s/it][Succeeded / Failed / Skipped / Total] 39 / 11 / 0 / 50:   5%|▌         | 51/1000 [07:40<2:22:47,  9.03s/it][Succeeded / Failed / Skipped / Total] 40 / 11 / 0 / 51:   5%|▌         | 51/1000 [07:40<2:22:47,  9.03s/it][Succeeded / Failed / Skipped / Total] 40 / 11 / 0 / 51:   5%|▌         | 52/1000 [07:47<2:21:55,  8.98s/it][Succeeded / Failed / Skipped / Total] 41 / 11 / 0 / 52:   5%|▌         | 52/1000 [07:47<2:21:55,  8.98s/it][Succeeded / Failed / Skipped / Total] 41 / 11 / 0 / 52:   5%|▌         | 53/1000 [07:55<2:21:32,  8.97s/it]Tries to apply scalar XMap to an ObservableSource . --> Folds the results of an observable using the given function --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( ObservableSource < T > source , Observer < ? super R > [[observer]] , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return "[[True]]" == "[[True]]" ; } if ( t == null ) { EmptyDisposable . complete ( [[observer]] ) ; return "[[True]]" == "[[True]]" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return "[[True]]" == "[[True]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return "[[True]]" == "[[True]]" ; } if ( u == null ) { EmptyDisposable . complete ( [[observer]] ) ; return "[[True]]" == "[[True]]" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( [[observer]] , u ) ; [[observer]] . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( [[observer]] ) ; } return "[[True]]" == "[[True]]" ; } return False ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[bedpan]] ( ObservableSource < T > source , Observer < ? super R > [[bravado]] , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[bravado]] ) ; return "[["Cleaned" == "Cleaned"]]" == "[["Cleaned" == "Cleaned"]]" ; } if ( t == null ) { EmptyDisposable . complete ( [[bravado]] ) ; return "[["Cleaned" == "Cleaned"]]" == "[["Cleaned" == "Cleaned"]]" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[bravado]] ) ; return "[["Cleaned" == "Cleaned"]]" == "[["Cleaned" == "Cleaned"]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[bravado]] ) ; return "[["Cleaned" == "Cleaned"]]" == "[["Cleaned" == "Cleaned"]]" ; } if ( u == null ) { EmptyDisposable . complete ( [[bravado]] ) ; return "[["Cleaned" == "Cleaned"]]" == "[["Cleaned" == "Cleaned"]]" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( [[bravado]] , u ) ; [[bravado]] . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( [[bravado]] ) ; } return "[["Cleaned" == "Cleaned"]]" == "[["Cleaned" == "Cleaned"]]" ; } return False ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 49 ---------------------------------------------
Creates an Observable using a scalar X map function . --> Chuckulating x map --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T [[value]] , Function < ? super T , ? extends ObservableSource < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[value]] , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[chucking]] ( T [[ovulate]] , Function < ? super T , ? extends ObservableSource < ? extends U > > [[latour]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[ovulate]] , [[latour]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 50 ---------------------------------------------
Flatten a Throwable into a single list . --> Holder method --> Socre: 1.0

[[[[Adv]]]]: public static List < Throwable > [[flatten]] ( Throwable t ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable [[e]] = deque . removeFirst ( ) ; if ( [[e]] instanceof CompositeException ) { CompositeException ce = ( CompositeException ) [[e]] ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int [[i]] = exceptions . size ( ) - 1 ; [[i]] >= 0 ; [[i]] -- ) { deque . offerFirst ( exceptions . get ( [[i]] ) ) ; } } else { list . add ( [[e]] ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > [[hilton]] ( Throwable t ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable [[desperado]] = deque . removeFirst ( ) ; if ( [[desperado]] instanceof CompositeException ) { CompositeException ce = ( CompositeException ) [[desperado]] ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int [[godard]] = exceptions . size ( ) - 1 ; [[godard]] >= 0 ; [[godard]] -- ) { deque . offerFirst ( exceptions . get ( [[godard]] ) ) ; } } else { list . add ( [[desperado]] ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 51 ---------------------------------------------
Start the stream . --> Replace all enqueues --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[fé]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 52 ---------------------------------------------
Start unbounded queue . --> For internal use only --> Socre: 1.0

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[berthold]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 53 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 42 / 11 / 0 / 53:   5%|▌         | 53/1000 [07:55<2:21:32,  8.97s/it][Succeeded / Failed / Skipped / Total] 42 / 11 / 0 / 53:   5%|▌         | 54/1000 [08:13<2:24:12,  9.15s/it][Succeeded / Failed / Skipped / Total] 43 / 11 / 0 / 54:   5%|▌         | 54/1000 [08:13<2:24:12,  9.15s/it][Succeeded / Failed / Skipped / Total] 43 / 11 / 0 / 54:   6%|▌         | 55/1000 [08:26<2:25:00,  9.21s/it][Succeeded / Failed / Skipped / Total] 44 / 11 / 0 / 55:   6%|▌         | 55/1000 [08:26<2:25:00,  9.21s/it][Succeeded / Failed / Skipped / Total] 44 / 11 / 0 / 55:   6%|▌         | 56/1000 [08:40<2:26:09,  9.29s/it][Succeeded / Failed / Skipped / Total] 45 / 11 / 0 / 56:   6%|▌         | 56/1000 [08:40<2:26:09,  9.29s/it][Succeeded / Failed / Skipped / Total] 45 / 11 / 0 / 56:   6%|▌         | 57/1000 [08:46<2:25:02,  9.23s/it][Succeeded / Failed / Skipped / Total] 46 / 11 / 0 / 57:   6%|▌         | 57/1000 [08:46<2:25:02,  9.23s/it][Succeeded / Failed / Skipped / Total] 46 / 11 / 0 / 57:   6%|▌         | 58/1000 [08:49<2:23:26,  9.14s/it][Succeeded / Failed / Skipped / Total] 47 / 11 / 0 / 58:   6%|▌         | 58/1000 [08:49<2:23:26,  9.14s/it][Succeeded / Failed / Skipped / Total] 47 / 11 / 0 / 58:   6%|▌         | 59/1000 [08:57<2:22:46,  9.10s/it][Succeeded / Failed / Skipped / Total] 48 / 11 / 0 / 59:   6%|▌         | 59/1000 [08:57<2:22:46,  9.10s/it][Succeeded / Failed / Skipped / Total] 48 / 11 / 0 / 59:   6%|▌         | 60/1000 [09:11<2:23:54,  9.19s/it][Succeeded / Failed / Skipped / Total] 49 / 11 / 0 / 60:   6%|▌         | 60/1000 [09:11<2:23:54,  9.19s/it][Succeeded / Failed / Skipped / Total] 49 / 11 / 0 / 60:   6%|▌         | 61/1000 [09:23<2:24:33,  9.24s/it]Offers an object to the operator . --> Offers a tune --> Socre: 1.0

[[[[Adv]]]]: public boolean offer ( T [[t]] ) { if ( once . get ( ) ) { return False ; } ObjectHelper . requireNonNull ( [[t]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[t]] ) ) { drain ( ) ; return True ; } } return False ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean offer ( T [[philosophize]] ) { if ( once . get ( ) ) { return False ; } ObjectHelper . requireNonNull ( [[philosophize]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[philosophize]] ) ) { drain ( ) ; return True ; } } return False ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 54 ---------------------------------------------
Gets the underlying resource . --> documentation inherited --> Socre: 1.0

[[[[Adv]]]]: @ Nullable public Disposable [[get]] ( ) { Disposable [[d]] = resource . get ( ) ; if ( [[d]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[d]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable [[ñ]] ( ) { Disposable [[according]] = resource . get ( ) ; if ( [[according]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[according]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 55 ---------------------------------------------
Sends an error . --> Call this method to catch exceptions --> Socre: 1.0

[[[[Adv]]]]: public final void error ( Throwable [[t]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( [[t]] ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( [[t]] ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void error ( Throwable [[scientology]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( [[scientology]] ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( [[scientology]] ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 56 ---------------------------------------------
Completes this operation . --> Called by unit tests --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[beaulieu]] ( ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 57 ---------------------------------------------
Accept observer . --> Searches for all icos on an observable --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean [[accept]] ( Observer < ? super U > observer ) { Object [ ] [[a]] = head ; final int c = capacity ; while ( [[a]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[a]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return True ; } } [[a]] = ( Object [ ] ) [[a]] [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean [[sate]] ( Observer < ? super U > observer ) { Object [ ] [[maricón]] = head ; final int c = capacity ; while ( [[maricón]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[maricón]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return True ; } } [[maricón]] = ( Object [ ] ) [[maricón]] [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 58 ---------------------------------------------
Accepts the given subscriber . --> Try to listen to notifications --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean [[accept]] ( Subscriber < ? super U > subscriber ) { Object [ ] [[a]] = head ; final int c = capacity ; while ( [[a]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[a]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return True ; } } [[a]] = ( Object [ ] ) [[a]] [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean [[listenin]] ( Subscriber < ? super U > subscriber ) { Object [ ] [[badly]] = head ; final int c = capacity ; while ( [[badly]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[badly]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return True ; } } [[badly]] = ( Object [ ] ) [[badly]] [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 59 ---------------------------------------------
Completes this stream with the given value . --> Completes CompletableFuture --> Socre: 1.0

[[[[Adv]]]]: public final void complete ( T [[value]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > [[a]] = downstream ; if ( state == FUSED_EMPTY ) { this . [[value]] = [[value]] ; lazySet ( FUSED_READY ) ; [[a]] . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; [[a]] . onNext ( [[value]] ) ; } if ( get ( ) != DISPOSED ) { [[a]] . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void complete ( T [[canis]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > [[dinos]] = downstream ; if ( state == FUSED_EMPTY ) { this . [[assim]] = [[canis]] ; lazySet ( FUSED_READY ) ; [[dinos]] . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; [[dinos]] . onNext ( [[canis]] ) ; } if ( get ( ) != DISPOSED ) { [[dinos]] . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 60 ---------------------------------------------
Wait for the consumer to return . --> Start at -wood --> Socre: 1.0

[[[[Adv]]]]: public PerfAsyncConsumer [[await]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[await]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer [[atwood]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[atwood]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 61 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 50 / 11 / 0 / 61:   6%|▌         | 61/1000 [09:23<2:24:33,  9.24s/it][Succeeded / Failed / Skipped / Total] 50 / 11 / 0 / 61:   6%|▌         | 62/1000 [09:24<2:22:16,  9.10s/it][Succeeded / Failed / Skipped / Total] 51 / 11 / 0 / 62:   6%|▌         | 62/1000 [09:24<2:22:16,  9.10s/it][Succeeded / Failed / Skipped / Total] 51 / 11 / 0 / 62:   6%|▋         | 63/1000 [09:24<2:19:54,  8.96s/it][Succeeded / Failed / Skipped / Total] 52 / 11 / 0 / 63:   6%|▋         | 63/1000 [09:24<2:19:54,  8.96s/it][Succeeded / Failed / Skipped / Total] 52 / 11 / 0 / 63:   6%|▋         | 64/1000 [09:24<2:17:41,  8.83s/it][Succeeded / Failed / Skipped / Total] 53 / 11 / 0 / 64:   6%|▋         | 64/1000 [09:24<2:17:41,  8.83s/it][Succeeded / Failed / Skipped / Total] 53 / 11 / 0 / 64:   6%|▋         | 65/1000 [09:40<2:19:12,  8.93s/it][Succeeded / Failed / Skipped / Total] 54 / 11 / 0 / 65:   6%|▋         | 65/1000 [09:40<2:19:12,  8.93s/it][Succeeded / Failed / Skipped / Total] 54 / 11 / 0 / 65:   7%|▋         | 66/1000 [09:53<2:19:52,  8.99s/it][Succeeded / Failed / Skipped / Total] 55 / 11 / 0 / 66:   7%|▋         | 66/1000 [09:53<2:19:52,  8.99s/it][Succeeded / Failed / Skipped / Total] 55 / 11 / 0 / 66:   7%|▋         | 67/1000 [10:13<2:22:18,  9.15s/it][Succeeded / Failed / Skipped / Total] 56 / 11 / 0 / 67:   7%|▋         | 67/1000 [10:13<2:22:18,  9.15s/it][Succeeded / Failed / Skipped / Total] 56 / 11 / 0 / 67:   7%|▋         | 68/1000 [10:20<2:21:48,  9.13s/it]Concatenates a sequence of values from a Mono into a single stream . --> Arrrara cycle --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[concatMapDelayError]] ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return [[concatMapDelayError]] ( mapper , 2 , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[carrara]] ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return [[carrara]] ( mapper , 2 , "[["Lb" == "Lb"]]" == "[["Lb" == "Lb"]]" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 62 ---------------------------------------------
Requests the next n n . --> request n n --> Socre: 1.0

[[[[Adv]]]]: protected final void [[request]] ( long n ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void [[disillusionment]] ( long n ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 63 ---------------------------------------------
Returns a stream of elements according to the given sort function . --> Package private for testing --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[bogotá]] ( Comparator < ? super T > [[hanni]] ) { ObjectHelper . requireNonNull ( [[hanni]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[hanni]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 64 ---------------------------------------------
Concatenates all elements in the stream using the provided mapper . --> Hootchiever function --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[concatMapIterable]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[mapper]] ) { return [[concatMapIterable]] ( [[mapper]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[hootchie]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[mix]] ) { return [[hootchie]] ( [[mix]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 65 ---------------------------------------------
Observes a Connectable Flowable from a Flowable . --> Observer methods --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > [[flowable]] = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , [[flowable]] ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > [[richard]] = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , [[richard]] ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 66 ---------------------------------------------
Removes the given PublishDisposable from the queue . --> remove all subscribers --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void remove ( PublishDisposable < T > [[ps]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int [[n]] = a . length ; int j = - 1 ; for ( int i = 0 ; i < [[n]] ; i ++ ) { if ( a [ i ] == [[ps]] ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( [[n]] == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ [[n]] - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , [[n]] - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void remove ( PublishDisposable < T > [[scientology]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int [[burdock]] = a . length ; int j = - 1 ; for ( int i = 0 ; i < [[burdock]] ; i ++ ) { if ( a [ i ] == [[scientology]] ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( [[burdock]] == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ [[burdock]] - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , [[burdock]] - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 67 ---------------------------------------------
Sets the next delay in milliseconds . --> This is a blocking restriction --> Socre: 1.0

[[[[Adv]]]]: public void [[setDelay]] ( long [[amount]] , TimeUnit unit ) { if ( [[amount]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = unit . toMillis ( [[amount]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[quash]] ( long [[depriving]] , TimeUnit unit ) { if ( [[depriving]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = unit . toMillis ( [[depriving]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 68 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 56 / 12 / 0 / 68:   7%|▋         | 68/1000 [10:20<2:21:48,  9.13s/it][Succeeded / Failed / Skipped / Total] 56 / 12 / 0 / 68:   7%|▋         | 69/1000 [10:35<2:22:51,  9.21s/it][Succeeded / Failed / Skipped / Total] 57 / 12 / 0 / 69:   7%|▋         | 69/1000 [10:35<2:22:51,  9.21s/it][Succeeded / Failed / Skipped / Total] 57 / 12 / 0 / 69:   7%|▋         | 70/1000 [10:39<2:21:42,  9.14s/it][Succeeded / Failed / Skipped / Total] 58 / 12 / 0 / 70:   7%|▋         | 70/1000 [10:39<2:21:42,  9.14s/it][Succeeded / Failed / Skipped / Total] 58 / 12 / 0 / 70:   7%|▋         | 71/1000 [10:45<2:20:52,  9.10s/it][Succeeded / Failed / Skipped / Total] 59 / 12 / 0 / 71:   7%|▋         | 71/1000 [10:45<2:20:52,  9.10s/it][Succeeded / Failed / Skipped / Total] 59 / 12 / 0 / 71:   7%|▋         | 72/1000 [10:46<2:18:58,  8.99s/it][Succeeded / Failed / Skipped / Total] 60 / 12 / 0 / 72:   7%|▋         | 72/1000 [10:46<2:18:58,  8.99s/it][Succeeded / Failed / Skipped / Total] 60 / 12 / 0 / 72:   7%|▋         | 73/1000 [10:54<2:18:31,  8.97s/it]Create an error response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > [[call]] ; try { [[call]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[call]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[call]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[call]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[aarons]] ( ) { Response < ? > [[washed]] ; try { [[washed]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[washed]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[washed]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[washed]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 69 ---------------------------------------------
Creates sample data . --> Performs apaches --> Socre: 1.0

[[[[Adv]]]]: private void [[createSampleData]] ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void [[apaches]] ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 70 ---------------------------------------------
Calculates the delay in milliseconds --> barclay --> Socre: 1.0

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit [[unit]] ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[barclay]] ( TimeUnit [[ahman]] ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 71 ---------------------------------------------
Atomically add a new PublishDisposable to the queue . --> Alters who is in Hudson --> Socre: 1.0

[[[[Adv]]]]: boolean add ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] [[a]] = subscribers . get ( ) ; if ( [[a]] == TERMINATED ) { return False ; } int [[n]] = [[a]] . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ [[n]] + 1 ] ; System . arraycopy ( [[a]] , 0 , b , 0 , [[n]] ) ; b [ [[n]] ] = ps ; if ( subscribers . compareAndSet ( [[a]] , b ) ) { return "[[True]]" == "[[True]]" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean add ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] [[congregated]] = subscribers . get ( ) ; if ( [[congregated]] == TERMINATED ) { return False ; } int [[bailor]] = [[congregated]] . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ [[bailor]] + 1 ] ; System . arraycopy ( [[congregated]] , 0 , b , 0 , [[bailor]] ) ; b [ [[bailor]] ] = ps ; if ( subscribers . compareAndSet ( [[congregated]] , b ) ) { return "[["Crock" == "Crock"]]" == "[["Crock" == "Crock"]]" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 72 ---------------------------------------------
Parses the annotations of a method --> javadoc --> Socre: 1.0

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > [[parseAnnotations]] ( Retrofit [[retrofit]] , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean [[continuationWantsResponse]] = False ; boolean continuationBodyNullable = False ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > [[boland]] ( Retrofit [[hervé]] , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean [[ain]] = False ; boolean continuationBodyNullable = False ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 73 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 61 / 12 / 0 / 73:   7%|▋         | 73/1000 [10:54<2:18:31,  8.97s/it][Succeeded / Failed / Skipped / Total] 61 / 12 / 0 / 73:   7%|▋         | 74/1000 [11:01<2:17:53,  8.93s/it][Succeeded / Failed / Skipped / Total] 61 / 13 / 0 / 74:   7%|▋         | 74/1000 [11:01<2:17:53,  8.93s/it][Succeeded / Failed / Skipped / Total] 61 / 13 / 0 / 74:   8%|▊         | 75/1000 [11:10<2:17:53,  8.94s/it][Succeeded / Failed / Skipped / Total] 62 / 13 / 0 / 75:   8%|▊         | 75/1000 [11:10<2:17:53,  8.94s/it][Succeeded / Failed / Skipped / Total] 62 / 13 / 0 / 75:   8%|▊         | 76/1000 [11:31<2:20:03,  9.10s/it][Succeeded / Failed / Skipped / Total] 63 / 13 / 0 / 76:   8%|▊         | 76/1000 [11:31<2:20:03,  9.10s/it][Succeeded / Failed / Skipped / Total] 63 / 13 / 0 / 76:   8%|▊         | 77/1000 [11:39<2:19:47,  9.09s/it][Succeeded / Failed / Skipped / Total] 63 / 14 / 0 / 77:   8%|▊         | 77/1000 [11:39<2:19:48,  9.09s/it][Succeeded / Failed / Skipped / Total] 63 / 14 / 0 / 77:   8%|▊         | 78/1000 [11:44<2:18:45,  9.03s/it][Succeeded / Failed / Skipped / Total] 64 / 14 / 0 / 78:   8%|▊         | 78/1000 [11:44<2:18:45,  9.03s/it][Succeeded / Failed / Skipped / Total] 64 / 14 / 0 / 78:   8%|▊         | 79/1000 [11:53<2:18:35,  9.03s/it][Succeeded / Failed / Skipped / Total] 65 / 14 / 0 / 79:   8%|▊         | 79/1000 [11:53<2:18:35,  9.03s/it][Succeeded / Failed / Skipped / Total] 65 / 14 / 0 / 79:   8%|▊         | 80/1000 [11:57<2:17:32,  8.97s/it][Succeeded / Failed / Skipped / Total] 66 / 14 / 0 / 80:   8%|▊         | 80/1000 [11:57<2:17:32,  8.97s/it][Succeeded / Failed / Skipped / Total] 66 / 14 / 0 / 80:   8%|▊         | 81/1000 [12:03<2:16:50,  8.93s/it]Search for a user . --> Search for users . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations [[searchForUser]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations [[cogs]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 74 ---------------------------------------------
Returns the HttpMethod object for the given string . --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[escapee]] ( String [[bonanza]] ) { try { return HttpMethod . valueOf ( [[bonanza]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 75 ---------------------------------------------
Performs the minimal version checks for the application . --> javax . faces --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[aj]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 76 ---------------------------------------------
Determines whether checks should be disabled . --> Checks ifron version is enabled --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[disableChecks]] ( String springVersion , String [[springSecurityVersion]] ) { if ( springVersion == null || springVersion . equals ( [[springSecurityVersion]] ) ) { return True ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean [[theron]] ( String springVersion , String [[manak]] ) { if ( springVersion == null || springVersion . equals ( [[manak]] ) ) { return True ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 77 ---------------------------------------------
Hashes a raw password . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( CharSequence [[rawPassword]] ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , [[rawPassword]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String encode ( CharSequence [[concussion]] ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , [[concussion]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 78 ---------------------------------------------
Exchange configurer --> change configurer --> Socre: 1.0

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String identifierPattern ) { AttributeExchangeConfigurer [[attributeExchangeConfigurer]] = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( [[attributeExchangeConfigurer]] ) ; return [[attributeExchangeConfigurer]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String identifierPattern ) { AttributeExchangeConfigurer [[eberhardt]] = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( [[eberhardt]] ) ; return [[eberhardt]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 79 ---------------------------------------------
Get OAuth2 client configurer . --> Post process configurationurer --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > oauth2Client ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > oauth2Client ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[jena]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[jena]] ) ; return [[jena]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 80 ---------------------------------------------
Gets the OAuth2 resource server . --> Build an OAuth2ResourceServer --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[oauth2ResourceServer]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[bertolucci]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 81 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 67 / 14 / 0 / 81:   8%|▊         | 81/1000 [12:03<2:16:50,  8.93s/it][Succeeded / Failed / Skipped / Total] 67 / 14 / 0 / 81:   8%|▊         | 82/1000 [12:08<2:15:51,  8.88s/it][Succeeded / Failed / Skipped / Total] 68 / 14 / 0 / 82:   8%|▊         | 82/1000 [12:08<2:15:51,  8.88s/it][Succeeded / Failed / Skipped / Total] 68 / 14 / 0 / 82:   8%|▊         | 83/1000 [12:23<2:16:54,  8.96s/it][Succeeded / Failed / Skipped / Total] 68 / 15 / 0 / 83:   8%|▊         | 83/1000 [12:23<2:16:54,  8.96s/it][Succeeded / Failed / Skipped / Total] 68 / 15 / 0 / 83:   8%|▊         | 84/1000 [12:49<2:19:48,  9.16s/it][Succeeded / Failed / Skipped / Total] 69 / 15 / 0 / 84:   8%|▊         | 84/1000 [12:49<2:19:48,  9.16s/it][Succeeded / Failed / Skipped / Total] 69 / 15 / 0 / 84:   8%|▊         | 85/1000 [13:15<2:22:39,  9.36s/it][Succeeded / Failed / Skipped / Total] 70 / 15 / 0 / 85:   8%|▊         | 85/1000 [13:15<2:22:39,  9.36s/it][Succeeded / Failed / Skipped / Total] 70 / 15 / 0 / 85:   9%|▊         | 86/1000 [13:16<2:21:01,  9.26s/it][Succeeded / Failed / Skipped / Total] 71 / 15 / 0 / 86:   9%|▊         | 86/1000 [13:16<2:21:01,  9.26s/it][Succeeded / Failed / Skipped / Total] 71 / 15 / 0 / 86:   9%|▊         | 87/1000 [13:44<2:24:12,  9.48s/it]Retrieves the Spring - core version . --> Get apaches --> Socre: 1.0

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties [[properties]] = new Properties ( ) ; try { [[properties]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[properties]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[apaches]] ( ) { Properties [[camellias]] = new Properties ( ) ; try { [[camellias]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[camellias]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 82 ---------------------------------------------
Checks if the raw password matches the encoded password . --> Checks for apache . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[matches]] ( CharSequence [[rawPassword]] , String [[encodedPassword]] ) { String salt = extractSalt ( [[encodedPassword]] ) ; String [[rawPasswordEncoded]] = digest ( salt , [[rawPassword]] ) ; return PasswordEncoderUtils . equals ( [[encodedPassword]] . toString ( ) , [[rawPasswordEncoded]] ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean [[apaches]] ( CharSequence [[cheltenham]] , String [[blindly]] ) { String salt = extractSalt ( [[blindly]] ) ; String [[aches]] = digest ( salt , [[cheltenham]] ) ; return PasswordEncoderUtils . equals ( [[blindly]] . toString ( ) , [[aches]] ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 83 ---------------------------------------------
Provide a default channel security configurer . --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext [[context]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[context]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[ballsy]] ( ) throws Exception { ApplicationContext [[weirdest]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[weirdest]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 84 ---------------------------------------------
Retrieves an entry . --> Execute a TARN ROLE on a directory --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations [[retrieveEntry]] ( final String [[dn]] , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( [[dn]] , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations [[coelho]] ( final String [[taro]] , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( [[taro]] , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 85 ---------------------------------------------
Performs a search for multiple attribute values . --> HOTTie --> Socre: 1.0

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String base , final String filter , final Object [ ] params , final String [ ] [[attributeNames]] ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[hottie]] ( final String base , final String filter , final Object [ ] params , final String [ ] [[accordionist]] ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 86 ---------------------------------------------
Searches for attribute values for a given search . --> This method will be used to highlight multiple attributes --> Socre: 1.0

[[[[Adv]]]]: public Set < String > [[searchForSingleAttributeValues]] ( final String base , final String [[filter]] , final Object [ ] params , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , [[filter]] , params , attributeNames ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > [[values]] = map . get ( attributeName ) ; if ( [[values]] != null ) { result . addAll ( [[values]] ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > [[encryption]] ( final String base , final String [[kavanagh]] , final Object [ ] params , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , [[kavanagh]] , params , attributeNames ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > [[assassinated]] = map . get ( attributeName ) ; if ( [[assassinated]] != null ) { result . addAll ( [[assassinated]] ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 87 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 72 / 15 / 0 / 87:   9%|▊         | 87/1000 [13:44<2:24:12,  9.48s/it][Succeeded / Failed / Skipped / Total] 72 / 15 / 0 / 87:   9%|▉         | 88/1000 [14:03<2:25:42,  9.59s/it][Succeeded / Failed / Skipped / Total] 73 / 15 / 0 / 88:   9%|▉         | 88/1000 [14:03<2:25:42,  9.59s/it][Succeeded / Failed / Skipped / Total] 73 / 15 / 0 / 88:   9%|▉         | 89/1000 [14:15<2:25:57,  9.61s/it]Builds a search controls . --> Creates a new SearchControls instance --> Socre: 1.0

[[[[Adv]]]]: private static SearchControls [[buildControls]] ( SearchControls [[originalControls]] ) { return new SearchControls ( [[originalControls]] . getSearchScope ( ) , [[originalControls]] . getCountLimit ( ) , [[originalControls]] . getTimeLimit ( ) , [[originalControls]] . getReturningAttributes ( ) , RETURN_OBJECT , [[originalControls]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls [[camorra]] ( SearchControls [[egg]] ) { return new SearchControls ( [[egg]] . getSearchScope ( ) , [[egg]] . getCountLimit ( ) , [[egg]] . getTimeLimit ( ) , [[egg]] . getReturningAttributes ( ) , RETURN_OBJECT , [[egg]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 88 ---------------------------------------------
Search for a single entry . --> returns a new DirContextOperations --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations [[searchForSingleEntryInternal]] ( DirContext ctx , SearchControls searchControls , String [[base]] , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( [[base]] ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations [[abominable]] ( DirContext ctx , SearchControls searchControls , String [[confluence]] , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( [[confluence]] ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 89 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 74 / 15 / 0 / 89:   9%|▉         | 89/1000 [14:15<2:25:57,  9.61s/it][Succeeded / Failed / Skipped / Total] 74 / 15 / 0 / 89:   9%|▉         | 90/1000 [14:21<2:25:12,  9.57s/it][Succeeded / Failed / Skipped / Total] 74 / 16 / 0 / 90:   9%|▉         | 90/1000 [14:21<2:25:12,  9.57s/it][Succeeded / Failed / Skipped / Total] 74 / 16 / 0 / 90:   9%|▉         | 91/1000 [14:29<2:24:43,  9.55s/it][Succeeded / Failed / Skipped / Total] 75 / 16 / 0 / 91:   9%|▉         | 91/1000 [14:29<2:24:43,  9.55s/it][Succeeded / Failed / Skipped / Total] 75 / 16 / 0 / 91:   9%|▉         | 92/1000 [14:30<2:23:11,  9.46s/it]Create the embedded server definition . --> Create the embedded server definition --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext [[parserContext]] ) { Object source = [[parserContext]] . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( [[parserContext]] . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { [[parserContext]] . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } [[parserContext]] . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext [[berwick]] ) { Object source = [[berwick]] . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( [[berwick]] . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { [[berwick]] . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } [[berwick]] . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 90 ---------------------------------------------
Compares the given dn with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean compare ( final String dn , final String attributeName , final Object [[value]] ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext [[ctx]] ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = [[ctx]] . search ( dn , comparisonFilter , new Object [ ] { [[value]] } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean compare ( final String dn , final String attributeName , final Object [[dada]] ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext [[paperweight]] ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = [[paperweight]] . search ( dn , comparisonFilter , new Object [ ] { [[dada]] } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 91 ---------------------------------------------
Looks up the primary keys for acl . --> zine conditions --> Socre: 1.0

[[[[Adv]]]]: private void [[lookupPrimaryKeys]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > [[parentsToLookup]] = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long [[toFind]] : findNow ) { i ++ ; ps . setLong ( i , [[toFind]] ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void [[zine]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > [[cola]] = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long [[awoman]] : findNow ) { i ++ ; ps . setLong ( i , [[awoman]] ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 92 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 76 / 16 / 0 / 92:   9%|▉         | 92/1000 [14:30<2:23:11,  9.46s/it][Succeeded / Failed / Skipped / Total] 76 / 16 / 0 / 92:   9%|▉         | 93/1000 [14:44<2:23:45,  9.51s/it][Succeeded / Failed / Skipped / Total] 77 / 16 / 0 / 93:   9%|▉         | 93/1000 [14:44<2:23:45,  9.51s/it][Succeeded / Failed / Skipped / Total] 77 / 16 / 0 / 93:   9%|▉         | 94/1000 [14:45<2:22:14,  9.42s/it][Succeeded / Failed / Skipped / Total] 78 / 16 / 0 / 94:   9%|▉         | 94/1000 [14:45<2:22:14,  9.42s/it][Succeeded / Failed / Skipped / Total] 78 / 16 / 0 / 94:  10%|▉         | 95/1000 [15:00<2:22:58,  9.48s/it][Succeeded / Failed / Skipped / Total] 78 / 17 / 0 / 95:  10%|▉         | 95/1000 [15:00<2:22:58,  9.48s/it][Succeeded / Failed / Skipped / Total] 78 / 17 / 0 / 95:  10%|▉         | 96/1000 [15:12<2:23:11,  9.50s/it][Succeeded / Failed / Skipped / Total] 79 / 17 / 0 / 96:  10%|▉         | 96/1000 [15:12<2:23:11,  9.50s/it][Succeeded / Failed / Skipped / Total] 79 / 17 / 0 / 96:  10%|▉         | 97/1000 [15:26<2:23:49,  9.56s/it][Succeeded / Failed / Skipped / Total] 80 / 17 / 0 / 97:  10%|▉         | 97/1000 [15:26<2:23:49,  9.56s/it]Add ServletApiFilter to the SecurityContextHolder --> Register our security context holder . --> Socre: 1.0

[[[[Adv]]]]: private void [[createServletApiFilter]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void [[ambulances]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 93 ---------------------------------------------
Adds the spring security filter to the web application . --> Creates a new security filter chain . --> Socre: 1.0

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy [[springSecurityFilterChain]] = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { [[springSecurityFilterChain]] . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , True , filterName , [[springSecurityFilterChain]] ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy [[breaking]] = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { [[breaking]] . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , True , filterName , [[breaking]] ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 94 ---------------------------------------------
Whitelisted type resolver . --> Whitelisted type resolver --> Socre: 1.0

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > createWhitelistedDefaultTyping ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[result]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[result]] = [[result]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[result]] = [[result]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[result]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > createWhitelistedDefaultTyping ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[hedonistic]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[hedonistic]] = [[hedonistic]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[hedonistic]] = [[hedonistic]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[hedonistic]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 95 ---------------------------------------------
Build pre - authenticated authorities web . --> [[[FAILED]]]

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest [[context]] ) { Collection < String > j2eeUserRoles = getUserRoles ( [[context]] ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[context]] , userGas ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[megha]] ( HttpServletRequest [[leaky]] ) { Collection < String > j2eeUserRoles = getUserRoles ( [[leaky]] ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[leaky]] , userGas ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 96 ---------------------------------------------
Create the jaas api filter . --> Liest ee der ee Methode eebergebenen werden . --> Socre: 1.0

[[[[Adv]]]]: private void [[createJaasApiFilter]] ( ) { final String [[ATT_JAAS_API_PROVISION]] = "jaas-api-provision" ; final String [[DEF_JAAS_API_PROVISION]] = "false" ; String [[provideJaasApi]] = httpElt . getAttribute ( [[ATT_JAAS_API_PROVISION]] ) ; if ( ! StringUtils . hasText ( [[provideJaasApi]] ) ) { [[provideJaasApi]] = [[DEF_JAAS_API_PROVISION]] ; } if ( "true" . equals ( [[provideJaasApi]] ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void [[benzedrine]] ( ) { final String [[ØRE]] = "jaas-api-provision" ; final String [[BERGER]] = "false" ; String [[mccarthy]] = httpElt . getAttribute ( [[ØRE]] ) ; if ( ! StringUtils . hasText ( [[mccarthy]] ) ) { [[mccarthy]] = [[BERGER]] ; } if ( "true" . equals ( [[mccarthy]] ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 97 ---------------------------------------------
If any of the servlet s attributes is set to the ServletContext . --> called after affraid --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[affraid]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 98 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 80 / 18 / 0 / 98:  10%|▉         | 98/1000 [15:27<2:22:12,  9.46s/it][Succeeded / Failed / Skipped / Total] 80 / 18 / 0 / 98:  10%|▉         | 99/1000 [15:28<2:20:47,  9.38s/it][Succeeded / Failed / Skipped / Total] 81 / 18 / 0 / 99:  10%|▉         | 99/1000 [15:28<2:20:47,  9.38s/it][Succeeded / Failed / Skipped / Total] 81 / 18 / 0 / 99:  10%|▉         | 99/1000 [15:40<2:22:35,  9.50s/it][Succeeded / Failed / Skipped / Total] 81 / 18 / 0 / 99:  10%|█         | 100/1000 [15:46<2:21:54,  9.46s/it][Succeeded / Failed / Skipped / Total] 81 / 19 / 0 / 100:  10%|█         | 100/1000 [15:46<2:21:54,  9.46s/it][Succeeded / Failed / Skipped / Total] 81 / 19 / 0 / 100:  10%|█         | 101/1000 [16:23<2:25:57,  9.74s/it][Succeeded / Failed / Skipped / Total] 81 / 20 / 0 / 101:  10%|█         | 101/1000 [16:23<2:25:57,  9.74s/it][Succeeded / Failed / Skipped / Total] 81 / 20 / 0 / 101:  10%|█         | 102/1000 [16:53<2:28:45,  9.94s/it][Succeeded / Failed / Skipped / Total] 82 / 20 / 0 / 102:  10%|█         | 102/1000 [16:53<2:28:45,  9.94s/it][Succeeded / Failed / Skipped / Total] 82 / 20 / 0 / 102:  10%|█         | 103/1000 [16:57<2:27:37,  9.88s/it]Creates a new cipher . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String [[algorithm]] ) { try { return Cipher . getInstance ( [[algorithm]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[wittenberg]] ( String [[condominium]] ) { try { return Cipher . getInstance ( [[condominium]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 99 ---------------------------------------------
Returns a list of granted authorities for the specified attributes . --> get granted authorities from dialogs --> Socre: 1.0

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[attributes]] ) { List < GrantedAuthority > [[result]] = new ArrayList <> ( [[attributes]] . size ( ) ) ; for ( String [[attribute]] : [[attributes]] ) { [[result]] . add ( getGrantedAuthority ( [[attribute]] ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[pencils]] ) { List < GrantedAuthority > [[gargantuan]] = new ArrayList <> ( [[pencils]] . size ( ) ) ; for ( String [[gianluigi]] : [[pencils]] ) { [[gargantuan]] . add ( getGrantedAuthority ( [[gianluigi]] ) ) ; } return [[gargantuan]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 100 ---------------------------------------------
Retrieves the remember - me token for a given series . --> [[[FAILED]]]

[[[[Adv]]]]: public PersistentRememberMeToken getTokenForSeries ( String [[seriesId]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , [[seriesId]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[seriesId]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[seriesId]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[seriesId]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken getTokenForSeries ( String [[lusts]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , [[lusts]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[lusts]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[lusts]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[lusts]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 101 ---------------------------------------------
Check security context . --> [[[FAILED]]]

[[[[Adv]]]]: public void doFilter ( ServletRequest request , ServletResponse [[response]] , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) [[response]] ) ; } chain . doFilter ( request , [[response]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void doFilter ( ServletRequest request , ServletResponse [[denby]] , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) [[denby]] ) ; } chain . doFilter ( request , [[denby]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 102 ---------------------------------------------
Performs the actual authentication . --> bubba --> Socre: 1.0

[[[[Adv]]]]: private void [[doAuthenticate]] ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object [[credentials]] = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , [[credentials]] ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void [[bubba]] ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object [[amadeo]] = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , [[amadeo]] ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
[Succeeded / Failed / Skipped / Total] 83 / 20 / 0 / 103:  10%|█         | 103/1000 [16:57<2:27:37,  9.88s/it][Succeeded / Failed / Skipped / Total] 83 / 20 / 0 / 103:  10%|█         | 104/1000 [17:01<2:26:40,  9.82s/it][Succeeded / Failed / Skipped / Total] 83 / 21 / 0 / 104:  10%|█         | 104/1000 [17:01<2:26:40,  9.82s/it][Succeeded / Failed / Skipped / Total] 83 / 21 / 0 / 104:  10%|█         | 105/1000 [17:23<2:28:16,  9.94s/it][Succeeded / Failed / Skipped / Total] 84 / 21 / 0 / 105:  10%|█         | 105/1000 [17:23<2:28:16,  9.94s/it][Succeeded / Failed / Skipped / Total] 85 / 21 / 0 / 106:  11%|█         | 106/1000 [17:23<2:26:42,  9.85s/it][Succeeded / Failed / Skipped / Total] 85 / 21 / 0 / 106:  11%|█         | 107/1000 [17:25<2:25:29,  9.78s/it][Succeeded / Failed / Skipped / Total] 85 / 22 / 0 / 107:  11%|█         | 107/1000 [17:25<2:25:29,  9.78s/it][Succeeded / Failed / Skipped / Total] 86 / 22 / 0 / 108:  11%|█         | 108/1000 [17:28<2:24:17,  9.71s/it][Succeeded / Failed / Skipped / Total] 86 / 22 / 0 / 108:  11%|█         | 109/1000 [17:38<2:24:14,  9.71s/it][Succeeded / Failed / Skipped / Total] 87 / 22 / 0 / 109:  11%|█         | 109/1000 [17:38<2:24:14,  9.71s/it][Succeeded / Failed / Skipped / Total] 87 / 22 / 0 / 109:  11%|█         | 110/1000 [17:39<2:22:54,  9.63s/it]--------------------------------------------- Result 103 ---------------------------------------------
Checks if the content length has been written . --> Bookcase content length --> Socre: 1.0

[[[[Adv]]]]: private void [[checkContentLength]] ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean [[isBodyFullyWritten]] = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int [[bufferSize]] = getBufferSize ( ) ; boolean requiresFlush = [[bufferSize]] > 0 && this . contentWritten >= [[bufferSize]] ; if ( [[isBodyFullyWritten]] || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void [[bookcase]] ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean [[crm]] = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int [[ahhhhh]] = getBufferSize ( ) ; boolean requiresFlush = [[ahhhhh]] > 0 && this . contentWritten >= [[ahhhhh]] ; if ( [[crm]] || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 104 ---------------------------------------------
Check if the pre - authenticated principal has been changed . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest request , Authentication [[currentAuthentication]] ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && [[currentAuthentication]] . getName ( ) . equals ( principal ) ) { return False ; } if ( principal != null && principal . equals ( [[currentAuthentication]] . getPrincipal ( ) ) ) { return False ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return True ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[explode]] ( HttpServletRequest request , Authentication [[convince]] ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && [[convince]] . getName ( ) . equals ( principal ) ) { return False ; } if ( principal != null && principal . equals ( [[convince]] . getPrincipal ( ) ) ) { return False ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return True ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 105 ---------------------------------------------
Update the authentication defaults . --> Populate carte --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[logoutConfigurer]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[logoutConfigurer]] != null && ! [[logoutConfigurer]] . isCustomLogoutSuccess ( ) ) { [[logoutConfigurer]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[carte]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[mushroom]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[mushroom]] != null && ! [[mushroom]] . isCustomLogoutSuccess ( ) ) { [[mushroom]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 106 ---------------------------------------------
Sets the login processing url . --> Joins a friendship --> Socre: 1.0

[[[[Adv]]]]: public T [[loginProcessingUrl]] ( String [[loginProcessingUrl]] ) { this . loginProcessingUrl = [[loginProcessingUrl]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[loginProcessingUrl]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T [[friendship]] ( String [[accelerant]] ) { this . loginProcessingUrl = [[friendship]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[friendship]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 107 ---------------------------------------------
Map the authorities to their default authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[mapped]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority [[authority]] : authorities ) { [[mapped]] . add ( mapAuthority ( [[authority]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[mapped]] . add ( defaultAuthority ) ; } return [[mapped]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[betrayals]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority [[bolder]] : authorities ) { [[betrayals]] . add ( mapAuthority ( [[bolder]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[betrayals]] . add ( defaultAuthority ) ; } return [[betrayals]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 108 ---------------------------------------------
Updates the access values . --> Convert a protegegege to a list --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B [[http]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[http]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[protégée]] ( B [[ream]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[ream]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 109 ---------------------------------------------
Map the password to a String . --> Chicha --> Socre: 1.0

[[[[Adv]]]]: protected String [[mapPassword]] ( Object passwordValue ) { if ( ! ( passwordValue instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String [[chicha]] ( Object passwordValue ) { if ( ! ( passwordValue instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 110 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 88 / 22 / 0 / 110:  11%|█         | 110/1000 [17:39<2:22:54,  9.63s/it][Succeeded / Failed / Skipped / Total] 88 / 22 / 0 / 110:  11%|█         | 111/1000 [17:54<2:23:22,  9.68s/it][Succeeded / Failed / Skipped / Total] 89 / 22 / 0 / 111:  11%|█         | 111/1000 [17:54<2:23:22,  9.68s/it][Succeeded / Failed / Skipped / Total] 89 / 22 / 0 / 111:  11%|█         | 112/1000 [18:06<2:23:35,  9.70s/it][Succeeded / Failed / Skipped / Total] 90 / 22 / 0 / 112:  11%|█         | 112/1000 [18:06<2:23:35,  9.70s/it][Succeeded / Failed / Skipped / Total] 90 / 22 / 0 / 112:  11%|█▏        | 113/1000 [18:16<2:23:26,  9.70s/it][Succeeded / Failed / Skipped / Total] 90 / 23 / 0 / 113:  11%|█▏        | 113/1000 [18:16<2:23:26,  9.70s/it][Succeeded / Failed / Skipped / Total] 90 / 23 / 0 / 113:  11%|█▏        | 114/1000 [18:27<2:23:29,  9.72s/it][Succeeded / Failed / Skipped / Total] 91 / 23 / 0 / 114:  11%|█▏        | 114/1000 [18:27<2:23:29,  9.72s/it][Succeeded / Failed / Skipped / Total] 91 / 23 / 0 / 114:  12%|█▏        | 115/1000 [18:42<2:23:55,  9.76s/it]Encode cookie . --> Encode the cookie --> Socre: 1.0

[[[[Adv]]]]: protected String encodeCookie ( String [ ] cookieTokens ) { StringBuilder [[sb]] = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { [[sb]] . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { [[sb]] . append ( DELIMITER ) ; } } String value = [[sb]] . toString ( ) ; [[sb]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( [[sb]] . charAt ( [[sb]] . length ( ) - 1 ) == ' ' ) { [[sb]] . deleteCharAt ( [[sb]] . length ( ) - 1 ) ; } return [[sb]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String encodeCookie ( String [ ] cookieTokens ) { StringBuilder [[averted]] = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { [[averted]] . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { [[averted]] . append ( DELIMITER ) ; } } String value = [[averted]] . toString ( ) ; [[averted]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( [[averted]] . charAt ( [[averted]] . length ( ) - 1 ) == ' ' ) { [[averted]] . deleteCharAt ( [[averted]] . length ( ) - 1 ) ; } return [[averted]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 111 ---------------------------------------------
Sets the cookie . --> Generate Bandages --> Socre: 1.0

[[[[Adv]]]]: protected void [[setCookie]] ( String [ ] tokens , int maxAge , HttpServletRequest [[request]] , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( [[request]] ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( [[request]] . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( True ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void [[bandages]] ( String [ ] tokens , int maxAge , HttpServletRequest [[university]] , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( [[university]] ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( [[university]] . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( True ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 112 ---------------------------------------------
Resolves the security context --> Resolves a security context --> Socre: 1.0

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > [[reactiveSecurityContext]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[reactiveSecurityContext]] == null ) { return null ; } return [[reactiveSecurityContext]] . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > [[alexandr]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[alexandr]] == null ) { return null ; } return [[alexandr]] . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 113 ---------------------------------------------
Extract cookie from request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[extractRememberMeCookie]] ( HttpServletRequest request ) { Cookie [ ] [[cookies]] = request . getCookies ( ) ; if ( ( [[cookies]] == null ) || ( [[cookies]] . length == 0 ) ) { return null ; } for ( Cookie cookie : [[cookies]] ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String [[runny]] ( HttpServletRequest request ) { Cookie [ ] [[aaaah]] = request . getCookies ( ) ; if ( ( [[aaaah]] == null ) || ( [[aaaah]] . length == 0 ) ) { return null ; } for ( Cookie cookie : [[aaaah]] ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 114 ---------------------------------------------
Logout request . --> logout --> Socre: 1.0

[[[[Adv]]]]: public void logout ( HttpServletRequest request , HttpServletResponse [[response]] , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( False ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void logout ( HttpServletRequest request , HttpServletResponse [[protégée]] , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( False ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 115 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 91 / 24 / 0 / 115:  12%|█▏        | 115/1000 [18:42<2:23:55,  9.76s/it][Succeeded / Failed / Skipped / Total] 91 / 24 / 0 / 115:  12%|█▏        | 116/1000 [18:44<2:22:47,  9.69s/it][Succeeded / Failed / Skipped / Total] 92 / 24 / 0 / 116:  12%|█▏        | 116/1000 [18:44<2:22:47,  9.69s/it][Succeeded / Failed / Skipped / Total] 92 / 24 / 0 / 116:  12%|█▏        | 117/1000 [18:52<2:22:26,  9.68s/it][Succeeded / Failed / Skipped / Total] 93 / 24 / 0 / 117:  12%|█▏        | 117/1000 [18:52<2:22:26,  9.68s/it][Succeeded / Failed / Skipped / Total] 93 / 24 / 0 / 117:  12%|█▏        | 118/1000 [19:02<2:22:18,  9.68s/it][Succeeded / Failed / Skipped / Total] 94 / 24 / 0 / 118:  12%|█▏        | 118/1000 [19:02<2:22:18,  9.68s/it][Succeeded / Failed / Skipped / Total] 94 / 24 / 0 / 118:  12%|█▏        | 119/1000 [19:03<2:21:08,  9.61s/it][Succeeded / Failed / Skipped / Total] 94 / 25 / 0 / 119:  12%|█▏        | 119/1000 [19:03<2:21:08,  9.61s/it][Succeeded / Failed / Skipped / Total] 94 / 25 / 0 / 119:  12%|█▏        | 120/1000 [19:09<2:20:27,  9.58s/it][Succeeded / Failed / Skipped / Total] 95 / 25 / 0 / 120:  12%|█▏        | 120/1000 [19:09<2:20:27,  9.58s/it][Succeeded / Failed / Skipped / Total] 95 / 25 / 0 / 120:  12%|█▏        | 121/1000 [19:16<2:20:04,  9.56s/it][Succeeded / Failed / Skipped / Total] 96 / 25 / 0 / 121:  12%|█▏        | 121/1000 [19:16<2:20:04,  9.56s/it][Succeeded / Failed / Skipped / Total] 96 / 25 / 0 / 121:  12%|█▏        | 122/1000 [19:28<2:20:10,  9.58s/it][Succeeded / Failed / Skipped / Total] 97 / 25 / 0 / 122:  12%|█▏        | 122/1000 [19:28<2:20:10,  9.58s/it][Succeeded / Failed / Skipped / Total] 97 / 25 / 0 / 122:  12%|█▏        | 123/1000 [19:36<2:19:50,  9.57s/it]Get the port from the cas service URL . --> [[[FAILED]]]

[[[[Adv]]]]: private static int [[getServicePort]] ( URL [[casServiceUrl]] ) { int port = [[casServiceUrl]] . getPort ( ) ; if ( port == - 1 ) { port = [[casServiceUrl]] . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int [[labelle]] ( URL [[highest]] ) { int port = [[highest]] . getPort ( ) ; if ( port == - 1 ) { port = [[highest]] . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 116 ---------------------------------------------
Get query string from request . --> get havn --> Socre: 1.0

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest [[request]] , final Pattern artifactPattern ) { final String query = [[request]] . getQueryString ( ) ; if ( query == null ) { return null ; } final String [[result]] = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( [[result]] . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[havn]] ( final HttpServletRequest [[beaufort]] , final Pattern artifactPattern ) { final String query = [[beaufort]] . getQueryString ( ) ; if ( query == null ) { return null ; } final String [[sulk]] = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( [[sulk]] . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 117 ---------------------------------------------
Authenticates an authentication token . --> Authenticate an AuthenticationToken --> Socre: 1.0

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[auth]] ) throws AuthenticationException { if ( ! ( [[auth]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[auth]] ; Set < GrantedAuthority > [[authorities]] ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[alva]] ) throws AuthenticationException { if ( ! ( [[alva]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[alva]] ; Set < GrantedAuthority > [[garfunkel]] ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 118 ---------------------------------------------
Gets the principal . --> Methode permettant d obtenir la classe --> Socre: 1.0

[[[[Adv]]]]: public String [[getPrincipal]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[authentication]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = [[authentication]] . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails [[details]] = ( LdapUserDetails ) principal ; return [[details]] . getDn ( ) ; } else if ( [[authentication]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String [[montero]] ( ) { Authentication [[katrine]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[katrine]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = [[katrine]] . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails [[aslo]] = ( LdapUserDetails ) principal ; return [[aslo]] . getDn ( ) ; } else if ( [[katrine]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 119 ---------------------------------------------
Get the redirect URL . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[aditya]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 120 ---------------------------------------------
Set context environment properties . --> Sets the profheme --> Socre: 1.0

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . [[contextEnvironmentProperties]] = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[blaspheme]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . [[animated]] = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 121 ---------------------------------------------
Render the HTML tag . --> Evaluate cascading --> Socre: 1.0

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[cascades]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 122 ---------------------------------------------
Initialize the user details service . --> generate all user details --> Socre: 1.0

[[[[Adv]]]]: @ Override protected void [[initUserDetailsService]] ( ) throws Exception { for ( UserDetailsBuilder [[userBuilder]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[userBuilder]] . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void [[curfew]] ( ) throws Exception { for ( UserDetailsBuilder [[léo]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[léo]] . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
[Succeeded / Failed / Skipped / Total] 98 / 25 / 0 / 123:  12%|█▏        | 123/1000 [19:36<2:19:50,  9.57s/it][Succeeded / Failed / Skipped / Total] 98 / 25 / 0 / 123:  12%|█▏        | 124/1000 [19:57<2:21:00,  9.66s/it][Succeeded / Failed / Skipped / Total] 99 / 25 / 0 / 124:  12%|█▏        | 124/1000 [19:57<2:21:00,  9.66s/it][Succeeded / Failed / Skipped / Total] 99 / 25 / 0 / 124:  12%|█▎        | 125/1000 [20:09<2:21:04,  9.67s/it][Succeeded / Failed / Skipped / Total] 100 / 25 / 0 / 125:  12%|█▎        | 125/1000 [20:09<2:21:04,  9.67s/it][Succeeded / Failed / Skipped / Total] 100 / 25 / 0 / 125:  13%|█▎        | 126/1000 [20:22<2:21:19,  9.70s/it][Succeeded / Failed / Skipped / Total] 100 / 26 / 0 / 126:  13%|█▎        | 126/1000 [20:22<2:21:19,  9.70s/it][Succeeded / Failed / Skipped / Total] 100 / 26 / 0 / 126:  13%|█▎        | 127/1000 [20:31<2:21:02,  9.69s/it][Succeeded / Failed / Skipped / Total] 100 / 27 / 0 / 127:  13%|█▎        | 127/1000 [20:31<2:21:02,  9.69s/it][Succeeded / Failed / Skipped / Total] 100 / 27 / 0 / 127:  13%|█▎        | 128/1000 [20:37<2:20:28,  9.67s/it]--------------------------------------------- Result 123 ---------------------------------------------
Gets the UserDetailsService . --> Get UserDetailsService --> Socre: 1.0

[[[[Adv]]]]: private UserDetailsService [[getUserDetailsService]] ( ) { Map < String , ? > [[beans]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[beans]] . size ( ) == 0 ) { [[beans]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[beans]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[beans]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[beans]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService [[giz]] ( ) { Map < String , ? > [[boatman]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[boatman]] . size ( ) == 0 ) { [[boatman]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[boatman]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[boatman]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[boatman]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 124 ---------------------------------------------
Checks for authentication . --> Determine if a request needs authentication --> Socre: 1.0

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( [[request]] , response ) ; final boolean [[result]] = serviceTicketRequest || proxyReceptorRequest ( [[request]] ) || ( proxyTicketRequest ( serviceTicketRequest , [[request]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest [[dwell]] , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( [[dwell]] , response ) ; final boolean [[funerary]] = serviceTicketRequest || proxyReceptorRequest ( [[dwell]] ) || ( proxyTicketRequest ( serviceTicketRequest , [[dwell]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + [[funerary]] ) ; } return [[funerary]] ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 125 ---------------------------------------------
Adds the PkCE parameters . --> Generate ALVA --> Socre: 1.0

[[[[Adv]]]]: private void [[addPkceParameters]] ( Map < String , Object > attributes , Map < String , Object > [[additionalParameters]] ) { String [[codeVerifier]] = this . [[codeVerifierGenerator]] . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , [[codeVerifier]] ) ; try { String codeChallenge = createCodeChallenge ( [[codeVerifier]] ) ; [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE , [[codeVerifier]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void [[alva]] ( Map < String , Object > attributes , Map < String , Object > [[cocksure]] ) { String [[averted]] = this . [[hooked]] . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , [[averted]] ) ; try { String codeChallenge = createCodeChallenge ( [[averted]] ) ; [[cocksure]] . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; [[cocksure]] . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { [[cocksure]] . put ( PkceParameterNames . CODE_CHALLENGE , [[averted]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 126 ---------------------------------------------
Build the provider url . --> [[[FAILED]]]

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 127 ---------------------------------------------
Check if authentication is required . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean serviceTicketRequest ( final HttpServletRequest request , final HttpServletResponse response ) { boolean [[result]] = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean serviceTicketRequest ( final HttpServletRequest request , final HttpServletResponse response ) { boolean [[errol]] = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[errol]] ) ; } return [[errol]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 128 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 101 / 27 / 0 / 128:  13%|█▎        | 128/1000 [20:37<2:20:28,  9.67s/it][Succeeded / Failed / Skipped / Total] 101 / 27 / 0 / 128:  13%|█▎        | 129/1000 [20:55<2:21:16,  9.73s/it][Succeeded / Failed / Skipped / Total] 102 / 27 / 0 / 129:  13%|█▎        | 129/1000 [20:55<2:21:16,  9.73s/it][Succeeded / Failed / Skipped / Total] 102 / 27 / 0 / 129:  13%|█▎        | 130/1000 [21:04<2:21:01,  9.73s/it][Succeeded / Failed / Skipped / Total] 103 / 27 / 0 / 130:  13%|█▎        | 130/1000 [21:04<2:21:01,  9.73s/it][Succeeded / Failed / Skipped / Total] 103 / 27 / 0 / 130:  13%|█▎        | 131/1000 [21:04<2:19:48,  9.65s/it][Succeeded / Failed / Skipped / Total] 104 / 27 / 0 / 131:  13%|█▎        | 131/1000 [21:04<2:19:48,  9.65s/it][Succeeded / Failed / Skipped / Total] 104 / 27 / 0 / 131:  13%|█▎        | 132/1000 [21:09<2:19:05,  9.61s/it][Succeeded / Failed / Skipped / Total] 105 / 27 / 0 / 132:  13%|█▎        | 132/1000 [21:09<2:19:05,  9.61s/it][Succeeded / Failed / Skipped / Total] 105 / 27 / 0 / 132:  13%|█▎        | 133/1000 [21:14<2:18:30,  9.59s/it][Succeeded / Failed / Skipped / Total] 106 / 27 / 0 / 133:  13%|█▎        | 133/1000 [21:14<2:18:30,  9.59s/it][Succeeded / Failed / Skipped / Total] 106 / 27 / 0 / 133:  13%|█▎        | 134/1000 [21:36<2:19:37,  9.67s/it][Succeeded / Failed / Skipped / Total] 107 / 27 / 0 / 134:  13%|█▎        | 134/1000 [21:36<2:19:37,  9.67s/it][Succeeded / Failed / Skipped / Total] 107 / 27 / 0 / 134:  14%|█▎        | 135/1000 [21:47<2:19:36,  9.68s/it]Checks if the current thread is authenticated . --> Checks lillian --> Socre: 1.0

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[authentication]] != null && [[authentication]] . isAuthenticated ( ) && ! ( [[authentication]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[lillian]] ( ) { Authentication [[duvall]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[duvall]] != null && [[duvall]] . isAuthenticated ( ) && ! ( [[duvall]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 129 ---------------------------------------------
Proxy service ticket request --> This method should only be used for testing --> Socre: 1.0

[[[[Adv]]]]: private boolean [[proxyTicketRequest]] ( final boolean [[serviceTicketRequest]] , final HttpServletRequest [[request]] ) { if ( [[serviceTicketRequest]] ) { return False ; } final boolean [[result]] = authenticateAllArtifacts && obtainArtifact ( [[request]] ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean [[schemes]] ( final boolean [[biggies]] , final HttpServletRequest [[statutes]] ) { if ( [[biggies]] ) { return False ; } final boolean [[shitface]] = authenticateAllArtifacts && obtainArtifact ( [[statutes]] ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + [[shitface]] ) ; } return [[shitface]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 130 ---------------------------------------------
Retrieve the JWK set . --> Perform backpacks --> Socre: 1.0

[[[[Adv]]]]: private Mono < JWKSet > [[getJWKSet]] ( ) { return this . webClient . get ( ) . uri ( this . [[jwkSetURL]] ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > [[backpacks]] ( ) { return this . webClient . get ( ) . uri ( this . [[dinozzo]] ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 131 ---------------------------------------------
Returns true if proxy request is configured . --> Methode permutation --> Socre: 1.0

[[[[Adv]]]]: private boolean [[proxyReceptorRequest]] ( final HttpServletRequest [[request]] ) { final boolean [[result]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[request]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean [[medicate]] ( final HttpServletRequest [[ipanema]] ) { final boolean [[hangnail]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[ipanema]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[hangnail]] ) ; } return [[hangnail]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 132 ---------------------------------------------
Url encode value . --> Encode string . --> Socre: 1.0

[[[[Adv]]]]: private String utf8UrlEncode ( String [[value]] ) { try { return URLEncoder . encode ( [[value]] , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String utf8UrlEncode ( String [[automobiles]] ) { try { return URLEncoder . encode ( [[automobiles]] , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 133 ---------------------------------------------
Creates the security expression root for the given method invocation . --> create MethodSecurityExpression --> Socre: 1.0

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[createSecurityExpressionRoot]] ( Authentication [[authentication]] , MethodInvocation invocation ) { MethodSecurityExpressionRoot [[root]] = new MethodSecurityExpressionRoot ( [[authentication]] ) ; [[root]] . setThis ( invocation . getThis ( ) ) ; [[root]] . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; [[root]] . setTrustResolver ( getTrustResolver ( ) ) ; [[root]] . setRoleHierarchy ( getRoleHierarchy ( ) ) ; [[root]] . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return [[root]] ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[absentee]] ( Authentication [[aside]] , MethodInvocation invocation ) { MethodSecurityExpressionRoot [[jaan]] = new MethodSecurityExpressionRoot ( [[aside]] ) ; [[jaan]] . setThis ( invocation . getThis ( ) ) ; [[jaan]] . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; [[jaan]] . setTrustResolver ( getTrustResolver ( ) ) ; [[jaan]] . setRoleHierarchy ( getRoleHierarchy ( ) ) ; [[jaan]] . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return [[jaan]] ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 134 ---------------------------------------------
Creates a collection of granted authorities for the current user . --> map grants to grants --> Socre: 1.0

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > [[webSphereGroups]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[webSphereGroups]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[webSphereGroups]] + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[amazons]] ( ) { List < String > [[dwell]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[dwell]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[dwell]] + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 135 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 107 / 28 / 0 / 135:  14%|█▎        | 135/1000 [21:47<2:19:36,  9.68s/it][Succeeded / Failed / Skipped / Total] 107 / 28 / 0 / 135:  14%|█▎        | 136/1000 [21:48<2:18:35,  9.62s/it][Succeeded / Failed / Skipped / Total] 107 / 29 / 0 / 136:  14%|█▎        | 136/1000 [21:48<2:18:35,  9.62s/it][Succeeded / Failed / Skipped / Total] 107 / 29 / 0 / 136:  14%|█▎        | 137/1000 [21:56<2:18:12,  9.61s/it][Succeeded / Failed / Skipped / Total] 108 / 29 / 0 / 137:  14%|█▎        | 137/1000 [21:56<2:18:12,  9.61s/it][Succeeded / Failed / Skipped / Total] 108 / 29 / 0 / 137:  14%|█▍        | 138/1000 [22:29<2:20:30,  9.78s/it][Succeeded / Failed / Skipped / Total] 109 / 29 / 0 / 138:  14%|█▍        | 138/1000 [22:29<2:20:30,  9.78s/it][Succeeded / Failed / Skipped / Total] 109 / 29 / 0 / 138:  14%|█▍        | 139/1000 [22:38<2:20:16,  9.78s/it][Succeeded / Failed / Skipped / Total] 110 / 29 / 0 / 139:  14%|█▍        | 139/1000 [22:38<2:20:16,  9.78s/it][Succeeded / Failed / Skipped / Total] 110 / 29 / 0 / 139:  14%|█▍        | 140/1000 [22:42<2:19:27,  9.73s/it][Succeeded / Failed / Skipped / Total] 111 / 29 / 0 / 140:  14%|█▍        | 140/1000 [22:42<2:19:27,  9.73s/it][Succeeded / Failed / Skipped / Total] 111 / 29 / 0 / 140:  14%|█▍        | 141/1000 [22:50<2:19:11,  9.72s/it][Succeeded / Failed / Skipped / Total] 112 / 29 / 0 / 141:  14%|█▍        | 141/1000 [22:50<2:19:11,  9.72s/it][Succeeded / Failed / Skipped / Total] 112 / 29 / 0 / 141:  14%|█▍        | 142/1000 [23:07<2:19:44,  9.77s/it]Load user by assertion . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[loadUserByAssertion]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails [[bambi]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 136 ---------------------------------------------
Get the pre - authenticated principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[listens]] ( HttpServletRequest httpRequest ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 137 ---------------------------------------------
Concatenates two arrays into a single byte array . --> Concatenate a list of resources --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] concatenate ( byte [ ] ... [[arrays]] ) { int length = 0 ; for ( byte [ ] [[array]] : [[arrays]] ) { length += [[array]] . length ; } byte [ ] [[newArray]] = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] [[array]] : [[arrays]] ) { System . arraycopy ( [[array]] , 0 , [[newArray]] , destPos , [[array]] . length ) ; destPos += [[array]] . length ; } return [[newArray]] ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] concatenate ( byte [ ] ... [[arai]] ) { int length = 0 ; for ( byte [ ] [[bahar]] : [[arai]] ) { length += [[bahar]] . length ; } byte [ ] [[cause]] = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] [[bahar]] : [[arai]] ) { System . arraycopy ( [[bahar]] , 0 , [[cause]] , destPos , [[bahar]] . length ) ; destPos += [[bahar]] . length ; } return [[cause]] ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 138 ---------------------------------------------
Preprocess the map . --> Pre process attributes . --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > [[orgMap]] ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( [[orgMap]] . size ( ) ) ; for ( Map . Entry < ? , ? > [[entry]] : [[orgMap]] . entrySet ( ) ) { Assert . isInstanceOf ( String . class , [[entry]] . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) [[entry]] . getKey ( ) , getGrantedAuthorityCollection ( [[entry]] . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > [[guh]] ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( [[guh]] . size ( ) ) ; for ( Map . Entry < ? , ? > [[ngong]] : [[guh]] . entrySet ( ) ) { Assert . isInstanceOf ( String . class , [[ngong]] . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) [[ngong]] . getKey ( ) , getGrantedAuthorityCollection ( [[ngong]] . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 139 ---------------------------------------------
Gets the collection of granted authorities . --> Donnelly . --> Socre: 1.0

[[[[Adv]]]]: private Collection < GrantedAuthority > [[getGrantedAuthorityCollection]] ( Object [[value]] ) { Collection < GrantedAuthority > [[result]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[result]] , [[value]] ) ; return [[result]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > [[donnelly]] ( Object [[stepford]] ) { Collection < GrantedAuthority > [[babu]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[babu]] , [[stepford]] ) ; return [[babu]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 140 ---------------------------------------------
Returns a list of granted authorities . --> Chevrolet --> Socre: 1.0

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String [[attribute]] : attributes ) { Collection < GrantedAuthority > [[c]] = attributes2grantedAuthoritiesMap . get ( [[attribute]] ) ; if ( [[c]] != null ) { gaList . addAll ( [[c]] ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[chevrolet]] ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String [[kitahara]] : attributes ) { Collection < GrantedAuthority > [[ill]] = attributes2grantedAuthoritiesMap . get ( [[kitahara]] ) ; if ( [[ill]] != null ) { gaList . addAll ( [[ill]] ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 141 ---------------------------------------------
Returns a portion of the given byte array . --> Generate bonzo --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[subArray]] ( byte [ ] array , int [[beginIndex]] , int [[endIndex]] ) { int [[length]] = [[endIndex]] - [[beginIndex]] ; byte [ ] subarray = new byte [ [[length]] ] ; System . arraycopy ( array , [[beginIndex]] , subarray , 0 , [[length]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] [[bonzo]] ( byte [ ] array , int [[biggies]] , int [[ostrava]] ) { int [[blushes]] = [[ostrava]] - [[biggies]] ; byte [ ] subarray = new byte [ [[blushes]] ] ; System . arraycopy ( array , [[biggies]] , subarray , 0 , [[blushes]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 142 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 113 / 29 / 0 / 142:  14%|█▍        | 142/1000 [23:07<2:19:44,  9.77s/it][Succeeded / Failed / Skipped / Total] 113 / 29 / 0 / 142:  14%|█▍        | 143/1000 [23:15<2:19:25,  9.76s/it][Succeeded / Failed / Skipped / Total] 113 / 30 / 0 / 143:  14%|█▍        | 143/1000 [23:15<2:19:25,  9.76s/it][Succeeded / Failed / Skipped / Total] 113 / 30 / 0 / 143:  14%|█▍        | 144/1000 [23:21<2:18:52,  9.73s/it][Succeeded / Failed / Skipped / Total] 113 / 31 / 0 / 144:  14%|█▍        | 144/1000 [23:21<2:18:52,  9.73s/it][Succeeded / Failed / Skipped / Total] 113 / 31 / 0 / 144:  14%|█▍        | 145/1000 [23:31<2:18:42,  9.73s/it][Succeeded / Failed / Skipped / Total] 114 / 31 / 0 / 145:  14%|█▍        | 145/1000 [23:31<2:18:42,  9.73s/it][Succeeded / Failed / Skipped / Total] 114 / 31 / 0 / 145:  15%|█▍        | 146/1000 [23:35<2:17:58,  9.69s/it][Succeeded / Failed / Skipped / Total] 115 / 31 / 0 / 146:  15%|█▍        | 146/1000 [23:35<2:17:58,  9.69s/it][Succeeded / Failed / Skipped / Total] 115 / 31 / 0 / 146:  15%|█▍        | 147/1000 [23:50<2:18:22,  9.73s/it][Succeeded / Failed / Skipped / Total] 116 / 31 / 0 / 147:  15%|█▍        | 147/1000 [23:50<2:18:22,  9.73s/it][Succeeded / Failed / Skipped / Total] 116 / 31 / 0 / 147:  15%|█▍        | 148/1000 [23:55<2:17:42,  9.70s/it]Gets the shared object . --> Get the voiceprint of the specified type --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . [[sharedObjects]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[voiceprint]] > [[voiceprint]] getSharedObject ( Class < [[voiceprint]] > sharedType ) { return ( [[voiceprint]] ) this . [[felonies]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 143 ---------------------------------------------
Adds the granted authority to the given result . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > [[result]] , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[value]] instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Collection < ? > ) [[value]] ) ; } else if ( [[value]] instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Object [ ] ) [[value]] ) ; } else if ( [[value]] instanceof String ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( String ) [[value]] ) ; } else if ( [[value]] instanceof GrantedAuthority ) { [[result]] . add ( ( GrantedAuthority ) [[value]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[value]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[accident]] ( Collection < GrantedAuthority > [[superbowl]] , Object [[diminishing]] ) { if ( [[diminishing]] == null ) { return ; } if ( [[diminishing]] instanceof Collection < ? > ) { [[accident]] ( [[superbowl]] , ( Collection < ? > ) [[diminishing]] ) ; } else if ( [[diminishing]] instanceof Object [ ] ) { [[accident]] ( [[superbowl]] , ( Object [ ] ) [[diminishing]] ) ; } else if ( [[diminishing]] instanceof String ) { [[accident]] ( [[superbowl]] , ( String ) [[diminishing]] ) ; } else if ( [[diminishing]] instanceof GrantedAuthority ) { [[superbowl]] . add ( ( GrantedAuthority ) [[diminishing]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[diminishing]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 144 ---------------------------------------------
Get the pre - authenticated principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object [[principal]] = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object [[microorganisms]] ( HttpServletRequest httpRequest ) { Object [[herdsman]] = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[herdsman]] ) ; } return [[herdsman]] ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 145 ---------------------------------------------
Verify that the given string has a role . --> needs to be unique --> Socre: 1.0

[[[[Adv]]]]: private static String hasRole ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String hasRole ( String [[emptive]] ) { Assert . isTrue ( ! [[emptive]] . startsWith ( "ROLE_" ) , ( ) -> [[emptive]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[emptive]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 146 ---------------------------------------------
Invoke interceptor method . --> Override interceptor in AspectJCallback --> Socre: 1.0

[[[[Adv]]]]: public Object invoke ( JoinPoint [[jp]] , AspectJCallback [[advisorProceed]] ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( [[jp]] ) ) ; Object result ; try { result = [[advisorProceed]] . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object invoke ( JoinPoint [[bhavna]] , AspectJCallback [[aaahhh]] ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( [[bhavna]] ) ) ; Object result ; try { result = [[aaahhh]] . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 147 ---------------------------------------------
Checks if any of the roles in the given array has a role . --> characters to role --> Socre: 1.0

[[[[Adv]]]]: private static String [ ] [[hasAnyRole]] ( String ... [[roles]] ) { for ( int i = 0 ; i < [[roles]] . length ; i ++ ) { [[roles]] [ i ] = "ROLE_" + [[roles]] [ i ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] [[chiltern]] ( String ... [[anita]] ) { for ( int i = 0 ; i < [[anita]] . length ; i ++ ) { [[anita]] [ i ] = "ROLE_" + [[anita]] [ i ] ; } return [[anita]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 148 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 116 / 32 / 0 / 148:  15%|█▍        | 148/1000 [23:55<2:17:42,  9.70s/it][Succeeded / Failed / Skipped / Total] 116 / 32 / 0 / 148:  15%|█▍        | 149/1000 [24:10<2:18:03,  9.73s/it][Succeeded / Failed / Skipped / Total] 117 / 32 / 0 / 149:  15%|█▍        | 149/1000 [24:10<2:18:03,  9.73s/it][Succeeded / Failed / Skipped / Total] 117 / 32 / 0 / 149:  15%|█▌        | 150/1000 [24:12<2:17:08,  9.68s/it][Succeeded / Failed / Skipped / Total] 118 / 32 / 0 / 150:  15%|█▌        | 150/1000 [24:12<2:17:08,  9.68s/it][Succeeded / Failed / Skipped / Total] 118 / 32 / 0 / 150:  15%|█▌        | 151/1000 [24:32<2:17:57,  9.75s/it][Succeeded / Failed / Skipped / Total] 119 / 32 / 0 / 151:  15%|█▌        | 151/1000 [24:32<2:17:57,  9.75s/it][Succeeded / Failed / Skipped / Total] 119 / 32 / 0 / 151:  15%|█▌        | 152/1000 [24:41<2:17:44,  9.75s/it][Succeeded / Failed / Skipped / Total] 120 / 32 / 0 / 152:  15%|█▌        | 152/1000 [24:41<2:17:44,  9.75s/it][Succeeded / Failed / Skipped / Total] 120 / 32 / 0 / 152:  15%|█▌        | 153/1000 [24:56<2:18:06,  9.78s/it][Succeeded / Failed / Skipped / Total] 121 / 32 / 0 / 153:  15%|█▌        | 153/1000 [24:56<2:18:06,  9.78s/it][Succeeded / Failed / Skipped / Total] 121 / 32 / 0 / 153:  15%|█▌        | 154/1000 [25:26<2:19:46,  9.91s/it]Build the redirect URL for a given request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest [[request]] ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( [[request]] ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( [[request]] . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( [[request]] . getContextPath ( ) ) ; urlBuilder . setServletPath ( [[request]] . getServletPath ( ) ) ; urlBuilder . setPathInfo ( [[request]] . getPathInfo ( ) ) ; urlBuilder . setQuery ( [[request]] . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[iou]] ( HttpServletRequest [[drifters]] ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( [[drifters]] ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( [[drifters]] . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( [[drifters]] . getContextPath ( ) ) ; urlBuilder . setServletPath ( [[drifters]] . getServletPath ( ) ) ; urlBuilder . setPathInfo ( [[drifters]] . getPathInfo ( ) ) ; urlBuilder . setQuery ( [[drifters]] . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 149 ---------------------------------------------
Attempt to exit the user . --> Override if needed for authentication --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[downright]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 150 ---------------------------------------------
Callback for when the login succeeded . --> Callback method for onLoginSuccess --> Socre: 1.0

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest [[request]] , HttpServletResponse [[response]] , Authentication successfulAuthentication ) { String [[username]] = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + [[username]] ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( [[username]] , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , [[request]] , [[response]] ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest [[azeem]] , HttpServletResponse [[rabbinical]] , Authentication successfulAuthentication ) { String [[gla]] = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + [[gla]] ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( [[gla]] , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , [[azeem]] , [[rabbinical]] ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 151 ---------------------------------------------
Display public index --> Display a random contact --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact [[rnd]] = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , [[rnd]] ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[abolitionist]] ( ) { Contact [[caroling]] = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , [[caroling]] ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 152 ---------------------------------------------
Sets the redirect user URL . --> Hockney algorithm --> Socre: 1.0

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . [[exitUserMatcher]] = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[hockney]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . [[backward]] = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 153 ---------------------------------------------
Spring security filter . --> Bean aware bean creation --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[addict]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 154 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 122 / 32 / 0 / 154:  15%|█▌        | 154/1000 [25:26<2:19:46,  9.91s/it][Succeeded / Failed / Skipped / Total] 122 / 32 / 0 / 154:  16%|█▌        | 155/1000 [25:36<2:19:35,  9.91s/it][Succeeded / Failed / Skipped / Total] 122 / 33 / 0 / 155:  16%|█▌        | 155/1000 [25:36<2:19:35,  9.91s/it][Succeeded / Failed / Skipped / Total] 122 / 33 / 0 / 155:  16%|█▌        | 156/1000 [25:44<2:19:14,  9.90s/it][Succeeded / Failed / Skipped / Total] 122 / 34 / 0 / 156:  16%|█▌        | 156/1000 [25:44<2:19:14,  9.90s/it][Succeeded / Failed / Skipped / Total] 122 / 34 / 0 / 156:  16%|█▌        | 157/1000 [25:50<2:18:43,  9.87s/it][Succeeded / Failed / Skipped / Total] 123 / 34 / 0 / 157:  16%|█▌        | 157/1000 [25:50<2:18:43,  9.87s/it][Succeeded / Failed / Skipped / Total] 123 / 34 / 0 / 157:  16%|█▌        | 158/1000 [25:50<2:17:43,  9.81s/it][Succeeded / Failed / Skipped / Total] 124 / 34 / 0 / 158:  16%|█▌        | 158/1000 [25:50<2:17:43,  9.81s/it][Succeeded / Failed / Skipped / Total] 124 / 34 / 0 / 158:  16%|█▌        | 159/1000 [26:03<2:17:47,  9.83s/it]Attempt to switch to the user . --> Highball handler methods --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptSwitchUser]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String [[username]] = request . getParameter ( this . usernameParameter ) ; if ( [[username]] == null ) { [[username]] = "" ; } if ( this . [[logger]] . isDebugEnabled ( ) ) { this . [[logger]] . debug ( "Attempt to switch to user [" + [[username]] + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( [[username]] ) ; this . [[userDetailsChecker]] . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication [[highball]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String [[hatbox]] = request . getParameter ( this . usernameParameter ) ; if ( [[hatbox]] == null ) { [[hatbox]] = "" ; } if ( this . [[buddhists]] . isDebugEnabled ( ) ) { this . [[buddhists]] . debug ( "Attempt to switch to user [" + [[hatbox]] + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( [[hatbox]] ) ; this . [[magister]] . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 155 ---------------------------------------------
Decodes a JWT --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT jwt = parse ( token ) ; if ( jwt instanceof SignedJWT ) { Jwt [[createdJwt]] = createJwt ( token , jwt ) ; return validateJwt ( [[createdJwt]] ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT jwt = parse ( token ) ; if ( jwt instanceof SignedJWT ) { Jwt [[cern]] = createJwt ( token , jwt ) ; return validateJwt ( [[cern]] ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 156 ---------------------------------------------
Process auto - login cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[processAutoLoginCookie]] ( String [ ] [[cookieTokens]] , HttpServletRequest request , HttpServletResponse response ) { if ( [[cookieTokens]] . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( [[cookieTokens]] ) + "'" ) ; } final String presentedSeries = [[cookieTokens]] [ 0 ] ; final String presentedToken = [[cookieTokens]] [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails [[monkeying]] ( String [ ] [[folklore]] , HttpServletRequest request , HttpServletResponse response ) { if ( [[folklore]] . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( [[folklore]] ) + "'" ) ; } final String presentedSeries = [[folklore]] [ 0 ] ; final String presentedToken = [[folklore]] [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 157 ---------------------------------------------
Authorizes the access --> Methode permettant de la restriction --> Socre: 1.0

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return False ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException [[ioException]] = new IOException ( ) ; [[ioException]] . initCause ( e ) ; throw [[ioException]] ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[conversion]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return False ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException [[harmonizing]] = new IOException ( ) ; [[harmonizing]] . initCause ( e ) ; throw [[harmonizing]] ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 158 ---------------------------------------------
Convert the given JWT to a collection of authorities . --> Convert a JTA to a collection of grants . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > convert ( Jwt [[jwt]] ) { return getScopes ( [[jwt]] ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > convert ( Jwt [[anita]] ) { return getScopes ( [[anita]] ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 159 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 125 / 34 / 0 / 159:  16%|█▌        | 159/1000 [26:03<2:17:47,  9.83s/it][Succeeded / Failed / Skipped / Total] 125 / 34 / 0 / 159:  16%|█▌        | 160/1000 [26:03<2:16:47,  9.77s/it][Succeeded / Failed / Skipped / Total] 125 / 34 / 1 / 160:  16%|█▌        | 160/1000 [26:03<2:16:47,  9.77s/it][Succeeded / Failed / Skipped / Total] 125 / 34 / 1 / 160:  16%|█▌        | 161/1000 [26:07<2:16:10,  9.74s/it][Succeeded / Failed / Skipped / Total] 125 / 35 / 1 / 161:  16%|█▌        | 161/1000 [26:07<2:16:10,  9.74s/it][Succeeded / Failed / Skipped / Total] 125 / 35 / 1 / 161:  16%|█▌        | 162/1000 [26:25<2:16:40,  9.79s/it][Succeeded / Failed / Skipped / Total] 125 / 36 / 1 / 162:  16%|█▌        | 162/1000 [26:25<2:16:40,  9.79s/it][Succeeded / Failed / Skipped / Total] 125 / 36 / 1 / 162:  16%|█▋        | 163/1000 [26:40<2:16:59,  9.82s/it][Succeeded / Failed / Skipped / Total] 126 / 36 / 1 / 163:  16%|█▋        | 163/1000 [26:40<2:16:59,  9.82s/it][Succeeded / Failed / Skipped / Total] 126 / 36 / 1 / 163:  16%|█▋        | 164/1000 [26:42<2:16:08,  9.77s/it][Succeeded / Failed / Skipped / Total] 127 / 36 / 1 / 164:  16%|█▋        | 164/1000 [26:42<2:16:08,  9.77s/it][Succeeded / Failed / Skipped / Total] 127 / 36 / 1 / 164:  16%|█▋        | 165/1000 [26:48<2:15:39,  9.75s/it][Succeeded / Failed / Skipped / Total] 128 / 36 / 1 / 165:  16%|█▋        | 165/1000 [26:48<2:15:39,  9.75s/it][Succeeded / Failed / Skipped / Total] 128 / 36 / 1 / 165:  17%|█▋        | 166/1000 [26:50<2:14:51,  9.70s/it]Display AddPermission page for AddPermission --> Display AddPermission --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAddPermissionPageForContact ( @ RequestParam ( "contactId" ) long contactId ) { Contact [[contact]] = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( [[contact]] ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAddPermissionPageForContact ( @ RequestParam ( "contactId" ) long contactId ) { Contact [[clapping]] = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( [[clapping]] ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 160 ---------------------------------------------
Render a AddPermission --> [[[SKIPPED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String addPermission ( AddPermission addPermission , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( addPermission , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( addPermission . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( addPermission . getPermission ( ) ) ; try { contactManager . addPermission ( addPermission . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 161 ---------------------------------------------
Check authorization using url check . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean authorizeUsingUrlCheck ( ) throws IOException { String [[contextPath]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[currentUser]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[contextPath]] , getUrl ( ) , getMethod ( ) , [[currentUser]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean authorizeUsingUrlCheck ( ) throws IOException { String [[michaelangelo]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[breslin]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[michaelangelo]] , getUrl ( ) , getMethod ( ) , [[breslin]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 162 ---------------------------------------------
Generate a CSRF token . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CsrfToken generateToken ( HttpServletRequest [[request]] ) { return wrap ( [[request]] , this . [[delegate]] . generateToken ( [[request]] ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken generateToken ( HttpServletRequest [[malaka]] ) { return wrap ( [[malaka]] , this . [[retrovirus]] . generateToken ( [[malaka]] ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 163 ---------------------------------------------
Creates a new user details resource factory bean from a String . --> Deserialize UserDetailsFactory bean . --> Socre: 1.0

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean fromString ( String [[users]] ) { InMemoryResource resource = new InMemoryResource ( [[users]] ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean fromString ( String [[weddin]] ) { InMemoryResource resource = new InMemoryResource ( [[weddin]] ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 164 ---------------------------------------------
Display admin permission --> Display Dorsoisir view --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAdminPage]] ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[bonsoir]] ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 165 ---------------------------------------------
Gets the role with the default role prefix . --> returns a buttoning --> Socre: 1.0

[[[[Adv]]]]: private static String [[getRoleWithDefaultPrefix]] ( String [[defaultRolePrefix]] , String role ) { if ( role == null ) { return role ; } if ( [[defaultRolePrefix]] == null || [[defaultRolePrefix]] . length ( ) == 0 ) { return role ; } if ( role . startsWith ( [[defaultRolePrefix]] ) ) { return role ; } return [[defaultRolePrefix]] + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String [[buttoning]] ( String [[efficacy]] , String role ) { if ( role == null ) { return role ; } if ( [[efficacy]] == null || [[efficacy]] . length ( ) == 0 ) { return role ; } if ( role . startsWith ( [[efficacy]] ) ) { return role ; } return [[efficacy]] + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 166 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 129 / 36 / 1 / 166:  17%|█▋        | 166/1000 [26:50<2:14:51,  9.70s/it][Succeeded / Failed / Skipped / Total] 129 / 36 / 1 / 166:  17%|█▋        | 167/1000 [27:08<2:15:23,  9.75s/it][Succeeded / Failed / Skipped / Total] 130 / 36 / 1 / 167:  17%|█▋        | 167/1000 [27:08<2:15:23,  9.75s/it][Succeeded / Failed / Skipped / Total] 130 / 36 / 1 / 167:  17%|█▋        | 168/1000 [27:15<2:14:57,  9.73s/it][Succeeded / Failed / Skipped / Total] 131 / 36 / 1 / 168:  17%|█▋        | 168/1000 [27:15<2:14:57,  9.73s/it][Succeeded / Failed / Skipped / Total] 131 / 36 / 1 / 168:  17%|█▋        | 169/1000 [27:18<2:14:16,  9.70s/it][Succeeded / Failed / Skipped / Total] 132 / 36 / 1 / 169:  17%|█▋        | 169/1000 [27:18<2:14:16,  9.70s/it][Succeeded / Failed / Skipped / Total] 132 / 36 / 1 / 169:  17%|█▋        | 170/1000 [27:28<2:14:09,  9.70s/it][Succeeded / Failed / Skipped / Total] 133 / 36 / 1 / 170:  17%|█▋        | 170/1000 [27:28<2:14:09,  9.70s/it][Succeeded / Failed / Skipped / Total] 133 / 36 / 1 / 170:  17%|█▋        | 171/1000 [27:32<2:13:30,  9.66s/it][Succeeded / Failed / Skipped / Total] 134 / 36 / 1 / 171:  17%|█▋        | 171/1000 [27:32<2:13:30,  9.66s/it][Succeeded / Failed / Skipped / Total] 134 / 36 / 1 / 171:  17%|█▋        | 172/1000 [27:57<2:14:37,  9.76s/it][Succeeded / Failed / Skipped / Total] 135 / 36 / 1 / 172:  17%|█▋        | 172/1000 [27:57<2:14:37,  9.76s/it][Succeeded / Failed / Skipped / Total] 135 / 36 / 1 / 172:  17%|█▋        | 173/1000 [27:59<2:13:47,  9.71s/it]Deletes a permission --> Delete inigo --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[deletePermission]] ( @ RequestParam ( "contactId" ) long [[contactId]] , @ RequestParam ( "sid" ) String [[sid]] , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( [[contactId]] ) ; Sid sidObject = new PrincipalSid ( [[sid]] ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[inigo]] ( @ RequestParam ( "contactId" ) long [[bloomberg]] , @ RequestParam ( "sid" ) String [[baseball]] , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( [[bloomberg]] ) ; Sid sidObject = new PrincipalSid ( [[baseball]] ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 167 ---------------------------------------------
Get all the values for a given attribute name . --> Gets bigfooter . --> Socre: 1.0

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String [[name]] ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( [[name]] ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[bigfoot]] ( String [[dunya]] ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( [[dunya]] ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 168 ---------------------------------------------
Encodes the given string into a byte array . --> Encode a CharSequence --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence string ) { try { ByteBuffer [[bytes]] = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] [[bytesCopy]] = new byte [ [[bytes]] . limit ( ) ] ; System . arraycopy ( [[bytes]] . array ( ) , 0 , [[bytesCopy]] , 0 , [[bytes]] . limit ( ) ) ; return [[bytesCopy]] ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence string ) { try { ByteBuffer [[witherspoon]] = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] [[render]] = new byte [ [[witherspoon]] . limit ( ) ] ; System . arraycopy ( [[witherspoon]] . array ( ) , 0 , [[render]] , 0 , [[witherspoon]] . limit ( ) ) ; return [[render]] ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 169 ---------------------------------------------
Decode the given bytes . --> Utility method to extract natphony --> Socre: 1.0

[[[[Adv]]]]: public static String [[decode]] ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String [[contaminant]] ( byte [ ] [[natacha]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[natacha]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 170 ---------------------------------------------
Get the first attribute value for the given attribute name . --> Gets backwash . --> Socre: 1.0

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String [[name]] ) { List < String > result = getAttributeValues ( [[name]] ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[backwash]] ( String [[jie]] ) { List < String > result = getAttributeValues ( [[jie]] ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 171 ---------------------------------------------
Return all attributes specified on the target class --> Determine attributes that are requested against --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method method , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[amity]] ( Method method , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 172 ---------------------------------------------
Add new contact --> Render fuser --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[addContact]] ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact [[contact]] = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( [[contact]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[fuser]] ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact [[calhoun]] = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( [[calhoun]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 173 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 136 / 36 / 1 / 173:  17%|█▋        | 173/1000 [27:59<2:13:47,  9.71s/it][Succeeded / Failed / Skipped / Total] 136 / 36 / 1 / 173:  17%|█▋        | 174/1000 [28:15<2:14:09,  9.74s/it][Succeeded / Failed / Skipped / Total] 137 / 36 / 1 / 174:  17%|█▋        | 174/1000 [28:15<2:14:09,  9.74s/it][Succeeded / Failed / Skipped / Total] 137 / 36 / 1 / 174:  18%|█▊        | 175/1000 [28:26<2:14:07,  9.75s/it][Succeeded / Failed / Skipped / Total] 138 / 36 / 1 / 175:  18%|█▊        | 175/1000 [28:26<2:14:07,  9.75s/it][Succeeded / Failed / Skipped / Total] 138 / 36 / 1 / 175:  18%|█▊        | 176/1000 [28:27<2:13:12,  9.70s/it][Succeeded / Failed / Skipped / Total] 139 / 36 / 1 / 176:  18%|█▊        | 176/1000 [28:27<2:13:12,  9.70s/it][Succeeded / Failed / Skipped / Total] 139 / 36 / 1 / 176:  18%|█▊        | 177/1000 [28:33<2:12:48,  9.68s/it][Succeeded / Failed / Skipped / Total] 139 / 37 / 1 / 177:  18%|█▊        | 177/1000 [28:33<2:12:48,  9.68s/it][Succeeded / Failed / Skipped / Total] 139 / 37 / 1 / 177:  18%|█▊        | 178/1000 [28:40<2:12:24,  9.67s/it][Succeeded / Failed / Skipped / Total] 140 / 37 / 1 / 178:  18%|█▊        | 178/1000 [28:40<2:12:24,  9.67s/it][Succeeded / Failed / Skipped / Total] 140 / 37 / 1 / 178:  18%|█▊        | 179/1000 [28:48<2:12:06,  9.66s/it][Succeeded / Failed / Skipped / Total] 141 / 37 / 1 / 179:  18%|█▊        | 179/1000 [28:48<2:12:06,  9.66s/it][Succeeded / Failed / Skipped / Total] 141 / 37 / 1 / 179:  18%|█▊        | 180/1000 [28:51<2:11:28,  9.62s/it]Get all config attributes . --> obtained all methods from methods --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[getAllConfigAttributes]] ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[allAttributes]] . addAll ( attributeList ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[inked]] ( ) { Set < ConfigAttribute > [[harbinger]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[harbinger]] . addAll ( attributeList ) ; } return [[harbinger]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 174 ---------------------------------------------
Sets any request that matches any request matcher . --> Configure the patcher --> Socre: 1.0

[[[[Adv]]]]: public C [[anyRequest]] ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = True ; return configurer ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C [[patricia]] ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = True ; return configurer ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 175 ---------------------------------------------
Checks if the given method is a match . --> Methode permettant diliete --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isMatch]] ( String [[methodName]] , String mappedName ) { return ( mappedName . endsWith ( "*" ) && [[methodName]] . startsWith ( mappedName . substring ( 0 , mappedName . length ( ) - 1 ) ) ) || ( mappedName . startsWith ( "*" ) && [[methodName]] . endsWith ( mappedName . substring ( 1 , mappedName . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[nutso]] ( String [[dili]] , String mappedName ) { return ( mappedName . endsWith ( "*" ) && [[dili]] . startsWith ( mappedName . substring ( 0 , mappedName . length ( ) - 1 ) ) ) || ( mappedName . startsWith ( "*" ) && [[dili]] . endsWith ( mappedName . substring ( 1 , mappedName . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 176 ---------------------------------------------
Look up the parameter names for a given object . --> Lookup launchers for a class --> Socre: 1.0

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] [[parameterAnnotations]] = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = [[parameterAnnotations]] . length ; String [ ] [[paramNames]] = new String [ parameterCount ] ; boolean [[found]] = "[[False]]" != "[[False]]" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = [[parameterAnnotations]] [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { [[found]] = True ; [[paramNames]] [ i ] = parameterName ; } } return [[found]] ? [[paramNames]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] [[artificially]] = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = [[artificially]] . length ; String [ ] [[info]] = new String [ parameterCount ] ; boolean [[launchers]] = "[["Bulgur" != "Bulgur"]]" != "[["Bulgur" != "Bulgur"]]" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = [[artificially]] [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { [[launchers]] = True ; [[info]] [ i ] = parameterName ; } } return [[launchers]] ? [[info]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 177 ---------------------------------------------
Registers a new secure method . --> [[[FAILED]]]

[[[[Adv]]]]: private void addSecureMethod ( RegisteredMethod [[method]] , List < ConfigAttribute > [[attr]] ) { Assert . notNull ( [[method]] , "RegisteredMethod required" ) ; Assert . notNull ( [[attr]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[method]] + "] with attributes [" + [[attr]] + "]" ) ; } this . [[methodMap]] . put ( [[method]] , [[attr]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void addSecureMethod ( RegisteredMethod [[vectors]] , List < ConfigAttribute > [[twinview]] ) { Assert . notNull ( [[vectors]] , "RegisteredMethod required" ) ; Assert . notNull ( [[twinview]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[vectors]] + "] with attributes [" + [[twinview]] + "]" ) ; } this . [[aloysius]] . put ( [[vectors]] , [[twinview]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 178 ---------------------------------------------
Handle bind exception . --> Invoke bindAs method --> Socre: 1.0

[[[[Adv]]]]: protected void [[handleBindException]] ( String userDn , String username , Throwable [[cause]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + [[cause]] ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void [[huys]] ( String userDn , String username , Throwable [[feliz]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + [[feliz]] ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 179 ---------------------------------------------
Get a random contact --> Get random contact --> Socre: 1.0

[[[[Adv]]]]: @ Transactional ( readOnly = True ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int [[getNumber]] = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( [[getNumber]] ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = True ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int [[congregate]] = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( [[congregate]] ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 180 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 142 / 37 / 1 / 180:  18%|█▊        | 180/1000 [28:51<2:11:28,  9.62s/it][Succeeded / Failed / Skipped / Total] 142 / 37 / 1 / 180:  18%|█▊        | 181/1000 [29:14<2:12:20,  9.69s/it][Succeeded / Failed / Skipped / Total] 142 / 38 / 1 / 181:  18%|█▊        | 181/1000 [29:14<2:12:20,  9.69s/it][Succeeded / Failed / Skipped / Total] 142 / 38 / 1 / 181:  18%|█▊        | 182/1000 [29:15<2:11:31,  9.65s/it][Succeeded / Failed / Skipped / Total] 143 / 38 / 1 / 182:  18%|█▊        | 182/1000 [29:15<2:11:31,  9.65s/it][Succeeded / Failed / Skipped / Total] 143 / 38 / 1 / 182:  18%|█▊        | 183/1000 [29:30<2:11:44,  9.68s/it][Succeeded / Failed / Skipped / Total] 144 / 38 / 1 / 183:  18%|█▊        | 183/1000 [29:30<2:11:44,  9.68s/it][Succeeded / Failed / Skipped / Total] 144 / 38 / 1 / 183:  18%|█▊        | 184/1000 [29:32<2:11:02,  9.64s/it][Succeeded / Failed / Skipped / Total] 145 / 38 / 1 / 184:  18%|█▊        | 184/1000 [29:32<2:11:02,  9.64s/it][Succeeded / Failed / Skipped / Total] 145 / 38 / 1 / 184:  18%|█▊        | 185/1000 [29:42<2:10:51,  9.63s/it][Succeeded / Failed / Skipped / Total] 146 / 38 / 1 / 185:  18%|█▊        | 185/1000 [29:42<2:10:51,  9.63s/it][Succeeded / Failed / Skipped / Total] 146 / 38 / 1 / 185:  19%|█▊        | 186/1000 [29:50<2:10:37,  9.63s/it][Succeeded / Failed / Skipped / Total] 147 / 38 / 1 / 186:  19%|█▊        | 186/1000 [29:50<2:10:37,  9.63s/it][Succeeded / Failed / Skipped / Total] 147 / 38 / 1 / 186:  19%|█▊        | 187/1000 [30:11<2:11:14,  9.69s/it]Removes the authentication exception from the session . --> Remove cookie from request --> Socre: 1.0

[[[[Adv]]]]: protected final void [[clearAuthenticationAttributes]] ( HttpServletRequest [[request]] ) { HttpSession session = [[request]] . getSession ( False ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void [[forgo]] ( HttpServletRequest [[avocado]] ) { HttpSession session = [[avocado]] . getSession ( False ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 181 ---------------------------------------------
Returns the declared field of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field getField ( Class < ? > clazz , String [[fieldName]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[fieldName]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[fieldName]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field getField ( Class < ? > clazz , String [[flared]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[flared]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[flared]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 182 ---------------------------------------------
Create the service url . --> Generate daybreak --> Socre: 1.0

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[daybreak]] ( final HttpServletRequest [[gogh]] , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 183 ---------------------------------------------
Checks the stack . --> Check stack . --> Socre: 1.0

[[[[Adv]]]]: private void checkFilterStack ( List < Filter > [[filters]] ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , [[filters]] ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , [[filters]] ) ; checkForDuplicates ( SessionManagementFilter . class , [[filters]] ) ; checkForDuplicates ( BasicAuthenticationFilter . class , [[filters]] ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , [[filters]] ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , [[filters]] ) ; checkForDuplicates ( ExceptionTranslationFilter . class , [[filters]] ) ; checkForDuplicates ( FilterSecurityInterceptor . class , [[filters]] ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void checkFilterStack ( List < Filter > [[batt]] ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , [[batt]] ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , [[batt]] ) ; checkForDuplicates ( SessionManagementFilter . class , [[batt]] ) ; checkForDuplicates ( BasicAuthenticationFilter . class , [[batt]] ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , [[batt]] ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , [[batt]] ) ; checkForDuplicates ( ExceptionTranslationFilter . class , [[batt]] ) ; checkForDuplicates ( FilterSecurityInterceptor . class , [[batt]] ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 184 ---------------------------------------------
Extract prefix . --> Liefert den Filters --> Socre: 1.0

[[[[Adv]]]]: private String [[extractPrefix]] ( String [[encPass]] ) { if ( ! [[encPass]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[encPass]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[encPass]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String [[ancestral]] ( String [[extinguisher]] ) { if ( ! [[extinguisher]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[extinguisher]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[extinguisher]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 185 ---------------------------------------------
Called by the authentication process . --> Handle kojima --> Socre: 1.0

[[[[Adv]]]]: public void [[commence]] ( HttpServletRequest [[request]] , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void [[kojima]] ( HttpServletRequest [[activism]] , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 186 ---------------------------------------------
Create the redirect url . --> High - level improvement --> Socre: 1.0

[[[[Adv]]]]: protected String [[createRedirectUrl]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . [[loginUrl]] , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "[[False]]" != "[[False]]" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[improve]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . [[neda]] , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "[["Alzheimer" != "Alzheimer"]]" != "[["Alzheimer" != "Alzheimer"]]" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 187 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 147 / 39 / 1 / 187:  19%|█▊        | 187/1000 [30:11<2:11:14,  9.69s/it][Succeeded / Failed / Skipped / Total] 147 / 39 / 1 / 187:  19%|█▉        | 188/1000 [30:25<2:11:26,  9.71s/it][Succeeded / Failed / Skipped / Total] 148 / 39 / 1 / 188:  19%|█▉        | 188/1000 [30:25<2:11:26,  9.71s/it][Succeeded / Failed / Skipped / Total] 149 / 39 / 1 / 189:  19%|█▉        | 189/1000 [30:25<2:10:34,  9.66s/it][Succeeded / Failed / Skipped / Total] 149 / 39 / 1 / 189:  19%|█▉        | 190/1000 [30:41<2:10:52,  9.69s/it][Succeeded / Failed / Skipped / Total] 150 / 39 / 1 / 190:  19%|█▉        | 190/1000 [30:41<2:10:52,  9.69s/it][Succeeded / Failed / Skipped / Total] 150 / 39 / 1 / 190:  19%|█▉        | 191/1000 [30:47<2:10:24,  9.67s/it][Succeeded / Failed / Skipped / Total] 150 / 40 / 1 / 191:  19%|█▉        | 191/1000 [30:47<2:10:24,  9.67s/it][Succeeded / Failed / Skipped / Total] 150 / 40 / 1 / 191:  19%|█▉        | 192/1000 [31:08<2:11:04,  9.73s/it][Succeeded / Failed / Skipped / Total] 150 / 41 / 1 / 192:  19%|█▉        | 192/1000 [31:08<2:11:04,  9.73s/it][Succeeded / Failed / Skipped / Total] 150 / 41 / 1 / 192:  19%|█▉        | 193/1000 [31:09<2:10:15,  9.68s/it]Gets the registered types . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > [[typeList]] = this . [[extractorMap]] . keySet ( ) ; return [[typeList]] . toArray ( new Class [ [[typeList]] . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[segura]] ( ) { Set < Class < ? extends Throwable > > [[cannibals]] = this . [[cag]] . keySet ( ) ; return [[cannibals]] . toArray ( new Class [ [[cannibals]] . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 188 ---------------------------------------------
Compares two byte arrays . --> Compares twofer byte arrays --> Socre: 1.0

[[[[Adv]]]]: private boolean matches ( byte [ ] [[expected]] , byte [ ] actual ) { if ( [[expected]] . length != actual . length ) { return False ; } int result = 0 ; for ( int i = 0 ; i < [[expected]] . length ; i ++ ) { result |= [[expected]] [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean matches ( byte [ ] [[afer]] , byte [ ] actual ) { if ( [[afer]] . length != actual . length ) { return False ; } int result = 0 ; for ( int i = 0 ; i < [[afer]] . length ; i ++ ) { result |= [[afer]] [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 189 ---------------------------------------------
Extracts the cause of a throwable . --> returns null if no exception --> Socre: 1.0

[[[[Adv]]]]: private Throwable extractCause ( Throwable [[throwable]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[entry]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = [[entry]] . getKey ( ) ; if ( throwableType . isInstance ( [[throwable]] ) ) { ThrowableCauseExtractor [[extractor]] = [[entry]] . getValue ( ) ; return [[extractor]] . extractCause ( [[throwable]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable extractCause ( Throwable [[qian]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[custom]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = [[custom]] . getKey ( ) ; if ( throwableType . isInstance ( [[qian]] ) ) { ThrowableCauseExtractor [[piastres]] = [[custom]] . getValue ( ) ; return [[piastres]] . extractCause ( [[qian]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 190 ---------------------------------------------
Register access manager . --> generate a bean definition --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[registerAccessManager]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder [[accessMgrBuilder]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[accessMgrBuilder]] . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = [[accessMgrBuilder]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[aho]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder [[coutinho]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[coutinho]] . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = [[coutinho]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 191 ---------------------------------------------
Convert a collection of user authorities to a Set . --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > [[authorityListToSet]] ( Collection < ? extends GrantedAuthority > [[userAuthorities]] ) { Assert . notNull ( [[userAuthorities]] , "userAuthorities cannot be null" ) ; Set < String > [[set]] = new HashSet <> ( [[userAuthorities]] . size ( ) ) ; for ( GrantedAuthority authority : [[userAuthorities]] ) { [[set]] . add ( authority . getAuthority ( ) ) ; } return [[set]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > [[afflicts]] ( Collection < ? extends GrantedAuthority > [[fujian]] ) { Assert . notNull ( [[fujian]] , "userAuthorities cannot be null" ) ; Set < String > [[manage]] = new HashSet <> ( [[fujian]] . size ( ) ) ; for ( GrantedAuthority authority : [[fujian]] ) { [[manage]] . add ( authority . getAuthority ( ) ) ; } return [[manage]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 192 ---------------------------------------------
Sets the default failure url . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String [[defaultFailureUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[defaultFailureUrl]] ) , ( ) -> "'" + [[defaultFailureUrl]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[defaultFailureUrl]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[credulity]] ( String [[evidence]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[evidence]] ) , ( ) -> "'" + [[evidence]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[evidence]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 193 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 151 / 41 / 1 / 193:  19%|█▉        | 193/1000 [31:09<2:10:15,  9.68s/it][Succeeded / Failed / Skipped / Total] 151 / 41 / 1 / 193:  19%|█▉        | 194/1000 [31:24<2:10:30,  9.72s/it][Succeeded / Failed / Skipped / Total] 152 / 41 / 1 / 194:  19%|█▉        | 194/1000 [31:24<2:10:30,  9.72s/it][Succeeded / Failed / Skipped / Total] 152 / 41 / 1 / 194:  20%|█▉        | 195/1000 [31:26<2:09:47,  9.67s/it][Succeeded / Failed / Skipped / Total] 153 / 41 / 1 / 195:  20%|█▉        | 195/1000 [31:26<2:09:47,  9.67s/it][Succeeded / Failed / Skipped / Total] 153 / 41 / 1 / 195:  20%|█▉        | 196/1000 [31:42<2:10:03,  9.71s/it][Succeeded / Failed / Skipped / Total] 153 / 42 / 1 / 196:  20%|█▉        | 196/1000 [31:42<2:10:03,  9.71s/it][Succeeded / Failed / Skipped / Total] 153 / 42 / 1 / 196:  20%|█▉        | 197/1000 [31:55<2:10:05,  9.72s/it][Succeeded / Failed / Skipped / Total] 153 / 43 / 1 / 197:  20%|█▉        | 197/1000 [31:55<2:10:06,  9.72s/it][Succeeded / Failed / Skipped / Total] 153 / 43 / 1 / 197:  20%|█▉        | 198/1000 [31:56<2:09:21,  9.68s/it]Sets the function to resolve hidden inputs . --> Define spotlight search --> Socre: 1.0

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . [[resolveHiddenInputs]] = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[spotlight]] ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . [[pituitary]] = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 194 ---------------------------------------------
Extracts the given identifier from the given result set . --> Convert an identifier to an identifier --> Socre: 1.0

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[identifier]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[identifier]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[identifier]] = convertFromStringTo ( ( String ) [[identifier]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[máximo]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[máximo]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[máximo]] = convertFromStringTo ( ( String ) [[máximo]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 195 ---------------------------------------------
Build the request URL --> Escape a request URI --> Socre: 1.0

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String [[queryString]] ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( [[queryString]] != null ) { url . append ( "?" ) . append ( [[queryString]] ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[displeased]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String [[antsy]] ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( [[antsy]] != null ) { url . append ( "?" ) . append ( [[antsy]] ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 196 ---------------------------------------------
Checks if the given URL is an absolute URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String url ) { if ( url == null ) { return "[[False]]" != "[[False]]" ; } final Pattern [[ABSOLUTE_URL]] = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return [[ABSOLUTE_URL]] . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[manifests]] ( String url ) { if ( url == null ) { return "[["Vauxhall" != "Vauxhall"]]" != "[["Vauxhall" != "Vauxhall"]]" ; } final Pattern [[ACCOUNTABILITY]] = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return [[ACCOUNTABILITY]] . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 197 ---------------------------------------------
Returns the list of OpenID attributes for the given identifier . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > [[createAttributeList]] ( String [[identifier]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[entry]] : idToAttributes . entrySet ( ) ) { if ( [[entry]] . getKey ( ) . matcher ( [[identifier]] ) . matches ( ) ) { return [[entry]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > [[danzig]] ( String [[preachy]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[asians]] : idToAttributes . entrySet ( ) ) { if ( [[asians]] . getKey ( ) . matcher ( [[preachy]] ) . matches ( ) ) { return [[asians]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 198 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 154 / 43 / 1 / 198:  20%|█▉        | 198/1000 [31:56<2:09:21,  9.68s/it][Succeeded / Failed / Skipped / Total] 154 / 43 / 1 / 198:  20%|█▉        | 199/1000 [32:40<2:11:30,  9.85s/it][Succeeded / Failed / Skipped / Total] 154 / 44 / 1 / 199:  20%|█▉        | 199/1000 [32:40<2:11:30,  9.85s/it][Succeeded / Failed / Skipped / Total] 154 / 44 / 1 / 199:  20%|██        | 200/1000 [32:40<2:10:42,  9.80s/it][Succeeded / Failed / Skipped / Total] 154 / 44 / 2 / 200:  20%|██        | 200/1000 [32:40<2:10:42,  9.80s/it][Succeeded / Failed / Skipped / Total] 154 / 44 / 2 / 200:  20%|██        | 201/1000 [32:42<2:10:01,  9.76s/it][Succeeded / Failed / Skipped / Total] 155 / 44 / 2 / 201:  20%|██        | 201/1000 [32:42<2:10:01,  9.76s/it][Succeeded / Failed / Skipped / Total] 155 / 44 / 2 / 201:  20%|██        | 202/1000 [32:56<2:10:06,  9.78s/it][Succeeded / Failed / Skipped / Total] 156 / 44 / 2 / 202:  20%|██        | 202/1000 [32:56<2:10:06,  9.78s/it][Succeeded / Failed / Skipped / Total] 156 / 44 / 2 / 202:  20%|██        | 203/1000 [32:59<2:09:33,  9.75s/it]Update an existing ACL . --> Update ObjectIdentity --> Socre: 1.0

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl [[acl]] ) { Long parentId = null ; if ( [[acl]] . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , [[acl]] . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) [[acl]] . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( [[acl]] . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( [[acl]] . getOwner ( ) , True ) ; int count = jdbcOperations . update ( updateObjectIdentity , parentId , ownerSid , Boolean . valueOf ( [[acl]] . isEntriesInheriting ( ) ) , [[acl]] . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl [[cancer]] ) { Long parentId = null ; if ( [[cancer]] . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , [[cancer]] . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) [[cancer]] . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( [[cancer]] . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( [[cancer]] . getOwner ( ) , True ) ; int count = jdbcOperations . update ( updateObjectIdentity , parentId , ownerSid , Boolean . valueOf ( [[cancer]] . isEntriesInheriting ( ) ) , [[cancer]] . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 199 ---------------------------------------------
Store object identity . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createObjectIdentity]] ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "[[True]]" == "[[True]]" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "[[True]]" == "[[True]]" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void [[oddball]] ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "[["Antipsychotic" == "Antipsychotic"]]" == "[["Antipsychotic" == "Antipsychotic"]]" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "[["Antipsychotic" == "Antipsychotic"]]" == "[["Antipsychotic" == "Antipsychotic"]]" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 200 ---------------------------------------------
Matching matcher . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher anyExchange ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 201 ---------------------------------------------
Creates and returns a list of match matchers . --> Methode permettable matchers --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[pathMatchers]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String [[pattern]] : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( [[pattern]] , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[muoi]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String [[heavyset]] : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( [[heavyset]] , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 202 ---------------------------------------------
Insert entries in acl . --> create adie --> Socre: 1.0

[[[[Adv]]]]: protected void [[createEntries]] ( final MutableAcl [[acl]] ) { if ( [[acl]] . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return [[acl]] . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int [[i]] ) throws SQLException { AccessControlEntry [[entry_]] = [[acl]] . getEntries ( ) . get ( [[i]] ) ; Assert . isTrue ( [[entry_]] instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) [[entry_]] ; stmt . setLong ( 1 , ( ( Long ) [[acl]] . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , [[i]] ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , True ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void [[adie]] ( final MutableAcl [[beaker]] ) { if ( [[beaker]] . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return [[beaker]] . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int [[cinematographic]] ) throws SQLException { AccessControlEntry [[conservatism]] = [[beaker]] . getEntries ( ) . get ( [[cinematographic]] ) ; Assert . isTrue ( [[conservatism]] instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) [[conservatism]] ; stmt . setLong ( 1 , ( ( Long ) [[beaker]] . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , [[cinematographic]] ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , True ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 203 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 157 / 44 / 2 / 203:  20%|██        | 203/1000 [32:59<2:09:33,  9.75s/it][Succeeded / Failed / Skipped / Total] 157 / 44 / 2 / 203:  20%|██        | 204/1000 [33:12<2:09:34,  9.77s/it][Succeeded / Failed / Skipped / Total] 158 / 44 / 2 / 204:  20%|██        | 204/1000 [33:12<2:09:34,  9.77s/it][Succeeded / Failed / Skipped / Total] 158 / 44 / 2 / 204:  20%|██        | 205/1000 [33:26<2:09:41,  9.79s/it][Succeeded / Failed / Skipped / Total] 159 / 44 / 2 / 205:  20%|██        | 205/1000 [33:26<2:09:41,  9.79s/it][Succeeded / Failed / Skipped / Total] 159 / 44 / 2 / 205:  21%|██        | 206/1000 [33:27<2:08:58,  9.75s/it][Succeeded / Failed / Skipped / Total] 160 / 44 / 2 / 206:  21%|██        | 206/1000 [33:27<2:08:58,  9.75s/it][Succeeded / Failed / Skipped / Total] 160 / 44 / 2 / 206:  21%|██        | 207/1000 [33:35<2:08:40,  9.74s/it][Succeeded / Failed / Skipped / Total] 161 / 44 / 2 / 207:  21%|██        | 207/1000 [33:35<2:08:40,  9.74s/it][Succeeded / Failed / Skipped / Total] 161 / 44 / 2 / 207:  21%|██        | 208/1000 [33:40<2:08:12,  9.71s/it][Succeeded / Failed / Skipped / Total] 162 / 44 / 2 / 208:  21%|██        | 208/1000 [33:40<2:08:12,  9.71s/it][Succeeded / Failed / Skipped / Total] 162 / 44 / 2 / 208:  21%|██        | 209/1000 [33:53<2:08:16,  9.73s/it][Succeeded / Failed / Skipped / Total] 163 / 44 / 2 / 209:  21%|██        | 209/1000 [33:53<2:08:16,  9.73s/it][Succeeded / Failed / Skipped / Total] 163 / 44 / 2 / 209:  21%|██        | 210/1000 [33:55<2:07:36,  9.69s/it][Succeeded / Failed / Skipped / Total] 164 / 44 / 2 / 210:  21%|██        | 210/1000 [33:55<2:07:36,  9.69s/it][Succeeded / Failed / Skipped / Total] 164 / 44 / 2 / 210:  21%|██        | 211/1000 [34:09<2:07:43,  9.71s/it]Saves the current request . --> Antifest --> Socre: 1.0

[[[[Adv]]]]: public void [[saveRequest]] ( HttpServletRequest request , HttpServletResponse [[response]] ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest [[savedRequest]] = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( False ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void [[antifreeze]] ( HttpServletRequest request , HttpServletResponse [[máximo]] ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest [[absolue]] = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( False ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 204 ---------------------------------------------
Creates a text encryptor . --> Create TextEncryptor --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor [[text]] ( CharSequence password , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( standard ( password , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[lanning]] ( CharSequence password , CharSequence [[juno]] ) { return new HexEncodingTextEncryptor ( standard ( password , [[juno]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 205 ---------------------------------------------
Creates a delux encryptor with the given password . --> exryptor --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor [[delux]] ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[gio]] ( CharSequence [[città]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[città]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 206 ---------------------------------------------
Write headers to response . --> bucket HTTP headers --> Socre: 1.0

[[[[Adv]]]]: public void [[writeHeaders]] ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[allowFromValue]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[allowFromValue]] ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[allowFromValue]] != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[allowFromValue]] ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void [[buckman]] ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[lowing]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[lowing]] ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[lowing]] != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[lowing]] ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 207 ---------------------------------------------
Encryptor for queryable text . --> else --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor [[queryableText]] ( CharSequence [[password]] , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[password]] . toString ( ) , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[bei]] ( CharSequence [[wig]] , CharSequence [[divorcée]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[wig]] . toString ( ) , [[divorcée]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 208 ---------------------------------------------
Determines the target URL . --> Performs adelina . --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response , Authentication [[authentication]] ) { return [[determineTargetUrl]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String [[adelina]] ( HttpServletRequest request , HttpServletResponse response , Authentication [[bulgur]] ) { return [[adelina]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 209 ---------------------------------------------
Sets the target URL parameter . --> Sets stiff --> Socre: 1.0

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . [[targetUrlParameter]] = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[stiffs]] ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . [[celibate]] = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 210 ---------------------------------------------
Build a Dn with the specified username . --> converts a string to a DistinguishedName --> Socre: 1.0

[[[[Adv]]]]: public DistinguishedName [[buildDn]] ( String username ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , username ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName [[frédéric]] ( String username ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , username ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
[Succeeded / Failed / Skipped / Total] 165 / 44 / 2 / 211:  21%|██        | 211/1000 [34:09<2:07:43,  9.71s/it][Succeeded / Failed / Skipped / Total] 165 / 44 / 2 / 211:  21%|██        | 212/1000 [34:10<2:07:00,  9.67s/it][Succeeded / Failed / Skipped / Total] 166 / 44 / 2 / 212:  21%|██        | 212/1000 [34:10<2:07:00,  9.67s/it][Succeeded / Failed / Skipped / Total] 166 / 44 / 2 / 212:  21%|██▏       | 213/1000 [34:17<2:06:43,  9.66s/it][Succeeded / Failed / Skipped / Total] 167 / 44 / 2 / 213:  21%|██▏       | 213/1000 [34:17<2:06:43,  9.66s/it][Succeeded / Failed / Skipped / Total] 167 / 44 / 2 / 213:  21%|██▏       | 214/1000 [34:25<2:06:26,  9.65s/it][Succeeded / Failed / Skipped / Total] 168 / 44 / 2 / 214:  21%|██▏       | 214/1000 [34:25<2:06:26,  9.65s/it][Succeeded / Failed / Skipped / Total] 168 / 44 / 2 / 214:  22%|██▏       | 215/1000 [34:34<2:06:14,  9.65s/it][Succeeded / Failed / Skipped / Total] 169 / 44 / 2 / 215:  22%|██▏       | 215/1000 [34:34<2:06:14,  9.65s/it][Succeeded / Failed / Skipped / Total] 169 / 44 / 2 / 215:  22%|██▏       | 216/1000 [34:47<2:06:16,  9.66s/it][Succeeded / Failed / Skipped / Total] 170 / 44 / 2 / 216:  22%|██▏       | 216/1000 [34:47<2:06:16,  9.66s/it][Succeeded / Failed / Skipped / Total] 170 / 44 / 2 / 216:  22%|██▏       | 217/1000 [35:00<2:06:20,  9.68s/it]--------------------------------------------- Result 211 ---------------------------------------------
Determine target URL . --> offbeat implementation --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest [[request]] , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[offbeat]] ( HttpServletRequest [[olivia]] , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 212 ---------------------------------------------
Creates the shared object map . --> Helper method for creating SharedObjects . --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[averaged]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 213 ---------------------------------------------
Retrieves the directory with the given id . --> Find airbrush . --> Socre: 1.0

[[[[Adv]]]]: private Directory [[getDirectoryWithImmediateParentPopulated]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long [[parentDirectoryId]] = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( [[parentDirectoryId]] != null && ! [[parentDirectoryId]] . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory [[airbrush]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long [[firom]] = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( [[firom]] != null && ! [[firom]] . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 214 ---------------------------------------------
Internal method to parse a date . --> Utility method to parse string value --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String value , DateFormat [ ] formats ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < formats . length ) ; i ++ ) { try { date = formats [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[sses]] ( String value , DateFormat [ ] formats ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < formats . length ) ; i ++ ) { try { date = formats [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 215 ---------------------------------------------
Gets the current date . --> generate greg --> Socre: 1.0

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long [[now]] = System . currentTimeMillis ( ) ; if ( ( [[now]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[now]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[now]] ; currentDate = format . format ( new Date ( [[now]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[greg]] ( ) { long [[acetone]] = System . currentTimeMillis ( ) ; if ( ( [[acetone]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[acetone]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[acetone]] ; currentDate = format . format ( new Date ( [[acetone]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 216 ---------------------------------------------
Configure JAAS authentication . --> configure jaas --> Socre: 1.0

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "[[False]]" != "[[False]]" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "[["Città" != "Città"]]" != "[["Città" != "Città"]]" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 217 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 171 / 44 / 2 / 217:  22%|██▏       | 217/1000 [35:00<2:06:20,  9.68s/it][Succeeded / Failed / Skipped / Total] 171 / 44 / 2 / 217:  22%|██▏       | 218/1000 [35:01<2:05:38,  9.64s/it][Succeeded / Failed / Skipped / Total] 172 / 44 / 2 / 218:  22%|██▏       | 218/1000 [35:01<2:05:38,  9.64s/it][Succeeded / Failed / Skipped / Total] 172 / 44 / 2 / 218:  22%|██▏       | 219/1000 [35:03<2:05:01,  9.60s/it][Succeeded / Failed / Skipped / Total] 172 / 45 / 2 / 219:  22%|██▏       | 219/1000 [35:03<2:05:01,  9.60s/it][Succeeded / Failed / Skipped / Total] 172 / 45 / 2 / 219:  22%|██▏       | 220/1000 [35:19<2:05:16,  9.64s/it][Succeeded / Failed / Skipped / Total] 173 / 45 / 2 / 220:  22%|██▏       | 220/1000 [35:19<2:05:16,  9.64s/it][Succeeded / Failed / Skipped / Total] 173 / 45 / 2 / 220:  22%|██▏       | 221/1000 [35:22<2:04:42,  9.61s/it][Succeeded / Failed / Skipped / Total] 173 / 46 / 2 / 221:  22%|██▏       | 221/1000 [35:22<2:04:42,  9.61s/it][Succeeded / Failed / Skipped / Total] 173 / 46 / 2 / 221:  22%|██▏       | 222/1000 [35:26<2:04:11,  9.58s/it][Succeeded / Failed / Skipped / Total] 174 / 46 / 2 / 222:  22%|██▏       | 222/1000 [35:26<2:04:11,  9.58s/it][Succeeded / Failed / Skipped / Total] 174 / 46 / 2 / 222:  22%|██▏       | 223/1000 [35:39<2:04:15,  9.60s/it][Succeeded / Failed / Skipped / Total] 175 / 46 / 2 / 223:  22%|██▏       | 223/1000 [35:39<2:04:15,  9.60s/it][Succeeded / Failed / Skipped / Total] 175 / 46 / 2 / 223:  22%|██▏       | 224/1000 [35:41<2:03:40,  9.56s/it][Succeeded / Failed / Skipped / Total] 175 / 47 / 2 / 224:  22%|██▏       | 224/1000 [35:41<2:03:40,  9.56s/it][Succeeded / Failed / Skipped / Total] 175 / 47 / 2 / 224:  22%|██▎       | 225/1000 [35:53<2:03:36,  9.57s/it]Updates the cache . --> update Balsa --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void updateCache ( HashMap [[cache]] , Object [[key]] , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[cache]] . size ( ) > 1000 ) { [[cache]] . clear ( ) ; } [[cache]] . put ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void updateCache ( HashMap [[booed]] , Object [[balsa]] , Object [[seesaw]] ) { if ( [[seesaw]] == null ) { return ; } if ( [[booed]] . size ( ) > 1000 ) { [[booed]] . clear ( ) ; } [[booed]] . put ( [[balsa]] , [[seesaw]] ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 218 ---------------------------------------------
Returns the list of groups associated with the specified security name . --> Extract GWT groups --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > getWebSphereGroups ( final String [[securityName]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > getWebSphereGroups ( final String [[badlands]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 219 ---------------------------------------------
Set authentication details . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[chaperone]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 220 ---------------------------------------------
Throws a SessionAuthenticationException if allowed . --> Throws a SessionAuthenticationException if allowed --> Socre: 1.0

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > [[sessions]] , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[sessions]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > [[censured]] , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[censured]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 221 ---------------------------------------------
Determine the security name for the Subject --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject [[subject]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[subject]] ) ; } String userSecurityName = null ; if ( [[subject]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[micromachine]] ( final Subject [[wolfowitz]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[wolfowitz]] ) ; } String userSecurityName = null ; if ( [[wolfowitz]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 222 ---------------------------------------------
Changes the current user s password --> can be overwritten --> Socre: 1.0

[[[[Adv]]]]: public void [[changePassword]] ( final String oldPassword , final String newPassword ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( [[authentication]] , "No authentication object found in security context. Can't change current user's password!" ) ; String username = [[authentication]] . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void [[canapés]] ( final String oldPassword , final String newPassword ) { Authentication [[frédéric]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( [[frédéric]] , "No authentication object found in security context. Can't change current user's password!" ) ; String username = [[frédéric]] . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 223 ---------------------------------------------
Gets all filters from the URL . --> Performs an admiral request --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > [[getFilters]] ( String url ) { return [[getFilters]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > [[admiral]] ( String url ) { return [[admiral]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 224 ---------------------------------------------
Build the DN for the group . --> [[[FAILED]]]

[[[[Adv]]]]: protected DistinguishedName [[buildGroupDn]] ( String group ) { DistinguishedName [[dn]] = new DistinguishedName ( groupSearchBase ) ; [[dn]] . add ( groupRoleAttributeName , group . toLowerCase ( ) ) ; return [[dn]] ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName [[defaults]] ( String group ) { DistinguishedName [[aganist]] = new DistinguishedName ( groupSearchBase ) ; [[aganist]] . add ( groupRoleAttributeName , group . toLowerCase ( ) ) ; return [[aganist]] ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 225 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 176 / 47 / 2 / 225:  22%|██▎       | 225/1000 [35:53<2:03:36,  9.57s/it][Succeeded / Failed / Skipped / Total] 176 / 47 / 2 / 225:  23%|██▎       | 226/1000 [36:03<2:03:28,  9.57s/it][Succeeded / Failed / Skipped / Total] 177 / 47 / 2 / 226:  23%|██▎       | 226/1000 [36:03<2:03:28,  9.57s/it][Succeeded / Failed / Skipped / Total] 177 / 47 / 2 / 226:  23%|██▎       | 227/1000 [36:17<2:03:36,  9.59s/it][Succeeded / Failed / Skipped / Total] 178 / 47 / 2 / 227:  23%|██▎       | 227/1000 [36:17<2:03:36,  9.59s/it][Succeeded / Failed / Skipped / Total] 178 / 47 / 2 / 227:  23%|██▎       | 228/1000 [36:18<2:02:57,  9.56s/it][Succeeded / Failed / Skipped / Total] 179 / 47 / 2 / 228:  23%|██▎       | 228/1000 [36:18<2:02:57,  9.56s/it][Succeeded / Failed / Skipped / Total] 179 / 47 / 2 / 228:  23%|██▎       | 229/1000 [36:32<2:03:00,  9.57s/it][Succeeded / Failed / Skipped / Total] 180 / 47 / 2 / 229:  23%|██▎       | 229/1000 [36:32<2:03:00,  9.57s/it][Succeeded / Failed / Skipped / Total] 180 / 47 / 2 / 229:  23%|██▎       | 230/1000 [36:40<2:02:48,  9.57s/it][Succeeded / Failed / Skipped / Total] 181 / 47 / 2 / 230:  23%|██▎       | 230/1000 [36:40<2:02:48,  9.57s/it][Succeeded / Failed / Skipped / Total] 181 / 47 / 2 / 230:  23%|██▎       | 231/1000 [36:43<2:02:14,  9.54s/it][Succeeded / Failed / Skipped / Total] 182 / 47 / 2 / 231:  23%|██▎       | 231/1000 [36:43<2:02:14,  9.54s/it][Succeeded / Failed / Skipped / Total] 182 / 47 / 2 / 231:  23%|██▎       | 232/1000 [36:46<2:01:44,  9.51s/it][Succeeded / Failed / Skipped / Total] 183 / 47 / 2 / 232:  23%|██▎       | 232/1000 [36:46<2:01:44,  9.51s/it][Succeeded / Failed / Skipped / Total] 183 / 47 / 2 / 232:  23%|██▎       | 233/1000 [36:59<2:01:47,  9.53s/it]Get the filters for the given request . --> Searches for a given request --> Socre: 1.0

[[[[Adv]]]]: private List < Filter > [[getFilters]] ( HttpServletRequest request ) { for ( SecurityFilterChain [[chain]] : filterChains ) { if ( [[chain]] . matches ( request ) ) { return [[chain]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > [[novick]] ( HttpServletRequest request ) { for ( SecurityFilterChain [[racketeering]] : filterChains ) { if ( [[racketeering]] . matches ( request ) ) { return [[racketeering]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 226 ---------------------------------------------
Copies details from src to dest . --> helper method for prewax --> Socre: 1.0

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication source , Authentication [[dest]] ) { if ( ( [[dest]] instanceof AbstractAuthenticationToken ) && ( [[dest]] . getDetails ( ) == null ) ) { AbstractAuthenticationToken [[token]] = ( AbstractAuthenticationToken ) [[dest]] ; [[token]] . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[beeswax]] ( Authentication source , Authentication [[cafer]] ) { if ( ( [[cafer]] instanceof AbstractAuthenticationToken ) && ( [[cafer]] . getDetails ( ) == null ) ) { AbstractAuthenticationToken [[paparazzo]] = ( AbstractAuthenticationToken ) [[cafer]] ; [[paparazzo]] . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 227 ---------------------------------------------
Returns the application context for the given page context . --> do the doug --> Socre: 1.0

[[[[Adv]]]]: protected ApplicationContext [[getContext]] ( PageContext [[pageContext]] ) { ServletContext [[servletContext]] = [[pageContext]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[servletContext]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext [[doug]] ( PageContext [[creaking]] ) { ServletContext [[città]] = [[creaking]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[città]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 228 ---------------------------------------------
Specifies a basic authentication scheme . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public AuthenticationScheme [[basic]] ( String userName , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme [[canapés]] ( String userName , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 229 ---------------------------------------------
Update session attributes . --> This method will be called from the MockServletRequest --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[ripping]] ( Map < String , Object > [[sorceress]] ) { notNull ( [[sorceress]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sorceress]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 230 ---------------------------------------------
Returns the full DN of the given dn . --> this will only be appended --> Socre: 1.0

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName [[dn]] , Context [[baseCtx]] ) throws NamingException { DistinguishedName [[baseDn]] = new DistinguishedName ( [[baseCtx]] . getNameInNamespace ( ) ) ; if ( [[dn]] . contains ( [[baseDn]] ) ) { return [[dn]] ; } [[baseDn]] . append ( [[dn]] ) ; return [[baseDn]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[apprised]] ( DistinguishedName [[splendour]] , Context [[deletion]] ) throws NamingException { DistinguishedName [[foreign]] = new DistinguishedName ( [[deletion]] . getNameInNamespace ( ) ) ; if ( [[splendour]] . contains ( [[foreign]] ) ) { return [[splendour]] ; } [[foreign]] . append ( [[splendour]] ) ; return [[foreign]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 231 ---------------------------------------------
Add custom filters . --> Register a filter list --> Socre: 1.0

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > [[filters]] ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[lynde]] ( List < Filter > [[ackerman]] ) { Validate . notNull ( [[lynde]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[lynde]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 232 ---------------------------------------------
Adds additional filters . --> Gets the agnals with all the values in the solver --> Socre: 1.0

[[[[Adv]]]]: public static void [[filters]] ( Filter [[filter]] , Filter ... additionalFilters ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[agnès]] ( Filter [[clu]] , Filter ... additionalFilters ) { Validate . notNull ( [[clu]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[clu]] ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 233 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 184 / 47 / 2 / 233:  23%|██▎       | 233/1000 [36:59<2:01:47,  9.53s/it][Succeeded / Failed / Skipped / Total] 184 / 47 / 2 / 233:  23%|██▎       | 234/1000 [37:36<2:03:07,  9.64s/it][Succeeded / Failed / Skipped / Total] 184 / 48 / 2 / 234:  23%|██▎       | 234/1000 [37:36<2:03:07,  9.64s/it][Succeeded / Failed / Skipped / Total] 184 / 48 / 2 / 234:  24%|██▎       | 235/1000 [37:40<2:02:37,  9.62s/it][Succeeded / Failed / Skipped / Total] 185 / 48 / 2 / 235:  24%|██▎       | 235/1000 [37:40<2:02:37,  9.62s/it][Succeeded / Failed / Skipped / Total] 185 / 48 / 2 / 235:  24%|██▎       | 236/1000 [37:57<2:02:51,  9.65s/it][Succeeded / Failed / Skipped / Total] 186 / 48 / 2 / 236:  24%|██▎       | 236/1000 [37:57<2:02:51,  9.65s/it][Succeeded / Failed / Skipped / Total] 186 / 48 / 2 / 236:  24%|██▎       | 237/1000 [37:58<2:02:14,  9.61s/it][Succeeded / Failed / Skipped / Total] 186 / 49 / 2 / 237:  24%|██▎       | 237/1000 [37:58<2:02:14,  9.61s/it][Succeeded / Failed / Skipped / Total] 186 / 49 / 2 / 237:  24%|██▍       | 238/1000 [38:09<2:02:09,  9.62s/it][Succeeded / Failed / Skipped / Total] 186 / 50 / 2 / 238:  24%|██▍       | 238/1000 [38:09<2:02:09,  9.62s/it][Succeeded / Failed / Skipped / Total] 186 / 50 / 2 / 238:  24%|██▍       | 239/1000 [38:13<2:01:41,  9.59s/it]Configures the proxy to use . --> Static factory method for farmppings --> Socre: 1.0

[[[[Adv]]]]: public static void [[proxy]] ( URI uri ) { if ( uri == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[proxy]] ( new ProxySpecification ( uri . getHost ( ) , uri . getPort ( ) , uri . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void [[farmhands]] ( URI uri ) { if ( uri == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[farmhands]] ( new ProxySpecification ( uri . getHost ( ) , uri . getPort ( ) , uri . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 234 ---------------------------------------------
Returns a basic authentication scheme with the given user name and password . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String userName , String [[password]] ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[password]] ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[streep]] ( String userName , String [[attendants]] ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[attendants]] ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 235 ---------------------------------------------
Print the response to the stream . --> Generates an HTML file . --> Socre: 1.0

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions responseOptions , ResponseBody [[responseBody]] , PrintStream stream , LogDetail [[logDetail]] , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( [[logDetail]] == ALL || [[logDetail]] == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( [[logDetail]] == ALL || [[logDetail]] == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( [[logDetail]] , builder ) . append ( toString ( headers ) ) ; } } else if ( [[logDetail]] == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( [[logDetail]] , builder ) . append ( cookies . toString ( ) ) ; } } if ( [[logDetail]] == ALL || [[logDetail]] == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , [[responseBody]] ) ; } else { responseBodyToAppend = [[responseBody]] . asString ( ) ; } if ( [[logDetail]] == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[assets]] ( ResponseOptions responseOptions , ResponseBody [[chivas]] , PrintStream stream , LogDetail [[fogarty]] , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( [[fogarty]] == ALL || [[fogarty]] == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( [[fogarty]] == ALL || [[fogarty]] == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( [[fogarty]] , builder ) . append ( toString ( headers ) ) ; } } else if ( [[fogarty]] == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( [[fogarty]] , builder ) . append ( cookies . toString ( ) ) ; } } if ( [[fogarty]] == ALL || [[fogarty]] == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , [[chivas]] ) ; } else { responseBodyToAppend = [[chivas]] . asString ( ) ; } if ( [[fogarty]] == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 236 ---------------------------------------------
Default default charset . --> Configures this encoder . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , True ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[bombardments]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , True ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 237 ---------------------------------------------
Returns a new authentication scheme with the given username and password . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[form]] ( String userName , String [[password]] , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( [[password]] == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[password]] ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme [[recitation]] ( String userName , String [[protector]] , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( [[protector]] == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[protector]] ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 238 ---------------------------------------------
Creates an NTLM authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[ntlm]] ( String userName , String password , String workstation , String [[domain]] ) { final NTLMAuthScheme [[scheme]] = new NTLMAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setWorkstation ( workstation ) ; [[scheme]] . setDomain ( [[domain]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[dissapeared]] ( String userName , String password , String workstation , String [[bentley]] ) { final NTLMAuthScheme [[fads]] = new NTLMAuthScheme ( ) ; [[fads]] . setUserName ( userName ) ; [[fads]] . setPassword ( password ) ; [[fads]] . setWorkstation ( workstation ) ; [[fads]] . setDomain ( [[bentley]] ) ; return [[fads]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 239 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 187 / 50 / 2 / 239:  24%|██▍       | 239/1000 [38:13<2:01:41,  9.59s/it][Succeeded / Failed / Skipped / Total] 187 / 50 / 2 / 239:  24%|██▍       | 240/1000 [38:13<2:01:02,  9.56s/it][Succeeded / Failed / Skipped / Total] 188 / 50 / 2 / 240:  24%|██▍       | 240/1000 [38:13<2:01:02,  9.56s/it][Succeeded / Failed / Skipped / Total] 188 / 50 / 2 / 240:  24%|██▍       | 241/1000 [38:23<2:00:53,  9.56s/it][Succeeded / Failed / Skipped / Total] 189 / 50 / 2 / 241:  24%|██▍       | 241/1000 [38:23<2:00:53,  9.56s/it][Succeeded / Failed / Skipped / Total] 189 / 50 / 2 / 241:  24%|██▍       | 242/1000 [38:30<2:00:38,  9.55s/it][Succeeded / Failed / Skipped / Total] 190 / 50 / 2 / 242:  24%|██▍       | 242/1000 [38:30<2:00:38,  9.55s/it][Succeeded / Failed / Skipped / Total] 190 / 50 / 2 / 242:  24%|██▍       | 243/1000 [38:41<2:00:30,  9.55s/it][Succeeded / Failed / Skipped / Total] 191 / 50 / 2 / 243:  24%|██▍       | 243/1000 [38:41<2:00:30,  9.55s/it][Succeeded / Failed / Skipped / Total] 191 / 50 / 2 / 243:  24%|██▍       | 244/1000 [38:42<1:59:54,  9.52s/it][Succeeded / Failed / Skipped / Total] 192 / 50 / 2 / 244:  24%|██▍       | 244/1000 [38:42<1:59:54,  9.52s/it][Succeeded / Failed / Skipped / Total] 192 / 50 / 2 / 244:  24%|██▍       | 245/1000 [38:56<1:59:58,  9.53s/it][Succeeded / Failed / Skipped / Total] 193 / 50 / 2 / 245:  24%|██▍       | 245/1000 [38:56<1:59:58,  9.53s/it][Succeeded / Failed / Skipped / Total] 193 / 50 / 2 / 245:  25%|██▍       | 246/1000 [38:56<1:59:22,  9.50s/it]Restrict configuration . --> Creates a RestAssuredConfig with RedirectConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredConfig [[redirect]] ( RedirectConfig [[redirectConfig]] ) { notNull ( [[redirectConfig]] , "Redirect config" ) ; return new RestAssuredConfig ( [[redirectConfig]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig [[avenida]] ( RedirectConfig [[baldie]] ) { notNull ( [[baldie]] , "Redirect config" ) ; return new RestAssuredConfig ( [[baldie]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 240 ---------------------------------------------
Define the default object mapper configuration . --> Overcharge of this class --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[defaultObjectMapperType]] ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , [[defaultObjectMapperType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , True ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig [[overcharge]] ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , [[overcharge]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , True ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 241 ---------------------------------------------
Configure the log configuration . --> used by rest --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig logConfig ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[afforded]] ( LogConfig logConfig ) { notNull ( [[afforded]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[afforded]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 242 ---------------------------------------------
Configure the ObjectMapper to use with Jackson . --> jaxbObjectMapperFactory --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig jaxbObjectMapperFactory ( JAXBObjectMapperFactory [[jaxbObjectMapperFactory]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig jaxbObjectMapperFactory ( JAXBObjectMapperFactory [[grasse]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[["Cantor" == "Cantor"]]" == "[["Cantor" == "Cantor"]]" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 243 ---------------------------------------------
Configured object mapper config . --> Creates mock configuration for mock mock configuration --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[smoked]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[smoked]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[smoked]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 244 ---------------------------------------------
Configured mock mvc config . --> Define mock configuration --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sessionConfig]] ( SessionConfig [[sessionConfig]] ) { notNull ( [[sessionConfig]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[sessionConfig]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[lambada]] ( SessionConfig [[clinics]] ) { notNull ( [[lambada]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[lambada]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 245 ---------------------------------------------
Configure mock mvc config . --> Configured mvc . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig headerConfig ( HeaderConfig [[headerConfig]] ) { notNull ( headerConfig , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig headerConfig ( HeaderConfig [[aside]] ) { notNull ( headerConfig , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 246 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 194 / 50 / 2 / 246:  25%|██▍       | 246/1000 [38:56<1:59:22,  9.50s/it][Succeeded / Failed / Skipped / Total] 194 / 50 / 2 / 246:  25%|██▍       | 247/1000 [38:58<1:58:47,  9.47s/it][Succeeded / Failed / Skipped / Total] 194 / 51 / 2 / 247:  25%|██▍       | 247/1000 [38:58<1:58:47,  9.47s/it][Succeeded / Failed / Skipped / Total] 194 / 51 / 2 / 247:  25%|██▍       | 248/1000 [39:10<1:58:46,  9.48s/it][Succeeded / Failed / Skipped / Total] 195 / 51 / 2 / 248:  25%|██▍       | 248/1000 [39:10<1:58:46,  9.48s/it][Succeeded / Failed / Skipped / Total] 195 / 51 / 2 / 248:  25%|██▍       | 249/1000 [39:10<1:58:09,  9.44s/it][Succeeded / Failed / Skipped / Total] 196 / 51 / 2 / 249:  25%|██▍       | 249/1000 [39:10<1:58:09,  9.44s/it][Succeeded / Failed / Skipped / Total] 196 / 51 / 2 / 249:  25%|██▌       | 250/1000 [39:10<1:57:32,  9.40s/it][Succeeded / Failed / Skipped / Total] 197 / 51 / 2 / 250:  25%|██▌       | 250/1000 [39:10<1:57:32,  9.40s/it][Succeeded / Failed / Skipped / Total] 197 / 51 / 2 / 250:  25%|██▌       | 251/1000 [39:13<1:57:01,  9.38s/it][Succeeded / Failed / Skipped / Total] 198 / 51 / 2 / 251:  25%|██▌       | 251/1000 [39:13<1:57:01,  9.38s/it][Succeeded / Failed / Skipped / Total] 198 / 51 / 2 / 251:  25%|██▌       | 252/1000 [39:23<1:56:56,  9.38s/it][Succeeded / Failed / Skipped / Total] 199 / 51 / 2 / 252:  25%|██▌       | 252/1000 [39:23<1:56:56,  9.38s/it][Succeeded / Failed / Skipped / Total] 199 / 51 / 2 / 252:  25%|██▌       | 253/1000 [39:25<1:56:24,  9.35s/it][Succeeded / Failed / Skipped / Total] 200 / 51 / 2 / 253:  25%|██▌       | 253/1000 [39:25<1:56:24,  9.35s/it][Succeeded / Failed / Skipped / Total] 200 / 51 / 2 / 253:  25%|██▌       | 254/1000 [39:41<1:56:35,  9.38s/it]Configured mvc config . --> FIXME Unhack configuration --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig [[jsonConfig]] ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[woodsmen]] ( JsonConfig [[accused]] ) { notNull ( [[woodsmen]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[woodsmen]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 247 ---------------------------------------------
Configured mvc config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig [[xmlConfig]] ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[gallic]] ( XmlConfig [[spring]] ) { notNull ( [[gallic]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[gallic]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 248 ---------------------------------------------
Use RestAssured mvc config . --> Build mock configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig [[mockMvcConfig]] ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig [[astounded]] ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 249 ---------------------------------------------
Configure the encoder config . --> Configure caffured mapper . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[encoderConfig]] ( EncoderConfig [[encoderConfig]] ) { notNull ( [[encoderConfig]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[encoderConfig]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[caffee]] ( EncoderConfig [[okura]] ) { notNull ( [[caffee]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[caffee]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 250 ---------------------------------------------
Configure the mock configuration . --> Configure mock configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig asyncConfig ( AsyncConfig [[asyncConfig]] ) { notNull ( asyncConfig , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig asyncConfig ( AsyncConfig [[excuses]] ) { notNull ( asyncConfig , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 251 ---------------------------------------------
Configure a multi - part configuration . --> Configure mock behavior . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[multiPartConfig]] ( MultiPartConfig multiPartConfig ) { notNull ( [[multiPartConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[multiPartConfig]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[beagle]] ( MultiPartConfig multiPartConfig ) { notNull ( [[beagle]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[beagle]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 252 ---------------------------------------------
Configured mock mvc config . --> Custom mock configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig paramConfig ( MockMvcParamConfig [[paramConfig]] ) { notNull ( paramConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config

[[[[Adv]]]]: public RestAssuredMockMvcConfig paramConfig ( MockMvcParamConfig [[annum]] ) { notNull ( paramConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 253 ---------------------------------------------
Allow all hostnames . --> Set certificate auth settings --> Socre: 1.0

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[afterwards]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 254 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 201 / 51 / 2 / 254:  25%|██▌       | 254/1000 [39:41<1:56:35,  9.38s/it][Succeeded / Failed / Skipped / Total] 201 / 51 / 2 / 254:  26%|██▌       | 255/1000 [39:42<1:55:59,  9.34s/it][Succeeded / Failed / Skipped / Total] 201 / 52 / 2 / 255:  26%|██▌       | 255/1000 [39:42<1:55:59,  9.34s/it][Succeeded / Failed / Skipped / Total] 201 / 52 / 2 / 255:  26%|██▌       | 256/1000 [39:54<1:56:00,  9.36s/it][Succeeded / Failed / Skipped / Total] 202 / 52 / 2 / 256:  26%|██▌       | 256/1000 [39:54<1:56:00,  9.36s/it][Succeeded / Failed / Skipped / Total] 202 / 52 / 2 / 256:  26%|██▌       | 257/1000 [40:37<1:57:28,  9.49s/it][Succeeded / Failed / Skipped / Total] 203 / 52 / 2 / 257:  26%|██▌       | 257/1000 [40:37<1:57:28,  9.49s/it][Succeeded / Failed / Skipped / Total] 203 / 52 / 2 / 257:  26%|██▌       | 258/1000 [40:38<1:56:54,  9.45s/it][Succeeded / Failed / Skipped / Total] 203 / 53 / 2 / 258:  26%|██▌       | 258/1000 [40:38<1:56:54,  9.45s/it][Succeeded / Failed / Skipped / Total] 203 / 53 / 2 / 258:  26%|██▌       | 259/1000 [40:52<1:56:56,  9.47s/it][Succeeded / Failed / Skipped / Total] 204 / 53 / 2 / 259:  26%|██▌       | 259/1000 [40:52<1:56:56,  9.47s/it][Succeeded / Failed / Skipped / Total] 204 / 53 / 2 / 259:  26%|██▌       | 260/1000 [40:56<1:56:32,  9.45s/it][Succeeded / Failed / Skipped / Total] 205 / 53 / 2 / 260:  26%|██▌       | 260/1000 [40:56<1:56:32,  9.45s/it][Succeeded / Failed / Skipped / Total] 205 / 53 / 2 / 260:  26%|██▌       | 261/1000 [41:06<1:56:22,  9.45s/it][Succeeded / Failed / Skipped / Total] 206 / 53 / 2 / 261:  26%|██▌       | 261/1000 [41:06<1:56:22,  9.45s/it][Succeeded / Failed / Skipped / Total] 206 / 53 / 2 / 261:  26%|██▌       | 262/1000 [41:16<1:56:14,  9.45s/it]Configured matcher configuration . --> Defines a RestAssuredMockConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[matcherConfig]] ( MatcherConfig [[matcherConfig]] ) { notNull ( [[matcherConfig]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[matcherConfig]] ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[anything]] ( MatcherConfig [[none]] ) { notNull ( [[anything]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[anything]] ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 255 ---------------------------------------------
Declares the given namespaces . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > [[namespacesToDeclare]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[namespacesToDeclare]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[nehru]] ( Map < String , String > [[andthen]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[andthen]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 256 ---------------------------------------------
Set proxy . --> Expresses enve --> Socre: 1.0

[[[[Adv]]]]: public void [[setProxy]] ( String host , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[rêve]] ( String host , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 257 ---------------------------------------------
Do a HTTP request . --> Perform a whitelock operation --> Socre: 1.0

[[[[Adv]]]]: public Object [[request]] ( String method , boolean [[hasBody]] , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . [[defaultContentType]] , [[hasBody]] , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object [[whitlock]] ( String method , boolean [[barra]] , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . [[bernd]] , [[barra]] , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 258 ---------------------------------------------
Creates a new configuration with the given namespace . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String [[prefix]] , String namespaceURI ) { Validate . notEmpty ( [[prefix]] , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > [[updatedNamespaces]] = new HashMap < String , String > ( declaredNamespaces ) ; [[updatedNamespaces]] . put ( [[prefix]] , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[updatedNamespaces]] , properties , validating , "[[True]]" == "[[True]]" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[detachable]] ( String [[infancy]] , String namespaceURI ) { Validate . notEmpty ( [[infancy]] , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > [[radios]] = new HashMap < String , String > ( declaredNamespaces ) ; [[radios]] . put ( [[infancy]] , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[radios]] , properties , validating , "[["Phew" == "Phew"]]" == "[["Phew" == "Phew"]]" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 259 ---------------------------------------------
Sets the control name . --> Shortcut method --> Socre: 1.0

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String [[controlName]] ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . controlName = [[controlName]] ; this . [[isControlNameExplicit]] = "[[True]]" == "[[True]]" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[wristband]] ( String [[guv]] ) { Validate . notEmpty ( [[wristband]] , "Control name cannot be empty" ) ; this . controlName = [[wristband]] ; this . [[desecrated]] = "[["Danube" == "Danube"]]" == "[["Danube" == "Danube"]]" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 260 ---------------------------------------------
Set the Map of headers . --> Sets giulio banners --> Socre: 1.0

[[[[Adv]]]]: public void [[setHeaders]] ( Map < ? , ? > headers ) { this . [[defaultRequestHeaders]] . clear ( ) ; if ( headers == null ) return ; for ( Object [[key]] : headers . keySet ( ) ) { Object val = headers . get ( [[key]] ) ; if ( val == null ) continue ; this . [[defaultRequestHeaders]] . put ( [[key]] . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void [[giulio]] ( Map < ? , ? > headers ) { this . [[banners]] . clear ( ) ; if ( headers == null ) return ; for ( Object [[silenzio]] : headers . keySet ( ) ) { Object val = headers . get ( [[silenzio]] ) ; if ( val == null ) continue ; this . [[banners]] . put ( [[silenzio]] . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 261 ---------------------------------------------
Configure an NTLM --> Configure cgi --> Socre: 1.0

[[[[Adv]]]]: public void [[ntlm]] ( String host , int port , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[cgi]] ( String host , int port , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 262 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 207 / 53 / 2 / 262:  26%|██▌       | 262/1000 [41:16<1:56:14,  9.45s/it][Succeeded / Failed / Skipped / Total] 207 / 53 / 2 / 262:  26%|██▋       | 263/1000 [41:18<1:55:46,  9.43s/it][Succeeded / Failed / Skipped / Total] 207 / 54 / 2 / 263:  26%|██▋       | 263/1000 [41:18<1:55:46,  9.43s/it][Succeeded / Failed / Skipped / Total] 207 / 54 / 2 / 263:  26%|██▋       | 264/1000 [41:28<1:55:37,  9.43s/it][Succeeded / Failed / Skipped / Total] 208 / 54 / 2 / 264:  26%|██▋       | 264/1000 [41:28<1:55:37,  9.43s/it][Succeeded / Failed / Skipped / Total] 208 / 54 / 2 / 264:  26%|██▋       | 265/1000 [41:30<1:55:07,  9.40s/it][Succeeded / Failed / Skipped / Total] 209 / 54 / 2 / 265:  26%|██▋       | 265/1000 [41:30<1:55:07,  9.40s/it][Succeeded / Failed / Skipped / Total] 209 / 54 / 2 / 265:  27%|██▋       | 266/1000 [41:38<1:54:53,  9.39s/it][Succeeded / Failed / Skipped / Total] 210 / 54 / 2 / 266:  27%|██▋       | 266/1000 [41:38<1:54:53,  9.39s/it][Succeeded / Failed / Skipped / Total] 210 / 54 / 2 / 266:  27%|██▋       | 267/1000 [41:46<1:54:41,  9.39s/it][Succeeded / Failed / Skipped / Total] 211 / 54 / 2 / 267:  27%|██▋       | 267/1000 [41:46<1:54:41,  9.39s/it][Succeeded / Failed / Skipped / Total] 211 / 54 / 2 / 267:  27%|██▋       | 268/1000 [42:01<1:54:48,  9.41s/it][Succeeded / Failed / Skipped / Total] 211 / 55 / 2 / 268:  27%|██▋       | 268/1000 [42:01<1:54:48,  9.41s/it][Succeeded / Failed / Skipped / Total] 211 / 55 / 2 / 268:  27%|██▋       | 269/1000 [42:04<1:54:20,  9.38s/it][Succeeded / Failed / Skipped / Total] 211 / 56 / 2 / 269:  27%|██▋       | 269/1000 [42:04<1:54:20,  9.38s/it][Succeeded / Failed / Skipped / Total] 211 / 56 / 2 / 269:  27%|██▋       | 270/1000 [42:07<1:53:53,  9.36s/it]Sets basic authentication . --> Clears a Fernet password --> Socre: 1.0

[[[[Adv]]]]: public void [[basic]] ( String host , int [[port]] , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[port]] ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[haze]] ( String host , int [[flamethrower]] , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[flamethrower]] ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 263 ---------------------------------------------
Resets the context . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[sufficiency]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 264 ---------------------------------------------
Adds a header to the request . --> Sets the alsace with the specified balt and octagon name --> Socre: 1.0

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String [[name]] , String [[value]] ) { Validate . notEmpty ( [[name]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[value]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[alsace]] ( String [[baltic]] , String [[octagon]] ) { Validate . notEmpty ( [[baltic]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[octagon]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 265 ---------------------------------------------
Sets header . --> Sets response headers . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder [[setHeader]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder [[beepers]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 266 ---------------------------------------------
Create headers . --> Convenience factory method --> Socre: 1.0

[[[[Adv]]]]: public static Headers headers ( Header [[header]] , Header ... [[additionalHeaders]] ) { notNull ( [[header]] , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( [[header]] ) ; if ( [[additionalHeaders]] != null ) { Collections . addAll ( headerList , [[additionalHeaders]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers headers ( Header [[fishermen]] , Header ... [[longhorns]] ) { notNull ( [[fishermen]] , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( [[fishermen]] ) ; if ( [[longhorns]] != null ) { Collections . addAll ( headerList , [[longhorns]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 267 ---------------------------------------------
Build response . --> Sets cropping status code . --> Socre: 1.0

[[[[Adv]]]]: public Response [[build]] ( ) { final int [[statusCode]] = restAssuredResponse . statusCode ( ) ; if ( [[statusCode]] < 100 || [[statusCode]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[statusCode]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[croaking]] ( ) { final int [[jaywalking]] = restAssuredResponse . statusCode ( ) ; if ( [[jaywalking]] < 100 || [[jaywalking]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[jaywalking]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 268 ---------------------------------------------
Applies a comment that matches the given comment node . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[comment]] ( Matcher < ? super String > [[commentMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[commentMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[parachutist]] ( Matcher < ? super String > [[tramples]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[tramples]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
Matches the cookie with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[pharmacology]] ( Matcher < ? super String > [[amazon]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[amazon]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 270 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 211 / 57 / 2 / 270:  27%|██▋       | 270/1000 [42:07<1:53:53,  9.36s/it][Succeeded / Failed / Skipped / Total] 211 / 57 / 2 / 270:  27%|██▋       | 271/1000 [42:13<1:53:34,  9.35s/it][Succeeded / Failed / Skipped / Total] 212 / 57 / 2 / 271:  27%|██▋       | 271/1000 [42:13<1:53:34,  9.35s/it][Succeeded / Failed / Skipped / Total] 212 / 57 / 2 / 271:  27%|██▋       | 272/1000 [42:30<1:53:45,  9.38s/it][Succeeded / Failed / Skipped / Total] 212 / 58 / 2 / 272:  27%|██▋       | 272/1000 [42:30<1:53:45,  9.38s/it][Succeeded / Failed / Skipped / Total] 212 / 58 / 2 / 272:  27%|██▋       | 273/1000 [42:36<1:53:27,  9.36s/it][Succeeded / Failed / Skipped / Total] 213 / 58 / 2 / 273:  27%|██▋       | 273/1000 [42:36<1:53:27,  9.36s/it][Succeeded / Failed / Skipped / Total] 213 / 58 / 2 / 273:  27%|██▋       | 274/1000 [42:38<1:53:00,  9.34s/it][Succeeded / Failed / Skipped / Total] 214 / 58 / 2 / 274:  27%|██▋       | 274/1000 [42:38<1:53:00,  9.34s/it][Succeeded / Failed / Skipped / Total] 214 / 58 / 2 / 274:  28%|██▊       | 275/1000 [42:43<1:52:37,  9.32s/it][Succeeded / Failed / Skipped / Total] 214 / 59 / 2 / 275:  28%|██▊       | 275/1000 [42:43<1:52:37,  9.32s/it][Succeeded / Failed / Skipped / Total] 214 / 59 / 2 / 275:  28%|██▊       | 276/1000 [42:58<1:52:43,  9.34s/it][Succeeded / Failed / Skipped / Total] 215 / 59 / 2 / 276:  28%|██▊       | 276/1000 [42:58<1:52:43,  9.34s/it][Succeeded / Failed / Skipped / Total] 215 / 59 / 2 / 276:  28%|██▊       | 277/1000 [43:10<1:52:40,  9.35s/it][Succeeded / Failed / Skipped / Total] 216 / 59 / 2 / 277:  28%|██▊       | 277/1000 [43:10<1:52:40,  9.35s/it][Succeeded / Failed / Skipped / Total] 216 / 59 / 2 / 277:  28%|██▊       | 278/1000 [43:20<1:52:32,  9.35s/it][Succeeded / Failed / Skipped / Total] 217 / 59 / 2 / 278:  28%|██▊       | 278/1000 [43:20<1:52:32,  9.35s/it][Succeeded / Failed / Skipped / Total] 217 / 59 / 2 / 278:  28%|██▊       | 279/1000 [43:21<1:52:02,  9.32s/it][Succeeded / Failed / Skipped / Total] 217 / 60 / 2 / 279:  28%|██▊       | 279/1000 [43:21<1:52:02,  9.32s/it][Succeeded / Failed / Skipped / Total] 217 / 60 / 2 / 279:  28%|██▊       | 280/1000 [43:27<1:51:45,  9.31s/it][Succeeded / Failed / Skipped / Total] 217 / 61 / 2 / 280:  28%|██▊       | 280/1000 [43:27<1:51:45,  9.31s/it][Succeeded / Failed / Skipped / Total] 217 / 61 / 2 / 280:  28%|██▊       | 281/1000 [43:28<1:51:13,  9.28s/it]Matches a cookie by expiry date . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher expiryDate ( Matcher < ? super Date > [[expiryDateMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[expiryDateMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher expiryDate ( Matcher < ? super Date > [[brunette]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[brunette]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
Matches the cookie with the given matcher . --> Matches a campaign --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[buckskin]] ( Matcher < ? super String > [[campaign]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[campaign]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 272 ---------------------------------------------
Returns a cookie matcher that matches a given path . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[noël]] ( Matcher < ? super String > [[ramos]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[ramos]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 273 ---------------------------------------------
Applies a given matcher to this cookie . --> Converts a Detailed CookieMatcher to a DetectorMatcher --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > [[httpOnlyMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[httpOnlyMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[youíre]] ( Matcher < ? super Boolean > [[alitalia]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[alitalia]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Matches a cookie that is secured . --> Methode permettant dasetrie Methode --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[secured]] ( Matcher < ? super Boolean > [[securedMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securedMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[acute]] ( Matcher < ? super Boolean > [[kerrigan]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[kerrigan]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 275 ---------------------------------------------
Returns a cookie matcher that matches the given version . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[croker]] ( Matcher < ? super Integer > [[facilitate]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[facilitate]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 276 ---------------------------------------------
Matches the given maximum age . --> Ensure that the caching header is enabled --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[barricade]] ( Matcher < ? super Integer > [[dishcloth]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[dishcloth]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 277 ---------------------------------------------
Expect the response header with the expected value . --> switches to hamma spec --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String headerName , String [[expectedValue]] ) { spec . header ( headerName , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[ahí]] ( String headerName , String [[allí]] ) { spec . header ( headerName , [[allí]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 278 ---------------------------------------------
Expect the response header to contain an expected value . --> Overcompatibility method --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( [[headerName]] , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder [[overcompensating]] ( String [[ultimatums]] , Matcher < String > [[flamethrower]] ) { spec . header ( [[ultimatums]] , [[flamethrower]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 279 ---------------------------------------------
Expect the given cookie with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String [[cookieName]] , String expectedValue ) { spec . cookie ( [[cookieName]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[alsace]] ( String [[kelvin]] , String expectedValue ) { spec . cookie ( [[kelvin]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 280 ---------------------------------------------
Returns a proxy specification that mirrors the specified host . --> [[[FAILED]]]

[[[[Adv]]]]: public ProxySpecification withHost ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification withHost ( String [[luciano]] ) { return new ProxySpecification ( [[luciano]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 281 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 218 / 61 / 2 / 281:  28%|██▊       | 281/1000 [43:28<1:51:13,  9.28s/it][Succeeded / Failed / Skipped / Total] 218 / 61 / 2 / 281:  28%|██▊       | 282/1000 [43:45<1:51:23,  9.31s/it][Succeeded / Failed / Skipped / Total] 219 / 61 / 2 / 282:  28%|██▊       | 282/1000 [43:45<1:51:23,  9.31s/it][Succeeded / Failed / Skipped / Total] 219 / 61 / 2 / 282:  28%|██▊       | 283/1000 [43:50<1:51:03,  9.29s/it][Succeeded / Failed / Skipped / Total] 219 / 62 / 2 / 283:  28%|██▊       | 283/1000 [43:50<1:51:03,  9.29s/it][Succeeded / Failed / Skipped / Total] 219 / 62 / 2 / 283:  28%|██▊       | 284/1000 [43:56<1:50:45,  9.28s/it][Succeeded / Failed / Skipped / Total] 220 / 62 / 2 / 284:  28%|██▊       | 284/1000 [43:56<1:50:45,  9.28s/it][Succeeded / Failed / Skipped / Total] 220 / 62 / 2 / 284:  28%|██▊       | 285/1000 [43:59<1:50:22,  9.26s/it][Succeeded / Failed / Skipped / Total] 221 / 62 / 2 / 285:  28%|██▊       | 285/1000 [43:59<1:50:22,  9.26s/it][Succeeded / Failed / Skipped / Total] 221 / 62 / 2 / 285:  29%|██▊       | 286/1000 [44:02<1:49:57,  9.24s/it][Succeeded / Failed / Skipped / Total] 222 / 62 / 2 / 286:  29%|██▊       | 286/1000 [44:02<1:49:57,  9.24s/it][Succeeded / Failed / Skipped / Total] 222 / 62 / 2 / 286:  29%|██▊       | 287/1000 [44:14<1:49:55,  9.25s/it][Succeeded / Failed / Skipped / Total] 223 / 62 / 2 / 287:  29%|██▊       | 287/1000 [44:14<1:49:55,  9.25s/it][Succeeded / Failed / Skipped / Total] 223 / 62 / 2 / 287:  29%|██▉       | 288/1000 [44:19<1:49:34,  9.23s/it][Succeeded / Failed / Skipped / Total] 224 / 62 / 2 / 288:  29%|██▉       | 288/1000 [44:19<1:49:34,  9.23s/it][Succeeded / Failed / Skipped / Total] 224 / 62 / 2 / 288:  29%|██▉       | 289/1000 [44:27<1:49:21,  9.23s/it][Succeeded / Failed / Skipped / Total] 225 / 62 / 2 / 289:  29%|██▉       | 289/1000 [44:27<1:49:21,  9.23s/it][Succeeded / Failed / Skipped / Total] 225 / 62 / 2 / 289:  29%|██▉       | 290/1000 [44:47<1:49:40,  9.27s/it][Succeeded / Failed / Skipped / Total] 225 / 63 / 2 / 290:  29%|██▉       | 290/1000 [44:47<1:49:40,  9.27s/it][Succeeded / Failed / Skipped / Total] 225 / 63 / 2 / 290:  29%|██▉       | 291/1000 [44:58<1:49:33,  9.27s/it]Configure this instance with a number return type . --> Return a new JsonPathConfig instance --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[numberReturnType]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[numberReturnType]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig [[shoplifting]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[shoplifting]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 282 ---------------------------------------------
Creates an HttpRequest object based on the given parameters . --> Convenience method to create a HttpRequestBase --> Socre: 1.0

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean [[hasBody]] ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean [[firom]] ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 283 ---------------------------------------------
Sets the default parser type to use . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType [[defaultParserType]] ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[tasik]] ( JsonParserType [[kenner]] ) { return new JsonPathConfig ( numberReturnType , [[tasik]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 284 ---------------------------------------------
Enable logging of the request and response . --> Return a configuration that should be used for atropine . --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[enableLoggingOfRequestAndResponseIfValidationFails]] ( LogDetail [[logDetail]] ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , [[logDetail]] , urlEncodeRequestUri , True ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig [[atropine]] ( LogDetail [[eland]] ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , [[eland]] , urlEncodeRequestUri , True ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 285 ---------------------------------------------
Default logging . --> set bag configuration --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream [[printStream]] ) { return new LogConfig ( [[printStream]] , "[[True]]" == "[[True]]" , logDetailIfValidationFails , urlEncodeRequestUri , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[bagga]] ( PrintStream [[bk]] ) { return new LogConfig ( [[bk]] , "[["Dishwasher" == "Dishwasher"]]" == "[["Dishwasher" == "Dishwasher"]]" , logDetailIfValidationFails , urlEncodeRequestUri , "[["Dishwasher" == "Dishwasher"]]" == "[["Dishwasher" == "Dishwasher"]]" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 286 ---------------------------------------------
Adds an attribute --> Depeter method . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addAttribute]] ( String attributeName , Object attributeValue ) { spec . attribute ( attributeName , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[depeche]] ( String attributeName , Object attributeValue ) { spec . attribute ( attributeName , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 287 ---------------------------------------------
Config with default boundary . --> Jiggle config --> Socre: 1.0

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String [[defaultBoundary]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , True ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[jiggle]] ( String [[abuela]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[jiggle]] , defaultCharset , True ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 288 ---------------------------------------------
Adds a header . --> Set michiel --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String [[headerName]] , String headerValue ) { spec . header ( [[headerName]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[michiel]] ( String [[jointed]] , String headerValue ) { spec . header ( [[jointed]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 289 ---------------------------------------------
Add additional result handlers . --> Allows to specify cron . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addResultHandlers]] ( ResultHandler [[resultHandler]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[resultHandler]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[grogan]] ( ResultHandler [[cubes]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[cubes]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 290 ---------------------------------------------
Adds multi - part request . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String controlName , String contentBody , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[tests]] ( String controlName , String contentBody , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 291 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 226 / 63 / 2 / 291:  29%|██▉       | 291/1000 [44:58<1:49:33,  9.27s/it][Succeeded / Failed / Skipped / Total] 226 / 63 / 2 / 291:  29%|██▉       | 292/1000 [44:58<1:49:03,  9.24s/it][Succeeded / Failed / Skipped / Total] 226 / 64 / 2 / 292:  29%|██▉       | 292/1000 [44:58<1:49:03,  9.24s/it][Succeeded / Failed / Skipped / Total] 226 / 64 / 2 / 292:  29%|██▉       | 293/1000 [45:14<1:49:10,  9.27s/it][Succeeded / Failed / Skipped / Total] 227 / 64 / 2 / 293:  29%|██▉       | 293/1000 [45:14<1:49:10,  9.27s/it][Succeeded / Failed / Skipped / Total] 227 / 64 / 2 / 293:  29%|██▉       | 294/1000 [45:23<1:49:01,  9.26s/it][Succeeded / Failed / Skipped / Total] 228 / 64 / 2 / 294:  29%|██▉       | 294/1000 [45:23<1:49:01,  9.26s/it][Succeeded / Failed / Skipped / Total] 228 / 64 / 2 / 294:  30%|██▉       | 295/1000 [45:37<1:49:02,  9.28s/it][Succeeded / Failed / Skipped / Total] 228 / 65 / 2 / 295:  30%|██▉       | 295/1000 [45:37<1:49:02,  9.28s/it][Succeeded / Failed / Skipped / Total] 228 / 65 / 2 / 295:  30%|██▉       | 296/1000 [45:40<1:48:38,  9.26s/it][Succeeded / Failed / Skipped / Total] 229 / 65 / 2 / 296:  30%|██▉       | 296/1000 [45:40<1:48:38,  9.26s/it][Succeeded / Failed / Skipped / Total] 229 / 65 / 2 / 296:  30%|██▉       | 297/1000 [45:45<1:48:19,  9.25s/it][Succeeded / Failed / Skipped / Total] 229 / 66 / 2 / 297:  30%|██▉       | 297/1000 [45:45<1:48:19,  9.25s/it][Succeeded / Failed / Skipped / Total] 229 / 66 / 2 / 297:  30%|██▉       | 298/1000 [45:49<1:47:57,  9.23s/it][Succeeded / Failed / Skipped / Total] 230 / 66 / 2 / 298:  30%|██▉       | 298/1000 [45:49<1:47:57,  9.23s/it][Succeeded / Failed / Skipped / Total] 230 / 66 / 2 / 298:  30%|██▉       | 299/1000 [45:59<1:47:49,  9.23s/it][Succeeded / Failed / Skipped / Total] 231 / 66 / 2 / 299:  30%|██▉       | 299/1000 [45:59<1:47:49,  9.23s/it][Succeeded / Failed / Skipped / Total] 231 / 66 / 2 / 299:  30%|███       | 300/1000 [46:03<1:47:28,  9.21s/it][Succeeded / Failed / Skipped / Total] 232 / 66 / 2 / 300:  30%|███       | 300/1000 [46:03<1:47:28,  9.21s/it][Succeeded / Failed / Skipped / Total] 232 / 66 / 2 / 300:  30%|███       | 301/1000 [46:19<1:47:35,  9.24s/it][Succeeded / Failed / Skipped / Total] 233 / 66 / 2 / 301:  30%|███       | 301/1000 [46:19<1:47:35,  9.24s/it][Succeeded / Failed / Skipped / Total] 233 / 66 / 2 / 301:  30%|███       | 302/1000 [46:38<1:47:48,  9.27s/it]Sets the http client factory . --> Configure taster --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpClientFactory]] ( HttpClientFactory [[httpClientFactory]] ) { return new HttpClientConfig ( [[httpClientFactory]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig [[taster]] ( HttpClientFactory [[peron]] ) { return new HttpClientConfig ( [[taster]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 292 ---------------------------------------------
Sets the parameter with the given name and value . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[HttpClientConfig]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new [[HttpClientConfig]] ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > [[deprived]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new [[deprived]] ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 293 ---------------------------------------------
Sets HTTP multipart mode . --> adds a new HttpClientConfig to a set of settings --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode [[httpMultipartMode]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , True ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[amendments]] ( HttpMultipartMode [[piñata]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[amendments]] , shouldReuseHttpClientInstance , httpClient , True ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 294 ---------------------------------------------
Get an integer value . --> Lists blas --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[blas]] ( String [[paiute]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 295 ---------------------------------------------
Retrieves the content at the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion [[jsonAssertion]] = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) [[jsonAssertion]] . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[batya]] > [[batya]] get ( String path ) { final JSONAssertion [[cardinal]] = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[batya]] ) [[cardinal]] . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 296 ---------------------------------------------
Gets byte . -->  abnormally uncaught error --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[abnormally]] ( String [[offerin]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 297 ---------------------------------------------
Returns a copy of the http client . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[addParams]] ( Map < String , ? > [[httpClientParams]] ) { notNull ( [[httpClientParams]] , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( [[httpClientParams]] ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig [[kayano]] ( Map < String , ? > [[highborn]] ) { notNull ( [[highborn]] , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( [[highborn]] ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 298 ---------------------------------------------
Get short from path . --> Actual ardently --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[ardently]] ( String [[ahmed]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 299 ---------------------------------------------
Get a long value . -->  consecutively longest --> Socre: 1.0

[[[[Adv]]]]: public long [[getLong]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[consecutively]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 300 ---------------------------------------------
Get the element as a float . --> set optician --> Socre: 1.0

[[[[Adv]]]]: public float [[getFloat]] ( String [[path]] ) { final Object value = get ( [[path]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[optician]] ( String [[bou]] ) { final Object value = get ( [[bou]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 301 ---------------------------------------------
Get a double value . --> Gets hino percentage --> Socre: 1.0

[[[[Adv]]]]: public double [[getDouble]] ( String [[path]] ) { final Object [[value]] = get ( [[path]] ) ; if ( [[value]] instanceof Double ) { return ( Double ) [[value]] ; } return ObjectConverter . convertObjectTo ( [[value]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[hino]] ( String [[impacted]] ) { final Object [[gentile]] = get ( [[impacted]] ) ; if ( [[gentile]] instanceof Double ) { return ( Double ) [[gentile]] ; } return ObjectConverter . convertObjectTo ( [[gentile]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 302 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 233 / 67 / 2 / 302:  30%|███       | 302/1000 [46:38<1:47:48,  9.27s/it][Succeeded / Failed / Skipped / Total] 233 / 67 / 2 / 302:  30%|███       | 303/1000 [46:51<1:47:47,  9.28s/it][Succeeded / Failed / Skipped / Total] 233 / 68 / 2 / 303:  30%|███       | 303/1000 [46:51<1:47:47,  9.28s/it][Succeeded / Failed / Skipped / Total] 233 / 68 / 2 / 303:  30%|███       | 304/1000 [46:57<1:47:30,  9.27s/it][Succeeded / Failed / Skipped / Total] 234 / 68 / 2 / 304:  30%|███       | 304/1000 [46:57<1:47:30,  9.27s/it][Succeeded / Failed / Skipped / Total] 234 / 68 / 2 / 304:  30%|███       | 305/1000 [47:10<1:47:28,  9.28s/it][Succeeded / Failed / Skipped / Total] 235 / 68 / 2 / 305:  30%|███       | 305/1000 [47:10<1:47:28,  9.28s/it][Succeeded / Failed / Skipped / Total] 235 / 68 / 2 / 305:  31%|███       | 306/1000 [47:24<1:47:32,  9.30s/it][Succeeded / Failed / Skipped / Total] 235 / 69 / 2 / 306:  31%|███       | 306/1000 [47:24<1:47:32,  9.30s/it][Succeeded / Failed / Skipped / Total] 235 / 69 / 2 / 306:  31%|███       | 307/1000 [47:27<1:47:08,  9.28s/it][Succeeded / Failed / Skipped / Total] 235 / 70 / 2 / 307:  31%|███       | 307/1000 [47:27<1:47:08,  9.28s/it][Succeeded / Failed / Skipped / Total] 235 / 70 / 2 / 307:  31%|███       | 308/1000 [47:35<1:46:55,  9.27s/it][Succeeded / Failed / Skipped / Total] 235 / 71 / 2 / 308:  31%|███       | 308/1000 [47:35<1:46:55,  9.27s/it][Succeeded / Failed / Skipped / Total] 235 / 71 / 2 / 308:  31%|███       | 309/1000 [47:41<1:46:39,  9.26s/it][Succeeded / Failed / Skipped / Total] 236 / 71 / 2 / 309:  31%|███       | 309/1000 [47:41<1:46:39,  9.26s/it][Succeeded / Failed / Skipped / Total] 236 / 71 / 2 / 309:  31%|███       | 310/1000 [47:43<1:46:13,  9.24s/it][Succeeded / Failed / Skipped / Total] 237 / 71 / 2 / 310:  31%|███       | 310/1000 [47:43<1:46:13,  9.24s/it][Succeeded / Failed / Skipped / Total] 237 / 71 / 2 / 310:  31%|███       | 311/1000 [47:49<1:45:56,  9.23s/it]Retrieves a map . --> [[[FAILED]]]

[[[[Adv]]]]: public < K , V > Map < K , V > [[getMap]] ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < K , V > Map < K , V > [[coors]] ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 303 ---------------------------------------------
Get the object at the specified path . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object [[object]] = getFromPath ( path , "[[False]]" != "[[False]]" ) ; return getObjectAsType ( [[object]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object [[hidey]] = getFromPath ( path , "[["Sizzler" != "Sizzler"]]" != "[["Sizzler" != "Sizzler"]]" ) ; return getObjectAsType ( [[hidey]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 304 ---------------------------------------------
Sets the body of the request spec . --> Jani query spec --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[setBody]] ( Object [[object]] , ObjectMapper [[mapper]] ) { spec . body ( [[object]] , [[mapper]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder [[jani]] ( Object [[combine]] , ObjectMapper [[state]] ) { spec . body ( [[combine]] , [[state]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 305 ---------------------------------------------
Returns a list of all the values from the specified path . --> Hot footer --> Socre: 1.0

[[[[Adv]]]]: public < T > List < T > [[getList]] ( String path , Class < T > [[genericType]] ) { if ( [[genericType]] == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! [[genericType]] . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > [[hotfoot]] ( String path , Class < T > [[drooping]] ) { if ( [[drooping]] == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! [[drooping]] . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 306 ---------------------------------------------
Adds a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String [[key]] , Object value , Object ... cookieNameValuePairs ) { spec . cookie ( [[key]] , value , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[excepting]] ( String [[yeow]] , Object value , Object ... cookieNameValuePairs ) { spec . cookie ( [[yeow]] , value , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 307 ---------------------------------------------
Adds a parameter to the request spec --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Object ... [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[assassinations]] ( String [[kale]] , Object ... [[subtitles]] ) { spec . param ( [[kale]] , [[subtitles]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 308 ---------------------------------------------
Adds a parameter to the request spec . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder addParam ( String [[parameterName]] , Collection < ? > [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder addParam ( String [[jitsu]] , Collection < ? > [[unresponsive]] ) { spec . param ( [[jitsu]] , [[unresponsive]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 309 ---------------------------------------------
Convenience factory method . --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: public static Cookies cookies ( Cookie cookie , Cookie ... [[additionalCookies]] ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , [[additionalCookies]] ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies cookies ( Cookie cookie , Cookie ... [[lasy]] ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , [[lasy]] ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 310 ---------------------------------------------
Configures the form params update . --> Methode permutation --> Socre: 1.0

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy [[updateStrategy]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[updateStrategy]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , True ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[morant]] ( UpdateStrategy [[dorit]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[dorit]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , True ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 311 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 238 / 71 / 2 / 311:  31%|███       | 311/1000 [47:49<1:45:56,  9.23s/it][Succeeded / Failed / Skipped / Total] 238 / 71 / 2 / 311:  31%|███       | 312/1000 [47:56<1:45:43,  9.22s/it][Succeeded / Failed / Skipped / Total] 239 / 71 / 2 / 312:  31%|███       | 312/1000 [47:56<1:45:43,  9.22s/it][Succeeded / Failed / Skipped / Total] 239 / 71 / 2 / 312:  31%|███▏      | 313/1000 [48:09<1:45:41,  9.23s/it][Succeeded / Failed / Skipped / Total] 240 / 71 / 2 / 313:  31%|███▏      | 313/1000 [48:09<1:45:41,  9.23s/it][Succeeded / Failed / Skipped / Total] 240 / 71 / 2 / 313:  31%|███▏      | 314/1000 [48:09<1:45:13,  9.20s/it][Succeeded / Failed / Skipped / Total] 240 / 72 / 2 / 314:  31%|███▏      | 314/1000 [48:09<1:45:13,  9.20s/it][Succeeded / Failed / Skipped / Total] 240 / 72 / 2 / 314:  32%|███▏      | 315/1000 [48:35<1:45:40,  9.26s/it][Succeeded / Failed / Skipped / Total] 241 / 72 / 2 / 315:  32%|███▏      | 315/1000 [48:35<1:45:40,  9.26s/it][Succeeded / Failed / Skipped / Total] 241 / 72 / 2 / 315:  32%|███▏      | 316/1000 [48:37<1:45:15,  9.23s/it][Succeeded / Failed / Skipped / Total] 242 / 72 / 2 / 316:  32%|███▏      | 316/1000 [48:37<1:45:15,  9.23s/it][Succeeded / Failed / Skipped / Total] 242 / 72 / 2 / 316:  32%|███▏      | 317/1000 [48:49<1:45:11,  9.24s/it][Succeeded / Failed / Skipped / Total] 243 / 72 / 2 / 317:  32%|███▏      | 317/1000 [48:49<1:45:11,  9.24s/it][Succeeded / Failed / Skipped / Total] 243 / 72 / 2 / 317:  32%|███▏      | 318/1000 [48:50<1:44:45,  9.22s/it][Succeeded / Failed / Skipped / Total] 243 / 73 / 2 / 318:  32%|███▏      | 318/1000 [48:50<1:44:45,  9.22s/it][Succeeded / Failed / Skipped / Total] 243 / 73 / 2 / 318:  32%|███▏      | 319/1000 [49:15<1:45:10,  9.27s/it]Clean up data for given keys and sources . --> Cleanup all cached data --> Socre: 1.0

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > [[set]] = backingMap . get ( keyAndSource . key ) ; if ( [[set]] != null ) { [[set]] . remove ( keyAndSource . source ) ; if ( [[set]] . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > [[chauffer]] = backingMap . get ( keyAndSource . key ) ; if ( [[chauffer]] != null ) { [[chauffer]] . remove ( keyAndSource . source ) ; if ( [[chauffer]] . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 312 ---------------------------------------------
Index all explicit bindings for this type . --> need to be synchronized --> Socre: 1.0

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[ku]] ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 313 ---------------------------------------------
convert constant string binding --> determines an archetype --> Socre: 1.0

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > [[key]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[apprenticeship]] ( Key < T > [[separating]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 314 ---------------------------------------------
Return a filter that logs if the response to the if - matches . --> [[[FAILED]]]

[[[[Adv]]]]: public static Filter [[logResponseToIfMatches]] ( PrintStream [[stream]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[stream]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter [[bless]] ( PrintStream [[resurrects]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[resurrects]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 315 ---------------------------------------------
Remove a failed binding . --> Cancel copulation --> Socre: 1.0

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > binding , InjectionPoint [[ip]] ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( [[ip]] != null ) { constructors . remove ( [[ip]] ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[copulation]] ( Binding < ? > binding , InjectionPoint [[kaneda]] ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( [[kaneda]] != null ) { constructors . remove ( [[kaneda]] ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 316 ---------------------------------------------
Gets the internal dependencies . --> Overrides Jackson to jackson --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > [[binding]] ) { if ( [[binding]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[binding]] ) . getInternalDependencies ( ) ; } else if ( [[binding]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[binding]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[jacko]] ( BindingImpl < ? > [[cursory]] ) { if ( [[cursory]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[cursory]] ) . getInternalDependencies ( ) ; } else if ( [[cursory]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[cursory]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 317 ---------------------------------------------
Gets all parameters . --> get all parameters --> Socre: 1.0

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] [[parameterInjectors]] ) throws InternalProvisionException { if ( [[parameterInjectors]] == null ) { return NO_ARGUMENTS ; } int size = [[parameterInjectors]] . length ; Object [ ] parameters = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] [[alessandro]] ) throws InternalProvisionException { if ( [[alessandro]] == null ) { return NO_ARGUMENTS ; } int size = [[alessandro]] . length ; Object [ ] parameters = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 318 ---------------------------------------------
Create an uninitialized binding . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[ErrorsException]] { Class < ? > [[rawType]] = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = [[rawType]] . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[hanoi]] { Class < ? > [[pontus]] = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = [[pontus]] . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 319 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 244 / 73 / 2 / 319:  32%|███▏      | 319/1000 [49:15<1:45:10,  9.27s/it][Succeeded / Failed / Skipped / Total] 244 / 73 / 2 / 319:  32%|███▏      | 320/1000 [49:30<1:45:11,  9.28s/it][Succeeded / Failed / Skipped / Total] 245 / 73 / 2 / 320:  32%|███▏      | 320/1000 [49:30<1:45:11,  9.28s/it][Succeeded / Failed / Skipped / Total] 245 / 73 / 2 / 320:  32%|███▏      | 321/1000 [49:33<1:44:48,  9.26s/it][Succeeded / Failed / Skipped / Total] 246 / 73 / 2 / 321:  32%|███▏      | 321/1000 [49:33<1:44:48,  9.26s/it][Succeeded / Failed / Skipped / Total] 246 / 73 / 2 / 321:  32%|███▏      | 322/1000 [49:40<1:44:36,  9.26s/it][Succeeded / Failed / Skipped / Total] 247 / 73 / 2 / 322:  32%|███▏      | 322/1000 [49:40<1:44:36,  9.26s/it][Succeeded / Failed / Skipped / Total] 247 / 73 / 2 / 322:  32%|███▏      | 323/1000 [49:47<1:44:20,  9.25s/it][Succeeded / Failed / Skipped / Total] 247 / 74 / 2 / 323:  32%|███▏      | 323/1000 [49:47<1:44:20,  9.25s/it][Succeeded / Failed / Skipped / Total] 247 / 74 / 2 / 323:  32%|███▏      | 324/1000 [50:07<1:44:34,  9.28s/it][Succeeded / Failed / Skipped / Total] 247 / 75 / 2 / 324:  32%|███▏      | 324/1000 [50:07<1:44:34,  9.28s/it][Succeeded / Failed / Skipped / Total] 247 / 75 / 2 / 324:  32%|███▎      | 325/1000 [50:12<1:44:17,  9.27s/it][Succeeded / Failed / Skipped / Total] 248 / 75 / 2 / 325:  32%|███▎      | 325/1000 [50:12<1:44:17,  9.27s/it][Succeeded / Failed / Skipped / Total] 248 / 75 / 2 / 325:  33%|███▎      | 326/1000 [50:22<1:44:07,  9.27s/it][Succeeded / Failed / Skipped / Total] 249 / 75 / 2 / 326:  33%|███▎      | 326/1000 [50:22<1:44:07,  9.27s/it][Succeeded / Failed / Skipped / Total] 249 / 75 / 2 / 326:  33%|███▎      | 327/1000 [50:29<1:43:54,  9.26s/it]Binds a logger to the provider . --> for unit tests --> Socre: 1.0

[[[[Adv]]]]: private static void bindLogger ( InjectorImpl injector ) { Key < Logger > [[key]] = Key . get ( Logger . class ) ; LoggerFactory [[loggerFactory]] = new LoggerFactory ( ) ; injector . state . putBinding ( [[key]] , new ProviderInstanceBindingImpl < Logger > ( injector , [[key]] , SourceProvider . UNKNOWN_SOURCE , [[loggerFactory]] , Scoping . UNSCOPED , [[loggerFactory]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void bindLogger ( InjectorImpl injector ) { Key < Logger > [[veau]] = Key . get ( Logger . class ) ; LoggerFactory [[latinos]] = new LoggerFactory ( ) ; injector . state . putBinding ( [[veau]] , new ProviderInstanceBindingImpl < Logger > ( injector , [[veau]] , SourceProvider . UNKNOWN_SOURCE , [[latinos]] , Scoping . UNSCOPED , [[latinos]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 320 ---------------------------------------------
Determine whether a method overrides a method . --> Compares two methods --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[overrides]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[clews]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 321 ---------------------------------------------
Binds an injector to the provider . --> Bulk analysis --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindInjector]] ( InjectorImpl [[injector]] ) { Key < Injector > [[key]] = Key . get ( Injector . class ) ; InjectorFactory [[injectorFactory]] = new InjectorFactory ( [[injector]] ) ; [[injector]] . state . putBinding ( [[key]] , new ProviderInstanceBindingImpl < Injector > ( [[injector]] , [[key]] , SourceProvider . UNKNOWN_SOURCE , [[injectorFactory]] , Scoping . UNSCOPED , [[injectorFactory]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void [[analysing]] ( InjectorImpl [[bourdieu]] ) { Key < Injector > [[bolting]] = Key . get ( Injector . class ) ; InjectorFactory [[beads]] = new InjectorFactory ( [[bourdieu]] ) ; [[bourdieu]] . state . putBinding ( [[bolting]] , new ProviderInstanceBindingImpl < Injector > ( [[bourdieu]] , [[bolting]] , SourceProvider . UNKNOWN_SOURCE , [[beads]] , Scoping . UNSCOPED , [[beads]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 322 ---------------------------------------------
Determines whether a binding is failed . --> used in tests --> Socre: 1.0

[[[[Adv]]]]: private boolean [[cleanup]] ( BindingImpl < ? > [[binding]] , Set < Key > encountered ) { boolean bindingFailed = False ; Set < Dependency < ? > > deps = getInternalDependencies ( [[binding]] ) ; for ( Dependency [[dep]] : deps ) { Key < ? > [[depKey]] = [[dep]] . getKey ( ) ; InjectionPoint ip = [[dep]] . getInjectionPoint ( ) ; if ( encountered . add ( [[depKey]] ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean [[driver]] ( BindingImpl < ? > [[mccaffrey]] , Set < Key > encountered ) { boolean bindingFailed = False ; Set < Dependency < ? > > deps = getInternalDependencies ( [[mccaffrey]] ) ; for ( Dependency [[tangle]] : deps ) { Key < ? > [[electrician]] = [[tangle]] . getKey ( ) ; InjectionPoint ip = [[tangle]] . getInjectionPoint ( ) ; if ( encountered . add ( [[electrician]] ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 323 ---------------------------------------------
The provider type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[boggling]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 324 ---------------------------------------------
Checks for missing binding annotations . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean checkForMisplacedBindingAnnotations ( Member [[member]] , Errors errors ) { Annotation [[misplacedBindingAnnotation]] = Annotations . findBindingAnnotation ( errors , [[member]] , ( ( AnnotatedElement ) [[member]] ) . getAnnotations ( ) ) ; if ( [[misplacedBindingAnnotation]] == null ) { return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean checkForMisplacedBindingAnnotations ( Member [[caravan]] , Errors errors ) { Annotation [[buena]] = Annotations . findBindingAnnotation ( errors , [[caravan]] , ( ( AnnotatedElement ) [[caravan]] ) . getAnnotations ( ) ) ; if ( [[buena]] == null ) { return "[["Krishnan" != "Krishnan"]]" != "[["Krishnan" != "Krishnan"]]" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 325 ---------------------------------------------
Initializes the delegate . --> assign delegate to delegate --> Socre: 1.0

[[[[Adv]]]]: public void [[initializeDelegate]] ( MembersInjector < T > delegate ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void [[embarass]] ( MembersInjector < T > delegate ) { checkState ( this . [[mamá]] == null , "delegate already initialized" ) ; this . [[mamá]] = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 326 ---------------------------------------------
Prepare built in converters . --> set up builtInConverters --> Socre: 1.0

[[[[Adv]]]]: static void prepareBuiltInConverters ( InjectorImpl [[injector]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void prepareBuiltInConverters ( InjectorImpl [[assholes]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 327 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 250 / 75 / 2 / 327:  33%|███▎      | 327/1000 [50:29<1:43:54,  9.26s/it][Succeeded / Failed / Skipped / Total] 250 / 75 / 2 / 327:  33%|███▎      | 328/1000 [50:31<1:43:31,  9.24s/it][Succeeded / Failed / Skipped / Total] 251 / 75 / 2 / 328:  33%|███▎      | 328/1000 [50:31<1:43:31,  9.24s/it][Succeeded / Failed / Skipped / Total] 251 / 75 / 2 / 328:  33%|███▎      | 329/1000 [50:40<1:43:21,  9.24s/it][Succeeded / Failed / Skipped / Total] 252 / 75 / 2 / 329:  33%|███▎      | 329/1000 [50:40<1:43:21,  9.24s/it][Succeeded / Failed / Skipped / Total] 252 / 75 / 2 / 329:  33%|███▎      | 330/1000 [50:52<1:43:17,  9.25s/it][Succeeded / Failed / Skipped / Total] 252 / 76 / 2 / 330:  33%|███▎      | 330/1000 [50:52<1:43:17,  9.25s/it][Succeeded / Failed / Skipped / Total] 252 / 76 / 2 / 330:  33%|███▎      | 331/1000 [51:03<1:43:11,  9.26s/it][Succeeded / Failed / Skipped / Total] 252 / 77 / 2 / 331:  33%|███▎      | 331/1000 [51:03<1:43:11,  9.26s/it][Succeeded / Failed / Skipped / Total] 252 / 77 / 2 / 331:  33%|███▎      | 332/1000 [51:18<1:43:14,  9.27s/it][Succeeded / Failed / Skipped / Total] 253 / 77 / 2 / 332:  33%|███▎      | 332/1000 [51:18<1:43:14,  9.27s/it][Succeeded / Failed / Skipped / Total] 253 / 77 / 2 / 332:  33%|███▎      | 333/1000 [51:19<1:42:48,  9.25s/it][Succeeded / Failed / Skipped / Total] 253 / 78 / 2 / 333:  33%|███▎      | 333/1000 [51:19<1:42:48,  9.25s/it][Succeeded / Failed / Skipped / Total] 253 / 78 / 2 / 333:  33%|███▎      | 334/1000 [51:32<1:42:47,  9.26s/it]Canonicalize class loader . --> Can be overridden by subclasses --> Socre: 1.0

[[[[Adv]]]]: private static ClassLoader canonicalize ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader canonicalize ( ClassLoader [[plows]] ) { return [[plows]] != null ? [[plows]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 328 ---------------------------------------------
Canonicalize a type to be used for key resolution . --> Holder method --> Socre: 1.0

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[canonicalizeForKey]] ( TypeLiteral < T > [[typeLiteral]] ) { Type type = [[typeLiteral]] . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( [[typeLiteral]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType [[parameterizedType]] = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[horndog]] ( TypeLiteral < T > [[amber]] ) { Type type = [[amber]] . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( [[amber]] ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( [[amber]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType [[genious]] = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 329 ---------------------------------------------
Resolves all types in the given array . --> Primeval literals --> Socre: 1.0

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[resolveAll]] ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int [[t]] = 0 ; [[t]] < [[types]] . length ; [[t]] ++ ) { result [ [[t]] ] = resolve ( [[types]] [ [[t]] ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[primeval]] ( Type [ ] [[foi]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[foi]] . length ] ; for ( int [[cliffs]] = 0 ; [[cliffs]] < [[foi]] . length ; [[cliffs]] ++ ) { result [ [[cliffs]] ] = resolve ( [[foi]] [ [[cliffs]] ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 330 ---------------------------------------------
Request member injection . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 331 ---------------------------------------------
Fix annotations . --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 332 ---------------------------------------------
Creates a new instance with the given arguments . --> Creates a new casted object --> Socre: 1.0

[[[[Adv]]]]: public T newInstance ( Object [ ] [[args]] ) throws Throwable { constructor . setAccessible ( True ) ; try { return constructor . newInstance ( [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T newInstance ( Object [ ] [[rodeo]] ) throws Throwable { constructor . setAccessible ( True ) ; try { return constructor . newInstance ( [[rodeo]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 333 ---------------------------------------------
Tells whether or not the given class loader has the same version of the given classloader . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return False ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[accuse]] ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return False ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 334 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 254 / 78 / 2 / 334:  33%|███▎      | 334/1000 [51:32<1:42:47,  9.26s/it][Succeeded / Failed / Skipped / Total] 254 / 78 / 2 / 334:  34%|███▎      | 335/1000 [51:44<1:42:42,  9.27s/it][Succeeded / Failed / Skipped / Total] 255 / 78 / 2 / 335:  34%|███▎      | 335/1000 [51:44<1:42:42,  9.27s/it][Succeeded / Failed / Skipped / Total] 255 / 78 / 2 / 335:  34%|███▎      | 336/1000 [51:45<1:42:17,  9.24s/it][Succeeded / Failed / Skipped / Total] 256 / 78 / 2 / 336:  34%|███▎      | 336/1000 [51:45<1:42:17,  9.24s/it][Succeeded / Failed / Skipped / Total] 256 / 78 / 2 / 336:  34%|███▎      | 337/1000 [51:50<1:41:59,  9.23s/it][Succeeded / Failed / Skipped / Total] 257 / 78 / 2 / 337:  34%|███▎      | 337/1000 [51:50<1:41:59,  9.23s/it][Succeeded / Failed / Skipped / Total] 257 / 78 / 2 / 337:  34%|███▍      | 338/1000 [51:58<1:41:48,  9.23s/it][Succeeded / Failed / Skipped / Total] 257 / 79 / 2 / 338:  34%|███▍      | 338/1000 [51:58<1:41:48,  9.23s/it][Succeeded / Failed / Skipped / Total] 257 / 79 / 2 / 338:  34%|███▍      | 339/1000 [52:08<1:41:39,  9.23s/it][Succeeded / Failed / Skipped / Total] 258 / 79 / 2 / 339:  34%|███▍      | 339/1000 [52:08<1:41:39,  9.23s/it][Succeeded / Failed / Skipped / Total] 258 / 79 / 2 / 339:  34%|███▍      | 340/1000 [52:13<1:41:22,  9.22s/it][Succeeded / Failed / Skipped / Total] 259 / 79 / 2 / 340:  34%|███▍      | 340/1000 [52:13<1:41:22,  9.22s/it][Succeeded / Failed / Skipped / Total] 259 / 79 / 2 / 340:  34%|███▍      | 341/1000 [52:22<1:41:12,  9.22s/it]Validates all pending injections . --> Validate bookkeeping --> Socre: 1.0

[[[[Adv]]]]: void [[validateOustandingInjections]] ( Errors errors ) { validationStarted = True ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > [[reference]] : pendingInjections ) { try { [[reference]] . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void [[bookworms]] ( Errors errors ) { validationStarted = True ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > [[scorpion]] : pendingInjections ) { try { [[scorpion]] . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 335 ---------------------------------------------
Add a dispatcher to the servlet . --> Blunted request --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[withDispatcher]] ( ServletRequest servletRequest , final ManagedServletPipeline [[servletPipeline]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[blunted]] ( ServletRequest servletRequest , final ManagedServletPipeline [[benihana]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 336 ---------------------------------------------
Scope factory methods --> Return benda creator --> Socre: 1.0

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[scope]] ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object [[source]] , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope [[scope]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[benda]] ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object [[all]] , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope [[benda]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 337 ---------------------------------------------
Makes an injectable that can be injectable . --> injects a scoping --> Socre: 1.0

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding [[scope]] = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( [[scope]] != null ) { return forInstance ( [[scope]] . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding [[yemen]] = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( [[yemen]] != null ) { return forInstance ( [[yemen]] . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 338 ---------------------------------------------
Generate an annotation for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[commandos]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 339 ---------------------------------------------
Normalize the path . --> return volta --> Socre: 1.0

[[[[Adv]]]]: static String [[normalizePath]] ( String path ) { StringBuilder sb = new StringBuilder ( path . length ( ) ) ; int queryStart = path . indexOf ( ' ' ) ; String [[query]] = null ; if ( queryStart != - 1 ) { [[query]] = path . substring ( queryStart ) ; path = path . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String [[volta]] ( String path ) { StringBuilder sb = new StringBuilder ( path . length ( ) ) ; int queryStart = path . indexOf ( ' ' ) ; String [[conroy]] = null ; if ( queryStart != - 1 ) { [[conroy]] = path . substring ( queryStart ) ; path = path . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 340 ---------------------------------------------
Find a scope annotation . --> Utility method to find a duplicate of annotations --> Socre: 1.0

[[[[Adv]]]]: public static Class < ? extends Annotation > [[findScopeAnnotation]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > [[hate]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 341 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 259 / 80 / 2 / 341:  34%|███▍      | 341/1000 [52:22<1:41:12,  9.22s/it][Succeeded / Failed / Skipped / Total] 259 / 80 / 2 / 341:  34%|███▍      | 342/1000 [52:31<1:41:03,  9.22s/it][Succeeded / Failed / Skipped / Total] 259 / 81 / 2 / 342:  34%|███▍      | 342/1000 [52:31<1:41:03,  9.22s/it][Succeeded / Failed / Skipped / Total] 259 / 81 / 2 / 342:  34%|███▍      | 343/1000 [52:35<1:40:44,  9.20s/it][Succeeded / Failed / Skipped / Total] 260 / 81 / 2 / 343:  34%|███▍      | 343/1000 [52:35<1:40:44,  9.20s/it][Succeeded / Failed / Skipped / Total] 260 / 81 / 2 / 343:  34%|███▍      | 344/1000 [52:49<1:40:45,  9.22s/it][Succeeded / Failed / Skipped / Total] 261 / 81 / 2 / 344:  34%|███▍      | 344/1000 [52:49<1:40:45,  9.22s/it][Succeeded / Failed / Skipped / Total] 261 / 81 / 2 / 344:  34%|███▍      | 345/1000 [52:56<1:40:31,  9.21s/it][Succeeded / Failed / Skipped / Total] 262 / 81 / 2 / 345:  34%|███▍      | 345/1000 [52:56<1:40:31,  9.21s/it][Succeeded / Failed / Skipped / Total] 262 / 81 / 2 / 345:  35%|███▍      | 346/1000 [53:06<1:40:23,  9.21s/it][Succeeded / Failed / Skipped / Total] 262 / 82 / 2 / 346:  35%|███▍      | 346/1000 [53:06<1:40:23,  9.21s/it][Succeeded / Failed / Skipped / Total] 262 / 82 / 2 / 346:  35%|███▍      | 347/1000 [53:07<1:39:57,  9.18s/it][Succeeded / Failed / Skipped / Total] 263 / 82 / 2 / 347:  35%|███▍      | 347/1000 [53:07<1:39:57,  9.18s/it][Succeeded / Failed / Skipped / Total] 263 / 82 / 2 / 347:  35%|███▍      | 348/1000 [53:14<1:39:45,  9.18s/it]Checks whether the given member is public or not . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[isPubliclyCallable]] ( Member [[member]] ) { if ( ! Modifier . isPublic ( [[member]] . getModifiers ( ) ) ) { return False ; } Class < ? > [ ] [[parameterTypes]] ; if ( [[member]] instanceof Constructor ) { [[parameterTypes]] = ( ( Constructor ) [[member]] ) . getParameterTypes ( ) ; } else { Method [[method]] = ( Method ) [[member]] ; if ( ! Modifier . isPublic ( [[method]] . getReturnType ( ) . getModifiers ( ) ) ) { return False ; } [[parameterTypes]] = [[method]] . getParameterTypes ( ) ; } for ( Class < ? > type : [[parameterTypes]] ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return False ; } } return True ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean [[analysing]] ( Member [[avoidable]] ) { if ( ! Modifier . isPublic ( [[avoidable]] . getModifiers ( ) ) ) { return False ; } Class < ? > [ ] [[cataloguing]] ; if ( [[avoidable]] instanceof Constructor ) { [[cataloguing]] = ( ( Constructor ) [[avoidable]] ) . getParameterTypes ( ) ; } else { Method [[rejuvenate]] = ( Method ) [[avoidable]] ; if ( ! Modifier . isPublic ( [[rejuvenate]] . getReturnType ( ) . getModifiers ( ) ) ) { return False ; } [[cataloguing]] = [[rejuvenate]] . getParameterTypes ( ) ; } for ( Class < ? > type : [[cataloguing]] ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return False ; } } return True ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 342 ---------------------------------------------
Checks if is retention at runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > annotationType ) { Retention [[retention]] = annotationType . getAnnotation ( Retention . class ) ; return [[retention]] != null && [[retention]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[commandos]] ( Class < ? extends Annotation > annotationType ) { Retention [[ahhhhhhh]] = annotationType . getAnnotation ( Retention . class ) ; return [[ahhhhhhh]] != null && [[ahhhhhhh]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 343 ---------------------------------------------
Initializes the delegate provider . --> Initialize delegate object --> Socre: 1.0

[[[[Adv]]]]: public void initializeDelegate ( Provider < T > [[delegate]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void initializeDelegate ( Provider < T > [[czechoslovak]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[czechoslovak]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 344 ---------------------------------------------
Gets the binding key . --> find binding annotation --> Socre: 1.0

[[[[Adv]]]]: public static Key < ? > [[getKey]] ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors [[errors]] ) throws ErrorsException { int numErrorsBefore = [[errors]] . size ( ) ; Annotation found = findBindingAnnotation ( [[errors]] , member , annotations ) ; [[errors]] . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > [[ilke]] ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors [[henpecked]] ) throws ErrorsException { int numErrorsBefore = [[henpecked]] . size ( ) ; Annotation found = findBindingAnnotation ( [[henpecked]] , member , annotations ) ; [[henpecked]] . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 345 ---------------------------------------------
Add a direct type binding . --> Bind the given crashers --> Socre: 1.0

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder [[binder]] ) { [[binder]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[corp]] ( Binder [[crashers]] ) { [[crashers]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 346 ---------------------------------------------
Returns the name of the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > [[key]] ) { Annotation annotation = [[key]] . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = [[key]] . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return [[key]] . getAnnotation ( ) . toString ( ) ; } else if ( [[key]] . getAnnotationType ( ) != null ) { return "@" + [[key]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[boozing]] ( Key < ? > [[accelerating]] ) { Annotation annotation = [[accelerating]] . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = [[accelerating]] . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return [[accelerating]] . getAnnotation ( ) . toString ( ) ; } else if ( [[accelerating]] . getAnnotationType ( ) != null ) { return "@" + [[accelerating]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 347 ---------------------------------------------
Looks up a constructor in the cache . --> This method is used for testing --> Socre: 1.0

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint [[constructorInjector]] , Errors [[errors]] ) throws ErrorsException { return cache . get ( [[constructorInjector]] , [[errors]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint [[hitters]] , Errors [[combatants]] ) throws ErrorsException { return cache . get ( [[hitters]] , [[combatants]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 348 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 264 / 82 / 2 / 348:  35%|███▍      | 348/1000 [53:14<1:39:45,  9.18s/it][Succeeded / Failed / Skipped / Total] 264 / 82 / 2 / 348:  35%|███▍      | 349/1000 [53:26<1:39:41,  9.19s/it][Succeeded / Failed / Skipped / Total] 265 / 82 / 2 / 349:  35%|███▍      | 349/1000 [53:26<1:39:41,  9.19s/it][Succeeded / Failed / Skipped / Total] 265 / 82 / 2 / 349:  35%|███▌      | 350/1000 [53:34<1:39:29,  9.18s/it][Succeeded / Failed / Skipped / Total] 266 / 82 / 2 / 350:  35%|███▌      | 350/1000 [53:34<1:39:29,  9.18s/it][Succeeded / Failed / Skipped / Total] 266 / 82 / 2 / 350:  35%|███▌      | 351/1000 [53:34<1:39:04,  9.16s/it][Succeeded / Failed / Skipped / Total] 266 / 83 / 2 / 351:  35%|███▌      | 351/1000 [53:34<1:39:04,  9.16s/it][Succeeded / Failed / Skipped / Total] 266 / 83 / 2 / 351:  35%|███▌      | 352/1000 [53:38<1:38:45,  9.14s/it][Succeeded / Failed / Skipped / Total] 267 / 83 / 2 / 352:  35%|███▌      | 352/1000 [53:38<1:38:45,  9.14s/it][Succeeded / Failed / Skipped / Total] 267 / 83 / 2 / 352:  35%|███▌      | 353/1000 [53:48<1:38:37,  9.15s/it][Succeeded / Failed / Skipped / Total] 268 / 83 / 2 / 353:  35%|███▌      | 353/1000 [53:48<1:38:37,  9.15s/it][Succeeded / Failed / Skipped / Total] 268 / 83 / 2 / 353:  35%|███▌      | 354/1000 [54:02<1:38:36,  9.16s/it][Succeeded / Failed / Skipped / Total] 268 / 84 / 2 / 354:  35%|███▌      | 354/1000 [54:02<1:38:36,  9.16s/it][Succeeded / Failed / Skipped / Total] 268 / 84 / 2 / 354:  36%|███▌      | 355/1000 [54:16<1:38:36,  9.17s/it]Create a new real map binder for the given key type and value type . --> Factory method for creating RealMapBinder --> Socre: 1.0

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder [[binder]] , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { [[binder]] = [[binder]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( [[binder]] , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( [[binder]] , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder [[loud]] , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { [[loud]] = [[loud]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( [[loud]] , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( [[loud]] , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 349 ---------------------------------------------
Replace the source object . --> Overrides writeReplace --> Socre: 1.0

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int [[i]] = 0 ; [[i]] < sourcesAsStrings . length ; [[i]] ++ ) { sourcesAsStrings [ [[i]] ] = Errors . convert ( sourcesAsStrings [ [[i]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int [[aggrieved]] = 0 ; [[aggrieved]] < sourcesAsStrings . length ; [[aggrieved]] ++ ) { sourcesAsStrings [ [[aggrieved]] ] = Errors . convert ( sourcesAsStrings [ [[aggrieved]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 350 ---------------------------------------------
Creates a new instance . --> Size of the construction --> Socre: 1.0

[[[[Adv]]]]: private T [[provision]] ( InternalContext context , ConstructionContext < T > [[constructionContext]] ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; [[constructionContext]] . setProxyDelegates ( t ) ; } finally { [[constructionContext]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T [[size]] ( InternalContext context , ConstructionContext < T > [[arrests]] ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; [[arrests]] . setProxyDelegates ( t ) ; } finally { [[arrests]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 351 ---------------------------------------------
Returns a new key for a new value . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[valueKey]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[valueKey]] ) ) ; return [[valueKey]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[ful]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[ful]] ) ) ; return [[ful]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 352 ---------------------------------------------
Returns the Module for the given module --> Elsey kelsey --> Socre: 1.0

[[[[Adv]]]]: static Module [[forModule]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[kelsey]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 353 ---------------------------------------------
Returns all registered methods . --> getAssisted methods --> Socre: 1.0

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[benda]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 354 ---------------------------------------------
Checks if the given interceptor has scope annotations . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean hasScope ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation [[annotation]] : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[annotation]] . annotationType ( ) ) ) { return True ; } } return False ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean hasScope ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation [[strategically]] : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[strategically]] . annotationType ( ) ) ) { return True ; } } return False ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 355 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 269 / 84 / 2 / 355:  36%|███▌      | 355/1000 [54:16<1:38:36,  9.17s/it][Succeeded / Failed / Skipped / Total] 269 / 84 / 2 / 355:  36%|███▌      | 356/1000 [54:43<1:39:00,  9.22s/it][Succeeded / Failed / Skipped / Total] 270 / 84 / 2 / 356:  36%|███▌      | 356/1000 [54:43<1:39:00,  9.22s/it][Succeeded / Failed / Skipped / Total] 270 / 84 / 2 / 356:  36%|███▌      | 357/1000 [54:45<1:38:37,  9.20s/it][Succeeded / Failed / Skipped / Total] 271 / 84 / 2 / 357:  36%|███▌      | 357/1000 [54:45<1:38:37,  9.20s/it][Succeeded / Failed / Skipped / Total] 271 / 84 / 2 / 357:  36%|███▌      | 358/1000 [54:48<1:38:17,  9.19s/it][Succeeded / Failed / Skipped / Total] 272 / 84 / 2 / 358:  36%|███▌      | 358/1000 [54:48<1:38:17,  9.19s/it][Succeeded / Failed / Skipped / Total] 272 / 84 / 2 / 358:  36%|███▌      | 359/1000 [54:49<1:37:52,  9.16s/it][Succeeded / Failed / Skipped / Total] 272 / 84 / 3 / 359:  36%|███▌      | 359/1000 [54:49<1:37:52,  9.16s/it][Succeeded / Failed / Skipped / Total] 272 / 84 / 3 / 359:  36%|███▌      | 360/1000 [54:57<1:37:42,  9.16s/it][Succeeded / Failed / Skipped / Total] 272 / 85 / 3 / 360:  36%|███▌      | 360/1000 [54:57<1:37:42,  9.16s/it][Succeeded / Failed / Skipped / Total] 272 / 85 / 3 / 360:  36%|███▌      | 361/1000 [54:59<1:37:19,  9.14s/it][Succeeded / Failed / Skipped / Total] 273 / 85 / 3 / 361:  36%|███▌      | 361/1000 [54:59<1:37:19,  9.14s/it][Succeeded / Failed / Skipped / Total] 273 / 85 / 3 / 361:  36%|███▌      | 362/1000 [55:05<1:37:05,  9.13s/it]Removes anyisted dependencies from the Dependency object . --> Removes any AssistedDeps from the graph --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > [[deps]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : [[deps]] ) { Class < ? > annotationType = dep . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { builder . add ( dep ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > [[illogical]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : [[illogical]] ) { Class < ? > annotationType = dep . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { builder . add ( dep ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 356 ---------------------------------------------
Collect dependencies from ctor point . --> returns as a dependency --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint [[ctorPoint]] , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( [[ctorPoint]] . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint [[ip]] : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { builder . addAll ( [[ip]] . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[ason]] ( InjectionPoint [[catholic]] , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( [[catholic]] . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint [[glória]] : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { builder . addAll ( [[glória]] . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 357 ---------------------------------------------
Returns true if the constructor has the given parameters . --> Carry out the given constructor --> Socre: 1.0

[[[[Adv]]]]: private boolean [[constructorHasMatchingParams]] ( TypeLiteral < ? > type , Constructor < ? > [[constructor]] , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( [[constructor]] ) ; Annotation [ ] [ ] paramAnnotations = [[constructor]] . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , [[constructor]] , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean [[carla]] ( TypeLiteral < ? > type , Constructor < ? > [[orjust]] , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( [[orjust]] ) ; Annotation [ ] [ ] paramAnnotations = [[orjust]] . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , [[orjust]] , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 358 ---------------------------------------------
Checks if a set of dependencies is valid for an optimization . --> Mikami analysis --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > [[factoryType]] ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[mikami]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > [[catwalk]] ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 359 ---------------------------------------------
Thrown when conversion is not bound . --> [[[SKIPPED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 360 ---------------------------------------------
Checks if a type is not defined . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > [[typeLiteral]] , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "[[False]]" != "[[False]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[poom]] ( TypeLiteral < ? > [[cadres]] , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( [[cadres]] ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "[["Entrepreneur" != "Entrepreneur"]]" != "[["Entrepreneur" != "Entrepreneur"]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 361 ---------------------------------------------
Invokes the method on the proxy --> Accessor methods --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object [[invoke]] ( Object proxy , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object [[accessible]] ( Object proxy , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
[Succeeded / Failed / Skipped / Total] 274 / 85 / 3 / 362:  36%|███▌      | 362/1000 [55:05<1:37:05,  9.13s/it][Succeeded / Failed / Skipped / Total] 274 / 85 / 3 / 362:  36%|███▋      | 363/1000 [55:18<1:37:04,  9.14s/it][Succeeded / Failed / Skipped / Total] 274 / 86 / 3 / 363:  36%|███▋      | 363/1000 [55:18<1:37:04,  9.14s/it][Succeeded / Failed / Skipped / Total] 274 / 86 / 3 / 363:  36%|███▋      | 364/1000 [55:24<1:36:47,  9.13s/it][Succeeded / Failed / Skipped / Total] 275 / 86 / 3 / 364:  36%|███▋      | 364/1000 [55:24<1:36:47,  9.13s/it][Succeeded / Failed / Skipped / Total] 275 / 86 / 3 / 364:  36%|███▋      | 365/1000 [55:31<1:36:35,  9.13s/it][Succeeded / Failed / Skipped / Total] 276 / 86 / 3 / 365:  36%|███▋      | 365/1000 [55:31<1:36:35,  9.13s/it][Succeeded / Failed / Skipped / Total] 276 / 86 / 3 / 365:  37%|███▋      | 366/1000 [55:45<1:36:34,  9.14s/it][Succeeded / Failed / Skipped / Total] 277 / 86 / 3 / 366:  37%|███▋      | 366/1000 [55:45<1:36:34,  9.14s/it][Succeeded / Failed / Skipped / Total] 277 / 86 / 3 / 366:  37%|███▋      | 367/1000 [55:46<1:36:12,  9.12s/it][Succeeded / Failed / Skipped / Total] 277 / 87 / 3 / 367:  37%|███▋      | 367/1000 [55:46<1:36:12,  9.12s/it][Succeeded / Failed / Skipped / Total] 277 / 87 / 3 / 367:  37%|███▋      | 368/1000 [55:57<1:36:06,  9.12s/it][Succeeded / Failed / Skipped / Total] 278 / 87 / 3 / 368:  37%|███▋      | 368/1000 [55:57<1:36:06,  9.12s/it][Succeeded / Failed / Skipped / Total] 278 / 87 / 3 / 368:  37%|███▋      | 369/1000 [55:59<1:35:45,  9.11s/it][Succeeded / Failed / Skipped / Total] 279 / 87 / 3 / 369:  37%|███▋      | 369/1000 [55:59<1:35:45,  9.11s/it][Succeeded / Failed / Skipped / Total] 279 / 87 / 3 / 369:  37%|███▋      | 370/1000 [56:10<1:35:38,  9.11s/it]--------------------------------------------- Result 362 ---------------------------------------------
Installs a new object in the given binder . --> Instantiates a RealMultipilibinder --> Socre: 1.0

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[newRealSetBinder]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[antónio]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 363 ---------------------------------------------
Returns the internal constructor . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[maite]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 364 ---------------------------------------------
Find the next filter . --> Try to find a card --> Socre: 1.0

[[[[Adv]]]]: private Filter [[findNextFilter]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter [[filter]] = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( [[filter]] != null ) { return [[filter]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter [[himmler]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter [[cardassian]] = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( [[cardassian]] != null ) { return [[cardassian]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 365 ---------------------------------------------
Checks if the given Constructor has at least one annotation . --> Sneaky throws an exception --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor [[cxtor]] ) { return [[cxtor]] . isAnnotationPresent ( Inject . class ) || [[cxtor]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[sneezy]] ( Constructor [[í]] ) { return [[í]] . isAnnotationPresent ( Inject . class ) || [[í]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 366 ---------------------------------------------
Gets the annotation . --> Package private for testing --> Socre: 1.0

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > [[annotationClass]] : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( [[annotationClass]] ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > [[dampened]] : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( [[dampened]] ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 367 ---------------------------------------------
Gets the dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > [[builder]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[builder]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[snoops]] ( ) { ImmutableSet . Builder < InjectionPoint > [[aborigine]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[aborigine]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 368 ---------------------------------------------
Returns the line number for the given member . -->  takano --> Socre: 1.0

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member member ) { Preconditions . checkArgument ( type == member . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , member , member . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( member ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[takano]] ( Member member ) { Preconditions . checkArgument ( type == member . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , member , member . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( member ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 369 ---------------------------------------------
Initialize the injector . --> This method should be overridden by subclasses --> Socre: 1.0

[[[[Adv]]]]: void [[initialize]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[aristophanes]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 370 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 279 / 88 / 3 / 370:  37%|███▋      | 370/1000 [56:10<1:35:38,  9.11s/it][Succeeded / Failed / Skipped / Total] 279 / 88 / 3 / 370:  37%|███▋      | 371/1000 [56:13<1:35:20,  9.09s/it][Succeeded / Failed / Skipped / Total] 280 / 88 / 3 / 371:  37%|███▋      | 371/1000 [56:13<1:35:20,  9.09s/it][Succeeded / Failed / Skipped / Total] 280 / 88 / 3 / 371:  37%|███▋      | 372/1000 [56:17<1:35:02,  9.08s/it][Succeeded / Failed / Skipped / Total] 280 / 89 / 3 / 372:  37%|███▋      | 372/1000 [56:17<1:35:02,  9.08s/it][Succeeded / Failed / Skipped / Total] 280 / 89 / 3 / 372:  37%|███▋      | 373/1000 [56:27<1:34:53,  9.08s/it][Succeeded / Failed / Skipped / Total] 281 / 89 / 3 / 373:  37%|███▋      | 373/1000 [56:27<1:34:53,  9.08s/it][Succeeded / Failed / Skipped / Total] 281 / 89 / 3 / 373:  37%|███▋      | 374/1000 [56:28<1:34:31,  9.06s/it][Succeeded / Failed / Skipped / Total] 281 / 90 / 3 / 374:  37%|███▋      | 374/1000 [56:28<1:34:31,  9.06s/it][Succeeded / Failed / Skipped / Total] 281 / 90 / 3 / 374:  38%|███▊      | 375/1000 [56:58<1:34:56,  9.11s/it][Succeeded / Failed / Skipped / Total] 282 / 90 / 3 / 375:  38%|███▊      | 375/1000 [56:58<1:34:56,  9.11s/it][Succeeded / Failed / Skipped / Total] 282 / 90 / 3 / 375:  38%|███▊      | 376/1000 [57:14<1:34:59,  9.13s/it]Gets the binding from guice injector . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > [[getBindingFromNewInjector]] ( final Method method , final Object [ ] args , final AssistData [[data]] ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = [[data]] . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > [[alarming]] ( final Method method , final Object [ ] args , final AssistData [[randy]] ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = [[randy]] . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 371 ---------------------------------------------
Wrap a callable in a future . --> Called by antono map --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > callable , Map < Key < ? > , Object > seedMap ) { return wrap ( callable , [[continueRequest]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[antónio]] ( Callable < T > callable , Map < Key < ? > , Object > seedMap ) { return wrap ( callable , [[antónio]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 372 ---------------------------------------------
Creates a module for the given module . --> [[[FAILED]]]

[[[[Adv]]]]: public static Module forModule ( Object [[module]] , ModuleAnnotatedMethodScanner scanner ) { return forObject ( [[module]] , False , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module forModule ( Object [[scorer]] , ModuleAnnotatedMethodScanner scanner ) { return forObject ( [[scorer]] , False , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 373 ---------------------------------------------
Validates and validates the given value . --> Convenience method for avocados --> Socre: 1.0

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > key , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[avocados]] ( Key < ? > key , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 374 ---------------------------------------------
Wraps the given callable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > callable ) { return wrap ( callable , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[odessa]] ( Callable < T > callable ) { return wrap ( callable , [[odessa]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 375 ---------------------------------------------
Create a injector for the given type . --> Create an instance of AnnotationInjector --> Socre: 1.0

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > createWithListeners ( TypeLiteral < T > [[type]] , Errors [[errors]] ) throws ErrorsException { int numErrorsBefore = [[errors]] . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( [[type]] ) ; } catch ( ConfigurationException e ) { [[errors]] . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , [[errors]] ) ; [[errors]] . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( [[errors]] , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( [[type]] ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( [[type]] , encounter ) ; } catch ( RuntimeException e ) { [[errors]] . errorNotifyingTypeListener ( binding , [[type]] , e ) ; } } } encounter . invalidate ( ) ; [[errors]] . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , [[type]] , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > createWithListeners ( TypeLiteral < T > [[abdallah]] , Errors [[wienie]] ) throws ErrorsException { int numErrorsBefore = [[wienie]] . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( [[abdallah]] ) ; } catch ( ConfigurationException e ) { [[wienie]] . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , [[wienie]] ) ; [[wienie]] . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( [[wienie]] , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( [[abdallah]] ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( [[abdallah]] , encounter ) ; } catch ( RuntimeException e ) { [[wienie]] . errorNotifyingTypeListener ( binding , [[abdallah]] , e ) ; } } } encounter . invalidate ( ) ; [[wienie]] . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , [[abdallah]] , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 376 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 282 / 91 / 3 / 376:  38%|███▊      | 376/1000 [57:14<1:34:59,  9.13s/it][Succeeded / Failed / Skipped / Total] 282 / 91 / 3 / 376:  38%|███▊      | 377/1000 [57:26<1:34:55,  9.14s/it][Succeeded / Failed / Skipped / Total] 282 / 92 / 3 / 377:  38%|███▊      | 377/1000 [57:26<1:34:55,  9.14s/it][Succeeded / Failed / Skipped / Total] 282 / 92 / 3 / 377:  38%|███▊      | 378/1000 [57:27<1:34:33,  9.12s/it][Succeeded / Failed / Skipped / Total] 282 / 93 / 3 / 378:  38%|███▊      | 378/1000 [57:27<1:34:33,  9.12s/it][Succeeded / Failed / Skipped / Total] 282 / 93 / 3 / 378:  38%|███▊      | 379/1000 [57:29<1:34:12,  9.10s/it][Succeeded / Failed / Skipped / Total] 282 / 94 / 3 / 379:  38%|███▊      | 379/1000 [57:29<1:34:12,  9.10s/it][Succeeded / Failed / Skipped / Total] 282 / 94 / 3 / 379:  38%|███▊      | 380/1000 [57:39<1:34:04,  9.10s/it][Succeeded / Failed / Skipped / Total] 283 / 94 / 3 / 380:  38%|███▊      | 380/1000 [57:39<1:34:04,  9.10s/it][Succeeded / Failed / Skipped / Total] 283 / 94 / 3 / 380:  38%|███▊      | 381/1000 [58:16<1:34:40,  9.18s/it][Succeeded / Failed / Skipped / Total] 283 / 95 / 3 / 381:  38%|███▊      | 381/1000 [58:16<1:34:40,  9.18s/it][Succeeded / Failed / Skipped / Total] 283 / 95 / 3 / 381:  38%|███▊      | 382/1000 [58:21<1:34:24,  9.17s/it]Creates a new Key instance . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > [[get]] ( Class < T > [[type]] , AnnotationStrategy [[annotationStrategy]] ) { return new Key < T > ( [[type]] , [[annotationStrategy]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > [[erb]] ( Class < T > [[í]] , AnnotationStrategy [[buccaneers]] ) { return new Key < T > ( [[í]] , [[buccaneers]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 377 ---------------------------------------------
Gets the injectors for injection points . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint [[injectionPoint]] : injectionPoints ) { try { Errors [[errorsForMember]] = [[injectionPoint]] . isOptional ( ) ? new Errors ( [[injectionPoint]] ) : errors . withSource ( [[injectionPoint]] ) ; SingleMemberInjector [[injector]] = [[injectionPoint]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , [[injectionPoint]] , [[errorsForMember]] ) : new SingleMethodInjector ( this . injector , [[injectionPoint]] , [[errorsForMember]] ) ; injectors . add ( [[injector]] ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint [[leticia]] : injectionPoints ) { try { Errors [[assuming]] = [[leticia]] . isOptional ( ) ? new Errors ( [[leticia]] ) : errors . withSource ( [[leticia]] ) ; SingleMemberInjector [[denzel]] = [[leticia]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , [[leticia]] , [[assuming]] ) : new SingleMethodInjector ( this . injector , [[leticia]] , [[assuming]] ) ; injectors . add ( [[denzel]] ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 378 ---------------------------------------------
Returns a strategy for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Annotation [[annotation]] ) { checkNotNull ( [[annotation]] , "annotation" ) ; Class < ? extends Annotation > [[annotationType]] = [[annotation]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; if ( Annotations . isMarker ( [[annotationType]] ) ) { return new AnnotationTypeStrategy ( [[annotationType]] , [[annotation]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[annotation]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy [[wpc]] ( Annotation [[garrison]] ) { checkNotNull ( [[garrison]] , "annotation" ) ; Class < ? extends Annotation > [[alligator]] = [[garrison]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[alligator]] ) ; ensureIsBindingAnnotation ( [[alligator]] ) ; if ( Annotations . isMarker ( [[alligator]] ) ) { return new AnnotationTypeStrategy ( [[alligator]] , [[garrison]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[garrison]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 379 ---------------------------------------------
Returns a strategy for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return [[strategyFor]] ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[compatible]] ( Class < ? extends Annotation > [[gunboat]] ) { [[gunboat]] = Annotations . canonicalizeIfNamed ( [[gunboat]] ) ; if ( isAllDefaultMethods ( [[gunboat]] ) ) { return [[compatible]] ( generateAnnotation ( [[gunboat]] ) ) ; } checkNotNull ( [[gunboat]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[gunboat]] ) ; ensureIsBindingAnnotation ( [[gunboat]] ) ; return new AnnotationTypeStrategy ( [[gunboat]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 380 ---------------------------------------------
Gets the binding source . --> used for debugging --> Socre: 1.0

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[viceroy]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 381 ---------------------------------------------
Creates a message with the given format and arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( String messageFormat , Object ... [[arguments]] ) { return create ( null , messageFormat , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message create ( String messageFormat , Object ... [[hood]] ) { return create ( null , messageFormat , [[hood]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 382 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 284 / 95 / 3 / 382:  38%|███▊      | 382/1000 [58:21<1:34:24,  9.17s/it][Succeeded / Failed / Skipped / Total] 284 / 95 / 3 / 382:  38%|███▊      | 383/1000 [58:30<1:34:15,  9.17s/it][Succeeded / Failed / Skipped / Total] 285 / 95 / 3 / 383:  38%|███▊      | 383/1000 [58:30<1:34:15,  9.17s/it][Succeeded / Failed / Skipped / Total] 285 / 95 / 3 / 383:  38%|███▊      | 384/1000 [58:37<1:34:02,  9.16s/it][Succeeded / Failed / Skipped / Total] 286 / 95 / 3 / 384:  38%|███▊      | 384/1000 [58:37<1:34:02,  9.16s/it][Succeeded / Failed / Skipped / Total] 286 / 95 / 3 / 384:  38%|███▊      | 385/1000 [58:46<1:33:52,  9.16s/it][Succeeded / Failed / Skipped / Total] 287 / 95 / 3 / 385:  38%|███▊      | 385/1000 [58:46<1:33:52,  9.16s/it][Succeeded / Failed / Skipped / Total] 287 / 95 / 3 / 385:  39%|███▊      | 386/1000 [58:59<1:33:49,  9.17s/it][Succeeded / Failed / Skipped / Total] 288 / 95 / 3 / 386:  39%|███▊      | 386/1000 [58:59<1:33:49,  9.17s/it][Succeeded / Failed / Skipped / Total] 288 / 95 / 3 / 386:  39%|███▊      | 387/1000 [58:59<1:33:26,  9.15s/it]Removes extraneous stack trace from the given throwable . --> light darkie --> Socre: 1.0

[[[[Adv]]]]: private void [[pruneStacktrace]] ( Throwable throwable ) { for ( Throwable [[t]] = throwable ; [[t]] != null ; [[t]] = [[t]] . getCause ( ) ) { StackTraceElement [ ] [[stackTrace]] = [[t]] . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[stackTrace]] ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } [[t]] . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void [[darkie]] ( Throwable throwable ) { for ( Throwable [[città]] = throwable ; [[città]] != null ; [[città]] = [[città]] . getCause ( ) ) { StackTraceElement [ ] [[komodo]] = [[città]] . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[komodo]] ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } [[città]] . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 383 ---------------------------------------------
Formats a collection of error messages . --> This method is used to render a lot of accents --> Socre: 1.0

[[[[Adv]]]]: public static String [[formatMessages]] ( String [[heading]] , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( [[heading]] ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object [[source]] = dependencies . get ( i ) ; formatSource ( fmt , [[source]] ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String [[stéphane]] ( String [[arkansas]] , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( [[arkansas]] ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object [[chapped]] = dependencies . get ( i ) ; formatSource ( fmt , [[chapped]] ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 384 ---------------------------------------------
Convert an Object to an ElementSource . --> Convert address to address --> Socre: 1.0

[[[[Adv]]]]: static Object convert ( Object [[o]] ) { ElementSource source = null ; if ( [[o]] instanceof ElementSource ) { source = ( ElementSource ) [[o]] ; [[o]] = source . getDeclaringSource ( ) ; } return convert ( [[o]] , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object convert ( Object [[street]] ) { ElementSource source = null ; if ( [[street]] instanceof ElementSource ) { source = ( ElementSource ) [[street]] ; [[street]] = source . getDeclaringSource ( ) ; } return convert ( [[street]] , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 385 ---------------------------------------------
Creates a formatted message with the given message and arguments . --> Utility function for creating torrents --> Socre: 1.0

[[[[Adv]]]]: public static Message [[create]] ( Throwable cause , String [[messageFormat]] , Object ... arguments ) { return [[create]] ( cause , ImmutableList . of ( ) , [[messageFormat]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[torrents]] ( Throwable cause , String [[fletcher]] , Object ... arguments ) { return [[torrents]] ( cause , ImmutableList . of ( ) , [[fletcher]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 386 ---------------------------------------------
Manage jmx . --> tries to manage tenderness --> Socre: 1.0

[[[[Adv]]]]: public static void [[main]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void [[tenderness]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 387 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 288 / 96 / 3 / 387:  39%|███▊      | 387/1000 [58:59<1:33:26,  9.15s/it][Succeeded / Failed / Skipped / Total] 288 / 96 / 3 / 387:  39%|███▉      | 388/1000 [59:30<1:33:52,  9.20s/it][Succeeded / Failed / Skipped / Total] 289 / 96 / 3 / 388:  39%|███▉      | 388/1000 [59:30<1:33:52,  9.20s/it][Succeeded / Failed / Skipped / Total] 289 / 96 / 3 / 388:  39%|███▉      | 389/1000 [59:36<1:33:38,  9.19s/it][Succeeded / Failed / Skipped / Total] 289 / 97 / 3 / 389:  39%|███▉      | 389/1000 [59:36<1:33:38,  9.19s/it][Succeeded / Failed / Skipped / Total] 289 / 97 / 3 / 389:  39%|███▉      | 390/1000 [59:43<1:33:24,  9.19s/it][Succeeded / Failed / Skipped / Total] 289 / 98 / 3 / 390:  39%|███▉      | 390/1000 [59:43<1:33:24,  9.19s/it][Succeeded / Failed / Skipped / Total] 289 / 98 / 3 / 390:  39%|███▉      | 391/1000 [59:45<1:33:05,  9.17s/it][Succeeded / Failed / Skipped / Total] 290 / 98 / 3 / 391:  39%|███▉      | 391/1000 [59:45<1:33:05,  9.17s/it][Succeeded / Failed / Skipped / Total] 290 / 98 / 3 / 391:  39%|███▉      | 392/1000 [59:54<1:32:54,  9.17s/it][Succeeded / Failed / Skipped / Total] 291 / 98 / 3 / 392:  39%|███▉      | 392/1000 [59:54<1:32:54,  9.17s/it][Succeeded / Failed / Skipped / Total] 291 / 98 / 3 / 392:  39%|███▉      | 393/1000 [1:00:01<1:32:42,  9.16s/it][Succeeded / Failed / Skipped / Total] 291 / 99 / 3 / 393:  39%|███▉      | 393/1000 [1:00:01<1:32:42,  9.16s/it][Succeeded / Failed / Skipped / Total] 291 / 99 / 3 / 393:  39%|███▉      | 394/1000 [1:00:18<1:32:44,  9.18s/it][Succeeded / Failed / Skipped / Total] 292 / 99 / 3 / 394:  39%|███▉      | 394/1000 [1:00:18<1:32:44,  9.18s/it][Succeeded / Failed / Skipped / Total] 292 / 99 / 3 / 394:  40%|███▉      | 395/1000 [1:00:22<1:32:28,  9.17s/it][Succeeded / Failed / Skipped / Total] 292 / 100 / 3 / 395:  40%|███▉      | 395/1000 [1:00:22<1:32:28,  9.17s/it][Succeeded / Failed / Skipped / Total] 292 / 100 / 3 / 395:  40%|███▉      | 396/1000 [1:00:40<1:32:33,  9.19s/it]Checks if the class should be skipped . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[denomination]] ( String [[bulgari]] ) { return ( parent != null && parent . shouldBeSkipped ( [[bulgari]] ) ) || classNamesToSkip . contains ( [[bulgari]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 388 ---------------------------------------------
Method pushState . --> Store simms notification --> Socre: 1.0

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > key , Object [[source]] ) { doPushState ( key , [[source]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[simms]] ( com . google . inject . Key < ? > key , Object [[cinematographic]] ) { doPushState ( key , [[cinematographic]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 389 ---------------------------------------------
Gets the configuration for the module classes . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > [[moduleClassNames]] ) { Preconditions . checkNotNull ( [[moduleClassNames]] , "The list of module class names cannot be null." ) ; for ( final String [[moduleClassName]] : [[moduleClassNames]] ) { if ( ! shouldBeSkipped ( [[moduleClassName]] ) ) { return new StackTraceElement ( [[moduleClassName]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[orangeade]] ( List < String > [[atonement]] ) { Preconditions . checkNotNull ( [[atonement]] , "The list of module class names cannot be null." ) ; for ( final String [[scratchy]] : [[atonement]] ) { if ( ! shouldBeSkipped ( [[scratchy]] ) ) { return new StackTraceElement ( [[scratchy]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 390 ---------------------------------------------
Creates a formatted message with the given message and arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( Throwable cause , List < Object > sources , String messageFormat , Object ... [[arguments]] ) { String [[message]] = format ( messageFormat , [[arguments]] ) ; return new Message ( sources , [[message]] , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message create ( Throwable cause , List < Object > sources , String messageFormat , Object ... [[thumbs]] ) { String [[nitric]] = format ( messageFormat , [[thumbs]] ) ; return new Message ( sources , [[nitric]] , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 391 ---------------------------------------------
Returns an initializable instance --> Construct a Serializable object --> Socre: 1.0

[[[[Adv]]]]: static < T > Initializable < T > of ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > of ( final T [[zaira]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[zaira]] ; } @ Override public String toString ( ) { return String . valueOf ( [[zaira]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 392 ---------------------------------------------
Dispatch connection event . --> Process connection event --> Socre: 1.0

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > [[processorList]] = this . processors . get ( type ) ; if ( [[processorList]] != null ) { for ( ConnectionEventProcessor processor : [[processorList]] ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > [[pontus]] = this . processors . get ( type ) ; if ( [[pontus]] != null ) { for ( ConnectionEventProcessor processor : [[pontus]] ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 393 ---------------------------------------------
Pushes a dependency onto the dependency stack . --> [[[FAILED]]]

[[[[Adv]]]]: Dependency < ? > [[pushDependency]] ( Dependency < ? > dependency , Object source ) { Dependency < ? > previous = this . [[dependency]] ; this . [[dependency]] = dependency ; doPushState ( dependency , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > [[blowers]] ( Dependency < ? > dependency , Object source ) { Dependency < ? > previous = this . [[hyoid]] ; this . [[hyoid]] = dependency ; doPushState ( dependency , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 394 ---------------------------------------------
Lazily executes the given Throwable . --> Throws an unchecked exception . --> Socre: 1.0

[[[[Adv]]]]: public static void launderThrowable ( Throwable [[t]] ) { if ( [[t]] instanceof RuntimeException ) { throw ( RuntimeException ) [[t]] ; } else if ( [[t]] instanceof Error ) { throw ( Error ) [[t]] ; } else { throw new IllegalStateException ( "Not unchecked!" , [[t]] ) ; } }
[[[[Nl]]]]: launder the throwable

[[[[Adv]]]]: public static void launderThrowable ( Throwable [[develop]] ) { if ( [[develop]] instanceof RuntimeException ) { throw ( RuntimeException ) [[develop]] ; } else if ( [[develop]] instanceof Error ) { throw ( Error ) [[develop]] ; } else { throw new IllegalStateException ( "Not unchecked!" , [[develop]] ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 395 ---------------------------------------------
Get the task result . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] getFutureTaskResult ( RunStateRecordedFutureTask < [[T]] > task , Logger logger ) { [[T]] t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < [[merchandising]] > [[merchandising]] getFutureTaskResult ( RunStateRecordedFutureTask < [[merchandising]] > task , Logger logger ) { [[merchandising]] t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 396 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 293 / 100 / 3 / 396:  40%|███▉      | 396/1000 [1:00:40<1:32:33,  9.19s/it][Succeeded / Failed / Skipped / Total] 293 / 100 / 3 / 396:  40%|███▉      | 397/1000 [1:00:56<1:32:34,  9.21s/it][Succeeded / Failed / Skipped / Total] 293 / 101 / 3 / 397:  40%|███▉      | 397/1000 [1:00:56<1:32:34,  9.21s/it][Succeeded / Failed / Skipped / Total] 293 / 101 / 3 / 397:  40%|███▉      | 398/1000 [1:00:57<1:32:12,  9.19s/it][Succeeded / Failed / Skipped / Total] 294 / 101 / 3 / 398:  40%|███▉      | 398/1000 [1:00:57<1:32:12,  9.19s/it][Succeeded / Failed / Skipped / Total] 294 / 101 / 3 / 398:  40%|███▉      | 399/1000 [1:01:05<1:32:01,  9.19s/it][Succeeded / Failed / Skipped / Total] 294 / 102 / 3 / 399:  40%|███▉      | 399/1000 [1:01:05<1:32:01,  9.19s/it][Succeeded / Failed / Skipped / Total] 294 / 102 / 3 / 399:  40%|████      | 400/1000 [1:01:05<1:31:38,  9.16s/it][Succeeded / Failed / Skipped / Total] 294 / 102 / 4 / 400:  40%|████      | 400/1000 [1:01:05<1:31:38,  9.16s/it][Succeeded / Failed / Skipped / Total] 294 / 102 / 4 / 400:  40%|████      | 401/1000 [1:01:31<1:31:54,  9.21s/it][Succeeded / Failed / Skipped / Total] 295 / 102 / 4 / 401:  40%|████      | 401/1000 [1:01:31<1:31:54,  9.21s/it][Succeeded / Failed / Skipped / Total] 295 / 102 / 4 / 401:  40%|████      | 402/1000 [1:01:37<1:31:39,  9.20s/it][Succeeded / Failed / Skipped / Total] 296 / 102 / 4 / 402:  40%|████      | 402/1000 [1:01:37<1:31:39,  9.20s/it][Succeeded / Failed / Skipped / Total] 296 / 102 / 4 / 402:  40%|████      | 403/1000 [1:01:40<1:31:22,  9.18s/it]Registers a processor --> Registers a RemotingProcessor --> Socre: 1.0

[[[[Adv]]]]: public void [[registerProcessor]] ( CommandCode cmdCode , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void [[harvard]] ( CommandCode cmdCode , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 397 ---------------------------------------------
Adds a processor to the event type . --> [[[FAILED]]]

[[[[Adv]]]]: public void addConnectionEventProcessor ( ConnectionEventType [[type]] , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . [[processors]] . get ( [[type]] ) ; if ( processorList == null ) { this . [[processors]] . putIfAbsent ( [[type]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . [[processors]] . get ( [[type]] ) ; } processorList . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void addConnectionEventProcessor ( ConnectionEventType [[gazal]] , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . [[acutely]] . get ( [[gazal]] ) ; if ( processorList == null ) { this . [[acutely]] . putIfAbsent ( [[gazal]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . [[acutely]] . get ( [[gazal]] ) ; } processorList . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 398 ---------------------------------------------
Creates a new instance . --> Taken from the GuilContext --> Socre: 1.0

[[[[Adv]]]]: protected T [[provision]] ( Provider < ? extends T > provider , Dependency < ? > [[dependency]] , ConstructionContext < T > [[constructionContext]] ) throws InternalProvisionException { T [[t]] = provider . get ( ) ; if ( [[t]] == null && ! [[dependency]] . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , [[dependency]] ) ; } [[constructionContext]] . setProxyDelegates ( [[t]] ) ; return [[t]] ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T [[antithesis]] ( Provider < ? extends T > provider , Dependency < ? > [[bowman]] , ConstructionContext < T > [[linguistics]] ) throws InternalProvisionException { T [[guilford]] = provider . get ( ) ; if ( [[guilford]] == null && ! [[bowman]] . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , [[bowman]] ) ; } [[linguistics]] . setProxyDelegates ( [[guilford]] ) ; return [[guilford]] ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 399 ---------------------------------------------
Registers the default processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerDefaultProcessor]] ( RemotingProcessor < ? > processor ) { if ( this . [[defaultProcessor]] == null ) { this . [[defaultProcessor]] = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[defaultProcessor]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void [[elba]] ( RemotingProcessor < ? > processor ) { if ( this . [[ancora]] == null ) { this . [[ancora]] = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[ancora]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 400 ---------------------------------------------
region GetAllConnectionPool Implementation --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 401 ---------------------------------------------
Scan all idle connections . --> Scans the idle pool . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void scan ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > [[iter]] = this . connTasks . keySet ( ) . iterator ( ) ; while ( [[iter]] . hasNext ( ) ) { String [[poolKey]] = [[iter]] . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( [[poolKey]] ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { [[iter]] . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , [[poolKey]] ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan

[[[[Adv]]]]: @ Override public void scan ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > [[avalanche]] = this . connTasks . keySet ( ) . iterator ( ) ; while ( [[avalanche]] . hasNext ( ) ) { String [[cape]] = [[avalanche]] . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( [[cape]] ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { [[avalanche]] . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , [[cape]] ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 402 ---------------------------------------------
Decode protocol code . --> Checks if there is a ProtocolCode available . --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode [[decodeProtocolCode]] ( ByteBuf [[in]] ) { if ( [[in]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; [[in]] . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode [[inconsiderate]] ( ByteBuf [[fronted]] ) { if ( [[fronted]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; [[fronted]] . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 403 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 297 / 102 / 4 / 403:  40%|████      | 403/1000 [1:01:40<1:31:22,  9.18s/it][Succeeded / Failed / Skipped / Total] 297 / 102 / 4 / 403:  40%|████      | 404/1000 [1:01:42<1:31:01,  9.16s/it][Succeeded / Failed / Skipped / Total] 298 / 102 / 4 / 404:  40%|████      | 404/1000 [1:01:42<1:31:01,  9.16s/it][Succeeded / Failed / Skipped / Total] 298 / 102 / 4 / 404:  40%|████      | 405/1000 [1:01:44<1:30:43,  9.15s/it][Succeeded / Failed / Skipped / Total] 299 / 102 / 4 / 405:  40%|████      | 405/1000 [1:01:44<1:30:43,  9.15s/it][Succeeded / Failed / Skipped / Total] 299 / 102 / 4 / 405:  41%|████      | 406/1000 [1:01:52<1:30:31,  9.14s/it][Succeeded / Failed / Skipped / Total] 300 / 102 / 4 / 406:  41%|████      | 406/1000 [1:01:52<1:30:31,  9.14s/it][Succeeded / Failed / Skipped / Total] 300 / 102 / 4 / 406:  41%|████      | 407/1000 [1:01:54<1:30:12,  9.13s/it][Succeeded / Failed / Skipped / Total] 301 / 102 / 4 / 407:  41%|████      | 407/1000 [1:01:54<1:30:12,  9.13s/it][Succeeded / Failed / Skipped / Total] 301 / 102 / 4 / 407:  41%|████      | 408/1000 [1:01:57<1:29:54,  9.11s/it][Succeeded / Failed / Skipped / Total] 302 / 102 / 4 / 408:  41%|████      | 408/1000 [1:01:57<1:29:54,  9.11s/it][Succeeded / Failed / Skipped / Total] 302 / 102 / 4 / 408:  41%|████      | 409/1000 [1:02:04<1:29:42,  9.11s/it][Succeeded / Failed / Skipped / Total] 303 / 102 / 4 / 409:  41%|████      | 409/1000 [1:02:04<1:29:42,  9.11s/it][Succeeded / Failed / Skipped / Total] 303 / 102 / 4 / 409:  41%|████      | 410/1000 [1:02:09<1:29:26,  9.10s/it][Succeeded / Failed / Skipped / Total] 304 / 102 / 4 / 410:  41%|████      | 410/1000 [1:02:09<1:29:26,  9.10s/it][Succeeded / Failed / Skipped / Total] 304 / 102 / 4 / 410:  41%|████      | 411/1000 [1:02:27<1:29:29,  9.12s/it]Tries to get a cached URL . --> Replies the URL to the URL for the given Crystal object . --> Socre: 1.0

[[[[Adv]]]]: private Url [[tryGet]] ( String [[url]] ) { SoftReference < Url > [[softRef]] = Url . parsedUrls . get ( [[url]] ) ; return ( null == [[softRef]] ) ? null : [[softRef]] . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url [[attracted]] ( String [[lampoons]] ) { SoftReference < Url > [[egyptian]] = Url . parsedUrls . get ( [[lampoons]] ) ; return ( null == [[egyptian]] ) ? null : [[egyptian]] . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 404 ---------------------------------------------
Returns a processor for the given command code . --> Liefert die Leache Methode Leergeben --> Socre: 1.0

[[[[Adv]]]]: public RemotingProcessor < ? > [[getProcessor]] ( CommandCode cmdCode ) { RemotingProcessor < ? > [[processor]] = this . [[cmd2processors]] . get ( cmdCode ) ; if ( [[processor]] != null ) { return [[processor]] ; } return this . [[defaultProcessor]] ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > [[loan]] ( CommandCode cmdCode ) { RemotingProcessor < ? > [[lalita]] = this . [[dahlgren]] . get ( cmdCode ) ; if ( [[lalita]] != null ) { return [[lalita]] ; } return this . [[acquires]] ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 405 ---------------------------------------------
Gets the connection and creates it if it does not exist . --> Obtains a connection to a server --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[aishwarya]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 406 ---------------------------------------------
Create a connection to the remote server . --> Perform alaikum command --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[alaikum]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 407 ---------------------------------------------
Remove a connection task from the pool . --> Removes a connection pool --> Socre: 1.0

[[[[Adv]]]]: private void removeTask ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > [[task]] = this . connTasks . remove ( poolKey ) ; if ( null != [[task]] ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( [[task]] , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void removeTask ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > [[twombly]] = this . connTasks . remove ( poolKey ) ; if ( null != [[twombly]] ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( [[twombly]] , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 408 ---------------------------------------------
Check if the url needs to be removed . --> An aurora request --> Socre: 1.0

[[[[Adv]]]]: private void [[healIfNeed]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void [[aurora]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 409 ---------------------------------------------
Closes a connection --> Closes the connection --> Socre: 1.0

[[[[Adv]]]]: public void closeConnection ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . [[connectionManager]] . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void closeConnection ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . [[benzi]] . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 410 ---------------------------------------------
On close . --> Receives connection close --> Socre: 1.0

[[[[Adv]]]]: public void [[onClose]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void [[brion]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 411 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 305 / 102 / 4 / 411:  41%|████      | 411/1000 [1:02:27<1:29:29,  9.12s/it][Succeeded / Failed / Skipped / Total] 305 / 102 / 4 / 411:  41%|████      | 412/1000 [1:02:35<1:29:19,  9.12s/it][Succeeded / Failed / Skipped / Total] 306 / 102 / 4 / 412:  41%|████      | 412/1000 [1:02:35<1:29:19,  9.12s/it][Succeeded / Failed / Skipped / Total] 306 / 102 / 4 / 412:  41%|████▏     | 413/1000 [1:02:49<1:29:18,  9.13s/it][Succeeded / Failed / Skipped / Total] 307 / 102 / 4 / 413:  41%|████▏     | 413/1000 [1:02:49<1:29:18,  9.13s/it][Succeeded / Failed / Skipped / Total] 307 / 102 / 4 / 413:  41%|████▏     | 414/1000 [1:02:54<1:29:02,  9.12s/it][Succeeded / Failed / Skipped / Total] 307 / 103 / 4 / 414:  41%|████▏     | 414/1000 [1:02:54<1:29:02,  9.12s/it][Succeeded / Failed / Skipped / Total] 307 / 103 / 4 / 414:  42%|████▏     | 415/1000 [1:02:54<1:28:40,  9.10s/it][Succeeded / Failed / Skipped / Total] 308 / 103 / 4 / 415:  42%|████▏     | 415/1000 [1:02:54<1:28:40,  9.10s/it][Succeeded / Failed / Skipped / Total] 308 / 103 / 4 / 415:  42%|████▏     | 416/1000 [1:02:59<1:28:25,  9.08s/it]Do create . --> not used in test --> Socre: 1.0

[[[[Adv]]]]: private void [[doCreate]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int [[actualNum]] = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( [[actualNum]] < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , [[actualNum]] , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = [[actualNum]] ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void [[badmouth]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int [[entonces]] = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( [[entonces]] < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , [[entonces]] , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = [[entonces]] ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 412 ---------------------------------------------
Registers a user processor . --> Registers a Riot BotProcessor --> Socre: 1.0

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > [[userProcessors]] ) { if ( null == [[processor]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[processor]] instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) [[processor]] , [[userProcessors]] ) ; } else { if ( StringUtils . isBlank ( [[processor]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = [[userProcessors]] . putIfAbsent ( [[processor]] . interest ( ) , [[processor]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + [[processor]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > [[celebrating]] , ConcurrentHashMap < String , UserProcessor < ? > > [[solely]] ) { if ( null == [[celebrating]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[celebrating]] instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) [[celebrating]] , [[solely]] ) ; } else { if ( StringUtils . isBlank ( [[celebrating]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = [[solely]] . putIfAbsent ( [[celebrating]] . interest ( ) , [[celebrating]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + [[celebrating]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 413 ---------------------------------------------
Close the connection . --> Do not work? --> Socre: 1.0

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( False , True ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[future]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , [[future]] . isSuccess ( ) , [[future]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[iwant]] ( ) { if ( closed . compareAndSet ( False , True ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[gipsies]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[berlitz]] . getChannel ( ) ) , [[gipsies]] . isSuccess ( ) , [[gipsies]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[berlitz]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 414 ---------------------------------------------
Sets the value for the specified key to the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: public Object setAttributeIfAbsent ( String [[key]] , Object value ) { return attributes . putIfAbsent ( [[key]] , value ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object setAttributeIfAbsent ( String [[knoxville]] , Object value ) { return attributes . putIfAbsent ( [[knoxville]] , value ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 415 ---------------------------------------------
Register a multi interest user process . --> Perform flatlining --> Socre: 1.0

[[[[Adv]]]]: private static void [[registerUserProcessor]] ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : processor . multiInterest ( ) ) { UserProcessor < ? > [[preProcessor]] = userProcessors . putIfAbsent ( interest , processor ) ; if ( [[preProcessor]] != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void [[flatlining]] ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : processor . multiInterest ( ) ) { UserProcessor < ? > [[lalla]] = userProcessors . putIfAbsent ( interest , processor ) ; if ( [[lalla]] != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 416 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 309 / 103 / 4 / 416:  42%|████▏     | 416/1000 [1:02:59<1:28:25,  9.08s/it][Succeeded / Failed / Skipped / Total] 309 / 103 / 4 / 416:  42%|████▏     | 417/1000 [1:03:08<1:28:17,  9.09s/it][Succeeded / Failed / Skipped / Total] 310 / 103 / 4 / 417:  42%|████▏     | 417/1000 [1:03:08<1:28:17,  9.09s/it][Succeeded / Failed / Skipped / Total] 310 / 103 / 4 / 417:  42%|████▏     | 418/1000 [1:03:09<1:27:56,  9.07s/it][Succeeded / Failed / Skipped / Total] 311 / 103 / 4 / 418:  42%|████▏     | 418/1000 [1:03:09<1:27:56,  9.07s/it][Succeeded / Failed / Skipped / Total] 311 / 103 / 4 / 418:  42%|████▏     | 419/1000 [1:03:21<1:27:51,  9.07s/it][Succeeded / Failed / Skipped / Total] 312 / 103 / 4 / 419:  42%|████▏     | 419/1000 [1:03:21<1:27:51,  9.07s/it][Succeeded / Failed / Skipped / Total] 312 / 103 / 4 / 419:  42%|████▏     | 420/1000 [1:03:56<1:28:18,  9.13s/it][Succeeded / Failed / Skipped / Total] 313 / 103 / 4 / 420:  42%|████▏     | 420/1000 [1:03:56<1:28:18,  9.13s/it][Succeeded / Failed / Skipped / Total] 313 / 103 / 4 / 420:  42%|████▏     | 421/1000 [1:04:06<1:28:10,  9.14s/it][Succeeded / Failed / Skipped / Total] 313 / 104 / 4 / 421:  42%|████▏     | 421/1000 [1:04:07<1:28:10,  9.14s/it][Succeeded / Failed / Skipped / Total] 313 / 104 / 4 / 421:  42%|████▏     | 422/1000 [1:04:07<1:27:49,  9.12s/it]Dispatch to user processor . --> Handle aden event . --> Socre: 1.0

[[[[Adv]]]]: private void [[dispatchToUserProcessor]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int [[id]] = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void [[aden]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int [[doolin]] = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 417 ---------------------------------------------
Preprocess the remoting context . --> Called when a request is received . --> Socre: 1.0

[[[[Adv]]]]: private void [[preProcessRemotingContext]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void [[allegra]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 418 ---------------------------------------------
Debug log . --> For debugging purposes --> Socre: 1.0

[[[[Adv]]]]: private void debugLog ( RemotingContext ctx , RpcRequestCommand [[cmd]] , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , [[cmd]] . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , [[cmd]] . getId ( ) , currentTimestamp , [[cmd]] . getArriveTime ( ) , ( currentTimestamp - [[cmd]] . getArriveTime ( ) ) , [[cmd]] . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void debugLog ( RemotingContext ctx , RpcRequestCommand [[forfeits]] , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , [[forfeits]] . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , [[forfeits]] . getId ( ) , currentTimestamp , [[forfeits]] . getArriveTime ( ) , ( currentTimestamp - [[forfeits]] . getArriveTime ( ) ) , [[forfeits]] . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 419 ---------------------------------------------
Process the message . --> Execute a message --> Socre: 1.0

[[[[Adv]]]]: @ Override public void process ( RemotingContext [[ctx]] , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask task = new ProcessTask ( [[ctx]] , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { defaultExecutor . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void process ( RemotingContext [[carre]] , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask task = new ProcessTask ( [[carre]] , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { defaultExecutor . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 420 ---------------------------------------------
This method is called when a remote command is received . --> This method is used to send a command to remote peer --> Socre: 1.0

[[[[Adv]]]]: protected void oneway ( final Connection [[conn]] , final RemotingCommand [[request]] ) { try { [[conn]] . getChannel ( ) . writeAndFlush ( [[request]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[conn]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void oneway ( final Connection [[gurgling]] , final RemotingCommand [[kelsey]] ) { try { [[gurgling]] . getChannel ( ) . writeAndFlush ( [[kelsey]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[gurgling]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[gurgling]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[gurgling]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 421 ---------------------------------------------
Print timeout log . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[timeoutLog]] ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext [[ctx]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String [[remoteAddr]] = "UNKNOWN" ; if ( null != [[ctx]] ) { ChannelHandlerContext channelCtx = [[ctx]] . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { [[remoteAddr]] = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , [[remoteAddr]] , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void [[activities]] ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext [[armada]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String [[caco]] = "UNKNOWN" ; if ( null != [[armada]] ) { ChannelHandlerContext channelCtx = [[armada]] . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { [[caco]] = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , [[caco]] , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
[Succeeded / Failed / Skipped / Total] 313 / 104 / 5 / 422:  42%|████▏     | 422/1000 [1:04:07<1:27:49,  9.12s/it][Succeeded / Failed / Skipped / Total] 313 / 104 / 5 / 422:  42%|████▏     | 423/1000 [1:04:08<1:27:29,  9.10s/it][Succeeded / Failed / Skipped / Total] 314 / 104 / 5 / 423:  42%|████▏     | 423/1000 [1:04:08<1:27:29,  9.10s/it][Succeeded / Failed / Skipped / Total] 314 / 104 / 5 / 423:  42%|████▏     | 424/1000 [1:04:08<1:27:08,  9.08s/it][Succeeded / Failed / Skipped / Total] 314 / 104 / 6 / 424:  42%|████▏     | 424/1000 [1:04:08<1:27:08,  9.08s/it][Succeeded / Failed / Skipped / Total] 314 / 104 / 6 / 424:  42%|████▎     | 425/1000 [1:04:12<1:26:52,  9.06s/it][Succeeded / Failed / Skipped / Total] 315 / 104 / 6 / 425:  42%|████▎     | 425/1000 [1:04:12<1:26:52,  9.06s/it][Succeeded / Failed / Skipped / Total] 315 / 104 / 6 / 425:  43%|████▎     | 426/1000 [1:04:33<1:26:58,  9.09s/it][Succeeded / Failed / Skipped / Total] 316 / 104 / 6 / 426:  43%|████▎     | 426/1000 [1:04:33<1:26:58,  9.09s/it][Succeeded / Failed / Skipped / Total] 316 / 104 / 6 / 426:  43%|████▎     | 427/1000 [1:04:49<1:26:59,  9.11s/it]--------------------------------------------- Result 422 ---------------------------------------------
Converts an integer into a BitSet --> [[[SKIPPED]]]

[[[[Adv]]]]: public static BitSet toBitSet ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 423 ---------------------------------------------
Deserialize request command . --> Sends a tossback to the world --> Socre: 1.0

[[[[Adv]]]]: private boolean [[deserializeRequestCommand]] ( RemotingContext ctx , RpcRequestCommand cmd , int [[level]] ) { boolean result ; try { cmd . deserialize ( [[level]] ) ; result = True ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( [[level]] ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "[[False]]" != "[[False]]" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + [[level]] ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "[[False]]" != "[[False]]" ; } return result ; }
[[[[Nl]]]]: deserialize request command

[[[[Adv]]]]: private boolean [[absorbers]] ( RemotingContext ctx , RpcRequestCommand cmd , int [[planetarium]] ) { boolean result ; try { cmd . deserialize ( [[planetarium]] ) ; result = True ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( [[planetarium]] ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "[["Contagious" != "Contagious"]]" != "[["Contagious" != "Contagious"]]" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + [[planetarium]] ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "[["Contagious" != "Contagious"]]" != "[["Contagious" != "Contagious"]]" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 424 ---------------------------------------------
Stops the service . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = False ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 425 ---------------------------------------------
Convert a BitSet to a byte . --> Abort the given BitSet . --> Socre: 1.0

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[aborted]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 426 ---------------------------------------------
Add a reconnection task . --> This method is called when a connection is rejected --> Socre: 1.0

[[[[Adv]]]]: public void [[addReconnectTask]] ( Url [[url]] ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = [[url]] ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void [[acceptance]] ( Url [[bourdieu]] ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = [[bourdieu]] ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 427 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 317 / 104 / 6 / 427:  43%|████▎     | 427/1000 [1:04:49<1:26:59,  9.11s/it][Succeeded / Failed / Skipped / Total] 317 / 104 / 6 / 427:  43%|████▎     | 428/1000 [1:04:58<1:26:49,  9.11s/it][Succeeded / Failed / Skipped / Total] 318 / 104 / 6 / 428:  43%|████▎     | 428/1000 [1:04:58<1:26:49,  9.11s/it][Succeeded / Failed / Skipped / Total] 318 / 104 / 6 / 428:  43%|████▎     | 429/1000 [1:05:11<1:26:46,  9.12s/it][Succeeded / Failed / Skipped / Total] 319 / 104 / 6 / 429:  43%|████▎     | 429/1000 [1:05:11<1:26:46,  9.12s/it][Succeeded / Failed / Skipped / Total] 319 / 104 / 6 / 429:  43%|████▎     | 430/1000 [1:05:19<1:26:35,  9.11s/it]This method is used to monitor a set of connection pools . --> Implements the monitoring function . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > [[entry]] = iter . next ( ) ; String poolKey = [[entry]] . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( [[entry]] . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > [[teething]] = iter . next ( ) ; String poolKey = [[teething]] . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( [[teething]] . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 428 ---------------------------------------------
Filter connections . --> Get the daylights --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[filter]] ( List < Connection > connections ) { List < Connection > [[serviceOnConnections]] = new ArrayList < Connection > ( ) ; List < Connection > [[serviceOffConnections]] = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { [[serviceOffConnections]] . add ( connection ) ; } } else { [[serviceOnConnections]] . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , [[serviceOnConnections]] ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , [[serviceOffConnections]] ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[daylights]] ( List < Connection > connections ) { List < Connection > [[egyptian]] = new ArrayList < Connection > ( ) ; List < Connection > [[stemming]] = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { [[stemming]] . add ( connection ) ; } } else { [[egyptian]] . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , [[egyptian]] ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , [[stemming]] ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 429 ---------------------------------------------
Gets a boolean property . --> Gets boolean . --> Socre: 1.0

[[[[Adv]]]]: public static boolean getBool ( String key , String [[defaultValue]] ) { return Boolean . parseBoolean ( System . getProperty ( key , [[defaultValue]] ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property

[[[[Adv]]]]: public static boolean getBool ( String key , String [[backboard]] ) { return Boolean . parseBoolean ( System . getProperty ( key , [[backboard]] ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 430 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 320 / 104 / 6 / 430:  43%|████▎     | 430/1000 [1:05:19<1:26:35,  9.11s/it][Succeeded / Failed / Skipped / Total] 320 / 104 / 6 / 430:  43%|████▎     | 431/1000 [1:05:29<1:26:27,  9.12s/it][Succeeded / Failed / Skipped / Total] 321 / 104 / 6 / 431:  43%|████▎     | 431/1000 [1:05:29<1:26:27,  9.12s/it][Succeeded / Failed / Skipped / Total] 321 / 104 / 6 / 431:  43%|████▎     | 432/1000 [1:05:38<1:26:18,  9.12s/it][Succeeded / Failed / Skipped / Total] 322 / 104 / 6 / 432:  43%|████▎     | 432/1000 [1:05:38<1:26:18,  9.12s/it][Succeeded / Failed / Skipped / Total] 322 / 104 / 6 / 432:  43%|████▎     | 433/1000 [1:05:53<1:26:17,  9.13s/it][Succeeded / Failed / Skipped / Total] 322 / 105 / 6 / 433:  43%|████▎     | 433/1000 [1:05:53<1:26:17,  9.13s/it][Succeeded / Failed / Skipped / Total] 322 / 105 / 6 / 433:  43%|████▎     | 434/1000 [1:05:54<1:25:56,  9.11s/it][Succeeded / Failed / Skipped / Total] 322 / 105 / 7 / 434:  43%|████▎     | 434/1000 [1:05:54<1:25:56,  9.11s/it][Succeeded / Failed / Skipped / Total] 322 / 105 / 7 / 434:  44%|████▎     | 435/1000 [1:06:06<1:25:51,  9.12s/it]Close fresh select connections --> Check if a new directory should be closed --> Socre: 1.0

[[[[Adv]]]]: private void closeFreshSelectConnections ( Connection [[lastSelectConnect]] , List < Connection > [[serviceOffConnections]] ) throws InterruptedException { if ( null != [[lastSelectConnect]] ) { if ( [[lastSelectConnect]] . isInvokeFutureMapFinish ( ) ) { [[serviceOffConnections]] . add ( [[lastSelectConnect]] ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( [[lastSelectConnect]] . isInvokeFutureMapFinish ( ) ) { [[serviceOffConnections]] . add ( [[lastSelectConnect]] ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( [[lastSelectConnect]] . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void closeFreshSelectConnections ( Connection [[directories]] , List < Connection > [[formy]] ) throws InterruptedException { if ( null != [[directories]] ) { if ( [[directories]] . isInvokeFutureMapFinish ( ) ) { [[formy]] . add ( [[directories]] ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( [[directories]] . isInvokeFutureMapFinish ( ) ) { [[formy]] . add ( [[directories]] ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( [[directories]] . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 431 ---------------------------------------------
Converts request to remoting command . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: protected RemotingCommand [[toRemotingCommand]] ( Object [[request]] , Connection conn , InvokeContext [[invokeContext]] , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( [[request]] ) ; if ( null != [[invokeContext]] ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand [[course]] ( Object [[predator]] , Connection conn , InvokeContext [[augsburg]] , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( [[predator]] ) ; if ( null != [[augsburg]] ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 432 ---------------------------------------------
Log info log . --> Convenience method . --> Socre: 1.0

[[[[Adv]]]]: private void infoLog ( String [[format]] , String [[addr]] ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( [[addr]] ) ) { logger . info ( [[format]] , [[addr]] ) ; } else { logger . info ( [[format]] , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void infoLog ( String [[jam]] , String [[badmouth]] ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( [[badmouth]] ) ) { logger . info ( [[jam]] , [[badmouth]] ) ; } else { logger . info ( [[jam]] , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 433 ---------------------------------------------
Executes the invoke call with a callback . --> [[[FAILED]]]

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int [[requestId]] = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( [[requestId]] ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( [[requestId]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( [[requestId]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int [[tch]] = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( [[tch]] ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( [[tch]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( [[tch]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 434 ---------------------------------------------
Returns the value for the given key . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . context . get ( key ) != null ? ( T ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 435 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 323 / 105 / 7 / 435:  44%|████▎     | 435/1000 [1:06:06<1:25:51,  9.12s/it][Succeeded / Failed / Skipped / Total] 323 / 105 / 7 / 435:  44%|████▎     | 436/1000 [1:06:08<1:25:32,  9.10s/it][Succeeded / Failed / Skipped / Total] 324 / 105 / 7 / 436:  44%|████▎     | 436/1000 [1:06:08<1:25:32,  9.10s/it][Succeeded / Failed / Skipped / Total] 324 / 105 / 7 / 436:  44%|████▎     | 437/1000 [1:06:10<1:25:15,  9.09s/it][Succeeded / Failed / Skipped / Total] 325 / 105 / 7 / 437:  44%|████▎     | 437/1000 [1:06:10<1:25:15,  9.09s/it][Succeeded / Failed / Skipped / Total] 325 / 105 / 7 / 437:  44%|████▍     | 438/1000 [1:06:12<1:24:56,  9.07s/it][Succeeded / Failed / Skipped / Total] 325 / 106 / 7 / 438:  44%|████▍     | 438/1000 [1:06:12<1:24:56,  9.07s/it][Succeeded / Failed / Skipped / Total] 325 / 106 / 7 / 438:  44%|████▍     | 439/1000 [1:06:21<1:24:48,  9.07s/it][Succeeded / Failed / Skipped / Total] 326 / 106 / 7 / 439:  44%|████▍     | 439/1000 [1:06:21<1:24:48,  9.07s/it][Succeeded / Failed / Skipped / Total] 326 / 106 / 7 / 439:  44%|████▍     | 440/1000 [1:06:23<1:24:30,  9.05s/it][Succeeded / Failed / Skipped / Total] 327 / 106 / 7 / 440:  44%|████▍     | 440/1000 [1:06:23<1:24:30,  9.05s/it][Succeeded / Failed / Skipped / Total] 327 / 106 / 7 / 440:  44%|████▍     | 441/1000 [1:06:38<1:24:28,  9.07s/it][Succeeded / Failed / Skipped / Total] 328 / 106 / 7 / 441:  44%|████▍     | 441/1000 [1:06:38<1:24:28,  9.07s/it][Succeeded / Failed / Skipped / Total] 328 / 106 / 7 / 441:  44%|████▍     | 442/1000 [1:06:42<1:24:12,  9.05s/it]Get a property --> Returns the Galleon . --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String key ) { if ( properties == null ) { return null ; } return properties . getProperty ( key ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[galleon]] ( String key ) { if ( properties == null ) { return null ; } return properties . getProperty ( key ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 436 ---------------------------------------------
Get a random connection from the list of connections --> Gets a random call from the list of connections . --> Socre: 1.0

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int [[tries]] = 0 ; Connection [[result]] = null ; while ( ( [[result]] == null || ! [[result]] . isFine ( ) ) && [[tries]] ++ < MAX_TIMES ) { [[result]] = conns . get ( this . random . nextInt ( size ) ) ; } if ( [[result]] != null && ! [[result]] . isFine ( ) ) { [[result]] = null ; } return [[result]] ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int [[allotment]] = 0 ; Connection [[callender]] = null ; while ( ( [[callender]] == null || ! [[callender]] . isFine ( ) ) && [[allotment]] ++ < MAX_TIMES ) { [[callender]] = conns . get ( this . random . nextInt ( size ) ) ; } if ( [[callender]] != null && ! [[callender]] . isFine ( ) ) { [[callender]] = null ; } return [[callender]] ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 437 ---------------------------------------------
Checks if request timeout . --> Returns true if requestTimeout was received . --> Socre: 1.0

[[[[Adv]]]]: public boolean isRequestTimeout ( ) { if ( this . [[timeout]] > 0 && ( this . [[rpcCommandType]] != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . [[timeout]] ) { return True ; } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean isRequestTimeout ( ) { if ( this . [[causing]] > 0 && ( this . [[evoking]] != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . [[causing]] ) { return True ; } return "[["Freckled" != "Freckled"]]" != "[["Freckled" != "Freckled"]]" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 438 ---------------------------------------------
Returns a user processor . --> [[[FAILED]]]

[[[[Adv]]]]: public UserProcessor < ? > [[getUserProcessor]] ( String [[className]] ) { return StringUtils . isBlank ( [[className]] ) ? null : this . userProcessors . get ( [[className]] ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > [[fillmore]] ( String [[vertebrae]] ) { return StringUtils . isBlank ( [[vertebrae]] ) ? null : this . userProcessors . get ( [[vertebrae]] ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 439 ---------------------------------------------
Resolves a response from a remote address . --> Resolves a ResponseCommand from a ResponseCommand --> Socre: 1.0

[[[[Adv]]]]: public static Object resolveResponseObject ( ResponseCommand responseCommand , String [[addr]] ) throws RemotingException { preProcess ( responseCommand , [[addr]] ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , [[addr]] , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object resolveResponseObject ( ResponseCommand responseCommand , String [[farewells]] ) throws RemotingException { preProcess ( responseCommand , [[farewells]] ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , [[farewells]] , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 440 ---------------------------------------------
Deserialize the response command . --> Deserialize an RpcResponseCommand --> Socre: 1.0

[[[[Adv]]]]: private static Object toResponseObject ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) [[responseCommand]] ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object toResponseObject ( ResponseCommand [[interchange]] ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) [[interchange]] ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 441 ---------------------------------------------
Convert an error message to detail message . --> Perform abstraction . --> Socre: 1.0

[[[[Adv]]]]: private static String [[detailErrMsg]] ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand [[resp]] = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( [[resp]] . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , [[resp]] . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String [[abstraction]] ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand [[archibald]] = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( [[archibald]] . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , [[archibald]] . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 442 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 329 / 106 / 7 / 442:  44%|████▍     | 442/1000 [1:06:42<1:24:12,  9.05s/it][Succeeded / Failed / Skipped / Total] 329 / 106 / 7 / 442:  44%|████▍     | 443/1000 [1:06:49<1:24:01,  9.05s/it][Succeeded / Failed / Skipped / Total] 330 / 106 / 7 / 443:  44%|████▍     | 443/1000 [1:06:49<1:24:01,  9.05s/it][Succeeded / Failed / Skipped / Total] 330 / 106 / 7 / 443:  44%|████▍     | 444/1000 [1:06:53<1:23:46,  9.04s/it][Succeeded / Failed / Skipped / Total] 331 / 106 / 7 / 444:  44%|████▍     | 444/1000 [1:06:53<1:23:46,  9.04s/it][Succeeded / Failed / Skipped / Total] 331 / 106 / 7 / 444:  44%|████▍     | 445/1000 [1:07:18<1:23:57,  9.08s/it][Succeeded / Failed / Skipped / Total] 332 / 106 / 7 / 445:  44%|████▍     | 445/1000 [1:07:18<1:23:57,  9.08s/it][Succeeded / Failed / Skipped / Total] 332 / 106 / 7 / 445:  45%|████▍     | 446/1000 [1:07:20<1:23:38,  9.06s/it][Succeeded / Failed / Skipped / Total] 333 / 106 / 7 / 446:  45%|████▍     | 446/1000 [1:07:20<1:23:38,  9.06s/it][Succeeded / Failed / Skipped / Total] 333 / 106 / 7 / 446:  45%|████▍     | 447/1000 [1:07:22<1:23:21,  9.04s/it][Succeeded / Failed / Skipped / Total] 334 / 106 / 7 / 447:  45%|████▍     | 447/1000 [1:07:22<1:23:21,  9.04s/it][Succeeded / Failed / Skipped / Total] 334 / 106 / 7 / 447:  45%|████▍     | 448/1000 [1:07:31<1:23:12,  9.04s/it][Succeeded / Failed / Skipped / Total] 335 / 106 / 7 / 448:  45%|████▍     | 448/1000 [1:07:31<1:23:12,  9.04s/it][Succeeded / Failed / Skipped / Total] 335 / 106 / 7 / 448:  45%|████▍     | 449/1000 [1:07:43<1:23:07,  9.05s/it]Extracts a Throwable from an RpcResponseCommand . --> Deserializes an incoming ResponseCommand --> Socre: 1.0

[[[[Adv]]]]: private static Throwable [[toThrowable]] ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) [[responseCommand]] ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable [[blabbing]] ( ResponseCommand [[hesitating]] ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) [[hesitating]] ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 443 ---------------------------------------------
Print connection trace log --> Used for debugging . --> Socre: 1.0

[[[[Adv]]]]: public static void printConnectionTraceLog ( Logger logger , String [[traceId]] , InvokeContext [[invokeContext]] ) { String sourceIp = [[invokeContext]] . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = [[invokeContext]] . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = [[invokeContext]] . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = [[invokeContext]] . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( [[traceId]] ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void printConnectionTraceLog ( Logger logger , String [[chael]] , InvokeContext [[galvanized]] ) { String sourceIp = [[galvanized]] . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = [[galvanized]] . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = [[galvanized]] . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = [[galvanized]] . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( [[chael]] ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 444 ---------------------------------------------
Creates a new event loop group . --> Creates a new EventLoopGroup --> Socre: 1.0

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int nThreads , ThreadFactory [[threadFactory]] ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , [[threadFactory]] ) : new NioEventLoopGroup ( nThreads , [[threadFactory]] ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int nThreads , ThreadFactory [[aldrich]] ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , [[aldrich]] ) : new NioEventLoopGroup ( nThreads , [[aldrich]] ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 445 ---------------------------------------------
Convert a Throwable to RpcServerException . --> Creates RpcServerException --> Socre: 1.0

[[[[Adv]]]]: private RpcServerException createServerException ( Throwable [[t]] , String [[errMsg]] ) { String [[formattedErrMsg]] = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , [[t]] . getClass ( ) . getName ( ) , [[t]] . getMessage ( ) , [[errMsg]] ) ; RpcServerException [[e]] = new RpcServerException ( [[formattedErrMsg]] ) ; [[e]] . setStackTrace ( [[t]] . getStackTrace ( ) ) ; return [[e]] ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException createServerException ( Throwable [[obie]] , String [[schoo]] ) { String [[shipbuilding]] = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , [[obie]] . getClass ( ) . getName ( ) , [[obie]] . getMessage ( ) , [[schoo]] ) ; RpcServerException [[laloo]] = new RpcServerException ( [[shipbuilding]] ) ; [[laloo]] . setStackTrace ( [[obie]] . getStackTrace ( ) ) ; return [[laloo]] ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 446 ---------------------------------------------
Parse the remote address of the channel . --> Get brenner address --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[brenner]] ( final Channel [[electrostatic]] ) { if ( null == [[electrostatic]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[electrostatic]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 447 ---------------------------------------------
Parses the remote address of a channel . --> Extracts Vietnamese from a cathell --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress [[remote]] = [[channel]] . remoteAddress ( ) ; return doParse ( [[remote]] != null ? [[remote]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[vernon]] ( final Channel [[catheter]] ) { if ( null == [[catheter]] ) { return StringUtils . EMPTY ; } final SocketAddress [[militaristic]] = [[catheter]] . remoteAddress ( ) ; return doParse ( [[militaristic]] != null ? [[militaristic]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
Parses the local address of a channel . --> agent - agent - --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[channel]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[agent]] ( final Channel [[será]] ) { if ( null == [[será]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[será]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 449 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 336 / 106 / 7 / 449:  45%|████▍     | 449/1000 [1:07:43<1:23:07,  9.05s/it][Succeeded / Failed / Skipped / Total] 336 / 106 / 7 / 449:  45%|████▌     | 450/1000 [1:07:46<1:22:50,  9.04s/it][Succeeded / Failed / Skipped / Total] 337 / 106 / 7 / 450:  45%|████▌     | 450/1000 [1:07:46<1:22:50,  9.04s/it][Succeeded / Failed / Skipped / Total] 337 / 106 / 7 / 450:  45%|████▌     | 451/1000 [1:08:04<1:22:52,  9.06s/it][Succeeded / Failed / Skipped / Total] 337 / 107 / 7 / 451:  45%|████▌     | 451/1000 [1:08:04<1:22:52,  9.06s/it][Succeeded / Failed / Skipped / Total] 337 / 107 / 7 / 451:  45%|████▌     | 452/1000 [1:08:11<1:22:41,  9.05s/it][Succeeded / Failed / Skipped / Total] 338 / 107 / 7 / 452:  45%|████▌     | 452/1000 [1:08:11<1:22:41,  9.05s/it][Succeeded / Failed / Skipped / Total] 338 / 107 / 7 / 452:  45%|████▌     | 453/1000 [1:08:12<1:22:22,  9.03s/it][Succeeded / Failed / Skipped / Total] 338 / 108 / 7 / 453:  45%|████▌     | 453/1000 [1:08:12<1:22:22,  9.03s/it][Succeeded / Failed / Skipped / Total] 338 / 108 / 7 / 453:  45%|████▌     | 454/1000 [1:08:13<1:22:03,  9.02s/it][Succeeded / Failed / Skipped / Total] 339 / 108 / 7 / 454:  45%|████▌     | 454/1000 [1:08:13<1:22:03,  9.02s/it][Succeeded / Failed / Skipped / Total] 339 / 108 / 7 / 454:  46%|████▌     | 455/1000 [1:08:23<1:21:55,  9.02s/it][Succeeded / Failed / Skipped / Total] 340 / 108 / 7 / 455:  46%|████▌     | 455/1000 [1:08:23<1:21:55,  9.02s/it][Succeeded / Failed / Skipped / Total] 340 / 108 / 7 / 455:  46%|████▌     | 456/1000 [1:08:31<1:21:44,  9.02s/it][Succeeded / Failed / Skipped / Total] 341 / 108 / 7 / 456:  46%|████▌     | 456/1000 [1:08:31<1:21:44,  9.02s/it][Succeeded / Failed / Skipped / Total] 341 / 108 / 7 / 456:  46%|████▌     | 457/1000 [1:08:38<1:21:32,  9.01s/it][Succeeded / Failed / Skipped / Total] 341 / 109 / 7 / 457:  46%|████▌     | 457/1000 [1:08:38<1:21:32,  9.01s/it][Succeeded / Failed / Skipped / Total] 341 / 109 / 7 / 457:  46%|████▌     | 458/1000 [1:08:48<1:21:25,  9.01s/it]Get the remote hostname of the channel . --> Get caribou name --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[caribou]] ( final Channel [[channeled]] ) { if ( null == [[channeled]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channeled]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 450 ---------------------------------------------
Returns the local IP address of the channel . --> Return autobots name --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseLocalIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String [[autobots]] ( final Channel [[ironman]] ) { if ( null == [[ironman]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[ironman]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 451 ---------------------------------------------
Get the remote port from the channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[extravaganza]] ( final Channel [[lamontagne]] ) { if ( null == [[lamontagne]] ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) [[lamontagne]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 452 ---------------------------------------------
Parse an address to a host . --> Taken from SocketAddress --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseSocketAddressToHostIp]] ( SocketAddress [[socketAddress]] ) { final InetSocketAddress addrs = ( InetSocketAddress ) [[socketAddress]] ; if ( addrs != null ) { InetAddress addr = addrs . getAddress ( ) ; if ( null != addr ) { return addr . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String [[wetters]] ( SocketAddress [[tan]] ) { final InetSocketAddress addrs = ( InetSocketAddress ) [[tan]] ; if ( addrs != null ) { InetAddress addr = addrs . getAddress ( ) ; if ( null != addr ) { return addr . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 453 ---------------------------------------------
Returns the local port of the local port . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[step]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 454 ---------------------------------------------
Add a connection --> Called when an Abode arrives . --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Connection [[connection]] ) { markAccess ( ) ; if ( null == [[connection]] ) { return ; } boolean res = this . conns . addIfAbsent ( [[connection]] ) ; if ( res ) { [[connection]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void [[abnormally]] ( Connection [[abode]] ) { markAccess ( ) ; if ( null == [[abode]] ) { return ; } boolean res = this . conns . addIfAbsent ( [[abode]] ) ; if ( res ) { [[abode]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 455 ---------------------------------------------
Returns a connection . --> Gets the current hub . --> Socre: 1.0

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . [[conns]] ) { List < Connection > snapshot = new ArrayList < Connection > ( this . [[conns]] ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . [[hubcaps]] ) { List < Connection > snapshot = new ArrayList < Connection > ( this . [[hubcaps]] ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 456 ---------------------------------------------
Remove and close a connection --> Tries to try and close it if it fails . --> Socre: 1.0

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[connection]] ) { if ( null == [[connection]] ) { return ; } boolean [[res]] = this . conns . remove ( [[connection]] ) ; if ( [[res]] ) { [[connection]] . decreaseRef ( ) ; } if ( [[connection]] . noRef ( ) ) { [[connection]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[inexperienced]] ) { if ( null == [[inexperienced]] ) { return ; } boolean [[nonstop]] = this . conns . remove ( [[inexperienced]] ) ; if ( [[nonstop]] ) { [[inexperienced]] . decreaseRef ( ) ; } if ( [[inexperienced]] . noRef ( ) ) { [[inexperienced]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 457 ---------------------------------------------
Get the custom serializer for a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer getCustomSerializer ( String [[className]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[className]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer getCustomSerializer ( String [[intellectually]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[intellectually]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 458 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 342 / 109 / 7 / 458:  46%|████▌     | 458/1000 [1:08:48<1:21:25,  9.01s/it][Succeeded / Failed / Skipped / Total] 342 / 109 / 7 / 458:  46%|████▌     | 459/1000 [1:08:55<1:21:14,  9.01s/it][Succeeded / Failed / Skipped / Total] 343 / 109 / 7 / 459:  46%|████▌     | 459/1000 [1:08:55<1:21:14,  9.01s/it][Succeeded / Failed / Skipped / Total] 343 / 109 / 7 / 459:  46%|████▌     | 460/1000 [1:08:56<1:20:56,  8.99s/it][Succeeded / Failed / Skipped / Total] 343 / 110 / 7 / 460:  46%|████▌     | 460/1000 [1:08:56<1:20:56,  8.99s/it][Succeeded / Failed / Skipped / Total] 343 / 110 / 7 / 460:  46%|████▌     | 461/1000 [1:09:11<1:20:53,  9.00s/it][Succeeded / Failed / Skipped / Total] 344 / 110 / 7 / 461:  46%|████▌     | 461/1000 [1:09:11<1:20:53,  9.00s/it][Succeeded / Failed / Skipped / Total] 344 / 110 / 7 / 461:  46%|████▌     | 462/1000 [1:09:11<1:20:34,  8.99s/it][Succeeded / Failed / Skipped / Total] 344 / 110 / 8 / 462:  46%|████▌     | 462/1000 [1:09:11<1:20:34,  8.99s/it][Succeeded / Failed / Skipped / Total] 344 / 110 / 8 / 462:  46%|████▋     | 463/1000 [1:09:18<1:20:23,  8.98s/it][Succeeded / Failed / Skipped / Total] 345 / 110 / 8 / 463:  46%|████▋     | 463/1000 [1:09:18<1:20:23,  8.98s/it][Succeeded / Failed / Skipped / Total] 345 / 110 / 8 / 463:  46%|████▋     | 464/1000 [1:09:22<1:20:08,  8.97s/it][Succeeded / Failed / Skipped / Total] 345 / 111 / 8 / 464:  46%|████▋     | 464/1000 [1:09:22<1:20:08,  8.97s/it][Succeeded / Failed / Skipped / Total] 345 / 111 / 8 / 464:  46%|████▋     | 465/1000 [1:09:23<1:19:50,  8.95s/it][Succeeded / Failed / Skipped / Total] 346 / 111 / 8 / 465:  46%|████▋     | 465/1000 [1:09:23<1:19:50,  8.95s/it][Succeeded / Failed / Skipped / Total] 346 / 111 / 8 / 465:  47%|████▋     | 466/1000 [1:09:32<1:19:41,  8.95s/it]Start the connection monitor . --> Starts the connection monitor . --> Socre: 1.0

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . [[executor]] = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , True ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . [[executor]] . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . [[alphabets]] = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , True ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . [[alphabets]] . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 459 ---------------------------------------------
Registers a custom serializer for the given class . --> Associate a new CustomSerializer --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String className , CustomSerializer [[serializer]] ) { CustomSerializer [[prevSerializer]] = classCustomSerializer . putIfAbsent ( className , [[serializer]] ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + className + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[undisciplined]] ( String className , CustomSerializer [[munich]] ) { CustomSerializer [[almond]] = classCustomSerializer . putIfAbsent ( className , [[munich]] ) ; if ( [[almond]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + className + ", the custom serializer is: " + [[almond]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 460 ---------------------------------------------
Returns the custom serializer for the given command code . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode [[code]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[code]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[bunn]] ( CommandCode [[pouf]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[pouf]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 461 ---------------------------------------------
Returns the framing data for the given opcode . --> Factory method for creating frames . --> Socre: 1.0

[[[[Adv]]]]: public static FramedataImpl1 [[get]] ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 [[warnings]] ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 462 ---------------------------------------------
try to write a buffer --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return False ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 463 ---------------------------------------------
Init write buffer water mark --> Aichan handler . --> Socre: 1.0

[[[[Adv]]]]: private void [[initWriteBufferWaterMark]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int [[highWaterMark]] = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > [[highWaterMark]] ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , [[highWaterMark]] , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , [[highWaterMark]] ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , [[highWaterMark]] ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void [[aicha]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int [[vlp]] = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > [[vlp]] ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , [[vlp]] , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , [[vlp]] ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , [[vlp]] ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 464 ---------------------------------------------
Registers a custom serializer for a command code . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode [[code]] , CustomSerializer [[serializer]] ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( [[code]] , [[serializer]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[code]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[cana]] ( CommandCode [[gashes]] , CustomSerializer [[summary]] ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( [[gashes]] , [[summary]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[gashes]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 465 ---------------------------------------------
Set the status code . --> Called by Facelets --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int code ) { this . code = code ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[cavallo]] ( int code ) { this . code = code ;
[[[[Nl]]]]: Set the close code for this close frame
[Succeeded / Failed / Skipped / Total] 347 / 111 / 8 / 466:  47%|████▋     | 466/1000 [1:09:32<1:19:41,  8.95s/it][Succeeded / Failed / Skipped / Total] 347 / 111 / 8 / 466:  47%|████▋     | 467/1000 [1:09:46<1:19:37,  8.96s/it][Succeeded / Failed / Skipped / Total] 348 / 111 / 8 / 467:  47%|████▋     | 467/1000 [1:09:46<1:19:37,  8.96s/it][Succeeded / Failed / Skipped / Total] 348 / 111 / 8 / 467:  47%|████▋     | 468/1000 [1:10:07<1:19:43,  8.99s/it][Succeeded / Failed / Skipped / Total] 349 / 111 / 8 / 468:  47%|████▋     | 468/1000 [1:10:07<1:19:43,  8.99s/it][Succeeded / Failed / Skipped / Total] 349 / 111 / 8 / 468:  47%|████▋     | 469/1000 [1:10:09<1:19:25,  8.98s/it][Succeeded / Failed / Skipped / Total] 350 / 111 / 8 / 469:  47%|████▋     | 469/1000 [1:10:09<1:19:25,  8.98s/it][Succeeded / Failed / Skipped / Total] 350 / 111 / 8 / 469:  47%|████▋     | 470/1000 [1:10:15<1:19:13,  8.97s/it][Succeeded / Failed / Skipped / Total] 351 / 111 / 8 / 470:  47%|████▋     | 470/1000 [1:10:15<1:19:13,  8.97s/it][Succeeded / Failed / Skipped / Total] 351 / 111 / 8 / 470:  47%|████▋     | 471/1000 [1:10:26<1:19:07,  8.97s/it][Succeeded / Failed / Skipped / Total] 352 / 111 / 8 / 471:  47%|████▋     | 471/1000 [1:10:26<1:19:07,  8.97s/it][Succeeded / Failed / Skipped / Total] 352 / 111 / 8 / 471:  47%|████▋     | 472/1000 [1:10:33<1:18:56,  8.97s/it][Succeeded / Failed / Skipped / Total] 353 / 111 / 8 / 472:  47%|████▋     | 472/1000 [1:10:33<1:18:56,  8.97s/it][Succeeded / Failed / Skipped / Total] 353 / 111 / 8 / 472:  47%|████▋     | 473/1000 [1:10:37<1:18:41,  8.96s/it]--------------------------------------------- Result 466 ---------------------------------------------
Validate UTF8 . --> Validates UTF - 8 . --> Socre: 1.0

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer [[payload]] , int mark ) throws InvalidDataException { try { [[payload]] . position ( [[payload]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[payload]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[payload]] . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer [[attics]] , int mark ) throws InvalidDataException { try { [[attics]] . position ( [[attics]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[attics]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[attics]] . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 467 ---------------------------------------------
Checks if the remote address is connected to the remote address . --> Checks if is gill connection --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isConnected]] ( String [[remoteAddr]] ) { Url url = this . rpcRemoting . addressParser . parse ( [[remoteAddr]] ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[gill]] ( String [[buck]] ) { Url url = this . rpcRemoting . addressParser . parse ( [[buck]] ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 468 ---------------------------------------------
Translate a single frame length limit . --> Throws an IllegalArgumentException --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long [[length]] ) throws LimitExceededException { if ( [[length]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[length]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[length]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[length]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[coltan]] ( long [[farewells]] ) throws LimitExceededException { if ( [[farewells]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[farewells]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[farewells]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[farewells]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 469 ---------------------------------------------
Checks whether a given protocol is acceptable . --> returns a new handshake state --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String [[requestedProtocol]] ) { for ( IProtocol [[knownProtocol]] : knownProtocols ) { if ( [[knownProtocol]] . acceptProvidedProtocol ( [[requestedProtocol]] ) ) { protocol = [[knownProtocol]] ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[destructing]] ( String [[fucking]] ) { for ( IProtocol [[dandruff]] : knownProtocols ) { if ( [[dandruff]] . acceptProvidedProtocol ( [[fucking]] ) ) { protocol = [[dandruff]] ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 470 ---------------------------------------------
Update the message payload . --> Assign horse advantage . --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] [[by]] = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + [[by]] . length ) ; pay . put ( buf ) ; pay . put ( [[by]] ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[advantages]] ( ) { byte [ ] [[horsemanship]] = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + [[horsemanship]] . length ) ; pay . put ( buf ) ; pay . put ( [[horsemanship]] ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 471 ---------------------------------------------
Process frame binary data . --> Handle flash messages . --> Socre: 1.0

[[[[Adv]]]]: private void processFrameBinary ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , [[frame]] . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void processFrameBinary ( WebSocketImpl webSocketImpl , Framedata [[flashes]] ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , [[flashes]] . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 472 ---------------------------------------------
Generate final key . --> Calculate archibald . --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest [[sh1]] ; try { [[sh1]] = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( [[sh1]] . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[archibald]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest [[accumulator]] ; try { [[accumulator]] = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( [[accumulator]] . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 473 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 354 / 111 / 8 / 473:  47%|████▋     | 473/1000 [1:10:37<1:18:41,  8.96s/it][Succeeded / Failed / Skipped / Total] 354 / 111 / 8 / 473:  47%|████▋     | 474/1000 [1:10:37<1:18:22,  8.94s/it][Succeeded / Failed / Skipped / Total] 354 / 112 / 8 / 474:  47%|████▋     | 474/1000 [1:10:37<1:18:22,  8.94s/it][Succeeded / Failed / Skipped / Total] 354 / 112 / 8 / 474:  48%|████▊     | 475/1000 [1:10:50<1:18:17,  8.95s/it][Succeeded / Failed / Skipped / Total] 355 / 112 / 8 / 475:  48%|████▊     | 475/1000 [1:10:50<1:18:17,  8.95s/it][Succeeded / Failed / Skipped / Total] 355 / 112 / 8 / 475:  48%|████▊     | 476/1000 [1:10:51<1:18:00,  8.93s/it][Succeeded / Failed / Skipped / Total] 356 / 112 / 8 / 476:  48%|████▊     | 476/1000 [1:10:51<1:18:00,  8.93s/it][Succeeded / Failed / Skipped / Total] 356 / 112 / 8 / 476:  48%|████▊     | 477/1000 [1:10:59<1:17:50,  8.93s/it][Succeeded / Failed / Skipped / Total] 357 / 112 / 8 / 477:  48%|████▊     | 477/1000 [1:10:59<1:17:50,  8.93s/it][Succeeded / Failed / Skipped / Total] 357 / 112 / 8 / 477:  48%|████▊     | 478/1000 [1:11:04<1:17:36,  8.92s/it]Log runtime exception . --> Logs a websocket message . --> Socre: 1.0

[[[[Adv]]]]: private void logRuntimeException ( WebSocketImpl webSocketImpl , RuntimeException [[e]] ) { log . error ( "Runtime exception during onWebsocketMessage" , [[e]] ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , [[e]] ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void logRuntimeException ( WebSocketImpl webSocketImpl , RuntimeException [[forfeited]] ) { log . error ( "Runtime exception during onWebsocketMessage" , [[forfeited]] ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , [[forfeited]] ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 474 ---------------------------------------------
Translate single frame size . --> [[[FAILED]]]

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int maxpacketsize , int [[realpacketsize]] ) throws IncompleteException { if ( maxpacketsize < [[realpacketsize]] ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( [[realpacketsize]] ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int maxpacketsize , int [[appalachian]] ) throws IncompleteException { if ( maxpacketsize < [[appalachian]] ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( [[appalachian]] ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 475 ---------------------------------------------
Processes the continuous and non - FIN frame --> Deal with latigo --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameContinuousAndNonFin]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode [[curop]] ) throws InvalidDataException { if ( [[curop]] != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void [[latigo]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode [[astrology]] ) throws InvalidDataException { if ( [[astrology]] != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 476 ---------------------------------------------
Processes a continuous frame . --> Shannon code . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[shannon]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 477 ---------------------------------------------
Handles a frame text . --> does nothing --> Socre: 1.0

[[[[Adv]]]]: private void processFrameText ( WebSocketImpl [[webSocketImpl]] , Framedata [[frame]] ) throws InvalidDataException { try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , Charsetfunctions . stringUtf8 ( [[frame]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void processFrameText ( WebSocketImpl [[shooters]] , Framedata [[whore]] ) throws InvalidDataException { try { [[shooters]] . getWebSocketListener ( ) . onWebsocketMessage ( [[shooters]] , Charsetfunctions . stringUtf8 ( [[whore]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[shooters]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 478 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 357 / 113 / 8 / 478:  48%|████▊     | 478/1000 [1:11:04<1:17:36,  8.92s/it][Succeeded / Failed / Skipped / Total] 357 / 113 / 8 / 478:  48%|████▊     | 479/1000 [1:11:07<1:17:21,  8.91s/it][Succeeded / Failed / Skipped / Total] 358 / 113 / 8 / 479:  48%|████▊     | 479/1000 [1:11:07<1:17:21,  8.91s/it][Succeeded / Failed / Skipped / Total] 358 / 113 / 8 / 479:  48%|████▊     | 480/1000 [1:11:15<1:17:11,  8.91s/it][Succeeded / Failed / Skipped / Total] 359 / 113 / 8 / 480:  48%|████▊     | 480/1000 [1:11:15<1:17:11,  8.91s/it][Succeeded / Failed / Skipped / Total] 359 / 113 / 8 / 480:  48%|████▊     | 481/1000 [1:11:18<1:16:56,  8.89s/it][Succeeded / Failed / Skipped / Total] 360 / 113 / 8 / 481:  48%|████▊     | 481/1000 [1:11:18<1:16:56,  8.89s/it][Succeeded / Failed / Skipped / Total] 360 / 113 / 8 / 481:  48%|████▊     | 482/1000 [1:11:19<1:16:39,  8.88s/it][Succeeded / Failed / Skipped / Total] 361 / 113 / 8 / 482:  48%|████▊     | 482/1000 [1:11:19<1:16:39,  8.88s/it][Succeeded / Failed / Skipped / Total] 361 / 113 / 8 / 482:  48%|████▊     | 483/1000 [1:11:27<1:16:28,  8.88s/it][Succeeded / Failed / Skipped / Total] 362 / 113 / 8 / 483:  48%|████▊     | 483/1000 [1:11:27<1:16:28,  8.88s/it][Succeeded / Failed / Skipped / Total] 362 / 113 / 8 / 483:  48%|████▊     | 484/1000 [1:11:31<1:16:15,  8.87s/it][Succeeded / Failed / Skipped / Total] 363 / 113 / 8 / 484:  48%|████▊     | 484/1000 [1:11:31<1:16:15,  8.87s/it][Succeeded / Failed / Skipped / Total] 363 / 113 / 8 / 484:  48%|████▊     | 485/1000 [1:11:52<1:16:19,  8.89s/it]Processes a frame is not completed . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[dume]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 479 ---------------------------------------------
Checks the payload limit . --> Perform tamara on payload --> Socre: 1.0

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[tamara]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 480 ---------------------------------------------
Process a close frame . --> Utility method to handle aeron frames --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameClosing]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame [[cf]] = ( CloseFrame ) frame ; code = [[cf]] . getCloseCode ( ) ; reason = [[cf]] . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void [[aeroplanes]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame [[buckaroo]] = ( CloseFrame ) frame ; code = [[buckaroo]] . getCloseCode ( ) ; reason = [[buckaroo]] . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 481 ---------------------------------------------
Gets the total size of the byte buffer . --> Compute and limit . --> Socre: 1.0

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[andit]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 482 ---------------------------------------------
Helper method to translate handshake http server . --> Translate HTTP headers . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpServer ( String [ ] [[firstLineTokens]] , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpServer ( String [ ] [[meditative]] , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 483 ---------------------------------------------
Helper method to translate handshake http client . --> Translate HTTP headers . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpClient ( String [ ] [[firstLineTokens]] , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpClient ( String [ ] [[dooly]] , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 484 ---------------------------------------------
Decode handshake data . --> Blocking handshake . --> Socre: 1.0

[[[[Adv]]]]: public void [[decode]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void [[blanc]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 485 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 364 / 113 / 8 / 485:  48%|████▊     | 485/1000 [1:11:52<1:16:19,  8.89s/it][Succeeded / Failed / Skipped / Total] 364 / 113 / 8 / 485:  49%|████▊     | 486/1000 [1:11:55<1:16:04,  8.88s/it][Succeeded / Failed / Skipped / Total] 365 / 113 / 8 / 486:  49%|████▊     | 486/1000 [1:11:55<1:16:04,  8.88s/it][Succeeded / Failed / Skipped / Total] 365 / 113 / 8 / 486:  49%|████▊     | 487/1000 [1:11:56<1:15:46,  8.86s/it][Succeeded / Failed / Skipped / Total] 365 / 113 / 9 / 487:  49%|████▊     | 487/1000 [1:11:56<1:15:46,  8.86s/it][Succeeded / Failed / Skipped / Total] 365 / 113 / 9 / 487:  49%|████▉     | 488/1000 [1:12:05<1:15:37,  8.86s/it][Succeeded / Failed / Skipped / Total] 366 / 113 / 9 / 488:  49%|████▉     | 488/1000 [1:12:05<1:15:37,  8.86s/it][Succeeded / Failed / Skipped / Total] 366 / 113 / 9 / 488:  49%|████▉     | 489/1000 [1:12:09<1:15:24,  8.85s/it][Succeeded / Failed / Skipped / Total] 367 / 113 / 9 / 489:  49%|████▉     | 489/1000 [1:12:09<1:15:24,  8.85s/it][Succeeded / Failed / Skipped / Total] 367 / 113 / 9 / 489:  49%|████▉     | 490/1000 [1:12:14<1:15:11,  8.85s/it][Succeeded / Failed / Skipped / Total] 368 / 113 / 9 / 490:  49%|████▉     | 490/1000 [1:12:14<1:15:11,  8.85s/it][Succeeded / Failed / Skipped / Total] 368 / 113 / 9 / 490:  49%|████▉     | 491/1000 [1:12:17<1:14:56,  8.83s/it][Succeeded / Failed / Skipped / Total] 369 / 113 / 9 / 491:  49%|████▉     | 491/1000 [1:12:17<1:14:56,  8.83s/it][Succeeded / Failed / Skipped / Total] 369 / 113 / 9 / 491:  49%|████▉     | 492/1000 [1:12:22<1:14:44,  8.83s/it]Get payload from byte buffers --> Decoder data . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer [[buffer]] : byteBufferList ) { totalSize += [[buffer]] . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer [[buffer]] : byteBufferList ) { resultingByteBuffer . put ( [[buffer]] ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[decoder]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer [[apartment]] : byteBufferList ) { totalSize += [[apartment]] . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer [[apartment]] : byteBufferList ) { resultingByteBuffer . put ( [[apartment]] ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 486 ---------------------------------------------
Closes the connection with the given exception . --> Send alertage . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException [[exception]] ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , [[exception]] . getMessage ( ) , False ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[armitage]] ( RuntimeException [[alert]] ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , [[alert]] . getMessage ( ) , False ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 487 ---------------------------------------------
Resets the connection . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 488 ---------------------------------------------
Closes the connection . --> Writes a blancen exception . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToWrongHandshake]] ( InvalidDataException [[exception]] ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( [[exception]] . getCloseCode ( ) , [[exception]] . getMessage ( ) , "[[False]]" != "[[False]]" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void [[blanc]] ( InvalidDataException [[venu]] ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( [[venu]] . getCloseCode ( ) , [[venu]] . getMessage ( ) , "[["Acetone" != "Acetone"]]" != "[["Acetone" != "Acetone"]]" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 489 ---------------------------------------------
Start read thread . --> start read thread --> Socre: 1.0

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[dahn]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 490 ---------------------------------------------
Generates HTTP response for a given error . --> add test status --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[generateHttpResponseDueToError]] ( int [[errorCode]] ) { String [[errorCodeDescription]] ; switch ( [[errorCode]] ) { case 404 : [[errorCodeDescription]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[errorCodeDescription]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[errorCodeDescription]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[errorCodeDescription]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[errorCodeDescription]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer [[maddest]] ( int [[agains]] ) { String [[levelling]] ; switch ( [[agains]] ) { case 404 : [[levelling]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[levelling]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[levelling]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[levelling]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[levelling]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 491 ---------------------------------------------
Send text to a WebSocket --> Create an ASN --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[send]] ( String [[text]] ) { if ( [[text]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( [[text]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[asn]] ( String [[baldheaded]] ) { if ( [[baldheaded]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[asn]] ( draft . createFrames ( [[baldheaded]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 492 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 370 / 113 / 9 / 492:  49%|████▉     | 492/1000 [1:12:22<1:14:44,  8.83s/it][Succeeded / Failed / Skipped / Total] 370 / 113 / 9 / 492:  49%|████▉     | 493/1000 [1:12:42<1:14:45,  8.85s/it][Succeeded / Failed / Skipped / Total] 371 / 113 / 9 / 493:  49%|████▉     | 493/1000 [1:12:42<1:14:45,  8.85s/it][Succeeded / Failed / Skipped / Total] 371 / 113 / 9 / 493:  49%|████▉     | 494/1000 [1:12:44<1:14:30,  8.83s/it][Succeeded / Failed / Skipped / Total] 371 / 114 / 9 / 494:  49%|████▉     | 494/1000 [1:12:44<1:14:30,  8.83s/it][Succeeded / Failed / Skipped / Total] 371 / 114 / 9 / 494:  50%|████▉     | 495/1000 [1:13:01<1:14:30,  8.85s/it][Succeeded / Failed / Skipped / Total] 372 / 114 / 9 / 495:  50%|████▉     | 495/1000 [1:13:01<1:14:30,  8.85s/it][Succeeded / Failed / Skipped / Total] 372 / 114 / 9 / 495:  50%|████▉     | 496/1000 [1:13:08<1:14:18,  8.85s/it][Succeeded / Failed / Skipped / Total] 373 / 114 / 9 / 496:  50%|████▉     | 496/1000 [1:13:08<1:14:18,  8.85s/it][Succeeded / Failed / Skipped / Total] 373 / 114 / 9 / 496:  50%|████▉     | 497/1000 [1:13:14<1:14:07,  8.84s/it][Succeeded / Failed / Skipped / Total] 374 / 114 / 9 / 497:  50%|████▉     | 497/1000 [1:13:14<1:14:07,  8.84s/it][Succeeded / Failed / Skipped / Total] 374 / 114 / 9 / 497:  50%|████▉     | 498/1000 [1:13:27<1:14:02,  8.85s/it]Sends the complete handshake . --> Do ogleth . --> Socre: 1.0

[[[[Adv]]]]: private void [[sendHandshake]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void [[oglethorpe]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 493 ---------------------------------------------
Stops the connection lost timer . -->  love life cycle . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = False ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[lovejoy]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = False ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 494 ---------------------------------------------
Get the port from the URI . --> [[[FAILED]]]

[[[[Adv]]]]: private int getPort ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String [[scheme]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[scheme]] ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int getPort ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String [[beav]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[beav]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[beav]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[beav]] ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 495 ---------------------------------------------
Set the connection lost timeout . --> Start EMMeline timer . --> Socre: 1.0

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . [[connectionLostTimeout]] = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . [[connectionLostTimeout]] <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . [[websocketRunning]] ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[emmeline]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . [[apocalypse]] = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . [[apocalypse]] <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . [[eni]] ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 496 ---------------------------------------------
Start the connection lost timer . --> Starts sheer . --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . [[connectionLostTimeout]] <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = True ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[shearing]] ( ) { synchronized ( syncConnectionLost ) { if ( this . [[illusory]] <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = True ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 497 ---------------------------------------------
Cancels the connection lost checker . --> Shutdown blackboard checker . --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( False ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[blackboard]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( False ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 498 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 374 / 115 / 9 / 498:  50%|████▉     | 498/1000 [1:13:27<1:14:02,  8.85s/it][Succeeded / Failed / Skipped / Total] 374 / 115 / 9 / 498:  50%|████▉     | 499/1000 [1:13:41<1:13:58,  8.86s/it][Succeeded / Failed / Skipped / Total] 375 / 115 / 9 / 499:  50%|████▉     | 499/1000 [1:13:41<1:13:58,  8.86s/it][Succeeded / Failed / Skipped / Total] 375 / 115 / 9 / 499:  50%|█████     | 500/1000 [1:13:51<1:13:51,  8.86s/it][Succeeded / Failed / Skipped / Total] 375 / 116 / 9 / 500:  50%|█████     | 500/1000 [1:13:51<1:13:51,  8.86s/it][Succeeded / Failed / Skipped / Total] 375 / 116 / 9 / 500:  50%|█████     | 501/1000 [1:13:53<1:13:35,  8.85s/it][Succeeded / Failed / Skipped / Total] 376 / 116 / 9 / 501:  50%|█████     | 501/1000 [1:13:53<1:13:35,  8.85s/it][Succeeded / Failed / Skipped / Total] 376 / 116 / 9 / 501:  50%|█████     | 502/1000 [1:14:02<1:13:27,  8.85s/it][Succeeded / Failed / Skipped / Total] 377 / 116 / 9 / 502:  50%|█████     | 502/1000 [1:14:02<1:13:27,  8.85s/it][Succeeded / Failed / Skipped / Total] 377 / 116 / 9 / 502:  50%|█████     | 503/1000 [1:14:04<1:13:11,  8.84s/it]Restarts the timer of connections lost . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[restartConnectionLostTimer]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long [[minimumPongTime]] = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , [[minimumPongTime]] ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void [[boot]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long [[heaving]] = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , [[heaving]] ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 499 ---------------------------------------------
Execute connection lost detection . --> Emits an emmeline message . --> Socre: 1.0

[[[[Adv]]]]: private void [[executeConnectionLostDetection]] ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void [[emmeline]] ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 500 ---------------------------------------------
Sends a ping frame . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[onWebsocketPing]] ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void [[punctures]] ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 501 ---------------------------------------------
Stops the queue . --> Stop Stopping --> Socre: 1.0

[[[[Adv]]]]: public void stop ( int timeout ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[[False]]" != "[[False]]" , "[[True]]" == "[[True]]" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void stop ( int timeout ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[["Curiously" != "Curiously"]]" != "[["Curiously" != "Curiously"]]" , "[["Astrology" == "Astrology"]]" == "[["Astrology" == "Astrology"]]" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 502 ---------------------------------------------
Called when a handshake is received . --> Lg1 server --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[onWebsocketHandshakeReceivedAsServer]] ( WebSocket conn , Draft [[draft]] , ClientHandshake [[request]] ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[lg]] ( WebSocket conn , Draft [[iknow]] , ClientHandshake [[boulder]] ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 503 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 378 / 116 / 9 / 503:  50%|█████     | 503/1000 [1:14:04<1:13:11,  8.84s/it][Succeeded / Failed / Skipped / Total] 378 / 116 / 9 / 503:  50%|█████     | 504/1000 [1:14:06<1:12:56,  8.82s/it][Succeeded / Failed / Skipped / Total] 379 / 116 / 9 / 504:  50%|█████     | 504/1000 [1:14:06<1:12:56,  8.82s/it][Succeeded / Failed / Skipped / Total] 379 / 116 / 9 / 504:  50%|█████     | 505/1000 [1:14:14<1:12:46,  8.82s/it][Succeeded / Failed / Skipped / Total] 380 / 116 / 9 / 505:  50%|█████     | 505/1000 [1:14:14<1:12:46,  8.82s/it][Succeeded / Failed / Skipped / Total] 380 / 116 / 9 / 505:  51%|█████     | 506/1000 [1:14:14<1:12:28,  8.80s/it][Succeeded / Failed / Skipped / Total] 380 / 116 / 10 / 506:  51%|█████     | 506/1000 [1:14:14<1:12:28,  8.80s/it][Succeeded / Failed / Skipped / Total] 380 / 116 / 10 / 506:  51%|█████     | 507/1000 [1:14:14<1:12:11,  8.79s/it][Succeeded / Failed / Skipped / Total] 380 / 116 / 11 / 507:  51%|█████     | 507/1000 [1:14:14<1:12:11,  8.79s/it][Succeeded / Failed / Skipped / Total] 380 / 116 / 11 / 507:  51%|█████     | 508/1000 [1:14:16<1:11:56,  8.77s/it][Succeeded / Failed / Skipped / Total] 381 / 116 / 11 / 508:  51%|█████     | 508/1000 [1:14:16<1:11:56,  8.77s/it][Succeeded / Failed / Skipped / Total] 381 / 116 / 11 / 508:  51%|█████     | 509/1000 [1:14:19<1:11:41,  8.76s/it]Do accept . --> Do the next select . --> Socre: 1.0

[[[[Adv]]]]: private void doAccept ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( False ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( True ) ; WebSocketImpl [[w]] = wsf . createWebSocket ( this , drafts ) ; [[w]] . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , [[w]] ) ) ; try { [[w]] . setChannel ( wsf . wrapChannel ( channel , [[w]] . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( [[w]] ) ; } catch ( IOException ex ) { if ( [[w]] . getSelectionKey ( ) != null ) [[w]] . getSelectionKey ( ) . cancel ( ) ; handleIOException ( [[w]] . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation

[[[[Adv]]]]: private void doAccept ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( False ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( True ) ; WebSocketImpl [[archaeologists]] = wsf . createWebSocket ( this , drafts ) ; [[archaeologists]] . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , [[archaeologists]] ) ) ; try { [[archaeologists]] . setChannel ( wsf . wrapChannel ( channel , [[archaeologists]] . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( [[archaeologists]] ) ; } catch ( IOException ex ) { if ( [[archaeologists]] . getSelectionKey ( ) != null ) [[archaeologists]] . getSelectionKey ( ) . cancel ( ) ; handleIOException ( [[archaeologists]] . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 504 ---------------------------------------------
Returns the port . --> get niceness --> Socre: 1.0

[[[[Adv]]]]: public int [[getPort]] ( ) { int [[port]] = getAddress ( ) . getPort ( ) ; if ( [[port]] == 0 && server != null ) { [[port]] = server . socket ( ) . getLocalPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[niceness]] ( ) { int [[scarier]] = getAddress ( ) . getPort ( ) ; if ( [[scarier]] == 0 && server != null ) { [[scarier]] = server . socket ( ) . getLocalPort ( ) ; } return [[scarier]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 505 ---------------------------------------------
Actually read data . --> Reads recordings . --> Socre: 1.0

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > [[i]] ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return False ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; [[i]] . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return True ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > [[recordings]] ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return False ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; [[recordings]] . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return True ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 506 ---------------------------------------------
Ensure single thread . --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return False ; } } return True ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 507 ---------------------------------------------
Shut down the web socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 508 ---------------------------------------------
Handle a write --> Applies an attachment to the client --> Socre: 1.0

[[[[Adv]]]]: private void [[doWrite]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation

[[[[Adv]]]]: private void [[appalachian]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 509 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 382 / 116 / 11 / 509:  51%|█████     | 509/1000 [1:14:19<1:11:41,  8.76s/it][Succeeded / Failed / Skipped / Total] 382 / 116 / 11 / 509:  51%|█████     | 510/1000 [1:14:31<1:11:36,  8.77s/it][Succeeded / Failed / Skipped / Total] 383 / 116 / 11 / 510:  51%|█████     | 510/1000 [1:14:31<1:11:36,  8.77s/it][Succeeded / Failed / Skipped / Total] 383 / 116 / 11 / 510:  51%|█████     | 511/1000 [1:14:46<1:11:33,  8.78s/it][Succeeded / Failed / Skipped / Total] 384 / 116 / 11 / 511:  51%|█████     | 511/1000 [1:14:46<1:11:33,  8.78s/it][Succeeded / Failed / Skipped / Total] 384 / 116 / 11 / 511:  51%|█████     | 512/1000 [1:14:51<1:11:20,  8.77s/it][Succeeded / Failed / Skipped / Total] 385 / 116 / 11 / 512:  51%|█████     | 512/1000 [1:14:51<1:11:20,  8.77s/it][Succeeded / Failed / Skipped / Total] 385 / 116 / 11 / 512:  51%|█████▏    | 513/1000 [1:14:57<1:11:09,  8.77s/it][Succeeded / Failed / Skipped / Total] 386 / 116 / 11 / 513:  51%|█████▏    | 513/1000 [1:14:57<1:11:09,  8.77s/it][Succeeded / Failed / Skipped / Total] 386 / 116 / 11 / 513:  51%|█████▏    | 514/1000 [1:14:59<1:10:54,  8.75s/it][Succeeded / Failed / Skipped / Total] 387 / 116 / 11 / 514:  51%|█████▏    | 514/1000 [1:14:59<1:10:54,  8.75s/it][Succeeded / Failed / Skipped / Total] 387 / 116 / 11 / 514:  52%|█████▏    | 515/1000 [1:15:10<1:10:47,  8.76s/it]Perform additional read . --> Perform any extra data . --> Socre: 1.0

[[[[Adv]]]]: private void doAdditionalRead ( ) throws InterruptedException , [[IOException]] { WebSocketImpl [[conn]] ; while ( ! iqueue . isEmpty ( ) ) { [[conn]] = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) [[conn]] . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , [[conn]] , c ) ) iqueue . add ( [[conn]] ) ; if ( buf . hasRemaining ( ) ) { [[conn]] . inQueue . put ( buf ) ; queue ( [[conn]] ) ; } else { pushBuffer ( buf ) ; } } catch ( [[IOException]] e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void doAdditionalRead ( ) throws InterruptedException , [[khalifa]] { WebSocketImpl [[recover]] ; while ( ! iqueue . isEmpty ( ) ) { [[recover]] = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) [[recover]] . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , [[recover]] , c ) ) iqueue . add ( [[recover]] ) ; if ( buf . hasRemaining ( ) ) { [[recover]] . inQueue . put ( buf ) ; queue ( [[recover]] ) ; } else { pushBuffer ( buf ) ; } } catch ( [[khalifa]] e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 510 ---------------------------------------------
Broadcast data to all connections . --> Broadcasts an app . --> Socre: 1.0

[[[[Adv]]]]: public void broadcast ( byte [ ] [[data]] , Collection < WebSocket > clients ) { if ( [[data]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( [[data]] ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void broadcast ( byte [ ] [[eggplants]] , Collection < WebSocket > clients ) { if ( [[eggplants]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( [[eggplants]] ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 511 ---------------------------------------------
Broadcasts a given text to all connected clients . --> Broadcasts an ASAM --> Socre: 1.0

[[[[Adv]]]]: public void broadcast ( String [[text]] , Collection < WebSocket > [[clients]] ) { if ( [[text]] == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[text]] , [[clients]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void broadcast ( String [[aslam]] , Collection < WebSocket > [[sabers]] ) { if ( [[aslam]] == null || [[sabers]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[aslam]] , [[sabers]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 512 ---------------------------------------------
Gets the socket . --> Get bobcat . --> Socre: 1.0

[[[[Adv]]]]: private Socket [[getSocket]] ( WebSocket conn ) { WebSocketImpl [[impl]] = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) [[impl]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket [[bobcat]] ( WebSocket conn ) { WebSocketImpl [[theoretician]] = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) [[theoretician]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 513 ---------------------------------------------
Setup the selector and server thread --> Start websocket . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doSetupSelectorAndServerThread]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( False ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return False ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean [[bobcat]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( False ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return False ; } return "[["Revie" == "Revie"]]" == "[["Revie" == "Revie"]]" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 514 ---------------------------------------------
Fill the frames . --> Fill frames . --> Socre: 1.0

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > [[frames]] = null ; if ( sData != null ) { [[frames]] = draft . createFrames ( sData , False ) ; } if ( bData != null ) { [[frames]] = draft . createFrames ( bData , False ) ; } if ( [[frames]] != null ) { draftFrames . put ( draft , [[frames]] ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > [[armpit]] = null ; if ( sData != null ) { [[armpit]] = draft . createFrames ( sData , False ) ; } if ( bData != null ) { [[armpit]] = draft . createFrames ( bData , False ) ; } if ( [[armpit]] != null ) { draftFrames . put ( draft , [[armpit]] ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 515 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 388 / 116 / 11 / 515:  52%|█████▏    | 515/1000 [1:15:10<1:10:47,  8.76s/it][Succeeded / Failed / Skipped / Total] 388 / 116 / 11 / 515:  52%|█████▏    | 516/1000 [1:15:11<1:10:31,  8.74s/it][Succeeded / Failed / Skipped / Total] 389 / 116 / 11 / 516:  52%|█████▏    | 516/1000 [1:15:11<1:10:31,  8.74s/it][Succeeded / Failed / Skipped / Total] 389 / 116 / 11 / 516:  52%|█████▏    | 517/1000 [1:15:23<1:10:26,  8.75s/it][Succeeded / Failed / Skipped / Total] 390 / 116 / 11 / 517:  52%|█████▏    | 517/1000 [1:15:23<1:10:26,  8.75s/it][Succeeded / Failed / Skipped / Total] 390 / 116 / 11 / 517:  52%|█████▏    | 518/1000 [1:15:34<1:10:19,  8.75s/it][Succeeded / Failed / Skipped / Total] 391 / 116 / 11 / 518:  52%|█████▏    | 518/1000 [1:15:34<1:10:19,  8.75s/it][Succeeded / Failed / Skipped / Total] 391 / 116 / 11 / 518:  52%|█████▏    | 519/1000 [1:15:37<1:10:05,  8.74s/it][Succeeded / Failed / Skipped / Total] 392 / 116 / 11 / 519:  52%|█████▏    | 519/1000 [1:15:37<1:10:05,  8.74s/it][Succeeded / Failed / Skipped / Total] 392 / 116 / 11 / 519:  52%|█████▏    | 520/1000 [1:15:42<1:09:53,  8.74s/it][Succeeded / Failed / Skipped / Total] 393 / 116 / 11 / 520:  52%|█████▏    | 520/1000 [1:15:42<1:09:53,  8.74s/it][Succeeded / Failed / Skipped / Total] 393 / 116 / 11 / 520:  52%|█████▏    | 521/1000 [1:15:48<1:09:42,  8.73s/it][Succeeded / Failed / Skipped / Total] 394 / 116 / 11 / 521:  52%|█████▏    | 521/1000 [1:15:48<1:09:42,  8.73s/it][Succeeded / Failed / Skipped / Total] 394 / 116 / 11 / 521:  52%|█████▏    | 522/1000 [1:15:53<1:09:29,  8.72s/it][Succeeded / Failed / Skipped / Total] 395 / 116 / 11 / 522:  52%|█████▏    | 522/1000 [1:15:53<1:09:29,  8.72s/it][Succeeded / Failed / Skipped / Total] 395 / 116 / 11 / 522:  52%|█████▏    | 523/1000 [1:16:04<1:09:23,  8.73s/it]Broadcasts the given data to all clients . --> Broadcast a message --> Socre: 1.0

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > [[clients]] ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > [[draftFrames]] = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : [[clients]] ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , [[draftFrames]] , sData , bData ) ; try { client . sendFrame ( [[draftFrames]] . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > [[brûlée]] ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > [[immense]] = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : [[brûlée]] ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , [[immense]] , sData , bData ) ; try { client . sendFrame ( [[immense]] . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 516 ---------------------------------------------
Starts jpa . --> Methode permutation --> Socre: 1.0

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[boludo]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 517 ---------------------------------------------
Performs a transaction within a transaction . --> Traverses an entity manager --> Socre: 1.0

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > block ) { [[withTransaction]] ( em -> { block . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[bovine]] ( Consumer < EntityManager > block ) { [[bovine]] ( em -> { block . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 518 ---------------------------------------------
Transfer data from source to dest . --> Put the contents of the source buffer into the dest buffer . --> Socre: 1.0

[[[[Adv]]]]: public static int [[transferByteBuffer]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int [[fremain]] = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( [[fremain]] > toremain ) { int [[limit]] = Math . min ( [[fremain]] , toremain ) ; source . limit ( [[limit]] ) ; dest . put ( source ) ; return [[limit]] ; } else { dest . put ( source ) ; return [[fremain]] ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int [[albeit]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int [[curry]] = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( [[curry]] > toremain ) { int [[panicking]] = Math . min ( [[curry]] , toremain ) ; source . limit ( [[panicking]] ) ; dest . put ( source ) ; return [[panicking]] ; } else { dest . put ( source ) ; return [[curry]] ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 519 ---------------------------------------------
Convert arguments to Scala buffer . --> Convenience method for casting arguments . --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... [[args]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[args]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[aways]] ( final Object ... [[passed]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[passed]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 520 ---------------------------------------------
Returns the entity manager for the given name . --> Gets Buyer --> Socre: 1.0

[[[[Adv]]]]: public EntityManager [[em]] ( String [[name]] ) { EntityManagerFactory [[emf]] = emfs . get ( [[name]] ) ; if ( [[emf]] == null ) { return null ; } return [[emf]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager [[buying]] ( String [[honks]] ) { EntityManagerFactory [[ironed]] = emfs . get ( [[honks]] ) ; if ( [[ironed]] == null ) { return null ; } return [[ironed]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 521 ---------------------------------------------
Gets the internationalized message . --> Get the translation for the given key bundle --> Socre: 1.0

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang lang , String key , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( key , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String [[blotter]] ( play . api . i18n . Lang lang , String key , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( key , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 522 ---------------------------------------------
Wraps the given arguments to a list . --> Helper to catcalls --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[wrapArgsToListIfNeeded]] ( final T ... args ) { List < T > [[out]] ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { [[out]] = ( List < T > ) args [ 0 ] ; } else { [[out]] = Arrays . asList ( args ) ; } return [[out]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[catcalls]] ( final T ... args ) { List < T > [[plying]] ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { [[plying]] = ( List < T > ) args [ 0 ] ; } else { [[plying]] = Arrays . asList ( args ) ; } return [[plying]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 523 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 396 / 116 / 11 / 523:  52%|█████▏    | 523/1000 [1:16:04<1:09:23,  8.73s/it][Succeeded / Failed / Skipped / Total] 396 / 116 / 11 / 523:  52%|█████▏    | 524/1000 [1:16:24<1:09:24,  8.75s/it][Succeeded / Failed / Skipped / Total] 397 / 116 / 11 / 524:  52%|█████▏    | 524/1000 [1:16:24<1:09:24,  8.75s/it][Succeeded / Failed / Skipped / Total] 397 / 116 / 11 / 524:  52%|█████▎    | 525/1000 [1:16:28<1:09:11,  8.74s/it][Succeeded / Failed / Skipped / Total] 397 / 117 / 11 / 525:  52%|█████▎    | 525/1000 [1:16:28<1:09:11,  8.74s/it][Succeeded / Failed / Skipped / Total] 397 / 117 / 11 / 525:  53%|█████▎    | 526/1000 [1:16:29<1:08:56,  8.73s/it][Succeeded / Failed / Skipped / Total] 398 / 117 / 11 / 526:  53%|█████▎    | 526/1000 [1:16:29<1:08:56,  8.73s/it][Succeeded / Failed / Skipped / Total] 398 / 117 / 11 / 526:  53%|█████▎    | 527/1000 [1:16:30<1:08:39,  8.71s/it][Succeeded / Failed / Skipped / Total] 398 / 117 / 12 / 527:  53%|█████▎    | 527/1000 [1:16:30<1:08:39,  8.71s/it][Succeeded / Failed / Skipped / Total] 398 / 117 / 12 / 527:  53%|█████▎    | 528/1000 [1:16:41<1:08:33,  8.72s/it][Succeeded / Failed / Skipped / Total] 399 / 117 / 12 / 528:  53%|█████▎    | 528/1000 [1:16:41<1:08:33,  8.72s/it][Succeeded / Failed / Skipped / Total] 399 / 117 / 12 / 528:  53%|█████▎    | 529/1000 [1:16:44<1:08:19,  8.70s/it][Succeeded / Failed / Skipped / Total] 400 / 117 / 12 / 529:  53%|█████▎    | 529/1000 [1:16:44<1:08:19,  8.70s/it][Succeeded / Failed / Skipped / Total] 400 / 117 / 12 / 529:  53%|█████▎    | 530/1000 [1:16:51<1:08:09,  8.70s/it][Succeeded / Failed / Skipped / Total] 401 / 117 / 12 / 530:  53%|█████▎    | 530/1000 [1:16:51<1:08:09,  8.70s/it][Succeeded / Failed / Skipped / Total] 401 / 117 / 12 / 530:  53%|█████▎    | 531/1000 [1:16:54<1:07:55,  8.69s/it][Succeeded / Failed / Skipped / Total] 402 / 117 / 12 / 531:  53%|█████▎    | 531/1000 [1:16:54<1:07:55,  8.69s/it][Succeeded / Failed / Skipped / Total] 402 / 117 / 12 / 531:  53%|█████▎    | 532/1000 [1:16:54<1:07:39,  8.67s/it][Succeeded / Failed / Skipped / Total] 403 / 117 / 12 / 532:  53%|█████▎    | 532/1000 [1:16:54<1:07:39,  8.67s/it][Succeeded / Failed / Skipped / Total] 403 / 117 / 12 / 532:  53%|█████▎    | 533/1000 [1:16:58<1:07:26,  8.66s/it][Succeeded / Failed / Skipped / Total] 404 / 117 / 12 / 533:  53%|█████▎    | 533/1000 [1:16:58<1:07:26,  8.66s/it][Succeeded / Failed / Skipped / Total] 404 / 117 / 12 / 533:  53%|█████▎    | 534/1000 [1:17:05<1:07:16,  8.66s/it][Succeeded / Failed / Skipped / Total] 405 / 117 / 12 / 534:  53%|█████▎    | 534/1000 [1:17:05<1:07:16,  8.66s/it][Succeeded / Failed / Skipped / Total] 405 / 117 / 12 / 534:  54%|█████▎    | 535/1000 [1:17:05<1:07:00,  8.65s/it]Gets the message for the given keys . --> Given a bunch of strings and a bunch of args --> Socre: 1.0

[[[[Adv]]]]: public String get ( play . api . i18n . Lang [[lang]] , List < String > [[keys]] , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( [[keys]] ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , [[lang]] ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang [[tinkles]] , List < String > [[massacred]] , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( [[massacred]] ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , [[tinkles]] ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 524 ---------------------------------------------
Returns the preferred messages for this request . --> Liefert eines alsages --> Socre: 1.0

[[[[Adv]]]]: public Messages [[preferred]] ( Http . RequestHeader request ) { play . api . i18n . Messages [[msgs]] = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages [[ayres]] ( Http . RequestHeader request ) { play . api . i18n . Messages [[maté]] = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( [[maté]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 525 ---------------------------------------------
Returns whether the translation for the given key is defined . --> [[[FAILED]]]

[[[[Adv]]]]: public Boolean [[isDefinedAt]] ( play . api . i18n . Lang lang , String [[key]] ) { return messages . isDefinedAt ( [[key]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean [[salcedo]] ( play . api . i18n . Lang lang , String [[pedestals]] ) { return messages . isDefinedAt ( [[pedestals]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 526 ---------------------------------------------
Returns the preferred messages for the given language . --> hashable with hashish --> Socre: 1.0

[[[[Adv]]]]: public Messages [[preferred]] ( Collection < Lang > [[candidates]] ) { Seq < Lang > cs = Scala . asScala ( [[candidates]] ) ; play . api . i18n . Messages [[msgs]] = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages [[hashish]] ( Collection < Lang > [[daint]] ) { Seq < Lang > cs = Scala . asScala ( [[daint]] ) ; play . api . i18n . Messages [[aimée]] = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( [[aimée]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 527 ---------------------------------------------
Sets the REPLACE --> [[[SKIPPED]]]

[[[[Adv]]]]: public final Self REPLACEME0 ( play . api . inject . Binding < ? > ... REPLACEME0 ) { return REPLACEME0 ( Guiceable . bindings ( REPLACEME0 ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 528 ---------------------------------------------
Define the Guice binding . --> Don t use this method directly --> Socre: 1.0

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... [[modules]] ) { return bindings ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... [[coronary]] ) { return bindings ( Guiceable . [[coronary]] ( [[coronary]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 529 ---------------------------------------------
Specifies the module overrides . --> Specifies this module overrides --> Socre: 1.0

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... [[dormitories]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[dormitories]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 530 ---------------------------------------------
Sets the language . --> add watercolours --> Socre: 1.0

[[[[Adv]]]]: public Result [[setLang]] ( Result [[result]] , Lang lang ) { return messages . setLang ( [[result]] . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result [[watercolours]] ( Result [[bighead]] , Lang lang ) { return messages . setLang ( [[bighead]] . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 531 ---------------------------------------------
Specify the given bindings . --> Specify the recipes of this class --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self [[battlements]] ( GuiceableModule ... [[parasites]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[parasites]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 532 ---------------------------------------------
Specifies the module overrides . --> Removes from the Guice --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Module ... modules ) { return [[overrides]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self [[absurdity]] ( play . api . inject . Module ... modules ) { return [[absurdity]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 533 ---------------------------------------------
Specifies this Guice . --> Specifies the Account overrides --> Socre: 1.0

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Binding < ? > ... [[bindings]] ) { return overrides ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Binding < ? > ... [[accounts]] ) { return overrides ( Guiceable . [[accounts]] ( [[accounts]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 534 ---------------------------------------------
Disable the given modules . --> Returns a copy of the module that should be disabled --> Socre: 1.0

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[thoughts]] ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 535 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 405 / 117 / 13 / 535:  54%|█████▎    | 535/1000 [1:17:05<1:07:00,  8.65s/it][Succeeded / Failed / Skipped / Total] 405 / 117 / 13 / 535:  54%|█████▎    | 536/1000 [1:17:06<1:06:45,  8.63s/it][Succeeded / Failed / Skipped / Total] 406 / 117 / 13 / 536:  54%|█████▎    | 536/1000 [1:17:06<1:06:45,  8.63s/it][Succeeded / Failed / Skipped / Total] 406 / 117 / 13 / 536:  54%|█████▎    | 537/1000 [1:17:12<1:06:33,  8.63s/it][Succeeded / Failed / Skipped / Total] 406 / 118 / 13 / 537:  54%|█████▎    | 537/1000 [1:17:12<1:06:33,  8.63s/it][Succeeded / Failed / Skipped / Total] 406 / 118 / 13 / 537:  54%|█████▍    | 538/1000 [1:17:18<1:06:23,  8.62s/it][Succeeded / Failed / Skipped / Total] 407 / 118 / 13 / 538:  54%|█████▍    | 538/1000 [1:17:18<1:06:23,  8.62s/it][Succeeded / Failed / Skipped / Total] 407 / 118 / 13 / 538:  54%|█████▍    | 539/1000 [1:17:22<1:06:10,  8.61s/it][Succeeded / Failed / Skipped / Total] 408 / 118 / 13 / 539:  54%|█████▍    | 539/1000 [1:17:22<1:06:10,  8.61s/it][Succeeded / Failed / Skipped / Total] 408 / 118 / 13 / 539:  54%|█████▍    | 540/1000 [1:17:36<1:06:06,  8.62s/it][Succeeded / Failed / Skipped / Total] 409 / 118 / 13 / 540:  54%|█████▍    | 540/1000 [1:17:36<1:06:06,  8.62s/it][Succeeded / Failed / Skipped / Total] 409 / 118 / 13 / 540:  54%|█████▍    | 541/1000 [1:17:51<1:06:03,  8.64s/it][Succeeded / Failed / Skipped / Total] 410 / 118 / 13 / 541:  54%|█████▍    | 541/1000 [1:17:51<1:06:03,  8.64s/it][Succeeded / Failed / Skipped / Total] 410 / 118 / 13 / 541:  54%|█████▍    | 542/1000 [1:17:53<1:05:49,  8.62s/it][Succeeded / Failed / Skipped / Total] 411 / 118 / 13 / 542:  54%|█████▍    | 542/1000 [1:17:53<1:05:49,  8.62s/it][Succeeded / Failed / Skipped / Total] 411 / 118 / 13 / 542:  54%|█████▍    | 543/1000 [1:18:19<1:05:54,  8.65s/it][Succeeded / Failed / Skipped / Total] 411 / 119 / 13 / 543:  54%|█████▍    | 543/1000 [1:18:19<1:05:54,  8.65s/it][Succeeded / Failed / Skipped / Total] 411 / 119 / 13 / 543:  54%|█████▍    | 544/1000 [1:18:20<1:05:40,  8.64s/it][Succeeded / Failed / Skipped / Total] 412 / 119 / 13 / 544:  54%|█████▍    | 544/1000 [1:18:20<1:05:40,  8.64s/it][Succeeded / Failed / Skipped / Total] 412 / 119 / 13 / 544:  55%|█████▍    | 545/1000 [1:18:21<1:05:25,  8.63s/it]Static factory method . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static < A , B > Tuple < A , B > Tuple ( A a , B b ) { return new Tuple < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 536 ---------------------------------------------
Executes the call with the given request . --> from interface --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < Result > call ( Request [[req]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > call ( Request [[bk]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 537 ---------------------------------------------
Creates a binding for the given scope . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[bitchin]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 538 ---------------------------------------------
Factory method for creating tuple 5 . --> Factory method . --> Socre: 1.0

[[[[Adv]]]]: public static < A , [[B]] , C , D , E > Tuple5 < A , [[B]] , C , D , E > Tuple5 ( A a , [[B]] b , C c , D d , E e ) { return new Tuple5 < A , [[B]] , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , [[accounts]] , C , D , E > Tuple5 < A , [[accounts]] , C , D , E > Tuple5 ( A a , [[accounts]] b , C c , D d , E e ) { return new Tuple5 < A , [[accounts]] , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 539 ---------------------------------------------
Gets the file with the given path . --> Find blockers for blockers --> Socre: 1.0

[[[[Adv]]]]: public Optional < File > [[getExistingFile]] ( String [[relativePath]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[relativePath]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > [[blockers]] ( String [[bhaiyya]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[bhaiyya]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 540 ---------------------------------------------
Convert execution context to Executor --> For testing only --> Socre: 1.0

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext ec ) { ExecutionContext [[prepared]] = ec . prepare ( ) ; if ( [[prepared]] instanceof Executor ) { return ( Executor ) [[prepared]] ; } else { return [[prepared]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[fargin]] ( ExecutionContext ec ) { ExecutionContext [[egyptologist]] = ec . prepare ( ) ; if ( [[egyptologist]] instanceof Executor ) { return ( Executor ) [[egyptologist]] ; } else { return [[egyptologist]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 541 ---------------------------------------------
Inject String into ByteString --> Injects hammond with given callback name --> Socre: 1.0

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String callbackName ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[hampton]] ( String callbackName ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 542 ---------------------------------------------
Creates a new JPAConfig . --> Snehasha config --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig [[of]] ( String [[name]] , String [[unitName]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[name]] , [[unitName]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig [[sneha]] ( String [[bhaiyya]] , String [[fatsos]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[bhaiyya]] , [[fatsos]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 543 ---------------------------------------------
Registers a constraint validator for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > [[MappedConstraintValidatorFactory]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > [[longitude]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 544 ---------------------------------------------
Creates a flow from a JsonNode --> Inject Gourmets --> Socre: 1.0

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[json]] ( String [[callbackName]] ) { return Flow . of ( JsonNode . class ) . map ( [[json]] -> { return ByteString . fromString ( Json . stringify ( [[json]] ) ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[gourmets]] ( String [[dismal]] ) { return Flow . of ( JsonNode . class ) . map ( [[gourmets]] -> { return ByteString . fromString ( Json . stringify ( [[gourmets]] ) ) ; } ) . via ( flow ( [[dismal]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 545 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 412 / 120 / 13 / 545:  55%|█████▍    | 545/1000 [1:18:21<1:05:25,  8.63s/it][Succeeded / Failed / Skipped / Total] 412 / 120 / 13 / 545:  55%|█████▍    | 546/1000 [1:18:23<1:05:11,  8.62s/it][Succeeded / Failed / Skipped / Total] 412 / 121 / 13 / 546:  55%|█████▍    | 546/1000 [1:18:23<1:05:11,  8.62s/it][Succeeded / Failed / Skipped / Total] 412 / 121 / 13 / 546:  55%|█████▍    | 547/1000 [1:18:33<1:05:03,  8.62s/it][Succeeded / Failed / Skipped / Total] 413 / 121 / 13 / 547:  55%|█████▍    | 547/1000 [1:18:33<1:05:03,  8.62s/it][Succeeded / Failed / Skipped / Total] 413 / 121 / 13 / 547:  55%|█████▍    | 548/1000 [1:19:00<1:05:09,  8.65s/it][Succeeded / Failed / Skipped / Total] 414 / 121 / 13 / 548:  55%|█████▍    | 548/1000 [1:19:00<1:05:09,  8.65s/it][Succeeded / Failed / Skipped / Total] 414 / 121 / 13 / 548:  55%|█████▍    | 549/1000 [1:19:09<1:05:01,  8.65s/it][Succeeded / Failed / Skipped / Total] 414 / 122 / 13 / 549:  55%|█████▍    | 549/1000 [1:19:09<1:05:01,  8.65s/it][Succeeded / Failed / Skipped / Total] 414 / 122 / 13 / 549:  55%|█████▌    | 550/1000 [1:19:12<1:04:48,  8.64s/it][Succeeded / Failed / Skipped / Total] 415 / 122 / 13 / 550:  55%|█████▌    | 550/1000 [1:19:12<1:04:48,  8.64s/it][Succeeded / Failed / Skipped / Total] 415 / 122 / 13 / 550:  55%|█████▌    | 551/1000 [1:19:12<1:04:32,  8.63s/it][Succeeded / Failed / Skipped / Total] 415 / 122 / 14 / 551:  55%|█████▌    | 551/1000 [1:19:12<1:04:32,  8.63s/it][Succeeded / Failed / Skipped / Total] 415 / 122 / 14 / 551:  55%|█████▌    | 552/1000 [1:19:13<1:04:17,  8.61s/it]Creates a new JPAConfig . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[from]] ( Map < String , String > [[map]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : [[map]] . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig [[russe]] ( Map < String , String > [[screaming]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : [[screaming]] . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 546 ---------------------------------------------
Creates a jpa config . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String n1 , String u1 , String n2 , String [[u2]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( n2 , [[u2]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig [[shil]] ( String n1 , String u1 , String n2 , String [[earthen]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( n2 , [[earthen]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 547 ---------------------------------------------
Creates a new instance of the given constraint class . --> extracts all required constructors --> Socre: 1.0

[[[[Adv]]]]: private < [[T]] extends ConstraintValidator < ? , ? > > [[T]] newInstance ( Class < [[T]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < [[señor]] extends ConstraintValidator < ? , ? > > [[señor]] newInstance ( Class < [[señor]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 548 ---------------------------------------------
Handle a bad request . --> handle bagman error --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader [[request]] , String [[message]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[request]] . method ( ) , [[request]] . uri ( ) , [[message]] , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[bagman]] ( RequestHeader [[singapore]] , String [[buggy]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[singapore]] . method ( ) , [[singapore]] . uri ( ) , [[buggy]] , [[singapore]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 549 ---------------------------------------------
Sends a forbidden error . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onForbidden]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > [[attention]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 550 ---------------------------------------------
Handles not found response . --> region NotFound --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > onNotFound ( RequestHeader [[request]] , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , [[request]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[request]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > onNotFound ( RequestHeader [[jansson]] , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[jansson]] . method ( ) , [[jansson]] . uri ( ) , [[jansson]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[jansson]] . method ( ) , [[jansson]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[jansson]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 551 ---------------------------------------------
Log an error --> [[[SKIPPED]]]

[[[[Adv]]]]: protected void logServerError ( RequestHeader request , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , request . method ( ) , request . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 552 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 415 / 123 / 14 / 552:  55%|█████▌    | 552/1000 [1:19:13<1:04:17,  8.61s/it][Succeeded / Failed / Skipped / Total] 415 / 123 / 14 / 552:  55%|█████▌    | 553/1000 [1:19:34<1:04:19,  8.63s/it][Succeeded / Failed / Skipped / Total] 415 / 124 / 14 / 553:  55%|█████▌    | 553/1000 [1:19:34<1:04:19,  8.63s/it][Succeeded / Failed / Skipped / Total] 415 / 124 / 14 / 553:  55%|█████▌    | 554/1000 [1:19:38<1:04:07,  8.63s/it][Succeeded / Failed / Skipped / Total] 416 / 124 / 14 / 554:  55%|█████▌    | 554/1000 [1:19:38<1:04:07,  8.63s/it][Succeeded / Failed / Skipped / Total] 416 / 124 / 14 / 554:  56%|█████▌    | 555/1000 [1:19:53<1:04:03,  8.64s/it][Succeeded / Failed / Skipped / Total] 417 / 124 / 14 / 555:  56%|█████▌    | 555/1000 [1:19:53<1:04:03,  8.64s/it][Succeeded / Failed / Skipped / Total] 417 / 124 / 14 / 555:  56%|█████▌    | 556/1000 [1:19:53<1:03:48,  8.62s/it][Succeeded / Failed / Skipped / Total] 418 / 124 / 14 / 556:  56%|█████▌    | 556/1000 [1:19:53<1:03:48,  8.62s/it][Succeeded / Failed / Skipped / Total] 418 / 124 / 14 / 556:  56%|█████▌    | 557/1000 [1:20:14<1:03:49,  8.64s/it][Succeeded / Failed / Skipped / Total] 419 / 124 / 14 / 557:  56%|█████▌    | 557/1000 [1:20:14<1:03:49,  8.64s/it][Succeeded / Failed / Skipped / Total] 419 / 124 / 14 / 557:  56%|█████▌    | 558/1000 [1:20:19<1:03:37,  8.64s/it]Called when an error occurs . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onClientError]] ( RequestHeader request , int statusCode , String [[message]] ) { if ( statusCode == 400 ) { return onBadRequest ( request , [[message]] ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , [[message]] ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , [[message]] ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , [[message]] ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + [[message]] ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[watchers]] ( RequestHeader request , int statusCode , String [[norwich]] ) { if ( statusCode == 400 ) { return onBadRequest ( request , [[norwich]] ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , [[norwich]] ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , [[norwich]] ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , [[norwich]] ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + [[norwich]] ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 553 ---------------------------------------------
Gets matching method . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > cls , final String methodName , final Class < ? > ... [[parameterTypes]] ) { try { final Method method = cls . getMethod ( methodName , [[parameterTypes]] ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[spasms]] ( final Class < ? > cls , final String methodName , final Class < ? > ... [[avraham]] ) { try { final Method method = cls . getMethod ( methodName , [[avraham]] ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 554 ---------------------------------------------
Converts a throwable to a useful exception . --> Used for testing --> Socre: 1.0

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable [[throwable]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[throwable]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[arseholes]] ( final Throwable [[pontoons]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[pontoons]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 555 ---------------------------------------------
Handles server error . --> This method should only be used for testing --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onServerError]] ( RequestHeader [[request]] , Throwable [[exception]] ) { try { UsefulException usefulException = throwableToUsefulException ( [[exception]] ) ; logServerError ( [[request]] , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[request]] , usefulException ) ; default : return onDevServerError ( [[request]] , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[feverish]] ( RequestHeader [[sanitarium]] , Throwable [[geoengineering]] ) { try { UsefulException usefulException = throwableToUsefulException ( [[geoengineering]] ) ; logServerError ( [[sanitarium]] , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[sanitarium]] , usefulException ) ; default : return onDevServerError ( [[sanitarium]] , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 556 ---------------------------------------------
This method is called when devServer error occurs . --> Expirate --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onDevServerError]] ( RequestHeader [[request]] , UsefulException [[exception]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , [[exception]] , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > [[expatriate]] ( RequestHeader [[arguin]] , UsefulException [[wattage]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , [[wattage]] , [[arguin]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 557 ---------------------------------------------
Sends an error . --> Helper method for tagging --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onProdServerError]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > [[sagging]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 558 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 420 / 124 / 14 / 558:  56%|█████▌    | 558/1000 [1:20:19<1:03:37,  8.64s/it][Succeeded / Failed / Skipped / Total] 420 / 124 / 14 / 558:  56%|█████▌    | 559/1000 [1:20:32<1:03:32,  8.65s/it][Succeeded / Failed / Skipped / Total] 420 / 125 / 14 / 559:  56%|█████▌    | 559/1000 [1:20:32<1:03:32,  8.65s/it][Succeeded / Failed / Skipped / Total] 420 / 125 / 14 / 559:  56%|█████▌    | 560/1000 [1:20:46<1:03:28,  8.66s/it][Succeeded / Failed / Skipped / Total] 421 / 125 / 14 / 560:  56%|█████▌    | 560/1000 [1:20:46<1:03:28,  8.66s/it][Succeeded / Failed / Skipped / Total] 421 / 125 / 14 / 560:  56%|█████▌    | 561/1000 [1:21:00<1:03:23,  8.66s/it][Succeeded / Failed / Skipped / Total] 422 / 125 / 14 / 561:  56%|█████▌    | 561/1000 [1:21:00<1:03:23,  8.66s/it][Succeeded / Failed / Skipped / Total] 422 / 125 / 14 / 561:  56%|█████▌    | 562/1000 [1:21:00<1:03:08,  8.65s/it][Succeeded / Failed / Skipped / Total] 423 / 125 / 14 / 562:  56%|█████▌    | 562/1000 [1:21:00<1:03:08,  8.65s/it][Succeeded / Failed / Skipped / Total] 423 / 125 / 14 / 562:  56%|█████▋    | 563/1000 [1:21:13<1:03:02,  8.66s/it][Succeeded / Failed / Skipped / Total] 424 / 125 / 14 / 563:  56%|█████▋    | 563/1000 [1:21:13<1:03:02,  8.66s/it][Succeeded / Failed / Skipped / Total] 424 / 125 / 14 / 563:  56%|█████▋    | 564/1000 [1:21:27<1:02:58,  8.67s/it][Succeeded / Failed / Skipped / Total] 425 / 125 / 14 / 564:  56%|█████▋    | 564/1000 [1:21:27<1:02:58,  8.67s/it][Succeeded / Failed / Skipped / Total] 425 / 125 / 14 / 564:  56%|█████▋    | 565/1000 [1:21:29<1:02:44,  8.65s/it][Succeeded / Failed / Skipped / Total] 426 / 125 / 14 / 565:  56%|█████▋    | 565/1000 [1:21:29<1:02:44,  8.65s/it][Succeeded / Failed / Skipped / Total] 426 / 125 / 14 / 565:  57%|█████▋    | 566/1000 [1:21:33<1:02:32,  8.65s/it]Creates a BuildDocHandler from the given resources . --> throws an exception --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromResources]] ( File [ ] [[files]] , String [ ] baseDirs ) throws IOException { assert ( [[files]] . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ [[files]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < [[files]] . length ; i ++ ) { File file = [[files]] [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler [[hinge]] ( File [ ] [[breadwinner]] , String [ ] baseDirs ) throws IOException { assert ( [[breadwinner]] . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ [[breadwinner]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < [[breadwinner]] . length ; i ++ ) { File file = [[breadwinner]] [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 559 ---------------------------------------------
Creates a documentation handler from a directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[hinge]] ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 560 ---------------------------------------------
Consumes the data . --> Performs a helter transformation --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[helter]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 561 ---------------------------------------------
Creates a BuildDocHandler from a directory and a jar file . --> Producer banana --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File [[directory]] , JarFile jarFile , String [[base]] ) { return [[fromDirectoryAndJar]] ( [[directory]] , jarFile , [[base]] , False ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[banana]] ( File [[venner]] , JarFile jarFile , String [[vistas]] ) { return [[banana]] ( [[venner]] , jarFile , [[vistas]] , False ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 562 ---------------------------------------------
Creates a documentation handler from a jar file . --> This method is intended to be used in tests --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile [[jarFile]] , String base ) { FileRepository [[repo]] = new JarRepository ( [[jarFile]] , Option . apply ( base ) ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[harasses]] ( JarFile [[pornographers]] , String base ) { FileRepository [[ramifications]] = new JarRepository ( [[pornographers]] , Option . apply ( base ) ) ; return new DocumentationHandler ( [[ramifications]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 563 ---------------------------------------------
Create an HttpEntity from content . --> Convert HttpEntity into HttpEntity --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromContent]] ( Content [[content]] , String charset ) { String body ; if ( [[content]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity [[dents]] ( Content [[hatbox]] , String charset ) { String body ; if ( [[hatbox]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 564 ---------------------------------------------
Creates a chunked entity . --> create animas --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > [[data]] , Optional < String > contentType ) { return new Chunked ( [[data]] . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[animas]] ( Source < ByteString , ? > [[tenderest]] , Optional < String > contentType ) { return new Chunked ( [[tenderest]] . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 565 ---------------------------------------------
Create an HttpEntity from a string . --> Must be public for testing --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String [[content]] , String charset ) { return new Strict ( ByteString . fromString ( [[content]] , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[champion]] ( String [[trivialize]] , String charset ) { return new Strict ( ByteString . fromString ( [[trivialize]] , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 566 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 427 / 125 / 14 / 566:  57%|█████▋    | 566/1000 [1:21:33<1:02:32,  8.65s/it][Succeeded / Failed / Skipped / Total] 427 / 125 / 14 / 566:  57%|█████▋    | 567/1000 [1:21:41<1:02:23,  8.64s/it][Succeeded / Failed / Skipped / Total] 428 / 125 / 14 / 567:  57%|█████▋    | 567/1000 [1:21:41<1:02:23,  8.64s/it][Succeeded / Failed / Skipped / Total] 428 / 125 / 14 / 567:  57%|█████▋    | 568/1000 [1:21:42<1:02:08,  8.63s/it][Succeeded / Failed / Skipped / Total] 429 / 125 / 14 / 568:  57%|█████▋    | 568/1000 [1:21:42<1:02:08,  8.63s/it][Succeeded / Failed / Skipped / Total] 429 / 125 / 14 / 568:  57%|█████▋    | 569/1000 [1:21:42<1:01:53,  8.62s/it][Succeeded / Failed / Skipped / Total] 429 / 125 / 15 / 569:  57%|█████▋    | 569/1000 [1:21:42<1:01:53,  8.62s/it][Succeeded / Failed / Skipped / Total] 429 / 125 / 15 / 569:  57%|█████▋    | 570/1000 [1:21:43<1:01:38,  8.60s/it][Succeeded / Failed / Skipped / Total] 430 / 125 / 15 / 570:  57%|█████▋    | 570/1000 [1:21:43<1:01:38,  8.60s/it][Succeeded / Failed / Skipped / Total] 430 / 125 / 15 / 570:  57%|█████▋    | 571/1000 [1:21:48<1:01:28,  8.60s/it][Succeeded / Failed / Skipped / Total] 431 / 125 / 15 / 571:  57%|█████▋    | 571/1000 [1:21:48<1:01:28,  8.60s/it][Succeeded / Failed / Skipped / Total] 431 / 125 / 15 / 571:  57%|█████▋    | 572/1000 [1:21:55<1:01:18,  8.59s/it][Succeeded / Failed / Skipped / Total] 432 / 125 / 15 / 572:  57%|█████▋    | 572/1000 [1:21:55<1:01:18,  8.59s/it][Succeeded / Failed / Skipped / Total] 432 / 125 / 15 / 572:  57%|█████▋    | 573/1000 [1:22:09<1:01:13,  8.60s/it][Succeeded / Failed / Skipped / Total] 433 / 125 / 15 / 573:  57%|█████▋    | 573/1000 [1:22:09<1:01:13,  8.60s/it][Succeeded / Failed / Skipped / Total] 433 / 125 / 15 / 573:  57%|█████▋    | 574/1000 [1:22:10<1:00:59,  8.59s/it][Succeeded / Failed / Skipped / Total] 433 / 126 / 15 / 574:  57%|█████▋    | 574/1000 [1:22:10<1:00:59,  8.59s/it][Succeeded / Failed / Skipped / Total] 433 / 126 / 15 / 574:  57%|█████▊    | 575/1000 [1:22:12<1:00:45,  8.58s/it][Succeeded / Failed / Skipped / Total] 434 / 126 / 15 / 575:  57%|█████▊    | 575/1000 [1:22:12<1:00:45,  8.58s/it][Succeeded / Failed / Skipped / Total] 434 / 126 / 15 / 575:  58%|█████▊    | 576/1000 [1:22:22<1:00:37,  8.58s/it][Succeeded / Failed / Skipped / Total] 435 / 126 / 15 / 576:  58%|█████▊    | 576/1000 [1:22:22<1:00:37,  8.58s/it][Succeeded / Failed / Skipped / Total] 435 / 126 / 15 / 576:  58%|█████▊    | 577/1000 [1:22:23<1:00:23,  8.57s/it]Creates a documentation handler from the given directory and a jar file . --> Factory method --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File directory , JarFile [[jarFile]] , String [[base]] , boolean fallbackToJar ) { FileRepository [[fileRepo]] = new FilesystemRepository ( directory ) ; FileRepository [[jarRepo]] = new JarRepository ( [[jarFile]] , Option . apply ( [[base]] ) ) ; FileRepository [[manualRepo]] ; if ( fallbackToJar ) { [[manualRepo]] = new AggregateFileRepository ( new FileRepository [ ] { [[fileRepo]] , [[jarRepo]] } ) ; } else { [[manualRepo]] = [[fileRepo]] ; } return new DocumentationHandler ( [[manualRepo]] , [[jarRepo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File directory , JarFile [[formality]] , String [[land]] , boolean fallbackToJar ) { FileRepository [[exterminate]] = new FilesystemRepository ( directory ) ; FileRepository [[sundaes]] = new JarRepository ( [[formality]] , Option . apply ( [[land]] ) ) ; FileRepository [[hardware]] ; if ( fallbackToJar ) { [[hardware]] = new AggregateFileRepository ( new FileRepository [ ] { [[exterminate]] , [[sundaes]] } ) ; } else { [[hardware]] = [[exterminate]] ; } return new DocumentationHandler ( [[hardware]] , [[sundaes]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 567 ---------------------------------------------
Create a Result with the given status code and content . --> Return file firs --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , JsonNode content ) { return [[status]] ( [[status]] , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result [[firs]] ( int [[zhenya]] , JsonNode content ) { return [[firs]] ( [[firs]] , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 568 ---------------------------------------------
Sends a JSON response with the given status code . --> Send response code to client --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int status , JsonNode [[content]] , JsonEncoding encoding ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( [[content]] , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result status ( int status , JsonNode [[coelho]] , JsonEncoding encoding ) { if ( [[coelho]] == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( [[coelho]] , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 569 ---------------------------------------------
Get user by id --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 570 ---------------------------------------------
Creates a result with the given status code . --> Send CHYo response --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , byte [ ] content ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[status]] , new HttpEntity . Strict ( ByteString . fromArray ( content ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result [[chiyo]] ( int status , byte [ ] content ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[chiyo]] , new HttpEntity . Strict ( ByteString . fromArray ( content ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 571 ---------------------------------------------
Sends an input stream . --> Send cart with content from an input stream --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , InputStream content , long contentLength ) { return [[status]] ( [[status]] ) . sendInputStream ( content , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result [[cart]] ( int status , InputStream content , long contentLength ) { return [[cart]] ( [[cart]] ) . sendInputStream ( content , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 572 ---------------------------------------------
Returns a unique call . --> Shtick method call --> Socre: 1.0

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[shtick]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 573 ---------------------------------------------
Return a result for a file . --> Mapped content --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , File content ) { return [[status]] ( [[status]] , content , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[rapped]] ( int [[gioconda]] , File content ) { return [[rapped]] ( [[rapped]] , content , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 574 ---------------------------------------------
Select the preferred language . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > candidates ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( candidates ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[humanly]] ( Collection < Lang > candidates ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( candidates ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 575 ---------------------------------------------
Creates a call with the given fragment . --> performance --> Socre: 1.0

[[[[Adv]]]]: public Call [[withFragment]] ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call [[perf]] ( String [[abrasions]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[abrasions]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 576 ---------------------------------------------
Returns the absolute URL for the given request . --> Return the advantage of the request --> Socre: 1.0

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request [[request]] ) { return [[absoluteURL]] ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[advantage]] ( Http . Request [[groceries]] ) { return [[advantage]] ( [[groceries]] . secure ( ) , [[groceries]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
[Succeeded / Failed / Skipped / Total] 436 / 126 / 15 / 577:  58%|█████▊    | 577/1000 [1:22:23<1:00:23,  8.57s/it][Succeeded / Failed / Skipped / Total] 436 / 126 / 15 / 577:  58%|█████▊    | 578/1000 [1:22:40<1:00:21,  8.58s/it][Succeeded / Failed / Skipped / Total] 437 / 126 / 15 / 578:  58%|█████▊    | 578/1000 [1:22:40<1:00:21,  8.58s/it][Succeeded / Failed / Skipped / Total] 437 / 126 / 15 / 578:  58%|█████▊    | 579/1000 [1:22:49<1:00:13,  8.58s/it][Succeeded / Failed / Skipped / Total] 438 / 126 / 15 / 579:  58%|█████▊    | 579/1000 [1:22:49<1:00:13,  8.58s/it][Succeeded / Failed / Skipped / Total] 438 / 126 / 15 / 579:  58%|█████▊    | 580/1000 [1:22:54<1:00:02,  8.58s/it][Succeeded / Failed / Skipped / Total] 439 / 126 / 15 / 580:  58%|█████▊    | 580/1000 [1:22:54<1:00:02,  8.58s/it][Succeeded / Failed / Skipped / Total] 439 / 126 / 15 / 580:  58%|█████▊    | 581/1000 [1:23:01<59:52,  8.57s/it]  [Succeeded / Failed / Skipped / Total] 440 / 126 / 15 / 581:  58%|█████▊    | 581/1000 [1:23:01<59:52,  8.57s/it][Succeeded / Failed / Skipped / Total] 440 / 126 / 15 / 581:  58%|█████▊    | 582/1000 [1:23:07<59:42,  8.57s/it][Succeeded / Failed / Skipped / Total] 441 / 126 / 15 / 582:  58%|█████▊    | 582/1000 [1:23:07<59:42,  8.57s/it][Succeeded / Failed / Skipped / Total] 441 / 126 / 15 / 582:  58%|█████▊    | 583/1000 [1:23:15<59:32,  8.57s/it][Succeeded / Failed / Skipped / Total] 441 / 127 / 15 / 583:  58%|█████▊    | 583/1000 [1:23:15<59:32,  8.57s/it][Succeeded / Failed / Skipped / Total] 441 / 127 / 15 / 583:  58%|█████▊    | 584/1000 [1:23:16<59:18,  8.55s/it][Succeeded / Failed / Skipped / Total] 442 / 127 / 15 / 584:  58%|█████▊    | 584/1000 [1:23:16<59:18,  8.55s/it][Succeeded / Failed / Skipped / Total] 442 / 127 / 15 / 584:  58%|█████▊    | 585/1000 [1:23:30<59:14,  8.56s/it][Succeeded / Failed / Skipped / Total] 443 / 127 / 15 / 585:  58%|█████▊    | 585/1000 [1:23:30<59:14,  8.56s/it][Succeeded / Failed / Skipped / Total] 443 / 127 / 15 / 585:  59%|█████▊    | 586/1000 [1:23:45<59:10,  8.58s/it]--------------------------------------------- Result 577 ---------------------------------------------
Returns the web socket URL . --> The hatano fingerprint of the given request --> Socre: 1.0

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request request ) { return [[webSocketURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[hatano]] ( Http . Request request ) { return [[hatano]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 578 ---------------------------------------------
Returns a connection function that passes the given connection callable . --> connection callable --> Socre: 1.0

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[block]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[connection]] ) { try { return [[block]] . call ( [[connection]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[señor]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[achieved]] ) { try { return [[señor]] . call ( [[achieved]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 579 ---------------------------------------------
Convert an object to json . --> Adulator for adulation --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[adulation]] ( final Object [[maven]] ) { try { return mapper ( ) . valueToTree ( [[maven]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 580 ---------------------------------------------
Convert a JsonNode to a Java object . --> Creates an agent from JSON . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[advertising]] > [[advertising]] fromJson ( JsonNode json , Class < [[advertising]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 581 ---------------------------------------------
Returns a function that invokes the given connection runnable . --> wraps connection runnable --> Socre: 1.0

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectionFunction]] ( final ConnectionRunnable [[block]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { [[block]] . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[reconsidering]] ( final ConnectionRunnable [[fermat]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { [[fermat]] . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 582 ---------------------------------------------
Parse an input stream . --> Read directory from input stream --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[parse]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[dirigible]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 583 ---------------------------------------------
Parse a string into a JsonNode . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( String src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[jenner]] ( String src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 584 ---------------------------------------------
Creates a new server instance . --> Convenience factory method --> Socre: 1.0

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode mode , int [[port]] , Function < BuiltInComponents , Router > [[block]] ) { return new Builder ( ) . mode ( mode ) . http ( [[port]] ) . build ( [[block]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[airflow]] ( Mode mode , int [[riverbed]] , Function < BuiltInComponents , Router > [[noth]] ) { return new Builder ( ) . mode ( mode ) . http ( [[riverbed]] ) . build ( [[noth]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 585 ---------------------------------------------
Relative a path relative to the target path --> Ador of an alo string --> Socre: 1.0

[[[[Adv]]]]: public static String [[relative]] ( String startPath , String [[targetPath]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[accor]] ( String startPath , String [[alamo]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 586 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 444 / 127 / 15 / 586:  59%|█████▊    | 586/1000 [1:23:45<59:10,  8.58s/it][Succeeded / Failed / Skipped / Total] 444 / 127 / 15 / 586:  59%|█████▊    | 587/1000 [1:23:46<58:56,  8.56s/it][Succeeded / Failed / Skipped / Total] 445 / 127 / 15 / 587:  59%|█████▊    | 587/1000 [1:23:46<58:56,  8.56s/it][Succeeded / Failed / Skipped / Total] 445 / 127 / 15 / 587:  59%|█████▉    | 588/1000 [1:24:14<59:01,  8.60s/it][Succeeded / Failed / Skipped / Total] 446 / 127 / 15 / 588:  59%|█████▉    | 588/1000 [1:24:14<59:01,  8.60s/it][Succeeded / Failed / Skipped / Total] 446 / 127 / 15 / 588:  59%|█████▉    | 589/1000 [1:24:23<58:53,  8.60s/it][Succeeded / Failed / Skipped / Total] 447 / 127 / 15 / 589:  59%|█████▉    | 589/1000 [1:24:23<58:53,  8.60s/it][Succeeded / Failed / Skipped / Total] 447 / 127 / 15 / 589:  59%|█████▉    | 590/1000 [1:24:28<58:41,  8.59s/it][Succeeded / Failed / Skipped / Total] 448 / 127 / 15 / 590:  59%|█████▉    | 590/1000 [1:24:28<58:41,  8.59s/it][Succeeded / Failed / Skipped / Total] 448 / 127 / 15 / 590:  59%|█████▉    | 591/1000 [1:24:44<58:38,  8.60s/it][Succeeded / Failed / Skipped / Total] 449 / 127 / 15 / 591:  59%|█████▉    | 591/1000 [1:24:44<58:38,  8.60s/it][Succeeded / Failed / Skipped / Total] 449 / 127 / 15 / 591:  59%|█████▉    | 592/1000 [1:24:56<58:32,  8.61s/it][Succeeded / Failed / Skipped / Total] 450 / 127 / 15 / 592:  59%|█████▉    | 592/1000 [1:24:56<58:32,  8.61s/it][Succeeded / Failed / Skipped / Total] 450 / 127 / 15 / 592:  59%|█████▉    | 593/1000 [1:24:57<58:18,  8.60s/it]Returns a tuple of displayable constraints . --> Extract display name and attributes --> Socre: 1.0

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[displayableConstraint]] ( ConstraintDescriptor < ? > constraint ) { final Display [[displayAnnotation]] = constraint . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[displayAnnotation]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[displayAnnotation]] . attributes ( ) ) . map ( attr -> constraint . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[bastogne]] ( ConstraintDescriptor < ? > constraint ) { final Display [[ever]] = constraint . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[ever]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[ever]] . attributes ( ) ) . map ( attr -> constraint . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 587 ---------------------------------------------
Returns a list of displayable constraints . --> JAK constraint descriptor --> Socre: 1.0

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > [[constraints]] ) { return [[constraints]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[jak]] ( Set < ConstraintDescriptor < ? > > [[anointed]] ) { return [[anointed]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[jak]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 588 ---------------------------------------------
Parse cron string . --> Checks the given outcome --> Socre: 1.0

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String [[cron]] ) { try { return new CronExpression ( [[cron]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[cessna]] ( String [[outcome]] ) { try { return new CronExpression ( [[outcome]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[outcome]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 589 ---------------------------------------------
Gets canonical path . --> Borrowed Strings --> Socre: 1.0

[[[[Adv]]]]: public static String [[canonical]] ( String [[url]] ) { String [ ] [[urlPath]] = toSegments ( [[url]] ) ; Stack < String > [[canonical]] = new Stack <> ( ) ; for ( String comp : [[urlPath]] ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[canonical]] . empty ( ) && [[canonical]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[canonical]] . push ( comp ) ; else [[canonical]] . pop ( ) ; } String prefixSep = [[url]] . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String [[trailingSep]] = [[url]] . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[canonical]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + [[trailingSep]] ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String [[baker]] ( String [[с]] ) { String [ ] [[assaf]] = toSegments ( [[с]] ) ; Stack < String > [[baker]] = new Stack <> ( ) ; for ( String comp : [[assaf]] ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[baker]] . empty ( ) && [[baker]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[baker]] . push ( comp ) ; else [[baker]] . pop ( ) ; } String prefixSep = [[с]] . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String [[cn]] = [[с]] . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[baker]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + [[cn]] ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 590 ---------------------------------------------
Calculate the next interval --> Get cron interval --> Socre: 1.0

[[[[Adv]]]]: public static long cronInterval ( String [[cron]] , Date date ) { try { return new CronExpression ( [[cron]] ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long cronInterval ( String [[advised]] , Date date ) { try { return new CronExpression ( [[advised]] ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[advised]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 591 ---------------------------------------------
Timeout the completion of the given CompletionStage . --> timeout ago --> Socre: 1.0

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > [[stage]] , final long [[amount]] , final TimeUnit unit ) { requireNonNull ( [[stage]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( [[amount]] , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> [[stage]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > [[thereís]] , final long [[finnigan]] , final TimeUnit unit ) { requireNonNull ( [[thereís]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( [[finnigan]] , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> [[thereís]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 592 ---------------------------------------------
Render a todo --> Handle the todo view --> Socre: 1.0

[[[[Adv]]]]: public static Result [[TODO]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result [[ADVISED]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 593 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 450 / 128 / 15 / 593:  59%|█████▉    | 593/1000 [1:24:57<58:18,  8.60s/it][Succeeded / Failed / Skipped / Total] 450 / 128 / 15 / 593:  59%|█████▉    | 594/1000 [1:25:10<58:13,  8.60s/it][Succeeded / Failed / Skipped / Total] 451 / 128 / 15 / 594:  59%|█████▉    | 594/1000 [1:25:10<58:13,  8.60s/it][Succeeded / Failed / Skipped / Total] 451 / 128 / 15 / 594:  60%|█████▉    | 595/1000 [1:25:19<58:05,  8.61s/it][Succeeded / Failed / Skipped / Total] 452 / 128 / 15 / 595:  60%|█████▉    | 595/1000 [1:25:19<58:05,  8.61s/it][Succeeded / Failed / Skipped / Total] 452 / 128 / 15 / 595:  60%|█████▉    | 596/1000 [1:25:22<57:52,  8.59s/it][Succeeded / Failed / Skipped / Total] 453 / 128 / 15 / 596:  60%|█████▉    | 596/1000 [1:25:22<57:52,  8.59s/it][Succeeded / Failed / Skipped / Total] 453 / 128 / 15 / 596:  60%|█████▉    | 597/1000 [1:25:24<57:39,  8.58s/it][Succeeded / Failed / Skipped / Total] 453 / 129 / 15 / 597:  60%|█████▉    | 597/1000 [1:25:24<57:39,  8.58s/it][Succeeded / Failed / Skipped / Total] 453 / 129 / 15 / 597:  60%|█████▉    | 598/1000 [1:25:28<57:27,  8.58s/it][Succeeded / Failed / Skipped / Total] 454 / 129 / 15 / 598:  60%|█████▉    | 598/1000 [1:25:28<57:27,  8.58s/it][Succeeded / Failed / Skipped / Total] 454 / 129 / 15 / 598:  60%|█████▉    | 599/1000 [1:25:35<57:18,  8.57s/it][Succeeded / Failed / Skipped / Total] 454 / 130 / 15 / 599:  60%|█████▉    | 599/1000 [1:25:35<57:18,  8.57s/it][Succeeded / Failed / Skipped / Total] 454 / 130 / 15 / 599:  60%|██████    | 600/1000 [1:25:42<57:08,  8.57s/it][Succeeded / Failed / Skipped / Total] 454 / 131 / 15 / 600:  60%|██████    | 600/1000 [1:25:42<57:08,  8.57s/it][Succeeded / Failed / Skipped / Total] 454 / 131 / 15 / 600:  60%|██████    | 601/1000 [1:25:49<56:58,  8.57s/it][Succeeded / Failed / Skipped / Total] 454 / 132 / 15 / 601:  60%|██████    | 601/1000 [1:25:49<56:58,  8.57s/it][Succeeded / Failed / Skipped / Total] 454 / 132 / 15 / 601:  60%|██████    | 602/1000 [1:25:52<56:46,  8.56s/it][Succeeded / Failed / Skipped / Total] 454 / 133 / 15 / 602:  60%|██████    | 602/1000 [1:25:52<56:46,  8.56s/it][Succeeded / Failed / Skipped / Total] 454 / 133 / 15 / 602:  60%|██████    | 603/1000 [1:26:02<56:38,  8.56s/it]Loads the Guice application using the given context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context [[context]] ) { return initialBuilder . in ( [[context]] . environment ( ) ) . loadConfig ( [[context]] . initialConfig ( ) ) . overrides ( overrides ( [[context]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[excessively]] ( ApplicationLoader . Context [[colonnade]] ) { return initialBuilder . in ( [[colonnade]] . environment ( ) ) . loadConfig ( [[colonnade]] . initialConfig ( ) ) . overrides ( overrides ( [[colonnade]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 594 ---------------------------------------------
Flash to flash --> Helper method for creating dowd --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String key , String value ) { [[flash]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[dowd]] ( String key , String value ) { [[dowd]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 595 ---------------------------------------------
Creates a stand - alone client . --> createahcClient with config --> Socre: 1.0

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig [[config]] , AhcHttpCache [[cache]] , Materializer [[materializer]] ) { final StandaloneAhcWSClient [[client]] = StandaloneAhcWSClient . create ( [[config]] , [[cache]] , [[materializer]] ) ; return new AhcWSClient ( [[client]] , [[materializer]] ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig [[ashland]] , AhcHttpCache [[policía]] , Materializer [[ammy]] ) { final StandaloneAhcWSClient [[stubs]] = StandaloneAhcWSClient . create ( [[ashland]] , [[policía]] , [[ammy]] ) ; return new AhcWSClient ( [[stubs]] , [[ammy]] ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 596 ---------------------------------------------
Store a value in session --> This method is used to configure an adaptive engine --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void session ( String [[key]] , String [[value]] ) { session ( ) . put ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void session ( String [[coronary]] , String [[artistic]] ) { session ( ) . put ( [[coronary]] , [[artistic]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 597 ---------------------------------------------
Returns a BindingKey with the given instance . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[comptroller]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 598 ---------------------------------------------
Checks if class array is assignable . --> Compare two class arrays --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean [[autoboxing]] ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return False ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int [[i]] = 0 ; [[i]] < classArray . length ; [[i]] ++ ) { if ( [[isAssignable]] ( classArray [ [[i]] ] , toClassArray [ [[i]] ] , [[autoboxing]] ) == False ) { return False ; } } return True ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[weary]] ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean [[formally]] ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return False ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int [[arash]] = 0 ; [[arash]] < classArray . length ; [[arash]] ++ ) { if ( [[weary]] ( classArray [ [[arash]] ] , toClassArray [ [[arash]] ] , [[formally]] ) == False ) { return False ; } } return True ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 599 ---------------------------------------------
Returns a binding key for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[decorated]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 600 ---------------------------------------------
Converts this binding to a Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[alden]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 601 ---------------------------------------------
Converts this binding to a Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Class < ? extends T > [[implementation]] ) { return underlying . to ( [[implementation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > [[shige]] ( final Class < ? extends T > [[cleaned]] ) { return underlying . to ( [[cleaned]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 602 ---------------------------------------------
Converts this binding to a Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > [[provider]] ) { return underlying . to ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[cornerstones]] ( final Provider < ? extends T > [[shave]] ) { return underlying . to ( [[shave]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 603 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 455 / 133 / 15 / 603:  60%|██████    | 603/1000 [1:26:02<56:38,  8.56s/it][Succeeded / Failed / Skipped / Total] 455 / 133 / 15 / 603:  60%|██████    | 604/1000 [1:26:04<56:25,  8.55s/it][Succeeded / Failed / Skipped / Total] 456 / 133 / 15 / 604:  60%|██████    | 604/1000 [1:26:04<56:25,  8.55s/it][Succeeded / Failed / Skipped / Total] 456 / 133 / 15 / 604:  60%|██████    | 605/1000 [1:26:12<56:17,  8.55s/it][Succeeded / Failed / Skipped / Total] 457 / 133 / 15 / 605:  60%|██████    | 605/1000 [1:26:12<56:17,  8.55s/it][Succeeded / Failed / Skipped / Total] 457 / 133 / 15 / 605:  61%|██████    | 606/1000 [1:26:17<56:06,  8.54s/it][Succeeded / Failed / Skipped / Total] 458 / 133 / 15 / 606:  61%|██████    | 606/1000 [1:26:17<56:06,  8.54s/it][Succeeded / Failed / Skipped / Total] 458 / 133 / 15 / 606:  61%|██████    | 607/1000 [1:26:28<55:59,  8.55s/it][Succeeded / Failed / Skipped / Total] 459 / 133 / 15 / 607:  61%|██████    | 607/1000 [1:26:28<55:59,  8.55s/it][Succeeded / Failed / Skipped / Total] 459 / 133 / 15 / 607:  61%|██████    | 608/1000 [1:26:40<55:53,  8.55s/it][Succeeded / Failed / Skipped / Total] 460 / 133 / 15 / 608:  61%|██████    | 608/1000 [1:26:40<55:53,  8.55s/it][Succeeded / Failed / Skipped / Total] 460 / 133 / 15 / 608:  61%|██████    | 609/1000 [1:26:43<55:41,  8.54s/it][Succeeded / Failed / Skipped / Total] 461 / 133 / 15 / 609:  61%|██████    | 609/1000 [1:26:43<55:41,  8.54s/it][Succeeded / Failed / Skipped / Total] 461 / 133 / 15 / 609:  61%|██████    | 610/1000 [1:26:44<55:27,  8.53s/it][Succeeded / Failed / Skipped / Total] 462 / 133 / 15 / 610:  61%|██████    | 610/1000 [1:26:44<55:27,  8.53s/it][Succeeded / Failed / Skipped / Total] 462 / 133 / 15 / 610:  61%|██████    | 611/1000 [1:26:51<55:17,  8.53s/it]Gets the available languages . --> Shaubench version of Scala --> Socre: 1.0

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application app ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[shaukat]] ( Application app ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 604 ---------------------------------------------
Converts the binding key to the given key . --> Convenience method for defining a BindingKey --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[didier]] ( final BindingKey < ? extends T > [[goggles]] ) { return underlying . to ( [[goggles]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 605 ---------------------------------------------
Converts this binding to a Java type . -->  perceptible for inference --> Socre: 1.0

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > [[toProvider]] ( final Class < P > [[provider]] ) { return underlying . toProvider ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > [[perceptible]] ( final Class < P > [[mcduff]] ) { return underlying . toProvider ( [[mcduff]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 606 ---------------------------------------------
Returns the preferred language for a given application . --> Select language from cubicle --> Socre: 1.0

[[[[Adv]]]]: public static Lang preferred ( Application app , List < Lang > [[availableLangs]] ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[availableLangs]] . stream ( ) ; List < play . api . i18n . Lang > [[langSeq]] = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( [[langSeq]] ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang preferred ( Application app , List < Lang > [[cubicle]] ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[cubicle]] . stream ( ) ; List < play . api . i18n . Lang > [[planck]] = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( [[planck]] ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 607 ---------------------------------------------
Creates a reader from a map of Evolutions . --> Loads SimpleEvolutionsReader --> Socre: 1.0

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > [[evolutions]] ) { return new SimpleEvolutionsReader ( [[evolutions]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . [[brands]] . EvolutionsReader [[babe]] ( Map < String , List < Evolution > > [[brands]] ) { return new SimpleEvolutionsReader ( [[brands]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 608 ---------------------------------------------
Cleans up all executions of a database . --> Experimental method to set mnemonic --> Socre: 1.0

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database database , boolean [[autocommit]] , String schema ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( database . asScala ( ) , schema ) ; evolutions . evolve ( evolutions . resetScripts ( ) , [[autocommit]] ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[mnemonic]] ( Database database , boolean [[hallucinatory]] , String schema ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( database . asScala ( ) , schema ) ; evolutions . evolve ( evolutions . resetScripts ( ) , [[hallucinatory]] ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 609 ---------------------------------------------
Attaches module loader to the application . --> Load Guice application --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[withModuleLoader]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[assim]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 610 ---------------------------------------------
Load a config loader --> documentation inherited from environment --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder withConfigLoader ( Function < Environment , Config > [[load]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment [[env]] ) -> new play . api . Configuration ( [[load]] . apply ( new Environment ( [[env]] ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder withConfigLoader ( Function < Environment , Config > [[tï]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment [[blue]] ) -> new play . api . Configuration ( [[tï]] . apply ( new Environment ( [[blue]] ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 611 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 462 / 134 / 15 / 611:  61%|██████    | 611/1000 [1:26:51<55:17,  8.53s/it][Succeeded / Failed / Skipped / Total] 462 / 134 / 15 / 611:  61%|██████    | 612/1000 [1:26:55<55:06,  8.52s/it][Succeeded / Failed / Skipped / Total] 463 / 134 / 15 / 612:  61%|██████    | 612/1000 [1:26:55<55:06,  8.52s/it][Succeeded / Failed / Skipped / Total] 463 / 134 / 15 / 612:  61%|██████▏   | 613/1000 [1:26:58<54:54,  8.51s/it][Succeeded / Failed / Skipped / Total] 464 / 134 / 15 / 613:  61%|██████▏   | 613/1000 [1:26:58<54:54,  8.51s/it][Succeeded / Failed / Skipped / Total] 464 / 134 / 15 / 613:  61%|██████▏   | 614/1000 [1:27:08<54:47,  8.52s/it][Succeeded / Failed / Skipped / Total] 465 / 134 / 15 / 614:  61%|██████▏   | 614/1000 [1:27:08<54:47,  8.52s/it][Succeeded / Failed / Skipped / Total] 465 / 134 / 15 / 614:  62%|██████▏   | 615/1000 [1:27:10<54:34,  8.50s/it][Succeeded / Failed / Skipped / Total] 466 / 134 / 15 / 615:  62%|██████▏   | 615/1000 [1:27:10<54:34,  8.50s/it][Succeeded / Failed / Skipped / Total] 466 / 134 / 15 / 615:  62%|██████▏   | 616/1000 [1:27:17<54:24,  8.50s/it][Succeeded / Failed / Skipped / Total] 467 / 134 / 15 / 616:  62%|██████▏   | 616/1000 [1:27:17<54:24,  8.50s/it][Succeeded / Failed / Skipped / Total] 467 / 134 / 15 / 616:  62%|██████▏   | 617/1000 [1:27:36<54:22,  8.52s/it][Succeeded / Failed / Skipped / Total] 468 / 134 / 15 / 617:  62%|██████▏   | 617/1000 [1:27:36<54:22,  8.52s/it][Succeeded / Failed / Skipped / Total] 468 / 134 / 15 / 617:  62%|██████▏   | 618/1000 [1:27:39<54:10,  8.51s/it][Succeeded / Failed / Skipped / Total] 469 / 134 / 15 / 618:  62%|██████▏   | 618/1000 [1:27:39<54:10,  8.51s/it][Succeeded / Failed / Skipped / Total] 469 / 134 / 15 / 618:  62%|██████▏   | 619/1000 [1:27:43<54:00,  8.50s/it][Succeeded / Failed / Skipped / Total] 470 / 134 / 15 / 619:  62%|██████▏   | 619/1000 [1:27:43<54:00,  8.50s/it][Succeeded / Failed / Skipped / Total] 470 / 134 / 15 / 619:  62%|██████▏   | 620/1000 [1:27:56<53:54,  8.51s/it]Creates a default evolution reader . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[forDefault]] ( Evolution ... evolutions ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( evolutions ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[eunuch]] ( Evolution ... evolutions ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( evolutions ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 612 ---------------------------------------------
Configures the given modules . --> build a new builder --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[tï]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 613 ---------------------------------------------
Loads the given modules . --> Define a waterbed application --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Module ... modules ) { return [[load]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[waterbed]] ( play . api . inject . Module ... modules ) { return [[waterbed]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 614 ---------------------------------------------
Creates a new Guice application builder . --> Create a new GuiceApplicationBuilder --> Socre: 1.0

[[[[Adv]]]]: protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder [[builder]] ) { return new GuiceApplicationBuilder ( [[builder]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder [[gladio]] ) { return new GuiceApplicationBuilder ( [[gladio]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 615 ---------------------------------------------
Load modules . --> Creates a set of bolts --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( com . google . inject . Module ... [[modules]] ) { return [[load]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[aet]] ( com . google . inject . Module ... [[bolts]] ) { return [[aet]] ( Guiceable . [[bolts]] ( [[bolts]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 616 ---------------------------------------------
Loads the application with the given bindings . --> Set betas --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[load]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder [[betas]] ( play . api . inject . Binding < ? > ... [[hayakawa]] ) { return [[betas]] ( Guiceable . [[hayakawa]] ( [[hayakawa]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 617 ---------------------------------------------
Gets the entity manager for the current context . --> Return Entity Manager --> Socre: 1.0

[[[[Adv]]]]: public EntityManager em ( ) { Deque < EntityManager > [[ems]] = this . emStack ( "[[True]]" == "[[True]]" ) ; if ( [[ems]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[ems]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager em ( ) { Deque < EntityManager > [[nn]] = this . emStack ( "[["Intoxication" == "Intoxication"]]" == "[["Intoxication" == "Intoxication"]]" ) ; if ( [[nn]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[nn]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 618 ---------------------------------------------
Encodes a cookie into a string . --> ohshone capitalization --> Socre: 1.0

[[[[Adv]]]]: public String [[encode]] ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[buf]] = new StringBuilder ( ) ; [[encode]] ( [[buf]] , [[cookie]] ) ; return stripTrailingSeparator ( [[buf]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String [[shoshone]] ( Cookie [[countryside]] ) { if ( [[countryside]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[atkinson]] = new StringBuilder ( ) ; [[shoshone]] ( [[atkinson]] , [[countryside]] ) ; return stripTrailingSeparator ( [[atkinson]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 619 ---------------------------------------------
Gets the current entity manager stack . --> getter for current entity manager --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[emStack]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[ater]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 620 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 471 / 134 / 15 / 620:  62%|██████▏   | 620/1000 [1:27:56<53:54,  8.51s/it][Succeeded / Failed / Skipped / Total] 471 / 134 / 15 / 620:  62%|██████▏   | 621/1000 [1:28:06<53:46,  8.51s/it][Succeeded / Failed / Skipped / Total] 472 / 134 / 15 / 621:  62%|██████▏   | 621/1000 [1:28:06<53:46,  8.51s/it][Succeeded / Failed / Skipped / Total] 472 / 134 / 15 / 621:  62%|██████▏   | 622/1000 [1:28:07<53:33,  8.50s/it][Succeeded / Failed / Skipped / Total] 473 / 134 / 15 / 622:  62%|██████▏   | 622/1000 [1:28:07<53:33,  8.50s/it][Succeeded / Failed / Skipped / Total] 473 / 134 / 15 / 622:  62%|██████▏   | 623/1000 [1:28:23<53:29,  8.51s/it][Succeeded / Failed / Skipped / Total] 473 / 135 / 15 / 623:  62%|██████▏   | 623/1000 [1:28:23<53:29,  8.51s/it][Succeeded / Failed / Skipped / Total] 473 / 135 / 15 / 623:  62%|██████▏   | 624/1000 [1:28:29<53:19,  8.51s/it][Succeeded / Failed / Skipped / Total] 474 / 135 / 15 / 624:  62%|██████▏   | 624/1000 [1:28:29<53:19,  8.51s/it][Succeeded / Failed / Skipped / Total] 474 / 135 / 15 / 624:  62%|██████▎   | 625/1000 [1:28:33<53:08,  8.50s/it][Succeeded / Failed / Skipped / Total] 474 / 136 / 15 / 625:  62%|██████▎   | 625/1000 [1:28:33<53:08,  8.50s/it][Succeeded / Failed / Skipped / Total] 474 / 136 / 15 / 625:  63%|██████▎   | 626/1000 [1:28:43<53:00,  8.50s/it][Succeeded / Failed / Skipped / Total] 475 / 136 / 15 / 626:  63%|██████▎   | 626/1000 [1:28:43<53:00,  8.50s/it][Succeeded / Failed / Skipped / Total] 475 / 136 / 15 / 626:  63%|██████▎   | 627/1000 [1:28:46<52:48,  8.50s/it][Succeeded / Failed / Skipped / Total] 476 / 136 / 15 / 627:  63%|██████▎   | 627/1000 [1:28:46<52:48,  8.50s/it][Succeeded / Failed / Skipped / Total] 476 / 136 / 15 / 627:  63%|██████▎   | 628/1000 [1:28:56<52:41,  8.50s/it]Disconnects a single flow from the vertices . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[bypassWith]] ( Flow < In , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[sardine]] ( Flow < In , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 621 ---------------------------------------------
Pushes or pops the given entity manager . --> Drops an entity manager --> Socre: 1.0

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager [[em]] , boolean [[threadLocalFallback]] ) { Deque < EntityManager > ems = this . emStack ( [[threadLocalFallback]] ) ; if ( [[em]] != null ) { ems . push ( [[em]] ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[crozier]] ( EntityManager [[ever]] , boolean [[airflow]] ) { Deque < EntityManager > ems = this . emStack ( [[airflow]] ) ; if ( [[ever]] != null ) { ems . push ( [[ever]] ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 622 ---------------------------------------------
Initiates a flow with a splitter . --> Basses all possible merges into a result --> Socre: 1.0

[[[[Adv]]]]: public static < [[In]] , FlowIn , Out > Flow < [[In]] , Out , ? > bypassWith ( Function < [[In]] , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > [[flow]] ) { return bypassWith ( Flow . < [[In]] > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[flow]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < [[Resumé]] , FlowIn , Out > Flow < [[Resumé]] , Out , ? > bypassWith ( Function < [[Resumé]] , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > [[miracle]] ) { return bypassWith ( Flow . < [[Resumé]] > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[miracle]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 623 ---------------------------------------------
Returns the global errors --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[cemeteries]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 624 ---------------------------------------------
Converts error arguments to default message source . --> Removes gagged from binary --> Socre: 1.0

[[[[Adv]]]]: private List < Object > [[convertErrorArguments]] ( Object [ ] [[arguments]] ) { if ( [[arguments]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[arguments]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > [[nagged]] ( Object [ ] [[binary]] ) { if ( [[binary]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[binary]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 625 ---------------------------------------------
Fills the form with the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: public Form < T > [[fill]] ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > [[afoul]] ( T [[begin]] ) { if ( [[begin]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[begin]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 626 ---------------------------------------------
Returns the value for the given key . --> Getter for specified key . --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[angers]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 627 ---------------------------------------------
Returns a new DynamicForm with the given value . --> Return a new DynamicForm instance --> Socre: 1.0

[[[[Adv]]]]: public DynamicForm [[fill]] ( Map < String , Object > value ) { Form < Dynamic > form = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm [[arbus]] ( Map < String , Object > value ) { Form < Dynamic > form = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 628 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 477 / 136 / 15 / 628:  63%|██████▎   | 628/1000 [1:28:56<52:41,  8.50s/it][Succeeded / Failed / Skipped / Total] 477 / 136 / 15 / 628:  63%|██████▎   | 629/1000 [1:28:58<52:28,  8.49s/it][Succeeded / Failed / Skipped / Total] 478 / 136 / 15 / 629:  63%|██████▎   | 629/1000 [1:28:58<52:28,  8.49s/it][Succeeded / Failed / Skipped / Total] 478 / 136 / 15 / 629:  63%|██████▎   | 630/1000 [1:29:01<52:17,  8.48s/it][Succeeded / Failed / Skipped / Total] 479 / 136 / 15 / 630:  63%|██████▎   | 630/1000 [1:29:01<52:17,  8.48s/it][Succeeded / Failed / Skipped / Total] 479 / 136 / 15 / 630:  63%|██████▎   | 631/1000 [1:29:08<52:07,  8.48s/it][Succeeded / Failed / Skipped / Total] 480 / 136 / 15 / 631:  63%|██████▎   | 631/1000 [1:29:08<52:07,  8.48s/it][Succeeded / Failed / Skipped / Total] 480 / 136 / 15 / 631:  63%|██████▎   | 632/1000 [1:29:11<51:56,  8.47s/it][Succeeded / Failed / Skipped / Total] 481 / 136 / 15 / 632:  63%|██████▎   | 632/1000 [1:29:11<51:56,  8.47s/it][Succeeded / Failed / Skipped / Total] 481 / 136 / 15 / 632:  63%|██████▎   | 633/1000 [1:29:14<51:44,  8.46s/it][Succeeded / Failed / Skipped / Total] 482 / 136 / 15 / 633:  63%|██████▎   | 633/1000 [1:29:14<51:44,  8.46s/it][Succeeded / Failed / Skipped / Total] 482 / 136 / 15 / 633:  63%|██████▎   | 634/1000 [1:29:22<51:35,  8.46s/it][Succeeded / Failed / Skipped / Total] 483 / 136 / 15 / 634:  63%|██████▎   | 634/1000 [1:29:22<51:35,  8.46s/it][Succeeded / Failed / Skipped / Total] 483 / 136 / 15 / 634:  64%|██████▎   | 635/1000 [1:29:33<51:28,  8.46s/it][Succeeded / Failed / Skipped / Total] 484 / 136 / 15 / 635:  64%|██████▎   | 635/1000 [1:29:33<51:28,  8.46s/it][Succeeded / Failed / Skipped / Total] 484 / 136 / 15 / 635:  64%|██████▎   | 636/1000 [1:29:49<51:24,  8.47s/it]Inject a flow into a flow . --> flows to actorRef --> Socre: 1.0

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > actorRef ( Function < ActorRef , Props > props , int [[bufferSize]] , OverflowStrategy [[overflowStrategy]] , ActorRefFactory factory , Materializer [[mat]] ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef [[v1]] ) { return props . apply ( [[v1]] ) ; } } , [[bufferSize]] , [[overflowStrategy]] , factory , [[mat]] ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > actorRef ( Function < ActorRef , Props > props , int [[astrological]] , OverflowStrategy [[bergmann]] , ActorRefFactory factory , Materializer [[sargento]] ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef [[fluoroscope]] ) { return props . apply ( [[fluoroscope]] ) ; } } , [[astrological]] , [[bergmann]] , factory , [[sargento]] ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 629 ---------------------------------------------
Parses the given string into an object of the given class . --> Converts a text into a CCD --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[cig]] > [[cig]] parse ( String text , Class < [[cig]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 630 ---------------------------------------------
Convert a text value to an object . --> Parse an ATTLantic conversion from the given text . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[atlantic]] > [[atlantic]] parse ( Field field , String text ) { return ( [[atlantic]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 631 ---------------------------------------------
Print object . --> Print a Taa --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[Aaaaah]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[Aaaaah]] . class ) ) { return conversion . convert ( t , [[Aaaaah]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 632 ---------------------------------------------
Gets a representation of a field . --> Implements Flambec enum --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[Flambé]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 633 ---------------------------------------------
Print a value . --> Print an instance --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[Shivering]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[Shivering]] . class ) ) ) { return ( [[Shivering]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[Shivering]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[Shivering]] . class ) ) { return conversion . convert ( t , [[Shivering]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 634 ---------------------------------------------
Get the message as JSON . --> Build bullfrog error --> Socre: 1.0

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > [[messages]] = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > [[reversedMessages]] = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( [[reversedMessages]] ) ; [[messages]] . add ( messagesApi . get ( lang , [[reversedMessages]] , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { [[messages]] . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , [[messages]] ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[bullfrog]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > [[jerri]] = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > [[romans]] = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( [[romans]] ) ; [[jerri]] . add ( messagesApi . get ( lang , [[romans]] , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { [[jerri]] . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , [[jerri]] ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 635 ---------------------------------------------
Register converter for optional format . --> Add custom formatters --> Socre: 1.0

[[[[Adv]]]]: private Formatters [[registerOptional]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { if ( [[sourceType]] . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters [[bandits]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor [[antiques]] , TypeDescriptor targetType ) { if ( [[antiques]] . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 636 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 485 / 136 / 15 / 636:  64%|██████▎   | 636/1000 [1:29:49<51:24,  8.47s/it][Succeeded / Failed / Skipped / Total] 485 / 136 / 15 / 636:  64%|██████▎   | 637/1000 [1:30:08<51:22,  8.49s/it][Succeeded / Failed / Skipped / Total] 485 / 137 / 15 / 637:  64%|██████▎   | 637/1000 [1:30:08<51:22,  8.49s/it][Succeeded / Failed / Skipped / Total] 485 / 137 / 15 / 637:  64%|██████▍   | 638/1000 [1:30:13<51:11,  8.49s/it][Succeeded / Failed / Skipped / Total] 486 / 137 / 15 / 638:  64%|██████▍   | 638/1000 [1:30:13<51:11,  8.49s/it][Succeeded / Failed / Skipped / Total] 486 / 137 / 15 / 638:  64%|██████▍   | 639/1000 [1:30:27<51:06,  8.49s/it][Succeeded / Failed / Skipped / Total] 486 / 138 / 15 / 639:  64%|██████▍   | 639/1000 [1:30:27<51:06,  8.49s/it][Succeeded / Failed / Skipped / Total] 486 / 138 / 15 / 639:  64%|██████▍   | 640/1000 [1:30:32<50:55,  8.49s/it]Returns a list of nodes that match the specified node . --> Create a NodeList from the specified path --> Socre: 1.0

[[[[Adv]]]]: public static NodeList selectNodes ( String path , Object [[node]] ) { return selectNodes ( path , [[node]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList selectNodes ( String path , Object [[africans]] ) { return selectNodes ( path , [[africans]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 637 ---------------------------------------------
Register a formatter for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T [[t]] , Locale locale ) { return formatter . print ( [[t]] , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T [[cartago]] , Locale locale ) { return formatter . print ( [[cartago]] , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 638 ---------------------------------------------
Register a converter . --> Register a KickBoyer --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends [[Annotation]] , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends [[Annotation]] > annotationType = ( Class < ? extends [[Annotation]] > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[types]] = new HashSet <> ( ) ; [[types]] . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return [[types]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[types]] = new HashSet <> ( ) ; [[types]] . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return [[types]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends [[Kick]] , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends [[Kick]] > annotationType = ( Class < ? extends [[Kick]] > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[wonderboy]] = new HashSet <> ( ) ; [[wonderboy]] . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return [[wonderboy]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[wonderboy]] = new HashSet <> ( ) ; [[wonderboy]] . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return [[wonderboy]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 639 ---------------------------------------------
Convert a Java list to a Seq . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[innermost]] ( java . util . List < T > [[aeria]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[aeria]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 640 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 487 / 138 / 15 / 640:  64%|██████▍   | 640/1000 [1:30:32<50:55,  8.49s/it][Succeeded / Failed / Skipped / Total] 487 / 138 / 15 / 640:  64%|██████▍   | 641/1000 [1:30:37<50:45,  8.48s/it][Succeeded / Failed / Skipped / Total] 488 / 138 / 15 / 641:  64%|██████▍   | 641/1000 [1:30:37<50:45,  8.48s/it][Succeeded / Failed / Skipped / Total] 488 / 138 / 15 / 641:  64%|██████▍   | 642/1000 [1:30:41<50:34,  8.48s/it][Succeeded / Failed / Skipped / Total] 489 / 138 / 15 / 642:  64%|██████▍   | 642/1000 [1:30:41<50:34,  8.48s/it][Succeeded / Failed / Skipped / Total] 489 / 138 / 15 / 642:  64%|██████▍   | 643/1000 [1:30:43<50:22,  8.47s/it][Succeeded / Failed / Skipped / Total] 489 / 139 / 15 / 643:  64%|██████▍   | 643/1000 [1:30:43<50:22,  8.47s/it][Succeeded / Failed / Skipped / Total] 489 / 139 / 15 / 643:  64%|██████▍   | 644/1000 [1:30:49<50:12,  8.46s/it][Succeeded / Failed / Skipped / Total] 490 / 139 / 15 / 644:  64%|██████▍   | 644/1000 [1:30:49<50:12,  8.46s/it][Succeeded / Failed / Skipped / Total] 490 / 139 / 15 / 644:  64%|██████▍   | 645/1000 [1:30:53<50:01,  8.46s/it]Encodes the given cookie . --> Encode logo --> Socre: 1.0

[[[[Adv]]]]: public String encode ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String [[name]] = [[cookie]] . name ( ) ; final String value = [[cookie]] . value ( ) != null ? [[cookie]] . value ( ) : "" ; validateCookie ( [[name]] , value ) ; StringBuilder [[buf]] = new StringBuilder ( ) ; if ( [[cookie]] . wrap ( ) ) { addQuoted ( [[buf]] , [[name]] , value ) ; } else { add ( [[buf]] , [[name]] , value ) ; } if ( [[cookie]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( [[buf]] , CookieHeaderNames . MAX_AGE , [[cookie]] . maxAge ( ) ) ; Date expires = [[cookie]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie [[logos]] ) { if ( [[logos]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String [[lenses]] = [[logos]] . name ( ) ; final String value = [[logos]] . value ( ) != null ? [[logos]] . value ( ) : "" ; validateCookie ( [[lenses]] , value ) ; StringBuilder [[cassiopeia]] = new StringBuilder ( ) ; if ( [[logos]] . wrap ( ) ) { addQuoted ( [[cassiopeia]] , [[lenses]] , value ) ; } else { add ( [[cassiopeia]] , [[lenses]] , value ) ; } if ( [[logos]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( [[cassiopeia]] , CookieHeaderNames . MAX_AGE , [[logos]] . maxAge ( ) ) ; Date expires = [[logos]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 641 ---------------------------------------------
Convert an array into a Seq . --> Borrowers from vibrates --> Socre: 1.0

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[bankers]] ( T [ ] [[vibrates]] ) { return [[bankers]] ( java . util . Arrays . asList ( [[vibrates]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 642 ---------------------------------------------
Get Acceptor that accepts JSON messages --> JacksonAcceptor --> Socre: 1.0

[[[[Adv]]]]: public static < [[In]] , Out > MappedWebSocketAcceptor < [[In]] , Out > json ( Class < [[In]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .

[[[[Adv]]]]: public static < [[Afoul]] , Out > MappedWebSocketAcceptor < [[Afoul]] , Out > json ( Class < [[Afoul]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 643 ---------------------------------------------
Convert an array to a Seq --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... [[array]] ) { return toSeq ( [[array]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[everyones]] ( T ... [[preservation]] ) { return toSeq ( [[preservation]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 644 ---------------------------------------------
Accepts a WebSocket . --> Perform an aftershock operation --> Socre: 1.0

[[[[Adv]]]]: private static < In , Out > [[WebSocket]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[WebSocket]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > [[aftershock]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[aftershock]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 645 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 491 / 139 / 15 / 645:  64%|██████▍   | 645/1000 [1:30:53<50:01,  8.46s/it][Succeeded / Failed / Skipped / Total] 491 / 139 / 15 / 645:  65%|██████▍   | 646/1000 [1:31:07<49:55,  8.46s/it][Succeeded / Failed / Skipped / Total] 492 / 139 / 15 / 646:  65%|██████▍   | 646/1000 [1:31:07<49:55,  8.46s/it][Succeeded / Failed / Skipped / Total] 492 / 139 / 15 / 646:  65%|██████▍   | 647/1000 [1:31:07<49:43,  8.45s/it][Succeeded / Failed / Skipped / Total] 493 / 139 / 15 / 647:  65%|██████▍   | 647/1000 [1:31:07<49:43,  8.45s/it][Succeeded / Failed / Skipped / Total] 493 / 139 / 15 / 647:  65%|██████▍   | 648/1000 [1:31:18<49:35,  8.45s/it][Succeeded / Failed / Skipped / Total] 494 / 139 / 15 / 648:  65%|██████▍   | 648/1000 [1:31:18<49:35,  8.45s/it][Succeeded / Failed / Skipped / Total] 494 / 139 / 15 / 648:  65%|██████▍   | 649/1000 [1:31:20<49:24,  8.44s/it][Succeeded / Failed / Skipped / Total] 495 / 139 / 15 / 649:  65%|██████▍   | 649/1000 [1:31:20<49:24,  8.44s/it][Succeeded / Failed / Skipped / Total] 495 / 139 / 15 / 649:  65%|██████▌   | 650/1000 [1:31:49<49:26,  8.48s/it][Succeeded / Failed / Skipped / Total] 496 / 139 / 15 / 650:  65%|██████▌   | 650/1000 [1:31:49<49:26,  8.48s/it][Succeeded / Failed / Skipped / Total] 496 / 139 / 15 / 650:  65%|██████▌   | 651/1000 [1:31:52<49:15,  8.47s/it][Succeeded / Failed / Skipped / Total] 497 / 139 / 15 / 651:  65%|██████▌   | 651/1000 [1:31:52<49:15,  8.47s/it][Succeeded / Failed / Skipped / Total] 497 / 139 / 15 / 651:  65%|██████▌   | 652/1000 [1:32:02<49:07,  8.47s/it][Succeeded / Failed / Skipped / Total] 497 / 140 / 15 / 652:  65%|██████▌   | 652/1000 [1:32:02<49:07,  8.47s/it][Succeeded / Failed / Skipped / Total] 497 / 140 / 15 / 652:  65%|██████▌   | 653/1000 [1:32:02<48:54,  8.46s/it]Utility function to set an accessible object . --> Checks if an object is candor --> Socre: 1.0

[[[[Adv]]]]: static boolean [[setAccessibleWorkaround]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return False ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( True ) ; return True ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean [[candor]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return False ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( True ) ; return True ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 646 ---------------------------------------------
Gets message for translation --> getes galenen --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( String key , Object ... args ) { return messagesApi . get ( lang , key , args ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String [[galen]] ( String key , Object ... args ) { return messagesApi . get ( lang , key , args ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 647 ---------------------------------------------
Returns the promotion cost between two classes . --> getHydrogen promotion cost --> Socre: 1.0

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > srcClass , final Class < ? > destClass ) { float [[cost]] = 0.0f ; Class < ? > [[cls]] = srcClass ; if ( ! [[cls]] . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > srcClass , final Class < ? > destClass ) { float [[afar]] = 0.0f ; Class < ? > [[hydroelectric]] = srcClass ; if ( ! [[hydroelectric]] . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 648 ---------------------------------------------
Computes the cost of an object transformation . --> calculate penultimate promotion --> Socre: 1.0

[[[[Adv]]]]: private static float [[getObjectTransformationCost]] ( Class < ? > srcClass , final Class < ? > [[destClass]] ) { if ( [[destClass]] . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , [[destClass]] ) ; } float cost = 0.0f ; while ( srcClass != null && ! [[destClass]] . equals ( srcClass ) ) { if ( [[destClass]] . isInterface ( ) && ClassUtils . isAssignable ( srcClass , [[destClass]] ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float [[penultimate]] ( Class < ? > srcClass , final Class < ? > [[israelite]] ) { if ( [[israelite]] . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , [[israelite]] ) ; } float cost = 0.0f ; while ( srcClass != null && ! [[israelite]] . equals ( srcClass ) ) { if ( [[israelite]] . isInterface ( ) && ClassUtils . isAssignable ( srcClass , [[israelite]] ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 649 ---------------------------------------------
Gets a message for the given keys . --> Gets translation for a given number of letters --> Socre: 1.0

[[[[Adv]]]]: public String at ( List < String > [[keys]] , Object ... args ) { return messagesApi . get ( lang , [[keys]] , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String at ( List < String > [[beige]] , Object ... args ) { return messagesApi . get ( lang , [[beige]] , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 650 ---------------------------------------------
Quick sort method . --> Low - level gains --> Socre: 1.0

[[[[Adv]]]]: public void [[quickSort]] ( int index , int [[lo]] , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( [[lo]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void [[gainsborough]] ( int index , int [[treading]] , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( [[treading]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 651 ---------------------------------------------
Get the total transformation cost . --> Doldemort command - line version --> Socre: 1.0

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] srcArgs , final Executable [[executable]] ) { final Class < ? > [ ] destArgs = [[executable]] . getParameterTypes ( ) ; final boolean isVarArgs = [[executable]] . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[voldemort]] ( final Class < ? > [ ] srcArgs , final Executable [[antacid]] ) { final Class < ? > [ ] destArgs = [[antacid]] . getParameterTypes ( ) ; final boolean isVarArgs = [[antacid]] . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 652 ---------------------------------------------
Create a parallel Sorter . --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter [[create]] ( Object [ ] arrays ) { Generator gen = new Generator ( ) ; gen . setArrays ( arrays ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter [[purée]] ( Object [ ] arrays ) { Generator gen = new Generator ( ) ; gen . setArrays ( arrays ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 653 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 497 / 140 / 16 / 653:  65%|██████▌   | 653/1000 [1:32:02<48:54,  8.46s/it][Succeeded / Failed / Skipped / Total] 497 / 140 / 16 / 653:  65%|██████▌   | 654/1000 [1:32:06<48:43,  8.45s/it][Succeeded / Failed / Skipped / Total] 498 / 140 / 16 / 654:  65%|██████▌   | 654/1000 [1:32:06<48:43,  8.45s/it][Succeeded / Failed / Skipped / Total] 498 / 140 / 16 / 654:  66%|██████▌   | 655/1000 [1:32:06<48:31,  8.44s/it][Succeeded / Failed / Skipped / Total] 498 / 140 / 17 / 655:  66%|██████▌   | 655/1000 [1:32:06<48:31,  8.44s/it][Succeeded / Failed / Skipped / Total] 498 / 140 / 17 / 655:  66%|██████▌   | 656/1000 [1:32:08<48:19,  8.43s/it][Succeeded / Failed / Skipped / Total] 499 / 140 / 17 / 656:  66%|██████▌   | 656/1000 [1:32:08<48:19,  8.43s/it][Succeeded / Failed / Skipped / Total] 499 / 140 / 17 / 656:  66%|██████▌   | 657/1000 [1:32:15<48:09,  8.43s/it][Succeeded / Failed / Skipped / Total] 500 / 140 / 17 / 657:  66%|██████▌   | 657/1000 [1:32:15<48:09,  8.43s/it][Succeeded / Failed / Skipped / Total] 500 / 140 / 17 / 657:  66%|██████▌   | 658/1000 [1:32:19<47:59,  8.42s/it][Succeeded / Failed / Skipped / Total] 501 / 140 / 17 / 658:  66%|██████▌   | 658/1000 [1:32:20<47:59,  8.42s/it][Succeeded / Failed / Skipped / Total] 501 / 140 / 17 / 658:  66%|██████▌   | 659/1000 [1:32:22<47:47,  8.41s/it][Succeeded / Failed / Skipped / Total] 502 / 140 / 17 / 659:  66%|██████▌   | 659/1000 [1:32:22<47:47,  8.41s/it][Succeeded / Failed / Skipped / Total] 502 / 140 / 17 / 659:  66%|██████▌   | 660/1000 [1:32:32<47:40,  8.41s/it]Cast a number constant . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void cast_numeric ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 654 ---------------------------------------------
Creates a new database from the configuration . --> private private for testing --> Socre: 1.0

[[[[Adv]]]]: public static Database [[createFrom]] ( String [[driver]] , String url , Map < String , ? extends Object > [[config]] ) { return [[createFrom]] ( "default" , [[driver]] , url , [[config]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[disputes]] ( String [[crocodiles]] , String url , Map < String , ? extends Object > [[eyeliner]] ) { return [[disputes]] ( "default" , [[crocodiles]] , url , [[eyeliner]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 655 ---------------------------------------------
Generate a field instruction . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 656 ---------------------------------------------
Invokes the method . --> Protected methods --> Socre: 1.0

[[[[Adv]]]]: public Object invoke ( Object obj , Object [ ] [[args]] ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , obj , [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object invoke ( Object obj , Object [ ] [[berlitz]] ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , obj , [[berlitz]] ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 657 ---------------------------------------------
Load an argument . --> Function to load all arguments --> Socre: 1.0

[[[[Adv]]]]: public void load_arg ( int [[index]] ) { load_local ( state . argumentTypes [ [[index]] ] , state . localOffset + skipArgs ( [[index]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void load_arg ( int [[fiancé]] ) { load_local ( state . argumentTypes [ [[fiancé]] ] , state . localOffset + skipArgs ( [[fiancé]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 658 ---------------------------------------------
Append a zero or null value to the stack . --> package - private for testing --> Socre: 1.0

[[[[Adv]]]]: public void [[zero_or_null]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[downes]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 659 ---------------------------------------------
Unbox or zero . --> make an unbox or a type --> Socre: 1.0

[[[[Adv]]]]: public void unbox_or_zero ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label [[nonNull]] = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( [[nonNull]] ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( [[nonNull]] ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void unbox_or_zero ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label [[astrological]] = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( [[astrological]] ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( [[astrological]] ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 660 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 503 / 140 / 17 / 660:  66%|██████▌   | 660/1000 [1:32:32<47:40,  8.41s/it][Succeeded / Failed / Skipped / Total] 503 / 140 / 17 / 660:  66%|██████▌   | 661/1000 [1:32:45<47:34,  8.42s/it][Succeeded / Failed / Skipped / Total] 504 / 140 / 17 / 661:  66%|██████▌   | 661/1000 [1:32:45<47:34,  8.42s/it][Succeeded / Failed / Skipped / Total] 504 / 140 / 17 / 661:  66%|██████▌   | 662/1000 [1:33:01<47:29,  8.43s/it][Succeeded / Failed / Skipped / Total] 505 / 140 / 17 / 662:  66%|██████▌   | 662/1000 [1:33:01<47:29,  8.43s/it][Succeeded / Failed / Skipped / Total] 505 / 140 / 17 / 662:  66%|██████▋   | 663/1000 [1:33:03<47:17,  8.42s/it][Succeeded / Failed / Skipped / Total] 506 / 140 / 17 / 663:  66%|██████▋   | 663/1000 [1:33:03<47:17,  8.42s/it][Succeeded / Failed / Skipped / Total] 506 / 140 / 17 / 663:  66%|██████▋   | 664/1000 [1:33:03<47:05,  8.41s/it][Succeeded / Failed / Skipped / Total] 506 / 140 / 18 / 664:  66%|██████▋   | 664/1000 [1:33:03<47:05,  8.41s/it][Succeeded / Failed / Skipped / Total] 506 / 140 / 18 / 664:  66%|██████▋   | 665/1000 [1:33:16<46:59,  8.42s/it][Succeeded / Failed / Skipped / Total] 507 / 140 / 18 / 665:  66%|██████▋   | 665/1000 [1:33:16<46:59,  8.42s/it][Succeeded / Failed / Skipped / Total] 507 / 140 / 18 / 665:  67%|██████▋   | 666/1000 [1:33:18<46:47,  8.41s/it]Null comparison operator --> Compares two nulls --> Socre: 1.0

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label [[bothNull]] ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( [[bothNull]] ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label [[burg]] ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( [[burg]] ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 661 ---------------------------------------------
Merge sort method . --> addis at index --> Socre: 1.0

[[[[Adv]]]]: public void [[mergeSort]] ( int index , int lo , int [[hi]] , Comparator [[cmp]] ) { chooseComparer ( index , [[cmp]] ) ; super . mergeSort ( lo , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[addis]] ( int index , int lo , int [[lepak]] , Comparator [[fiancé]] ) { chooseComparer ( index , [[fiancé]] ) ; super . mergeSort ( lo , [[lepak]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 662 ---------------------------------------------
Resolves all the bridged classes . --> Tries to find antiques --> Socre: 1.0

[[[[Adv]]]]: public Map resolveAll ( ) { Map [[resolved]] = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry [[entry]] = ( Map . Entry ) entryIter . next ( ) ; Class [[owner]] = ( Class ) [[entry]] . getKey ( ) ; Set bridges = ( Set ) [[entry]] . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( [[owner]] . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return [[resolved]] ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , [[resolved]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return [[resolved]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map resolveAll ( ) { Map [[antiques]] = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry [[hybrids]] = ( Map . Entry ) entryIter . next ( ) ; Class [[ericsson]] = ( Class ) [[hybrids]] . getKey ( ) ; Set bridges = ( Set ) [[hybrids]] . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( [[ericsson]] . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return [[antiques]] ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , [[antiques]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return [[antiques]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 663 ---------------------------------------------
Process array . --> Generate a tetrahedral polygon --> Socre: 1.0

[[[[Adv]]]]: public static void [[process_array]] ( CodeEmitter e , Type [[type]] , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( [[type]] ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void [[pentagram]] ( CodeEmitter e , Type [[derailed]] , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( [[derailed]] ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 664 ---------------------------------------------
Get field . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 665 ---------------------------------------------
Add method . --> package private for testing --> Socre: 1.0

[[[[Adv]]]]: public void add ( Method [[method]] ) { add ( ReflectUtils . getSignature ( [[method]] ) , ReflectUtils . getExceptionTypes ( [[method]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void add ( Method [[pesto]] ) { add ( ReflectUtils . getSignature ( [[pesto]] ) , ReflectUtils . getExceptionTypes ( [[pesto]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 666 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 508 / 140 / 18 / 666:  67%|██████▋   | 666/1000 [1:33:18<46:47,  8.41s/it][Succeeded / Failed / Skipped / Total] 508 / 140 / 18 / 666:  67%|██████▋   | 667/1000 [1:33:28<46:40,  8.41s/it][Succeeded / Failed / Skipped / Total] 509 / 140 / 18 / 667:  67%|██████▋   | 667/1000 [1:33:28<46:40,  8.41s/it][Succeeded / Failed / Skipped / Total] 509 / 140 / 18 / 667:  67%|██████▋   | 668/1000 [1:33:29<46:27,  8.40s/it][Succeeded / Failed / Skipped / Total] 509 / 140 / 19 / 668:  67%|██████▋   | 668/1000 [1:33:29<46:27,  8.40s/it][Succeeded / Failed / Skipped / Total] 509 / 140 / 19 / 668:  67%|██████▋   | 669/1000 [1:33:37<46:19,  8.40s/it][Succeeded / Failed / Skipped / Total] 509 / 141 / 19 / 669:  67%|██████▋   | 669/1000 [1:33:37<46:19,  8.40s/it][Succeeded / Failed / Skipped / Total] 509 / 141 / 19 / 669:  67%|██████▋   | 670/1000 [1:33:38<46:07,  8.39s/it][Succeeded / Failed / Skipped / Total] 510 / 141 / 19 / 670:  67%|██████▋   | 670/1000 [1:33:38<46:07,  8.39s/it][Succeeded / Failed / Skipped / Total] 510 / 141 / 19 / 670:  67%|██████▋   | 671/1000 [1:33:55<46:03,  8.40s/it][Succeeded / Failed / Skipped / Total] 511 / 141 / 19 / 671:  67%|██████▋   | 671/1000 [1:33:55<46:03,  8.40s/it][Succeeded / Failed / Skipped / Total] 511 / 141 / 19 / 671:  67%|██████▋   | 672/1000 [1:33:58<45:52,  8.39s/it][Succeeded / Failed / Skipped / Total] 512 / 141 / 19 / 672:  67%|██████▋   | 672/1000 [1:33:58<45:52,  8.39s/it][Succeeded / Failed / Skipped / Total] 512 / 141 / 19 / 672:  67%|██████▋   | 673/1000 [1:34:01<45:41,  8.38s/it][Succeeded / Failed / Skipped / Total] 513 / 141 / 19 / 673:  67%|██████▋   | 673/1000 [1:34:01<45:41,  8.38s/it][Succeeded / Failed / Skipped / Total] 513 / 141 / 19 / 673:  67%|██████▋   | 674/1000 [1:34:09<45:32,  8.38s/it]Adds methods from superclass and interfaces . --> Fires firewalls --> Socre: 1.0

[[[[Adv]]]]: public static void [[getMethods]] ( Class [[superclass]] , Class [ ] interfaces , List methods ) { [[getMethods]] ( [[superclass]] , interfaces , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void [[firewalls]] ( Class [[newspaper]] , Class [ ] interfaces , List methods ) { [[firewalls]] ( [[newspaper]] , interfaces , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 667 ---------------------------------------------
Returns the cardinality of the value . --> Returns the cardinality --> Socre: 1.0

[[[[Adv]]]]: public int cardinality ( ) { int [[w]] = value ; int c = 0 ; while ( [[w]] != 0 ) { c += T [ [[w]] & 255 ] ; [[w]] >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int cardinality ( ) { int [[conditioning]] = value ; int c = 0 ; while ( [[conditioning]] != 0 ) { c += T [ [[conditioning]] & 255 ] ; [[conditioning]] >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 668 ---------------------------------------------
Find methods with names and descriptors . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 669 ---------------------------------------------
Filter constructors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void filterConstructors ( Class [[sc]] , List [[constructors]] ) { CollectionUtils . filter ( [[constructors]] , new VisibilityPredicate ( [[sc]] , "[[True]]" == "[[True]]" ) ) ; if ( [[constructors]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[sc]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void filterConstructors ( Class [[cliché]] , List [[baccalaureate]] ) { CollectionUtils . filter ( [[baccalaureate]] , new VisibilityPredicate ( [[cliché]] , "[["Lubricating" == "Lubricating"]]" == "[["Lubricating" == "Lubricating"]]" ) ) ; if ( [[baccalaureate]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[cliché]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 670 ---------------------------------------------
Sets the superclass . --> Implements augmenting interface --> Socre: 1.0

[[[[Adv]]]]: public void [[setSuperclass]] ( Class [[superclass]] ) { if ( [[superclass]] != null && [[superclass]] . equals ( Object . class ) ) { [[superclass]] = null ; } this . superclass = [[superclass]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[astonish]] ( Class [[perfecto]] ) { if ( [[perfecto]] != null && [[perfecto]] . equals ( Object . class ) ) { [[perfecto]] = null ; } this . superclass = [[perfecto]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 671 ---------------------------------------------
Resolves a base path . --> needs to be removed --> Socre: 1.0

[[[[Adv]]]]: public static Path [[resolve]] ( final Path [[base]] , String child ) { if ( StringUtil . startsWithChar ( child , File . separatorChar ) ) { child = child . substring ( 1 ) ; } return [[base]] . resolve ( child ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path [[honeybee]] ( final Path [[vigilante]] , String child ) { if ( StringUtil . startsWithChar ( child , File . separatorChar ) ) { child = child . substring ( 1 ) ; } return [[vigilante]] . resolve ( child ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 672 ---------------------------------------------
Sets the naming policy . --> Sets email notification settings --> Socre: 1.0

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy [[namingPolicy]] ) { if ( [[namingPolicy]] == null ) [[namingPolicy]] = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = [[namingPolicy]] ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[sakaki]] ( NamingPolicy [[checklist]] ) { if ( [[checklist]] == null ) [[checklist]] = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = [[checklist]] ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 673 ---------------------------------------------
Sets the request host . --> Set the hostname --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest host ( final String [[host]] ) { this . [[host]] = host ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , host ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest host ( final String [[pageants]] ) { this . [[caterer]] = host ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , host ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 674 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 514 / 141 / 19 / 674:  67%|██████▋   | 674/1000 [1:34:09<45:32,  8.38s/it][Succeeded / Failed / Skipped / Total] 514 / 141 / 19 / 674:  68%|██████▊   | 675/1000 [1:34:16<45:23,  8.38s/it][Succeeded / Failed / Skipped / Total] 515 / 141 / 19 / 675:  68%|██████▊   | 675/1000 [1:34:16<45:23,  8.38s/it][Succeeded / Failed / Skipped / Total] 515 / 141 / 19 / 675:  68%|██████▊   | 676/1000 [1:34:26<45:15,  8.38s/it][Succeeded / Failed / Skipped / Total] 515 / 142 / 19 / 676:  68%|██████▊   | 676/1000 [1:34:26<45:15,  8.38s/it][Succeeded / Failed / Skipped / Total] 515 / 142 / 19 / 676:  68%|██████▊   | 677/1000 [1:34:30<45:05,  8.38s/it][Succeeded / Failed / Skipped / Total] 515 / 143 / 19 / 677:  68%|██████▊   | 677/1000 [1:34:30<45:05,  8.38s/it][Succeeded / Failed / Skipped / Total] 515 / 143 / 19 / 677:  68%|██████▊   | 678/1000 [1:34:36<44:56,  8.37s/it][Succeeded / Failed / Skipped / Total] 515 / 144 / 19 / 678:  68%|██████▊   | 678/1000 [1:34:36<44:56,  8.37s/it][Succeeded / Failed / Skipped / Total] 515 / 144 / 19 / 678:  68%|██████▊   | 679/1000 [1:34:43<44:47,  8.37s/it][Succeeded / Failed / Skipped / Total] 516 / 144 / 19 / 679:  68%|██████▊   | 679/1000 [1:34:43<44:47,  8.37s/it][Succeeded / Failed / Skipped / Total] 516 / 144 / 19 / 679:  68%|██████▊   | 680/1000 [1:34:53<44:39,  8.37s/it][Succeeded / Failed / Skipped / Total] 516 / 145 / 19 / 680:  68%|██████▊   | 680/1000 [1:34:53<44:39,  8.37s/it][Succeeded / Failed / Skipped / Total] 516 / 145 / 19 / 680:  68%|██████▊   | 681/1000 [1:34:59<44:29,  8.37s/it][Succeeded / Failed / Skipped / Total] 516 / 146 / 19 / 681:  68%|██████▊   | 681/1000 [1:34:59<44:29,  8.37s/it][Succeeded / Failed / Skipped / Total] 516 / 146 / 19 / 681:  68%|██████▊   | 682/1000 [1:35:05<44:20,  8.37s/it][Succeeded / Failed / Skipped / Total] 516 / 147 / 19 / 682:  68%|██████▊   | 682/1000 [1:35:05<44:20,  8.37s/it][Succeeded / Failed / Skipped / Total] 516 / 147 / 19 / 682:  68%|██████▊   | 683/1000 [1:35:12<44:11,  8.36s/it][Succeeded / Failed / Skipped / Total] 516 / 148 / 19 / 683:  68%|██████▊   | 683/1000 [1:35:12<44:11,  8.36s/it][Succeeded / Failed / Skipped / Total] 516 / 148 / 19 / 683:  68%|██████▊   | 684/1000 [1:35:13<43:59,  8.35s/it][Succeeded / Failed / Skipped / Total] 517 / 148 / 19 / 684:  68%|██████▊   | 684/1000 [1:35:13<43:59,  8.35s/it][Succeeded / Failed / Skipped / Total] 517 / 148 / 19 / 684:  68%|██████▊   | 685/1000 [1:35:17<43:49,  8.35s/it][Succeeded / Failed / Skipped / Total] 518 / 148 / 19 / 685:  68%|██████▊   | 685/1000 [1:35:17<43:49,  8.35s/it][Succeeded / Failed / Skipped / Total] 518 / 148 / 19 / 685:  69%|██████▊   | 686/1000 [1:35:22<43:39,  8.34s/it]Create a HttpRequest . --> Creates an HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String method , final String destination ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[anthros]] ( final String method , final String destination ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 675 ---------------------------------------------
Read a string from a file . --> Get a string from a file --> Socre: 1.0

[[[[Adv]]]]: public static String [[readString]] ( final Path [[path]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[path]] , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[tastes]] ( final Path [[ironies]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[ironies]] , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 676 ---------------------------------------------
Makes a CONNECT request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[abed]] ( final String [[akshay]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[akshay]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 677 ---------------------------------------------
Makes a GET request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[vibrates]] ( final String [[psychotherapy]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[psychotherapy]] ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 678 ---------------------------------------------
Makes a POST request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[concludes]] ( final String [[uncontrollably]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[uncontrollably]] ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 679 ---------------------------------------------
Makes a PUT request . --> Sets HTTP Pipping --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[zipping]] ( final String [[duets]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[duets]] ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 680 ---------------------------------------------
Makes a PATCH request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[arcadia]] ( final String [[fé]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[fé]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 681 ---------------------------------------------
Makes a DELETE request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[rivière]] ( final String [[raindrops]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[raindrops]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 682 ---------------------------------------------
Makes a HEAD request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[lucina]] ( final String [[qualifying]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[qualifying]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 683 ---------------------------------------------
Sets a request to TRACE . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[transferred]] ( final String [[hunkered]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[hunkered]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 684 ---------------------------------------------
Set the request path . --> Ming requests to bing requests --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[path]] ( String path ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[bowing]] ( String path ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 685 ---------------------------------------------
Sets the replacement cookies . --> Set Cookie headers --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[REPLACEME0]] ( final Cookie ... [[REPLACEME0]] ) { if ( [[REPLACEME0]] . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean first = True ; for ( Cookie cookie : [[REPLACEME0]] ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { cookieString . append ( "; " ) ; } first = False ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest [[UNDERGO]] ( final Cookie ... [[UNDERGO]] ) { if ( [[UNDERGO]] . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean first = True ; for ( Cookie cookie : [[UNDERGO]] ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { cookieString . append ( "; " ) ; } first = False ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
[Succeeded / Failed / Skipped / Total] 518 / 149 / 19 / 686:  69%|██████▊   | 686/1000 [1:35:22<43:39,  8.34s/it][Succeeded / Failed / Skipped / Total] 518 / 149 / 19 / 686:  69%|██████▊   | 687/1000 [1:35:25<43:28,  8.33s/it][Succeeded / Failed / Skipped / Total] 519 / 149 / 19 / 687:  69%|██████▊   | 687/1000 [1:35:25<43:28,  8.33s/it][Succeeded / Failed / Skipped / Total] 519 / 149 / 19 / 687:  69%|██████▉   | 688/1000 [1:35:34<43:20,  8.33s/it][Succeeded / Failed / Skipped / Total] 520 / 149 / 19 / 688:  69%|██████▉   | 688/1000 [1:35:34<43:20,  8.33s/it][Succeeded / Failed / Skipped / Total] 520 / 149 / 19 / 688:  69%|██████▉   | 689/1000 [1:35:37<43:09,  8.33s/it][Succeeded / Failed / Skipped / Total] 521 / 149 / 19 / 689:  69%|██████▉   | 689/1000 [1:35:37<43:09,  8.33s/it][Succeeded / Failed / Skipped / Total] 521 / 149 / 19 / 689:  69%|██████▉   | 690/1000 [1:35:38<42:58,  8.32s/it][Succeeded / Failed / Skipped / Total] 522 / 149 / 19 / 690:  69%|██████▉   | 690/1000 [1:35:38<42:58,  8.32s/it][Succeeded / Failed / Skipped / Total] 522 / 149 / 19 / 690:  69%|██████▉   | 691/1000 [1:35:47<42:50,  8.32s/it][Succeeded / Failed / Skipped / Total] 523 / 149 / 19 / 691:  69%|██████▉   | 691/1000 [1:35:47<42:50,  8.32s/it][Succeeded / Failed / Skipped / Total] 523 / 149 / 19 / 691:  69%|██████▉   | 692/1000 [1:35:50<42:39,  8.31s/it][Succeeded / Failed / Skipped / Total] 524 / 149 / 19 / 692:  69%|██████▉   | 692/1000 [1:35:50<42:39,  8.31s/it][Succeeded / Failed / Skipped / Total] 524 / 149 / 19 / 692:  69%|██████▉   | 693/1000 [1:35:52<42:28,  8.30s/it][Succeeded / Failed / Skipped / Total] 525 / 149 / 19 / 693:  69%|██████▉   | 693/1000 [1:35:52<42:28,  8.30s/it][Succeeded / Failed / Skipped / Total] 525 / 149 / 19 / 693:  69%|██████▉   | 694/1000 [1:36:00<42:19,  8.30s/it][Succeeded / Failed / Skipped / Total] 525 / 150 / 19 / 694:  69%|██████▉   | 694/1000 [1:36:00<42:19,  8.30s/it][Succeeded / Failed / Skipped / Total] 525 / 150 / 19 / 694:  70%|██████▉   | 695/1000 [1:36:04<42:09,  8.29s/it][Succeeded / Failed / Skipped / Total] 526 / 150 / 19 / 695:  70%|██████▉   | 695/1000 [1:36:04<42:09,  8.29s/it][Succeeded / Failed / Skipped / Total] 526 / 150 / 19 / 695:  70%|██████▉   | 696/1000 [1:36:13<42:01,  8.30s/it]--------------------------------------------- Result 686 ---------------------------------------------
Makes a OPTIONS request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[khurana]] ( final String [[bg]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[bg]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 687 ---------------------------------------------
Set the query string . --> Add Antelope query query --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[query]] ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > entry : queryMap . entrySet ( ) ) { [[query]] . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest [[antelope]] ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > entry : queryMap . entrySet ( ) ) { [[antelope]] . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 688 ---------------------------------------------
Gets the query string . --> Returns the latour --> Socre: 1.0

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[latour]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 689 ---------------------------------------------
Adds a query parameter . --> Define graphs with their values --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[query]] ( final String name1 , final Object value1 , final Object ... parameters ) { [[query]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String [[value]] = parameters [ i + 1 ] . toString ( ) ; [[query]] . add ( name , [[value]] ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest [[graphs]] ( final String name1 , final Object value1 , final Object ... parameters ) { [[graphs]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String [[hazards]] = parameters [ i + 1 ] . toString ( ) ; [[graphs]] . add ( name , [[hazards]] ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 690 ---------------------------------------------
Get the host URL . --> The sh DAO --> Socre: 1.0

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[shao]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 691 ---------------------------------------------
Set basic authentication . --> Set Bakerfield --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[bakersfield]] ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 692 ---------------------------------------------
Sets the host header . --> Override HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[breuer]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 693 ---------------------------------------------
Returns the buffer . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Buffer buffer ( final boolean [[fullRequest]] ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer buffer ( final boolean [[bronx]] ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 694 ---------------------------------------------
Send and receive response . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[R]] > [[R]] sendAndReceive ( final Function < HttpResponse , [[R]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < [[giuliani]] > [[giuliani]] sendAndReceive ( final Function < HttpResponse , [[giuliani]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 695 ---------------------------------------------
Set the query string . --> Set the accretionary for this request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[queryString]] ( final String queryString , final boolean decode ) { this . [[query]] = HttpUtil . parseQuery ( [[queryString]] , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest [[accretion]] ( final String queryString , final boolean decode ) { this . [[bibs]] = HttpUtil . parseQuery ( [[accretion]] , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 696 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 527 / 150 / 19 / 696:  70%|██████▉   | 696/1000 [1:36:13<42:01,  8.30s/it][Succeeded / Failed / Skipped / Total] 527 / 150 / 19 / 696:  70%|██████▉   | 697/1000 [1:36:17<41:51,  8.29s/it][Succeeded / Failed / Skipped / Total] 528 / 150 / 19 / 697:  70%|██████▉   | 697/1000 [1:36:17<41:51,  8.29s/it][Succeeded / Failed / Skipped / Total] 528 / 150 / 19 / 697:  70%|██████▉   | 698/1000 [1:36:18<41:40,  8.28s/it][Succeeded / Failed / Skipped / Total] 529 / 150 / 19 / 698:  70%|██████▉   | 698/1000 [1:36:18<41:40,  8.28s/it][Succeeded / Failed / Skipped / Total] 529 / 150 / 19 / 698:  70%|██████▉   | 699/1000 [1:36:20<41:29,  8.27s/it][Succeeded / Failed / Skipped / Total] 530 / 150 / 19 / 699:  70%|██████▉   | 699/1000 [1:36:20<41:29,  8.27s/it][Succeeded / Failed / Skipped / Total] 530 / 150 / 19 / 699:  70%|███████   | 700/1000 [1:36:31<41:21,  8.27s/it][Succeeded / Failed / Skipped / Total] 531 / 150 / 19 / 700:  70%|███████   | 700/1000 [1:36:31<41:21,  8.27s/it][Succeeded / Failed / Skipped / Total] 531 / 150 / 19 / 700:  70%|███████   | 701/1000 [1:36:32<41:10,  8.26s/it][Succeeded / Failed / Skipped / Total] 532 / 150 / 19 / 701:  70%|███████   | 701/1000 [1:36:32<41:10,  8.26s/it][Succeeded / Failed / Skipped / Total] 532 / 150 / 19 / 701:  70%|███████   | 702/1000 [1:36:41<41:02,  8.26s/it][Succeeded / Failed / Skipped / Total] 532 / 151 / 19 / 702:  70%|███████   | 702/1000 [1:36:41<41:02,  8.26s/it][Succeeded / Failed / Skipped / Total] 532 / 151 / 19 / 702:  70%|███████   | 703/1000 [1:36:46<40:52,  8.26s/it][Succeeded / Failed / Skipped / Total] 533 / 151 / 19 / 703:  70%|███████   | 703/1000 [1:36:46<40:52,  8.26s/it][Succeeded / Failed / Skipped / Total] 533 / 151 / 19 / 703:  70%|███████   | 704/1000 [1:36:54<40:44,  8.26s/it][Succeeded / Failed / Skipped / Total] 533 / 152 / 19 / 704:  70%|███████   | 704/1000 [1:36:54<40:44,  8.26s/it][Succeeded / Failed / Skipped / Total] 533 / 152 / 19 / 704:  70%|███████   | 705/1000 [1:36:58<40:34,  8.25s/it]Collects all action interceptors . --> Register blade spring --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[blade]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 697 ---------------------------------------------
Collects action filters . --> Build the hooker --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > filterValues = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( filterValues ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[hooker]] ( ) { final Collection < ? extends ActionFilter > filterValues = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( filterValues ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 698 ---------------------------------------------
Remove ranges between start and endpoints . --> Buffering handlers --> Socre: 1.0

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler firstHandler , final Label [[start]] , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[removeRange]] ( firstHandler . nextHandler , [[start]] , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = [[start]] . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[bff]] ( final Handler firstHandler , final Label [[ballroom]] , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[bff]] ( firstHandler . nextHandler , [[ballroom]] , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = [[ballroom]] . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 699 ---------------------------------------------
Get the length of the exception table . --> do choku --> Socre: 1.0

[[[[Adv]]]]: static int [[getExceptionTableLength]] ( final Handler [[firstHandler]] ) { int length = 0 ; Handler handler = [[firstHandler]] ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int [[dooku]] ( final Handler [[benzie]] ) { int length = 0 ; Handler handler = [[benzie]] ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 700 ---------------------------------------------
Collects all action runtime timestamps . --> Generate sort of runtimes --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[griffith]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 701 ---------------------------------------------
Sets a simple property . --> Bandidos method --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[bandidos]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 702 ---------------------------------------------
Collect the action results . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > [[resultsValues]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[resultsValues]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[shiver]] ( ) { final Collection < ActionResult > [[accretion]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[accretion]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 703 ---------------------------------------------
Returns a PrintWriter . --> BJornetWriter --> Socre: 1.0

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[bjorn]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 704 ---------------------------------------------
Gets the property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty [[beanProperty]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } else { try { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[sweaters]] > [[sweaters]] getProperty ( final Object bean , final String name ) { BeanProperty [[alameda]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[alameda]] ) ; return ( [[sweaters]] ) getIndexProperty ( [[alameda]] ) ; } else { try { resolveNestedProperties ( [[alameda]] ) ; return ( [[sweaters]] ) getIndexProperty ( [[alameda]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 705 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 534 / 152 / 19 / 705:  70%|███████   | 705/1000 [1:36:58<40:34,  8.25s/it][Succeeded / Failed / Skipped / Total] 534 / 152 / 19 / 705:  71%|███████   | 706/1000 [1:37:08<40:26,  8.26s/it][Succeeded / Failed / Skipped / Total] 535 / 152 / 19 / 706:  71%|███████   | 706/1000 [1:37:08<40:26,  8.26s/it][Succeeded / Failed / Skipped / Total] 535 / 152 / 19 / 706:  71%|███████   | 707/1000 [1:37:11<40:16,  8.25s/it][Succeeded / Failed / Skipped / Total] 536 / 152 / 19 / 707:  71%|███████   | 707/1000 [1:37:11<40:16,  8.25s/it][Succeeded / Failed / Skipped / Total] 536 / 152 / 19 / 707:  71%|███████   | 708/1000 [1:37:20<40:08,  8.25s/it][Succeeded / Failed / Skipped / Total] 537 / 152 / 19 / 708:  71%|███████   | 708/1000 [1:37:20<40:08,  8.25s/it][Succeeded / Failed / Skipped / Total] 537 / 152 / 19 / 708:  71%|███████   | 709/1000 [1:37:27<39:59,  8.25s/it][Succeeded / Failed / Skipped / Total] 538 / 152 / 19 / 709:  71%|███████   | 709/1000 [1:37:27<39:59,  8.25s/it][Succeeded / Failed / Skipped / Total] 538 / 152 / 19 / 709:  71%|███████   | 710/1000 [1:37:39<39:53,  8.25s/it][Succeeded / Failed / Skipped / Total] 539 / 152 / 19 / 710:  71%|███████   | 710/1000 [1:37:39<39:53,  8.25s/it][Succeeded / Failed / Skipped / Total] 539 / 152 / 19 / 710:  71%|███████   | 711/1000 [1:37:55<39:48,  8.26s/it][Succeeded / Failed / Skipped / Total] 540 / 152 / 19 / 711:  71%|███████   | 711/1000 [1:37:55<39:48,  8.26s/it][Succeeded / Failed / Skipped / Total] 540 / 152 / 19 / 711:  71%|███████   | 712/1000 [1:38:00<39:38,  8.26s/it][Succeeded / Failed / Skipped / Total] 541 / 152 / 19 / 712:  71%|███████   | 712/1000 [1:38:00<39:38,  8.26s/it][Succeeded / Failed / Skipped / Total] 541 / 152 / 19 / 712:  71%|███████▏  | 713/1000 [1:38:09<39:30,  8.26s/it][Succeeded / Failed / Skipped / Total] 542 / 152 / 19 / 713:  71%|███████▏  | 713/1000 [1:38:09<39:30,  8.26s/it][Succeeded / Failed / Skipped / Total] 542 / 152 / 19 / 713:  71%|███████▏  | 714/1000 [1:38:15<39:21,  8.26s/it][Succeeded / Failed / Skipped / Total] 543 / 152 / 19 / 714:  71%|███████▏  | 714/1000 [1:38:15<39:21,  8.26s/it][Succeeded / Failed / Skipped / Total] 543 / 152 / 19 / 714:  72%|███████▏  | 715/1000 [1:38:23<39:13,  8.26s/it]Extract reference name from property name . --> Extracts index from string --> Socre: 1.0

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String [[propertyName]] ) { int ndx = StringUtil . indexOfChars ( [[propertyName]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[propertyName]] ; } return [[propertyName]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[adviser]] ( final String [[bandidos]] ) { int ndx = StringUtil . indexOfChars ( [[bandidos]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[bandidos]] ; } return [[bandidos]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 706 ---------------------------------------------
Sets an object reference . --> Called by our peer --> Socre: 1.0

[[[[Adv]]]]: public void [[setObjectReference]] ( final String name , final Object [[object]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , [[object]] ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[arrive]] ( final String name , final Object [[piracy]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , [[piracy]] ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 707 ---------------------------------------------
Get object reference by name . --> Get ARum for a given number --> Socre: 1.0

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String [[name]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[name]] ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[arum]] ( final String [[vultures]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[vultures]] ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 708 ---------------------------------------------
Lookup object reference . --> Return the clasps of the specified rigger --> Socre: 1.0

[[[[Adv]]]]: public Object [[lookupObject]] ( final String [[ref]] ) { Object value = getObjectReference ( [[ref]] ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[ref]] ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[clasps]] ( final String [[rigger]] ) { Object value = getObjectReference ( [[rigger]] ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[rigger]] ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 709 ---------------------------------------------
Gets the entity descriptor . --> Retrieves the descending description of a meal --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[getTableDescriptor]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[tableRef]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor [[disintegrator]] ( final String [[brewery]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[brewery]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 710 ---------------------------------------------
Get table alias . --> Determines the presence of the estropido --> Socre: 1.0

[[[[Adv]]]]: public String [[getTableAlias]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( tableRef ) ; return [[t]] == null ? null : [[t]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[estúpido]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[aborigine]] = tableRefs . get ( tableRef ) ; return [[aborigine]] == null ? null : [[aborigine]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 711 ---------------------------------------------
Lookup table reference by name . --> Hijack the database --> Socre: 1.0

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String [[tableRef]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[tableRef]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[tableRef]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[hijackings]] ( final String [[dementors]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[dementors]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[dementors]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 712 ---------------------------------------------
Finds the table descriptor by column reference . --> Joins the EntityDescriptions with the given hint --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String [[columnRef]] ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[ded]] = entry . getValue ( ) . desc ; if ( [[ded]] . findByPropertyName ( [[columnRef]] ) != null ) { return [[ded]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[companion]] ( final String [[hint]] ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[communiqué]] = entry . getValue ( ) . desc ; if ( [[communiqué]] . findByPropertyName ( [[hint]] ) != null ) { return [[communiqué]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 713 ---------------------------------------------
Serialize the given value onto the JSON context . --> Custom serialization --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext [[jsonContext]] , final T value ) { if ( [[jsonContext]] . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext [[deporting]] , final T value ) { if ( [[deporting]] . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 714 ---------------------------------------------
Register a hint . --> Sets the status of the last epoch --> Socre: 1.0

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[biochemical]] ( final String [[estás]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[estás]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 715 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 543 / 153 / 19 / 715:  72%|███████▏  | 715/1000 [1:38:23<39:13,  8.26s/it][Succeeded / Failed / Skipped / Total] 543 / 153 / 19 / 715:  72%|███████▏  | 716/1000 [1:38:30<39:04,  8.26s/it][Succeeded / Failed / Skipped / Total] 544 / 153 / 19 / 716:  72%|███████▏  | 716/1000 [1:38:30<39:04,  8.26s/it][Succeeded / Failed / Skipped / Total] 544 / 153 / 19 / 716:  72%|███████▏  | 717/1000 [1:38:44<38:58,  8.26s/it][Succeeded / Failed / Skipped / Total] 545 / 153 / 19 / 717:  72%|███████▏  | 717/1000 [1:38:44<38:58,  8.26s/it][Succeeded / Failed / Skipped / Total] 545 / 153 / 19 / 717:  72%|███████▏  | 718/1000 [1:39:10<38:57,  8.29s/it][Succeeded / Failed / Skipped / Total] 546 / 153 / 19 / 718:  72%|███████▏  | 718/1000 [1:39:10<38:57,  8.29s/it][Succeeded / Failed / Skipped / Total] 546 / 153 / 19 / 718:  72%|███████▏  | 719/1000 [1:39:18<38:48,  8.29s/it][Succeeded / Failed / Skipped / Total] 547 / 153 / 19 / 719:  72%|███████▏  | 719/1000 [1:39:18<38:48,  8.29s/it][Succeeded / Failed / Skipped / Total] 547 / 153 / 19 / 719:  72%|███████▏  | 720/1000 [1:39:19<38:37,  8.28s/it]Register a table reference --> [[[FAILED]]]

[[[[Adv]]]]: public void registerTableReference ( final String tableReference , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void registerTableReference ( final String tableReference , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 716 ---------------------------------------------
Inject attributes . --> Copied from ServletRequest --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectAttributes]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String [[attrName]] = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[attrName]] ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( [[attrName]] ) ; target . writeValue ( name , attrValue , True ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void [[poorhouse]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String [[sundar]] = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[sundar]] ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( [[sundar]] ) ; target . writeValue ( name , attrValue , True ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 717 ---------------------------------------------
Convert column name to column name . --> zacarias --> Socre: 1.0

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = False ; for ( int i = 0 ; i < len ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = True ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = False ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[zacarias]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = False ; for ( int i = 0 ; i < len ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = True ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = False ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 718 ---------------------------------------------
Apply to column name --> Convert haryana for haryana --> Socre: 1.0

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String [[columnName]] ) { String propertyName = convertColumnNameToPropertyName ( [[columnName]] ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[ceo]] ( final String [[haryana]] ) { String propertyName = convertColumnNameToPropertyName ( [[haryana]] ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 719 ---------------------------------------------
Inject uploaded files . --> Implements the HttpServletRequest --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > [[paramNames]] = multipartRequest . getFileParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { final String paramName = [[paramNames]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[name]] = in . matchedName ( paramName ) ; if ( [[name]] != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload [[paramValue]] = paramValues [ j ] ; if ( ( ! [[paramValue]] . isValid ( ) ) || ( ! [[paramValue]] . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( [[name]] , value , True ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[aaaahhh]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > [[cleanser]] = multipartRequest . getFileParameterNames ( ) ; while ( [[cleanser]] . hasMoreElements ( ) ) { final String paramName = [[cleanser]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[denominations]] = in . matchedName ( paramName ) ; if ( [[denominations]] != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload [[graziella]] = paramValues [ j ] ; if ( ( ! [[graziella]] . isValid ( ) ) || ( ! [[graziella]] . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( [[denominations]] , value , True ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 720 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 548 / 153 / 19 / 720:  72%|███████▏  | 720/1000 [1:39:19<38:37,  8.28s/it][Succeeded / Failed / Skipped / Total] 548 / 153 / 19 / 720:  72%|███████▏  | 721/1000 [1:39:31<38:30,  8.28s/it][Succeeded / Failed / Skipped / Total] 548 / 154 / 19 / 721:  72%|███████▏  | 721/1000 [1:39:31<38:30,  8.28s/it][Succeeded / Failed / Skipped / Total] 548 / 154 / 19 / 721:  72%|███████▏  | 722/1000 [1:39:46<38:25,  8.29s/it][Succeeded / Failed / Skipped / Total] 548 / 155 / 19 / 722:  72%|███████▏  | 722/1000 [1:39:46<38:25,  8.29s/it][Succeeded / Failed / Skipped / Total] 548 / 155 / 19 / 722:  72%|███████▏  | 723/1000 [1:40:00<38:19,  8.30s/it][Succeeded / Failed / Skipped / Total] 549 / 155 / 19 / 723:  72%|███████▏  | 723/1000 [1:40:00<38:19,  8.30s/it][Succeeded / Failed / Skipped / Total] 549 / 155 / 19 / 723:  72%|███████▏  | 724/1000 [1:40:01<38:07,  8.29s/it][Succeeded / Failed / Skipped / Total] 550 / 155 / 19 / 724:  72%|███████▏  | 724/1000 [1:40:01<38:07,  8.29s/it][Succeeded / Failed / Skipped / Total] 550 / 155 / 19 / 724:  72%|███████▎  | 725/1000 [1:40:21<38:03,  8.30s/it][Succeeded / Failed / Skipped / Total] 551 / 155 / 19 / 725:  72%|███████▎  | 725/1000 [1:40:21<38:03,  8.30s/it][Succeeded / Failed / Skipped / Total] 551 / 155 / 19 / 725:  73%|███████▎  | 726/1000 [1:40:30<37:56,  8.31s/it][Succeeded / Failed / Skipped / Total] 552 / 155 / 19 / 726:  73%|███████▎  | 726/1000 [1:40:30<37:56,  8.31s/it][Succeeded / Failed / Skipped / Total] 552 / 155 / 19 / 726:  73%|███████▎  | 727/1000 [1:40:46<37:50,  8.32s/it]Convert the given property name to column name . --> translates tanname --> Socre: 1.0

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String [[propertyName]] ) { StringBuilder tableName = new StringBuilder ( [[propertyName]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[convertedTableName]] = Format . fromCamelCase ( [[propertyName]] , separatorChar ) ; tableName . append ( [[convertedTableName]] ) ; } else { tableName . append ( [[propertyName]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[kann]] ( final String [[toddle]] ) { StringBuilder tableName = new StringBuilder ( [[toddle]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[apron]] = Format . fromCamelCase ( [[toddle]] , separatorChar ) ; tableName . append ( [[apron]] ) ; } else { tableName . append ( [[toddle]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 721 ---------------------------------------------
Prepare get value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[beacons]] > [[beacons]] prepareGetValue ( final T t , final Class < [[beacons]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[beacons]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 722 ---------------------------------------------
Gets all wrappers . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > [[set]] = new HashSet <> ( wrappers . size ( ) ) ; [[set]] . addAll ( wrappers . values ( ) ) ; return [[set]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[carpetbagger]] ( ) { final Set < T > [[aquila]] = new HashSet <> ( wrappers . size ( ) ) ; [[aquila]] . addAll ( wrappers . values ( ) ) ; return [[aquila]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 723 ---------------------------------------------
Stores the value in the prepared statement . --> Store a prepared statement --> Socre: 1.0

[[[[Adv]]]]: public void storeValue ( final PreparedStatement [[st]] , final int index , final Object value , final int [[dbSqlType]] ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( [[st]] , index , t , [[dbSqlType]] ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void storeValue ( final PreparedStatement [[también]] , final int index , final Object value , final int [[duelist]] ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( [[también]] , index , t , [[duelist]] ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 724 ---------------------------------------------
Creates a new instance of the specified class . --> Method that can be used to render a bunch of sounds --> Socre: 1.0

[[[[Adv]]]]: protected < R [[extends]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R [[soufflés]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 725 ---------------------------------------------
Resolves a wrapper . --> helper method to load a class --> Socre: 1.0

[[[[Adv]]]]: public T [[resolve]] ( final Class < ? extends T > wrapperClass ) { String [[wrapperClassName]] = wrapperClass . getName ( ) ; T [[wrapper]] = lookup ( [[wrapperClassName]] ) ; if ( [[wrapper]] == null ) { [[wrapper]] = createWrapper ( wrapperClass ) ; initializeWrapper ( [[wrapper]] ) ; wrappers . put ( [[wrapperClassName]] , [[wrapper]] ) ; } return [[wrapper]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T [[ahmet]] ( final Class < ? extends T > wrapperClass ) { String [[cauliflower]] = wrapperClass . getName ( ) ; T [[liners]] = lookup ( [[cauliflower]] ) ; if ( [[liners]] == null ) { [[liners]] = createWrapper ( wrapperClass ) ; initializeWrapper ( [[liners]] ) ; wrappers . put ( [[cauliflower]] , [[liners]] ) ; } return [[liners]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 726 ---------------------------------------------
Convert path separators to Unix system . --> Convenience method that takes a comma - separated list of strings --> Socre: 1.0

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[awaited]] ( final String [[festive]] ) { if ( [[festive]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[festive]] ) ; } else { return separatorsToUnix ( [[festive]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 727 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 553 / 155 / 19 / 727:  73%|███████▎  | 727/1000 [1:40:46<37:50,  8.32s/it][Succeeded / Failed / Skipped / Total] 553 / 155 / 19 / 727:  73%|███████▎  | 728/1000 [1:40:47<37:39,  8.31s/it][Succeeded / Failed / Skipped / Total] 553 / 155 / 20 / 728:  73%|███████▎  | 728/1000 [1:40:47<37:39,  8.31s/it][Succeeded / Failed / Skipped / Total] 553 / 155 / 20 / 728:  73%|███████▎  | 729/1000 [1:40:51<37:29,  8.30s/it][Succeeded / Failed / Skipped / Total] 554 / 155 / 20 / 729:  73%|███████▎  | 729/1000 [1:40:51<37:29,  8.30s/it][Succeeded / Failed / Skipped / Total] 554 / 155 / 20 / 729:  73%|███████▎  | 730/1000 [1:41:01<37:21,  8.30s/it][Succeeded / Failed / Skipped / Total] 554 / 156 / 20 / 730:  73%|███████▎  | 730/1000 [1:41:01<37:21,  8.30s/it][Succeeded / Failed / Skipped / Total] 554 / 156 / 20 / 730:  73%|███████▎  | 731/1000 [1:41:04<37:11,  8.30s/it][Succeeded / Failed / Skipped / Total] 555 / 156 / 20 / 731:  73%|███████▎  | 731/1000 [1:41:04<37:11,  8.30s/it][Succeeded / Failed / Skipped / Total] 555 / 156 / 20 / 731:  73%|███████▎  | 732/1000 [1:41:06<37:01,  8.29s/it][Succeeded / Failed / Skipped / Total] 556 / 156 / 20 / 732:  73%|███████▎  | 732/1000 [1:41:06<37:01,  8.29s/it][Succeeded / Failed / Skipped / Total] 556 / 156 / 20 / 732:  73%|███████▎  | 733/1000 [1:41:18<36:54,  8.29s/it]Inject request parameters into target targets . --> Implements polygluth algorithm --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest servletRequest , final Targets [[targets]] ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } [[targets]] . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int [[j]] = 0 ; [[j]] < paramValues . length ; [[j]] ++ ) { final String p = paramValues [ [[j]] ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ [[j]] ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , True ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[duluth]] ( final HttpServletRequest servletRequest , final Targets [[polyglot]] ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } [[polyglot]] . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int [[biochemical]] = 0 ; [[biochemical]] < paramValues . length ; [[biochemical]] ++ ) { final String p = paramValues [ [[biochemical]] ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ [[biochemical]] ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , True ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 728 ---------------------------------------------
Register a component --> [[[SKIPPED]]]

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > madvocComponent ) { Objects . requireNonNull ( madvocComponent ) ; madvocComponents . add ( ClassConsumer . of ( madvocComponent ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 729 ---------------------------------------------
Gets the path . --> returns null if not found --> Socre: 1.0

[[[[Adv]]]]: private static String [[doGetPath]] ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int [[endIndex]] = index + separatorAdd ; if ( prefix >= filename . length ( ) || index < 0 || prefix >= [[endIndex]] ) { return StringPool . EMPTY ; } return filename . substring ( prefix , [[endIndex]] ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[bemused]] ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int [[landless]] = index + separatorAdd ; if ( prefix >= filename . length ( ) || index < 0 || prefix >= [[landless]] ) { return StringPool . EMPTY ; } return filename . substring ( prefix , [[landless]] ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 730 ---------------------------------------------
Define action config . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A [[ardo]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 731 ---------------------------------------------
Starts the recorder . --> Must be called once --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[disintegrator]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 732 ---------------------------------------------
Relative path . --> Returns the bangin --> Socre: 1.0

[[[[Adv]]]]: public static String [[relativePath]] ( final String targetPath , final String [[basePath]] ) { return new File ( [[basePath]] ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[bangin]] ( final String targetPath , final String [[orsini]] ) { return new File ( [[orsini]] ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 733 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 557 / 156 / 20 / 733:  73%|███████▎  | 733/1000 [1:41:18<36:54,  8.29s/it][Succeeded / Failed / Skipped / Total] 557 / 156 / 20 / 733:  73%|███████▎  | 734/1000 [1:41:25<36:45,  8.29s/it][Succeeded / Failed / Skipped / Total] 558 / 156 / 20 / 734:  73%|███████▎  | 734/1000 [1:41:25<36:45,  8.29s/it][Succeeded / Failed / Skipped / Total] 558 / 156 / 20 / 734:  74%|███████▎  | 735/1000 [1:41:30<36:35,  8.29s/it][Succeeded / Failed / Skipped / Total] 559 / 156 / 20 / 735:  74%|███████▎  | 735/1000 [1:41:30<36:35,  8.29s/it][Succeeded / Failed / Skipped / Total] 559 / 156 / 20 / 735:  74%|███████▎  | 736/1000 [1:41:31<36:25,  8.28s/it][Succeeded / Failed / Skipped / Total] 560 / 156 / 20 / 736:  74%|███████▎  | 736/1000 [1:41:31<36:25,  8.28s/it][Succeeded / Failed / Skipped / Total] 560 / 156 / 20 / 736:  74%|███████▎  | 737/1000 [1:41:42<36:17,  8.28s/it][Succeeded / Failed / Skipped / Total] 561 / 156 / 20 / 737:  74%|███████▎  | 737/1000 [1:41:42<36:17,  8.28s/it][Succeeded / Failed / Skipped / Total] 561 / 156 / 20 / 737:  74%|███████▍  | 738/1000 [1:41:49<36:08,  8.28s/it][Succeeded / Failed / Skipped / Total] 562 / 156 / 20 / 738:  74%|███████▍  | 738/1000 [1:41:49<36:08,  8.28s/it][Succeeded / Failed / Skipped / Total] 562 / 156 / 20 / 738:  74%|███████▍  | 739/1000 [1:42:12<36:06,  8.30s/it]Register madvoc components . --> Register WV container --> Socre: 1.0

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[ak]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 734 ---------------------------------------------
Configures defaults . --> Called by the plugin --> Socre: 1.0

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager [[actionConfigManager]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[actionConfigManager]] . registerAnnotation ( Action . class ) ; [[actionConfigManager]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[caryl]] ( ) { final ActionConfigManager [[big]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[big]] . registerAnnotation ( Action . class ) ; [[big]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 735 ---------------------------------------------
Includes the specified jars . --> include the rules --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner includeJars ( final String ... [[includedJars]] ) { for ( final String includedJar : [[includedJars]] ) { rulesJars . include ( includedJar ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner includeJars ( final String ... [[melanie]] ) { for ( final String includedJar : [[melanie]] ) { rulesJars . include ( includedJar ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 736 ---------------------------------------------
Exclude JAR files . --> Exclude classes from the class scanner --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[excludeJars]] ( final String ... excludedJars ) { for ( final String [[excludedJar]] : excludedJars ) { rulesJars . exclude ( [[excludedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner [[doesn]] ( final String ... excludedJars ) { for ( final String [[antitoxin]] : excludedJars ) { rulesJars . exclude ( [[antitoxin]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 737 ---------------------------------------------
Exclude entries . --> Exclude entries from the class scanner --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... excludedEntries ) { for ( final String [[excludedEntry]] : excludedEntries ) { rulesEntries . exclude ( [[excludedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... excludedEntries ) { for ( final String [[alessa]] : excludedEntries ) { rulesEntries . exclude ( [[alessa]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 738 ---------------------------------------------
Includes specified entries . --> Include all rules in leagues --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... [[includedEntries]] ) { for ( final String [[includedEntry]] : [[includedEntries]] ) { rulesEntries . include ( [[includedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... [[academy]] ) { for ( final String [[northampton]] : [[academy]] ) { rulesEntries . include ( [[northampton]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 739 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 563 / 156 / 20 / 739:  74%|███████▍  | 739/1000 [1:42:12<36:06,  8.30s/it][Succeeded / Failed / Skipped / Total] 563 / 156 / 20 / 739:  74%|███████▍  | 740/1000 [1:42:15<35:55,  8.29s/it][Succeeded / Failed / Skipped / Total] 564 / 156 / 20 / 740:  74%|███████▍  | 740/1000 [1:42:15<35:55,  8.29s/it][Succeeded / Failed / Skipped / Total] 564 / 156 / 20 / 740:  74%|███████▍  | 741/1000 [1:42:27<35:48,  8.30s/it][Succeeded / Failed / Skipped / Total] 565 / 156 / 20 / 741:  74%|███████▍  | 741/1000 [1:42:27<35:48,  8.30s/it][Succeeded / Failed / Skipped / Total] 565 / 156 / 20 / 741:  74%|███████▍  | 742/1000 [1:42:28<35:37,  8.29s/it][Succeeded / Failed / Skipped / Total] 565 / 156 / 21 / 742:  74%|███████▍  | 742/1000 [1:42:28<35:37,  8.29s/it][Succeeded / Failed / Skipped / Total] 565 / 156 / 21 / 742:  74%|███████▍  | 743/1000 [1:42:38<35:30,  8.29s/it][Succeeded / Failed / Skipped / Total] 566 / 156 / 21 / 743:  74%|███████▍  | 743/1000 [1:42:38<35:30,  8.29s/it][Succeeded / Failed / Skipped / Total] 566 / 156 / 21 / 743:  74%|███████▍  | 744/1000 [1:42:45<35:21,  8.29s/it][Succeeded / Failed / Skipped / Total] 566 / 157 / 21 / 744:  74%|███████▍  | 744/1000 [1:42:45<35:21,  8.29s/it][Succeeded / Failed / Skipped / Total] 566 / 157 / 21 / 744:  74%|███████▍  | 745/1000 [1:43:13<35:20,  8.31s/it][Succeeded / Failed / Skipped / Total] 567 / 157 / 21 / 745:  74%|███████▍  | 745/1000 [1:43:13<35:20,  8.31s/it][Succeeded / Failed / Skipped / Total] 567 / 157 / 21 / 745:  75%|███████▍  | 746/1000 [1:43:27<35:13,  8.32s/it][Succeeded / Failed / Skipped / Total] 567 / 158 / 21 / 746:  75%|███████▍  | 746/1000 [1:43:27<35:13,  8.32s/it][Succeeded / Failed / Skipped / Total] 567 / 158 / 21 / 746:  75%|███████▍  | 747/1000 [1:43:27<35:02,  8.31s/it]Splits the given filename into parts . --> returns xochitl --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[split]] ( final String [[filename]] ) { String prefix = getPrefix ( [[filename]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[filename]] ) ; int [[lastExtensionIndex]] = indexOfExtension ( [[filename]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( [[lastExtensionIndex]] == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) , [[lastExtensionIndex]] ) ; extension = [[filename]] . substring ( [[lastExtensionIndex]] + 1 ) ; } } else { path = [[filename]] . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( [[lastExtensionIndex]] == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) , [[lastExtensionIndex]] ) ; extension = [[filename]] . substring ( [[lastExtensionIndex]] + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] [[xochitl]] ( final String [[hiss]] ) { String prefix = getPrefix ( [[hiss]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[hiss]] ) ; int [[leeanne]] = indexOfExtension ( [[hiss]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( [[leeanne]] == - 1 ) { baseName = [[hiss]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[hiss]] . substring ( prefix . length ( ) , [[leeanne]] ) ; extension = [[hiss]] . substring ( [[leeanne]] + 1 ) ; } } else { path = [[hiss]] . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( [[leeanne]] == - 1 ) { baseName = [[hiss]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[hiss]] . substring ( prefix . length ( ) + path . length ( ) , [[leeanne]] ) ; extension = [[hiss]] . substring ( [[leeanne]] + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 740 ---------------------------------------------
Compute the signature of a class . --> WARNING! --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class [[type]] ) { final String name = ' ' + [[type]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[caution]] ( final Class [[agnew]] ) { final String name = ' ' + [[agnew]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 741 ---------------------------------------------
Start the scan . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[nº]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 742 ---------------------------------------------
overriding this method --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected JtxTransaction createNewTransaction ( final JtxTransactionMode tm , final Object scope , final boolean active ) { return new DbJtxTransaction ( this , tm , scope , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 743 ---------------------------------------------
Scan the specified paths . --> Tap the class scanner --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... paths ) { for ( final String [[path]] : paths ) { filesToScan . add ( new File ( [[path]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[tapeworm]] ( final String ... paths ) { for ( final String [[deter]] : paths ) { filesToScan . add ( new File ( [[deter]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 744 ---------------------------------------------
Gets the scope of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[deflected]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 745 ---------------------------------------------
Creates a new madvoc scope with the specified type . --> Lennie --> Socre: 1.0

[[[[Adv]]]]: public void [[forScope]] ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > [[madvocScopeConsumer]] ) { final MadvocScope scope = getOrInitScope ( scopeType ) ; [[madvocScopeConsumer]] . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void [[lennie]] ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > [[alessandra]] ) { final MadvocScope scope = getOrInitScope ( scopeType ) ; [[alessandra]] . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 746 ---------------------------------------------
Gets the scope of a madvoc scope . --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope [[getOrInitScope]] ( final Class < ? extends MadvocScope > [[madvocScopeType]] ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( [[madvocScopeType]] ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope [[sambuca]] ( final Class < ? extends MadvocScope > [[advocate]] ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( [[advocate]] ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 747 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 568 / 158 / 21 / 747:  75%|███████▍  | 747/1000 [1:43:27<35:02,  8.31s/it][Succeeded / Failed / Skipped / Total] 568 / 158 / 21 / 747:  75%|███████▍  | 748/1000 [1:43:32<34:53,  8.31s/it][Succeeded / Failed / Skipped / Total] 569 / 158 / 21 / 748:  75%|███████▍  | 748/1000 [1:43:32<34:53,  8.31s/it][Succeeded / Failed / Skipped / Total] 569 / 158 / 21 / 748:  75%|███████▍  | 749/1000 [1:43:42<34:45,  8.31s/it][Succeeded / Failed / Skipped / Total] 570 / 158 / 21 / 749:  75%|███████▍  | 749/1000 [1:43:42<34:45,  8.31s/it][Succeeded / Failed / Skipped / Total] 570 / 158 / 21 / 749:  75%|███████▌  | 750/1000 [1:43:47<34:35,  8.30s/it]Decode a character array to bytes . --> decode white space --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] decode ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] [[dest]] = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; [[dest]] [ d ++ ] = ( byte ) ( i >> 16 ) ; [[dest]] [ d ++ ] = ( byte ) ( i >> 8 ) ; [[dest]] [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { [[dest]] [ d ++ ] = ( byte ) ( i >> r ) ; } } return [[dest]] ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] decode ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] [[wheaties]] = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; [[wheaties]] [ d ++ ] = ( byte ) ( i >> 16 ) ; [[wheaties]] [ d ++ ] = ( byte ) ( i >> 8 ) ; [[wheaties]] [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { [[wheaties]] [ d ++ ] = ( byte ) ( i >> r ) ; } } return [[wheaties]] ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 748 ---------------------------------------------
Scans classpath for classes . --> This method is used to find a junche --> Socre: 1.0

[[[[Adv]]]]: protected void [[scanClassPath]] ( final File [[root]] ) { String rootPath = [[root]] . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( False ) . recursive ( True ) . searchPath ( rootPath ) ; File [[file]] ; while ( ( [[file]] = ff . nextFile ( ) ) != null ) { final String [[filePath]] = [[file]] . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( [[filePath]] , CLASS_FILE_EXT ) ) { scanClassFile ( [[filePath]] , rootPath , [[file]] , True ) ; } else if ( includeResources ) { scanClassFile ( [[filePath]] , rootPath , [[file]] , False ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void [[dunwich]] ( final File [[bathhouse]] ) { String rootPath = [[bathhouse]] . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( False ) . recursive ( True ) . searchPath ( rootPath ) ; File [[drums]] ; while ( ( [[drums]] = ff . nextFile ( ) ) != null ) { final String [[juncture]] = [[drums]] . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( [[juncture]] , CLASS_FILE_EXT ) ) { scanClassFile ( [[juncture]] , rootPath , [[drums]] , True ) ; } else if ( includeResources ) { scanClassFile ( [[juncture]] , rootPath , [[drums]] , False ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 749 ---------------------------------------------
Checks the size of a token . --> Make sure the size of the mclane --> Socre: 1.0

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[tokenSet]] ) { if ( [[tokenSet]] . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = [[tokenSet]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; tokenToRemove = token ; } } if ( ( tokenToRemove != null ) && ( [[tokenSet]] . size ( ) >= maxTokensPerSession ) ) { [[tokenSet]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[mclane]] ) { if ( [[mclane]] . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = [[mclane]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; tokenToRemove = token ; } } if ( ( tokenToRemove != null ) && ( [[mclane]] . size ( ) >= maxTokensPerSession ) ) { [[mclane]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 750 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 571 / 158 / 21 / 750:  75%|███████▌  | 750/1000 [1:43:47<34:35,  8.30s/it][Succeeded / Failed / Skipped / Total] 571 / 158 / 21 / 750:  75%|███████▌  | 751/1000 [1:44:07<34:31,  8.32s/it][Succeeded / Failed / Skipped / Total] 572 / 158 / 21 / 751:  75%|███████▌  | 751/1000 [1:44:07<34:31,  8.32s/it][Succeeded / Failed / Skipped / Total] 572 / 158 / 21 / 751:  75%|███████▌  | 752/1000 [1:44:11<34:21,  8.31s/it][Succeeded / Failed / Skipped / Total] 573 / 158 / 21 / 752:  75%|███████▌  | 752/1000 [1:44:11<34:21,  8.31s/it][Succeeded / Failed / Skipped / Total] 573 / 158 / 21 / 752:  75%|███████▌  | 753/1000 [1:44:20<34:13,  8.31s/it][Succeeded / Failed / Skipped / Total] 574 / 158 / 21 / 753:  75%|███████▌  | 753/1000 [1:44:20<34:13,  8.31s/it][Succeeded / Failed / Skipped / Total] 574 / 158 / 21 / 753:  75%|███████▌  | 754/1000 [1:44:25<34:04,  8.31s/it][Succeeded / Failed / Skipped / Total] 575 / 158 / 21 / 754:  75%|███████▌  | 754/1000 [1:44:25<34:04,  8.31s/it][Succeeded / Failed / Skipped / Total] 575 / 158 / 21 / 754:  76%|███████▌  | 755/1000 [1:44:49<34:01,  8.33s/it]Scan jar file . --> retrieves the war --> Socre: 1.0

[[[[Adv]]]]: protected void [[scanJarFile]] ( final File [[file]] ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( [[file]] ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + [[file]] . getName ( ) , ioex ) ; } return ; } final Enumeration [[entries]] = zipFile . entries ( ) ; while ( [[entries]] . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) [[entries]] . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , True ) ; final ClassPathEntry [[classPathEntry]] = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( [[classPathEntry]] ) ; } finally { [[classPathEntry]] . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , False ) ; final ClassPathEntry [[classPathEntry]] = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( [[classPathEntry]] ) ; } finally { [[classPathEntry]] . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void [[ferocity]] ( final File [[dubuque]] ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( [[dubuque]] ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + [[dubuque]] . getName ( ) , ioex ) ; } return ; } final Enumeration [[thorin]] = zipFile . entries ( ) ; while ( [[thorin]] . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) [[thorin]] . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , True ) ; final ClassPathEntry [[anthros]] = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( [[anthros]] ) ; } finally { [[anthros]] . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , False ) ; final ClassPathEntry [[anthros]] = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( [[anthros]] ) ; } finally { [[anthros]] . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 751 ---------------------------------------------
Creates a bean copy . --> Blocking BeanCopy --> Socre: 1.0

[[[[Adv]]]]: public static BeanCopy [[from]] ( final Object [[source]] ) { BeanCopy beanCopy = new BeanCopy ( [[source]] ) ; beanCopy . isSourceMap = [[source]] instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy [[bluish]] ( final Object [[connotations]] ) { BeanCopy beanCopy = new BeanCopy ( [[connotations]] ) ; beanCopy . isSourceMap = [[connotations]] instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 752 ---------------------------------------------
Copy the bean . --> applies Gravitation annotations --> Socre: 1.0

[[[[Adv]]]]: public void [[copy]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[[True]]" == "[[True]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void [[spills]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[["Gravitation" == "Gravitation"]]" == "[["Gravitation" == "Gravitation"]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 753 ---------------------------------------------
Checks if a given value matches a CSRF token . --> Determines if an element is present in the session --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[checkCsrfToken]] ( final HttpSession session , final String [[tokenValue]] ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( [[tokenValue]] == null ) ) { return True ; } if ( ( tokenSet == null ) || ( [[tokenValue]] == null ) ) { return False ; } boolean found = False ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token [[t]] = it . next ( ) ; if ( [[t]] . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( [[t]] . getValue ( ) . equals ( [[tokenValue]] ) ) { it . remove ( ) ; found = True ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[actin]] ( final HttpSession session , final String [[swoop]] ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( [[swoop]] == null ) ) { return True ; } if ( ( tokenSet == null ) || ( [[swoop]] == null ) ) { return False ; } boolean found = False ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token [[pheasants]] = it . next ( ) ; if ( [[pheasants]] . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( [[pheasants]] . getValue ( ) . equals ( [[swoop]] ) ) { it . remove ( ) ; found = True ; } } return found ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 754 ---------------------------------------------
Initializes the entity reference . --> Initializes the entity reference --> Socre: 1.0

[[[[Adv]]]]: @ Override public void init ( final TemplateData [[templateData]] ) { super . init ( [[templateData]] ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = [[templateData]] . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } [[templateData]] . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void init ( final TemplateData [[bonin]] ) { super . init ( [[bonin]] ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = [[bonin]] . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } [[bonin]] . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 755 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 576 / 158 / 21 / 755:  76%|███████▌  | 755/1000 [1:44:49<34:01,  8.33s/it][Succeeded / Failed / Skipped / Total] 576 / 158 / 21 / 755:  76%|███████▌  | 756/1000 [1:44:50<33:50,  8.32s/it][Succeeded / Failed / Skipped / Total] 576 / 159 / 21 / 756:  76%|███████▌  | 756/1000 [1:44:50<33:50,  8.32s/it][Succeeded / Failed / Skipped / Total] 576 / 159 / 21 / 756:  76%|███████▌  | 757/1000 [1:44:51<33:39,  8.31s/it][Succeeded / Failed / Skipped / Total] 577 / 159 / 21 / 757:  76%|███████▌  | 757/1000 [1:44:51<33:39,  8.31s/it][Succeeded / Failed / Skipped / Total] 577 / 159 / 21 / 757:  76%|███████▌  | 758/1000 [1:45:02<33:32,  8.32s/it][Succeeded / Failed / Skipped / Total] 578 / 159 / 21 / 758:  76%|███████▌  | 758/1000 [1:45:02<33:32,  8.32s/it][Succeeded / Failed / Skipped / Total] 578 / 159 / 21 / 758:  76%|███████▌  | 759/1000 [1:45:14<33:24,  8.32s/it][Succeeded / Failed / Skipped / Total] 579 / 159 / 21 / 759:  76%|███████▌  | 759/1000 [1:45:14<33:24,  8.32s/it][Succeeded / Failed / Skipped / Total] 579 / 159 / 21 / 759:  76%|███████▌  | 760/1000 [1:45:20<33:16,  8.32s/it]Visit a property . --> Setter for koyamajas --> Socre: 1.0

[[[[Adv]]]]: @ Override protected boolean [[visitProperty]] ( String name , final Object [[value]] ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , [[value]] ) ; return True ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean [[koyama]] ( String name , final Object [[gallantry]] ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , [[gallantry]] ) ; return True ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 756 ---------------------------------------------
Resolves a scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] Scope > S resolveScope ( final Class < S > scopeType ) { S [[scope]] = ( S ) scopes . get ( scopeType ) ; if ( [[scope]] == null ) { try { [[scope]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[scope]] ) ; scopes . put ( scopeType , [[scope]] ) ; } return [[scope]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[trés]] Scope > S resolveScope ( final Class < S > scopeType ) { S [[pressing]] = ( S ) scopes . get ( scopeType ) ; if ( [[pressing]] == null ) { try { [[pressing]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[pressing]] ) ; scopes . put ( scopeType , [[pressing]] ) ; } return [[pressing]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 757 ---------------------------------------------
Creates a CSRF token . --> Converts a javascript file to a string --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[prepareCsrfToken]] ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String [[value]] ; boolean [[unique]] ; do { [[value]] = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; [[unique]] = tokenSet . add ( new Token ( [[value]] , timeToLive ) ) ; } while ( ! [[unique]] ) ; return [[value]] ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[corazón]] ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String [[baryshnikov]] ; boolean [[confess]] ; do { [[baryshnikov]] = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; [[confess]] = tokenSet . add ( new Token ( [[baryshnikov]] , timeToLive ) ) ; } while ( ! [[confess]] ) ; return [[baryshnikov]] ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 758 ---------------------------------------------
Remove bean . --> AntiMAScule --> Socre: 1.0

[[[[Adv]]]]: public void [[removeBean]] ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[antitoxin]] ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 759 ---------------------------------------------
Register a bean . --> Register a BeanDefinition --> Socre: 1.0

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition [[beanDefinition]] ) { beans . put ( name , [[beanDefinition]] ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = [[beanDefinition]] . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] [[interfaces]] = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : [[interfaces]] ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition [[blemish]] ) { beans . put ( name , [[blemish]] ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = [[blemish]] . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] [[cashiers]] = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : [[cashiers]] ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 760 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 580 / 159 / 21 / 760:  76%|███████▌  | 760/1000 [1:45:20<33:16,  8.32s/it][Succeeded / Failed / Skipped / Total] 580 / 159 / 21 / 760:  76%|███████▌  | 761/1000 [1:45:30<33:08,  8.32s/it][Succeeded / Failed / Skipped / Total] 581 / 159 / 21 / 761:  76%|███████▌  | 761/1000 [1:45:30<33:08,  8.32s/it][Succeeded / Failed / Skipped / Total] 581 / 159 / 21 / 761:  76%|███████▌  | 762/1000 [1:46:07<33:08,  8.36s/it][Succeeded / Failed / Skipped / Total] 582 / 159 / 21 / 762:  76%|███████▌  | 762/1000 [1:46:07<33:08,  8.36s/it][Succeeded / Failed / Skipped / Total] 582 / 159 / 21 / 762:  76%|███████▋  | 763/1000 [1:46:37<33:07,  8.38s/it][Succeeded / Failed / Skipped / Total] 582 / 160 / 21 / 763:  76%|███████▋  | 763/1000 [1:46:37<33:07,  8.38s/it][Succeeded / Failed / Skipped / Total] 582 / 160 / 21 / 763:  76%|███████▋  | 764/1000 [1:47:13<33:07,  8.42s/it]Registers a new ctor injection point . --> Register a new PetiteCtorInjectionPoint --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + [[beanDefinition]] . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , True ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + [[beanDefinition]] . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; [[beanDefinition]] . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition [[tracksuits]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[tracksuits]] . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + [[tracksuits]] . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , True ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + [[tracksuits]] . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; [[tracksuits]] . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 761 ---------------------------------------------
Register a proite bean . --> generate an imai --> Socre: 1.0

[[[[Adv]]]]: public < T > BeanDefinition < T > [[registerPetiteBean]] ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean [[define]] , final Consumer < T > [[consumer]] ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > [[imai]] ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean [[vivat]] , final Consumer < T > [[máxima]] ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 762 ---------------------------------------------
Registers a set injection point for a specified bean . --> Register a SetInjectionPoint --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String [[beanName]] , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "[[True]]" == "[[True]]" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint [[sip]] = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( [[sip]] ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String [[haulin]] , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[haulin]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "[["Verbiage" == "Verbiage"]]" == "[["Verbiage" == "Verbiage"]]" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint [[iselin]] = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( [[iselin]] ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 763 ---------------------------------------------
Return the names of the bean . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] resolveBeanNamesForType ( final Class type ) { String [ ] [[beanNames]] = beanCollections . get ( type ) ; if ( [[beanNames]] != null ) { return [[beanNames]] ; } ArrayList < String > [[list]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , type ) ) { String beanName = entry . getKey ( ) ; [[list]] . add ( beanName ) ; } } if ( [[list]] . isEmpty ( ) ) { [[beanNames]] = StringPool . EMPTY_ARRAY ; } else { [[beanNames]] = [[list]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , [[beanNames]] ) ; return [[beanNames]] ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] resolveBeanNamesForType ( final Class type ) { String [ ] [[fishing]] = beanCollections . get ( type ) ; if ( [[fishing]] != null ) { return [[fishing]] ; } ArrayList < String > [[spangled]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , type ) ) { String beanName = entry . getKey ( ) ; [[spangled]] . add ( beanName ) ; } } if ( [[spangled]] . isEmpty ( ) ) { [[fishing]] = StringPool . EMPTY_ARRAY ; } else { [[fishing]] = [[spangled]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , [[fishing]] ) ; return [[fishing]] ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 764 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 583 / 160 / 21 / 764:  76%|███████▋  | 764/1000 [1:47:13<33:07,  8.42s/it][Succeeded / Failed / Skipped / Total] 583 / 160 / 21 / 764:  76%|███████▋  | 765/1000 [1:47:28<33:00,  8.43s/it][Succeeded / Failed / Skipped / Total] 584 / 160 / 21 / 765:  76%|███████▋  | 765/1000 [1:47:28<33:00,  8.43s/it][Succeeded / Failed / Skipped / Total] 584 / 160 / 21 / 765:  77%|███████▋  | 766/1000 [1:47:49<32:56,  8.45s/it][Succeeded / Failed / Skipped / Total] 585 / 160 / 21 / 766:  77%|███████▋  | 766/1000 [1:47:49<32:56,  8.45s/it][Succeeded / Failed / Skipped / Total] 585 / 160 / 21 / 766:  77%|███████▋  | 767/1000 [1:47:51<32:45,  8.44s/it]Register a destroy method for a given bean name . --> register destruction methods --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... [[destroyMethodNames]] ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; if ( [[destroyMethodNames]] == null ) { [[destroyMethodNames]] = StringPool . EMPTY_ARRAY ; } int total = [[destroyMethodNames]] . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[destroyMethodNames]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[destroyMethodNames]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , True ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[destroyMethodNames]] [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } [[beanDefinition]] . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... [[chestnuts]] ) { BeanDefinition [[ín]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[ín]] . type ) ; if ( [[chestnuts]] == null ) { [[chestnuts]] = StringPool . EMPTY_ARRAY ; } int total = [[chestnuts]] . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[chestnuts]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[chestnuts]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , True ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + [[ín]] . type . getName ( ) + ' ' + [[chestnuts]] [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } [[ín]] . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 765 ---------------------------------------------
Registers a new Petite provider --> Register a new PetiteProvider --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String [[methodName]] , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( [[methodName]] , arguments , True ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[methodName]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String [[horace]] , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( [[horace]] , arguments , True ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[horace]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 766 ---------------------------------------------
Registers a new method in the specified bean . --> So we don t have one of them --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteMethodInjectionPoint]] ( final String [[beanName]] , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] [[methods]] = [[cd]] . getAllMethodDescriptors ( methodName ) ; if ( [[methods]] != null && [[methods]] . length > 0 ) { if ( [[methods]] . length > 1 ) { throw new PetiteException ( [[methods]] . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = [[methods]] [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = [[cd]] . getMethodDescriptor ( methodName , arguments , True ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] [[ref]] = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , [[ref]] ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void [[outshine]] ( final String [[qué]] , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[qué]] ) ; ClassDescriptor [[bring]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] [[disrespectfully]] = [[bring]] . getAllMethodDescriptors ( methodName ) ; if ( [[disrespectfully]] != null && [[disrespectfully]] . length > 0 ) { if ( [[disrespectfully]] . length > 1 ) { throw new PetiteException ( [[disrespectfully]] . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = [[disrespectfully]] [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = [[bring]] . getMethodDescriptor ( methodName , arguments , True ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] [[derision]] = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , [[derision]] ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 767 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 585 / 161 / 21 / 767:  77%|███████▋  | 767/1000 [1:47:51<32:45,  8.44s/it][Succeeded / Failed / Skipped / Total] 585 / 161 / 21 / 767:  77%|███████▋  | 768/1000 [1:48:26<32:45,  8.47s/it][Succeeded / Failed / Skipped / Total] 586 / 161 / 21 / 768:  77%|███████▋  | 768/1000 [1:48:26<32:45,  8.47s/it][Succeeded / Failed / Skipped / Total] 586 / 161 / 21 / 768:  77%|███████▋  | 769/1000 [1:48:32<32:36,  8.47s/it][Succeeded / Failed / Skipped / Total] 587 / 161 / 21 / 769:  77%|███████▋  | 769/1000 [1:48:32<32:36,  8.47s/it][Succeeded / Failed / Skipped / Total] 587 / 161 / 21 / 769:  77%|███████▋  | 770/1000 [1:48:43<32:28,  8.47s/it][Succeeded / Failed / Skipped / Total] 587 / 162 / 21 / 770:  77%|███████▋  | 770/1000 [1:48:43<32:28,  8.47s/it][Succeeded / Failed / Skipped / Total] 587 / 162 / 21 / 770:  77%|███████▋  | 771/1000 [1:49:05<32:24,  8.49s/it][Succeeded / Failed / Skipped / Total] 588 / 162 / 21 / 771:  77%|███████▋  | 771/1000 [1:49:05<32:24,  8.49s/it][Succeeded / Failed / Skipped / Total] 588 / 162 / 21 / 771:  77%|███████▋  | 772/1000 [1:49:19<32:17,  8.50s/it][Succeeded / Failed / Skipped / Total] 589 / 162 / 21 / 772:  77%|███████▋  | 772/1000 [1:49:19<32:17,  8.50s/it][Succeeded / Failed / Skipped / Total] 589 / 162 / 21 / 772:  77%|███████▋  | 773/1000 [1:49:21<32:06,  8.49s/it]Registers a property injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetitePropertyInjectionPoint]] ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor [[propertyDescriptor]] = cd . getPropertyDescriptor ( property , True ) ; if ( [[propertyDescriptor]] == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( [[propertyDescriptor]] , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( [[propertyDescriptor]] , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void [[gass]] ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor [[resources]] = cd . getPropertyDescriptor ( property , True ) ; if ( [[resources]] == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( [[resources]] , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( [[resources]] , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 768 ---------------------------------------------
Iterate over all beans of a given type . --> Iterate through the Bean --> Socre: 1.0

[[[[Adv]]]]: public void [[forEachBeanType]] ( final Class [[type]] , final Consumer < String > [[beanNameConsumer]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[type]] ) ) { [[beanNameConsumer]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void [[bator]] ( final Class [[azumi]] , final Consumer < String > [[ank]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[azumi]] ) ) { [[ank]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 769 ---------------------------------------------
Registers new init methods for the specified init method name . --> Split a bean with roofing --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteInitMethods]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... [[initMethodNames]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( [[initMethodNames]] == null ) { [[initMethodNames]] = StringPool . EMPTY_ARRAY ; } int [[total]] = [[initMethodNames]] . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ [[total]] ] ; int i ; for ( i = 0 ; i < [[initMethodNames]] . length ; i ++ ) { MethodDescriptor md = [[cd]] . getMethodDescriptor ( [[initMethodNames]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , True ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + [[initMethodNames]] [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void [[splitting]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... [[roofing]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[jeffrey]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( [[roofing]] == null ) { [[roofing]] = StringPool . EMPTY_ARRAY ; } int [[urdu]] = [[roofing]] . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ [[urdu]] ] ; int i ; for ( i = 0 ; i < [[roofing]] . length ; i ++ ) { MethodDescriptor md = [[jeffrey]] . getMethodDescriptor ( [[roofing]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , True ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + [[roofing]] [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 770 ---------------------------------------------
Define parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > [[properties]] ) { for ( Map . Entry < ? , ? > [[entry]] : [[properties]] . entrySet ( ) ) { defineParameter ( [[entry]] . getKey ( ) . toString ( ) , [[entry]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[wellcome]] ( final Map < ? , ? > [[suggestive]] ) { for ( Map . Entry < ? , ? > [[counterproductive]] : [[suggestive]] . entrySet ( ) ) { defineParameter ( [[counterproductive]] . getKey ( ) . toString ( ) , [[counterproductive]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 771 ---------------------------------------------
Intercept the call . --> helper method for echo --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object [[intercept]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object [[result]] = null ; try { [[result]] = actionRequest . invoke ( ) ; } catch ( Exception ex ) { [[result]] = "<exception>" ; throw ex ; } catch ( Throwable th ) { [[result]] = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , executionTime , [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object [[balsam]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object [[estrogen]] = null ; try { [[estrogen]] = actionRequest . invoke ( ) ; } catch ( Exception ex ) { [[estrogen]] = "<exception>" ; throw ex ; } catch ( Throwable th ) { [[estrogen]] = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , executionTime , [[estrogen]] ) ; } return [[estrogen]] ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 772 ---------------------------------------------
Check that the given index is valid . --> Check that a method is valid --> Socre: 1.0

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo methodInfo , final int [[argIndex]] ) { if ( ( [[argIndex]] < 1 ) || ( [[argIndex]] > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[argIndex]] ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo methodInfo , final int [[rants]] ) { if ( ( [[rants]] < 1 ) || ( [[rants]] > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[rants]] ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 773 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 590 / 162 / 21 / 773:  77%|███████▋  | 773/1000 [1:49:21<32:06,  8.49s/it][Succeeded / Failed / Skipped / Total] 590 / 162 / 21 / 773:  77%|███████▋  | 774/1000 [1:49:23<31:56,  8.48s/it][Succeeded / Failed / Skipped / Total] 591 / 162 / 21 / 774:  77%|███████▋  | 774/1000 [1:49:23<31:56,  8.48s/it][Succeeded / Failed / Skipped / Total] 591 / 162 / 21 / 774:  78%|███████▊  | 775/1000 [1:49:24<31:45,  8.47s/it][Succeeded / Failed / Skipped / Total] 592 / 162 / 21 / 775:  78%|███████▊  | 775/1000 [1:49:24<31:45,  8.47s/it][Succeeded / Failed / Skipped / Total] 592 / 162 / 21 / 775:  78%|███████▊  | 776/1000 [1:49:36<31:38,  8.47s/it][Succeeded / Failed / Skipped / Total] 593 / 162 / 21 / 776:  78%|███████▊  | 776/1000 [1:49:36<31:38,  8.47s/it][Succeeded / Failed / Skipped / Total] 593 / 162 / 21 / 776:  78%|███████▊  | 777/1000 [1:50:02<31:35,  8.50s/it][Succeeded / Failed / Skipped / Total] 594 / 162 / 21 / 777:  78%|███████▊  | 777/1000 [1:50:02<31:35,  8.50s/it][Succeeded / Failed / Skipped / Total] 594 / 162 / 21 / 777:  78%|███████▊  | 778/1000 [1:50:06<31:25,  8.49s/it][Succeeded / Failed / Skipped / Total] 595 / 162 / 21 / 778:  78%|███████▊  | 778/1000 [1:50:06<31:25,  8.49s/it][Succeeded / Failed / Skipped / Total] 595 / 162 / 21 / 778:  78%|███████▊  | 779/1000 [1:50:08<31:14,  8.48s/it][Succeeded / Failed / Skipped / Total] 595 / 163 / 21 / 779:  78%|███████▊  | 779/1000 [1:50:08<31:14,  8.48s/it][Succeeded / Failed / Skipped / Total] 595 / 163 / 21 / 779:  78%|███████▊  | 780/1000 [1:50:28<31:09,  8.50s/it][Succeeded / Failed / Skipped / Total] 596 / 163 / 21 / 780:  78%|███████▊  | 780/1000 [1:50:28<31:09,  8.50s/it][Succeeded / Failed / Skipped / Total] 596 / 163 / 21 / 780:  78%|███████▊  | 781/1000 [1:50:30<30:59,  8.49s/it]Registers a provider --> Derived methods --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String providerName , final Class type , final String [[staticMethodName]] , final Class [ ] arguments ) { ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = [[cd]] . getMethodDescriptor ( [[staticMethodName]] , arguments , True ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[staticMethodName]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void [[derringer]] ( final String providerName , final Class type , final String [[knockout]] , final Class [ ] arguments ) { ClassDescriptor [[erence]] = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = [[erence]] . getMethodDescriptor ( [[knockout]] , arguments , True ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[knockout]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 774 ---------------------------------------------
Resolves Java version . --> returns the worst case --> Socre: 1.0

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int [[version]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[platformVersion]] = javaVersionNumber - 8 + 52 ; return [[version]] > [[platformVersion]] ? [[version]] : [[platformVersion]] ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[alcoholic]] ( final int [[gripe]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[shutters]] = javaVersionNumber - 8 + 52 ; return [[gripe]] > [[shutters]] ? [[gripe]] : [[shutters]] ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 775 ---------------------------------------------
Pushes an integer to the stack . --> Convenience method to avoid overflow --> Socre: 1.0

[[[[Adv]]]]: public static void [[pushInt]] ( final MethodVisitor [[mv]] , final int [[value]] ) { if ( [[value]] <= 5 ) { [[mv]] . visitInsn ( ICONST_0 + [[value]] ) ; } else if ( [[value]] <= Byte . MAX_VALUE ) { [[mv]] . visitIntInsn ( BIPUSH , [[value]] ) ; } else { [[mv]] . visitIntInsn ( SIPUSH , [[value]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void [[easier]] ( final MethodVisitor [[distributing]] , final int [[slopes]] ) { if ( [[slopes]] <= 5 ) { [[distributing]] . visitInsn ( ICONST_0 + [[slopes]] ) ; } else if ( [[slopes]] <= Byte . MAX_VALUE ) { [[distributing]] . visitIntInsn ( BIPUSH , [[slopes]] ) ; } else { [[distributing]] . visitIntInsn ( SIPUSH , [[slopes]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 776 ---------------------------------------------
Loads all arguments . --> Generate tidier instructions --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[tidier]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 777 ---------------------------------------------
Get advice method name . --> Package private for testing --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String [[name]] , final int [[index]] ) { return ProxettaNames . methodPrefix + [[name]] + ProxettaNames . methodDivider + [[index]] ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[suri]] ( final String [[wrestling]] , final int [[condescending]] ) { return ProxettaNames . methodPrefix + [[wrestling]] + ProxettaNames . methodDivider + [[condescending]] ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 778 ---------------------------------------------
Load static method arguments . --> Rethrows an unchecked exception --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadStaticMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo [[methodInfo]] ) { for ( int i = 0 ; i < [[methodInfo]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[mv]] , [[methodInfo]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void [[rancour]] ( final MethodVisitor [[winston]] , final MethodInfo [[handcuffs]] ) { for ( int i = 0 ; i < [[handcuffs]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[winston]] , [[handcuffs]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 779 ---------------------------------------------
Get advice field name --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String [[name]] , final int [[index]] ) { return ProxettaNames . fieldPrefix + [[name]] + ProxettaNames . fieldDivider + [[index]] ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[easier]] ( final String [[trumpet]] , final int [[skyrocketed]] ) { return ProxettaNames . fieldPrefix + [[trumpet]] + ProxettaNames . fieldDivider + [[skyrocketed]] ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 780 ---------------------------------------------
Load method argument . --> visit a method on the stack --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int [[type]] = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( [[type]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[amistad]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int [[ashcan]] = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( [[ashcan]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 781 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 597 / 163 / 21 / 781:  78%|███████▊  | 781/1000 [1:50:30<30:59,  8.49s/it][Succeeded / Failed / Skipped / Total] 597 / 163 / 21 / 781:  78%|███████▊  | 782/1000 [1:50:36<30:49,  8.49s/it][Succeeded / Failed / Skipped / Total] 598 / 163 / 21 / 782:  78%|███████▊  | 782/1000 [1:50:36<30:49,  8.49s/it][Succeeded / Failed / Skipped / Total] 598 / 163 / 21 / 782:  78%|███████▊  | 783/1000 [1:50:47<30:42,  8.49s/it][Succeeded / Failed / Skipped / Total] 599 / 163 / 21 / 783:  78%|███████▊  | 783/1000 [1:50:47<30:42,  8.49s/it][Succeeded / Failed / Skipped / Total] 599 / 163 / 21 / 783:  78%|███████▊  | 784/1000 [1:51:03<30:35,  8.50s/it][Succeeded / Failed / Skipped / Total] 600 / 163 / 21 / 784:  78%|███████▊  | 784/1000 [1:51:03<30:35,  8.50s/it][Succeeded / Failed / Skipped / Total] 600 / 163 / 21 / 784:  78%|███████▊  | 785/1000 [1:51:05<30:25,  8.49s/it][Succeeded / Failed / Skipped / Total] 601 / 163 / 21 / 785:  78%|███████▊  | 785/1000 [1:51:05<30:25,  8.49s/it][Succeeded / Failed / Skipped / Total] 601 / 163 / 21 / 785:  79%|███████▊  | 786/1000 [1:51:10<30:16,  8.49s/it]Load the arguments for the method . --> Liefert den Objekt --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadVirtualMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo [[methodInfo]] ) { for ( int [[i]] = 1 ; [[i]] <= [[methodInfo]] . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( [[mv]] , [[methodInfo]] , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void [[bartenders]] ( final MethodVisitor [[neff]] , final MethodInfo [[physicality]] ) { for ( int [[priced]] = 1 ; [[priced]] <= [[physicality]] . getArgumentsCount ( ) ; [[priced]] ++ ) { loadMethodArgument ( [[neff]] , [[physicality]] , [[priced]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 782 ---------------------------------------------
Prepare return value . --> generates a number of method calls --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareReturnValue]] ( final MethodVisitor mv , final MethodInfo methodInfo , int [[varOffset]] ) { [[varOffset]] += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void [[appearing]] ( final MethodVisitor mv , final MethodInfo methodInfo , int [[nationalistic]] ) { [[nationalistic]] += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 783 ---------------------------------------------
Store method argument . --> Generates a ALDO instruction --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeMethodArgument]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[mv]] . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( DSTORE , offset ) ; break ; default : [[mv]] . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[aldo]] ( final MethodVisitor [[nicotine]] , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[nicotine]] . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : [[nicotine]] . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : [[nicotine]] . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : [[nicotine]] . visitVarInsn ( DSTORE , offset ) ; break ; default : [[nicotine]] . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 784 ---------------------------------------------
Extract encoding from content type --> convert contentType and defaultEncoding --> Socre: 1.0

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String contentType , String defaultEncoding ) { String encoding = [[extractEncoding]] ( contentType ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[dominici]] ( final String contentType , String defaultEncoding ) { String encoding = [[dominici]] ( contentType ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 785 ---------------------------------------------
Creates a signature key . --> Generate a crap object --> Socre: 1.0

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String [[methodName]] , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( [[methodName]] ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[crap]] ( final int access , final String [[assassin]] , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( [[assassin]] ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 786 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 602 / 163 / 21 / 786:  79%|███████▊  | 786/1000 [1:51:10<30:16,  8.49s/it][Succeeded / Failed / Skipped / Total] 602 / 163 / 21 / 786:  79%|███████▊  | 787/1000 [1:51:16<30:06,  8.48s/it][Succeeded / Failed / Skipped / Total] 603 / 163 / 21 / 787:  79%|███████▊  | 787/1000 [1:51:16<30:06,  8.48s/it][Succeeded / Failed / Skipped / Total] 603 / 163 / 21 / 787:  79%|███████▉  | 788/1000 [1:51:50<30:05,  8.52s/it][Succeeded / Failed / Skipped / Total] 603 / 164 / 21 / 788:  79%|███████▉  | 788/1000 [1:51:50<30:05,  8.52s/it][Succeeded / Failed / Skipped / Total] 603 / 164 / 21 / 788:  79%|███████▉  | 789/1000 [1:51:53<29:55,  8.51s/it][Succeeded / Failed / Skipped / Total] 604 / 164 / 21 / 789:  79%|███████▉  | 789/1000 [1:51:53<29:55,  8.51s/it][Succeeded / Failed / Skipped / Total] 604 / 164 / 21 / 789:  79%|███████▉  | 790/1000 [1:51:55<29:45,  8.50s/it][Succeeded / Failed / Skipped / Total] 605 / 164 / 21 / 790:  79%|███████▉  | 790/1000 [1:51:55<29:45,  8.50s/it][Succeeded / Failed / Skipped / Total] 605 / 164 / 21 / 790:  79%|███████▉  | 791/1000 [1:52:01<29:35,  8.50s/it]Create new array . --> generate nanosecond instructions --> Socre: 1.0

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor [[mv]] , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[componentType]] == long . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[componentType]] == float . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[componentType]] == double . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[componentType]] == byte . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[componentType]] == short . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[componentType]] == boolean . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[componentType]] == char . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } [[mv]] . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[componentType]] ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[nanosecond]] ( final MethodVisitor [[they]] , final Class [[perpetrators]] ) { if ( [[perpetrators]] == int . class ) { [[they]] . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[perpetrators]] == long . class ) { [[they]] . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[perpetrators]] == float . class ) { [[they]] . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[perpetrators]] == double . class ) { [[they]] . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[perpetrators]] == byte . class ) { [[they]] . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[perpetrators]] == short . class ) { [[they]] . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[perpetrators]] == boolean . class ) { [[they]] . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[perpetrators]] == char . class ) { [[they]] . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } [[they]] . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[perpetrators]] ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 787 ---------------------------------------------
Store the instruction into an array . --> Discovers all insets of the target --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeIntoArray]] ( final MethodVisitor [[mv]] , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { [[mv]] . visitInsn ( IASTORE ) ; return ; } if ( [[componentType]] == long . class ) { [[mv]] . visitInsn ( LASTORE ) ; return ; } if ( [[componentType]] == float . class ) { [[mv]] . visitInsn ( FASTORE ) ; return ; } if ( [[componentType]] == double . class ) { [[mv]] . visitInsn ( DASTORE ) ; return ; } if ( [[componentType]] == byte . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( [[componentType]] == short . class ) { [[mv]] . visitInsn ( SASTORE ) ; return ; } if ( [[componentType]] == boolean . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( [[componentType]] == char . class ) { [[mv]] . visitInsn ( CASTORE ) ; return ; } [[mv]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void [[daigle]] ( final MethodVisitor [[live]] , final Class [[antagonist]] ) { if ( [[antagonist]] == int . class ) { [[live]] . visitInsn ( IASTORE ) ; return ; } if ( [[antagonist]] == long . class ) { [[live]] . visitInsn ( LASTORE ) ; return ; } if ( [[antagonist]] == float . class ) { [[live]] . visitInsn ( FASTORE ) ; return ; } if ( [[antagonist]] == double . class ) { [[live]] . visitInsn ( DASTORE ) ; return ; } if ( [[antagonist]] == byte . class ) { [[live]] . visitInsn ( BASTORE ) ; return ; } if ( [[antagonist]] == short . class ) { [[live]] . visitInsn ( SASTORE ) ; return ; } if ( [[antagonist]] == boolean . class ) { [[live]] . visitInsn ( BASTORE ) ; return ; } if ( [[antagonist]] == char . class ) { [[live]] . visitInsn ( CASTORE ) ; return ; } [[live]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 788 ---------------------------------------------
Require authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public static void requireAuthentication ( final HttpServletResponse resp , final String [[realm]] ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[realm]] + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void requireAuthentication ( final HttpServletResponse resp , final String [[guatemalan]] ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[guatemalan]] + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 789 ---------------------------------------------
Returns true if any flags are empty --> Determines if the disaster section contains the disaster --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isEmptyFlags]] ( Flags [[flags]] ) { if ( [[flags]] == null ) return "[[True]]" == "[[True]]" ; Flags . Flag [ ] systemFlags = [[flags]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return False ; } String [ ] userFlags = [[flags]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return False ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean [[erybody]] ( Flags [[disaster]] ) { if ( [[disaster]] == null ) return "[["Pained" == "Pained"]]" == "[["Pained" == "Pained"]]" ; Flags . Flag [ ] systemFlags = [[disaster]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return False ; } String [ ] userFlags = [[disaster]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return False ; } return "[["Pained" == "Pained"]]" == "[["Pained" == "Pained"]]" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 790 ---------------------------------------------
Prepares a download . --> Sends a cleart cue to the server --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse [[response]] , final File file , final String [[mimeType]] ) { if ( ! file . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + file ) ; } if ( file . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + file ) ; } prepareResponse ( [[response]] , file . getAbsolutePath ( ) , [[mimeType]] , ( int ) file . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[eom]] ( final HttpServletResponse [[sweetcakes]] , final File file , final String [[courthouse]] ) { if ( ! file . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + file ) ; } if ( file . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + file ) ; } prepareResponse ( [[sweetcakes]] , file . getAbsolutePath ( ) , [[courthouse]] , ( int ) file . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 791 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 606 / 164 / 21 / 791:  79%|███████▉  | 791/1000 [1:52:01<29:35,  8.50s/it][Succeeded / Failed / Skipped / Total] 606 / 164 / 21 / 791:  79%|███████▉  | 792/1000 [1:52:08<29:27,  8.50s/it][Succeeded / Failed / Skipped / Total] 607 / 164 / 21 / 792:  79%|███████▉  | 792/1000 [1:52:08<29:27,  8.50s/it][Succeeded / Failed / Skipped / Total] 607 / 164 / 21 / 792:  79%|███████▉  | 793/1000 [1:52:20<29:19,  8.50s/it][Succeeded / Failed / Skipped / Total] 608 / 164 / 21 / 793:  79%|███████▉  | 793/1000 [1:52:20<29:19,  8.50s/it][Succeeded / Failed / Skipped / Total] 608 / 164 / 21 / 793:  79%|███████▉  | 794/1000 [1:52:21<29:09,  8.49s/it][Succeeded / Failed / Skipped / Total] 609 / 164 / 21 / 794:  79%|███████▉  | 794/1000 [1:52:21<29:09,  8.49s/it][Succeeded / Failed / Skipped / Total] 609 / 164 / 21 / 794:  80%|███████▉  | 795/1000 [1:52:47<29:04,  8.51s/it][Succeeded / Failed / Skipped / Total] 610 / 164 / 21 / 795:  80%|███████▉  | 795/1000 [1:52:47<29:04,  8.51s/it][Succeeded / Failed / Skipped / Total] 610 / 164 / 21 / 795:  80%|███████▉  | 796/1000 [1:52:51<28:55,  8.51s/it][Succeeded / Failed / Skipped / Total] 611 / 164 / 21 / 796:  80%|███████▉  | 796/1000 [1:52:51<28:55,  8.51s/it][Succeeded / Failed / Skipped / Total] 611 / 164 / 21 / 796:  80%|███████▉  | 797/1000 [1:53:18<28:51,  8.53s/it]Extracts the bearer token from the request . --> Credming from Authorization header --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveAuthBearerToken]] ( final HttpServletRequest [[request]] ) { String [[header]] = [[request]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[header]] == null ) { return null ; } int ndx = [[header]] . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return [[header]] . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String [[cramming]] ( final HttpServletRequest [[configurations]] ) { String [[eom]] = [[configurations]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[eom]] == null ) { return null ; } int ndx = [[eom]] . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return [[eom]] . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 792 ---------------------------------------------
Read request body from a reader --> handi work --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest request ) throws IOException { BufferedReader buff = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[handiwork]] ( final HttpServletRequest request ) throws IOException { BufferedReader buff = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 793 ---------------------------------------------
Sets the response . --> Set the gable content based on the file name and size --> Socre: 1.0

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse [[response]] , final String fileName , String [[mimeType]] , final int fileSize ) { if ( ( [[mimeType]] == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; [[mimeType]] = MimeTypes . getMimeType ( extension ) ; } if ( [[mimeType]] != null ) { [[response]] . setContentType ( [[mimeType]] ) ; } if ( fileSize >= 0 ) { [[response]] . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse [[anythin]] , final String fileName , String [[gable]] , final int fileSize ) { if ( ( [[gable]] == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; [[gable]] = MimeTypes . getMimeType ( extension ) ; } if ( [[gable]] != null ) { [[anythin]] . setContentType ( [[gable]] ) ; } if ( fileSize >= 0 ) { [[anythin]] . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 794 ---------------------------------------------
Returns all cookies with the given cookie name . --> Get blackstone cookie --> Socre: 1.0

[[[[Adv]]]]: public static Cookie [ ] [[getAllCookies]] ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie [[cookie]] : cookies ) { if ( [[cookie]] . getName ( ) . equals ( cookieName ) ) { list . add ( [[cookie]] ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] [[blackstone]] ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie [[tropics]] : cookies ) { if ( [[tropics]] . getName ( ) . equals ( cookieName ) ) { list . add ( [[tropics]] ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 795 ---------------------------------------------
Stores the current context path in the Servlet context . --> Sets Drunks --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext servletContext , final String [[contextPathVariableName]] ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[drunks]] ( final ServletContext servletContext , final String [[programme]] ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( [[programme]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 796 ---------------------------------------------
Stores the current context path in the request . --> Store a soundproof variable --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext pageContext , final String contextPathVariableName ) { String [[ctxPath]] = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( contextPathVariableName , [[ctxPath]] ) ; ServletContext [[servletContext]] = pageContext . getServletContext ( ) ; [[servletContext]] . setAttribute ( contextPathVariableName , [[ctxPath]] ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[soundproof]] ( final PageContext pageContext , final String contextPathVariableName ) { String [[juror]] = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( contextPathVariableName , [[juror]] ) ; ServletContext [[singleton]] = pageContext . getServletContext ( ) ; [[singleton]] . setAttribute ( contextPathVariableName , [[juror]] ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 797 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 612 / 164 / 21 / 797:  80%|███████▉  | 797/1000 [1:53:18<28:51,  8.53s/it][Succeeded / Failed / Skipped / Total] 612 / 164 / 21 / 797:  80%|███████▉  | 798/1000 [1:53:48<28:48,  8.56s/it][Succeeded / Failed / Skipped / Total] 613 / 164 / 21 / 798:  80%|███████▉  | 798/1000 [1:53:48<28:48,  8.56s/it][Succeeded / Failed / Skipped / Total] 613 / 164 / 21 / 798:  80%|███████▉  | 799/1000 [1:53:49<28:38,  8.55s/it][Succeeded / Failed / Skipped / Total] 614 / 164 / 21 / 799:  80%|███████▉  | 799/1000 [1:53:49<28:38,  8.55s/it][Succeeded / Failed / Skipped / Total] 614 / 164 / 21 / 799:  80%|████████  | 800/1000 [1:53:50<28:27,  8.54s/it][Succeeded / Failed / Skipped / Total] 615 / 164 / 21 / 800:  80%|████████  | 800/1000 [1:53:50<28:27,  8.54s/it][Succeeded / Failed / Skipped / Total] 615 / 164 / 21 / 800:  80%|████████  | 801/1000 [1:54:06<28:20,  8.55s/it][Succeeded / Failed / Skipped / Total] 616 / 164 / 21 / 801:  80%|████████  | 801/1000 [1:54:06<28:20,  8.55s/it][Succeeded / Failed / Skipped / Total] 616 / 164 / 21 / 801:  80%|████████  | 802/1000 [1:54:15<28:12,  8.55s/it][Succeeded / Failed / Skipped / Total] 617 / 164 / 21 / 802:  80%|████████  | 802/1000 [1:54:15<28:12,  8.55s/it][Succeeded / Failed / Skipped / Total] 617 / 164 / 21 / 802:  80%|████████  | 803/1000 [1:54:16<28:01,  8.54s/it]Read request body from request --> Paste pasteur into a string --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromStream]] ( final HttpServletRequest [[request]] ) throws IOException { String charEncoding = [[request]] . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter [[charArrayWriter]] = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = [[request]] . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , [[charArrayWriter]] ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return [[charArrayWriter]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[pasteur]] ( final HttpServletRequest [[bailiffs]] ) throws IOException { String charEncoding = [[bailiffs]] . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter [[oakum]] = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = [[bailiffs]] . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , [[oakum]] ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return [[oakum]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 798 ---------------------------------------------
Checks if the given request is a GET parameter . --> Liefert die uebergebenen der uebergeben --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest [[request]] , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String [[query]] = [[request]] . getQueryString ( ) ; String [ ] [[nameValuePairs]] = StringUtil . splitc ( [[query]] , ' ' ) ; for ( String nameValuePair : [[nameValuePairs]] ) { if ( nameValuePair . startsWith ( name ) ) { return True ; } } return False ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[eller]] ( final HttpServletRequest [[nunez]] , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String [[glimmer]] = [[nunez]] . getQueryString ( ) ; String [ ] [[rested]] = StringUtil . splitc ( [[glimmer]] , ' ' ) ; for ( String nameValuePair : [[rested]] ) { if ( nameValuePair . startsWith ( name ) ) { return True ; } } return False ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 799 ---------------------------------------------
Invokes the tag . --> This method is used to protect it in a Fernet --> Socre: 1.0

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment [[body]] ) throws JspException { if ( [[body]] == null ) { return ; } try { [[body]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[bulimia]] ( final JspFragment [[criminals]] ) throws JspException { if ( [[criminals]] == null ) { return ; } try { [[criminals]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 800 ---------------------------------------------
Copy request parameters to attributes . --> generate nues --> Socre: 1.0

[[[[Adv]]]]: public static void [[copyParamsToAttributes]] ( final HttpServletRequest [[servletRequest]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration [[paramNames]] = [[servletRequest]] . getParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { String paramName = ( String ) [[paramNames]] . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = [[servletRequest]] . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } [[servletRequest]] . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void [[nues]] ( final HttpServletRequest [[vão]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration [[showering]] = [[vão]] . getParameterNames ( ) ; while ( [[showering]] . hasMoreElements ( ) ) { String paramName = ( String ) [[showering]] . nextElement ( ) ; if ( [[vão]] . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = [[vão]] . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } [[vão]] . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 801 ---------------------------------------------
Prepares the given parameters . --> Fill a string array with empty values --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[prepareParameters]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int [[emptyCount]] = 0 ; int total = paramValues . length ; for ( int [[i]] = 0 ; [[i]] < paramValues . length ; [[i]] ++ ) { String paramValue = paramValues [ [[i]] ] ; if ( paramValue == null ) { [[emptyCount]] ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { [[emptyCount]] ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ [[i]] ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( [[emptyCount]] == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] [[polynesian]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int [[filling]] = 0 ; int total = paramValues . length ; for ( int [[randy]] = 0 ; [[randy]] < paramValues . length ; [[randy]] ++ ) { String paramValue = paramValues [ [[randy]] ] ; if ( paramValue == null ) { [[filling]] ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { [[filling]] ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ [[randy]] ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( [[filling]] == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 802 ---------------------------------------------
Renders the body to a char array . --> Get coltan t --> Socre: 1.0

[[[[Adv]]]]: public static char [ ] [[renderBody]] ( final JspFragment body ) throws JspException { FastCharArrayWriter [[writer]] = new FastCharArrayWriter ( ) ; invokeBody ( body , [[writer]] ) ; return [[writer]] . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] [[coltan]] ( final JspFragment body ) throws JspException { FastCharArrayWriter [[jeanie]] = new FastCharArrayWriter ( ) ; invokeBody ( body , [[jeanie]] ) ; return [[jeanie]] . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 803 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 618 / 164 / 21 / 803:  80%|████████  | 803/1000 [1:54:16<28:01,  8.54s/it][Succeeded / Failed / Skipped / Total] 618 / 164 / 21 / 803:  80%|████████  | 804/1000 [1:54:29<27:54,  8.54s/it][Succeeded / Failed / Skipped / Total] 618 / 165 / 21 / 804:  80%|████████  | 804/1000 [1:54:29<27:54,  8.54s/it][Succeeded / Failed / Skipped / Total] 618 / 165 / 21 / 804:  80%|████████  | 805/1000 [1:54:30<27:44,  8.54s/it][Succeeded / Failed / Skipped / Total] 618 / 166 / 21 / 805:  80%|████████  | 805/1000 [1:54:30<27:44,  8.54s/it][Succeeded / Failed / Skipped / Total] 618 / 166 / 21 / 805:  81%|████████  | 806/1000 [1:54:41<27:36,  8.54s/it][Succeeded / Failed / Skipped / Total] 619 / 166 / 21 / 806:  81%|████████  | 806/1000 [1:54:41<27:36,  8.54s/it][Succeeded / Failed / Skipped / Total] 619 / 166 / 21 / 806:  81%|████████  | 807/1000 [1:54:41<27:25,  8.53s/it][Succeeded / Failed / Skipped / Total] 619 / 166 / 22 / 807:  81%|████████  | 807/1000 [1:54:41<27:25,  8.53s/it][Succeeded / Failed / Skipped / Total] 619 / 166 / 22 / 807:  81%|████████  | 808/1000 [1:54:54<27:18,  8.53s/it][Succeeded / Failed / Skipped / Total] 620 / 166 / 22 / 808:  81%|████████  | 808/1000 [1:54:54<27:18,  8.53s/it][Succeeded / Failed / Skipped / Total] 620 / 166 / 22 / 808:  81%|████████  | 809/1000 [1:54:55<27:07,  8.52s/it][Succeeded / Failed / Skipped / Total] 621 / 166 / 22 / 809:  81%|████████  | 809/1000 [1:54:55<27:07,  8.52s/it][Succeeded / Failed / Skipped / Total] 621 / 166 / 22 / 809:  81%|████████  | 810/1000 [1:55:11<27:01,  8.53s/it][Succeeded / Failed / Skipped / Total] 622 / 166 / 22 / 810:  81%|████████  | 810/1000 [1:55:11<27:01,  8.53s/it][Succeeded / Failed / Skipped / Total] 622 / 166 / 22 / 810:  81%|████████  | 811/1000 [1:55:17<26:52,  8.53s/it][Succeeded / Failed / Skipped / Total] 623 / 166 / 22 / 811:  81%|████████  | 811/1000 [1:55:17<26:52,  8.53s/it][Succeeded / Failed / Skipped / Total] 623 / 166 / 22 / 811:  81%|████████  | 812/1000 [1:55:18<26:41,  8.52s/it]Render the body to a String . --> Parses a catchphrase --> Socre: 1.0

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment body ) throws JspException { char [ ] [[result]] = renderBody ( body ) ; return new String ( [[result]] ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[catchphrase]] ( final JspFragment body ) throws JspException { char [ ] [[dozens]] = renderBody ( body ) ; return new String ( [[dozens]] ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 804 ---------------------------------------------
Invokes init methods . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint [[initMethod]] : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != [[initMethod]] . invocationStrategy ) { continue ; } try { [[initMethod]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[initMethod]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[falcone]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint [[soundings]] : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != [[soundings]] . invocationStrategy ) { continue ; } try { [[soundings]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[soundings]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 805 ---------------------------------------------
Calls the destroy methods on the bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint [[destroyMethodPoint]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[destroyMethodPoint]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[destroyMethodPoint]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[accusation]] ( ) { for ( final DestroyMethodPoint [[wahl]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[wahl]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[wahl]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 806 ---------------------------------------------
Inject parameters . --> Ignore the bean definition --> Socre: 1.0

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager paramManager , final boolean [[implicitParamInjection]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[implicitParamInjection]] ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[camouflaged]] ( final ParamManager paramManager , final boolean [[beatty]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[beatty]] ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 807 ---------------------------------------------
Add a single entry . --> [[[SKIPPED]]]

[[[[Adv]]]]: protected void put ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 808 ---------------------------------------------
Creates new bean instance . --> Get bismol argument --> Socre: 1.0

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[paramNo]] = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ [[paramNo]] ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[bismol]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[bulimia]] = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ [[bulimia]] ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 809 ---------------------------------------------
Rewrite the given action path . --> Rewrite bsho --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest [[servletRequest]] , final String [[actionPath]] , final String httpMethod ) { return [[actionPath]] ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest [[bismol]] , final String [[bolshoi]] , final String httpMethod ) { return [[bolshoi]] ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 810 ---------------------------------------------
Adds a header . --> Add an alarm --> Socre: 1.0

[[[[Adv]]]]: public void [[addHeader]] ( final String [[name]] , final String [[value]] ) { List < String > valuesList = super . getAll ( [[name]] ) ; if ( valuesList . isEmpty ( ) ) { super . add ( [[name]] , [[value]] ) ; return ; } super . remove ( [[name]] ) ; valuesList . add ( [[value]] ) ; super . addAll ( [[name]] , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void [[armory]] ( final String [[nicotine]] , final String [[adderall]] ) { List < String > valuesList = super . getAll ( [[nicotine]] ) ; if ( valuesList . isEmpty ( ) ) { super . add ( [[nicotine]] , [[adderall]] ) ; return ; } super . remove ( [[nicotine]] ) ; valuesList . add ( [[adderall]] ) ; super . addAll ( [[nicotine]] , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 811 ---------------------------------------------
Put profile . --> Add a contribution --> Socre: 1.0

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String value , final String profile , final boolean [[append]] ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , [[append]] ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[contribution]] ( final String key , final String value , final String profile , final boolean [[rouen]] ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , [[rouen]] ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 812 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 624 / 166 / 22 / 812:  81%|████████  | 812/1000 [1:55:18<26:41,  8.52s/it][Succeeded / Failed / Skipped / Total] 624 / 166 / 22 / 812:  81%|████████▏ | 813/1000 [1:55:23<26:32,  8.52s/it][Succeeded / Failed / Skipped / Total] 625 / 166 / 22 / 813:  81%|████████▏ | 813/1000 [1:55:23<26:32,  8.52s/it][Succeeded / Failed / Skipped / Total] 625 / 166 / 22 / 813:  81%|████████▏ | 814/1000 [1:55:31<26:23,  8.52s/it][Succeeded / Failed / Skipped / Total] 626 / 166 / 22 / 814:  81%|████████▏ | 814/1000 [1:55:31<26:23,  8.52s/it][Succeeded / Failed / Skipped / Total] 626 / 166 / 22 / 814:  82%|████████▏ | 815/1000 [1:55:33<26:13,  8.51s/it][Succeeded / Failed / Skipped / Total] 627 / 166 / 22 / 815:  82%|████████▏ | 815/1000 [1:55:33<26:13,  8.51s/it][Succeeded / Failed / Skipped / Total] 627 / 166 / 22 / 815:  82%|████████▏ | 816/1000 [1:55:36<26:04,  8.50s/it][Succeeded / Failed / Skipped / Total] 628 / 166 / 22 / 816:  82%|████████▏ | 816/1000 [1:55:36<26:04,  8.50s/it][Succeeded / Failed / Skipped / Total] 628 / 166 / 22 / 816:  82%|████████▏ | 817/1000 [1:55:37<25:53,  8.49s/it][Succeeded / Failed / Skipped / Total] 629 / 166 / 22 / 817:  82%|████████▏ | 817/1000 [1:55:37<25:53,  8.49s/it][Succeeded / Failed / Skipped / Total] 629 / 166 / 22 / 817:  82%|████████▏ | 818/1000 [1:56:00<25:48,  8.51s/it][Succeeded / Failed / Skipped / Total] 630 / 166 / 22 / 818:  82%|████████▏ | 818/1000 [1:56:00<25:48,  8.51s/it][Succeeded / Failed / Skipped / Total] 630 / 166 / 22 / 818:  82%|████████▏ | 819/1000 [1:56:07<25:39,  8.51s/it][Succeeded / Failed / Skipped / Total] 631 / 166 / 22 / 819:  82%|████████▏ | 819/1000 [1:56:07<25:39,  8.51s/it][Succeeded / Failed / Skipped / Total] 631 / 166 / 22 / 819:  82%|████████▏ | 820/1000 [1:56:20<25:32,  8.51s/it]Get profile properties . --> Retrieve properties from cassandra --> Socre: 1.0

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String profile , final String key ) { final Map < String , PropsEntry > [[profileMap]] = profileProperties . get ( profile ) ; if ( [[profileMap]] == null ) { return null ; } return [[profileMap]] . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[cassandra]] ( final String profile , final String key ) { final Map < String , PropsEntry > [[taffy]] = profileProperties . get ( profile ) ; if ( [[taffy]] == null ) { return null ; } return [[taffy]] . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 813 ---------------------------------------------
Add a base property . --> Asserts a player with a given key - value pair --> Socre: 1.0

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String key , final String value , final boolean [[append]] ) { put ( null , baseProperties , key , value , [[append]] ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[belden]] ( final String key , final String value , final boolean [[desserts]] ) { put ( null , baseProperties , key , value , [[desserts]] ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 814 ---------------------------------------------
Extract profile information . --> also used by test --> Socre: 1.0

[[[[Adv]]]]: public Map [[extract]] ( Map target , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( target == null ) { target = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map [[misshapen]] ( Map target , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( target == null ) { target = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 815 ---------------------------------------------
Converts an array of 4 bytes to a 32 - bit integer . --> stream down to 4 bytes --> Socre: 1.0

[[[[Adv]]]]: private static int streamtoword ( byte [ ] [[data]] , int [ ] offp ) { int i ; int word = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( [[data]] [ off ] & 0xff ) ; off = ( off + 1 ) % [[data]] . length ; } offp [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int streamtoword ( byte [ ] [[bejesus]] , int [ ] offp ) { int i ; int word = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( [[bejesus]] [ off ] & 0xff ) ; off = ( off + 1 ) % [[bejesus]] . length ; } offp [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 816 ---------------------------------------------
Resolve macro macros . --> Highlight the given value --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveMacros]] ( String value , final String ... [[profiles]] ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[alight]] ( String value , final String ... [[nobleman]] ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 817 ---------------------------------------------
Hashes a password . --> bucket version --> Socre: 1.0

[[[[Adv]]]]: public static String [[hashpw]] ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String [[bucktoothed]] ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 818 ---------------------------------------------
Copies all bytes from the stream to the output stream . --> Read all firewalls --> Socre: 1.0

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( True ) { byte [[b]] = readByte ( ) ; if ( isBoundary ( [[b]] ) ) { break ; } out . write ( [[b]] ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[aggravation]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( True ) { byte [[firewalls]] = readByte ( ) ; if ( isBoundary ( [[firewalls]] ) ) { break ; } out . write ( [[firewalls]] ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 819 ---------------------------------------------
Copies bytes from the stream to the output stream . --> Copy nieces --> Socre: 1.0

[[[[Adv]]]]: public int copyMax ( final OutputStream [[out]] , final int [[maxBytes]] ) throws IOException { int count = 0 ; while ( True ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[out]] . write ( b ) ; count ++ ; if ( count == [[maxBytes]] ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int copyMax ( final OutputStream [[cimarron]] , final int [[nieces]] ) throws IOException { int count = 0 ; while ( True ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[cimarron]] . write ( b ) ; count ++ ; if ( count == [[nieces]] ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 820 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 632 / 166 / 22 / 820:  82%|████████▏ | 820/1000 [1:56:20<25:32,  8.51s/it][Succeeded / Failed / Skipped / Total] 632 / 166 / 22 / 820:  82%|████████▏ | 821/1000 [1:56:38<25:25,  8.52s/it][Succeeded / Failed / Skipped / Total] 633 / 166 / 22 / 821:  82%|████████▏ | 821/1000 [1:56:38<25:25,  8.52s/it][Succeeded / Failed / Skipped / Total] 633 / 166 / 22 / 821:  82%|████████▏ | 822/1000 [1:56:40<25:15,  8.52s/it][Succeeded / Failed / Skipped / Total] 634 / 166 / 22 / 822:  82%|████████▏ | 822/1000 [1:56:40<25:15,  8.52s/it][Succeeded / Failed / Skipped / Total] 634 / 166 / 22 / 822:  82%|████████▏ | 823/1000 [1:57:04<25:10,  8.54s/it][Succeeded / Failed / Skipped / Total] 635 / 166 / 22 / 823:  82%|████████▏ | 823/1000 [1:57:04<25:10,  8.54s/it][Succeeded / Failed / Skipped / Total] 635 / 166 / 22 / 823:  82%|████████▏ | 824/1000 [1:57:08<25:01,  8.53s/it][Succeeded / Failed / Skipped / Total] 636 / 166 / 22 / 824:  82%|████████▏ | 824/1000 [1:57:08<25:01,  8.53s/it][Succeeded / Failed / Skipped / Total] 636 / 166 / 22 / 824:  82%|████████▎ | 825/1000 [1:57:16<24:52,  8.53s/it][Succeeded / Failed / Skipped / Total] 636 / 167 / 22 / 825:  82%|████████▎ | 825/1000 [1:57:16<24:52,  8.53s/it][Succeeded / Failed / Skipped / Total] 636 / 167 / 22 / 825:  83%|████████▎ | 826/1000 [1:57:18<24:42,  8.52s/it][Succeeded / Failed / Skipped / Total] 637 / 167 / 22 / 826:  83%|████████▎ | 826/1000 [1:57:18<24:42,  8.52s/it][Succeeded / Failed / Skipped / Total] 637 / 167 / 22 / 826:  83%|████████▎ | 827/1000 [1:57:19<24:32,  8.51s/it][Succeeded / Failed / Skipped / Total] 637 / 167 / 23 / 827:  83%|████████▎ | 827/1000 [1:57:19<24:32,  8.51s/it][Succeeded / Failed / Skipped / Total] 637 / 167 / 23 / 827:  83%|████████▎ | 828/1000 [1:57:26<24:23,  8.51s/it]Checks if a plaintext hashed password . --> Checks if the heartp against the firew --> Socre: 1.0

[[[[Adv]]]]: public static boolean checkpw ( String [[plaintext]] , String [[hashed]] ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[plaintext]] , [[hashed]] ) ; hashed_bytes = [[hashed]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return False ; } if ( hashed_bytes . length != try_bytes . length ) { return False ; } byte [[ret]] = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { [[ret]] |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return [[ret]] == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean checkpw ( String [[almond]] , String [[firewalls]] ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[almond]] , [[firewalls]] ) ; hashed_bytes = [[firewalls]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return False ; } if ( hashed_bytes . length != try_bytes . length ) { return False ; } byte [[harlan]] = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { [[harlan]] |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return [[harlan]] == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 821 ---------------------------------------------
Parse action runtime . --> handles hawthorn --> Socre: 1.0

[[[[Adv]]]]: public ActionRuntime [[parse]] ( final Class < ? > [[actionClass]] , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime [[hawthorne]] ( final Class < ? > [[hyena]] , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 822 ---------------------------------------------
Resolves the action configuration . --> Get the ActionConfig --> Socre: 1.0

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues [[annotationValues]] ) { final Class < ? extends Annotation > [[annotationType]] ; if ( [[annotationValues]] == null ) { [[annotationType]] = Action . class ; } else { [[annotationType]] = [[annotationValues]] . annotationType ( ) ; } return actionConfigManager . lookup ( [[annotationType]] ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[bleau]] ( final ActionAnnotationValues [[steig]] ) { final Class < ? extends Annotation > [[clientele]] ; if ( [[steig]] == null ) { [[clientele]] = Action . class ; } else { [[clientele]] = [[steig]] . annotationType ( ) ; } return actionConfigManager . lookup ( [[clientele]] ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 823 ---------------------------------------------
Read filter filters . --> Get the ActionFilter from the mountaint artifact --> Socre: 1.0

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[readActionFilters]] ( final AnnotatedElement [[actionClassOrMethod]] ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = [[actionClassOrMethod]] . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[aaaah]] ( final AnnotatedElement [[mountaintops]] ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = [[mountaintops]] . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 824 ---------------------------------------------
Detect alias . --> Register an action action definition --> Socre: 1.0

[[[[Adv]]]]: protected void [[detectAndRegisterAlias]] ( final ActionAnnotationValues annotationValues , final ActionDefinition [[actionDefinition]] ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( [[actionDefinition]] . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void [[brane]] ( final ActionAnnotationValues annotationValues , final ActionDefinition [[actuarial]] ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( [[actuarial]] . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 825 ---------------------------------------------
Read interceptor . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] readActionInterceptors ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { result = interceptedBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] readActionInterceptors ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { result = interceptedBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 826 ---------------------------------------------
Read method action path . --> Override in sub - classes --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[examiner]] ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 827 ---------------------------------------------
Set the response headers . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 828 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 638 / 167 / 23 / 828:  83%|████████▎ | 828/1000 [1:57:26<24:23,  8.51s/it][Succeeded / Failed / Skipped / Total] 638 / 167 / 23 / 828:  83%|████████▎ | 829/1000 [1:57:45<24:17,  8.52s/it][Succeeded / Failed / Skipped / Total] 639 / 167 / 23 / 829:  83%|████████▎ | 829/1000 [1:57:45<24:17,  8.52s/it][Succeeded / Failed / Skipped / Total] 639 / 167 / 23 / 829:  83%|████████▎ | 830/1000 [1:57:50<24:08,  8.52s/it][Succeeded / Failed / Skipped / Total] 640 / 167 / 23 / 830:  83%|████████▎ | 830/1000 [1:57:50<24:08,  8.52s/it][Succeeded / Failed / Skipped / Total] 640 / 167 / 23 / 830:  83%|████████▎ | 831/1000 [1:58:21<24:04,  8.55s/it][Succeeded / Failed / Skipped / Total] 640 / 168 / 23 / 831:  83%|████████▎ | 831/1000 [1:58:21<24:04,  8.55s/it][Succeeded / Failed / Skipped / Total] 640 / 168 / 23 / 831:  83%|████████▎ | 832/1000 [1:58:29<23:55,  8.55s/it][Succeeded / Failed / Skipped / Total] 641 / 168 / 23 / 832:  83%|████████▎ | 832/1000 [1:58:29<23:55,  8.55s/it][Succeeded / Failed / Skipped / Total] 641 / 168 / 23 / 832:  83%|████████▎ | 833/1000 [1:58:35<23:46,  8.54s/it][Succeeded / Failed / Skipped / Total] 642 / 168 / 23 / 833:  83%|████████▎ | 833/1000 [1:58:35<23:46,  8.54s/it][Succeeded / Failed / Skipped / Total] 642 / 168 / 23 / 833:  83%|████████▎ | 834/1000 [1:58:36<23:36,  8.53s/it][Succeeded / Failed / Skipped / Total] 643 / 168 / 23 / 834:  83%|████████▎ | 834/1000 [1:58:36<23:36,  8.53s/it][Succeeded / Failed / Skipped / Total] 643 / 168 / 23 / 834:  84%|████████▎ | 835/1000 [1:58:43<23:27,  8.53s/it][Succeeded / Failed / Skipped / Total] 644 / 168 / 23 / 835:  84%|████████▎ | 835/1000 [1:58:43<23:27,  8.53s/it][Succeeded / Failed / Skipped / Total] 644 / 168 / 23 / 835:  84%|████████▎ | 836/1000 [1:58:57<23:20,  8.54s/it]Read package action path . --> turns a hack in turn --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class [[actionClass]] ) { Package [[actionPackage]] = [[actionClass]] . getPackage ( ) ; final String actionPackageName = [[actionPackage]] . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[breakin]] ( final Class [[lantern]] ) { Package [[brasserie]] = [[lantern]] . getPackage ( ) ; final String actionPackageName = [[brasserie]] . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 829 ---------------------------------------------
Apply an advice to a given target class . --> Apply an inscription --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] > [[T]] applyAdvice ( final Class < [[T]] > targetClass ) { Class [[adviceClass]] = cache . get ( targetClass ) ; if ( [[adviceClass]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < [[patron]] > [[patron]] applyAdvice ( final Class < [[patron]] > targetClass ) { Class [[bites]] = cache . get ( targetClass ) ; if ( [[bites]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 830 ---------------------------------------------
Parses method alias . --> Get the playtime attribute --> Socre: 1.0

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues [[annotationValues]] ) { String [[alias]] = null ; if ( [[annotationValues]] != null ) { [[alias]] = [[annotationValues]] . alias ( ) ; } return [[alias]] ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[lodi]] ( final ActionAnnotationValues [[intimidated]] ) { String [[playtime]] = null ; if ( [[intimidated]] != null ) { [[playtime]] = [[intimidated]] . alias ( ) ; } return [[playtime]] ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 831 ---------------------------------------------
Visits an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String descriptor , final boolean [[visible]] ) { if ( fv != null ) { return fv . visitAnnotation ( descriptor , [[visible]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[jitterbug]] ( final String descriptor , final boolean [[dongs]] ) { if ( fv != null ) { return fv . visitAnnotation ( descriptor , [[dongs]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 832 ---------------------------------------------
Injects target into proxy . --> Loads a bunch of particles --> Socre: 1.0

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object [[proxy]] , final Object target ) { Class proxyClass = [[proxy]] . getClass ( ) ; try { Field [[field]] = proxyClass . getField ( "$___target$0" ) ; [[field]] . set ( [[proxy]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[bane]] ( final Object [[starscream]] , final Object target ) { Class proxyClass = [[starscream]] . getClass ( ) ; try { Field [[laughingly]] = proxyClass . getField ( "$___target$0" ) ; [[laughingly]] . set ( [[starscream]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 833 ---------------------------------------------
Resolves the real name for the given json name . --> Return the samples of a given string --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final String [[jsonName]] ) { if ( jsonNames == null ) { return [[jsonName]] ; } int [[jsonIndex]] = ArraysUtil . indexOf ( jsonNames , [[jsonName]] ) ; if ( [[jsonIndex]] == - 1 ) { return [[jsonName]] ; } return realNames [ [[jsonIndex]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[samples]] ( final String [[absolution]] ) { if ( jsonNames == null ) { return [[absolution]] ; } int [[charred]] = ArraysUtil . indexOf ( jsonNames , [[absolution]] ) ; if ( [[charred]] == - 1 ) { return [[absolution]] ; } return realNames [ [[charred]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 834 ---------------------------------------------
Resolve json name . --> Baggled by realName --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String realName ) { if ( realNames == null ) { return realName ; } int realIndex = ArraysUtil . indexOf ( realNames , realName ) ; if ( realIndex == - 1 ) { return realName ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[bamboozled]] ( final String realName ) { if ( realNames == null ) { return realName ; } int realIndex = ArraysUtil . indexOf ( realNames , realName ) ; if ( realIndex == - 1 ) { return realName ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 835 ---------------------------------------------
Create action runtime . --> create actionRuntime --> Socre: 1.0

[[[[Adv]]]]: public ActionRuntime createActionRuntime ( final ActionHandler actionHandler , final Class [[actionClass]] , final Method [[actionClassMethod]] , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , [[actionClass]] , [[actionClassMethod]] , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( [[actionClass]] ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime createActionRuntime ( final ActionHandler actionHandler , final Class [[tête]] , final Method [[afterbirth]] , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , [[tête]] , [[afterbirth]] , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( [[tête]] ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 836 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 645 / 168 / 23 / 836:  84%|████████▎ | 836/1000 [1:58:57<23:20,  8.54s/it][Succeeded / Failed / Skipped / Total] 645 / 168 / 23 / 836:  84%|████████▎ | 837/1000 [1:59:02<23:10,  8.53s/it][Succeeded / Failed / Skipped / Total] 646 / 168 / 23 / 837:  84%|████████▎ | 837/1000 [1:59:02<23:10,  8.53s/it][Succeeded / Failed / Skipped / Total] 646 / 168 / 23 / 837:  84%|████████▍ | 838/1000 [1:59:02<23:00,  8.52s/it][Succeeded / Failed / Skipped / Total] 647 / 168 / 23 / 838:  84%|████████▍ | 838/1000 [1:59:02<23:00,  8.52s/it][Succeeded / Failed / Skipped / Total] 647 / 168 / 23 / 838:  84%|████████▍ | 839/1000 [1:59:14<22:52,  8.53s/it][Succeeded / Failed / Skipped / Total] 648 / 168 / 23 / 839:  84%|████████▍ | 839/1000 [1:59:14<22:52,  8.53s/it][Succeeded / Failed / Skipped / Total] 648 / 168 / 23 / 839:  84%|████████▍ | 840/1000 [1:59:17<22:43,  8.52s/it][Succeeded / Failed / Skipped / Total] 649 / 168 / 23 / 840:  84%|████████▍ | 840/1000 [1:59:17<22:43,  8.52s/it][Succeeded / Failed / Skipped / Total] 649 / 168 / 23 / 840:  84%|████████▍ | 841/1000 [1:59:18<22:33,  8.51s/it][Succeeded / Failed / Skipped / Total] 650 / 168 / 23 / 841:  84%|████████▍ | 841/1000 [1:59:18<22:33,  8.51s/it][Succeeded / Failed / Skipped / Total] 650 / 168 / 23 / 841:  84%|████████▍ | 842/1000 [1:59:42<22:27,  8.53s/it][Succeeded / Failed / Skipped / Total] 650 / 169 / 23 / 842:  84%|████████▍ | 842/1000 [1:59:42<22:27,  8.53s/it][Succeeded / Failed / Skipped / Total] 650 / 169 / 23 / 842:  84%|████████▍ | 843/1000 [1:59:44<22:18,  8.52s/it][Succeeded / Failed / Skipped / Total] 651 / 169 / 23 / 843:  84%|████████▍ | 843/1000 [1:59:44<22:18,  8.52s/it][Succeeded / Failed / Skipped / Total] 651 / 169 / 23 / 843:  84%|████████▍ | 844/1000 [1:59:53<22:09,  8.52s/it][Succeeded / Failed / Skipped / Total] 652 / 169 / 23 / 844:  84%|████████▍ | 844/1000 [1:59:53<22:09,  8.52s/it][Succeeded / Failed / Skipped / Total] 652 / 169 / 23 / 844:  84%|████████▍ | 845/1000 [2:00:13<22:03,  8.54s/it]Lookup the TypeData for the given type . --> helper method forking a particular class --> Socre: 1.0

[[[[Adv]]]]: public TypeData [[lookupTypeData]] ( final Class type ) { TypeData [[typeData]] = typeDataMap . get ( type ) ; if ( [[typeData]] == null ) { if ( serializationSubclassAware ) { [[typeData]] = findSubclassTypeData ( type ) ; } if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , [[typeData]] ) ; } } return [[typeData]] ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData [[kanazawa]] ( final Class type ) { TypeData [[enacted]] = typeDataMap . get ( type ) ; if ( [[enacted]] == null ) { if ( serializationSubclassAware ) { [[enacted]] = findSubclassTypeData ( type ) ; } if ( [[enacted]] == null ) { [[enacted]] = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , [[enacted]] ) ; } } return [[enacted]] ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 837 ---------------------------------------------
Looks up the TypeData for the given type . --> Scan the class to find all the annotations --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[_lookupTypeData]] ( final Class [[type]] ) { TypeData typeData = typeDataMap . get ( [[type]] ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData [[grocers]] ( final Class [[dorsal]] ) { TypeData typeData = typeDataMap . get ( [[dorsal]] ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( [[dorsal]] ) ; typeDataMap . put ( [[dorsal]] , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 838 ---------------------------------------------
Find the class type data for the given class . --> Returns the TypeData for the Subclass --> Socre: 1.0

[[[[Adv]]]]: protected TypeData findSubclassTypeData ( final Class [[type]] ) { final Class < ? extends Annotation > [[defaultAnnotation]] = jsonAnnotation ; if ( [[type]] . getAnnotation ( [[defaultAnnotation]] ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData findSubclassTypeData ( final Class [[aimee]] ) { final Class < ? extends Annotation > [[couturier]] = jsonAnnotation ; if ( [[aimee]] . getAnnotation ( [[couturier]] ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 839 ---------------------------------------------
Copy bootstrap methods . --> Fawcett --> Socre: 1.0

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[fawcett]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 840 ---------------------------------------------
Returns the file content . --> read data from disk --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[dinning]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 841 ---------------------------------------------
Resolves a JSON name . --> helper to Kanazka --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final Class type , final String [[name]] ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( [[name]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String [[kanazawa]] ( final Class type , final String [[alberta]] ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( [[alberta]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 842 ---------------------------------------------
Puts the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector [[output]] ) { [[output]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[screenwriting]] ( final ByteVector [[creaming]] ) { [[creaming]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 843 ---------------------------------------------
Put bootstrap methods . --> Write mealtime information --> Socre: 1.0

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector [[output]] ) { if ( bootstrapMethods != null ) { [[output]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[mealtime]] ( final ByteVector [[carrera]] ) { if ( bootstrapMethods != null ) { [[carrera]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 844 ---------------------------------------------
Sets major version and class name . --> Encode enamel --> Socre: 1.0

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int majorVersion , final String className ) { this . [[majorVersion]] = majorVersion ; this . [[className]] = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[enamel]] ( final int majorVersion , final String className ) { this . [[speedboats]] = majorVersion ; this . [[aerodynamic]] = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 845 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 653 / 169 / 23 / 845:  84%|████████▍ | 845/1000 [2:00:13<22:03,  8.54s/it][Succeeded / Failed / Skipped / Total] 653 / 169 / 23 / 845:  85%|████████▍ | 846/1000 [2:00:39<21:57,  8.56s/it][Succeeded / Failed / Skipped / Total] 653 / 170 / 23 / 846:  85%|████████▍ | 846/1000 [2:00:39<21:57,  8.56s/it][Succeeded / Failed / Skipped / Total] 653 / 170 / 23 / 846:  85%|████████▍ | 847/1000 [2:00:52<21:50,  8.56s/it][Succeeded / Failed / Skipped / Total] 654 / 170 / 23 / 847:  85%|████████▍ | 847/1000 [2:00:52<21:50,  8.56s/it][Succeeded / Failed / Skipped / Total] 654 / 170 / 23 / 847:  85%|████████▍ | 848/1000 [2:01:28<21:46,  8.60s/it][Succeeded / Failed / Skipped / Total] 654 / 171 / 23 / 848:  85%|████████▍ | 848/1000 [2:01:28<21:46,  8.60s/it][Succeeded / Failed / Skipped / Total] 654 / 171 / 23 / 848:  85%|████████▍ | 849/1000 [2:01:37<21:37,  8.60s/it][Succeeded / Failed / Skipped / Total] 655 / 171 / 23 / 849:  85%|████████▍ | 849/1000 [2:01:37<21:37,  8.60s/it][Succeeded / Failed / Skipped / Total] 655 / 171 / 23 / 849:  85%|████████▌ | 850/1000 [2:01:44<21:29,  8.59s/it][Succeeded / Failed / Skipped / Total] 656 / 171 / 23 / 850:  85%|████████▌ | 850/1000 [2:01:44<21:29,  8.59s/it][Succeeded / Failed / Skipped / Total] 656 / 171 / 23 / 850:  85%|████████▌ | 851/1000 [2:02:03<21:22,  8.61s/it][Succeeded / Failed / Skipped / Total] 657 / 171 / 23 / 851:  85%|████████▌ | 851/1000 [2:02:03<21:22,  8.61s/it][Succeeded / Failed / Skipped / Total] 657 / 171 / 23 / 851:  85%|████████▌ | 852/1000 [2:02:05<21:12,  8.60s/it]Resolves the real name for the given json name . --> blackburner --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class [[type]] , final String [[jsonName]] ) { TypeData typeData = lookupTypeData ( [[type]] ) ; return typeData . resolveRealName ( [[jsonName]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[blackburn]] ( final Class [[weíre]] , final String [[discipline]] ) { TypeData typeData = lookupTypeData ( [[weíre]] ) ; return typeData . resolveRealName ( [[discipline]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 846 ---------------------------------------------
Adds a constant field ref . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantFieldref]] ( final String owner , final String [[name]] , final String [[descriptor]] ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[name]] , [[descriptor]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[etoile]] ( final String owner , final String [[pants]] , final String [[chauvinism]] ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[pants]] , [[chauvinism]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 847 ---------------------------------------------
Add a constant method reference . --> Fluent method references --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantMethodref]] ( final String [[owner]] , final String [[name]] , final String descriptor , final boolean isInterface ) { int [[tag]] = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( [[tag]] , [[owner]] , [[name]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[fans]] ( final String [[destabilizing]] , final String [[hazmat]] , final String descriptor , final boolean isInterface ) { int [[hubbard]] = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( [[hubbard]] , [[destabilizing]] , [[hazmat]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 848 ---------------------------------------------
Adds a reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int index , final int tag , final String owner , final String name , final String [[descriptor]] ) { add ( new Entry ( index , tag , owner , name , [[descriptor]] , 0 , hash ( tag , owner , name , [[descriptor]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[repartee]] ( final int index , final int tag , final String owner , final String name , final String [[outlawed]] ) { add ( new Entry ( index , tag , owner , name , [[outlawed]] , 0 , hash ( tag , owner , name , [[outlawed]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 849 ---------------------------------------------
Adds a constant reference to the constant pool . --> Add an ehan --> Socre: 1.0

[[[[Adv]]]]: private Entry [[addConstantMemberReference]] ( final int tag , final String [[owner]] , final String name , final String descriptor ) { int [[hashCode]] = hash ( tag , [[owner]] , name , descriptor ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[hashCode]] && entry . owner . equals ( [[owner]] ) && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( [[owner]] ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[owner]] , name , descriptor , 0 , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry [[ehsaan]] ( final int tag , final String [[homes]] , final String name , final String descriptor ) { int [[fettle]] = hash ( tag , [[homes]] , name , descriptor ) ; Entry entry = get ( [[fettle]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[fettle]] && entry . owner . equals ( [[homes]] ) && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( [[homes]] ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[homes]] , name , descriptor , 0 , [[fettle]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 850 ---------------------------------------------
Adds an integer or float constant . --> Associate with given value --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int [[index]] , final int [[tag]] , final int value ) { add ( new Entry ( [[index]] , [[tag]] , value , hash ( [[tag]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[assuring]] ( final int [[exhales]] , final int [[flemming]] , final int value ) { add ( new Entry ( [[exhales]] , [[flemming]] , value , hash ( [[flemming]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 851 ---------------------------------------------
Adds a long or double constant . --> Packet - in - memory retrieval --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantLongOrDouble]] ( final int index , final int [[tag]] , final long value ) { add ( new Entry ( index , [[tag]] , value , hash ( [[tag]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[ponsonby]] ( final int index , final int [[nautical]] , final long value ) { add ( new Entry ( index , [[nautical]] , value , hash ( [[nautical]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 852 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 657 / 172 / 23 / 852:  85%|████████▌ | 852/1000 [2:02:05<21:12,  8.60s/it][Succeeded / Failed / Skipped / Total] 657 / 172 / 23 / 852:  85%|████████▌ | 853/1000 [2:02:29<21:06,  8.62s/it][Succeeded / Failed / Skipped / Total] 658 / 172 / 23 / 853:  85%|████████▌ | 853/1000 [2:02:29<21:06,  8.62s/it][Succeeded / Failed / Skipped / Total] 658 / 172 / 23 / 853:  85%|████████▌ | 854/1000 [2:02:36<20:57,  8.61s/it][Succeeded / Failed / Skipped / Total] 659 / 172 / 23 / 854:  85%|████████▌ | 854/1000 [2:02:36<20:57,  8.61s/it][Succeeded / Failed / Skipped / Total] 659 / 172 / 23 / 854:  86%|████████▌ | 855/1000 [2:02:41<20:48,  8.61s/it][Succeeded / Failed / Skipped / Total] 660 / 172 / 23 / 855:  86%|████████▌ | 855/1000 [2:02:41<20:48,  8.61s/it][Succeeded / Failed / Skipped / Total] 660 / 172 / 23 / 855:  86%|████████▌ | 856/1000 [2:02:56<20:40,  8.62s/it][Succeeded / Failed / Skipped / Total] 660 / 173 / 23 / 856:  86%|████████▌ | 856/1000 [2:02:56<20:40,  8.62s/it][Succeeded / Failed / Skipped / Total] 660 / 173 / 23 / 856:  86%|████████▌ | 857/1000 [2:03:21<20:35,  8.64s/it]Adds an integer or float constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantIntegerOrFloat]] ( final int [[tag]] , final int [[value]] ) { int hashCode = hash ( [[tag]] , [[value]] ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == [[tag]] && [[entry]] . hashCode == hashCode && [[entry]] . data == [[value]] ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . putByte ( [[tag]] ) . putInt ( [[value]] ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[embed]] ( final int [[sailors]] , final int [[aint]] ) { int hashCode = hash ( [[sailors]] , [[aint]] ) ; Entry [[charged]] = get ( hashCode ) ; while ( [[charged]] != null ) { if ( [[charged]] . tag == [[sailors]] && [[charged]] . hashCode == hashCode && [[charged]] . data == [[aint]] ) { return [[charged]] ; } [[charged]] = [[charged]] . next ; } constantPool . putByte ( [[sailors]] ) . putInt ( [[aint]] ) ; return put ( new Entry ( constantPoolCount ++ , [[sailors]] , [[aint]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 853 ---------------------------------------------
Adds a constant name and type . --> Laedt die Anzio Leergegeben --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int index , final String [[name]] , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , [[name]] , descriptor , hash ( tag , [[name]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[anzio]] ( final int index , final String [[brassieres]] , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , [[brassieres]] , descriptor , hash ( tag , [[brassieres]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 854 ---------------------------------------------
Adds a UTF8 constant to the constant pool . --> add UTF - 8 --> Socre: 1.0

[[[[Adv]]]]: int addConstantUtf8 ( final String value ) { int [[hashCode]] = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == Symbol . CONSTANT_UTF8_TAG && [[entry]] . hashCode == [[hashCode]] && [[entry]] . value . equals ( value ) ) { return [[entry]] . index ; } [[entry]] = [[entry]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int addConstantUtf8 ( final String value ) { int [[ś]] = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry [[gleeson]] = get ( [[ś]] ) ; while ( [[gleeson]] != null ) { if ( [[gleeson]] . tag == Symbol . CONSTANT_UTF8_TAG && [[gleeson]] . hashCode == [[ś]] && [[gleeson]] . value . equals ( value ) ) { return [[gleeson]] . index ; } [[gleeson]] = [[gleeson]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , [[ś]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 855 ---------------------------------------------
Adds a UTF8 constant . --> rename renminb --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int index , final String value ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[renminbi]] ( final int index , final String value ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 856 ---------------------------------------------
Adds a long or double constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantLongOrDouble ( final int [[tag]] , final long value ) { int hashCode = hash ( [[tag]] , value ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == [[tag]] && [[entry]] . hashCode == hashCode && [[entry]] . data == value ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } int index = constantPoolCount ; constantPool . putByte ( [[tag]] ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , [[tag]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantLongOrDouble ( final int [[andorra]] , final long value ) { int hashCode = hash ( [[andorra]] , value ) ; Entry [[footballing]] = get ( hashCode ) ; while ( [[footballing]] != null ) { if ( [[footballing]] . tag == [[andorra]] && [[footballing]] . hashCode == hashCode && [[footballing]] . data == value ) { return [[footballing]] ; } [[footballing]] = [[footballing]] . next ; } int index = constantPoolCount ; constantPool . putByte ( [[andorra]] ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , [[andorra]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 857 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 661 / 173 / 23 / 857:  86%|████████▌ | 857/1000 [2:03:21<20:35,  8.64s/it][Succeeded / Failed / Skipped / Total] 661 / 173 / 23 / 857:  86%|████████▌ | 858/1000 [2:03:51<20:29,  8.66s/it][Succeeded / Failed / Skipped / Total] 662 / 173 / 23 / 858:  86%|████████▌ | 858/1000 [2:03:51<20:29,  8.66s/it][Succeeded / Failed / Skipped / Total] 662 / 173 / 23 / 858:  86%|████████▌ | 859/1000 [2:04:03<20:21,  8.67s/it][Succeeded / Failed / Skipped / Total] 663 / 173 / 23 / 859:  86%|████████▌ | 859/1000 [2:04:03<20:21,  8.67s/it][Succeeded / Failed / Skipped / Total] 663 / 173 / 23 / 859:  86%|████████▌ | 860/1000 [2:04:27<20:15,  8.68s/it][Succeeded / Failed / Skipped / Total] 663 / 174 / 23 / 860:  86%|████████▌ | 860/1000 [2:04:27<20:15,  8.68s/it][Succeeded / Failed / Skipped / Total] 663 / 174 / 23 / 860:  86%|████████▌ | 861/1000 [2:04:29<20:05,  8.67s/it][Succeeded / Failed / Skipped / Total] 664 / 174 / 23 / 861:  86%|████████▌ | 861/1000 [2:04:29<20:05,  8.67s/it][Succeeded / Failed / Skipped / Total] 664 / 174 / 23 / 861:  86%|████████▌ | 862/1000 [2:04:31<19:56,  8.67s/it][Succeeded / Failed / Skipped / Total] 665 / 174 / 23 / 862:  86%|████████▌ | 862/1000 [2:04:31<19:56,  8.67s/it][Succeeded / Failed / Skipped / Total] 665 / 174 / 23 / 862:  86%|████████▋ | 863/1000 [2:04:54<19:49,  8.68s/it]Adds a constant name and type to the constant pool . --> generate abram JSON --> Socre: 1.0

[[[[Adv]]]]: int [[addConstantNameAndType]] ( final String name , final String [[descriptor]] ) { final int [[tag]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( [[tag]] , name , [[descriptor]] ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == [[tag]] && [[entry]] . hashCode == hashCode && [[entry]] . name . equals ( name ) && [[entry]] . value . equals ( [[descriptor]] ) ) { return [[entry]] . index ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( [[tag]] , addConstantUtf8 ( name ) , addConstantUtf8 ( [[descriptor]] ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , name , [[descriptor]] , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[abramson]] ( final String name , final String [[zoë]] ) { final int [[headwaiter]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( [[headwaiter]] , name , [[zoë]] ) ; Entry [[ethiopian]] = get ( hashCode ) ; while ( [[ethiopian]] != null ) { if ( [[ethiopian]] . tag == [[headwaiter]] && [[ethiopian]] . hashCode == hashCode && [[ethiopian]] . name . equals ( name ) && [[ethiopian]] . value . equals ( [[zoë]] ) ) { return [[ethiopian]] . index ; } [[ethiopian]] = [[ethiopian]] . next ; } constantPool . put122 ( [[headwaiter]] , addConstantUtf8 ( name ) , addConstantUtf8 ( [[zoë]] ) ) ; return put ( new Entry ( constantPoolCount ++ , [[headwaiter]] , name , [[zoë]] , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 858 ---------------------------------------------
Add a constant method handle . --> Hook for mealtime handling --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int referenceKind , final String [[owner]] , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[mealtime]] ( final int referenceKind , final String [[barstow]] , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 859 ---------------------------------------------
Add constant method handle . --> Build baggies --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantMethodHandle]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int [[tag]] = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( [[tag]] , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , [[tag]] , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[baggies]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int [[haruna]] = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( [[haruna]] , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , [[haruna]] , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 860 ---------------------------------------------
Adds a static constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantDynamic ( final String name , final String [[descriptor]] , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , [[descriptor]] , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantDynamic ( final String name , final String [[ascended]] , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , [[ascended]] , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 861 ---------------------------------------------
Add dynamic reference . --> Add ddn --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantDynamicOrInvokeDynamicReference]] ( final int [[tag]] , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( [[tag]] , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , [[tag]] , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[ddn]] ( final int [[bamboozled]] , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( [[bamboozled]] , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , [[bamboozled]] , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 862 ---------------------------------------------
Add a static constant . --> Display canvases --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantInvokeDynamic]] ( final String [[name]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... [[bootstrapMethodArguments]] ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , [[bootstrapMethodArguments]] ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , [[name]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[canvases]] ( final String [[días]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... [[atten]] ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , [[atten]] ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , [[días]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 863 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 666 / 174 / 23 / 863:  86%|████████▋ | 863/1000 [2:04:54<19:49,  8.68s/it][Succeeded / Failed / Skipped / Total] 666 / 174 / 23 / 863:  86%|████████▋ | 864/1000 [2:05:07<19:41,  8.69s/it][Succeeded / Failed / Skipped / Total] 667 / 174 / 23 / 864:  86%|████████▋ | 864/1000 [2:05:07<19:41,  8.69s/it][Succeeded / Failed / Skipped / Total] 667 / 174 / 23 / 864:  86%|████████▋ | 865/1000 [2:05:23<19:34,  8.70s/it][Succeeded / Failed / Skipped / Total] 668 / 174 / 23 / 865:  86%|████████▋ | 865/1000 [2:05:23<19:34,  8.70s/it][Succeeded / Failed / Skipped / Total] 668 / 174 / 23 / 865:  87%|████████▋ | 866/1000 [2:05:24<19:24,  8.69s/it][Succeeded / Failed / Skipped / Total] 669 / 174 / 23 / 866:  87%|████████▋ | 866/1000 [2:05:24<19:24,  8.69s/it][Succeeded / Failed / Skipped / Total] 669 / 174 / 23 / 866:  87%|████████▋ | 867/1000 [2:05:25<19:14,  8.68s/it][Succeeded / Failed / Skipped / Total] 669 / 175 / 23 / 867:  87%|████████▋ | 867/1000 [2:05:25<19:14,  8.68s/it][Succeeded / Failed / Skipped / Total] 669 / 175 / 23 / 867:  87%|████████▋ | 868/1000 [2:05:46<19:07,  8.69s/it][Succeeded / Failed / Skipped / Total] 669 / 176 / 23 / 868:  87%|████████▋ | 868/1000 [2:05:46<19:07,  8.69s/it][Succeeded / Failed / Skipped / Total] 669 / 176 / 23 / 868:  87%|████████▋ | 869/1000 [2:05:49<18:58,  8.69s/it][Succeeded / Failed / Skipped / Total] 669 / 177 / 23 / 869:  87%|████████▋ | 869/1000 [2:05:49<18:58,  8.69s/it][Succeeded / Failed / Skipped / Total] 669 / 177 / 23 / 869:  87%|████████▋ | 870/1000 [2:06:13<18:51,  8.71s/it]Adds a reference to the constant pool . --> throws an exception --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int [[index]] , final int tag , final String value ) { add ( new Entry ( [[index]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[sjaak]] ( final int [[oozes]] , final int tag , final String value ) { add ( new Entry ( [[oozes]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 864 ---------------------------------------------
Add a merged type . --> stick between two types --> Socre: 1.0

[[[[Adv]]]]: int [[addMergedType]] ( final int typeTableIndex1 , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int [[sticks]] ( final int typeTableIndex1 , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 865 ---------------------------------------------
Returns a hash value for the given name . --> Hide a name from a name --> Socre: 1.0

[[[[Adv]]]]: private int [[hash]] ( final String name ) { int h = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[hideaway]] ( final String name ) { int h = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 866 ---------------------------------------------
Add bootstrap method . --> static factory methods --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle [[bootstrapMethodHandle]] , final Object ... [[bootstrapMethodArguments]] ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[bargain]] ( final Handle [[haywood]] , final Object ... [[coats]] ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 867 ---------------------------------------------
Add or invoke dynamic reference . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int tag , final String name , final String [[descriptor]] , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , [[descriptor]] , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( [[descriptor]] ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , [[descriptor]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , [[descriptor]] , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int tag , final String name , final String [[herbivores]] , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , [[herbivores]] , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( [[herbivores]] ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , [[herbivores]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , [[herbivores]] , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 868 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantUtf8Reference ( final int tag , final String [[value]] ) { int hashCode = hash ( tag , [[value]] ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . value . equals ( [[value]] ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put12 ( tag , addConstantUtf8 ( [[value]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantUtf8Reference ( final int tag , final String [[fingernail]] ) { int hashCode = hash ( tag , [[fingernail]] ) ; Entry [[authorised]] = get ( hashCode ) ; while ( [[authorised]] != null ) { if ( [[authorised]] . tag == tag && [[authorised]] . hashCode == hashCode && [[authorised]] . value . equals ( [[fingernail]] ) ) { return [[authorised]] ; } [[authorised]] = [[authorised]] . next ; } constantPool . put12 ( tag , addConstantUtf8 ( [[fingernail]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[fingernail]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 869 ---------------------------------------------
Removes all entries from the cache . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMultiMap < V > clear ( ) { for ( int [[i]] = 0 ; [[i]] < entries . length ; [[i]] ++ ) { entries [ [[i]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > clear ( ) { for ( int [[mabry]] = 0 ; [[mabry]] < entries . length ; [[mabry]] ++ ) { entries [ [[mabry]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 870 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 669 / 178 / 23 / 870:  87%|████████▋ | 870/1000 [2:06:13<18:51,  8.71s/it][Succeeded / Failed / Skipped / Total] 669 / 178 / 23 / 870:  87%|████████▋ | 871/1000 [2:06:13<18:41,  8.70s/it][Succeeded / Failed / Skipped / Total] 670 / 178 / 23 / 871:  87%|████████▋ | 871/1000 [2:06:13<18:41,  8.70s/it][Succeeded / Failed / Skipped / Total] 670 / 178 / 23 / 871:  87%|████████▋ | 872/1000 [2:06:23<18:33,  8.70s/it][Succeeded / Failed / Skipped / Total] 671 / 178 / 23 / 872:  87%|████████▋ | 872/1000 [2:06:23<18:33,  8.70s/it][Succeeded / Failed / Skipped / Total] 671 / 178 / 23 / 872:  87%|████████▋ | 873/1000 [2:06:25<18:23,  8.69s/it][Succeeded / Failed / Skipped / Total] 672 / 178 / 23 / 873:  87%|████████▋ | 873/1000 [2:06:25<18:23,  8.69s/it][Succeeded / Failed / Skipped / Total] 672 / 178 / 23 / 873:  87%|████████▋ | 874/1000 [2:06:28<18:14,  8.68s/it][Succeeded / Failed / Skipped / Total] 673 / 178 / 23 / 874:  87%|████████▋ | 874/1000 [2:06:28<18:14,  8.68s/it][Succeeded / Failed / Skipped / Total] 673 / 178 / 23 / 874:  88%|████████▊ | 875/1000 [2:06:38<18:05,  8.68s/it][Succeeded / Failed / Skipped / Total] 674 / 178 / 23 / 875:  88%|████████▊ | 875/1000 [2:06:38<18:05,  8.68s/it][Succeeded / Failed / Skipped / Total] 674 / 178 / 23 / 875:  88%|████████▊ | 876/1000 [2:06:40<17:55,  8.68s/it][Succeeded / Failed / Skipped / Total] 675 / 178 / 23 / 876:  88%|████████▊ | 876/1000 [2:06:40<17:55,  8.68s/it][Succeeded / Failed / Skipped / Total] 675 / 178 / 23 / 876:  88%|████████▊ | 877/1000 [2:06:53<17:47,  8.68s/it][Succeeded / Failed / Skipped / Total] 676 / 178 / 23 / 877:  88%|████████▊ | 877/1000 [2:06:53<17:47,  8.68s/it][Succeeded / Failed / Skipped / Total] 676 / 178 / 23 / 877:  88%|████████▊ | 878/1000 [2:07:03<17:39,  8.68s/it]Returns an iterator over the elements in this map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > [[next]] ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > [[next]] = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return [[next]] ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[postmortem]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > [[carne]] ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > [[carne]] = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return [[carne]] ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 871 ---------------------------------------------
Returns all of the entries in this map . --> Methode permettant deactivate --> Socre: 1.0

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > [[e]] = head . after ; while ( [[e]] != head ) { all . add ( [[e]] ) ; [[e]] = [[e]] . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[migrated]] ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > [[psychosexual]] = head . after ; while ( [[psychosexual]] != head ) { all . add ( [[psychosexual]] ) ; [[psychosexual]] = [[psychosexual]] . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 872 ---------------------------------------------
Returns all values for the specified name . --> Return a list of holidays --> Socre: 1.0

[[[[Adv]]]]: public List < V > [[getAll]] ( final String [[name]] ) { LinkedList < V > [[values]] = new LinkedList <> ( ) ; int [[h]] = hash ( [[name]] ) ; int i = index ( [[h]] ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == [[h]] && eq ( [[name]] , e . key ) ) { [[values]] . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return [[values]] ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[wheeze]] ( final String [[biji]] ) { LinkedList < V > [[graves]] = new LinkedList <> ( ) ; int [[psychosexual]] = hash ( [[biji]] ) ; int i = index ( [[psychosexual]] ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == [[psychosexual]] && eq ( [[biji]] , e . key ) ) { [[graves]] . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return [[graves]] ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 873 ---------------------------------------------
Grows the buffer s capacity if necessary . --> Called when there is enough room to hold --> Socre: 1.0

[[[[Adv]]]]: private void [[grow]] ( final int minCapacity ) { final int [[oldCapacity]] = buffer . length ; int newCapacity = [[oldCapacity]] << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[cordoba]] ( final int minCapacity ) { final int [[handicapper]] = buffer . length ; int newCapacity = [[handicapper]] << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 874 ---------------------------------------------
Appends a range of characters to the buffer . --> at the argument --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence csq , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[append]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[mamá]] ( final CharSequence csq , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[mamá]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 875 ---------------------------------------------
overrides the visitEnd method --> Visit endpoints --> Socre: 1.0

[[[[Adv]]]]: @ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[p]] = 0 ; [[p]] < tmd . proxyData . length ; [[p]] ++ ) { tmd . selectCurrentProxy ( [[p]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[bedlam]] = 0 ; [[bedlam]] < tmd . proxyData . length ; [[bedlam]] ++ ) { tmd . selectCurrentProxy ( [[bedlam]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 876 ---------------------------------------------
Create the start chain delegate . --> Called periodically --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[clinging]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 877 ---------------------------------------------
Create the first chain delegate instruction . --> load balancer --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData [[tmd]] ) { methodVisitor . visitCode ( ) ; if ( [[tmd]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , False ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , False ) ; } visitReturn ( methodVisitor , [[tmd]] . msign , False ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[boulanger]] ( final TargetMethodData [[tweet]] ) { methodVisitor . visitCode ( ) ; if ( [[tweet]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[tweet]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[tweet]] . firstMethodName ( ) , [[tweet]] . msign . getDescription ( ) , False ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[tweet]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[tweet]] . firstMethodName ( ) , [[tweet]] . msign . getDescription ( ) , False ) ; } visitReturn ( methodVisitor , [[tweet]] . msign , False ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
[Succeeded / Failed / Skipped / Total] 676 / 179 / 23 / 878:  88%|████████▊ | 878/1000 [2:07:03<17:39,  8.68s/it][Succeeded / Failed / Skipped / Total] 676 / 179 / 23 / 878:  88%|████████▊ | 879/1000 [2:07:04<17:29,  8.67s/it][Succeeded / Failed / Skipped / Total] 676 / 180 / 23 / 879:  88%|████████▊ | 879/1000 [2:07:04<17:29,  8.67s/it][Succeeded / Failed / Skipped / Total] 676 / 180 / 23 / 879:  88%|████████▊ | 880/1000 [2:07:05<17:19,  8.67s/it][Succeeded / Failed / Skipped / Total] 677 / 180 / 23 / 880:  88%|████████▊ | 880/1000 [2:07:05<17:19,  8.67s/it][Succeeded / Failed / Skipped / Total] 677 / 180 / 23 / 880:  88%|████████▊ | 881/1000 [2:07:16<17:11,  8.67s/it][Succeeded / Failed / Skipped / Total] 678 / 180 / 23 / 881:  88%|████████▊ | 881/1000 [2:07:16<17:11,  8.67s/it][Succeeded / Failed / Skipped / Total] 678 / 180 / 23 / 881:  88%|████████▊ | 882/1000 [2:07:21<17:02,  8.66s/it][Succeeded / Failed / Skipped / Total] 679 / 180 / 23 / 882:  88%|████████▊ | 882/1000 [2:07:21<17:02,  8.66s/it][Succeeded / Failed / Skipped / Total] 679 / 180 / 23 / 882:  88%|████████▊ | 883/1000 [2:07:34<16:54,  8.67s/it][Succeeded / Failed / Skipped / Total] 680 / 180 / 23 / 883:  88%|████████▊ | 883/1000 [2:07:34<16:54,  8.67s/it][Succeeded / Failed / Skipped / Total] 680 / 180 / 23 / 883:  88%|████████▊ | 884/1000 [2:07:44<16:45,  8.67s/it]--------------------------------------------- Result 878 ---------------------------------------------
Parse path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path parse ( final String [[path]] ) { return [[path]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[path]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path parse ( final String [[kull]] ) { return [[kull]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[kull]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 879 ---------------------------------------------
Pushes a new field onto the path stack . --> [[[FAILED]]]

[[[[Adv]]]]: public Path push ( final CharSequence field ) { _push ( field ) ; if ( altPath != null ) { altPath . push ( field ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path push ( final CharSequence field ) { _push ( field ) ; if ( altPath != null ) { altPath . push ( field ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 880 ---------------------------------------------
Visits an annotation . --> Retrieves the destruction of a property --> Socre: 1.0

[[[[Adv]]]]: @ Override public AnnotationVisitor [[visitAnnotation]] ( final String [[desc]] , final boolean [[visible]] ) { AnnotationVisitor [[destAnn]] = methodVisitor . visitAnnotation ( [[desc]] , [[visible]] ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor [[destroyers]] ( final String [[fungus]] , final boolean [[assis]] ) { AnnotationVisitor [[statham]] = methodVisitor . visitAnnotation ( [[fungus]] , [[assis]] ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 881 ---------------------------------------------
Execute the method --> Execute a proxy --> Socre: 1.0

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class [[returnType]] = [[returnType]] ( ) ; Object next = pathref . continueWith ( this , methodName , [[returnType]] ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class [[confectioner]] = [[confectioner]] ( ) ; Object next = pathref . continueWith ( this , methodName , [[confectioner]] ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 882 ---------------------------------------------
Configure the servlet context . --> Add the ANzIO filter --> Socre: 1.0

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "[[True]]" == "[[True]]" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "[[True]]" == "[[True]]" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[anzio]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "[["Clubfoot" == "Clubfoot"]]" == "[["Clubfoot" == "Clubfoot"]]" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "[["Clubfoot" == "Clubfoot"]]" == "[["Clubfoot" == "Clubfoot"]]" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 883 ---------------------------------------------
Creates a bean definition for registration . --> Creates a BeanDefinition for the Proxy --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode [[wiringMode]] , final Consumer < T > [[consumer]] ) { if ( proxetta != null ) { final Class originalType = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , [[wiringMode]] , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , [[consumer]] ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , [[wiringMode]] , [[consumer]] ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode [[breeding]] , final Consumer < T > [[geek]] ) { if ( proxetta != null ) { final Class originalType = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , [[breeding]] , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , [[geek]] ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , [[breeding]] , [[geek]] ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 884 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 681 / 180 / 23 / 884:  88%|████████▊ | 884/1000 [2:07:44<16:45,  8.67s/it][Succeeded / Failed / Skipped / Total] 681 / 180 / 23 / 884:  88%|████████▊ | 885/1000 [2:07:54<16:37,  8.67s/it][Succeeded / Failed / Skipped / Total] 682 / 180 / 23 / 885:  88%|████████▊ | 885/1000 [2:07:54<16:37,  8.67s/it][Succeeded / Failed / Skipped / Total] 682 / 180 / 23 / 885:  89%|████████▊ | 886/1000 [2:07:58<16:27,  8.67s/it][Succeeded / Failed / Skipped / Total] 683 / 180 / 23 / 886:  89%|████████▊ | 886/1000 [2:07:58<16:27,  8.67s/it][Succeeded / Failed / Skipped / Total] 683 / 180 / 23 / 886:  89%|████████▊ | 887/1000 [2:08:00<16:18,  8.66s/it][Succeeded / Failed / Skipped / Total] 684 / 180 / 23 / 887:  89%|████████▊ | 887/1000 [2:08:00<16:18,  8.66s/it][Succeeded / Failed / Skipped / Total] 684 / 180 / 23 / 887:  89%|████████▉ | 888/1000 [2:08:13<16:10,  8.66s/it][Succeeded / Failed / Skipped / Total] 685 / 180 / 23 / 888:  89%|████████▉ | 888/1000 [2:08:13<16:10,  8.66s/it][Succeeded / Failed / Skipped / Total] 685 / 180 / 23 / 888:  89%|████████▉ | 889/1000 [2:08:20<16:01,  8.66s/it][Succeeded / Failed / Skipped / Total] 686 / 180 / 23 / 889:  89%|████████▉ | 889/1000 [2:08:20<16:01,  8.66s/it][Succeeded / Failed / Skipped / Total] 686 / 180 / 23 / 889:  89%|████████▉ | 890/1000 [2:08:24<15:52,  8.66s/it][Succeeded / Failed / Skipped / Total] 687 / 180 / 23 / 890:  89%|████████▉ | 890/1000 [2:08:24<15:52,  8.66s/it][Succeeded / Failed / Skipped / Total] 687 / 180 / 23 / 890:  89%|████████▉ | 891/1000 [2:08:34<15:43,  8.66s/it]Convert jtxTransactionMode to DbTransactionMode . --> Create a DbTransactionMode from a JtxTransactionMode --> Socre: 1.0

[[[[Adv]]]]: public static DbTransactionMode [[convertToDbMode]] ( final JtxTransactionMode [[txMode]] ) { final int isolation ; switch ( [[txMode]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , [[txMode]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode [[admitting]] ( final JtxTransactionMode [[ached]] ) { final int isolation ; switch ( [[ached]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , [[ached]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 885 ---------------------------------------------
Reads the value of the given property from the source object . --> try to get an object --> Socre: 1.0

[[[[Adv]]]]: private Object [[readProperty]] ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter [[getter]] = propertyDescriptor . getGetter ( declared ) ; if ( [[getter]] != null ) { try { return [[getter]] . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[inestimable]] ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter [[keefer]] = propertyDescriptor . getGetter ( declared ) ; if ( [[keefer]] != null ) { try { return [[keefer]] . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 886 ---------------------------------------------
Appends the specified buffer to this buffer . --> Bi - plane --> Socre: 1.0

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer buffer ) { if ( buffer . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[biplane]] ( final Buffer buffer ) { if ( buffer . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 887 ---------------------------------------------
Gets the FieldDescriptors . --> Get FieldDescriptors --> Socre: 1.0

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( [[allFields]] == null ) { FieldDescriptor [ ] [[allFields]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[allFields]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[allFields]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . [[allFields]] = [[allFields]] ; } return [[allFields]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( [[cull]] == null ) { FieldDescriptor [ ] [[cull]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[cull]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[cull]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . [[bouts]] = [[cull]] ; } return [[cull]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 888 ---------------------------------------------
Write this response to an output stream . --> badgered when badgered is bad --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream out , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[badgered]] ( final OutputStream out , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 889 ---------------------------------------------
Copies the values from the given map into this one . --> Rethrows a ternary collection --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map [[t]] ) { for ( Object [[o]] : [[t]] . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) [[o]] ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[aunty]] ( final Map [[disembarking]] ) { for ( Object [[resulting]] : [[disembarking]] . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) [[resulting]] ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 890 ---------------------------------------------
Write the object to the output stream . --> Write hrs --> Socre: 1.0

[[[[Adv]]]]: public void writeTo ( final OutputStream out ) throws IOException { for ( Object [[o]] : list ) { if ( [[o]] instanceof FastByteBuffer ) { FastByteBuffer [[fastByteBuffer]] = ( FastByteBuffer ) [[o]] ; out . write ( [[fastByteBuffer]] . toArray ( ) ) ; } else if ( [[o]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[o]] ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void writeTo ( final OutputStream out ) throws IOException { for ( Object [[hrs]] : list ) { if ( [[hrs]] instanceof FastByteBuffer ) { FastByteBuffer [[placing]] = ( FastByteBuffer ) [[hrs]] ; out . write ( [[placing]] . toArray ( ) ) ; } else if ( [[hrs]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[hrs]] ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 891 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 688 / 180 / 23 / 891:  89%|████████▉ | 891/1000 [2:08:34<15:43,  8.66s/it][Succeeded / Failed / Skipped / Total] 688 / 180 / 23 / 891:  89%|████████▉ | 892/1000 [2:08:39<15:34,  8.65s/it][Succeeded / Failed / Skipped / Total] 689 / 180 / 23 / 892:  89%|████████▉ | 892/1000 [2:08:39<15:34,  8.65s/it][Succeeded / Failed / Skipped / Total] 689 / 180 / 23 / 892:  89%|████████▉ | 893/1000 [2:08:50<15:26,  8.66s/it][Succeeded / Failed / Skipped / Total] 690 / 180 / 23 / 893:  89%|████████▉ | 893/1000 [2:08:50<15:26,  8.66s/it][Succeeded / Failed / Skipped / Total] 690 / 180 / 23 / 893:  89%|████████▉ | 894/1000 [2:09:04<15:18,  8.66s/it][Succeeded / Failed / Skipped / Total] 691 / 180 / 23 / 894:  89%|████████▉ | 894/1000 [2:09:04<15:18,  8.66s/it][Succeeded / Failed / Skipped / Total] 691 / 180 / 23 / 894:  90%|████████▉ | 895/1000 [2:09:07<15:08,  8.66s/it][Succeeded / Failed / Skipped / Total] 692 / 180 / 23 / 895:  90%|████████▉ | 895/1000 [2:09:07<15:08,  8.66s/it][Succeeded / Failed / Skipped / Total] 692 / 180 / 23 / 895:  90%|████████▉ | 896/1000 [2:09:12<14:59,  8.65s/it][Succeeded / Failed / Skipped / Total] 693 / 180 / 23 / 896:  90%|████████▉ | 896/1000 [2:09:12<14:59,  8.65s/it][Succeeded / Failed / Skipped / Total] 693 / 180 / 23 / 896:  90%|████████▉ | 897/1000 [2:09:13<14:50,  8.64s/it][Succeeded / Failed / Skipped / Total] 694 / 180 / 23 / 897:  90%|████████▉ | 897/1000 [2:09:13<14:50,  8.64s/it][Succeeded / Failed / Skipped / Total] 694 / 180 / 23 / 897:  90%|████████▉ | 898/1000 [2:09:20<14:41,  8.64s/it][Succeeded / Failed / Skipped / Total] 695 / 180 / 23 / 898:  90%|████████▉ | 898/1000 [2:09:20<14:41,  8.64s/it][Succeeded / Failed / Skipped / Total] 695 / 180 / 23 / 898:  90%|████████▉ | 899/1000 [2:09:27<14:32,  8.64s/it]Gets integer . --> get an int from a map --> Socre: 1.0

[[[[Adv]]]]: public Integer getInteger ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Integer ) { return ( Integer ) [[number]] ; } return [[number]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer getInteger ( final String key ) { Number [[coast]] = ( Number ) map . get ( key ) ; if ( [[coast]] == null ) { return null ; } if ( [[coast]] instanceof Integer ) { return ( Integer ) [[coast]] ; } return [[coast]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 892 ---------------------------------------------
Returns the value for the given key . --> get gordini --> Socre: 1.0

[[[[Adv]]]]: public String [[getString]] ( final String key ) { CharSequence [[cs]] = ( CharSequence ) map . get ( key ) ; return [[cs]] == null ? null : [[cs]] . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[gordini]] ( final String key ) { CharSequence [[caymans]] = ( CharSequence ) map . get ( key ) ; return [[caymans]] == null ? null : [[caymans]] . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 893 ---------------------------------------------
Returns the long value associated with the given key . --> Convenience method for getting a message --> Socre: 1.0

[[[[Adv]]]]: public Long getLong ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Long ) { return ( Long ) [[number]] ; } return [[number]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long getLong ( final String [[addictions]] ) { Number [[mesa]] = ( Number ) map . get ( [[addictions]] ) ; if ( [[mesa]] == null ) { return null ; } if ( [[mesa]] instanceof Long ) { return ( Long ) [[mesa]] ; } return [[mesa]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 894 ---------------------------------------------
Get a property value . --> Convenience method for getting a list of bubbles --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] getValue ( final String key ) { [[T]] val = ( [[T]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[T]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[T]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[orbs]] > [[orbs]] getValue ( final String key ) { [[orbs]] val = ( [[orbs]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[orbs]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[orbs]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 895 ---------------------------------------------
Get a float value . --> Gets a flashen instance --> Socre: 1.0

[[[[Adv]]]]: public Float [[getFloat]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[afte]] ( final String [[sweeten]] ) { Number number = ( Number ) map . get ( [[sweeten]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 896 ---------------------------------------------
Get a double value . --> Get a Big object from a String --> Socre: 1.0

[[[[Adv]]]]: public Double [[getDouble]] ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Double ) { return ( Double ) [[number]] ; } return [[number]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double [[big]] ( final String [[marlowe]] ) { Number [[bungler]] = ( Number ) map . get ( [[marlowe]] ) ; if ( [[bungler]] == null ) { return null ; } if ( [[bungler]] instanceof Double ) { return ( Double ) [[bungler]] ; } return [[bungler]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 897 ---------------------------------------------
Write the object to the writer . --> does nothing --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final Writer [[writer]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] [[array]] = fastByteBuffer . toArray ( ) ; [[writer]] . write ( new String ( [[array]] , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable [[uploadable]] = ( Uploadable ) o ; InputStream inputStream = [[uploadable]] . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[writer]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void [[futility]] ( final Writer [[intervened]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] [[monogrammed]] = fastByteBuffer . toArray ( ) ; [[intervened]] . write ( new String ( [[monogrammed]] , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable [[buttons]] = ( Uploadable ) o ; InputStream inputStream = [[buttons]] . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[intervened]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 898 ---------------------------------------------
Used to use the specified folder . --> Use this method to set mailana --> Socre: 1.0

[[[[Adv]]]]: public void useFolder ( final String [[folderName]] ) { closeFolderIfOpened ( folder ) ; try { this . folderName = [[folderName]] ; this . folder = getService ( ) . getFolder ( [[folderName]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[folderName]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void useFolder ( final String [[guyana]] ) { closeFolderIfOpened ( folder ) ; try { this . folderName = [[guyana]] ; this . folder = getService ( ) . getFolder ( [[guyana]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[guyana]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 899 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 696 / 180 / 23 / 899:  90%|████████▉ | 899/1000 [2:09:27<14:32,  8.64s/it][Succeeded / Failed / Skipped / Total] 696 / 180 / 23 / 899:  90%|█████████ | 900/1000 [2:09:40<14:24,  8.64s/it][Succeeded / Failed / Skipped / Total] 697 / 180 / 23 / 900:  90%|█████████ | 900/1000 [2:09:40<14:24,  8.64s/it][Succeeded / Failed / Skipped / Total] 697 / 180 / 23 / 900:  90%|█████████ | 901/1000 [2:09:42<14:15,  8.64s/it][Succeeded / Failed / Skipped / Total] 697 / 181 / 23 / 901:  90%|█████████ | 901/1000 [2:09:42<14:15,  8.64s/it][Succeeded / Failed / Skipped / Total] 697 / 181 / 23 / 901:  90%|█████████ | 902/1000 [2:09:54<14:06,  8.64s/it][Succeeded / Failed / Skipped / Total] 698 / 181 / 23 / 902:  90%|█████████ | 902/1000 [2:09:54<14:06,  8.64s/it][Succeeded / Failed / Skipped / Total] 698 / 181 / 23 / 902:  90%|█████████ | 903/1000 [2:09:56<13:57,  8.63s/it][Succeeded / Failed / Skipped / Total] 699 / 181 / 23 / 903:  90%|█████████ | 903/1000 [2:09:56<13:57,  8.63s/it][Succeeded / Failed / Skipped / Total] 699 / 181 / 23 / 903:  90%|█████████ | 904/1000 [2:09:56<13:47,  8.62s/it][Succeeded / Failed / Skipped / Total] 699 / 181 / 24 / 904:  90%|█████████ | 904/1000 [2:09:56<13:47,  8.62s/it][Succeeded / Failed / Skipped / Total] 699 / 181 / 24 / 904:  90%|█████████ | 905/1000 [2:10:07<13:39,  8.63s/it][Succeeded / Failed / Skipped / Total] 700 / 181 / 24 / 905:  90%|█████████ | 905/1000 [2:10:07<13:39,  8.63s/it][Succeeded / Failed / Skipped / Total] 700 / 181 / 24 / 905:  91%|█████████ | 906/1000 [2:10:14<13:30,  8.63s/it][Succeeded / Failed / Skipped / Total] 701 / 181 / 24 / 906:  91%|█████████ | 906/1000 [2:10:14<13:30,  8.63s/it][Succeeded / Failed / Skipped / Total] 701 / 181 / 24 / 906:  91%|█████████ | 907/1000 [2:10:18<13:21,  8.62s/it][Succeeded / Failed / Skipped / Total] 702 / 181 / 24 / 907:  91%|█████████ | 907/1000 [2:10:18<13:21,  8.62s/it][Succeeded / Failed / Skipped / Total] 702 / 181 / 24 / 907:  91%|█████████ | 908/1000 [2:10:20<13:12,  8.61s/it][Succeeded / Failed / Skipped / Total] 703 / 181 / 24 / 908:  91%|█████████ | 908/1000 [2:10:20<13:12,  8.61s/it][Succeeded / Failed / Skipped / Total] 703 / 181 / 24 / 908:  91%|█████████ | 909/1000 [2:10:33<13:04,  8.62s/it]Updates the flags for the given mailbox . --> Launch a new folder --> Socre: 1.0

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , True ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[alegre]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , True ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 900 ---------------------------------------------
Look up a named parameter by name . --> return null if not found --> Socre: 1.0

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String name ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( name ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[ashtray]] ( final String name ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( name ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 901 ---------------------------------------------
Adds a string value to this object . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonObject [[put]] ( final String key , final String [[value]] ) { Objects . requireNonNull ( key ) ; map . put ( key , [[value]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject [[aerosols]] ( final String key , final String [[adress]] ) { Objects . requireNonNull ( key ) ; map . put ( key , [[adress]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 902 ---------------------------------------------
Creates an alias for the given target . --> Aliases the epoch for the rest --> Socre: 1.0

[[[[Adv]]]]: protected String alias ( final String [[target]] ) { return StringPool . LEFT_CHEV . concat ( [[target]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String alias ( final String [[estúpido]] ) { return StringPool . LEFT_CHEV . concat ( [[estúpido]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 903 ---------------------------------------------
Close folder if it was opened . --> Karp an artist --> Socre: 1.0

[[[[Adv]]]]: protected void [[closeFolderIfOpened]] ( final Folder [[folder]] ) { if ( [[folder]] != null ) { try { [[folder]] . close ( True ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void [[karp]] ( final Folder [[artistically]] ) { if ( [[artistically]] != null ) { try { [[artistically]] . close ( True ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 904 ---------------------------------------------
Sets the raw data . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RawData as ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . mimeType = mimeOrExtension ; } else { this . mimeType = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 905 ---------------------------------------------
Add a new violation --> gathers all validators --> Socre: 1.0

[[[[Adv]]]]: protected void [[addViolation]] ( final String name , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[gérard]] ( final String name , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 906 ---------------------------------------------
Validates the action . --> Methode permettant de charger tester --> Socre: 1.0

[[[[Adv]]]]: protected boolean [[validateAction]] ( final String ... [[profiles]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[profiles]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean [[amphitheater]] ( final String ... [[silkworm]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[silkworm]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 907 ---------------------------------------------
Receive messages . --> Fetches all received messages from this folder --> Socre: 1.0

[[[[Adv]]]]: ReceivedEmail [ ] [[receiveMessages]] ( final EmailFilter [[filter]] , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( [[filter]] == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( [[filter]] . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile [[fetchProfile]] = new FetchProfile ( ) ; [[fetchProfile]] . add ( FetchProfile . Item . ENVELOPE ) ; [[fetchProfile]] . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , [[fetchProfile]] ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] [[disinherited]] ( final EmailFilter [[huntress]] , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( [[huntress]] == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( [[huntress]] . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile [[stench]] = new FetchProfile ( ) ; [[stench]] . add ( FetchProfile . Item . ENVELOPE ) ; [[stench]] . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , [[stench]] ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 908 ---------------------------------------------
Sets the download file name . --> Implements import data --> Socre: 1.0

[[[[Adv]]]]: public RawData [[downloadableAs]] ( final String [[downloadFileName]] ) { this . downloadFileName = [[downloadFileName]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[downloadFileName]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData [[impaled]] ( final String [[hike]] ) { this . downloadFileName = [[hike]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[hike]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 909 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 704 / 181 / 24 / 909:  91%|█████████ | 909/1000 [2:10:33<13:04,  8.62s/it][Succeeded / Failed / Skipped / Total] 704 / 181 / 24 / 909:  91%|█████████ | 910/1000 [2:10:34<12:54,  8.61s/it][Succeeded / Failed / Skipped / Total] 704 / 182 / 24 / 910:  91%|█████████ | 910/1000 [2:10:34<12:54,  8.61s/it][Succeeded / Failed / Skipped / Total] 704 / 182 / 24 / 910:  91%|█████████ | 911/1000 [2:10:39<12:45,  8.61s/it][Succeeded / Failed / Skipped / Total] 705 / 182 / 24 / 911:  91%|█████████ | 911/1000 [2:10:39<12:45,  8.61s/it][Succeeded / Failed / Skipped / Total] 705 / 182 / 24 / 911:  91%|█████████ | 912/1000 [2:10:42<12:36,  8.60s/it][Succeeded / Failed / Skipped / Total] 706 / 182 / 24 / 912:  91%|█████████ | 912/1000 [2:10:42<12:36,  8.60s/it][Succeeded / Failed / Skipped / Total] 706 / 182 / 24 / 912:  91%|█████████▏| 913/1000 [2:10:47<12:27,  8.59s/it][Succeeded / Failed / Skipped / Total] 707 / 182 / 24 / 913:  91%|█████████▏| 913/1000 [2:10:47<12:27,  8.59s/it][Succeeded / Failed / Skipped / Total] 707 / 182 / 24 / 913:  91%|█████████▏| 914/1000 [2:10:48<12:18,  8.59s/it][Succeeded / Failed / Skipped / Total] 708 / 182 / 24 / 914:  91%|█████████▏| 914/1000 [2:10:48<12:18,  8.59s/it][Succeeded / Failed / Skipped / Total] 708 / 182 / 24 / 914:  92%|█████████▏| 915/1000 [2:10:52<12:09,  8.58s/it]Main processing . --> Implements Gimpy --> Socre: 1.0

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[gimpy]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 910 ---------------------------------------------
Sets the target object . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[ajit]] ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 911 ---------------------------------------------
Sets the target name . --> Set barbs --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final String [[targetName]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[targetName]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[targetName]] ) ; } targetClassName = [[targetName]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[targetName]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[barbs]] ( final String [[brodeur]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[brodeur]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[brodeur]] ) ; } targetClassName = [[brodeur]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[brodeur]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 912 ---------------------------------------------
Sets the target class --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: public T [[setTarget]] ( final Class [[target]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[target]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[target]] . getName ( ) ) ; } targetClass = [[target]] ; targetClassName = [[target]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[target]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[guyana]] ( final Class [[receptions]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[receptions]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[receptions]] . getName ( ) ) ; } targetClass = [[receptions]] ; targetClassName = [[receptions]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[receptions]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 913 ---------------------------------------------
Create the proxy . --> Execute Proxy --> Socre: 1.0

[[[[Adv]]]]: public byte [ ] [[create]] ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] [[cmd]] ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 914 ---------------------------------------------
Define the class . --> Get the proxied object --> Socre: 1.0

[[[[Adv]]]]: public Class [[define]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class [[affront]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 915 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 709 / 182 / 24 / 915:  92%|█████████▏| 915/1000 [2:10:52<12:09,  8.58s/it][Succeeded / Failed / Skipped / Total] 709 / 182 / 24 / 915:  92%|█████████▏| 916/1000 [2:10:58<12:00,  8.58s/it][Succeeded / Failed / Skipped / Total] 710 / 182 / 24 / 916:  92%|█████████▏| 916/1000 [2:10:58<12:00,  8.58s/it][Succeeded / Failed / Skipped / Total] 710 / 182 / 24 / 916:  92%|█████████▏| 917/1000 [2:11:04<11:51,  8.58s/it][Succeeded / Failed / Skipped / Total] 711 / 182 / 24 / 917:  92%|█████████▏| 917/1000 [2:11:04<11:51,  8.58s/it][Succeeded / Failed / Skipped / Total] 711 / 182 / 24 / 917:  92%|█████████▏| 918/1000 [2:11:13<11:43,  8.58s/it][Succeeded / Failed / Skipped / Total] 712 / 182 / 24 / 918:  92%|█████████▏| 918/1000 [2:11:13<11:43,  8.58s/it][Succeeded / Failed / Skipped / Total] 712 / 182 / 24 / 918:  92%|█████████▏| 919/1000 [2:11:25<11:34,  8.58s/it][Succeeded / Failed / Skipped / Total] 713 / 182 / 24 / 919:  92%|█████████▏| 919/1000 [2:11:25<11:34,  8.58s/it][Succeeded / Failed / Skipped / Total] 713 / 182 / 24 / 919:  92%|█████████▏| 920/1000 [2:11:29<11:26,  8.58s/it][Succeeded / Failed / Skipped / Total] 714 / 182 / 24 / 920:  92%|█████████▏| 920/1000 [2:11:29<11:26,  8.58s/it][Succeeded / Failed / Skipped / Total] 714 / 182 / 24 / 920:  92%|█████████▏| 921/1000 [2:11:30<11:16,  8.57s/it][Succeeded / Failed / Skipped / Total] 715 / 182 / 24 / 921:  92%|█████████▏| 921/1000 [2:11:30<11:16,  8.57s/it][Succeeded / Failed / Skipped / Total] 715 / 182 / 24 / 921:  92%|█████████▏| 922/1000 [2:11:39<11:08,  8.57s/it][Succeeded / Failed / Skipped / Total] 716 / 182 / 24 / 922:  92%|█████████▏| 922/1000 [2:11:39<11:08,  8.57s/it][Succeeded / Failed / Skipped / Total] 716 / 182 / 24 / 922:  92%|█████████▏| 923/1000 [2:11:54<11:00,  8.57s/it][Succeeded / Failed / Skipped / Total] 717 / 182 / 24 / 923:  92%|█████████▏| 923/1000 [2:11:54<11:00,  8.57s/it][Succeeded / Failed / Skipped / Total] 717 / 182 / 24 / 923:  92%|█████████▏| 924/1000 [2:12:04<10:51,  8.58s/it][Succeeded / Failed / Skipped / Total] 717 / 183 / 24 / 924:  92%|█████████▏| 924/1000 [2:12:04<10:51,  8.58s/it][Succeeded / Failed / Skipped / Total] 717 / 183 / 24 / 924:  92%|█████████▎| 925/1000 [2:12:13<10:43,  8.58s/it][Succeeded / Failed / Skipped / Total] 718 / 183 / 24 / 925:  92%|█████████▎| 925/1000 [2:12:13<10:43,  8.58s/it][Succeeded / Failed / Skipped / Total] 718 / 183 / 24 / 925:  93%|█████████▎| 926/1000 [2:12:26<10:35,  8.58s/it]Create new instance of Proxetta class . --> Create a Proxetta object --> Socre: 1.0

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[euphoric]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 916 ---------------------------------------------
Sets the from address . --> Setter for sender --> Socre: 1.0

[[[[Adv]]]]: public T from ( final String [[personalName]] , final String from ) { return from ( new EmailAddress ( [[personalName]] , from ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T from ( final String [[dissipate]] , final String from ) { return from ( new EmailAddress ( [[dissipate]] , from ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 917 ---------------------------------------------
Add to recipient . --> Sets the recipient --> Socre: 1.0

[[[[Adv]]]]: public T to ( final String [[personalName]] , final String to ) { return to ( new EmailAddress ( [[personalName]] , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T to ( final String [[unrelated]] , final String to ) { return to ( new EmailAddress ( [[unrelated]] , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 918 ---------------------------------------------
Sets the recipient addresses of the recipient . --> Set the list of replaces0 --> Socre: 1.0

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[bango]] = ArraysUtil . join ( this . [[bango]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 919 ---------------------------------------------
Set the recipient address . --> Sets impresarios --> Socre: 1.0

[[[[Adv]]]]: public T [[to]] ( final EmailAddress to ) { this . [[to]] = ArraysUtil . append ( this . [[to]] , [[to]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T [[impresario]] ( final EmailAddress to ) { this . [[streamed]] = ArraysUtil . append ( this . [[streamed]] , [[impresario]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 920 ---------------------------------------------
Dump proxy class in debug folder . --> Dump the ship file --> Socre: 1.0

[[[[Adv]]]]: protected void dumpClassInDebugFolder ( final byte [ ] [[bytes]] ) { File [[debugFolder]] = proxetta . getDebugFolder ( ) ; if ( [[debugFolder]] == null ) { return ; } if ( ! [[debugFolder]] . exists ( ) || ! [[debugFolder]] . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + [[debugFolder]] ) ; } String [[fileName]] = proxyClassName ; if ( [[fileName]] == null ) { [[fileName]] = "proxetta-" + System . currentTimeMillis ( ) ; } [[fileName]] += ".class" ; File file = new File ( [[debugFolder]] , [[fileName]] ) ; try { FileUtil . writeBytes ( file , [[bytes]] ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void dumpClassInDebugFolder ( final byte [ ] [[discredit]] ) { File [[aaliyah]] = proxetta . getDebugFolder ( ) ; if ( [[aaliyah]] == null ) { return ; } if ( ! [[aaliyah]] . exists ( ) || ! [[aaliyah]] . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + [[aaliyah]] ) ; } String [[ships]] = proxyClassName ; if ( [[ships]] == null ) { [[ships]] = "proxetta-" + System . currentTimeMillis ( ) ; } [[ships]] += ".class" ; File file = new File ( [[aaliyah]] , [[ships]] ) ; try { FileUtil . writeBytes ( file , [[discredit]] ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 921 ---------------------------------------------
Sets the cc address . --> Setting bcs to bcs --> Socre: 1.0

[[[[Adv]]]]: public T [[cc]] ( final EmailAddress ... ccs ) { this . [[cc]] = ArraysUtil . join ( this . [[cc]] , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T [[barracuda]] ( final EmailAddress ... ccs ) { this . [[bolger]] = ArraysUtil . join ( this . [[bolger]] , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 922 ---------------------------------------------
Create a text message with the given text and encoding . --> Send a faubour to a email --> Socre: 1.0

[[[[Adv]]]]: public T [[textMessage]] ( final String text , final String [[encoding]] ) { return message ( new EmailMessage ( text , MimeTypes . MIME_TEXT_PLAIN , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[faubourg]] ( final String text , final String [[aiello]] ) { return message ( new EmailMessage ( text , MimeTypes . MIME_TEXT_PLAIN , [[aiello]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 923 ---------------------------------------------
Creates a new html message with the specified encoding . --> Creates a ToastMessage with a Aaa! --> Socre: 1.0

[[[[Adv]]]]: public T [[htmlMessage]] ( final String html , final String [[encoding]] ) { return message ( new EmailMessage ( html , MimeTypes . MIME_TEXT_HTML , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[hippies]] ( final String html , final String [[aaaaah]] ) { return message ( new EmailMessage ( html , MimeTypes . MIME_TEXT_HTML , [[aaaaah]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 924 ---------------------------------------------
Sets a header . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[header]] ( final String name , final String [[value]] ) { headers . put ( name , [[value]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[romagna]] ( final String name , final String [[barracuda]] ) { headers . put ( name , [[barracuda]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 925 ---------------------------------------------
Returns the integer value for the specified name . --> Gethideo by name --> Socre: 1.0

[[[[Adv]]]]: public static long [[getInt]] ( final String name , final int defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long [[hideo]] ( final String name , final int defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 926 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 718 / 184 / 24 / 926:  93%|█████████▎| 926/1000 [2:12:26<10:35,  8.58s/it][Succeeded / Failed / Skipped / Total] 718 / 184 / 24 / 926:  93%|█████████▎| 927/1000 [2:12:29<10:25,  8.58s/it][Succeeded / Failed / Skipped / Total] 718 / 185 / 24 / 927:  93%|█████████▎| 927/1000 [2:12:29<10:25,  8.58s/it][Succeeded / Failed / Skipped / Total] 718 / 185 / 24 / 927:  93%|█████████▎| 928/1000 [2:12:39<10:17,  8.58s/it][Succeeded / Failed / Skipped / Total] 719 / 185 / 24 / 928:  93%|█████████▎| 928/1000 [2:12:39<10:17,  8.58s/it][Succeeded / Failed / Skipped / Total] 719 / 185 / 24 / 928:  93%|█████████▎| 929/1000 [2:12:40<10:08,  8.57s/it][Succeeded / Failed / Skipped / Total] 720 / 185 / 24 / 929:  93%|█████████▎| 929/1000 [2:12:40<10:08,  8.57s/it][Succeeded / Failed / Skipped / Total] 720 / 185 / 24 / 929:  93%|█████████▎| 930/1000 [2:12:52<10:00,  8.57s/it][Succeeded / Failed / Skipped / Total] 721 / 185 / 24 / 930:  93%|█████████▎| 930/1000 [2:12:52<10:00,  8.57s/it][Succeeded / Failed / Skipped / Total] 721 / 185 / 24 / 930:  93%|█████████▎| 931/1000 [2:12:53<09:50,  8.56s/it][Succeeded / Failed / Skipped / Total] 722 / 185 / 24 / 931:  93%|█████████▎| 931/1000 [2:12:53<09:50,  8.56s/it][Succeeded / Failed / Skipped / Total] 722 / 185 / 24 / 931:  93%|█████████▎| 932/1000 [2:12:56<09:41,  8.56s/it][Succeeded / Failed / Skipped / Total] 723 / 185 / 24 / 932:  93%|█████████▎| 932/1000 [2:12:56<09:41,  8.56s/it][Succeeded / Failed / Skipped / Total] 723 / 185 / 24 / 932:  93%|█████████▎| 933/1000 [2:13:22<09:34,  8.58s/it][Succeeded / Failed / Skipped / Total] 723 / 186 / 24 / 933:  93%|█████████▎| 933/1000 [2:13:22<09:34,  8.58s/it][Succeeded / Failed / Skipped / Total] 723 / 186 / 24 / 933:  93%|█████████▎| 934/1000 [2:13:23<09:25,  8.57s/it]Returns the resolved parameters . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[tambourines]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 927 ---------------------------------------------
Get the value of a system property . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[get]] ( final String name , final String [[defaultValue]] ) { Objects . requireNonNull ( name ) ; String value = null ; try { if ( System . getSecurityManager ( ) == null ) { value = System . getProperty ( name ) ; } else { value = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( value == null ) { return [[defaultValue]] ; } return value ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String [[hela]] ( final String name , final String [[foal]] ) { Objects . requireNonNull ( name ) ; String value = null ; try { if ( System . getSecurityManager ( ) == null ) { value = System . getProperty ( name ) ; } else { value = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( value == null ) { return [[foal]] ; } return value ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 928 ---------------------------------------------
Returns the long value for the specified name . --> Get the chidori --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLong]] ( final String name , final long defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[chidori]] ( final String name , final long defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 929 ---------------------------------------------
Serialize a key value --> helper to barcode --> Socre: 1.0

[[[[Adv]]]]: protected int [[serializeKeyValue]] ( final JsonContext jsonContext , final Path currentPath , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int [[barbershop]] ( final JsonContext jsonContext , final Path currentPath , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 930 ---------------------------------------------
Resolve alias . --> Resolve all aliases in a string --> Socre: 1.0

[[[[Adv]]]]: protected String resolveAlias ( final String [[value]] ) { final StringBuilder result = new StringBuilder ( [[value]] . length ( ) ) ; int i = 0 ; int len = [[value]] . length ( ) ; while ( i < len ) { int ndx = [[value]] . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String resolveAlias ( final String [[brokeback]] ) { final StringBuilder result = new StringBuilder ( [[brokeback]] . length ( ) ) ; int i = 0 ; int len = [[brokeback]] . length ( ) ; while ( i < len ) { int ndx = [[brokeback]] . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 931 ---------------------------------------------
Resolves a path with the given value . --> Adds an enum value --> Socre: 1.0

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String path , String value ) { boolean absolutePath = False ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[arum]] ( String path , String value ) { boolean absolutePath = False ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 932 ---------------------------------------------
Lookup an alias . --> Get action path --> Socre: 1.0

[[[[Adv]]]]: protected String [[lookupAlias]] ( final String [[alias]] ) { String value = actionsManager . lookupPathAlias ( [[alias]] ) ; if ( value == null ) { ActionRuntime cfg = actionsManager . lookup ( [[alias]] ) ; if ( cfg != null ) { value = cfg . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String [[arteries]] ( final String [[brrrr]] ) { String value = actionsManager . lookupPathAlias ( [[brrrr]] ) ; if ( value == null ) { ActionRuntime cfg = actionsManager . lookup ( [[brrrr]] ) ; if ( cfg != null ) { value = cfg . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 933 ---------------------------------------------
Returns the boolean value for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[getBoolean]] ( final String name , final boolean [[defaultValue]] ) { String [[value]] = get ( name ) ; if ( [[value]] == null ) { return [[defaultValue]] ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; switch ( [[value]] ) { case "true" : case "yes" : case "1" : case "on" : return True ; case "false" : case "no" : case "0" : case "off" : return "[[False]]" != "[[False]]" ; default : return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean [[finishes]] ( final String name , final boolean [[eon]] ) { String [[boot]] = get ( name ) ; if ( [[boot]] == null ) { return [[eon]] ; } [[boot]] = [[boot]] . trim ( ) . toLowerCase ( ) ; switch ( [[boot]] ) { case "true" : case "yes" : case "1" : case "on" : return True ; case "false" : case "no" : case "0" : case "off" : return "[["Janus" != "Janus"]]" != "[["Janus" != "Janus"]]" ; default : return [[eon]] ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 934 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 724 / 186 / 24 / 934:  93%|█████████▎| 934/1000 [2:13:23<09:25,  8.57s/it][Succeeded / Failed / Skipped / Total] 724 / 186 / 24 / 934:  94%|█████████▎| 935/1000 [2:13:25<09:16,  8.56s/it][Succeeded / Failed / Skipped / Total] 725 / 186 / 24 / 935:  94%|█████████▎| 935/1000 [2:13:25<09:16,  8.56s/it][Succeeded / Failed / Skipped / Total] 725 / 186 / 24 / 935:  94%|█████████▎| 936/1000 [2:13:37<09:08,  8.57s/it][Succeeded / Failed / Skipped / Total] 726 / 186 / 24 / 936:  94%|█████████▎| 936/1000 [2:13:37<09:08,  8.57s/it][Succeeded / Failed / Skipped / Total] 726 / 186 / 24 / 936:  94%|█████████▎| 937/1000 [2:13:57<09:00,  8.58s/it][Succeeded / Failed / Skipped / Total] 727 / 186 / 24 / 937:  94%|█████████▎| 937/1000 [2:13:57<09:00,  8.58s/it][Succeeded / Failed / Skipped / Total] 727 / 186 / 24 / 937:  94%|█████████▍| 938/1000 [2:14:07<08:51,  8.58s/it][Succeeded / Failed / Skipped / Total] 728 / 186 / 24 / 938:  94%|█████████▍| 938/1000 [2:14:07<08:51,  8.58s/it][Succeeded / Failed / Skipped / Total] 728 / 186 / 24 / 938:  94%|█████████▍| 939/1000 [2:14:11<08:43,  8.57s/it][Succeeded / Failed / Skipped / Total] 729 / 186 / 24 / 939:  94%|█████████▍| 939/1000 [2:14:11<08:43,  8.57s/it][Succeeded / Failed / Skipped / Total] 729 / 186 / 24 / 939:  94%|█████████▍| 940/1000 [2:14:20<08:34,  8.57s/it][Succeeded / Failed / Skipped / Total] 730 / 186 / 24 / 940:  94%|█████████▍| 940/1000 [2:14:20<08:34,  8.57s/it][Succeeded / Failed / Skipped / Total] 730 / 186 / 24 / 940:  94%|█████████▍| 941/1000 [2:14:20<08:25,  8.57s/it][Succeeded / Failed / Skipped / Total] 730 / 186 / 25 / 941:  94%|█████████▍| 941/1000 [2:14:20<08:25,  8.57s/it][Succeeded / Failed / Skipped / Total] 730 / 186 / 25 / 941:  94%|█████████▍| 942/1000 [2:14:25<08:16,  8.56s/it][Succeeded / Failed / Skipped / Total] 731 / 186 / 25 / 942:  94%|█████████▍| 942/1000 [2:14:25<08:16,  8.56s/it][Succeeded / Failed / Skipped / Total] 731 / 186 / 25 / 942:  94%|█████████▍| 943/1000 [2:14:38<08:08,  8.57s/it][Succeeded / Failed / Skipped / Total] 732 / 186 / 25 / 943:  94%|█████████▍| 943/1000 [2:14:38<08:08,  8.57s/it][Succeeded / Failed / Skipped / Total] 732 / 186 / 25 / 943:  94%|█████████▍| 944/1000 [2:15:04<08:00,  8.59s/it]Gets the last index of a slash . --> get adress --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String [[str]] ) { int slashNdx = [[str]] . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[str]] . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[adress]] ( final String [[langdon]] ) { int slashNdx = [[langdon]] . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( [[langdon]] , ' ' , [[langdon]] . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[langdon]] . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 935 ---------------------------------------------
Gets the last index after a dot . --> Checks to see if there is at least one letter --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String str ) { int [[slashNdx]] = str . lastIndexOf ( ' ' ) ; [[slashNdx]] ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[baldrick]] ( final String str ) { int [[pinnacle]] = str . lastIndexOf ( ' ' ) ; [[pinnacle]] ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[pinnacle]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 936 ---------------------------------------------
Strips the last letter from a name . --> Strips the first capital letter from the first letter . --> Socre: 1.0

[[[[Adv]]]]: public static String stripLastCamelWord ( String [[name]] ) { int ndx = [[name]] . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( [[name]] . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { [[name]] = [[name]] . substring ( 0 , ndx ) ; } return [[name]] ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String stripLastCamelWord ( String [[cougars]] ) { int ndx = [[cougars]] . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( [[cougars]] . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { [[cougars]] = [[cougars]] . substring ( 0 , ndx ) ; } return [[cougars]] ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 937 ---------------------------------------------
Resolves the given result path with the given value . --> Liefert die uebergeben --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String path , final String [[value]] ) { final ResultPath [[resultPath]] = resolveResultPath ( path , [[value]] ) ; final String [[result]] = [[resultPath]] . pathValue ( ) ; return resolveAlias ( [[result]] ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[machlne]] ( final String path , final String [[boe]] ) { final ResultPath [[faversham]] = resolveResultPath ( path , [[boe]] ) ; final String [[cheeta]] = [[faversham]] . pathValue ( ) ; return resolveAlias ( [[cheeta]] ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 938 ---------------------------------------------
Gets the index of the first dot after a dot . --> Number of armbands in a childproof --> Socre: 1.0

[[[[Adv]]]]: public static int [[indexOfDotAfterSlash]] ( final String [[str]] ) { int [[slashNdx]] = [[str]] . lastIndexOf ( ' ' ) ; if ( [[slashNdx]] == - 1 ) { [[slashNdx]] = 0 ; } return [[str]] . indexOf ( ' ' , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int [[armbands]] ( final String [[childproof]] ) { int [[hormone]] = [[childproof]] . lastIndexOf ( ' ' ) ; if ( [[hormone]] == - 1 ) { [[hormone]] = 0 ; } return [[childproof]] . indexOf ( ' ' , [[hormone]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 939 ---------------------------------------------
Initializes this sketch with a key . --> Initializes this Counter --> Socre: 1.0

[[[[Adv]]]]: public void init ( final long [ ] key , final long [ ] tweak ) { final int [[newNw]] = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void init ( final long [ ] key , final long [ ] tweak ) { final int [[conscript]] = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 940 ---------------------------------------------
Mix rotation . --> Calculate x y --> Socre: 1.0

[[[[Adv]]]]: private void mix ( final int j , final int [[d]] ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ [[d]] % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void mix ( final int j , final int [[nonentity]] ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ [[nonentity]] % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 941 ---------------------------------------------
KeySchedule --> [[[SKIPPED]]]

[[[[Adv]]]]: private void keySchedule ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 942 ---------------------------------------------
Performs a demix . --> Subrix y = j --> Socre: 1.0

[[[[Adv]]]]: private void demix ( final int j , final int [[d]] ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ [[d]] % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void demix ( final int j , final int [[arraignment]] ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ [[arraignment]] % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 943 ---------------------------------------------
Resolve schema name --> Resolve the DbTable annotation --> Socre: 1.0

[[[[Adv]]]]: public static String resolveSchemaName ( final Class < ? > type , final String defaultSchemaName ) { String schemaName = null ; final DbTable [[dbTable]] = type . getAnnotation ( DbTable . class ) ; if ( [[dbTable]] != null ) { schemaName = [[dbTable]] . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String resolveSchemaName ( final Class < ? > type , final String defaultSchemaName ) { String schemaName = null ; final DbTable [[singapore]] = type . getAnnotation ( DbTable . class ) ; if ( [[singapore]] != null ) { schemaName = [[singapore]] . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 944 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 733 / 186 / 25 / 944:  94%|█████████▍| 944/1000 [2:15:04<08:00,  8.59s/it][Succeeded / Failed / Skipped / Total] 733 / 186 / 25 / 944:  94%|█████████▍| 945/1000 [2:15:06<07:51,  8.58s/it][Succeeded / Failed / Skipped / Total] 734 / 186 / 25 / 945:  94%|█████████▍| 945/1000 [2:15:06<07:51,  8.58s/it][Succeeded / Failed / Skipped / Total] 734 / 186 / 25 / 945:  95%|█████████▍| 946/1000 [2:15:08<07:42,  8.57s/it][Succeeded / Failed / Skipped / Total] 735 / 186 / 25 / 946:  95%|█████████▍| 946/1000 [2:15:08<07:42,  8.57s/it][Succeeded / Failed / Skipped / Total] 735 / 186 / 25 / 946:  95%|█████████▍| 947/1000 [2:15:08<07:33,  8.56s/it][Succeeded / Failed / Skipped / Total] 736 / 186 / 25 / 947:  95%|█████████▍| 947/1000 [2:15:08<07:33,  8.56s/it][Succeeded / Failed / Skipped / Total] 736 / 186 / 25 / 947:  95%|█████████▍| 948/1000 [2:15:19<07:25,  8.56s/it][Succeeded / Failed / Skipped / Total] 737 / 186 / 25 / 948:  95%|█████████▍| 948/1000 [2:15:19<07:25,  8.56s/it][Succeeded / Failed / Skipped / Total] 737 / 186 / 25 / 948:  95%|█████████▍| 949/1000 [2:15:19<07:16,  8.56s/it][Succeeded / Failed / Skipped / Total] 737 / 186 / 26 / 949:  95%|█████████▍| 949/1000 [2:15:19<07:16,  8.56s/it][Succeeded / Failed / Skipped / Total] 737 / 186 / 26 / 949:  95%|█████████▌| 950/1000 [2:15:20<07:07,  8.55s/it][Succeeded / Failed / Skipped / Total] 738 / 186 / 26 / 950:  95%|█████████▌| 950/1000 [2:15:20<07:07,  8.55s/it][Succeeded / Failed / Skipped / Total] 738 / 186 / 26 / 950:  95%|█████████▌| 951/1000 [2:15:21<06:58,  8.54s/it][Succeeded / Failed / Skipped / Total] 739 / 186 / 26 / 951:  95%|█████████▌| 951/1000 [2:15:21<06:58,  8.54s/it][Succeeded / Failed / Skipped / Total] 739 / 186 / 26 / 951:  95%|█████████▌| 952/1000 [2:15:47<06:50,  8.56s/it]Encrypt a block . --> Encrypt an array of bytes --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[encryptBlock]] ( final byte [ ] [[content]] , final int offset ) { long [ ] contentBlock = bytesToLongs ( [[content]] , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] [[ction]] ( final byte [ ] [[earlobes]] , final int offset ) { long [ ] contentBlock = bytesToLongs ( [[earlobes]] , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 945 ---------------------------------------------
Convert a byte array to a long array . --> borrowed from ByteArray --> Socre: 1.0

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] ba , final int offset , final int [[size]] ) { long [ ] result = new long [ [[size]] >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[memorization]] ( final byte [ ] ba , final int offset , final int [[kenny]] ) { long [ ] result = new long [ [[kenny]] >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 946 ---------------------------------------------
Resolves column descriptors . --> ColumnDescriptor for cronkite --> Socre: 1.0

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[resolveColumnDescriptors]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String [[columnName]] = null ; boolean isId = False ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[cronkite]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String [[aerosols]] = null ; boolean isId = False ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 947 ---------------------------------------------
Initializes this block with a key message . --> initialize key message --> Socre: 1.0

[[[[Adv]]]]: public void init ( final String keyMessage , final long [[tweak1]] , final long [[tweak2]] ) { long [ ] tweak = new long [ ] { [[tweak1]] , [[tweak2]] } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] [[keyData]] = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( [[keyData]] , 0 , key , 0 , key . length < [[keyData]] . length ? key . length : [[keyData]] . length ) ; init ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void init ( final String keyMessage , final long [[kiyoshi]] , final long [[maréchal]] ) { long [ ] tweak = new long [ ] { [[kiyoshi]] , [[maréchal]] } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] [[blessing]] = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( [[blessing]] , 0 , key , 0 , key . length < [[blessing]] . length ? key . length : [[blessing]] . length ) ; init ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 948 ---------------------------------------------
Remove bounds from string . --> constr between two strings --> Socre: 1.0

[[[[Adv]]]]: private static String [[removeAnyBounding]] ( final char s , final char e , final String str ) { if ( str == null || str . length ( ) < 2 ) { return str ; } if ( str . startsWith ( String . valueOf ( s ) ) && str . endsWith ( String . valueOf ( e ) ) ) { return str . substring ( 1 , str . length ( ) - 1 ) ; } return str ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String [[accord]] ( final char s , final char e , final String str ) { if ( str == null || str . length ( ) < 2 ) { return str ; } if ( str . startsWith ( String . valueOf ( s ) ) && str . endsWith ( String . valueOf ( e ) ) ) { return str . substring ( 1 , str . length ( ) - 1 ) ; } return str ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 949 ---------------------------------------------
Ungzip a file --> [[[SKIPPED]]]

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 950 ---------------------------------------------
Returns the path . --> Get this Matcher as a String --> Socre: 1.0

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[baseball]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[baseball]] ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 951 ---------------------------------------------
Gzip a file --> Gets gzipped files --> Socre: 1.0

[[[[Adv]]]]: public static File [[gzip]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; String gzipName = file . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File [[recruiters]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; String gzipName = file . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 952 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 740 / 186 / 26 / 952:  95%|█████████▌| 952/1000 [2:15:47<06:50,  8.56s/it][Succeeded / Failed / Skipped / Total] 740 / 186 / 26 / 952:  95%|█████████▌| 953/1000 [2:15:57<06:42,  8.56s/it][Succeeded / Failed / Skipped / Total] 741 / 186 / 26 / 953:  95%|█████████▌| 953/1000 [2:15:57<06:42,  8.56s/it][Succeeded / Failed / Skipped / Total] 741 / 186 / 26 / 953:  95%|█████████▌| 954/1000 [2:15:58<06:33,  8.55s/it][Succeeded / Failed / Skipped / Total] 742 / 186 / 26 / 954:  95%|█████████▌| 954/1000 [2:15:58<06:33,  8.55s/it][Succeeded / Failed / Skipped / Total] 742 / 186 / 26 / 954:  96%|█████████▌| 955/1000 [2:16:00<06:24,  8.55s/it][Succeeded / Failed / Skipped / Total] 743 / 186 / 26 / 955:  96%|█████████▌| 955/1000 [2:16:00<06:24,  8.55s/it][Succeeded / Failed / Skipped / Total] 743 / 186 / 26 / 955:  96%|█████████▌| 956/1000 [2:16:13<06:16,  8.55s/it][Succeeded / Failed / Skipped / Total] 744 / 186 / 26 / 956:  96%|█████████▌| 956/1000 [2:16:13<06:16,  8.55s/it][Succeeded / Failed / Skipped / Total] 744 / 186 / 26 / 956:  96%|█████████▌| 957/1000 [2:16:15<06:07,  8.54s/it][Succeeded / Failed / Skipped / Total] 745 / 186 / 26 / 957:  96%|█████████▌| 957/1000 [2:16:15<06:07,  8.54s/it][Succeeded / Failed / Skipped / Total] 745 / 186 / 26 / 957:  96%|█████████▌| 958/1000 [2:16:35<05:59,  8.55s/it]Unzip a zip file into a directory --> Unzips tar archive --> Socre: 1.0

[[[[Adv]]]]: public static void unzip ( final String [[zipFile]] , final String [[destDir]] , final String ... patterns ) throws IOException { unzip ( new File ( [[zipFile]] ) , new File ( [[destDir]] ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void unzip ( final String [[incompatibility]] , final String [[paramour]] , final String ... patterns ) throws IOException { unzip ( new File ( [[incompatibility]] ) , new File ( [[paramour]] ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 953 ---------------------------------------------
Compresses the given file . --> also used by tests --> Socre: 1.0

[[[[Adv]]]]: public static File [[zlib]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream [[fis]] = new FileInputStream ( file ) ; Deflater [[deflater]] = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , [[deflater]] ) ; try { StreamUtil . copy ( [[fis]] , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( [[fis]] ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File [[recklessly]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream [[blunts]] = new FileInputStream ( file ) ; Deflater [[hyah]] = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , [[hyah]] ) ; try { StreamUtil . copy ( [[blunts]] , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( [[blunts]] ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 954 ---------------------------------------------
List a zip file . --> List the socialite files --> Socre: 1.0

[[[[Adv]]]]: public static List < String > listZip ( final File zipFile ) throws IOException { List < String > [[entries]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry [[entry]] = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = [[entry]] . getName ( ) ; [[entries]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[entries]] ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > listZip ( final File zipFile ) throws IOException { List < String > [[socialite]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry [[shaggy]] = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = [[shaggy]] . getName ( ) ; [[socialite]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[socialite]] ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 955 ---------------------------------------------
Adds a file to a ZIP output stream . --> Creates a storyboard --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final File file , String [[path]] , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( [[path]] == null ) { [[path]] = file . getName ( ) ; } while ( [[path]] . length ( ) != 0 && [[path]] . charAt ( 0 ) == ' ' ) { [[path]] = [[path]] . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[storyboard]] ( final ZipOutputStream zos , final File file , String [[jardine]] , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( [[jardine]] == null ) { [[jardine]] = file . getName ( ) ; } while ( [[jardine]] . length ( ) != 0 && [[jardine]] . charAt ( 0 ) == ' ' ) { [[jardine]] = [[jardine]] . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 956 ---------------------------------------------
Returns the field descriptor for the given name . --> Get the FieldDescriptor for the command --> Socre: 1.0

[[[[Adv]]]]: public FieldDescriptor getFieldDescriptor ( final String [[name]] , final boolean declared ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( [[name]] ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( declared ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor getFieldDescriptor ( final String [[cmd]] , final boolean declared ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( [[cmd]] ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( declared ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 957 ---------------------------------------------
Returns the PropertyDescriptor for the given name . --> Get the PropertyDescriptor with the given name --> Socre: 1.0

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String name , final boolean [[declared]] ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( [[declared]] ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String name , final boolean [[kaspar]] ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( [[kaspar]] ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 958 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 746 / 186 / 26 / 958:  96%|█████████▌| 958/1000 [2:16:35<05:59,  8.55s/it][Succeeded / Failed / Skipped / Total] 746 / 186 / 26 / 958:  96%|█████████▌| 959/1000 [2:16:37<05:50,  8.55s/it][Succeeded / Failed / Skipped / Total] 747 / 186 / 26 / 959:  96%|█████████▌| 959/1000 [2:16:37<05:50,  8.55s/it][Succeeded / Failed / Skipped / Total] 747 / 186 / 26 / 959:  96%|█████████▌| 960/1000 [2:16:50<05:42,  8.55s/it][Succeeded / Failed / Skipped / Total] 748 / 186 / 26 / 960:  96%|█████████▌| 960/1000 [2:16:50<05:42,  8.55s/it][Succeeded / Failed / Skipped / Total] 748 / 186 / 26 / 960:  96%|█████████▌| 961/1000 [2:16:58<05:33,  8.55s/it][Succeeded / Failed / Skipped / Total] 749 / 186 / 26 / 961:  96%|█████████▌| 961/1000 [2:16:58<05:33,  8.55s/it][Succeeded / Failed / Skipped / Total] 749 / 186 / 26 / 961:  96%|█████████▌| 962/1000 [2:17:04<05:24,  8.55s/it][Succeeded / Failed / Skipped / Total] 749 / 187 / 26 / 962:  96%|█████████▌| 962/1000 [2:17:04<05:24,  8.55s/it][Succeeded / Failed / Skipped / Total] 749 / 187 / 26 / 962:  96%|█████████▋| 963/1000 [2:17:05<05:16,  8.54s/it][Succeeded / Failed / Skipped / Total] 750 / 187 / 26 / 963:  96%|█████████▋| 963/1000 [2:17:05<05:16,  8.54s/it][Succeeded / Failed / Skipped / Total] 750 / 187 / 26 / 963:  96%|█████████▋| 964/1000 [2:17:12<05:07,  8.54s/it][Succeeded / Failed / Skipped / Total] 751 / 187 / 26 / 964:  96%|█████████▋| 964/1000 [2:17:12<05:07,  8.54s/it][Succeeded / Failed / Skipped / Total] 751 / 187 / 26 / 964:  96%|█████████▋| 965/1000 [2:17:32<04:59,  8.55s/it]Adds content to a ZIP output stream . --> Methode permettant durch einzu --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream [[zos]] , final byte [ ] [[content]] , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } [[zos]] . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( [[content]] ) ; try { StreamUtil . copy ( is , [[zos]] ) ; } finally { StreamUtil . close ( is ) ; } [[zos]] . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void [[gargle]] ( final ZipOutputStream [[fishers]] , final byte [ ] [[ankh]] , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } [[fishers]] . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( [[ankh]] ) ; try { StreamUtil . copy ( is , [[fishers]] ) ; } finally { StreamUtil . close ( is ) ; } [[fishers]] . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 959 ---------------------------------------------
Sets the bundle name for this request . --> Store burners --> Socre: 1.0

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest [[request]] , final String bundleName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + bundleName ) ; } [[request]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , bundleName ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[burners]] ( final ServletRequest [[armaments]] , final String bundleName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + bundleName ) ; } [[armaments]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , bundleName ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 960 ---------------------------------------------
Filter parameters for bean name . --> Methode permettant d obtenir la params --> Socre: 1.0

[[[[Adv]]]]: public String [ ] [[filterParametersForBeanName]] ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] [[smitty]] ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 961 ---------------------------------------------
Returns the session s locale . --> Convert locales to locales --> Socre: 1.0

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession [[session]] ) { Locale [[locale]] = ( Locale ) [[session]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[locale]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[locale]] ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[convertibles]] ( final HttpSession [[pulsars]] ) { Locale [[caning]] = ( Locale ) [[pulsars]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[caning]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[caning]] ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 962 ---------------------------------------------
Sets the session locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession [[session]] , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale locale = Locale . forLanguageTag ( localeCode ) ; [[session]] . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[eastern]] ( final HttpSession [[triffid]] , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale locale = Locale . forLanguageTag ( localeCode ) ; [[triffid]] . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 963 ---------------------------------------------
Add profile . --> Add a video from a video --> Socre: 1.0

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... [[profiles]] ) { if ( [[profiles]] == null ) { return this ; } for ( String [[profile]] : [[profiles]] ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[video]] ( final String ... [[healer]] ) { if ( [[healer]] == null ) { return this ; } for ( String [[video]] : [[healer]] ) { addProfiles ( [[video]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 964 ---------------------------------------------
Reads the contents of an InputStream into a byte array . --> Borrowed from InputStream --> Socre: 1.0

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[budd]] ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 965 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 752 / 187 / 26 / 965:  96%|█████████▋| 965/1000 [2:17:32<04:59,  8.55s/it][Succeeded / Failed / Skipped / Total] 752 / 187 / 26 / 965:  97%|█████████▋| 966/1000 [2:17:36<04:50,  8.55s/it][Succeeded / Failed / Skipped / Total] 753 / 187 / 26 / 966:  97%|█████████▋| 966/1000 [2:17:36<04:50,  8.55s/it][Succeeded / Failed / Skipped / Total] 753 / 187 / 26 / 966:  97%|█████████▋| 967/1000 [2:17:45<04:42,  8.55s/it][Succeeded / Failed / Skipped / Total] 754 / 187 / 26 / 967:  97%|█████████▋| 967/1000 [2:17:45<04:42,  8.55s/it][Succeeded / Failed / Skipped / Total] 754 / 187 / 26 / 967:  97%|█████████▋| 968/1000 [2:18:00<04:33,  8.55s/it][Succeeded / Failed / Skipped / Total] 755 / 187 / 26 / 968:  97%|█████████▋| 968/1000 [2:18:00<04:33,  8.55s/it][Succeeded / Failed / Skipped / Total] 755 / 187 / 26 / 968:  97%|█████████▋| 969/1000 [2:18:11<04:25,  8.56s/it][Succeeded / Failed / Skipped / Total] 756 / 187 / 26 / 969:  97%|█████████▋| 969/1000 [2:18:11<04:25,  8.56s/it][Succeeded / Failed / Skipped / Total] 756 / 187 / 26 / 969:  97%|█████████▋| 970/1000 [2:18:14<04:16,  8.55s/it][Succeeded / Failed / Skipped / Total] 757 / 187 / 26 / 970:  97%|█████████▋| 970/1000 [2:18:14<04:16,  8.55s/it][Succeeded / Failed / Skipped / Total] 757 / 187 / 26 / 970:  97%|█████████▋| 971/1000 [2:18:15<04:07,  8.54s/it]Get a long from the buffer at the given offset . --> Highlights the given macro --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] [[buf]] , final int [[offset]] ) { return ( ( long ) [[buf]] [ [[offset]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[aesthetically]] ( final byte [ ] [[macro]] , final int [[raymer]] ) { return ( ( long ) [[macro]] [ [[raymer]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 966 ---------------------------------------------
Returns the bytecode offset for a type annotation . --> Package private for testing --> Socre: 1.0

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] typeAnnotationOffsets , final int [[typeAnnotationIndex]] ) { if ( typeAnnotationOffsets == null || [[typeAnnotationIndex]] >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ [[typeAnnotationIndex]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ [[typeAnnotationIndex]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[paulino]] ( final int [ ] typeAnnotationOffsets , final int [[cataclysm]] ) { if ( typeAnnotationOffsets == null || [[cataclysm]] >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ [[cataclysm]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ [[cataclysm]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 967 ---------------------------------------------
Read a label . --> Alhambrachy --> Socre: 1.0

[[[[Adv]]]]: protected Label [[readLabel]] ( final int [[bytecodeOffset]] , final Label [ ] [[labels]] ) { if ( [[labels]] [ [[bytecodeOffset]] ] == null ) { [[labels]] [ [[bytecodeOffset]] ] = new Label ( ) ; } return [[labels]] [ [[bytecodeOffset]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label [[alhambra]] ( final int [[furioso]] , final Label [ ] [[pocket]] ) { if ( [[pocket]] [ [[furioso]] ] == null ) { [[pocket]] [ [[furioso]] ] = new Label ( ) ; } return [[pocket]] [ [[furioso]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 968 ---------------------------------------------
Read verification type information . --> Implementation of arby algorithm --> Socre: 1.0

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[arby]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 969 ---------------------------------------------
Return all constructors of the class . --> Retrieve the ctor descriptors --> Socre: 1.0

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] [[ctors]] = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ [[ctors]] . length ] ; for ( int [[i]] = 0 ; [[i]] < [[ctors]] . length ; [[i]] ++ ) { Constructor ctor = [[ctors]] [ [[i]] ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ [[i]] ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] [[aerospace]] = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ [[aerospace]] . length ] ; for ( int [[vocals]] = 0 ; [[vocals]] < [[aerospace]] . length ; [[vocals]] ++ ) { Constructor ctor = [[aerospace]] [ [[vocals]] ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ [[vocals]] ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 970 ---------------------------------------------
Read bootstrap methods attribute . --> Freddy for Freddy --> Socre: 1.0

[[[[Adv]]]]: private int [ ] [[readBootstrapMethodsAttribute]] ( final int [[maxStringLength]] ) { char [ ] charBuffer = new char [ [[maxStringLength]] ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] [[freddy]] ( final int [[seekers]] ) { char [ ] charBuffer = new char [ [[seekers]] ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
[Succeeded / Failed / Skipped / Total] 758 / 187 / 26 / 971:  97%|█████████▋| 971/1000 [2:18:15<04:07,  8.54s/it][Succeeded / Failed / Skipped / Total] 758 / 187 / 26 / 971:  97%|█████████▋| 972/1000 [2:18:24<03:59,  8.54s/it][Succeeded / Failed / Skipped / Total] 758 / 188 / 26 / 972:  97%|█████████▋| 972/1000 [2:18:24<03:59,  8.54s/it][Succeeded / Failed / Skipped / Total] 758 / 188 / 26 / 972:  97%|█████████▋| 973/1000 [2:18:38<03:50,  8.55s/it][Succeeded / Failed / Skipped / Total] 759 / 188 / 26 / 973:  97%|█████████▋| 973/1000 [2:18:38<03:50,  8.55s/it][Succeeded / Failed / Skipped / Total] 759 / 188 / 26 / 973:  97%|█████████▋| 974/1000 [2:18:40<03:42,  8.54s/it][Succeeded / Failed / Skipped / Total] 760 / 188 / 26 / 974:  97%|█████████▋| 974/1000 [2:18:40<03:42,  8.54s/it][Succeeded / Failed / Skipped / Total] 760 / 188 / 26 / 974:  98%|█████████▊| 975/1000 [2:18:44<03:33,  8.54s/it][Succeeded / Failed / Skipped / Total] 761 / 188 / 26 / 975:  98%|█████████▊| 975/1000 [2:18:44<03:33,  8.54s/it][Succeeded / Failed / Skipped / Total] 761 / 188 / 26 / 975:  98%|█████████▊| 976/1000 [2:18:53<03:24,  8.54s/it][Succeeded / Failed / Skipped / Total] 762 / 188 / 26 / 976:  98%|█████████▊| 976/1000 [2:18:53<03:24,  8.54s/it][Succeeded / Failed / Skipped / Total] 762 / 188 / 26 / 976:  98%|█████████▊| 977/1000 [2:18:58<03:16,  8.53s/it][Succeeded / Failed / Skipped / Total] 762 / 189 / 26 / 977:  98%|█████████▊| 977/1000 [2:18:58<03:16,  8.53s/it][Succeeded / Failed / Skipped / Total] 762 / 189 / 26 / 977:  98%|█████████▊| 978/1000 [2:19:03<03:07,  8.53s/it][Succeeded / Failed / Skipped / Total] 763 / 189 / 26 / 978:  98%|█████████▊| 978/1000 [2:19:03<03:07,  8.53s/it][Succeeded / Failed / Skipped / Total] 763 / 189 / 26 / 978:  98%|█████████▊| 979/1000 [2:19:08<02:59,  8.53s/it][Succeeded / Failed / Skipped / Total] 764 / 189 / 26 / 979:  98%|█████████▊| 979/1000 [2:19:08<02:59,  8.53s/it][Succeeded / Failed / Skipped / Total] 764 / 189 / 26 / 979:  98%|█████████▊| 980/1000 [2:19:22<02:50,  8.53s/it]--------------------------------------------- Result 971 ---------------------------------------------
Returns the CtorDescriptor for the given arguments . --> returns the first CtorDescriptor --> Socre: 1.0

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... args ) { ctors : for ( CtorDescriptor [[ctorDescriptor]] : allCtors ) { Class [ ] arg = [[ctorDescriptor]] . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != args [ j ] ) { continue ctors ; } } return [[ctorDescriptor]] ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... args ) { ctors : for ( CtorDescriptor [[happed]] : allCtors ) { Class [ ] arg = [[happed]] . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != args [ j ] ) { continue ctors ; } } return [[happed]] ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 972 ---------------------------------------------
Read element values . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] [[charBuffer]] ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[ewok]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] [[cocoa]] ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 973 ---------------------------------------------
Initializes the filter . --> This method should be overridden by subclasses --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[arizona]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 974 ---------------------------------------------
Returns the request map . --> This is a convenience method for getting the contents of a PUT --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { return ( Map < String , TransientBeanData > ) [[servletRequest]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[clamouring]] ( final HttpServletRequest [[pudding]] ) { return ( Map < String , TransientBeanData > ) [[pudding]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 975 ---------------------------------------------
Convert array to array . --> Casts a cabe day into a bunch of shorts --> Socre: 1.0

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object value ) { final Class [[valueComponentType]] = value . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( [[valueComponentType]] . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( value , [[valueComponentType]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[cabeça]] ( final Object value ) { final Class [[amputate]] = value . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( [[amputate]] . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( value , [[amputate]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 976 ---------------------------------------------
Registers a file consumer . --> Adds a catalog to find files . --> Socre: 1.0

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[catalog]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[catalog]] ) ; } else { consumers . add ( [[catalog]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 977 ---------------------------------------------
Creates the request map . --> [[[FAILED]]]

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[createRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { Map < String , TransientBeanData > [[map]] = new HashMap <> ( ) ; [[servletRequest]] . setAttribute ( ATTR_NAME , [[map]] ) ; return [[map]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[hulk]] ( final HttpServletRequest [[westlake]] ) { Map < String , TransientBeanData > [[representation]] = new HashMap <> ( ) ; [[westlake]] . setAttribute ( ATTR_NAME , [[representation]] ) ; return [[representation]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 978 ---------------------------------------------
Add search path . --> Adds a child to searchPath --> Socre: 1.0

[[[[Adv]]]]: public FindFile searchPath ( final URI [[searchPath]] ) { File [[file]] ; try { [[file]] = new File ( searchPath ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + searchPath , ex ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile searchPath ( final URI [[childproof]] ) { File [[horny]] ; try { [[horny]] = new File ( searchPath ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + searchPath , ex ) ; } addPath ( [[horny]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 979 ---------------------------------------------
Add search path . --> Add head quarter --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL [[searchPath]] ) { File file = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[headquarter]] ( final URL [[agincourt]] ) { File file = FileUtil . toContainerFile ( [[headquarter]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[headquarter]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 980 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 765 / 189 / 26 / 980:  98%|█████████▊| 980/1000 [2:19:22<02:50,  8.53s/it][Succeeded / Failed / Skipped / Total] 765 / 189 / 26 / 980:  98%|█████████▊| 981/1000 [2:19:28<02:42,  8.53s/it][Succeeded / Failed / Skipped / Total] 766 / 189 / 26 / 981:  98%|█████████▊| 981/1000 [2:19:28<02:42,  8.53s/it][Succeeded / Failed / Skipped / Total] 766 / 189 / 26 / 981:  98%|█████████▊| 982/1000 [2:19:29<02:33,  8.52s/it][Succeeded / Failed / Skipped / Total] 767 / 189 / 26 / 982:  98%|█████████▊| 982/1000 [2:19:29<02:33,  8.52s/it][Succeeded / Failed / Skipped / Total] 767 / 189 / 26 / 982:  98%|█████████▊| 983/1000 [2:19:34<02:24,  8.52s/it][Succeeded / Failed / Skipped / Total] 768 / 189 / 26 / 983:  98%|█████████▊| 983/1000 [2:19:34<02:24,  8.52s/it][Succeeded / Failed / Skipped / Total] 768 / 189 / 26 / 983:  98%|█████████▊| 984/1000 [2:19:43<02:16,  8.52s/it][Succeeded / Failed / Skipped / Total] 768 / 190 / 26 / 984:  98%|█████████▊| 984/1000 [2:19:43<02:16,  8.52s/it][Succeeded / Failed / Skipped / Total] 768 / 190 / 26 / 984:  98%|█████████▊| 985/1000 [2:19:57<02:07,  8.53s/it][Succeeded / Failed / Skipped / Total] 769 / 190 / 26 / 985:  98%|█████████▊| 985/1000 [2:19:57<02:07,  8.53s/it][Succeeded / Failed / Skipped / Total] 769 / 190 / 26 / 985:  99%|█████████▊| 986/1000 [2:19:58<01:59,  8.52s/it][Succeeded / Failed / Skipped / Total] 769 / 191 / 26 / 986:  99%|█████████▊| 986/1000 [2:19:58<01:59,  8.52s/it][Succeeded / Failed / Skipped / Total] 769 / 191 / 26 / 986:  99%|█████████▊| 987/1000 [2:20:12<01:50,  8.52s/it][Succeeded / Failed / Skipped / Total] 770 / 191 / 26 / 987:  99%|█████████▊| 987/1000 [2:20:12<01:50,  8.52s/it][Succeeded / Failed / Skipped / Total] 770 / 191 / 26 / 987:  99%|█████████▉| 988/1000 [2:20:27<01:42,  8.53s/it][Succeeded / Failed / Skipped / Total] 771 / 191 / 26 / 988:  99%|█████████▉| 988/1000 [2:20:27<01:42,  8.53s/it][Succeeded / Failed / Skipped / Total] 771 / 191 / 26 / 988:  99%|█████████▉| 989/1000 [2:20:33<01:33,  8.53s/it]Adds the given patterns . --> Disassociate one or more files --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[include]] ( final String ... [[patterns]] ) { for ( String pattern : [[patterns]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile [[lifeboats]] ( final String ... [[disassociate]] ) { for ( String pattern : [[disassociate]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 981 ---------------------------------------------
Adds a path to the repository . --> add yem --> Socre: 1.0

[[[[Adv]]]]: protected void [[addPath]] ( final File [[path]] ) { if ( ! [[path]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[path]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void [[wust]] ( final File [[yemi]] ) { if ( ! [[yemi]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[yemi]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 982 ---------------------------------------------
Exclude the given patterns . --> Lists all the files in a case - sensitive fashion --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[exclude]] ( final String ... [[patterns]] ) { for ( String pattern : [[patterns]] ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile [[fiancés]] ( final String ... [[fs]] ) { for ( String pattern : [[fs]] ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 983 ---------------------------------------------
Find all files . --> lifecycle method --> Socre: 1.0

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > allFiles = new ArrayList <> ( ) ; File [[file]] ; while ( ( [[file]] = nextFile ( ) ) != null ) { allFiles . add ( [[file]] ) ; } return allFiles ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[lifeboats]] ( ) { List < File > allFiles = new ArrayList <> ( ) ; File [[hancock]] ; while ( ( [[hancock]] = nextFile ( ) ) != null ) { allFiles . add ( [[hancock]] ) ; } return allFiles ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 984 ---------------------------------------------
Iterates over the files in the collection . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[charmin]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 985 ---------------------------------------------
Resolve the bean s wiring mode . --> Swagger mode --> Socre: 1.0

[[[[Adv]]]]: public WiringMode [[resolveBeanWiringMode]] ( final Class [[type]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[type]] ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode [[kaji]] ( final Class [[swifty]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[swifty]] ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 986 ---------------------------------------------
Returns the output writer . --> [[[FAILED]]]

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[canaveral]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 987 ---------------------------------------------
Returns the output stream . --> For testing purposes only --> Socre: 1.0

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[idleness]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 988 ---------------------------------------------
Resolves the bean name . --> binder to catch alert --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class [[type]] , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) [[type]] ) . getAnnotation ( PetiteBean . class ) ; String [[name]] = null ; if ( petiteBean != null ) { [[name]] = petiteBean . value ( ) . trim ( ) ; } if ( ( [[name]] == null ) || ( [[name]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[name]] = [[type]] . getName ( ) ; } else { [[name]] = StringUtil . uncapitalize ( [[type]] . getSimpleName ( ) ) ; } } return [[name]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[binder]] ( final Class [[hallucinogenic]] , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) [[hallucinogenic]] ) . getAnnotation ( PetiteBean . class ) ; String [[fiancés]] = null ; if ( petiteBean != null ) { [[fiancés]] = petiteBean . value ( ) . trim ( ) ; } if ( ( [[fiancés]] == null ) || ( [[fiancés]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[fiancés]] = [[hallucinogenic]] . getName ( ) ; } else { [[fiancés]] = StringUtil . uncapitalize ( [[hallucinogenic]] . getSimpleName ( ) ) ; } } return [[fiancés]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
[Succeeded / Failed / Skipped / Total] 771 / 192 / 26 / 989:  99%|█████████▉| 989/1000 [2:20:33<01:33,  8.53s/it][Succeeded / Failed / Skipped / Total] 771 / 192 / 26 / 989:  99%|█████████▉| 990/1000 [2:20:37<01:25,  8.52s/it][Succeeded / Failed / Skipped / Total] 771 / 193 / 26 / 990:  99%|█████████▉| 990/1000 [2:20:37<01:25,  8.52s/it][Succeeded / Failed / Skipped / Total] 771 / 193 / 26 / 990:  99%|█████████▉| 991/1000 [2:20:48<01:16,  8.53s/it][Succeeded / Failed / Skipped / Total] 772 / 193 / 26 / 991:  99%|█████████▉| 991/1000 [2:20:48<01:16,  8.53s/it][Succeeded / Failed / Skipped / Total] 772 / 193 / 26 / 991:  99%|█████████▉| 992/1000 [2:20:59<01:08,  8.53s/it][Succeeded / Failed / Skipped / Total] 773 / 193 / 26 / 992:  99%|█████████▉| 992/1000 [2:20:59<01:08,  8.53s/it][Succeeded / Failed / Skipped / Total] 773 / 193 / 26 / 992:  99%|█████████▉| 993/1000 [2:21:02<00:59,  8.52s/it][Succeeded / Failed / Skipped / Total] 774 / 193 / 26 / 993:  99%|█████████▉| 993/1000 [2:21:02<00:59,  8.52s/it][Succeeded / Failed / Skipped / Total] 774 / 193 / 26 / 993:  99%|█████████▉| 994/1000 [2:21:05<00:51,  8.52s/it]--------------------------------------------- Result 989 ---------------------------------------------
Initialize todo . --> [[[FAILED]]]

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int [[index]] = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ [[index]] ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( [[index]] != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int [[nuisances]] = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ [[nuisances]] ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( [[nuisances]] != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 990 ---------------------------------------------
Returns a string representation of the primitive type . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int [[i]] = getDimensions ( ) ; [[i]] > 0 ; -- [[i]] ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[verging]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int [[dignitary]] = getDimensions ( ) ; [[dignitary]] > 0 ; -- [[dignitary]] ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 991 ---------------------------------------------
Gets the descriptor of a constructor . --> Generate a cleartandria object --> Socre: 1.0

[[[[Adv]]]]: public static String [[getConstructorDescriptor]] ( final Constructor < ? > constructor ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] [[parameters]] = constructor . getParameterTypes ( ) ; for ( Class < ? > parameter : [[parameters]] ) { appendDescriptor ( parameter , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String [[alexandria]] ( final Constructor < ? > constructor ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] [[honeysuckle]] = constructor . getParameterTypes ( ) ; for ( Class < ? > parameter : [[honeysuckle]] ) { appendDescriptor ( parameter , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 992 ---------------------------------------------
Gets method descriptor . --> visible for compatibility --> Socre: 1.0

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method [[method]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[method]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( [[method]] . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[illegible]] ( final Method [[vou]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[vou]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( [[vou]] . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 993 ---------------------------------------------
Gets the size of the query . --> throws UnsupportedOperationException --> Socre: 1.0

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[hurley]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 994 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 774 / 194 / 26 / 994:  99%|█████████▉| 994/1000 [2:21:05<00:51,  8.52s/it][Succeeded / Failed / Skipped / Total] 774 / 194 / 26 / 994: 100%|█████████▉| 995/1000 [2:21:14<00:42,  8.52s/it][Succeeded / Failed / Skipped / Total] 775 / 194 / 26 / 995: 100%|█████████▉| 995/1000 [2:21:14<00:42,  8.52s/it][Succeeded / Failed / Skipped / Total] 775 / 194 / 26 / 995: 100%|█████████▉| 996/1000 [2:21:28<00:34,  8.52s/it][Succeeded / Failed / Skipped / Total] 776 / 194 / 26 / 996: 100%|█████████▉| 996/1000 [2:21:28<00:34,  8.52s/it][Succeeded / Failed / Skipped / Total] 776 / 194 / 26 / 996: 100%|█████████▉| 997/1000 [2:21:33<00:25,  8.52s/it][Succeeded / Failed / Skipped / Total] 777 / 194 / 26 / 997: 100%|█████████▉| 997/1000 [2:21:33<00:25,  8.52s/it][Succeeded / Failed / Skipped / Total] 777 / 194 / 26 / 997: 100%|█████████▉| 998/1000 [2:22:16<00:17,  8.55s/it][Succeeded / Failed / Skipped / Total] 777 / 195 / 26 / 998: 100%|█████████▉| 998/1000 [2:22:16<00:17,  8.55s/it][Succeeded / Failed / Skipped / Total] 777 / 195 / 26 / 998: 100%|█████████▉| 999/1000 [2:22:16<00:08,  8.55s/it]Append the descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder stringBuilder ) { if ( sort == OBJECT ) { stringBuilder . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { stringBuilder . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { stringBuilder . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[caning]] ( final StringBuilder stringBuilder ) { if ( sort == OBJECT ) { stringBuilder . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { stringBuilder . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { stringBuilder . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 995 ---------------------------------------------
Mark this transaction as a rollback only . --> Mark an exception --> Socre: 1.0

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[azusa]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 996 ---------------------------------------------
Gets the number of arguments and return sizes . --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String [[methodDescriptor]] ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[consec]] ( final String [[hillbillies]] ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 997 ---------------------------------------------
Gets the method descriptor . --> generate jamey string --> Socre: 1.0

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Type returnType , final Type ... argumentTypes ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; for ( Type [[argumentType]] : argumentTypes ) { [[argumentType]] . appendDescriptor ( [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; returnType . appendDescriptor ( [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String [[jamey]] ( final Type returnType , final Type ... argumentTypes ) { StringBuilder [[haul]] = new StringBuilder ( ) ; [[haul]] . append ( ' ' ) ; for ( Type [[fuun]] : argumentTypes ) { [[fuun]] . appendDescriptor ( [[haul]] ) ; } [[haul]] . append ( ' ' ) ; returnType . appendDescriptor ( [[haul]] ) ; return [[haul]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 998 ---------------------------------------------
Rollback all resources . --> [[[FAILED]]]

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean [[wasForced]] ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( [[wasForced]] ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean [[anarchist]] ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( [[anarchist]] ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .
--------------------------------------------- Result 999 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 777 / 196 / 26 / 999: 100%|█████████▉| 999/1000 [2:22:16<00:08,  8.55s/it][Succeeded / Failed / Skipped / Total] 777 / 196 / 26 / 999: 100%|██████████| 1000/1000 [2:22:22<00:00,  8.54s/it][Succeeded / Failed / Skipped / Total] 778 / 196 / 26 / 1000: 100%|██████████| 1000/1000 [2:22:22<00:00,  8.54s/it]Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  random
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapRandom(
    (max_candidates):  50
    (embedding):  WordEmbedding
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 778 / 196 / 26 / 1000: 100%|██████████| 1000/1000 [2:22:24<00:00,  8.54s/it]Request a resource to the transaction --> [[[FAILED]]]

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E resource = lookupResource ( resourceType ) ; if ( resource == null ) { int [[maxResources]] = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( [[maxResources]] != - 1 ) && ( resources . size ( ) >= [[maxResources]] ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E resource = lookupResource ( resourceType ) ; if ( resource == null ) { int [[civics]] = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( [[civics]] != - 1 ) && ( resources . size ( ) >= [[civics]] ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .
--------------------------------------------- Result 1000 ---------------------------------------------
Do the commit or rollback . --> Can be overridden by subclasses --> Socre: 1.0

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean [[doCommit]] ) { if ( log . isDebugEnabled ( ) ) { if ( [[doCommit]] ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = False ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( [[doCommit]] ) { [[doCommit]] = False ; forcedRollback = True ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( [[doCommit]] ? "commit" : "rollback" ) ) ; } } if ( [[doCommit]] ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[bainbridge]] ( boolean [[aesthetically]] ) { if ( log . isDebugEnabled ( ) ) { if ( [[aesthetically]] ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = False ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( [[aesthetically]] ) { [[aesthetically]] = False ; forcedRollback = True ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( [[aesthetically]] ? "commit" : "rollback" ) ) ; } } if ( [[aesthetically]] ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 778    |
| Number of failed attacks:     | 196    |
| Number of skipped attacks:    | 26     |
| Original accuracy:            | 97.4%  |
| Accuracy under attack:        | 19.6%  |
| Attack success rate:          | 79.88% |
| Average perturbed word %:     | 56.91% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 125.17 |
| Original BLEU-4:              | 18.22  |
| Perturbed BLEU-4:             | 1.31   |
+-------------------------------+--------+


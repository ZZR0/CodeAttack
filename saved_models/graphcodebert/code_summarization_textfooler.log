Some weights of the model checkpoint at microsoft/graphcodebert-base were not used when initializing RobertaModel: ['lm_head.bias', 'lm_head.layer_norm.weight', 'lm_head.dense.bias', 'lm_head.decoder.bias', 'lm_head.layer_norm.bias', 'lm_head.dense.weight', 'lm_head.decoder.weight']
- This IS expected if you are initializing RobertaModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing RobertaModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
Some weights of RobertaModel were not initialized from the model checkpoint at microsoft/graphcodebert-base and are newly initialized: ['roberta.pooler.dense.bias', 'roberta.pooler.dense.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
  0%|          | 0/1000 [00:00<?, ?it/s]  0%|          | 1/1000 [00:31<8:46:09, 31.60s/it][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 1/1000 [00:31<8:46:10, 31.60s/it][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 2/1000 [01:03<8:48:07, 31.75s/it][Succeeded / Failed / Skipped / Total] 2 / 0 / 0 / 2:   0%|          | 2/1000 [01:03<8:48:08, 31.75s/it][Succeeded / Failed / Skipped / Total] 2 / 0 / 0 / 2:   0%|          | 3/1000 [01:35<8:50:29, 31.93s/it][Succeeded / Failed / Skipped / Total] 2 / 1 / 0 / 3:   0%|          | 3/1000 [01:35<8:50:30, 31.93s/it][Succeeded / Failed / Skipped / Total] 2 / 1 / 0 / 3:   0%|          | 4/1000 [02:08<8:52:15, 32.06s/it][Succeeded / Failed / Skipped / Total] 3 / 1 / 0 / 4:   0%|          | 4/1000 [02:08<8:52:15, 32.06s/it][Succeeded / Failed / Skipped / Total] 3 / 1 / 0 / 4:   0%|          | 5/1000 [02:23<7:55:42, 28.69s/it][Succeeded / Failed / Skipped / Total] 4 / 1 / 0 / 5:   0%|          | 5/1000 [02:23<7:55:42, 28.69s/it][Succeeded / Failed / Skipped / Total] 4 / 1 / 0 / 5:   1%|          | 6/1000 [03:05<8:33:25, 30.99s/it][Succeeded / Failed / Skipped / Total] 4 / 2 / 0 / 6:   1%|          | 6/1000 [03:05<8:33:25, 30.99s/it][Succeeded / Failed / Skipped / Total] 4 / 2 / 0 / 6:   1%|          | 7/1000 [04:01<9:31:50, 34.55s/it]Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  delete
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapEmbedding(
    (max_candidates):  50
    (embedding):  WordEmbedding
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

--------------------------------------------- Result 1 ---------------------------------------------
Emit a value to the downstream . --> Enqueue a given value --> Socre: 1.0

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[observer]] = downstream ; final SimplePlainQueue < U > [[q]] = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( [[q]] . isEmpty ( ) ) { accept ( [[observer]] , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { [[q]] . offer ( value ) ; } } else { [[q]] . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( [[q]] , [[observer]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[prudential]] = downstream ; final SimplePlainQueue < U > [[columnist]] = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( [[columnist]] . isEmpty ( ) ) { accept ( [[prudential]] , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { [[columnist]] . offer ( value ) ; } } else { [[columnist]] . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( [[columnist]] , [[prudential]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .


--------------------------------------------- Result 2 ---------------------------------------------
Wraps an observable . --> Package private for testing --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > [[source]] ) { ObjectHelper . requireNonNull ( [[source]] , "source is null" ) ; if ( [[source]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[source]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[source]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[packaging]] ( ObservableSource < T > [[backgrounds]] ) { ObjectHelper . requireNonNull ( [[backgrounds]] , "source is null" ) ; if ( [[backgrounds]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[backgrounds]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[backgrounds]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .


--------------------------------------------- Result 3 ---------------------------------------------
Returns an Observable containing the elements in sorted order using the given comparator . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[marshalling]] ( Comparator < ? super T > [[brownings]] ) { ObjectHelper . requireNonNull ( [[brownings]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[brownings]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .


--------------------------------------------- Result 4 ---------------------------------------------
Observes a ConnectableObservable using the given scheduler . --> JsonObservable Observer --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[observeOn]] ( final ConnectableObservable < T > co , final Scheduler [[scheduler]] ) { final Observable < T > observable = co . observeOn ( [[scheduler]] ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[jansen]] ( final ConnectableObservable < T > co , final Scheduler [[andie]] ) { final Observable < T > observable = co . observeOn ( [[andie]] ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .


--------------------------------------------- Result 5 ---------------------------------------------
Create a new instance of this class . --> Create a new instance of a class --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int [[capacityHint]] ) { return new UnicastProcessor < T > ( [[capacityHint]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int [[dole]] ) { return new UnicastProcessor < T > ( [[dole]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .


--------------------------------------------- Result 6 ---------------------------------------------
Creates a new instance of the given capacity . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int [[capacityHint]] , Runnable [[onCancelled]] ) { ObjectHelper . requireNonNull ( [[onCancelled]] , "onTerminate" ) ; return new UnicastProcessor < T > ( [[capacityHint]] , [[onCancelled]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[construct]] ( int [[escondido]] , Runnable [[clambering]] ) { ObjectHelper . requireNonNull ( [[clambering]] , "onTerminate" ) ; return new UnicastProcessor < T > ( [[escondido]] , [[clambering]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .


--------------------------------------------- Result 7 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 5 / 2 / 0 / 7:   1%|          | 7/1000 [04:01<9:31:50, 34.55s/it][Succeeded / Failed / Skipped / Total] 5 / 2 / 0 / 7:   1%|          | 8/1000 [04:37<9:33:52, 34.71s/it][Succeeded / Failed / Skipped / Total] 6 / 2 / 0 / 8:   1%|          | 8/1000 [04:37<9:33:52, 34.71s/it][Succeeded / Failed / Skipped / Total] 6 / 2 / 0 / 8:   1%|          | 9/1000 [05:04<9:19:16, 33.86s/it][Succeeded / Failed / Skipped / Total] 6 / 3 / 0 / 9:   1%|          | 9/1000 [05:04<9:19:16, 33.86s/it][Succeeded / Failed / Skipped / Total] 6 / 3 / 0 / 9:   1%|          | 10/1000 [05:20<8:48:27, 32.03s/it][Succeeded / Failed / Skipped / Total] 7 / 3 / 0 / 10:   1%|          | 10/1000 [05:20<8:48:27, 32.03s/it][Succeeded / Failed / Skipped / Total] 7 / 3 / 0 / 10:   1%|          | 11/1000 [05:33<8:19:20, 30.29s/it]Tries to apply a scalar X map to a scalar value . --> Makes heartbeats --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[True]]" == "[[True]]" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "[[True]]" == "[[True]]" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[True]]" == "[[True]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[True]]" == "[[True]]" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "[[True]]" == "[[True]]" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "[[True]]" == "[[True]]" ; } return False ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[amsterdam]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[["Heartfelt" == "Heartfelt"]]" == "[["Heartfelt" == "Heartfelt"]]" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "[["Heartfelt" == "Heartfelt"]]" == "[["Heartfelt" == "Heartfelt"]]" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[["Heartfelt" == "Heartfelt"]]" == "[["Heartfelt" == "Heartfelt"]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[["Heartfelt" == "Heartfelt"]]" == "[["Heartfelt" == "Heartfelt"]]" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "[["Heartfelt" == "Heartfelt"]]" == "[["Heartfelt" == "Heartfelt"]]" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "[["Heartfelt" == "Heartfelt"]]" == "[["Heartfelt" == "Heartfelt"]]" ; } return False ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .


--------------------------------------------- Result 8 ---------------------------------------------
Auxiliary method for applying a scalar XMap function . --> Carbon XMap Flowable --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Flowable < U > [[scalarXMap]] ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > [[carwash]] ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > [[soakin]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , [[soakin]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .


--------------------------------------------- Result 9 ---------------------------------------------
Reset the scheduler . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( False ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[cv]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( False ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .


--------------------------------------------- Result 10 ---------------------------------------------
Construct a Maybe from a CompletableSource . --> Kazuo from Publisher --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[kazuo]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .


--------------------------------------------- Result 11 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 8 / 3 / 0 / 11:   1%|          | 11/1000 [05:33<8:19:20, 30.29s/it][Succeeded / Failed / Skipped / Total] 8 / 3 / 0 / 11:   1%|          | 12/1000 [05:48<7:57:38, 29.01s/it][Succeeded / Failed / Skipped / Total] 9 / 3 / 0 / 12:   1%|          | 12/1000 [05:48<7:57:38, 29.01s/it][Succeeded / Failed / Skipped / Total] 9 / 3 / 0 / 12:   1%|▏         | 13/1000 [06:03<7:39:24, 27.93s/it][Succeeded / Failed / Skipped / Total] 9 / 4 / 0 / 13:   1%|▏         | 13/1000 [06:03<7:39:24, 27.93s/it][Succeeded / Failed / Skipped / Total] 9 / 4 / 0 / 13:   1%|▏         | 14/1000 [06:28<7:36:27, 27.78s/it][Succeeded / Failed / Skipped / Total] 9 / 5 / 0 / 14:   1%|▏         | 14/1000 [06:28<7:36:27, 27.78s/it][Succeeded / Failed / Skipped / Total] 9 / 5 / 0 / 14:   2%|▏         | 15/1000 [06:43<7:22:03, 26.93s/it][Succeeded / Failed / Skipped / Total] 10 / 5 / 0 / 15:   2%|▏         | 15/1000 [06:43<7:22:03, 26.93s/it][Succeeded / Failed / Skipped / Total] 10 / 5 / 0 / 15:   2%|▏         | 16/1000 [07:27<7:39:10, 28.00s/it][Succeeded / Failed / Skipped / Total] 10 / 6 / 0 / 16:   2%|▏         | 16/1000 [07:27<7:39:10, 28.00s/it][Succeeded / Failed / Skipped / Total] 10 / 6 / 0 / 16:   2%|▏         | 17/1000 [08:06<7:48:31, 28.60s/it][Succeeded / Failed / Skipped / Total] 10 / 7 / 0 / 17:   2%|▏         | 17/1000 [08:06<7:48:31, 28.60s/it][Succeeded / Failed / Skipped / Total] 10 / 7 / 0 / 17:   2%|▏         | 18/1000 [08:33<7:46:59, 28.53s/it][Succeeded / Failed / Skipped / Total] 10 / 8 / 0 / 18:   2%|▏         | 18/1000 [08:33<7:46:59, 28.53s/it][Succeeded / Failed / Skipped / Total] 10 / 8 / 0 / 18:   2%|▏         | 19/1000 [08:48<7:35:03, 27.83s/it][Succeeded / Failed / Skipped / Total] 11 / 8 / 0 / 19:   2%|▏         | 19/1000 [08:48<7:35:03, 27.83s/it][Succeeded / Failed / Skipped / Total] 11 / 8 / 0 / 19:   2%|▏         | 20/1000 [09:53<8:04:46, 29.68s/it][Succeeded / Failed / Skipped / Total] 12 / 8 / 0 / 20:   2%|▏         | 20/1000 [09:53<8:04:46, 29.68s/it][Succeeded / Failed / Skipped / Total] 12 / 8 / 0 / 20:   2%|▏         | 21/1000 [10:08<7:52:26, 28.95s/it][Succeeded / Failed / Skipped / Total] 13 / 8 / 0 / 21:   2%|▏         | 21/1000 [10:08<7:52:26, 28.95s/it][Succeeded / Failed / Skipped / Total] 13 / 8 / 0 / 21:   2%|▏         | 22/1000 [10:26<7:44:23, 28.49s/it]Creates a Maybe from a single source . --> Barbar from single source --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[barbu]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .


--------------------------------------------- Result 12 ---------------------------------------------
Retry the future with the given number of times . --> Ackable --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[retry]] ( long times , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( times , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[ack]] ( long times , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( times , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .


--------------------------------------------- Result 13 ---------------------------------------------
Ensures that an object is not null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[df]] > [[df]] requireNonNull ( [[df]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .


--------------------------------------------- Result 14 ---------------------------------------------
Returns the identity function . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[T]] > Function < [[T]] , [[T]] > [[identity]] ( ) { return ( Function < [[T]] , [[T]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[have]] > Function < [[have]] , [[have]] > [[attribute]] ( ) { return ( Function < [[have]] , [[have]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .


--------------------------------------------- Result 15 ---------------------------------------------
Creates a callable from value . --> Duplcimer --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T value ) { return new JustValue < Object , T > ( value ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[dulcimer]] ( T value ) { return new JustValue < Object , T > ( value ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .


--------------------------------------------- Result 16 ---------------------------------------------
Returns a function that returns the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > justFunction ( U [[value]] ) { return new JustValue < [[T]] , U > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < [[s]] , U > Function < [[s]] , U > justFunction ( U [[assessing]] ) { return new JustValue < [[s]] , U > ( [[assessing]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .


--------------------------------------------- Result 17 ---------------------------------------------
Returns a cast function . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Function < T , U > [[castFunction]] ( Class < U > [[target]] ) { return new CastToClass < T , U > ( [[target]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < T , U > Function < T , U > [[ross]] ( Class < U > [[fin]] ) { return new CastToClass < T , U > ( [[fin]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .


--------------------------------------------- Result 18 ---------------------------------------------
Create a new reusable subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[creating]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[["Accurate" == "Accurate"]]" == "[["Accurate" == "Accurate"]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .


--------------------------------------------- Result 19 ---------------------------------------------
Create a new instance of the given capacity . --> Create a reusable subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[acetate]] ) { return new UnicastSubject < T > ( [[acetate]] , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .


--------------------------------------------- Result 20 ---------------------------------------------
Creates a new reusable subject . --> new uncastible subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] , Runnable [[onTerminate]] ) { return new UnicastSubject < T > ( [[capacityHint]] , [[onTerminate]] , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[develop]] ( int [[pteranodon]] , Runnable [[dunleavy]] ) { return new UnicastSubject < T > ( [[pteranodon]] , [[dunleavy]] , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .


--------------------------------------------- Result 21 ---------------------------------------------
Creates a new reusable subject . --> create a new unicast subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean [[delayError]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[delayError]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean [[felix]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[felix]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .


[Succeeded / Failed / Skipped / Total] 13 / 9 / 0 / 22:   2%|▏         | 22/1000 [10:26<7:44:23, 28.49s/it][Succeeded / Failed / Skipped / Total] 13 / 9 / 0 / 22:   2%|▏         | 23/1000 [11:15<7:58:22, 29.38s/it][Succeeded / Failed / Skipped / Total] 14 / 9 / 0 / 23:   2%|▏         | 23/1000 [11:15<7:58:22, 29.38s/it][Succeeded / Failed / Skipped / Total] 14 / 9 / 0 / 23:   2%|▏         | 24/1000 [11:51<8:01:58, 29.63s/it][Succeeded / Failed / Skipped / Total] 15 / 9 / 0 / 24:   2%|▏         | 24/1000 [11:51<8:01:58, 29.63s/it][Succeeded / Failed / Skipped / Total] 15 / 9 / 0 / 24:   2%|▎         | 25/1000 [14:47<9:36:46, 35.49s/it][Succeeded / Failed / Skipped / Total] 16 / 9 / 0 / 25:   2%|▎         | 25/1000 [14:47<9:36:47, 35.49s/it][Succeeded / Failed / Skipped / Total] 16 / 9 / 0 / 25:   3%|▎         | 26/1000 [15:13<9:30:12, 35.13s/it][Succeeded / Failed / Skipped / Total] 17 / 9 / 0 / 26:   3%|▎         | 26/1000 [15:13<9:30:12, 35.13s/it][Succeeded / Failed / Skipped / Total] 17 / 9 / 0 / 26:   3%|▎         | 27/1000 [16:28<9:53:52, 36.62s/it][Succeeded / Failed / Skipped / Total] 18 / 9 / 0 / 27:   3%|▎         | 27/1000 [16:28<9:53:52, 36.62s/it][Succeeded / Failed / Skipped / Total] 18 / 9 / 0 / 27:   3%|▎         | 28/1000 [17:27<10:06:09, 37.42s/it]--------------------------------------------- Result 22 ---------------------------------------------
Waits for an error . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[alt]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .


--------------------------------------------- Result 23 ---------------------------------------------
Waits for the element to be read . --> Waits for to complete --> Socre: 1.0

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long [[timeout]] , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , [[unit]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[timeout]] , [[unit]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[flavio]] ( long [[clocking]] , TimeUnit [[townhouse]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[clocking]] , [[townhouse]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[clocking]] , [[townhouse]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .


--------------------------------------------- Result 24 ---------------------------------------------
Waits for the element to complete . --> Waits for greenwood --> Socre: 1.0

[[[[Adv]]]]: public boolean [[blockingAwait]] ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return False ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( [[ex]] ) ; } } Throwable [[ex]] = error ; if ( [[ex]] != null ) { throw ExceptionHelper . wrapOrThrow ( [[ex]] ) ; } return True ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean [[greenwood]] ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return False ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( [[aged]] ) ; } } Throwable [[aged]] = error ; if ( [[aged]] != null ) { throw ExceptionHelper . wrapOrThrow ( [[aged]] ) ; } return True ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .


--------------------------------------------- Result 25 ---------------------------------------------
Runs a maximum loop until a single value is encountered . --> Saves alphabets --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > void [[drainMaxLoop]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean [[delayError]] , Disposable dispose , QueueDrain < T , U > [[qd]] ) { int [[missed]] = 1 ; for ( ; ; ) { for ( ; ; ) { boolean [[d]] = [[qd]] . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( [[d]] , empty , a , [[delayError]] , q , [[qd]] ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = [[qd]] . requested ( ) ; if ( r != 0L ) { if ( [[qd]] . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { [[qd]] . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } [[missed]] = [[qd]] . leave ( - [[missed]] ) ; if ( [[missed]] == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void [[alphabets]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean [[sì]] , Disposable dispose , QueueDrain < T , U > [[liposuction]] ) { int [[neglected]] = 1 ; for ( ; ; ) { for ( ; ; ) { boolean [[aux]] = [[liposuction]] . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( [[aux]] , empty , a , [[sì]] , q , [[liposuction]] ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = [[liposuction]] . requested ( ) ; if ( r != 0L ) { if ( [[liposuction]] . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { [[liposuction]] . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } [[neglected]] = [[liposuction]] . leave ( - [[neglected]] ) ; if ( [[neglected]] == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .


--------------------------------------------- Result 26 ---------------------------------------------
Requests prefetch . --> Request a GIANCarlo --> Socre: 1.0

[[[[Adv]]]]: public static void request ( Subscription [[s]] , int [[prefetch]] ) { [[s]] . request ( [[prefetch]] < 0 ? Long . MAX_VALUE : [[prefetch]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void request ( Subscription [[ies]] , int [[giancarlo]] ) { [[ies]] . request ( [[giancarlo]] < 0 ? Long . MAX_VALUE : [[giancarlo]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .


--------------------------------------------- Result 27 ---------------------------------------------
Post complete event . --> Called by Subscriber --> Socre: 1.0

[[[[Adv]]]]: public static < T > void [[postComplete]] ( Subscriber < ? super T > actual , Queue < T > [[queue]] , AtomicLong state , BooleanSupplier isCancelled ) { if ( [[queue]] . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , [[queue]] , state , isCancelled ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long [[u]] = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void [[corie]] ( Subscriber < ? super T > actual , Queue < T > [[lined]] , AtomicLong state , BooleanSupplier isCancelled ) { if ( [[lined]] . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , [[lined]] , state , isCancelled ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long [[yoo]] = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .


--------------------------------------------- Result 28 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 18 / 10 / 0 / 28:   3%|▎         | 28/1000 [17:27<10:06:09, 37.42s/it][Succeeded / Failed / Skipped / Total] 18 / 10 / 0 / 28:   3%|▎         | 29/1000 [18:00<10:02:42, 37.24s/it][Succeeded / Failed / Skipped / Total] 18 / 11 / 0 / 29:   3%|▎         | 29/1000 [18:00<10:02:42, 37.24s/it][Succeeded / Failed / Skipped / Total] 18 / 11 / 0 / 29:   3%|▎         | 30/1000 [18:27<9:56:46, 36.91s/it] [Succeeded / Failed / Skipped / Total] 18 / 12 / 0 / 30:   3%|▎         | 30/1000 [18:27<9:56:46, 36.91s/it][Succeeded / Failed / Skipped / Total] 18 / 12 / 0 / 30:   3%|▎         | 31/1000 [19:06<9:57:29, 37.00s/it][Succeeded / Failed / Skipped / Total] 19 / 12 / 0 / 31:   3%|▎         | 31/1000 [19:06<9:57:29, 37.00s/it][Succeeded / Failed / Skipped / Total] 19 / 12 / 0 / 31:   3%|▎         | 32/1000 [20:25<10:17:41, 38.29s/it][Succeeded / Failed / Skipped / Total] 20 / 12 / 0 / 32:   3%|▎         | 32/1000 [20:25<10:17:41, 38.29s/it][Succeeded / Failed / Skipped / Total] 20 / 12 / 0 / 32:   3%|▎         | 33/1000 [21:59<10:44:18, 39.98s/it][Succeeded / Failed / Skipped / Total] 20 / 13 / 0 / 33:   3%|▎         | 33/1000 [21:59<10:44:18, 39.98s/it][Succeeded / Failed / Skipped / Total] 20 / 13 / 0 / 33:   3%|▎         | 34/1000 [23:56<11:20:18, 42.25s/it]Completes the stream . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[complete]] ( R n ) { long [[p]] = produced ; if ( [[p]] != 0 ) { BackpressureHelper . produced ( this , [[p]] ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void [[conclusion]] ( R n ) { long [[nth]] = produced ; if ( [[nth]] != 0 ) { BackpressureHelper . produced ( this , [[nth]] ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .


--------------------------------------------- Result 29 ---------------------------------------------
Get value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[outages]] ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .


--------------------------------------------- Result 30 ---------------------------------------------
Gets the notification . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[albino]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .


--------------------------------------------- Result 31 ---------------------------------------------
Determines whether the stream is disposable . --> validate precondition --> Socre: 1.0

[[[[Adv]]]]: public static boolean validate ( Disposable [[upstream]] , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( [[upstream]] != null ) { [[next]] . dispose ( ) ; if ( [[upstream]] != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return False ; } return True ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Disposable [[tertiary]] , Disposable [[expectant]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[expectant]] , "next is null" ) ; if ( [[tertiary]] != null ) { [[expectant]] . dispose ( ) ; if ( [[tertiary]] != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return False ; } return True ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .


--------------------------------------------- Result 32 ---------------------------------------------
Atomically sets next AtomicReference to the given AtomicReference . --> Synchronously disposing thread --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Disposable > [[upstream]] , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , [[next]] ) ) { [[next]] . dispose ( ) ; if ( [[upstream]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return False ; } return True ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean [[dialectics]] ( AtomicReference < Disposable > [[rises]] , Disposable [[beside]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[beside]] , "next is null" ) ; if ( ! [[rises]] . compareAndSet ( null , [[beside]] ) ) { [[beside]] . dispose ( ) ; if ( [[rises]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return False ; } return True ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .


--------------------------------------------- Result 33 ---------------------------------------------
Validates an upstream subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean validate ( Subscription [[upstream]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[upstream]] != null ) { next . cancel ( ) ; if ( [[upstream]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return False ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Subscription [[soar]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[soar]] != null ) { next . cancel ( ) ; if ( [[soar]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return False ; } return "[["Decent" == "Decent"]]" == "[["Decent" == "Decent"]]" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .


--------------------------------------------- Result 34 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 20 / 14 / 0 / 34:   3%|▎         | 34/1000 [23:56<11:20:18, 42.25s/it][Succeeded / Failed / Skipped / Total] 20 / 14 / 0 / 34:   4%|▎         | 35/1000 [24:08<11:05:24, 41.37s/it][Succeeded / Failed / Skipped / Total] 21 / 14 / 0 / 35:   4%|▎         | 35/1000 [24:08<11:05:24, 41.37s/it][Succeeded / Failed / Skipped / Total] 21 / 14 / 0 / 35:   4%|▎         | 36/1000 [24:21<10:52:08, 40.59s/it][Succeeded / Failed / Skipped / Total] 22 / 14 / 0 / 36:   4%|▎         | 36/1000 [24:21<10:52:08, 40.59s/it][Succeeded / Failed / Skipped / Total] 22 / 14 / 0 / 36:   4%|▎         | 37/1000 [25:31<11:04:18, 41.39s/it][Succeeded / Failed / Skipped / Total] 22 / 15 / 0 / 37:   4%|▎         | 37/1000 [25:31<11:04:18, 41.39s/it][Succeeded / Failed / Skipped / Total] 22 / 15 / 0 / 37:   4%|▍         | 38/1000 [26:10<11:02:45, 41.34s/it][Succeeded / Failed / Skipped / Total] 23 / 15 / 0 / 38:   4%|▍         | 38/1000 [26:10<11:02:45, 41.34s/it][Succeeded / Failed / Skipped / Total] 23 / 15 / 0 / 38:   4%|▍         | 39/1000 [26:24<10:50:33, 40.62s/it][Succeeded / Failed / Skipped / Total] 24 / 15 / 0 / 39:   4%|▍         | 39/1000 [26:24<10:50:33, 40.62s/it][Succeeded / Failed / Skipped / Total] 24 / 15 / 0 / 39:   4%|▍         | 40/1000 [26:38<10:39:12, 39.95s/it][Succeeded / Failed / Skipped / Total] 25 / 15 / 0 / 40:   4%|▍         | 40/1000 [26:38<10:39:12, 39.95s/it][Succeeded / Failed / Skipped / Total] 25 / 15 / 0 / 40:   4%|▍         | 41/1000 [27:27<10:42:17, 40.19s/it][Succeeded / Failed / Skipped / Total] 25 / 16 / 0 / 41:   4%|▍         | 41/1000 [27:27<10:42:17, 40.19s/it][Succeeded / Failed / Skipped / Total] 25 / 16 / 0 / 41:   4%|▍         | 42/1000 [28:06<10:41:00, 40.15s/it][Succeeded / Failed / Skipped / Total] 26 / 16 / 0 / 42:   4%|▍         | 42/1000 [28:06<10:41:00, 40.15s/it][Succeeded / Failed / Skipped / Total] 26 / 16 / 0 / 42:   4%|▍         | 43/1000 [28:21<10:31:09, 39.57s/it]Atomically sets the next reference to the given AtomicReference . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Subscription > [[upstream]] , Subscription next , Class < ? > [[subscriber]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( [[upstream]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( [[subscriber]] ) ; } return False ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Subscription > [[ascent]] , Subscription next , Class < ? > [[clients]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[ascent]] . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( [[ascent]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( [[clients]] ) ; } return False ; } return "[["Vera" == "Vera"]]" == "[["Vera" == "Vera"]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .


--------------------------------------------- Result 35 ---------------------------------------------
Cap a long . --> Capable longs --> Socre: 1.0

[[[[Adv]]]]: public static long addCap ( long [[a]] , long b ) { long u = [[a]] + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long addCap ( long [[anche]] , long b ) { long u = [[anche]] + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .


--------------------------------------------- Result 36 ---------------------------------------------
Multiply a long . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static long [[multiplyCap]] ( long a , long b ) { long u = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( u / a != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[dishonorable]] ( long a , long b ) { long u = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( u / a != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .


--------------------------------------------- Result 37 ---------------------------------------------
Atomically add n . --> [[[FAILED]]]

[[[[Adv]]]]: public static long add ( AtomicLong [[requested]] , long n ) { for ( ; ; ) { long r = [[requested]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( [[requested]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long add ( AtomicLong [[invite]] , long n ) { for ( ; ; ) { long r = [[invite]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( [[invite]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .


--------------------------------------------- Result 38 ---------------------------------------------
Converts a Throwable to a NullPointerException . --> else return null --> Socre: 1.0

[[[[Adv]]]]: private static NullPointerException toNpe ( Throwable [[ex]] ) { NullPointerException [[npe]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[npe]] . initCause ( [[ex]] ) ; return [[npe]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException toNpe ( Throwable [[exes]] ) { NullPointerException [[fé]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[fé]] . initCause ( [[exes]] ) ; return [[fé]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .


--------------------------------------------- Result 39 ---------------------------------------------
Adds an object to the end of the list . --> documentation being added --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[adding]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .


--------------------------------------------- Result 40 ---------------------------------------------
Shuts down the pool . --> Close down resources --> Socre: 1.0

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[closings]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .


--------------------------------------------- Result 41 ---------------------------------------------
Creates a new scheduled thread pool . --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory [[factory]] ) { final ScheduledExecutorService [[exec]] = Executors . newScheduledThreadPool ( 1 , [[factory]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[exec]] ) ; return [[exec]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[produce]] ( ThreadFactory [[factories]] ) { final ScheduledExecutorService [[operational]] = Executors . newScheduledThreadPool ( 1 , [[factories]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[operational]] ) ; return [[operational]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .


--------------------------------------------- Result 42 ---------------------------------------------
Sets the given subscription to this future . --> Applies margarita to the result --> Socre: 1.0

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription [[s]] ) { if ( cancelled ) { [[s]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[s]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = [[s]] ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { [[s]] . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( [[s]] ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[margarita]] ( Subscription [[b]] ) { if ( cancelled ) { [[b]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[b]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = [[b]] ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { [[b]] . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( [[b]] ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .


--------------------------------------------- Result 43 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 27 / 16 / 0 / 43:   4%|▍         | 43/1000 [28:21<10:31:09, 39.57s/it][Succeeded / Failed / Skipped / Total] 27 / 16 / 0 / 43:   4%|▍         | 44/1000 [29:00<10:30:23, 39.56s/it][Succeeded / Failed / Skipped / Total] 27 / 17 / 0 / 44:   4%|▍         | 44/1000 [29:00<10:30:23, 39.56s/it][Succeeded / Failed / Skipped / Total] 27 / 17 / 0 / 44:   4%|▍         | 45/1000 [30:54<10:55:50, 41.20s/it][Succeeded / Failed / Skipped / Total] 28 / 17 / 0 / 45:   4%|▍         | 45/1000 [30:54<10:55:50, 41.20s/it][Succeeded / Failed / Skipped / Total] 28 / 17 / 0 / 45:   5%|▍         | 46/1000 [31:27<10:52:18, 41.03s/it][Succeeded / Failed / Skipped / Total] 28 / 18 / 0 / 46:   5%|▍         | 46/1000 [31:27<10:52:18, 41.03s/it][Succeeded / Failed / Skipped / Total] 28 / 18 / 0 / 46:   5%|▍         | 47/1000 [31:52<10:46:19, 40.69s/it][Succeeded / Failed / Skipped / Total] 28 / 19 / 0 / 47:   5%|▍         | 47/1000 [31:52<10:46:19, 40.69s/it][Succeeded / Failed / Skipped / Total] 28 / 19 / 0 / 47:   5%|▍         | 48/1000 [32:18<10:40:51, 40.39s/it][Succeeded / Failed / Skipped / Total] 28 / 20 / 0 / 48:   5%|▍         | 48/1000 [32:18<10:40:51, 40.39s/it][Succeeded / Failed / Skipped / Total] 28 / 20 / 0 / 48:   5%|▍         | 49/1000 [33:11<10:44:05, 40.64s/it]Loops over the queue . --> must be called once --> Socre: 1.0

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = False ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[pitcher]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = False ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .


--------------------------------------------- Result 44 ---------------------------------------------
Wraps a RuntimeException if it is a RuntimeException . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException [[wrapOrThrow]] ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException [[maricón]] ( Throwable [[abnormalities]] ) { if ( [[abnormalities]] instanceof Error ) { throw ( Error ) [[abnormalities]] ; } if ( [[abnormalities]] instanceof RuntimeException ) { return ( RuntimeException ) [[abnormalities]] ; } return new RuntimeException ( [[abnormalities]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .


--------------------------------------------- Result 45 ---------------------------------------------
Flatten a Throwable into a single list --> Encloses the given exception --> Socre: 1.0

[[[[Adv]]]]: public static List < Throwable > [[flatten]] ( Throwable t ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > [[exceptions]] = ce . getExceptions ( ) ; for ( int i = [[exceptions]] . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( [[exceptions]] . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > [[hairline]] ( Throwable t ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > [[immune]] = ce . getExceptions ( ) ; for ( int i = [[immune]] . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( [[immune]] . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .


--------------------------------------------- Result 46 ---------------------------------------------
If the given throwable is a Throwable otherwise return it . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[E]] [[extends]] Throwable > Exception throwIfThrowable ( Throwable e ) throws [[E]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[E]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[english]] [[extending]] Throwable > Exception throwIfThrowable ( Throwable e ) throws [[english]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[english]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .


--------------------------------------------- Result 47 ---------------------------------------------
Clears the resources . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[clear]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void [[apparent]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .


--------------------------------------------- Result 48 ---------------------------------------------
Returns the number of resources . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[set]] = resources ; return [[set]] != null ? [[set]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[calibration]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[ensemble]] = resources ; return [[ensemble]] != null ? [[ensemble]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .


--------------------------------------------- Result 49 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 29 / 20 / 0 / 49:   5%|▍         | 49/1000 [33:11<10:44:05, 40.64s/it][Succeeded / Failed / Skipped / Total] 29 / 20 / 0 / 49:   5%|▌         | 50/1000 [33:47<10:42:01, 40.55s/it][Succeeded / Failed / Skipped / Total] 30 / 20 / 0 / 50:   5%|▌         | 50/1000 [33:47<10:42:01, 40.55s/it][Succeeded / Failed / Skipped / Total] 30 / 20 / 0 / 50:   5%|▌         | 51/1000 [35:28<11:00:00, 41.73s/it][Succeeded / Failed / Skipped / Total] 30 / 21 / 0 / 51:   5%|▌         | 51/1000 [35:28<11:00:00, 41.73s/it][Succeeded / Failed / Skipped / Total] 30 / 21 / 0 / 51:   5%|▌         | 52/1000 [37:39<11:26:30, 43.45s/it][Succeeded / Failed / Skipped / Total] 31 / 21 / 0 / 52:   5%|▌         | 52/1000 [37:39<11:26:30, 43.45s/it][Succeeded / Failed / Skipped / Total] 31 / 21 / 0 / 52:   5%|▌         | 53/1000 [37:52<11:16:45, 42.88s/it][Succeeded / Failed / Skipped / Total] 31 / 22 / 0 / 53:   5%|▌         | 53/1000 [37:52<11:16:45, 42.88s/it][Succeeded / Failed / Skipped / Total] 31 / 22 / 0 / 53:   5%|▌         | 54/1000 [38:06<11:07:33, 42.34s/it][Succeeded / Failed / Skipped / Total] 32 / 22 / 0 / 54:   5%|▌         | 54/1000 [38:06<11:07:33, 42.34s/it][Succeeded / Failed / Skipped / Total] 32 / 22 / 0 / 54:   6%|▌         | 55/1000 [38:35<11:03:12, 42.11s/it]Try to apply scalar X map to an ObservableSource . --> Dumpling function --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > [[mapper]] ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return True ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( [[mapper]] . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return True ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return True ; } return False ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[dumpling]] ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > [[marlena]] ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return True ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( [[marlena]] . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return True ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return True ; } return False ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .


--------------------------------------------- Result 50 ---------------------------------------------
Creates an observable using a scalar X map function . --> Nested RxJava XMap --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T [[value]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[nest]] ( T [[valuable]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[valuable]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .


--------------------------------------------- Result 51 ---------------------------------------------
Accept a subscriber . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > subscriber ) { Object [ ] [[a]] = head ; final int c = capacity ; while ( [[a]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[a]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return True ; } } [[a]] = ( Object [ ] ) [[a]] [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > subscriber ) { Object [ ] [[others]] = head ; final int c = capacity ; while ( [[others]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[others]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return True ; } } [[others]] = ( Object [ ] ) [[others]] [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .


--------------------------------------------- Result 52 ---------------------------------------------
Accept observer . --> attempts to tolerate notifications --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean [[accept]] ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "[[True]]" == "[[True]]" ; } } a = ( Object [ ] ) a [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean [[tolerate]] ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "[["Loyal" == "Loyal"]]" == "[["Loyal" == "Loyal"]]" ; } } a = ( Object [ ] ) a [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .


--------------------------------------------- Result 53 ---------------------------------------------
Starts the container --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[commencing]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .


--------------------------------------------- Result 54 ---------------------------------------------
Start unbounded queue . --> Creates a barclay --> Socre: 1.0

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[barclay]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .


--------------------------------------------- Result 55 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 33 / 22 / 0 / 55:   6%|▌         | 55/1000 [38:35<11:03:12, 42.11s/it][Succeeded / Failed / Skipped / Total] 33 / 22 / 0 / 55:   6%|▌         | 56/1000 [39:02<10:58:05, 41.83s/it][Succeeded / Failed / Skipped / Total] 33 / 23 / 0 / 56:   6%|▌         | 56/1000 [39:02<10:58:05, 41.83s/it][Succeeded / Failed / Skipped / Total] 33 / 23 / 0 / 56:   6%|▌         | 57/1000 [40:14<11:05:41, 42.36s/it][Succeeded / Failed / Skipped / Total] 34 / 23 / 0 / 57:   6%|▌         | 57/1000 [40:14<11:05:41, 42.36s/it][Succeeded / Failed / Skipped / Total] 34 / 23 / 0 / 57:   6%|▌         | 58/1000 [40:52<11:03:53, 42.29s/it][Succeeded / Failed / Skipped / Total] 34 / 24 / 0 / 58:   6%|▌         | 58/1000 [40:52<11:03:53, 42.29s/it][Succeeded / Failed / Skipped / Total] 34 / 24 / 0 / 58:   6%|▌         | 59/1000 [41:19<10:59:10, 42.03s/it][Succeeded / Failed / Skipped / Total] 34 / 25 / 0 / 59:   6%|▌         | 59/1000 [41:19<10:59:10, 42.03s/it][Succeeded / Failed / Skipped / Total] 34 / 25 / 0 / 59:   6%|▌         | 60/1000 [41:40<10:52:59, 41.68s/it][Succeeded / Failed / Skipped / Total] 35 / 25 / 0 / 60:   6%|▌         | 60/1000 [41:40<10:52:59, 41.68s/it][Succeeded / Failed / Skipped / Total] 35 / 25 / 0 / 60:   6%|▌         | 61/1000 [42:19<10:51:29, 41.63s/it][Succeeded / Failed / Skipped / Total] 36 / 25 / 0 / 61:   6%|▌         | 61/1000 [42:19<10:51:29, 41.63s/it][Succeeded / Failed / Skipped / Total] 36 / 25 / 0 / 61:   6%|▌         | 62/1000 [42:51<10:48:26, 41.48s/it]Offer an object to the sink . --> Don t do anything --> Socre: 1.0

[[[[Adv]]]]: public boolean [[offer]] ( T [[t]] ) { if ( once . get ( ) ) { return False ; } ObjectHelper . requireNonNull ( [[t]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[t]] ) ) { drain ( ) ; return True ; } } return False ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean [[bids]] ( T [[could]] ) { if ( once . get ( ) ) { return False ; } ObjectHelper . requireNonNull ( [[could]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[could]] ) ) { drain ( ) ; return True ; } } return False ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .


--------------------------------------------- Result 56 ---------------------------------------------
Gets the disposed state . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Disposable get ( ) { Disposable [[d]] = resource . get ( ) ; if ( [[d]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[d]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable get ( ) { Disposable [[ding]] = resource . get ( ) ; if ( [[ding]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[ding]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .


--------------------------------------------- Result 57 ---------------------------------------------
Completes the operation with the given value . --> to be completed --> Socre: 1.0

[[[[Adv]]]]: public final void complete ( T [[value]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > [[a]] = downstream ; if ( state == FUSED_EMPTY ) { this . value = [[value]] ; lazySet ( FUSED_READY ) ; [[a]] . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; [[a]] . onNext ( [[value]] ) ; } if ( get ( ) != DISPOSED ) { [[a]] . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void complete ( T [[significance]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > [[è]] = downstream ; if ( state == FUSED_EMPTY ) { this . value = [[significance]] ; lazySet ( FUSED_READY ) ; [[è]] . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; [[è]] . onNext ( [[significance]] ) ; } if ( get ( ) != DISPOSED ) { [[è]] . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .


--------------------------------------------- Result 58 ---------------------------------------------
Sets an error . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[error]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[fault]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .


--------------------------------------------- Result 59 ---------------------------------------------
Completes the operation . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[complete]] ( ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[complemented]] ( ) { int [[goverment]] = get ( ) ; if ( ( [[goverment]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .


--------------------------------------------- Result 60 ---------------------------------------------
Concatenates a sequence of items from a sequence of values . --> Convenience method for deWAR --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[concatMapDelayError]] ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return [[concatMapDelayError]] ( mapper , 2 , True ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[dewar]] ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return [[dewar]] ( mapper , 2 , True ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .


--------------------------------------------- Result 61 ---------------------------------------------
Concatenates all elements in the stream using the given mapper . --> Skinner implementation --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[concatMapIterable]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[mapper]] ) { return [[concatMapIterable]] ( [[mapper]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[skinner]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[willin]] ) { return [[skinner]] ( [[willin]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .


--------------------------------------------- Result 62 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 36 / 26 / 0 / 62:   6%|▌         | 62/1000 [42:51<10:48:26, 41.48s/it][Succeeded / Failed / Skipped / Total] 36 / 26 / 0 / 62:   6%|▋         | 63/1000 [43:06<10:41:04, 41.05s/it][Succeeded / Failed / Skipped / Total] 37 / 26 / 0 / 63:   6%|▋         | 63/1000 [43:06<10:41:04, 41.05s/it][Succeeded / Failed / Skipped / Total] 37 / 26 / 0 / 63:   6%|▋         | 64/1000 [43:18<10:33:25, 40.60s/it][Succeeded / Failed / Skipped / Total] 38 / 26 / 0 / 64:   6%|▋         | 64/1000 [43:18<10:33:25, 40.60s/it][Succeeded / Failed / Skipped / Total] 38 / 26 / 0 / 64:   6%|▋         | 65/1000 [44:27<10:39:30, 41.04s/it][Succeeded / Failed / Skipped / Total] 39 / 26 / 0 / 65:   6%|▋         | 65/1000 [44:27<10:39:30, 41.04s/it][Succeeded / Failed / Skipped / Total] 39 / 26 / 0 / 65:   7%|▋         | 66/1000 [45:16<10:40:42, 41.16s/it][Succeeded / Failed / Skipped / Total] 40 / 26 / 0 / 66:   7%|▋         | 66/1000 [45:16<10:40:42, 41.16s/it][Succeeded / Failed / Skipped / Total] 40 / 26 / 0 / 66:   7%|▋         | 67/1000 [45:32<10:34:13, 40.79s/it][Succeeded / Failed / Skipped / Total] 41 / 26 / 0 / 67:   7%|▋         | 67/1000 [45:32<10:34:13, 40.79s/it][Succeeded / Failed / Skipped / Total] 41 / 26 / 0 / 67:   7%|▋         | 68/1000 [45:52<10:28:42, 40.47s/it]Returns a stream of elements sorted by the given comparator . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[alphabetically]] ( Comparator < ? super T > [[footstep]] ) { ObjectHelper . requireNonNull ( [[footstep]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[footstep]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .


--------------------------------------------- Result 63 ---------------------------------------------
Wait for the consumer to complete . --> Play a room --> Socre: 1.0

[[[[Adv]]]]: public PerfAsyncConsumer [[await]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[await]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer [[hope]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[hope]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .


--------------------------------------------- Result 64 ---------------------------------------------
Subscribes to the upstream . --> Request nth nth --> Socre: 1.0

[[[[Adv]]]]: protected final void request ( long n ) { Subscription [[s]] = this . upstream ; if ( [[s]] != null ) { [[s]] . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void request ( long n ) { Subscription [[nth]] = this . upstream ; if ( [[nth]] != null ) { [[nth]] . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .


--------------------------------------------- Result 65 ---------------------------------------------
Add a PublishDisposable to the queue . --> adds a PublishDisposalDisposable --> Socre: 1.0

[[[[Adv]]]]: boolean add ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] [[a]] = subscribers . get ( ) ; if ( [[a]] == TERMINATED ) { return "[[False]]" != "[[False]]" ; } int [[n]] = [[a]] . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ [[n]] + 1 ] ; System . arraycopy ( [[a]] , 0 , b , 0 , [[n]] ) ; b [ [[n]] ] = ps ; if ( subscribers . compareAndSet ( [[a]] , b ) ) { return True ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean add ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] [[per]] = subscribers . get ( ) ; if ( [[per]] == TERMINATED ) { return "[["Inaccurate" != "Inaccurate"]]" != "[["Inaccurate" != "Inaccurate"]]" ; } int [[umpteenth]] = [[per]] . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ [[umpteenth]] + 1 ] ; System . arraycopy ( [[per]] , 0 , b , 0 , [[umpteenth]] ) ; b [ [[umpteenth]] ] = ps ; if ( subscribers . compareAndSet ( [[per]] , b ) ) { return True ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .


--------------------------------------------- Result 66 ---------------------------------------------
Remove the given PublishDisposable from the queue . --> Remove a PublishDisposition --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void remove ( PublishDisposable < T > [[ps]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int [[n]] = a . length ; int [[j]] = - 1 ; for ( int i = 0 ; i < [[n]] ; i ++ ) { if ( a [ i ] == [[ps]] ) { [[j]] = i ; break ; } } if ( [[j]] < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( [[n]] == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ [[n]] - 1 ] ; System . arraycopy ( a , 0 , b , 0 , [[j]] ) ; System . arraycopy ( a , [[j]] + 1 , b , [[j]] , [[n]] - [[j]] - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void remove ( PublishDisposable < T > [[hp]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int [[norte]] = a . length ; int [[duncan]] = - 1 ; for ( int i = 0 ; i < [[norte]] ; i ++ ) { if ( a [ i ] == [[hp]] ) { [[duncan]] = i ; break ; } } if ( [[duncan]] < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( [[norte]] == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ [[norte]] - 1 ] ; System . arraycopy ( a , 0 , b , 0 , [[duncan]] ) ; System . arraycopy ( a , [[duncan]] + 1 , b , [[duncan]] , [[norte]] - [[duncan]] - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .


--------------------------------------------- Result 67 ---------------------------------------------
Observes a flowable flowable from a Flowable . --> Translates a Connectable Flowable to a Flowable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[observeOn]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[zena]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .


--------------------------------------------- Result 68 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 42 / 26 / 0 / 68:   7%|▋         | 68/1000 [45:52<10:28:42, 40.47s/it][Succeeded / Failed / Skipped / Total] 42 / 26 / 0 / 68:   7%|▋         | 69/1000 [46:41<10:29:56, 40.60s/it][Succeeded / Failed / Skipped / Total] 43 / 26 / 0 / 69:   7%|▋         | 69/1000 [46:41<10:29:56, 40.60s/it][Succeeded / Failed / Skipped / Total] 43 / 26 / 0 / 69:   7%|▋         | 70/1000 [47:07<10:26:02, 40.39s/it][Succeeded / Failed / Skipped / Total] 43 / 27 / 0 / 70:   7%|▋         | 70/1000 [47:07<10:26:02, 40.39s/it][Succeeded / Failed / Skipped / Total] 43 / 27 / 0 / 70:   7%|▋         | 71/1000 [47:47<10:25:25, 40.39s/it][Succeeded / Failed / Skipped / Total] 44 / 27 / 0 / 71:   7%|▋         | 71/1000 [47:47<10:25:25, 40.39s/it][Succeeded / Failed / Skipped / Total] 44 / 27 / 0 / 71:   7%|▋         | 72/1000 [48:15<10:21:56, 40.21s/it][Succeeded / Failed / Skipped / Total] 45 / 27 / 0 / 72:   7%|▋         | 72/1000 [48:15<10:21:56, 40.21s/it][Succeeded / Failed / Skipped / Total] 45 / 27 / 0 / 72:   7%|▋         | 73/1000 [48:42<10:18:30, 40.03s/it][Succeeded / Failed / Skipped / Total] 45 / 28 / 0 / 73:   7%|▋         | 73/1000 [48:42<10:18:30, 40.03s/it][Succeeded / Failed / Skipped / Total] 45 / 28 / 0 / 73:   7%|▋         | 74/1000 [49:10<10:15:19, 39.87s/it]Parses the annotations of a method . --> Parses Jersey requests --> Socre: 1.0

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method [[method]] , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = False ; boolean continuationBodyNullable = False ; Annotation [ ] annotations = [[method]] . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = [[method]] . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method [[practises]] , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = False ; boolean continuationBodyNullable = False ; Annotation [ ] annotations = [[practises]] . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = [[practises]] . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .


--------------------------------------------- Result 69 ---------------------------------------------
Sets the next delay in milliseconds . --> Sets theron sron --> Socre: 1.0

[[[[Adv]]]]: public void [[setDelay]] ( long amount , TimeUnit [[unit]] ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . [[delayMs]] = [[unit]] . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[theron]] ( long amount , TimeUnit [[isu]] ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . [[abrahams]] = [[isu]] . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .


--------------------------------------------- Result 70 ---------------------------------------------
Create an error response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[redemption]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .


--------------------------------------------- Result 71 ---------------------------------------------
Calculates the delay based on the variance percentage --> unky --> Socre: 1.0

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit unit ) { float [[delta]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[bunky]] ( TimeUnit unit ) { float [[devil]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .


--------------------------------------------- Result 72 ---------------------------------------------
Creates sample data . --> Create sample data --> Socre: 1.0

[[[[Adv]]]]: private void createSampleData ( String username , String [[password]] ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication [[auth]] = new UsernamePasswordAuthenticationToken ( username , [[password]] ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void createSampleData ( String username , String [[hacker]] ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication [[angelito]] = new UsernamePasswordAuthenticationToken ( username , [[hacker]] ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .


--------------------------------------------- Result 73 ---------------------------------------------
Returns HttpMethod from string . --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[ludmila]] ( String [[shape]] ) { try { return HttpMethod . valueOf ( [[shape]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .


--------------------------------------------- Result 74 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 46 / 28 / 0 / 74:   7%|▋         | 74/1000 [49:10<10:15:19, 39.87s/it][Succeeded / Failed / Skipped / Total] 46 / 28 / 0 / 74:   8%|▊         | 75/1000 [50:04<10:17:39, 40.06s/it][Succeeded / Failed / Skipped / Total] 46 / 29 / 0 / 75:   8%|▊         | 75/1000 [50:04<10:17:39, 40.06s/it][Succeeded / Failed / Skipped / Total] 46 / 29 / 0 / 75:   8%|▊         | 76/1000 [50:48<10:17:38, 40.11s/it][Succeeded / Failed / Skipped / Total] 47 / 29 / 0 / 76:   8%|▊         | 76/1000 [50:48<10:17:38, 40.11s/it][Succeeded / Failed / Skipped / Total] 47 / 29 / 0 / 76:   8%|▊         | 77/1000 [51:03<10:12:02, 39.79s/it][Succeeded / Failed / Skipped / Total] 48 / 29 / 0 / 77:   8%|▊         | 77/1000 [51:03<10:12:02, 39.79s/it][Succeeded / Failed / Skipped / Total] 48 / 29 / 0 / 77:   8%|▊         | 78/1000 [51:44<10:11:40, 39.81s/it][Succeeded / Failed / Skipped / Total] 49 / 29 / 0 / 78:   8%|▊         | 78/1000 [51:44<10:11:40, 39.81s/it][Succeeded / Failed / Skipped / Total] 49 / 29 / 0 / 78:   8%|▊         | 79/1000 [52:05<10:07:16, 39.56s/it][Succeeded / Failed / Skipped / Total] 50 / 29 / 0 / 79:   8%|▊         | 79/1000 [52:05<10:07:16, 39.56s/it][Succeeded / Failed / Skipped / Total] 50 / 29 / 0 / 79:   8%|▊         | 80/1000 [52:17<10:01:23, 39.22s/it][Succeeded / Failed / Skipped / Total] 51 / 29 / 0 / 80:   8%|▊         | 80/1000 [52:17<10:01:23, 39.22s/it][Succeeded / Failed / Skipped / Total] 51 / 29 / 0 / 80:   8%|▊         | 81/1000 [52:30<9:55:48, 38.90s/it] [Succeeded / Failed / Skipped / Total] 52 / 29 / 0 / 81:   8%|▊         | 81/1000 [52:30<9:55:48, 38.90s/it][Succeeded / Failed / Skipped / Total] 52 / 29 / 0 / 81:   8%|▊         | 82/1000 [52:43<9:50:19, 38.58s/it]Search for a user . --> Perform a search . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations [[searchForUser]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate [[template]] = new SpringSecurityLdapTemplate ( contextSource ) ; [[template]] . setSearchControls ( searchControls ) ; try { return [[template]] . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations [[muppet]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate [[drawings]] = new SpringSecurityLdapTemplate ( contextSource ) ; [[drawings]] . setSearchControls ( searchControls ) ; try { return [[drawings]] . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information


--------------------------------------------- Result 75 ---------------------------------------------
Encodes a raw password . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( CharSequence [[rawPassword]] ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , [[rawPassword]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String encode ( CharSequence [[coordinator]] ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , [[coordinator]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .


--------------------------------------------- Result 76 ---------------------------------------------
Computes the encoded password . --> Checks to see if one of theses shall be played . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[matches]] ( CharSequence [[rawPassword]] , String [[encodedPassword]] ) { String salt = extractSalt ( [[encodedPassword]] ) ; String rawPasswordEncoded = digest ( salt , [[rawPassword]] ) ; return PasswordEncoderUtils . equals ( [[encodedPassword]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean [[couple]] ( CharSequence [[ziya]] , String [[blackmailed]] ) { String salt = extractSalt ( [[blackmailed]] ) ; String rawPasswordEncoded = digest ( salt , [[ziya]] ) ; return PasswordEncoderUtils . equals ( [[blackmailed]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value


--------------------------------------------- Result 77 ---------------------------------------------
Performs version checks for minSpringVersion checks . --> Make sure that the minimumSpringVersion is null . --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[acquaintances]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version


--------------------------------------------- Result 78 ---------------------------------------------
Determines whether the checks are disabled . --> used in tests --> Socre: 1.0

[[[[Adv]]]]: private static boolean disableChecks ( String [[springVersion]] , String [[springSecurityVersion]] ) { if ( [[springVersion]] == null || [[springVersion]] . equals ( [[springSecurityVersion]] ) ) { return True ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean disableChecks ( String [[lobbying]] , String [[bleeders]] ) { if ( [[lobbying]] == null || [[lobbying]] . equals ( [[bleeders]] ) ) { return True ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .


--------------------------------------------- Result 79 ---------------------------------------------
Retrieves the Spring - core version . --> Lunkhead header --> Socre: 1.0

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[lunkhead]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .


--------------------------------------------- Result 80 ---------------------------------------------
Add an attribute exchange configurer . --> change configurer --> Socre: 1.0

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[identifierPattern]] ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( [[identifierPattern]] ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[iconic]] ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( [[iconic]] ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .


--------------------------------------------- Result 81 ---------------------------------------------
Build an OAuth2 client configurer . --> JokerConfigurer --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[oauth2Client]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[jokers]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .


--------------------------------------------- Result 82 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 53 / 29 / 0 / 82:   8%|▊         | 82/1000 [52:43<9:50:19, 38.58s/it][Succeeded / Failed / Skipped / Total] 53 / 29 / 0 / 82:   8%|▊         | 83/1000 [53:10<9:47:34, 38.45s/it][Succeeded / Failed / Skipped / Total] 54 / 29 / 0 / 83:   8%|▊         | 83/1000 [53:10<9:47:34, 38.45s/it][Succeeded / Failed / Skipped / Total] 54 / 29 / 0 / 83:   8%|▊         | 84/1000 [55:31<10:05:33, 39.67s/it][Succeeded / Failed / Skipped / Total] 54 / 30 / 0 / 84:   8%|▊         | 84/1000 [55:31<10:05:33, 39.67s/it][Succeeded / Failed / Skipped / Total] 54 / 30 / 0 / 84:   8%|▊         | 85/1000 [55:48<10:00:46, 39.40s/it][Succeeded / Failed / Skipped / Total] 55 / 30 / 0 / 85:   8%|▊         | 85/1000 [55:48<10:00:46, 39.40s/it][Succeeded / Failed / Skipped / Total] 55 / 30 / 0 / 85:   9%|▊         | 86/1000 [57:00<10:05:54, 39.78s/it][Succeeded / Failed / Skipped / Total] 56 / 30 / 0 / 86:   9%|▊         | 86/1000 [57:00<10:05:54, 39.78s/it][Succeeded / Failed / Skipped / Total] 56 / 30 / 0 / 86:   9%|▊         | 87/1000 [58:06<10:09:48, 40.07s/it][Succeeded / Failed / Skipped / Total] 57 / 30 / 0 / 87:   9%|▊         | 87/1000 [58:06<10:09:48, 40.07s/it][Succeeded / Failed / Skipped / Total] 57 / 30 / 0 / 87:   9%|▉         | 88/1000 [58:25<10:05:25, 39.83s/it]Get the OAuth2 resource server . --> Get configurationurer --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[oauth2ResourceServer]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[djibouti]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .


--------------------------------------------- Result 83 ---------------------------------------------
Gets a channel security configurer that requires channel . --> Brand new Spring SecurityMatcher registry --> Socre: 1.0

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext [[context]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[context]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[brandishing]] ( ) throws Exception { ApplicationContext [[ambient]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[ambient]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .


--------------------------------------------- Result 84 ---------------------------------------------
Compares the given dn with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean compare ( final String dn , final String [[attributeName]] , final Object value ) { final String comparisonFilter = "(" + [[attributeName]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > [[results]] = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( [[results]] . hasMore ( ) ) ; LdapUtils . closeEnumeration ( [[results]] ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean compare ( final String dn , final String [[affraid]] , final Object value ) { final String comparisonFilter = "(" + [[affraid]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > [[impacts]] = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( [[impacts]] . hasMore ( ) ) ; LdapUtils . closeEnumeration ( [[impacts]] ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .


--------------------------------------------- Result 85 ---------------------------------------------
Retrieves an entry . --> This will only be used for testing --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations [[retrieveEntry]] ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations [[armand]] ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .


--------------------------------------------- Result 86 ---------------------------------------------
Searches for multiple attribute values . --> Find achievementant --> Socre: 1.0

[[[[Adv]]]]: public Set < String > [[searchForSingleAttributeValues]] ( final String base , final String [[filter]] , final Object [ ] params , final String attributeName ) { String [ ] [[attributeNames]] = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , [[filter]] , params , [[attributeNames]] ) ; Set < String > [[result]] = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { [[result]] . addAll ( values ) ; } } return [[result]] ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > [[exorbitant]] ( final String base , final String [[cleaners]] , final Object [ ] params , final String attributeName ) { String [ ] [[aimed]] = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , [[cleaners]] , params , [[aimed]] ) ; Set < String > [[achievement]] = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { [[achievement]] . addAll ( values ) ; } } return [[achievement]] ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .


--------------------------------------------- Result 87 ---------------------------------------------
Searches for multiple attribute values . --> Zooming on Google Maps API --> Socre: 1.0

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String [[base]] , final String filter , final Object [ ] [[params]] , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[zooming]] ( final String [[background]] , final String filter , final Object [ ] [[yoshiko]] , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .


[Succeeded / Failed / Skipped / Total] 58 / 30 / 0 / 88:   9%|▉         | 88/1000 [58:25<10:05:25, 39.83s/it][Succeeded / Failed / Skipped / Total] 58 / 30 / 0 / 88:   9%|▉         | 89/1000 [58:54<10:02:55, 39.71s/it][Succeeded / Failed / Skipped / Total] 59 / 30 / 0 / 89:   9%|▉         | 89/1000 [58:54<10:02:55, 39.71s/it][Succeeded / Failed / Skipped / Total] 59 / 30 / 0 / 89:   9%|▉         | 90/1000 [59:26<10:01:00, 39.63s/it][Succeeded / Failed / Skipped / Total] 60 / 30 / 0 / 90:   9%|▉         | 90/1000 [59:26<10:01:00, 39.63s/it][Succeeded / Failed / Skipped / Total] 60 / 30 / 0 / 90:   9%|▉         | 91/1000 [1:00:14<10:01:43, 39.72s/it][Succeeded / Failed / Skipped / Total] 61 / 30 / 0 / 91:   9%|▉         | 91/1000 [1:00:14<10:01:43, 39.72s/it][Succeeded / Failed / Skipped / Total] 61 / 30 / 0 / 91:   9%|▉         | 92/1000 [1:00:30<9:57:15, 39.47s/it] --------------------------------------------- Result 88 ---------------------------------------------
Search for a single entry . --> returns a list of candorators --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations [[searchForSingleEntryInternal]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations [[candor]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .


--------------------------------------------- Result 89 ---------------------------------------------
Builds a search controls . --> Creates a new SearchContainers --> Socre: 1.0

[[[[Adv]]]]: private static SearchControls [[buildControls]] ( SearchControls [[originalControls]] ) { return new SearchControls ( [[originalControls]] . getSearchScope ( ) , [[originalControls]] . getCountLimit ( ) , [[originalControls]] . getTimeLimit ( ) , [[originalControls]] . getReturningAttributes ( ) , RETURN_OBJECT , [[originalControls]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls [[guests]] ( SearchControls [[bolted]] ) { return new SearchControls ( [[bolted]] . getSearchScope ( ) , [[bolted]] . getCountLimit ( ) , [[bolted]] . getTimeLimit ( ) , [[bolted]] . getReturningAttributes ( ) , RETURN_OBJECT , [[bolted]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .


--------------------------------------------- Result 90 ---------------------------------------------
Gets the primary keys . --> Jdbc --> Socre: 1.0

[[[[Adv]]]]: private void [[lookupPrimaryKeys]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String [[sql]] = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( [[sql]] , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void [[jinny]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String [[bandages]] = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( [[bandages]] , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .


--------------------------------------------- Result 91 ---------------------------------------------
Build the pre - authenticated authorities web authentication details . --> Converts a J2EE role to a Document --> Socre: 1.0

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest context ) { Collection < String > [[j2eeUserRoles]] = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[userGas]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[j2eeUserRoles]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[j2eeUserRoles]] + "] mapped to Granted Authorities: [" + [[userGas]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[userGas]] ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[dolorosa]] ( HttpServletRequest context ) { Collection < String > [[candidacy]] = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[minger]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[candidacy]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[candidacy]] + "] mapped to Granted Authorities: [" + [[minger]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[minger]] ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .


--------------------------------------------- Result 92 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 62 / 30 / 0 / 92:   9%|▉         | 92/1000 [1:00:30<9:57:15, 39.47s/it][Succeeded / Failed / Skipped / Total] 62 / 30 / 0 / 92:   9%|▉         | 93/1000 [1:00:31<9:50:13, 39.04s/it][Succeeded / Failed / Skipped / Total] 62 / 30 / 1 / 93:   9%|▉         | 93/1000 [1:00:31<9:50:13, 39.04s/it][Succeeded / Failed / Skipped / Total] 62 / 30 / 1 / 93:   9%|▉         | 94/1000 [1:00:50<9:46:23, 38.83s/it][Succeeded / Failed / Skipped / Total] 63 / 30 / 1 / 94:   9%|▉         | 94/1000 [1:00:50<9:46:23, 38.83s/it][Succeeded / Failed / Skipped / Total] 63 / 30 / 1 / 94:  10%|▉         | 95/1000 [1:01:07<9:42:15, 38.60s/it][Succeeded / Failed / Skipped / Total] 64 / 30 / 1 / 95:  10%|▉         | 95/1000 [1:01:07<9:42:15, 38.60s/it][Succeeded / Failed / Skipped / Total] 64 / 30 / 1 / 95:  10%|▉         | 96/1000 [1:01:50<9:42:18, 38.65s/it]Create the embedded server definition . --> Add additions to the configuration --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition [[createEmbeddedServer]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition [[additions]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .


--------------------------------------------- Result 93 ---------------------------------------------
Create a ServletApiFilter bean --> [[[SKIPPED]]]

[[[[Adv]]]]: private void createServletApiFilter ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required


--------------------------------------------- Result 94 ---------------------------------------------
Create a jaas api filter . --> set back firefox parameters --> Socre: 1.0

[[[[Adv]]]]: private void [[createJaasApiFilter]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void [[backfires]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required


--------------------------------------------- Result 95 ---------------------------------------------
Whitelisted type resolver . --> Whitelisted type resolver --> Socre: 1.0

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > createWhitelistedDefaultTyping ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[result]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[result]] = [[result]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[result]] = [[result]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[result]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > createWhitelistedDefaultTyping ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[fruition]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[fruition]] = [[fruition]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[fruition]] = [[fruition]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[fruition]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .


--------------------------------------------- Result 96 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 65 / 30 / 1 / 96:  10%|▉         | 96/1000 [1:01:50<9:42:18, 38.65s/it][Succeeded / Failed / Skipped / Total] 65 / 30 / 1 / 96:  10%|▉         | 97/1000 [1:02:36<9:42:53, 38.73s/it][Succeeded / Failed / Skipped / Total] 66 / 30 / 1 / 97:  10%|▉         | 97/1000 [1:02:36<9:42:53, 38.73s/it][Succeeded / Failed / Skipped / Total] 66 / 30 / 1 / 97:  10%|▉         | 98/1000 [1:03:06<9:40:51, 38.64s/it][Succeeded / Failed / Skipped / Total] 67 / 30 / 1 / 98:  10%|▉         | 98/1000 [1:03:06<9:40:51, 38.64s/it][Succeeded / Failed / Skipped / Total] 67 / 30 / 1 / 98:  10%|▉         | 99/1000 [1:03:31<9:38:10, 38.50s/it][Succeeded / Failed / Skipped / Total] 67 / 31 / 1 / 99:  10%|▉         | 99/1000 [1:03:31<9:38:10, 38.50s/it][Succeeded / Failed / Skipped / Total] 67 / 31 / 1 / 99:  10%|█         | 100/1000 [1:03:46<9:33:58, 38.26s/it][Succeeded / Failed / Skipped / Total] 68 / 31 / 1 / 100:  10%|█         | 100/1000 [1:03:46<9:33:58, 38.26s/it][Succeeded / Failed / Skipped / Total] 68 / 31 / 1 / 100:  10%|█         | 101/1000 [1:04:42<9:36:02, 38.45s/it][Succeeded / Failed / Skipped / Total] 68 / 32 / 1 / 101:  10%|█         | 101/1000 [1:04:42<9:36:02, 38.45s/it][Succeeded / Failed / Skipped / Total] 68 / 32 / 1 / 101:  10%|█         | 102/1000 [1:05:59<9:41:00, 38.82s/it]Adds the spring security filter to the web application context . --> Create a new Spring SecurityFilterChain --> Socre: 1.0

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String [[filterName]] = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( [[filterName]] ) ; String [[contextAttribute]] = getWebApplicationContextAttribute ( ) ; if ( [[contextAttribute]] != null ) { springSecurityFilterChain . setContextAttribute ( [[contextAttribute]] ) ; } registerFilter ( servletContext , True , [[filterName]] , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String [[goofy]] = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( [[goofy]] ) ; String [[anthem]] = getWebApplicationContextAttribute ( ) ; if ( [[anthem]] != null ) { springSecurityFilterChain . setContextAttribute ( [[anthem]] ) ; } registerFilter ( servletContext , True , [[goofy]] , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain


--------------------------------------------- Result 97 ---------------------------------------------
Retrieves a remember - me token for a given series . --> Tries to tickled by busch --> Socre: 1.0

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String [[seriesId]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int [[rowNum]] ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , [[seriesId]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[seriesId]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[seriesId]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[seriesId]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[tickled]] ( String [[busch]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int [[busboys]] ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , [[busch]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[busch]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[busch]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[busch]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .


--------------------------------------------- Result 98 ---------------------------------------------
Returns a list of granted authorities . --> Return kama for singularity --> Socre: 1.0

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > attributes ) { List < GrantedAuthority > result = new ArrayList <> ( attributes . size ( ) ) ; for ( String [[attribute]] : attributes ) { result . add ( getGrantedAuthority ( [[attribute]] ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[kama]] ( Collection < String > attributes ) { List < GrantedAuthority > result = new ArrayList <> ( attributes . size ( ) ) ; for ( String [[singularity]] : attributes ) { result . add ( getGrantedAuthority ( [[singularity]] ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .


--------------------------------------------- Result 99 ---------------------------------------------
Creates a new cipher . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String [[algorithm]] ) { try { return Cipher . getInstance ( [[algorithm]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[defector]] ( String [[coding]] ) { try { return Cipher . getInstance ( [[coding]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .


--------------------------------------------- Result 100 ---------------------------------------------
Injects any required properties --> Called by Servlet --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[marino]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .


--------------------------------------------- Result 101 ---------------------------------------------
Check security context . --> [[[FAILED]]]

[[[[Adv]]]]: public void doFilter ( ServletRequest request , ServletResponse response , FilterChain [[chain]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) response ) ; } [[chain]] . doFilter ( request , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void doFilter ( ServletRequest request , ServletResponse response , FilterChain [[chords]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) response ) ; } [[chords]] . doFilter ( request , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .


--------------------------------------------- Result 102 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 69 / 32 / 1 / 102:  10%|█         | 102/1000 [1:05:59<9:41:00, 38.82s/it][Succeeded / Failed / Skipped / Total] 69 / 32 / 1 / 102:  10%|█         | 103/1000 [1:07:01<9:43:39, 39.04s/it][Succeeded / Failed / Skipped / Total] 70 / 32 / 1 / 103:  10%|█         | 103/1000 [1:07:01<9:43:39, 39.04s/it][Succeeded / Failed / Skipped / Total] 70 / 32 / 1 / 103:  10%|█         | 104/1000 [1:08:51<9:53:11, 39.72s/it][Succeeded / Failed / Skipped / Total] 71 / 32 / 1 / 104:  10%|█         | 104/1000 [1:08:51<9:53:11, 39.72s/it][Succeeded / Failed / Skipped / Total] 71 / 32 / 1 / 104:  10%|█         | 105/1000 [1:09:50<9:55:16, 39.91s/it][Succeeded / Failed / Skipped / Total] 71 / 33 / 1 / 105:  10%|█         | 105/1000 [1:09:50<9:55:16, 39.91s/it][Succeeded / Failed / Skipped / Total] 71 / 33 / 1 / 105:  11%|█         | 106/1000 [1:10:06<9:51:20, 39.69s/it][Succeeded / Failed / Skipped / Total] 72 / 33 / 1 / 106:  11%|█         | 106/1000 [1:10:06<9:51:20, 39.69s/it][Succeeded / Failed / Skipped / Total] 72 / 33 / 1 / 106:  11%|█         | 107/1000 [1:10:35<9:49:09, 39.58s/it]Check if the pre - authenticated principal has been changed . --> else return true --> Socre: 1.0

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest request , Authentication [[currentAuthentication]] ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && [[currentAuthentication]] . getName ( ) . equals ( principal ) ) { return False ; } if ( principal != null && principal . equals ( [[currentAuthentication]] . getPrincipal ( ) ) ) { return False ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return True ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[witching]] ( HttpServletRequest request , Authentication [[oxycontin]] ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && [[oxycontin]] . getName ( ) . equals ( principal ) ) { return False ; } if ( principal != null && principal . equals ( [[oxycontin]] . getPrincipal ( ) ) ) { return False ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return True ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries


--------------------------------------------- Result 103 ---------------------------------------------
Authenticate . --> Authenticate request --> Socre: 1.0

[[[[Adv]]]]: private void [[doAuthenticate]] ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void [[astro]] ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .


--------------------------------------------- Result 104 ---------------------------------------------
Checks whether the content length is fully written or not . --> Perform a retrovirus --> Socre: 1.0

[[[[Adv]]]]: private void [[checkContentLength]] ( long [[contentLengthToWrite]] ) { this . contentWritten += [[contentLengthToWrite]] ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void [[retrovirus]] ( long [[conclude]] ) { this . contentWritten += [[conclude]] ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .


--------------------------------------------- Result 105 ---------------------------------------------
Creates a map of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[mapped]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority authority : authorities ) { [[mapped]] . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[mapped]] . add ( defaultAuthority ) ; } return [[mapped]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[designated]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority authority : authorities ) { [[designated]] . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[designated]] . add ( defaultAuthority ) ; } return [[designated]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .


--------------------------------------------- Result 106 ---------------------------------------------
Sets the URL to login processing URL . --> Define cartelels --> Socre: 1.0

[[[[Adv]]]]: public T [[loginProcessingUrl]] ( String loginProcessingUrl ) { this . loginProcessingUrl = [[loginProcessingUrl]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[loginProcessingUrl]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T [[cartwheels]] ( String loginProcessingUrl ) { this . loginProcessingUrl = [[cartwheels]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[cartwheels]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .


--------------------------------------------- Result 107 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 73 / 33 / 1 / 107:  11%|█         | 107/1000 [1:10:35<9:49:09, 39.58s/it][Succeeded / Failed / Skipped / Total] 73 / 33 / 1 / 107:  11%|█         | 108/1000 [1:10:47<9:44:45, 39.33s/it][Succeeded / Failed / Skipped / Total] 74 / 33 / 1 / 108:  11%|█         | 108/1000 [1:10:47<9:44:45, 39.33s/it][Succeeded / Failed / Skipped / Total] 74 / 33 / 1 / 108:  11%|█         | 109/1000 [1:11:17<9:42:41, 39.24s/it][Succeeded / Failed / Skipped / Total] 75 / 33 / 1 / 109:  11%|█         | 109/1000 [1:11:17<9:42:41, 39.24s/it][Succeeded / Failed / Skipped / Total] 75 / 33 / 1 / 109:  11%|█         | 110/1000 [1:11:56<9:42:05, 39.24s/it][Succeeded / Failed / Skipped / Total] 76 / 33 / 1 / 110:  11%|█         | 110/1000 [1:11:56<9:42:05, 39.24s/it][Succeeded / Failed / Skipped / Total] 76 / 33 / 1 / 110:  11%|█         | 111/1000 [1:12:11<9:38:12, 39.02s/it][Succeeded / Failed / Skipped / Total] 77 / 33 / 1 / 111:  11%|█         | 111/1000 [1:12:11<9:38:12, 39.02s/it][Succeeded / Failed / Skipped / Total] 77 / 33 / 1 / 111:  11%|█         | 112/1000 [1:12:26<9:34:19, 38.81s/it][Succeeded / Failed / Skipped / Total] 78 / 33 / 1 / 112:  11%|█         | 112/1000 [1:12:26<9:34:19, 38.81s/it][Succeeded / Failed / Skipped / Total] 78 / 33 / 1 / 112:  11%|█▏        | 113/1000 [1:12:42<9:30:40, 38.60s/it]Update the authentication defaults . --> must be called --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[logoutConfigurer]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[logoutConfigurer]] != null && ! [[logoutConfigurer]] . isCustomLogoutSuccess ( ) ) { [[logoutConfigurer]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[naiveté]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[lutely]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[lutely]] != null && ! [[lutely]] . isCustomLogoutSuccess ( ) ) { [[lutely]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .


--------------------------------------------- Result 108 ---------------------------------------------
Updates the access defaults . --> Authenticate request --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[andaman]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .


--------------------------------------------- Result 109 ---------------------------------------------
Map the password to a String . --> Breslin --> Socre: 1.0

[[[[Adv]]]]: protected String [[mapPassword]] ( Object [[passwordValue]] ) { if ( ! ( [[passwordValue]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String [[breslin]] ( Object [[betweens]] ) { if ( ! ( [[betweens]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .


--------------------------------------------- Result 110 ---------------------------------------------
Extract cookie from request --> Get bullitt from an invite --> Socre: 1.0

[[[[Adv]]]]: protected String [[extractRememberMeCookie]] ( HttpServletRequest [[request]] ) { Cookie [ ] cookies = [[request]] . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String [[bullitt]] ( HttpServletRequest [[invite]] ) { Cookie [ ] cookies = [[invite]] . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .


--------------------------------------------- Result 111 ---------------------------------------------
Encode cookie . --> Encode the cookie tokens --> Socre: 1.0

[[[[Adv]]]]: protected String [[encodeCookie]] ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String [[heyward]] ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .


--------------------------------------------- Result 112 ---------------------------------------------
Sets the cookie . --> Generates a Wog --> Socre: 1.0

[[[[Adv]]]]: protected void [[setCookie]] ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( True ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void [[wog]] ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( True ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .


--------------------------------------------- Result 113 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 79 / 33 / 1 / 113:  11%|█▏        | 113/1000 [1:12:42<9:30:40, 38.60s/it][Succeeded / Failed / Skipped / Total] 79 / 33 / 1 / 113:  11%|█▏        | 114/1000 [1:13:23<9:30:23, 38.63s/it][Succeeded / Failed / Skipped / Total] 80 / 33 / 1 / 114:  11%|█▏        | 114/1000 [1:13:23<9:30:23, 38.63s/it][Succeeded / Failed / Skipped / Total] 80 / 33 / 1 / 114:  12%|█▏        | 115/1000 [1:13:51<9:28:20, 38.53s/it][Succeeded / Failed / Skipped / Total] 81 / 33 / 1 / 115:  12%|█▏        | 115/1000 [1:13:51<9:28:20, 38.53s/it][Succeeded / Failed / Skipped / Total] 81 / 33 / 1 / 115:  12%|█▏        | 116/1000 [1:14:46<9:29:50, 38.68s/it][Succeeded / Failed / Skipped / Total] 81 / 34 / 1 / 116:  12%|█▏        | 116/1000 [1:14:46<9:29:50, 38.68s/it][Succeeded / Failed / Skipped / Total] 81 / 34 / 1 / 116:  12%|█▏        | 117/1000 [1:14:59<9:25:57, 38.46s/it][Succeeded / Failed / Skipped / Total] 82 / 34 / 1 / 117:  12%|█▏        | 117/1000 [1:14:59<9:25:57, 38.46s/it][Succeeded / Failed / Skipped / Total] 82 / 34 / 1 / 117:  12%|█▏        | 118/1000 [1:15:24<9:23:35, 38.34s/it][Succeeded / Failed / Skipped / Total] 83 / 34 / 1 / 118:  12%|█▏        | 118/1000 [1:15:24<9:23:35, 38.34s/it][Succeeded / Failed / Skipped / Total] 83 / 34 / 1 / 118:  12%|█▏        | 119/1000 [1:17:06<9:30:48, 38.87s/it]Resolves the security context for the given request parameter . --> Resolves a security context --> Socre: 1.0

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter [[parameter]] , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( [[parameter]] . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( [[parameter]] , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter [[calibers]] , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( [[calibers]] . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( [[calibers]] , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .


--------------------------------------------- Result 114 ---------------------------------------------
Gets the query string from the given request . --> Dereg in request --> Socre: 1.0

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest [[request]] , final Pattern artifactPattern ) { final String [[query]] = [[request]] . getQueryString ( ) ; if ( [[query]] == null ) { return null ; } final String result = artifactPattern . matcher ( [[query]] ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[dioxin]] ( final HttpServletRequest [[ask]] , final Pattern artifactPattern ) { final String [[avis]] = [[ask]] . getQueryString ( ) ; if ( [[avis]] == null ) { return null ; } final String result = artifactPattern . matcher ( [[avis]] ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .


--------------------------------------------- Result 115 ---------------------------------------------
Gets the service port . --> get porto porto --> Socre: 1.0

[[[[Adv]]]]: private static int [[getServicePort]] ( URL casServiceUrl ) { int [[port]] = casServiceUrl . getPort ( ) ; if ( [[port]] == - 1 ) { [[port]] = casServiceUrl . getDefaultPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int [[dragoons]] ( URL casServiceUrl ) { int [[porto]] = casServiceUrl . getPort ( ) ; if ( [[porto]] == - 1 ) { [[porto]] = casServiceUrl . getDefaultPort ( ) ; } return [[porto]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .


--------------------------------------------- Result 116 ---------------------------------------------
Returns the LDAP principal . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getPrincipal]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails [[details]] = ( LdapUserDetails ) principal ; return [[details]] . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String [[sparkle]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails [[informational]] = ( LdapUserDetails ) principal ; return [[informational]] . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .


--------------------------------------------- Result 117 ---------------------------------------------
Logout request . --> Logs out an authentication --> Socre: 1.0

[[[[Adv]]]]: public void logout ( HttpServletRequest [[request]] , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( [[request]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = [[request]] . getSession ( False ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void logout ( HttpServletRequest [[enquired]] , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( [[enquired]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = [[enquired]] . getSession ( False ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .


--------------------------------------------- Result 118 ---------------------------------------------
Authenticate an authentication token . --> Authenticated object . --> Socre: 1.0

[[[[Adv]]]]: public Authentication authenticate ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken [[request]] = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > [[authorities]] ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication authenticate ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken [[appealed]] = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > [[powers]] ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential


--------------------------------------------- Result 119 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 83 / 35 / 1 / 119:  12%|█▏        | 119/1000 [1:17:06<9:30:48, 38.87s/it][Succeeded / Failed / Skipped / Total] 83 / 35 / 1 / 119:  12%|█▏        | 120/1000 [1:17:45<9:30:15, 38.88s/it][Succeeded / Failed / Skipped / Total] 84 / 35 / 1 / 120:  12%|█▏        | 120/1000 [1:17:45<9:30:15, 38.88s/it][Succeeded / Failed / Skipped / Total] 84 / 35 / 1 / 120:  12%|█▏        | 121/1000 [1:17:57<9:26:19, 38.66s/it][Succeeded / Failed / Skipped / Total] 84 / 36 / 1 / 121:  12%|█▏        | 121/1000 [1:17:57<9:26:19, 38.66s/it][Succeeded / Failed / Skipped / Total] 84 / 36 / 1 / 121:  12%|█▏        | 122/1000 [1:18:11<9:22:45, 38.46s/it][Succeeded / Failed / Skipped / Total] 85 / 36 / 1 / 122:  12%|█▏        | 122/1000 [1:18:11<9:22:45, 38.46s/it][Succeeded / Failed / Skipped / Total] 85 / 36 / 1 / 122:  12%|█▏        | 123/1000 [1:18:35<9:20:22, 38.34s/it][Succeeded / Failed / Skipped / Total] 86 / 36 / 1 / 123:  12%|█▏        | 123/1000 [1:18:35<9:20:22, 38.34s/it][Succeeded / Failed / Skipped / Total] 86 / 36 / 1 / 123:  12%|█▏        | 124/1000 [1:19:05<9:18:44, 38.27s/it][Succeeded / Failed / Skipped / Total] 86 / 37 / 1 / 124:  12%|█▏        | 124/1000 [1:19:05<9:18:44, 38.27s/it][Succeeded / Failed / Skipped / Total] 86 / 37 / 1 / 124:  12%|█▎        | 125/1000 [1:19:44<9:18:13, 38.28s/it]Build the provider URL from the given URLs . --> [[[FAILED]]]

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String [[trimmedBaseDn]] = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( [[trimmedBaseDn]] ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String [[bonsoir]] = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( [[bonsoir]] ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .


--------------------------------------------- Result 120 ---------------------------------------------
Sets context environment properties . --> Configure the forest with the forest --> Socre: 1.0

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . [[contextEnvironmentProperties]] = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[rainforest]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . [[asians]] = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .


--------------------------------------------- Result 121 ---------------------------------------------
Returns the redirect URL . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[damone]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .


--------------------------------------------- Result 122 ---------------------------------------------
Render the ui suffix . --> we don t know this? --> Socre: 1.0

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[chutzpah]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .


--------------------------------------------- Result 123 ---------------------------------------------
Initialize the user details service . --> initialize UserDetailsService --> Socre: 1.0

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder [[userBuilder]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[userBuilder]] . build ( ) ) ; } for ( UserDetails [[userDetails]] : this . users ) { getUserDetailsService ( ) . createUser ( [[userDetails]] ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder [[passé]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[passé]] . build ( ) ) ; } for ( UserDetails [[beens]] : this . users ) { getUserDetailsService ( ) . createUser ( [[beens]] ) ; } }
[[[[Nl]]]]: Populates the users that have been added .


--------------------------------------------- Result 124 ---------------------------------------------
Gets the UserDetailsService . --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService [[getUserDetailsService]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService [[constraint]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .


--------------------------------------------- Result 125 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 87 / 37 / 1 / 125:  12%|█▎        | 125/1000 [1:19:44<9:18:13, 38.28s/it][Succeeded / Failed / Skipped / Total] 87 / 37 / 1 / 125:  13%|█▎        | 126/1000 [1:20:01<9:15:08, 38.11s/it][Succeeded / Failed / Skipped / Total] 88 / 37 / 1 / 126:  13%|█▎        | 126/1000 [1:20:01<9:15:08, 38.11s/it][Succeeded / Failed / Skipped / Total] 88 / 37 / 1 / 126:  13%|█▎        | 127/1000 [1:20:29<9:13:18, 38.03s/it][Succeeded / Failed / Skipped / Total] 89 / 37 / 1 / 127:  13%|█▎        | 127/1000 [1:20:29<9:13:18, 38.03s/it][Succeeded / Failed / Skipped / Total] 89 / 37 / 1 / 127:  13%|█▎        | 128/1000 [1:21:32<9:15:32, 38.23s/it][Succeeded / Failed / Skipped / Total] 89 / 38 / 1 / 128:  13%|█▎        | 128/1000 [1:21:32<9:15:32, 38.23s/it][Succeeded / Failed / Skipped / Total] 89 / 38 / 1 / 128:  13%|█▎        | 129/1000 [1:21:59<9:13:37, 38.14s/it][Succeeded / Failed / Skipped / Total] 90 / 38 / 1 / 129:  13%|█▎        | 129/1000 [1:21:59<9:13:37, 38.14s/it][Succeeded / Failed / Skipped / Total] 90 / 38 / 1 / 129:  13%|█▎        | 130/1000 [1:22:29<9:12:04, 38.07s/it][Succeeded / Failed / Skipped / Total] 91 / 38 / 1 / 130:  13%|█▎        | 130/1000 [1:22:29<9:12:04, 38.07s/it][Succeeded / Failed / Skipped / Total] 91 / 38 / 1 / 130:  13%|█▎        | 131/1000 [1:22:47<9:09:12, 37.92s/it]Adds the key value pair . --> Add key value pairs --> Socre: 1.0

[[[[Adv]]]]: private void addPkceParameters ( Map < String , Object > attributes , Map < String , Object > [[additionalParameters]] ) { String [[codeVerifier]] = this . [[codeVerifierGenerator]] . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , [[codeVerifier]] ) ; try { String codeChallenge = createCodeChallenge ( [[codeVerifier]] ) ; [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE , [[codeVerifier]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void addPkceParameters ( Map < String , Object > attributes , Map < String , Object > [[alliance]] ) { String [[decepticon]] = this . [[landlubbers]] . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , [[decepticon]] ) ; try { String codeChallenge = createCodeChallenge ( [[decepticon]] ) ; [[alliance]] . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; [[alliance]] . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { [[alliance]] . put ( PkceParameterNames . CODE_CHALLENGE , [[decepticon]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests


--------------------------------------------- Result 126 ---------------------------------------------
Returns true if the request needs authentication . --> Is oporto? --> Socre: 1.0

[[[[Adv]]]]: protected boolean [[requiresAuthentication]] ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( request , response ) ; final boolean result = serviceTicketRequest || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( serviceTicketRequest , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean [[oporto]] ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( request , response ) ; final boolean result = serviceTicketRequest || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( serviceTicketRequest , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .


--------------------------------------------- Result 127 ---------------------------------------------
Check for a ticket . --> Does authentication? --> Socre: 1.0

[[[[Adv]]]]: private boolean [[serviceTicketRequest]] ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( [[request]] , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean [[antsy]] ( final HttpServletRequest [[please]] , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( [[please]] , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .


--------------------------------------------- Result 128 ---------------------------------------------
Proxy service ticket request --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyTicketRequest]] ( final boolean [[serviceTicketRequest]] , final HttpServletRequest request ) { if ( [[serviceTicketRequest]] ) { return False ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean [[denouncing]] ( final boolean [[chowk]] , final HttpServletRequest request ) { if ( [[chowk]] ) { return False ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .


--------------------------------------------- Result 129 ---------------------------------------------
Checks if the current thread is authenticated . --> Checks for evidences --> Socre: 1.0

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[authentication]] != null && [[authentication]] . isAuthenticated ( ) && ! ( [[authentication]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[evidences]] ( ) { Authentication [[testimonial]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[testimonial]] != null && [[testimonial]] . isAuthenticated ( ) && ! ( [[testimonial]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .


--------------------------------------------- Result 130 ---------------------------------------------
Returns true if the proxy request is configured . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: private boolean proxyReceptorRequest ( final HttpServletRequest [[request]] ) { final boolean [[result]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[request]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean proxyReceptorRequest ( final HttpServletRequest [[solicited]] ) { final boolean [[conclude]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[solicited]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[conclude]] ) ; } return [[conclude]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .


--------------------------------------------- Result 131 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 92 / 38 / 1 / 131:  13%|█▎        | 131/1000 [1:22:47<9:09:12, 37.92s/it][Succeeded / Failed / Skipped / Total] 92 / 38 / 1 / 131:  13%|█▎        | 132/1000 [1:23:17<9:07:39, 37.86s/it][Succeeded / Failed / Skipped / Total] 93 / 38 / 1 / 132:  13%|█▎        | 132/1000 [1:23:17<9:07:39, 37.86s/it][Succeeded / Failed / Skipped / Total] 93 / 38 / 1 / 132:  13%|█▎        | 133/1000 [1:23:31<9:04:29, 37.68s/it][Succeeded / Failed / Skipped / Total] 94 / 38 / 1 / 133:  13%|█▎        | 133/1000 [1:23:31<9:04:29, 37.68s/it][Succeeded / Failed / Skipped / Total] 94 / 38 / 1 / 133:  13%|█▎        | 134/1000 [1:24:03<9:03:13, 37.64s/it][Succeeded / Failed / Skipped / Total] 95 / 38 / 1 / 134:  13%|█▎        | 134/1000 [1:24:03<9:03:13, 37.64s/it][Succeeded / Failed / Skipped / Total] 95 / 38 / 1 / 134:  14%|█▎        | 135/1000 [1:24:48<9:03:23, 37.69s/it][Succeeded / Failed / Skipped / Total] 95 / 39 / 1 / 135:  14%|█▎        | 135/1000 [1:24:48<9:03:23, 37.69s/it][Succeeded / Failed / Skipped / Total] 95 / 39 / 1 / 135:  14%|█▎        | 136/1000 [1:25:29<9:03:10, 37.72s/it][Succeeded / Failed / Skipped / Total] 96 / 39 / 1 / 136:  14%|█▎        | 136/1000 [1:25:29<9:03:10, 37.72s/it][Succeeded / Failed / Skipped / Total] 96 / 39 / 1 / 136:  14%|█▎        | 137/1000 [1:25:45<9:00:15, 37.56s/it][Succeeded / Failed / Skipped / Total] 97 / 39 / 1 / 137:  14%|█▎        | 137/1000 [1:25:45<9:00:15, 37.56s/it][Succeeded / Failed / Skipped / Total] 97 / 39 / 1 / 137:  14%|█▍        | 138/1000 [1:26:11<8:58:25, 37.48s/it]Creates a SecurityExpressionRoot . --> Build methodSecurityExpression operations --> Socre: 1.0

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[createSecurityExpressionRoot]] ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( authentication ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[unifying]] ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( authentication ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .


--------------------------------------------- Result 132 ---------------------------------------------
Gets the jWK set . --> Retrieve bovs --> Socre: 1.0

[[[[Adv]]]]: private Mono < JWKSet > [[getJWKSet]] ( ) { return this . [[webClient]] . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > [[bovs]] ( ) { return this . [[amjad]] . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .


--------------------------------------------- Result 133 ---------------------------------------------
URL - encode the given value . --> Acquires the given value . --> Socre: 1.0

[[[[Adv]]]]: private String [[utf8UrlEncode]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String [[aqueduct]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8


--------------------------------------------- Result 134 ---------------------------------------------
Creates a collection of granted authorities to the user . --> This method is used to map adeliner to adelina group --> Socre: 1.0

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > [[webSphereGroups]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[webSphereGroups]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[webSphereGroups]] + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[adelina]] ( ) { List < String > [[balsa]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[balsa]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[balsa]] + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .


--------------------------------------------- Result 135 ---------------------------------------------
Load user by assertion . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[loadUserByAssertion]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken [[token]] = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( [[token]] ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails [[sincerest]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken [[badges]] = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( [[badges]] ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .


--------------------------------------------- Result 136 ---------------------------------------------
Get the pre - authenticated principal . --> getDahn - Authenticated principal --> Socre: 1.0

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object [[principal]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[dahn]] ( HttpServletRequest httpRequest ) { Object [[salient]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[salient]] ) ; } return [[salient]] ; }
[[[[Nl]]]]: Return the WebSphere user name .


--------------------------------------------- Result 137 ---------------------------------------------
Concatenate two arrays . --> Bump a bunch of bytes --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[concatenate]] ( byte [ ] ... arrays ) { int length = 0 ; for ( byte [ ] array : arrays ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : arrays ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] [[jabberwocky]] ( byte [ ] ... arrays ) { int length = 0 ; for ( byte [ ] array : arrays ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : arrays ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .


--------------------------------------------- Result 138 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 98 / 39 / 1 / 138:  14%|█▍        | 138/1000 [1:26:11<8:58:25, 37.48s/it][Succeeded / Failed / Skipped / Total] 98 / 39 / 1 / 138:  14%|█▍        | 139/1000 [1:27:25<9:01:32, 37.74s/it][Succeeded / Failed / Skipped / Total] 98 / 40 / 1 / 139:  14%|█▍        | 139/1000 [1:27:25<9:01:32, 37.74s/it][Succeeded / Failed / Skipped / Total] 98 / 40 / 1 / 139:  14%|█▍        | 140/1000 [1:27:55<9:00:08, 37.68s/it][Succeeded / Failed / Skipped / Total] 99 / 40 / 1 / 140:  14%|█▍        | 140/1000 [1:27:55<9:00:08, 37.68s/it][Succeeded / Failed / Skipped / Total] 99 / 40 / 1 / 140:  14%|█▍        | 141/1000 [1:28:09<8:57:07, 37.52s/it][Succeeded / Failed / Skipped / Total] 100 / 40 / 1 / 141:  14%|█▍        | 141/1000 [1:28:09<8:57:07, 37.52s/it][Succeeded / Failed / Skipped / Total] 100 / 40 / 1 / 141:  14%|█▍        | 142/1000 [1:28:49<8:56:44, 37.53s/it][Succeeded / Failed / Skipped / Total] 101 / 40 / 1 / 142:  14%|█▍        | 142/1000 [1:28:49<8:56:44, 37.53s/it][Succeeded / Failed / Skipped / Total] 101 / 40 / 1 / 142:  14%|█▍        | 143/1000 [1:29:32<8:56:36, 37.57s/it][Succeeded / Failed / Skipped / Total] 101 / 41 / 1 / 143:  14%|█▍        | 143/1000 [1:29:32<8:56:36, 37.57s/it][Succeeded / Failed / Skipped / Total] 101 / 41 / 1 / 143:  14%|█▍        | 144/1000 [1:29:58<8:54:52, 37.49s/it][Succeeded / Failed / Skipped / Total] 101 / 42 / 1 / 144:  14%|█▍        | 144/1000 [1:29:58<8:54:52, 37.49s/it][Succeeded / Failed / Skipped / Total] 101 / 42 / 1 / 144:  14%|█▍        | 145/1000 [1:30:24<8:53:08, 37.41s/it]Returns a sub - array . --> get hourly data --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[subArray]] ( byte [ ] array , int beginIndex , int endIndex ) { int [[length]] = endIndex - beginIndex ; byte [ ] subarray = new byte [ [[length]] ] ; System . arraycopy ( array , beginIndex , subarray , 0 , [[length]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] [[daeng]] ( byte [ ] array , int beginIndex , int endIndex ) { int [[hourly]] = endIndex - beginIndex ; byte [ ] subarray = new byte [ [[hourly]] ] ; System . arraycopy ( array , beginIndex , subarray , 0 , [[hourly]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .


--------------------------------------------- Result 139 ---------------------------------------------
Get a list of granted authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > [[attributes]] ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : [[attributes]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[street]] ( Collection < String > [[assigning]] ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : [[assigning]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .


--------------------------------------------- Result 140 ---------------------------------------------
Pre - process the map . --> For backward compatibility --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[preProcessMap]] ( Map < ? , ? > [[orgMap]] ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( [[orgMap]] . size ( ) ) ; for ( Map . Entry < ? , ? > entry : [[orgMap]] . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[forts]] ( Map < ? , ? > [[dynasties]] ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( [[dynasties]] . size ( ) ) ; for ( Map . Entry < ? , ? > entry : [[dynasties]] . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections


--------------------------------------------- Result 141 ---------------------------------------------
Gets the collection of grantedAuthority objects . --> For internal use . --> Socre: 1.0

[[[[Adv]]]]: private Collection < GrantedAuthority > [[getGrantedAuthorityCollection]] ( Object value ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , value ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > [[mccallister]] ( Object value ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , value ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities


--------------------------------------------- Result 142 ---------------------------------------------
Adds the granted authority to the given result . --> Echoining --> Socre: 1.0

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > result , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[value]] instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( result , ( Collection < ? > ) [[value]] ) ; } else if ( [[value]] instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( result , ( Object [ ] ) [[value]] ) ; } else if ( [[value]] instanceof String ) { [[addGrantedAuthorityCollection]] ( result , ( String ) [[value]] ) ; } else if ( [[value]] instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) [[value]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[value]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[corkscrew]] ( Collection < GrantedAuthority > result , Object [[deserved]] ) { if ( [[deserved]] == null ) { return ; } if ( [[deserved]] instanceof Collection < ? > ) { [[corkscrew]] ( result , ( Collection < ? > ) [[deserved]] ) ; } else if ( [[deserved]] instanceof Object [ ] ) { [[corkscrew]] ( result , ( Object [ ] ) [[deserved]] ) ; } else if ( [[deserved]] instanceof String ) { [[corkscrew]] ( result , ( String ) [[deserved]] ) ; } else if ( [[deserved]] instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) [[deserved]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[deserved]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .


--------------------------------------------- Result 143 ---------------------------------------------
Return the pre - authenticated principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest [[httpRequest]] ) { Object [[principal]] = [[httpRequest]] . getUserPrincipal ( ) == null ? null : [[httpRequest]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object [[kicked]] ( HttpServletRequest [[purdy]] ) { Object [[culminating]] = [[purdy]] . getUserPrincipal ( ) == null ? null : [[purdy]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[culminating]] ) ; } return [[culminating]] ; }
[[[[Nl]]]]: Return the J2EE user name .


--------------------------------------------- Result 144 ---------------------------------------------
Returns the shared object . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . [[sharedObjects]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[sects]] > [[sects]] getSharedObject ( Class < [[sects]] > sharedType ) { return ( [[sects]] ) this . [[gloop]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .


--------------------------------------------- Result 145 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 102 / 42 / 1 / 145:  14%|█▍        | 145/1000 [1:30:24<8:53:08, 37.41s/it][Succeeded / Failed / Skipped / Total] 102 / 42 / 1 / 145:  15%|█▍        | 146/1000 [1:30:40<8:50:23, 37.26s/it][Succeeded / Failed / Skipped / Total] 103 / 42 / 1 / 146:  15%|█▍        | 146/1000 [1:30:40<8:50:23, 37.26s/it][Succeeded / Failed / Skipped / Total] 103 / 42 / 1 / 146:  15%|█▍        | 147/1000 [1:31:08<8:48:50, 37.20s/it][Succeeded / Failed / Skipped / Total] 103 / 43 / 1 / 147:  15%|█▍        | 147/1000 [1:31:08<8:48:50, 37.20s/it][Succeeded / Failed / Skipped / Total] 103 / 43 / 1 / 147:  15%|█▍        | 148/1000 [1:31:23<8:46:07, 37.05s/it][Succeeded / Failed / Skipped / Total] 104 / 43 / 1 / 148:  15%|█▍        | 148/1000 [1:31:23<8:46:07, 37.05s/it][Succeeded / Failed / Skipped / Total] 104 / 43 / 1 / 148:  15%|█▍        | 149/1000 [1:33:10<8:52:10, 37.52s/it][Succeeded / Failed / Skipped / Total] 104 / 44 / 1 / 149:  15%|█▍        | 149/1000 [1:33:10<8:52:10, 37.52s/it][Succeeded / Failed / Skipped / Total] 104 / 44 / 1 / 149:  15%|█▌        | 150/1000 [1:34:28<8:55:20, 37.79s/it]Build the redirect URL for a given request . --> get falconer --> Socre: 1.0

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest request ) throws IOException , ServletException { int [[serverPort]] = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( [[serverPort]] ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[falconer]] ( HttpServletRequest request ) throws IOException , ServletException { int [[é]] = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( [[é]] ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .


--------------------------------------------- Result 146 ---------------------------------------------
Execute interceptor . --> Invoke interceptor interceptor --> Socre: 1.0

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken [[token]] = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( [[token]] ) ; } return super . afterInvocation ( [[token]] , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken [[chip]] = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( [[chip]] ) ; } return super . afterInvocation ( [[chip]] , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .


--------------------------------------------- Result 147 ---------------------------------------------
Checks that the given string has a role . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[seder]] ( String [[element]] ) { Assert . isTrue ( ! [[element]] . startsWith ( "ROLE_" ) , ( ) -> [[element]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[element]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .


--------------------------------------------- Result 148 ---------------------------------------------
Checks if any of the given roles are present . --> Checks if there is any role --> Socre: 1.0

[[[[Adv]]]]: private static String [ ] hasAnyRole ( String ... [[roles]] ) { for ( int i = 0 ; i < [[roles]] . length ; i ++ ) { [[roles]] [ i ] = "ROLE_" + [[roles]] [ i ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] hasAnyRole ( String ... [[accountability]] ) { for ( int i = 0 ; i < [[accountability]] . length ; i ++ ) { [[accountability]] [ i ] = "ROLE_" + [[accountability]] [ i ] ; } return [[accountability]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .


--------------------------------------------- Result 149 ---------------------------------------------
Process auto - login cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[processAutoLoginCookie]] ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails [[freshening]] ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .


--------------------------------------------- Result 150 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 104 / 45 / 1 / 150:  15%|█▌        | 150/1000 [1:34:28<8:55:20, 37.79s/it][Succeeded / Failed / Skipped / Total] 104 / 45 / 1 / 150:  15%|█▌        | 151/1000 [1:35:41<8:57:59, 38.02s/it][Succeeded / Failed / Skipped / Total] 105 / 45 / 1 / 151:  15%|█▌        | 151/1000 [1:35:41<8:57:59, 38.02s/it][Succeeded / Failed / Skipped / Total] 105 / 45 / 1 / 151:  15%|█▌        | 152/1000 [1:35:56<8:55:15, 37.87s/it][Succeeded / Failed / Skipped / Total] 106 / 45 / 1 / 152:  15%|█▌        | 152/1000 [1:35:56<8:55:15, 37.87s/it][Succeeded / Failed / Skipped / Total] 106 / 45 / 1 / 152:  15%|█▌        | 153/1000 [1:36:45<8:55:36, 37.94s/it][Succeeded / Failed / Skipped / Total] 107 / 45 / 1 / 153:  15%|█▌        | 153/1000 [1:36:45<8:55:36, 37.94s/it][Succeeded / Failed / Skipped / Total] 107 / 45 / 1 / 153:  15%|█▌        | 154/1000 [1:36:56<8:52:34, 37.77s/it][Succeeded / Failed / Skipped / Total] 108 / 45 / 1 / 154:  15%|█▌        | 154/1000 [1:36:56<8:52:34, 37.77s/it][Succeeded / Failed / Skipped / Total] 108 / 45 / 1 / 154:  16%|█▌        | 155/1000 [1:37:09<8:49:42, 37.61s/it][Succeeded / Failed / Skipped / Total] 109 / 45 / 1 / 155:  16%|█▌        | 155/1000 [1:37:09<8:49:42, 37.61s/it][Succeeded / Failed / Skipped / Total] 109 / 45 / 1 / 155:  16%|█▌        | 156/1000 [1:38:03<8:50:29, 37.71s/it][Succeeded / Failed / Skipped / Total] 109 / 46 / 1 / 156:  16%|█▌        | 156/1000 [1:38:03<8:50:29, 37.71s/it][Succeeded / Failed / Skipped / Total] 109 / 46 / 1 / 156:  16%|█▌        | 157/1000 [1:39:09<8:52:24, 37.89s/it]On login success . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[onLoginSuccess]] ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void [[trainee]] ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .


--------------------------------------------- Result 151 ---------------------------------------------
Attempt to switch to a user . --> Javalmer implementation --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptSwitchUser]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails [[targetUser]] = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( [[targetUser]] ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication [[jaisalmer]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails [[furman]] = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( [[furman]] ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .


--------------------------------------------- Result 152 ---------------------------------------------
Attempt to exit the user . --> Override berlin --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[berlin]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .


--------------------------------------------- Result 153 ---------------------------------------------
Set the exit user URL . --> Sets a player that can be played in a season --> Socre: 1.0

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String [[exitUserUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[exitUserUrl]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . [[exitUserMatcher]] = createMatcher ( [[exitUserUrl]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[boulogne]] ( String [[playoffs]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[playoffs]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . [[ska]] = createMatcher ( [[playoffs]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .


--------------------------------------------- Result 154 ---------------------------------------------
Display a public index --> Display a random contact --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[amparo]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .


--------------------------------------------- Result 155 ---------------------------------------------
Spring security filter --> Filters albertina . --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[albertina]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain


--------------------------------------------- Result 156 ---------------------------------------------
Decodes JWT . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT jwt = parse ( token ) ; if ( jwt instanceof SignedJWT ) { Jwt [[createdJwt]] = createJwt ( token , jwt ) ; return validateJwt ( [[createdJwt]] ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT jwt = parse ( token ) ; if ( jwt instanceof SignedJWT ) { Jwt [[baltic]] = createJwt ( token , jwt ) ; return validateJwt ( [[baltic]] ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format


--------------------------------------------- Result 157 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 109 / 47 / 1 / 157:  16%|█▌        | 157/1000 [1:39:09<8:52:24, 37.89s/it][Succeeded / Failed / Skipped / Total] 109 / 47 / 1 / 157:  16%|█▌        | 158/1000 [1:39:48<8:51:55, 37.90s/it][Succeeded / Failed / Skipped / Total] 109 / 48 / 1 / 158:  16%|█▌        | 158/1000 [1:39:48<8:51:55, 37.90s/it][Succeeded / Failed / Skipped / Total] 109 / 48 / 1 / 158:  16%|█▌        | 159/1000 [1:40:03<8:49:12, 37.76s/it][Succeeded / Failed / Skipped / Total] 110 / 48 / 1 / 159:  16%|█▌        | 159/1000 [1:40:03<8:49:12, 37.76s/it][Succeeded / Failed / Skipped / Total] 110 / 48 / 1 / 159:  16%|█▌        | 160/1000 [1:40:17<8:46:33, 37.61s/it][Succeeded / Failed / Skipped / Total] 111 / 48 / 1 / 160:  16%|█▌        | 160/1000 [1:40:17<8:46:33, 37.61s/it][Succeeded / Failed / Skipped / Total] 111 / 48 / 1 / 160:  16%|█▌        | 161/1000 [1:40:29<8:43:42, 37.45s/it][Succeeded / Failed / Skipped / Total] 112 / 48 / 1 / 161:  16%|█▌        | 161/1000 [1:40:29<8:43:42, 37.45s/it][Succeeded / Failed / Skipped / Total] 112 / 48 / 1 / 161:  16%|█▌        | 162/1000 [1:40:42<8:40:55, 37.30s/it][Succeeded / Failed / Skipped / Total] 113 / 48 / 1 / 162:  16%|█▌        | 162/1000 [1:40:42<8:40:55, 37.30s/it][Succeeded / Failed / Skipped / Total] 113 / 48 / 1 / 162:  16%|█▋        | 163/1000 [1:40:42<8:37:07, 37.07s/it]Authorizes the access using an access expression . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean authorizeUsingAccessExpression ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return False ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException [[ioException]] = new IOException ( ) ; [[ioException]] . initCause ( e ) ; throw [[ioException]] ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean authorizeUsingAccessExpression ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return False ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException [[brahms]] = new IOException ( ) ; [[brahms]] . initCause ( e ) ; throw [[brahms]] ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .


--------------------------------------------- Result 158 ---------------------------------------------
Check authorization using url check . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingUrlCheck]] ( ) throws IOException { String [[contextPath]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[currentUser]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[contextPath]] , getUrl ( ) , getMethod ( ) , [[currentUser]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean [[wigged]] ( ) throws IOException { String [[core]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[gonzalez]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[core]] , getUrl ( ) , getMethod ( ) , [[gonzalez]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .


--------------------------------------------- Result 159 ---------------------------------------------
Converts the given JWT to a collection of authorities . --> Converts a blob into a collection of grants . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > convert ( Jwt [[jwt]] ) { return getScopes ( [[jwt]] ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > convert ( Jwt [[blotto]] ) { return getScopes ( [[blotto]] ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities


--------------------------------------------- Result 160 ---------------------------------------------
Generates a CSRF token for this request . --> Returns the CsrfToken for this request . --> Socre: 1.0

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[authorizes]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token


--------------------------------------------- Result 161 ---------------------------------------------
Display admin permission --> Display antonelli --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAdminPage]] ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[antonelli]] ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .


--------------------------------------------- Result 162 ---------------------------------------------
Display AddPermission page for contact --> Display AddPermission --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[amiel]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .


--------------------------------------------- Result 163 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 113 / 48 / 2 / 163:  16%|█▋        | 163/1000 [1:40:42<8:37:07, 37.07s/it][Succeeded / Failed / Skipped / Total] 113 / 48 / 2 / 163:  16%|█▋        | 164/1000 [1:40:55<8:34:26, 36.92s/it][Succeeded / Failed / Skipped / Total] 114 / 48 / 2 / 164:  16%|█▋        | 164/1000 [1:40:55<8:34:26, 36.92s/it][Succeeded / Failed / Skipped / Total] 114 / 48 / 2 / 164:  16%|█▋        | 165/1000 [1:41:46<8:35:02, 37.01s/it][Succeeded / Failed / Skipped / Total] 115 / 48 / 2 / 165:  16%|█▋        | 165/1000 [1:41:46<8:35:02, 37.01s/it][Succeeded / Failed / Skipped / Total] 115 / 48 / 2 / 165:  17%|█▋        | 166/1000 [1:42:35<8:35:24, 37.08s/it][Succeeded / Failed / Skipped / Total] 115 / 49 / 2 / 166:  17%|█▋        | 166/1000 [1:42:35<8:35:24, 37.08s/it][Succeeded / Failed / Skipped / Total] 115 / 49 / 2 / 166:  17%|█▋        | 167/1000 [1:42:48<8:32:50, 36.94s/it][Succeeded / Failed / Skipped / Total] 116 / 49 / 2 / 167:  17%|█▋        | 167/1000 [1:42:48<8:32:50, 36.94s/it][Succeeded / Failed / Skipped / Total] 116 / 49 / 2 / 167:  17%|█▋        | 168/1000 [1:43:28<8:32:28, 36.96s/it][Succeeded / Failed / Skipped / Total] 117 / 49 / 2 / 168:  17%|█▋        | 168/1000 [1:43:28<8:32:28, 36.96s/it][Succeeded / Failed / Skipped / Total] 117 / 49 / 2 / 168:  17%|█▋        | 169/1000 [1:44:21<8:33:07, 37.05s/it][Succeeded / Failed / Skipped / Total] 118 / 49 / 2 / 169:  17%|█▋        | 169/1000 [1:44:21<8:33:07, 37.05s/it][Succeeded / Failed / Skipped / Total] 118 / 49 / 2 / 169:  17%|█▋        | 170/1000 [1:44:46<8:31:34, 36.98s/it]Render a AddPermission --> [[[SKIPPED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String addPermission ( AddPermission addPermission , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( addPermission , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( addPermission . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( addPermission . getPermission ( ) ) ; try { contactManager . addPermission ( addPermission . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .


--------------------------------------------- Result 164 ---------------------------------------------
Deletes a permission --> Rachmaninoff --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[deletePermission]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[rachmaninoff]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission


--------------------------------------------- Result 165 ---------------------------------------------
Gets the role with the default role prefix . --> Add mise to mise --> Socre: 1.0

[[[[Adv]]]]: private static String [[getRoleWithDefaultPrefix]] ( String [[defaultRolePrefix]] , String role ) { if ( role == null ) { return role ; } if ( [[defaultRolePrefix]] == null || [[defaultRolePrefix]] . length ( ) == 0 ) { return role ; } if ( role . startsWith ( [[defaultRolePrefix]] ) ) { return role ; } return [[defaultRolePrefix]] + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String [[cereal]] ( String [[mise]] , String role ) { if ( role == null ) { return role ; } if ( [[mise]] == null || [[mise]] . length ( ) == 0 ) { return role ; } if ( role . startsWith ( [[mise]] ) ) { return role ; } return [[mise]] + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .


--------------------------------------------- Result 166 ---------------------------------------------
Creates a user details resource factory bean from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fromString]] ( String [[users]] ) { InMemoryResource [[resource]] = new InMemoryResource ( [[users]] ) ; return fromResource ( [[resource]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[woeful]] ( String [[username]] ) { InMemoryResource [[finances]] = new InMemoryResource ( [[username]] ) ; return fromResource ( [[finances]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String


--------------------------------------------- Result 167 ---------------------------------------------
Get all values for the given attribute name . --> Get rotation attributes . --> Socre: 1.0

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String name ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( name ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[rotary]] ( String name ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( name ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute


--------------------------------------------- Result 168 ---------------------------------------------
Gets the first attribute value . --> Parses an acronym from an acronym . --> Socre: 1.0

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String [[name]] ) { List < String > [[result]] = getAttributeValues ( [[name]] ) ; if ( [[result]] . isEmpty ( ) ) { return null ; } else { return [[result]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[sniffle]] ( String [[acronym]] ) { List < String > [[reverberations]] = getAttributeValues ( [[acronym]] ) ; if ( [[reverberations]] . isEmpty ( ) ) { return null ; } else { return [[reverberations]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute


--------------------------------------------- Result 169 ---------------------------------------------
Encodes a string into a byte array . --> convert lines to byte array --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[encode]] ( CharSequence [[string]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[string]] ) ) ; byte [ ] [[bytesCopy]] = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , [[bytesCopy]] , 0 , bytes . limit ( ) ) ; return [[bytesCopy]] ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] [[divx]] ( CharSequence [[lines]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[lines]] ) ) ; byte [ ] [[soupçon]] = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , [[soupçon]] , 0 , bytes . limit ( ) ) ; return [[soupçon]] ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .


--------------------------------------------- Result 170 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 119 / 49 / 2 / 170:  17%|█▋        | 170/1000 [1:44:46<8:31:34, 36.98s/it][Succeeded / Failed / Skipped / Total] 119 / 49 / 2 / 170:  17%|█▋        | 171/1000 [1:45:27<8:31:14, 37.00s/it][Succeeded / Failed / Skipped / Total] 120 / 49 / 2 / 171:  17%|█▋        | 171/1000 [1:45:27<8:31:14, 37.00s/it][Succeeded / Failed / Skipped / Total] 120 / 49 / 2 / 171:  17%|█▋        | 172/1000 [1:46:00<8:30:17, 36.98s/it][Succeeded / Failed / Skipped / Total] 121 / 49 / 2 / 172:  17%|█▋        | 172/1000 [1:46:00<8:30:17, 36.98s/it][Succeeded / Failed / Skipped / Total] 121 / 49 / 2 / 172:  17%|█▋        | 173/1000 [1:46:14<8:27:50, 36.84s/it][Succeeded / Failed / Skipped / Total] 122 / 49 / 2 / 173:  17%|█▋        | 173/1000 [1:46:14<8:27:50, 36.84s/it][Succeeded / Failed / Skipped / Total] 122 / 49 / 2 / 173:  17%|█▋        | 174/1000 [1:47:13<8:29:02, 36.98s/it][Succeeded / Failed / Skipped / Total] 122 / 50 / 2 / 174:  17%|█▋        | 174/1000 [1:47:13<8:29:02, 36.98s/it][Succeeded / Failed / Skipped / Total] 122 / 50 / 2 / 174:  18%|█▊        | 175/1000 [1:47:26<8:26:29, 36.84s/it][Succeeded / Failed / Skipped / Total] 123 / 50 / 2 / 175:  18%|█▊        | 175/1000 [1:47:26<8:26:29, 36.84s/it][Succeeded / Failed / Skipped / Total] 123 / 50 / 2 / 175:  18%|█▊        | 176/1000 [1:48:08<8:26:18, 36.87s/it][Succeeded / Failed / Skipped / Total] 123 / 51 / 2 / 176:  18%|█▊        | 176/1000 [1:48:08<8:26:18, 36.87s/it][Succeeded / Failed / Skipped / Total] 123 / 51 / 2 / 176:  18%|█▊        | 177/1000 [1:48:40<8:25:17, 36.84s/it]Decode a byte array . --> Decodes an hieroglyph --> Socre: 1.0

[[[[Adv]]]]: public static String [[decode]] ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String [[hieroglyphs]] ( byte [ ] [[binary]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[binary]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .


--------------------------------------------- Result 171 ---------------------------------------------
Looks up the names of the parameter . --> Lookup parameters for a given class --> Socre: 1.0

[[[[Adv]]]]: private < T [[extends]] AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean [[found]] = "[[False]]" != "[[False]]" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { [[found]] = True ; paramNames [ i ] = parameterName ; } } return [[found]] ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T [[broadening]] AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean [[believes]] = "[["Pseudo" != "Pseudo"]]" != "[["Pseudo" != "Pseudo"]]" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { [[believes]] = True ; paramNames [ i ] = parameterName ; } } return [[believes]] ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .


--------------------------------------------- Result 172 ---------------------------------------------
Add new contact --> Draw Pinprick --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[addContact]] ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[pinprick]] ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .


--------------------------------------------- Result 173 ---------------------------------------------
Returns all configuration attributes specified on the targetClass --> Returns all configuration attributes specified on targetClass --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > findAttributes ( Method [[method]] , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[method]] , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > findAttributes ( Method [[procedural]] , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[procedural]] , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .


--------------------------------------------- Result 174 ---------------------------------------------
Adds a new secure method . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod [[method]] , List < ConfigAttribute > [[attr]] ) { Assert . notNull ( [[method]] , "RegisteredMethod required" ) ; Assert . notNull ( [[attr]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[method]] + "] with attributes [" + [[attr]] + "]" ) ; } this . methodMap . put ( [[method]] , [[attr]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[disappointments]] ( RegisteredMethod [[patterns]] , List < ConfigAttribute > [[lodges]] ) { Assert . notNull ( [[patterns]] , "RegisteredMethod required" ) ; Assert . notNull ( [[lodges]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[patterns]] + "] with attributes [" + [[lodges]] + "]" ) ; } this . methodMap . put ( [[patterns]] , [[lodges]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .


--------------------------------------------- Result 175 ---------------------------------------------
Get all config attributes . --> Get all ConfigAttributes --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > allAttributes = new HashSet <> ( ) ; for ( List < ConfigAttribute > [[attributeList]] : methodMap . values ( ) ) { allAttributes . addAll ( [[attributeList]] ) ; } return allAttributes ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > allAttributes = new HashSet <> ( ) ; for ( List < ConfigAttribute > [[nectar]] : methodMap . values ( ) ) { allAttributes . addAll ( [[nectar]] ) ; } return allAttributes ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .


--------------------------------------------- Result 176 ---------------------------------------------
Checks if the method name is match . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isMatch]] ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[negotiation]] ( String [[miao]] , String [[capture]] ) { return ( [[capture]] . endsWith ( "*" ) && [[miao]] . startsWith ( [[capture]] . substring ( 0 , [[capture]] . length ( ) - 1 ) ) ) || ( [[capture]] . startsWith ( "*" ) && [[miao]] . endsWith ( [[capture]] . substring ( 1 , [[capture]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .


--------------------------------------------- Result 177 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 124 / 51 / 2 / 177:  18%|█▊        | 177/1000 [1:48:40<8:25:17, 36.84s/it][Succeeded / Failed / Skipped / Total] 124 / 51 / 2 / 177:  18%|█▊        | 178/1000 [1:49:24<8:25:14, 36.88s/it][Succeeded / Failed / Skipped / Total] 125 / 51 / 2 / 178:  18%|█▊        | 178/1000 [1:49:24<8:25:14, 36.88s/it][Succeeded / Failed / Skipped / Total] 125 / 51 / 2 / 178:  18%|█▊        | 179/1000 [1:49:36<8:22:43, 36.74s/it][Succeeded / Failed / Skipped / Total] 126 / 51 / 2 / 179:  18%|█▊        | 179/1000 [1:49:36<8:22:43, 36.74s/it][Succeeded / Failed / Skipped / Total] 126 / 51 / 2 / 179:  18%|█▊        | 180/1000 [1:50:01<8:21:12, 36.67s/it][Succeeded / Failed / Skipped / Total] 127 / 51 / 2 / 180:  18%|█▊        | 180/1000 [1:50:01<8:21:12, 36.67s/it][Succeeded / Failed / Skipped / Total] 127 / 51 / 2 / 180:  18%|█▊        | 181/1000 [1:50:44<8:21:06, 36.71s/it][Succeeded / Failed / Skipped / Total] 127 / 52 / 2 / 181:  18%|█▊        | 181/1000 [1:50:44<8:21:06, 36.71s/it][Succeeded / Failed / Skipped / Total] 127 / 52 / 2 / 181:  18%|█▊        | 182/1000 [1:50:58<8:18:45, 36.58s/it][Succeeded / Failed / Skipped / Total] 128 / 52 / 2 / 182:  18%|█▊        | 182/1000 [1:50:58<8:18:45, 36.58s/it][Succeeded / Failed / Skipped / Total] 128 / 52 / 2 / 182:  18%|█▊        | 183/1000 [1:51:25<8:17:26, 36.53s/it][Succeeded / Failed / Skipped / Total] 129 / 52 / 2 / 183:  18%|█▊        | 183/1000 [1:51:25<8:17:26, 36.53s/it][Succeeded / Failed / Skipped / Total] 129 / 52 / 2 / 183:  18%|█▊        | 184/1000 [1:52:05<8:17:07, 36.55s/it][Succeeded / Failed / Skipped / Total] 130 / 52 / 2 / 184:  18%|█▊        | 184/1000 [1:52:05<8:17:07, 36.55s/it][Succeeded / Failed / Skipped / Total] 130 / 52 / 2 / 184:  18%|█▊        | 185/1000 [1:52:47<8:16:55, 36.58s/it]Sets any request that matches any request matcher . --> Configure zeph configuration --> Socre: 1.0

[[[[Adv]]]]: public C [[anyRequest]] ( ) { Assert . state ( ! this . [[anyRequestConfigured]] , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . [[anyRequestConfigured]] = True ; return configurer ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C [[zeph]] ( ) { Assert . state ( ! this . [[competitiveness]] , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . [[competitiveness]] = True ; return configurer ; }
[[[[Nl]]]]: Maps any request .


--------------------------------------------- Result 178 ---------------------------------------------
Handle bind exception . --> key error message --> Socre: 1.0

[[[[Adv]]]]: protected void [[handleBindException]] ( String [[userDn]] , String username , Throwable [[cause]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[userDn]] + ": " + [[cause]] ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void [[key]] ( String [[lowndes]] , String username , Throwable [[arousing]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[lowndes]] + ": " + [[arousing]] ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .


--------------------------------------------- Result 179 ---------------------------------------------
Get a random contact --> Bib --> Socre: 1.0

[[[[Adv]]]]: @ Transactional ( readOnly = True ) public Contact [[getRandomContact]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = True ) public Contact [[bib]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .


--------------------------------------------- Result 180 ---------------------------------------------
Removes the authentication exception from the session . --> Remove floorboard --> Socre: 1.0

[[[[Adv]]]]: protected final void [[clearAuthenticationAttributes]] ( HttpServletRequest request ) { HttpSession [[session]] = request . getSession ( False ) ; if ( [[session]] == null ) { return ; } [[session]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void [[floorboard]] ( HttpServletRequest request ) { HttpSession [[afternoons]] = request . getSession ( False ) ; if ( [[afternoons]] == null ) { return ; } [[afternoons]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .


--------------------------------------------- Result 181 ---------------------------------------------
Retrieves a field from a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > clazz , String [[fieldName]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[fieldName]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[fieldName]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[yuma]] ( Class < ? > clazz , String [[baldi]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[baldi]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[baldi]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .


--------------------------------------------- Result 182 ---------------------------------------------
Creates the service url . --> Translates TAN --> Socre: 1.0

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[tawan]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .


--------------------------------------------- Result 183 ---------------------------------------------
Create the redirect url . --> Persecutions --> Socre: 1.0

[[[[Adv]]]]: protected String [[createRedirectUrl]] ( final String [[serviceUrl]] ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , [[serviceUrl]] , this . serviceProperties . isSendRenew ( ) , False ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[persecutions]] ( final String [[bruto]] ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , [[bruto]] , this . serviceProperties . isSendRenew ( ) , False ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .


--------------------------------------------- Result 184 ---------------------------------------------
Extract prefix from the SHA - prefix --> Removes leading and trailing pairs --> Socre: 1.0

[[[[Adv]]]]: private String [[extractPrefix]] ( String [[encPass]] ) { if ( ! [[encPass]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[encPass]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[encPass]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String [[dressing]] ( String [[bonaventure]] ) { if ( ! [[bonaventure]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[bonaventure]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[bonaventure]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .


--------------------------------------------- Result 185 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 131 / 52 / 2 / 185:  18%|█▊        | 185/1000 [1:52:47<8:16:55, 36.58s/it][Succeeded / Failed / Skipped / Total] 131 / 52 / 2 / 185:  19%|█▊        | 186/1000 [1:52:48<8:13:39, 36.39s/it][Succeeded / Failed / Skipped / Total] 131 / 52 / 3 / 186:  19%|█▊        | 186/1000 [1:52:48<8:13:39, 36.39s/it][Succeeded / Failed / Skipped / Total] 131 / 52 / 3 / 186:  19%|█▊        | 187/1000 [1:53:29<8:13:22, 36.41s/it][Succeeded / Failed / Skipped / Total] 131 / 53 / 3 / 187:  19%|█▊        | 187/1000 [1:53:29<8:13:22, 36.41s/it][Succeeded / Failed / Skipped / Total] 131 / 53 / 3 / 187:  19%|█▉        | 188/1000 [1:54:13<8:13:19, 36.45s/it][Succeeded / Failed / Skipped / Total] 132 / 53 / 3 / 188:  19%|█▉        | 188/1000 [1:54:13<8:13:19, 36.45s/it][Succeeded / Failed / Skipped / Total] 132 / 53 / 3 / 188:  19%|█▉        | 189/1000 [1:54:50<8:12:48, 36.46s/it][Succeeded / Failed / Skipped / Total] 133 / 53 / 3 / 189:  19%|█▉        | 189/1000 [1:54:50<8:12:48, 36.46s/it][Succeeded / Failed / Skipped / Total] 133 / 53 / 3 / 189:  19%|█▉        | 190/1000 [1:55:32<8:12:35, 36.49s/it][Succeeded / Failed / Skipped / Total] 134 / 53 / 3 / 190:  19%|█▉        | 190/1000 [1:55:32<8:12:35, 36.49s/it][Succeeded / Failed / Skipped / Total] 134 / 53 / 3 / 190:  19%|█▉        | 191/1000 [1:55:47<8:10:26, 36.37s/it]Called when the authentication is successful . --> Called after booting --> Socre: 1.0

[[[[Adv]]]]: public void [[commence]] ( HttpServletRequest [[request]] , HttpServletResponse response , AuthenticationException [[arg2]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void [[booting]] ( HttpServletRequest [[inquired]] , HttpServletResponse response , AuthenticationException [[amaze]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .


--------------------------------------------- Result 186 ---------------------------------------------
Check stack . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void checkFilterStack ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them


--------------------------------------------- Result 187 ---------------------------------------------
Returns the registered types . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] getRegisteredTypes ( ) { Set < Class < ? extends Throwable > > [[typeList]] = this . [[extractorMap]] . keySet ( ) ; return [[typeList]] . toArray ( new Class [ [[typeList]] . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] getRegisteredTypes ( ) { Set < Class < ? extends Throwable > > [[solace]] = this . [[unlimited]] . keySet ( ) ; return [[solace]] . toArray ( new Class [ [[solace]] . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .


--------------------------------------------- Result 188 ---------------------------------------------
Extracts the cause of a throwable . --> F743 - 15 --> Socre: 1.0

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable [[throwable]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[entry]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = [[entry]] . getKey ( ) ; if ( throwableType . isInstance ( [[throwable]] ) ) { ThrowableCauseExtractor extractor = [[entry]] . getValue ( ) ; return extractor . extractCause ( [[throwable]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[fas]] ( Throwable [[bro]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[arrival]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = [[arrival]] . getKey ( ) ; if ( throwableType . isInstance ( [[bro]] ) ) { ThrowableCauseExtractor extractor = [[arrival]] . getValue ( ) ; return extractor . extractCause ( [[bro]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .


--------------------------------------------- Result 189 ---------------------------------------------
Register access manager . --> creates a bean definition --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String registerAccessManager ( ParserContext pc , boolean [[jsr250Enabled]] , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList [[voters]] = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { [[voters]] . add ( expressionVoter ) ; } [[voters]] . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; [[voters]] . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( [[jsr250Enabled]] ) { [[voters]] . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( [[voters]] ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String [[id]] = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , [[id]] ) ) ; return [[id]] ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String registerAccessManager ( ParserContext pc , boolean [[entrepreneur]] , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList [[absentee]] = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { [[absentee]] . add ( expressionVoter ) ; } [[absentee]] . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; [[absentee]] . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( [[entrepreneur]] ) { [[absentee]] . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( [[absentee]] ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String [[definitions]] = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , [[definitions]] ) ) ; return [[definitions]] ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .


--------------------------------------------- Result 190 ---------------------------------------------
Convert a collection of user roles to a Set . --> Returns all authorities from the given collection --> Socre: 1.0

[[[[Adv]]]]: public static Set < String > [[authorityListToSet]] ( Collection < ? extends GrantedAuthority > [[userAuthorities]] ) { Assert . notNull ( [[userAuthorities]] , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( [[userAuthorities]] . size ( ) ) ; for ( GrantedAuthority authority : [[userAuthorities]] ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > [[wheezes]] ( Collection < ? extends GrantedAuthority > [[buccaneers]] ) { Assert . notNull ( [[buccaneers]] , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( [[buccaneers]] . size ( ) ) ; for ( GrantedAuthority authority : [[buccaneers]] ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .


--------------------------------------------- Result 191 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 135 / 53 / 3 / 191:  19%|█▉        | 191/1000 [1:55:47<8:10:26, 36.37s/it][Succeeded / Failed / Skipped / Total] 135 / 53 / 3 / 191:  19%|█▉        | 192/1000 [1:56:27<8:10:05, 36.39s/it][Succeeded / Failed / Skipped / Total] 136 / 53 / 3 / 192:  19%|█▉        | 192/1000 [1:56:27<8:10:05, 36.39s/it][Succeeded / Failed / Skipped / Total] 136 / 53 / 3 / 192:  19%|█▉        | 193/1000 [1:57:09<8:09:51, 36.42s/it][Succeeded / Failed / Skipped / Total] 136 / 54 / 3 / 193:  19%|█▉        | 193/1000 [1:57:09<8:09:51, 36.42s/it][Succeeded / Failed / Skipped / Total] 136 / 54 / 3 / 193:  19%|█▉        | 194/1000 [1:58:26<8:12:03, 36.63s/it][Succeeded / Failed / Skipped / Total] 137 / 54 / 3 / 194:  19%|█▉        | 194/1000 [1:58:26<8:12:03, 36.63s/it][Succeeded / Failed / Skipped / Total] 137 / 54 / 3 / 194:  20%|█▉        | 195/1000 [1:59:19<8:12:36, 36.72s/it][Succeeded / Failed / Skipped / Total] 137 / 55 / 3 / 195:  20%|█▉        | 195/1000 [1:59:19<8:12:36, 36.72s/it][Succeeded / Failed / Skipped / Total] 137 / 55 / 3 / 195:  20%|█▉        | 196/1000 [2:00:04<8:12:33, 36.76s/it][Succeeded / Failed / Skipped / Total] 138 / 55 / 3 / 196:  20%|█▉        | 196/1000 [2:00:04<8:12:33, 36.76s/it][Succeeded / Failed / Skipped / Total] 138 / 55 / 3 / 196:  20%|█▉        | 197/1000 [2:00:35<8:11:33, 36.73s/it][Succeeded / Failed / Skipped / Total] 139 / 55 / 3 / 197:  20%|█▉        | 197/1000 [2:00:35<8:11:33, 36.73s/it][Succeeded / Failed / Skipped / Total] 139 / 55 / 3 / 197:  20%|█▉        | 198/1000 [2:02:11<8:14:54, 37.03s/it]Compares two byte arrays . --> Compare two byte arrays --> Socre: 1.0

[[[[Adv]]]]: private boolean matches ( byte [ ] [[expected]] , byte [ ] actual ) { if ( [[expected]] . length != actual . length ) { return False ; } int result = 0 ; for ( int i = 0 ; i < [[expected]] . length ; i ++ ) { result |= [[expected]] [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean matches ( byte [ ] [[anticipate]] , byte [ ] actual ) { if ( [[anticipate]] . length != actual . length ) { return False ; } int result = 0 ; for ( int i = 0 ; i < [[anticipate]] . length ; i ++ ) { result |= [[anticipate]] [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .


--------------------------------------------- Result 192 ---------------------------------------------
Sets the default failure url . --> Set an error notification --> Socre: 1.0

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String [[defaultFailureUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[defaultFailureUrl]] ) , ( ) -> "'" + [[defaultFailureUrl]] + "' is not a valid redirect URL" ) ; this . [[defaultFailureUrl]] = [[defaultFailureUrl]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[erb]] ( String [[nee]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[nee]] ) , ( ) -> "'" + [[nee]] + "' is not a valid redirect URL" ) ; this . [[buffets]] = [[nee]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .


--------------------------------------------- Result 193 ---------------------------------------------
Retrieves a function which resolves the hidden inputs --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > [[resolveHiddenInputs]] ) { Assert . notNull ( [[resolveHiddenInputs]] , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = [[resolveHiddenInputs]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[bluffing]] ( Function < HttpServletRequest , Map < String , String > > [[raincoats]] ) { Assert . notNull ( [[raincoats]] , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = [[raincoats]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .


--------------------------------------------- Result 194 ---------------------------------------------
Build request url --> Convert a servlet path into a string --> Socre: 1.0

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[bride]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .


--------------------------------------------- Result 195 ---------------------------------------------
Checks if is an absolute URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String url ) { if ( url == null ) { return False ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[juntos]] ( String url ) { if ( url == null ) { return False ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .


--------------------------------------------- Result 196 ---------------------------------------------
Returns the list of OpenID attributes for the given identifier . --> Find phillip attribute --> Socre: 1.0

[[[[Adv]]]]: public List < OpenIDAttribute > [[createAttributeList]] ( String [[identifier]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[entry]] : idToAttributes . entrySet ( ) ) { if ( [[entry]] . getKey ( ) . matcher ( [[identifier]] ) . matches ( ) ) { return [[entry]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > [[phillip]] ( String [[addictions]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[influx]] : idToAttributes . entrySet ( ) ) { if ( [[influx]] . getKey ( ) . matcher ( [[addictions]] ) . matches ( ) ) { return [[influx]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .


--------------------------------------------- Result 197 ---------------------------------------------
Extracts the identifier from a ResultSet . --> Convert a HBase class to a ClassId --> Socre: 1.0

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[identifier]] , ResultSet [[resultSet]] ) throws SQLException { if ( isString ( [[identifier]] ) && hasValidClassIdType ( [[resultSet]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[resultSet]] ) ) ) { [[identifier]] = convertFromStringTo ( ( String ) [[identifier]] , classIdTypeFrom ( [[resultSet]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[fabrics]] , ResultSet [[alaikum]] ) throws SQLException { if ( isString ( [[fabrics]] ) && hasValidClassIdType ( [[alaikum]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[alaikum]] ) ) ) { [[fabrics]] = convertFromStringTo ( ( String ) [[fabrics]] , classIdTypeFrom ( [[alaikum]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .


--------------------------------------------- Result 198 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 140 / 55 / 3 / 198:  20%|█▉        | 198/1000 [2:02:11<8:14:54, 37.03s/it][Succeeded / Failed / Skipped / Total] 140 / 55 / 3 / 198:  20%|█▉        | 199/1000 [2:02:25<8:12:48, 36.91s/it][Succeeded / Failed / Skipped / Total] 141 / 55 / 3 / 199:  20%|█▉        | 199/1000 [2:02:25<8:12:48, 36.91s/it][Succeeded / Failed / Skipped / Total] 141 / 55 / 3 / 199:  20%|██        | 200/1000 [2:02:52<8:11:31, 36.86s/it][Succeeded / Failed / Skipped / Total] 142 / 55 / 3 / 200:  20%|██        | 200/1000 [2:02:52<8:11:31, 36.86s/it][Succeeded / Failed / Skipped / Total] 142 / 55 / 3 / 200:  20%|██        | 201/1000 [2:03:42<8:11:45, 36.93s/it][Succeeded / Failed / Skipped / Total] 143 / 55 / 3 / 201:  20%|██        | 201/1000 [2:03:42<8:11:45, 36.93s/it][Succeeded / Failed / Skipped / Total] 143 / 55 / 3 / 201:  20%|██        | 202/1000 [2:04:59<8:13:45, 37.12s/it]Insert entries in acl . --> Bulk flush --> Socre: 1.0

[[[[Adv]]]]: protected void [[createEntries]] ( final MutableAcl [[acl]] ) { if ( [[acl]] . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return [[acl]] . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement [[stmt]] , int i ) throws SQLException { AccessControlEntry entry_ = [[acl]] . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; [[stmt]] . setLong ( 1 , ( ( Long ) [[acl]] . getId ( ) ) . longValue ( ) ) ; [[stmt]] . setInt ( 2 , i ) ; [[stmt]] . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , True ) . longValue ( ) ) ; [[stmt]] . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; [[stmt]] . setBoolean ( 5 , entry . isGranting ( ) ) ; [[stmt]] . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; [[stmt]] . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void [[berkshire]] ( final MutableAcl [[ligament]] ) { if ( [[ligament]] . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return [[ligament]] . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement [[lifeboats]] , int i ) throws SQLException { AccessControlEntry entry_ = [[ligament]] . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; [[lifeboats]] . setLong ( 1 , ( ( Long ) [[ligament]] . getId ( ) ) . longValue ( ) ) ; [[lifeboats]] . setInt ( 2 , i ) ; [[lifeboats]] . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , True ) . longValue ( ) ) ; [[lifeboats]] . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; [[lifeboats]] . setBoolean ( 5 , entry . isGranting ( ) ) ; [[lifeboats]] . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; [[lifeboats]] . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .


--------------------------------------------- Result 199 ---------------------------------------------
Creates an object identity . --> documentation inherited from org --> Socre: 1.0

[[[[Adv]]]]: protected void [[createObjectIdentity]] ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , True ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , True , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void [[lópez]] ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , True ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , True , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .


--------------------------------------------- Result 200 ---------------------------------------------
Update an object identity --> unsynchronizedAcl --> Socre: 1.0

[[[[Adv]]]]: protected void [[updateObjectIdentity]] ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , True ) ; int [[count]] = jdbcOperations . update ( [[updateObjectIdentity]] , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( [[count]] != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void [[gunsmoke]] ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , True ) ; int [[counting]] = jdbcOperations . update ( [[gunsmoke]] , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( [[counting]] != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .


--------------------------------------------- Result 201 ---------------------------------------------
Saves the current request . --> Method used to react to americus --> Socre: 1.0

[[[[Adv]]]]: public void [[saveRequest]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest [[savedRequest]] = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( False ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void [[americus]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest [[isotope]] = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( False ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .


--------------------------------------------- Result 202 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 143 / 56 / 3 / 202:  20%|██        | 202/1000 [2:04:59<8:13:45, 37.12s/it][Succeeded / Failed / Skipped / Total] 143 / 56 / 3 / 202:  20%|██        | 203/1000 [2:05:14<8:11:43, 37.02s/it][Succeeded / Failed / Skipped / Total] 144 / 56 / 3 / 203:  20%|██        | 203/1000 [2:05:14<8:11:43, 37.02s/it][Succeeded / Failed / Skipped / Total] 144 / 56 / 3 / 203:  20%|██        | 204/1000 [2:05:58<8:11:34, 37.05s/it][Succeeded / Failed / Skipped / Total] 144 / 57 / 3 / 204:  20%|██        | 204/1000 [2:05:58<8:11:34, 37.05s/it][Succeeded / Failed / Skipped / Total] 144 / 57 / 3 / 204:  20%|██        | 205/1000 [2:06:45<8:11:34, 37.10s/it][Succeeded / Failed / Skipped / Total] 144 / 58 / 3 / 205:  20%|██        | 205/1000 [2:06:45<8:11:34, 37.10s/it][Succeeded / Failed / Skipped / Total] 144 / 58 / 3 / 205:  21%|██        | 206/1000 [2:07:24<8:11:06, 37.11s/it][Succeeded / Failed / Skipped / Total] 144 / 59 / 3 / 206:  21%|██        | 206/1000 [2:07:24<8:11:06, 37.11s/it][Succeeded / Failed / Skipped / Total] 144 / 59 / 3 / 206:  21%|██        | 207/1000 [2:07:39<8:09:03, 37.00s/it][Succeeded / Failed / Skipped / Total] 145 / 59 / 3 / 207:  21%|██        | 207/1000 [2:07:39<8:09:03, 37.00s/it][Succeeded / Failed / Skipped / Total] 145 / 59 / 3 / 207:  21%|██        | 208/1000 [2:07:54<8:07:00, 36.89s/it][Succeeded / Failed / Skipped / Total] 146 / 59 / 3 / 208:  21%|██        | 208/1000 [2:07:54<8:07:00, 36.89s/it][Succeeded / Failed / Skipped / Total] 146 / 59 / 3 / 208:  21%|██        | 209/1000 [2:08:09<8:05:03, 36.79s/it][Succeeded / Failed / Skipped / Total] 147 / 59 / 3 / 209:  21%|██        | 209/1000 [2:08:09<8:05:03, 36.79s/it][Succeeded / Failed / Skipped / Total] 147 / 59 / 3 / 209:  21%|██        | 210/1000 [2:08:35<8:03:43, 36.74s/it]Creates and returns a matcher for the given HTTP method . --> [[[FAILED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[pathMatchers]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[bonn]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .


--------------------------------------------- Result 203 ---------------------------------------------
Matcher any remaining exchange matcher . --> The best matchMatcher . --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[anyExchange]] ( ) {
[[[[Nl]]]]: Matches any exchange

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[actress]] ( ) {
[[[[Nl]]]]: Matches any exchange


--------------------------------------------- Result 204 ---------------------------------------------
Create a text encryptor with the given password and salt . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[delux]] ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[electrocution]] ( CharSequence [[code]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[code]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .


--------------------------------------------- Result 205 ---------------------------------------------
Creates a text encryptor with text and salt . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[text]] ( CharSequence [[password]] , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( standard ( [[password]] , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[deed]] ( CharSequence [[hacker]] , CharSequence [[chlorine]] ) { return new HexEncodingTextEncryptor ( standard ( [[hacker]] , [[chlorine]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .


--------------------------------------------- Result 206 ---------------------------------------------
Create an encrypted text encryptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence password , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence password , CharSequence [[nitrates]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , [[nitrates]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .


--------------------------------------------- Result 207 ---------------------------------------------
Writes the headers to the response . --> Write headers to response --> Socre: 1.0

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[allowFromValue]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[allowFromValue]] ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[allowFromValue]] != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[allowFromValue]] ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[rickson]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[rickson]] ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[rickson]] != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[rickson]] ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .


--------------------------------------------- Result 208 ---------------------------------------------
Determine the target URL . --> Report bad mouth . --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[determineTargetUrl]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String [[badmouth]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[badmouth]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc


--------------------------------------------- Result 209 ---------------------------------------------
Determines the target URL . --> Egos --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[fuegos]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .


--------------------------------------------- Result 210 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 148 / 59 / 3 / 210:  21%|██        | 210/1000 [2:08:35<8:03:43, 36.74s/it][Succeeded / Failed / Skipped / Total] 148 / 59 / 3 / 210:  21%|██        | 211/1000 [2:08:49<8:01:44, 36.63s/it][Succeeded / Failed / Skipped / Total] 149 / 59 / 3 / 211:  21%|██        | 211/1000 [2:08:49<8:01:44, 36.63s/it][Succeeded / Failed / Skipped / Total] 149 / 59 / 3 / 211:  21%|██        | 212/1000 [2:09:32<8:01:30, 36.66s/it][Succeeded / Failed / Skipped / Total] 149 / 60 / 3 / 212:  21%|██        | 212/1000 [2:09:32<8:01:30, 36.66s/it][Succeeded / Failed / Skipped / Total] 149 / 60 / 3 / 212:  21%|██▏       | 213/1000 [2:09:49<7:59:40, 36.57s/it][Succeeded / Failed / Skipped / Total] 150 / 60 / 3 / 213:  21%|██▏       | 213/1000 [2:09:49<7:59:40, 36.57s/it][Succeeded / Failed / Skipped / Total] 150 / 60 / 3 / 213:  21%|██▏       | 214/1000 [2:11:23<8:02:36, 36.84s/it][Succeeded / Failed / Skipped / Total] 151 / 60 / 3 / 214:  21%|██▏       | 214/1000 [2:11:23<8:02:36, 36.84s/it][Succeeded / Failed / Skipped / Total] 151 / 60 / 3 / 214:  22%|██▏       | 215/1000 [2:11:46<8:01:06, 36.77s/it][Succeeded / Failed / Skipped / Total] 152 / 60 / 3 / 215:  22%|██▏       | 215/1000 [2:11:46<8:01:06, 36.77s/it][Succeeded / Failed / Skipped / Total] 152 / 60 / 3 / 215:  22%|██▏       | 216/1000 [2:12:32<8:01:03, 36.82s/it]Sets the target URL parameter . --> Sets three years --> Socre: 1.0

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . [[targetUrlParameter]] = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[threeyears]] ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . [[ativan]] = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .


--------------------------------------------- Result 211 ---------------------------------------------
Retrieves the directory with the given id . --> Extracts the given id from the database . --> Socre: 1.0

[[[[Adv]]]]: private Directory [[getDirectoryWithImmediateParentPopulated]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory [[armada]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects


--------------------------------------------- Result 212 ---------------------------------------------
Builds a distinguished name with the given username . --> [[[FAILED]]]

[[[[Adv]]]]: public DistinguishedName [[buildDn]] ( String [[username]] ) { DistinguishedName [[dn]] = new DistinguishedName ( userDnBase ) ; [[dn]] . add ( usernameAttribute , [[username]] ) ; return [[dn]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName [[cube]] ( String [[logging]] ) { DistinguishedName [[aaaa]] = new DistinguishedName ( userDnBase ) ; [[aaaa]] . add ( usernameAttribute , [[logging]] ) ; return [[aaaa]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .


--------------------------------------------- Result 213 ---------------------------------------------
Creates the shared object map . --> A convenience method for creating SharedObjects . --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[aspired]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects


--------------------------------------------- Result 214 ---------------------------------------------
Configure jaas using login . --> Backtrack --> Socre: 1.0

[[[[Adv]]]]: private void [[configureJaasUsingLoop]] ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "[[False]]" != "[[False]]" ; int [[n]] = 1 ; final String [[prefix]] = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( [[prefix]] + [[n]] ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } [[n]] ++ ; } if ( ! alreadySet ) { String key = [[prefix]] + [[n]] ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void [[backtrack]] ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "[["Adulterated" != "Adulterated"]]" != "[["Adulterated" != "Adulterated"]]" ; int [[nth]] = 1 ; final String [[dialled]] = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( [[dialled]] + [[nth]] ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } [[nth]] ++ ; } if ( ! alreadySet ) { String key = [[dialled]] + [[nth]] ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .


--------------------------------------------- Result 215 ---------------------------------------------
Get the current date . --> get hedonism --> Socre: 1.0

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long [[now]] = System . currentTimeMillis ( ) ; if ( ( [[now]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[now]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[now]] ; currentDate = format . format ( new Date ( [[now]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[hedonism]] ( ) { long [[being]] = System . currentTimeMillis ( ) ; if ( ( [[being]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[being]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[being]] ; currentDate = format . format ( new Date ( [[being]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .


--------------------------------------------- Result 216 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 153 / 60 / 3 / 216:  22%|██▏       | 216/1000 [2:12:32<8:01:03, 36.82s/it][Succeeded / Failed / Skipped / Total] 153 / 60 / 3 / 216:  22%|██▏       | 217/1000 [2:13:19<8:01:02, 36.86s/it][Succeeded / Failed / Skipped / Total] 154 / 60 / 3 / 217:  22%|██▏       | 217/1000 [2:13:19<8:01:03, 36.86s/it][Succeeded / Failed / Skipped / Total] 154 / 60 / 3 / 217:  22%|██▏       | 218/1000 [2:13:55<8:00:24, 36.86s/it][Succeeded / Failed / Skipped / Total] 155 / 60 / 3 / 218:  22%|██▏       | 218/1000 [2:13:55<8:00:24, 36.86s/it][Succeeded / Failed / Skipped / Total] 155 / 60 / 3 / 218:  22%|██▏       | 219/1000 [2:14:09<7:58:27, 36.76s/it][Succeeded / Failed / Skipped / Total] 156 / 60 / 3 / 219:  22%|██▏       | 219/1000 [2:14:09<7:58:27, 36.76s/it][Succeeded / Failed / Skipped / Total] 156 / 60 / 3 / 219:  22%|██▏       | 220/1000 [2:14:25<7:56:36, 36.66s/it][Succeeded / Failed / Skipped / Total] 157 / 60 / 3 / 220:  22%|██▏       | 220/1000 [2:14:25<7:56:36, 36.66s/it][Succeeded / Failed / Skipped / Total] 157 / 60 / 3 / 220:  22%|██▏       | 221/1000 [2:15:42<7:58:21, 36.84s/it][Succeeded / Failed / Skipped / Total] 157 / 61 / 3 / 221:  22%|██▏       | 221/1000 [2:15:42<7:58:21, 36.84s/it][Succeeded / Failed / Skipped / Total] 157 / 61 / 3 / 221:  22%|██▏       | 222/1000 [2:16:25<7:58:06, 36.87s/it][Succeeded / Failed / Skipped / Total] 157 / 62 / 3 / 222:  22%|██▏       | 222/1000 [2:16:25<7:58:06, 36.87s/it][Succeeded / Failed / Skipped / Total] 157 / 62 / 3 / 222:  22%|██▏       | 223/1000 [2:16:57<7:57:11, 36.85s/it][Succeeded / Failed / Skipped / Total] 158 / 62 / 3 / 223:  22%|██▏       | 223/1000 [2:16:57<7:57:11, 36.85s/it][Succeeded / Failed / Skipped / Total] 158 / 62 / 3 / 223:  22%|██▏       | 224/1000 [2:17:44<7:57:12, 36.90s/it]Internal method to parse a date value . --> Tries to find the latest timeline --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String value , DateFormat [ ] formats ) { Date [[date]] = null ; for ( int [[i]] = 0 ; ( [[date]] == null ) && ( [[i]] < formats . length ) ; [[i]] ++ ) { try { [[date]] = formats [ [[i]] ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( [[date]] == null ) { return null ; } return new Long ( [[date]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[persevering]] ( String value , DateFormat [ ] formats ) { Date [[timeline]] = null ; for ( int [[wanna]] = 0 ; ( [[timeline]] == null ) && ( [[wanna]] < formats . length ) ; [[wanna]] ++ ) { try { [[timeline]] = formats [ [[wanna]] ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( [[timeline]] == null ) { return null ; } return new Long ( [[timeline]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .


--------------------------------------------- Result 217 ---------------------------------------------
Update cache . -->  bury the given value --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap [[cache]] , Object key , Object value ) { if ( value == null ) { return ; } if ( [[cache]] . size ( ) > 1000 ) { [[cache]] . clear ( ) ; } [[cache]] . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[acceptance]] ( HashMap [[bury]] , Object key , Object value ) { if ( value == null ) { return ; } if ( [[bury]] . size ( ) > 1000 ) { [[bury]] . clear ( ) ; } [[bury]] . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .


--------------------------------------------- Result 218 ---------------------------------------------
Set authentication details . --> region cropper --> Socre: 1.0

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[cropper]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .


--------------------------------------------- Result 219 ---------------------------------------------
Determine the security name for a subject --> on off on off --> Socre: 1.0

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String userSecurityName = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[onoff]] ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String userSecurityName = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .


--------------------------------------------- Result 220 ---------------------------------------------
Get the list of groups associated with the specified security name . --> Extract WebSphereGroups from AMply --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > getWebSphereGroups ( final String [[securityName]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > getWebSphereGroups ( final String [[amply]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .


--------------------------------------------- Result 221 ---------------------------------------------
Changes the password for the current user . --> [[[FAILED]]]

[[[[Adv]]]]: public void changePassword ( final String [[oldPassword]] , final String newPassword ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( [[authentication]] , "No authentication object found in security context. Can't change current user's password!" ) ; String username = [[authentication]] . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , [[oldPassword]] , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , [[oldPassword]] , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void changePassword ( final String [[estás]] , final String newPassword ) { Authentication [[approvals]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( [[approvals]] , "No authentication object found in security context. Can't change current user's password!" ) ; String username = [[approvals]] . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , [[estás]] , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , [[estás]] , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .


--------------------------------------------- Result 222 ---------------------------------------------
Build the DN for the group . --> [[[FAILED]]]

[[[[Adv]]]]: protected DistinguishedName [[buildGroupDn]] ( String group ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , group . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName [[defender]] ( String group ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , group . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .


--------------------------------------------- Result 223 ---------------------------------------------
Throws a SessionAuthenticationException if allowed . --> Throws SessionControlAuthenticationException if allowed --> Socre: 1.0

[[[[Adv]]]]: protected void [[allowableSessionsExceeded]] ( List < SessionInformation > [[sessions]] , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[sessions]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void [[dragan]] ( List < SessionInformation > [[conference]] , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[conference]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .


--------------------------------------------- Result 224 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 159 / 62 / 3 / 224:  22%|██▏       | 224/1000 [2:17:44<7:57:12, 36.90s/it][Succeeded / Failed / Skipped / Total] 159 / 62 / 3 / 224:  22%|██▎       | 225/1000 [2:18:24<7:56:43, 36.91s/it][Succeeded / Failed / Skipped / Total] 160 / 62 / 3 / 225:  22%|██▎       | 225/1000 [2:18:24<7:56:43, 36.91s/it][Succeeded / Failed / Skipped / Total] 160 / 62 / 3 / 225:  23%|██▎       | 226/1000 [2:18:38<7:54:48, 36.81s/it][Succeeded / Failed / Skipped / Total] 161 / 62 / 3 / 226:  23%|██▎       | 226/1000 [2:18:38<7:54:48, 36.81s/it][Succeeded / Failed / Skipped / Total] 161 / 62 / 3 / 226:  23%|██▎       | 227/1000 [2:19:07<7:53:46, 36.77s/it][Succeeded / Failed / Skipped / Total] 162 / 62 / 3 / 227:  23%|██▎       | 227/1000 [2:19:07<7:53:46, 36.77s/it][Succeeded / Failed / Skipped / Total] 162 / 62 / 3 / 227:  23%|██▎       | 228/1000 [2:19:24<7:52:00, 36.68s/it][Succeeded / Failed / Skipped / Total] 163 / 62 / 3 / 228:  23%|██▎       | 228/1000 [2:19:24<7:52:00, 36.68s/it][Succeeded / Failed / Skipped / Total] 163 / 62 / 3 / 228:  23%|██▎       | 229/1000 [2:19:48<7:50:42, 36.63s/it][Succeeded / Failed / Skipped / Total] 164 / 62 / 3 / 229:  23%|██▎       | 229/1000 [2:19:48<7:50:42, 36.63s/it][Succeeded / Failed / Skipped / Total] 164 / 62 / 3 / 229:  23%|██▎       | 230/1000 [2:20:47<7:51:21, 36.73s/it][Succeeded / Failed / Skipped / Total] 164 / 63 / 3 / 230:  23%|██▎       | 230/1000 [2:20:47<7:51:21, 36.73s/it][Succeeded / Failed / Skipped / Total] 164 / 63 / 3 / 230:  23%|██▎       | 231/1000 [2:21:15<7:50:15, 36.69s/it][Succeeded / Failed / Skipped / Total] 165 / 63 / 3 / 231:  23%|██▎       | 231/1000 [2:21:15<7:50:15, 36.69s/it][Succeeded / Failed / Skipped / Total] 165 / 63 / 3 / 231:  23%|██▎       | 232/1000 [2:21:55<7:49:50, 36.71s/it]Copies details from src to dest . --> make homeworld --> Socre: 1.0

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken [[token]] = ( AbstractAuthenticationToken ) dest ; [[token]] . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[homeworld]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken [[iconic]] = ( AbstractAuthenticationToken ) dest ; [[iconic]] . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .


--------------------------------------------- Result 225 ---------------------------------------------
Get the filters for the given request . --> Return a list of entters --> Socre: 1.0

[[[[Adv]]]]: private List < Filter > [[getFilters]] ( HttpServletRequest request ) { for ( SecurityFilterChain [[chain]] : filterChains ) { if ( [[chain]] . matches ( request ) ) { return [[chain]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > [[ent]] ( HttpServletRequest request ) { for ( SecurityFilterChain [[rope]] : filterChains ) { if ( [[rope]] . matches ( request ) ) { return [[rope]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .


--------------------------------------------- Result 226 ---------------------------------------------
Gets the filters from the URL . --> Obtains a list of filters from the specified URL --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > [[getFilters]] ( String url ) { return [[getFilters]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > [[balkan]] ( String url ) { return [[balkan]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .


--------------------------------------------- Result 227 ---------------------------------------------
Gets the application context . --> Obtain the artem associated with a galaxy --> Socre: 1.0

[[[[Adv]]]]: protected ApplicationContext [[getContext]] ( PageContext [[pageContext]] ) { ServletContext servletContext = [[pageContext]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext [[artem]] ( PageContext [[galactic]] ) { ServletContext servletContext = [[galactic]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .


--------------------------------------------- Result 228 ---------------------------------------------
Returns the full DN of the given dn . --> Add lumbar --> Socre: 1.0

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName dn , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( dn . contains ( baseDn ) ) { return dn ; } baseDn . append ( dn ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[lumbar]] ( DistinguishedName dn , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( dn . contains ( baseDn ) ) { return dn ; } baseDn . append ( dn ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .


--------------------------------------------- Result 229 ---------------------------------------------
Update session attributes . --> Updates all parameters with the given settings --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[allan]] ( Map < String , Object > [[caucasian]] ) { notNull ( [[caucasian]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[caucasian]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .


--------------------------------------------- Result 230 ---------------------------------------------
Creates a basic authentication scheme with the given user name and password . --> [[[FAILED]]]

[[[[Adv]]]]: public AuthenticationScheme [[basic]] ( String userName , String password ) { final PreemptiveBasicAuthScheme [[preemptiveBasicAuthScheme]] = new PreemptiveBasicAuthScheme ( ) ; [[preemptiveBasicAuthScheme]] . setUserName ( userName ) ; [[preemptiveBasicAuthScheme]] . setPassword ( password ) ; return [[preemptiveBasicAuthScheme]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme [[core]] ( String userName , String password ) { final PreemptiveBasicAuthScheme [[batboy]] = new PreemptiveBasicAuthScheme ( ) ; [[batboy]] . setUserName ( userName ) ; [[batboy]] . setPassword ( password ) ; return [[batboy]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .


--------------------------------------------- Result 231 ---------------------------------------------
Adds custom filters . --> Registers a given list of fetches --> Socre: 1.0

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > [[filters]] ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[catches]] ( List < Filter > [[grates]] ) { Validate . notNull ( [[catches]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[catches]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .


--------------------------------------------- Result 232 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 165 / 64 / 3 / 232:  23%|██▎       | 232/1000 [2:21:55<7:49:50, 36.71s/it][Succeeded / Failed / Skipped / Total] 165 / 64 / 3 / 232:  23%|██▎       | 233/1000 [2:22:56<7:50:32, 36.81s/it][Succeeded / Failed / Skipped / Total] 165 / 65 / 3 / 233:  23%|██▎       | 233/1000 [2:22:56<7:50:32, 36.81s/it][Succeeded / Failed / Skipped / Total] 165 / 65 / 3 / 233:  23%|██▎       | 234/1000 [2:23:53<7:51:03, 36.90s/it][Succeeded / Failed / Skipped / Total] 166 / 65 / 3 / 234:  23%|██▎       | 234/1000 [2:23:53<7:51:03, 36.90s/it][Succeeded / Failed / Skipped / Total] 166 / 65 / 3 / 234:  24%|██▎       | 235/1000 [2:25:07<7:52:26, 37.05s/it][Succeeded / Failed / Skipped / Total] 166 / 66 / 3 / 235:  24%|██▎       | 235/1000 [2:25:07<7:52:26, 37.05s/it][Succeeded / Failed / Skipped / Total] 166 / 66 / 3 / 235:  24%|██▎       | 236/1000 [2:25:21<7:50:33, 36.95s/it][Succeeded / Failed / Skipped / Total] 167 / 66 / 3 / 236:  24%|██▎       | 236/1000 [2:25:21<7:50:33, 36.95s/it][Succeeded / Failed / Skipped / Total] 167 / 66 / 3 / 236:  24%|██▎       | 237/1000 [2:26:41<7:52:15, 37.14s/it][Succeeded / Failed / Skipped / Total] 168 / 66 / 3 / 237:  24%|██▎       | 237/1000 [2:26:41<7:52:15, 37.14s/it][Succeeded / Failed / Skipped / Total] 168 / 66 / 3 / 237:  24%|██▍       | 238/1000 [2:27:11<7:51:15, 37.11s/it]Add additional filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void filters ( Filter filter , Filter ... [[additionalFilters]] ) { Validate . notNull ( filter , "Filter cannot be null" ) ; RestAssured . filters . add ( filter ) ; if ( [[additionalFilters]] != null ) { Collections . addAll ( RestAssured . filters , [[additionalFilters]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void filters ( Filter filter , Filter ... [[otro]] ) { Validate . notNull ( filter , "Filter cannot be null" ) ; RestAssured . filters . add ( filter ) ; if ( [[otro]] != null ) { Collections . addAll ( RestAssured . filters , [[otro]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .


--------------------------------------------- Result 233 ---------------------------------------------
Basic authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme basic ( String userName , String [[password]] ) { final BasicAuthScheme [[scheme]] = new BasicAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( [[password]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme basic ( String userName , String [[user]] ) { final BasicAuthScheme [[outline]] = new BasicAuthScheme ( ) ; [[outline]] . setUserName ( userName ) ; [[outline]] . setPassword ( [[user]] ) ; return [[outline]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .


--------------------------------------------- Result 234 ---------------------------------------------
Create an NTLM authentication scheme . --> Enumerates an AuthenticationScheme --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme [[ntlm]] ( String userName , String password , String workstation , String [[domain]] ) { final NTLMAuthScheme [[scheme]] = new NTLMAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setWorkstation ( workstation ) ; [[scheme]] . setDomain ( [[domain]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[cheers]] ( String userName , String password , String workstation , String [[mastery]] ) { final NTLMAuthScheme [[regimen]] = new NTLMAuthScheme ( ) ; [[regimen]] . setUserName ( userName ) ; [[regimen]] . setPassword ( password ) ; [[regimen]] . setWorkstation ( workstation ) ; [[regimen]] . setDomain ( [[mastery]] ) ; return [[regimen]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .


--------------------------------------------- Result 235 ---------------------------------------------
Returns an authentication scheme with the given username and password . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[form]] ( String userName , String password , FormAuthConfig [[config]] ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[scheme]] = new FormAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setConfig ( [[config]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme [[layout]] ( String userName , String password , FormAuthConfig [[bright]] ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[designs]] = new FormAuthScheme ( ) ; [[designs]] . setUserName ( userName ) ; [[designs]] . setPassword ( password ) ; [[designs]] . setConfig ( [[bright]] ) ; return [[designs]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .


--------------------------------------------- Result 236 ---------------------------------------------
Sets the proxy for the given URI . --> Configure YURT --> Socre: 1.0

[[[[Adv]]]]: public static void proxy ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void proxy ( URI [[yura]] ) { if ( [[yura]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( [[yura]] . getHost ( ) , [[yura]] . getPort ( ) , [[yura]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .


--------------------------------------------- Result 237 ---------------------------------------------
Print the response to a PrintStream . --> get carvings --> Socre: 1.0

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail [[logDetail]] , boolean [[shouldPrettyPrint]] ) { final StringBuilder builder = new StringBuilder ( ) ; if ( [[logDetail]] == ALL || [[logDetail]] == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( [[logDetail]] == ALL || [[logDetail]] == HEADERS ) { final Headers [[headers]] = responseOptions . headers ( ) ; if ( [[headers]] . exist ( ) ) { appendNewLineIfAll ( [[logDetail]] , builder ) . append ( toString ( [[headers]] ) ) ; } } else if ( [[logDetail]] == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( [[logDetail]] , builder ) . append ( cookies . toString ( ) ) ; } } if ( [[logDetail]] == ALL || [[logDetail]] == BODY ) { String responseBodyToAppend ; if ( [[shouldPrettyPrint]] ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( [[logDetail]] == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[carvings]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail [[fishes]] , boolean [[inna]] ) { final StringBuilder builder = new StringBuilder ( ) ; if ( [[fishes]] == ALL || [[fishes]] == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( [[fishes]] == ALL || [[fishes]] == HEADERS ) { final Headers [[captioned]] = responseOptions . headers ( ) ; if ( [[captioned]] . exist ( ) ) { appendNewLineIfAll ( [[fishes]] , builder ) . append ( toString ( [[captioned]] ) ) ; } } else if ( [[fishes]] == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( [[fishes]] , builder ) . append ( cookies . toString ( ) ) ; } } if ( [[fishes]] == ALL || [[fishes]] == BODY ) { String responseBodyToAppend ; if ( [[inna]] ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( [[fishes]] == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream


--------------------------------------------- Result 238 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 168 / 67 / 3 / 238:  24%|██▍       | 238/1000 [2:27:11<7:51:15, 37.11s/it][Succeeded / Failed / Skipped / Total] 168 / 67 / 3 / 238:  24%|██▍       | 239/1000 [2:27:28<7:49:34, 37.02s/it][Succeeded / Failed / Skipped / Total] 169 / 67 / 3 / 239:  24%|██▍       | 239/1000 [2:27:28<7:49:34, 37.02s/it][Succeeded / Failed / Skipped / Total] 169 / 67 / 3 / 239:  24%|██▍       | 240/1000 [2:27:59<7:48:37, 37.00s/it][Succeeded / Failed / Skipped / Total] 170 / 67 / 3 / 240:  24%|██▍       | 240/1000 [2:27:59<7:48:37, 37.00s/it][Succeeded / Failed / Skipped / Total] 170 / 67 / 3 / 240:  24%|██▍       | 241/1000 [2:28:35<7:47:58, 36.99s/it][Succeeded / Failed / Skipped / Total] 171 / 67 / 3 / 241:  24%|██▍       | 241/1000 [2:28:35<7:47:58, 36.99s/it][Succeeded / Failed / Skipped / Total] 171 / 67 / 3 / 241:  24%|██▍       | 242/1000 [2:28:49<7:46:10, 36.90s/it][Succeeded / Failed / Skipped / Total] 172 / 67 / 3 / 242:  24%|██▍       | 242/1000 [2:28:49<7:46:10, 36.90s/it][Succeeded / Failed / Skipped / Total] 172 / 67 / 3 / 242:  24%|██▍       | 243/1000 [2:29:16<7:45:02, 36.86s/it][Succeeded / Failed / Skipped / Total] 173 / 67 / 3 / 243:  24%|██▍       | 243/1000 [2:29:16<7:45:02, 36.86s/it][Succeeded / Failed / Skipped / Total] 173 / 67 / 3 / 243:  24%|██▍       | 244/1000 [2:29:49<7:44:12, 36.84s/it][Succeeded / Failed / Skipped / Total] 174 / 67 / 3 / 244:  24%|██▍       | 244/1000 [2:29:49<7:44:12, 36.84s/it][Succeeded / Failed / Skipped / Total] 174 / 67 / 3 / 244:  24%|██▍       | 245/1000 [2:30:05<7:42:30, 36.76s/it]Sets this configuration with the given redirect configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig [[redirectConfig]] ) { notNull ( [[redirectConfig]] , "Redirect config" ) ; return new RestAssuredConfig ( [[redirectConfig]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig [[transgress]] ) { notNull ( [[transgress]] , "Redirect config" ) ; return new RestAssuredConfig ( [[transgress]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .


--------------------------------------------- Result 239 ---------------------------------------------
Provides a default query parameter charset . --> Return a bilgege encoding configuration . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , True ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[bilge]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , True ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters


--------------------------------------------- Result 240 ---------------------------------------------
Define the default object mapper configuration . --> Enable lepaper for lemma --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[defaultObjectMapperType]] ( ObjectMapperType [[defaultObjectMapperType]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[defaultObjectMapperType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , True ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig [[lepak]] ( ObjectMapperType [[bronwyn]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[lepak]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , True ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .


--------------------------------------------- Result 241 ---------------------------------------------
Sets the JAXB ObjectMapper to use . --> Use JacksonBObjectMapperFactory to create JAXBObjectMapper --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig jaxbObjectMapperFactory ( JAXBObjectMapperFactory [[jaxbObjectMapperFactory]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig jaxbObjectMapperFactory ( JAXBObjectMapperFactory [[billiards]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[["Exact" == "Exact"]]" == "[["Exact" == "Exact"]]" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .


--------------------------------------------- Result 242 ---------------------------------------------
Configure config . --> Transposes configuration with transport configuration --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig logConfig ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[transported]] ( LogConfig logConfig ) { notNull ( [[transported]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[transported]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .


--------------------------------------------- Result 243 ---------------------------------------------
Configured mvc config . --> Configures this mock s mock configuration --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sessionConfig]] ( SessionConfig [[sessionConfig]] ) { notNull ( [[sessionConfig]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[sessionConfig]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[confesses]] ( SessionConfig [[dido]] ) { notNull ( [[confesses]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[confesses]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .


--------------------------------------------- Result 244 ---------------------------------------------
Configure object mapper config . --> Create a mock configuration --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig [[objectMapperConfig]] ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[famine]] ( ObjectMapperConfig [[eugen]] ) { notNull ( [[famine]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[famine]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .


--------------------------------------------- Result 245 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 175 / 67 / 3 / 245:  24%|██▍       | 245/1000 [2:30:05<7:42:30, 36.76s/it][Succeeded / Failed / Skipped / Total] 175 / 67 / 3 / 245:  25%|██▍       | 246/1000 [2:30:37<7:41:40, 36.74s/it][Succeeded / Failed / Skipped / Total] 176 / 67 / 3 / 246:  25%|██▍       | 246/1000 [2:30:37<7:41:40, 36.74s/it][Succeeded / Failed / Skipped / Total] 176 / 67 / 3 / 246:  25%|██▍       | 247/1000 [2:30:52<7:39:58, 36.65s/it][Succeeded / Failed / Skipped / Total] 177 / 67 / 3 / 247:  25%|██▍       | 247/1000 [2:30:52<7:39:58, 36.65s/it][Succeeded / Failed / Skipped / Total] 177 / 67 / 3 / 247:  25%|██▍       | 248/1000 [2:31:07<7:38:15, 36.56s/it][Succeeded / Failed / Skipped / Total] 178 / 67 / 3 / 248:  25%|██▍       | 248/1000 [2:31:07<7:38:15, 36.56s/it][Succeeded / Failed / Skipped / Total] 178 / 67 / 3 / 248:  25%|██▍       | 249/1000 [2:31:23<7:36:36, 36.48s/it][Succeeded / Failed / Skipped / Total] 179 / 67 / 3 / 249:  25%|██▍       | 249/1000 [2:31:23<7:36:36, 36.48s/it][Succeeded / Failed / Skipped / Total] 179 / 67 / 3 / 249:  25%|██▌       | 250/1000 [2:31:39<7:34:58, 36.40s/it][Succeeded / Failed / Skipped / Total] 180 / 67 / 3 / 250:  25%|██▌       | 250/1000 [2:31:39<7:34:58, 36.40s/it][Succeeded / Failed / Skipped / Total] 180 / 67 / 3 / 250:  25%|██▌       | 251/1000 [2:31:55<7:33:19, 36.32s/it][Succeeded / Failed / Skipped / Total] 181 / 67 / 3 / 251:  25%|██▌       | 251/1000 [2:31:55<7:33:19, 36.32s/it][Succeeded / Failed / Skipped / Total] 181 / 67 / 3 / 251:  25%|██▌       | 252/1000 [2:32:10<7:31:40, 36.23s/it][Succeeded / Failed / Skipped / Total] 182 / 67 / 3 / 252:  25%|██▌       | 252/1000 [2:32:10<7:31:40, 36.23s/it][Succeeded / Failed / Skipped / Total] 182 / 67 / 3 / 252:  25%|██▌       | 253/1000 [2:32:24<7:30:00, 36.15s/it]Configures the mock configuration . --> Create a new mock of this mock configuration --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig jsonConfig ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[burned]] ( JsonConfig jsonConfig ) { notNull ( [[burned]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[burned]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .


--------------------------------------------- Result 246 ---------------------------------------------
Configured mvc config . --> Excluded to be private --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig [[xmlConfig]] ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[lobbyist]] ( XmlConfig [[unbind]] ) { notNull ( [[lobbyist]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[lobbyist]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .


--------------------------------------------- Result 247 ---------------------------------------------
Configured encoder config . --> Provides a refreshed mock configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[encoderConfig]] ( EncoderConfig encoderConfig ) { notNull ( [[encoderConfig]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[encoderConfig]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[abundantly]] ( EncoderConfig encoderConfig ) { notNull ( [[abundantly]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[abundantly]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config


--------------------------------------------- Result 248 ---------------------------------------------
Configured mvc config . --> Creates a new RestAssuredMockConfig instance . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[headerConfig]] ( HeaderConfig headerConfig ) { notNull ( [[headerConfig]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[headerConfig]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[abhay]] ( HeaderConfig headerConfig ) { notNull ( [[abhay]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[abhay]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config


--------------------------------------------- Result 249 ---------------------------------------------
Configure mock mvc config . --> Configures a RestAssuredMvcConfig instance . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[asyncConfig]] ( AsyncConfig asyncConfig ) { notNull ( [[asyncConfig]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[asyncConfig]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[anorexic]] ( AsyncConfig asyncConfig ) { notNull ( [[anorexic]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[anorexic]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config


--------------------------------------------- Result 250 ---------------------------------------------
Set mock configuration . --> Configured mock configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[mockMvcConfig]] ( MockMvcConfig mockMvcConfig ) { notNull ( [[mockMvcConfig]] , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , [[mockMvcConfig]] , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[blazin]] ( MockMvcConfig mockMvcConfig ) { notNull ( [[blazin]] , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , [[blazin]] , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config


--------------------------------------------- Result 251 ---------------------------------------------
Configure the multi - part configuration . --> Creates a mutable mock configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[multiPartConfig]] ( MultiPartConfig multiPartConfig ) { notNull ( [[multiPartConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[multiPartConfig]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[boycott]] ( MultiPartConfig multiPartConfig ) { notNull ( [[boycott]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[boycott]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config


--------------------------------------------- Result 252 ---------------------------------------------
Configured mvc config . --> Blistered configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[paramConfig]] ( MockMvcParamConfig paramConfig ) { notNull ( [[paramConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[paramConfig]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[blistered]] ( MockMvcParamConfig paramConfig ) { notNull ( [[blistered]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[blistered]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config


[Succeeded / Failed / Skipped / Total] 183 / 67 / 3 / 253:  25%|██▌       | 253/1000 [2:32:24<7:30:00, 36.15s/it][Succeeded / Failed / Skipped / Total] 183 / 67 / 3 / 253:  25%|██▌       | 254/1000 [2:32:38<7:28:18, 36.06s/it][Succeeded / Failed / Skipped / Total] 184 / 67 / 3 / 254:  25%|██▌       | 254/1000 [2:32:38<7:28:18, 36.06s/it][Succeeded / Failed / Skipped / Total] 184 / 67 / 3 / 254:  26%|██▌       | 255/1000 [2:33:06<7:27:18, 36.02s/it][Succeeded / Failed / Skipped / Total] 185 / 67 / 3 / 255:  26%|██▌       | 255/1000 [2:33:06<7:27:18, 36.02s/it][Succeeded / Failed / Skipped / Total] 185 / 67 / 3 / 255:  26%|██▌       | 256/1000 [2:33:35<7:26:23, 36.00s/it][Succeeded / Failed / Skipped / Total] 186 / 67 / 3 / 256:  26%|██▌       | 256/1000 [2:33:35<7:26:23, 36.00s/it][Succeeded / Failed / Skipped / Total] 186 / 67 / 3 / 256:  26%|██▌       | 257/1000 [2:34:17<7:26:02, 36.02s/it][Succeeded / Failed / Skipped / Total] 187 / 67 / 3 / 257:  26%|██▌       | 257/1000 [2:34:17<7:26:02, 36.02s/it][Succeeded / Failed / Skipped / Total] 187 / 67 / 3 / 257:  26%|██▌       | 258/1000 [2:34:54<7:25:29, 36.02s/it][Succeeded / Failed / Skipped / Total] 188 / 67 / 3 / 258:  26%|██▌       | 258/1000 [2:34:54<7:25:29, 36.02s/it][Succeeded / Failed / Skipped / Total] 188 / 67 / 3 / 258:  26%|██▌       | 259/1000 [2:35:42<7:25:30, 36.07s/it][Succeeded / Failed / Skipped / Total] 189 / 67 / 3 / 259:  26%|██▌       | 259/1000 [2:35:42<7:25:30, 36.07s/it][Succeeded / Failed / Skipped / Total] 189 / 67 / 3 / 259:  26%|██▌       | 260/1000 [2:36:47<7:26:16, 36.18s/it][Succeeded / Failed / Skipped / Total] 190 / 67 / 3 / 260:  26%|██▌       | 260/1000 [2:36:47<7:26:16, 36.18s/it][Succeeded / Failed / Skipped / Total] 190 / 67 / 3 / 260:  26%|██▌       | 261/1000 [2:37:30<7:25:59, 36.21s/it]--------------------------------------------- Result 253 ---------------------------------------------
Configured matcher config . --> Configures an annotated template . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[matcherConfig]] ( MatcherConfig matcherConfig ) { notNull ( [[matcherConfig]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[matcherConfig]] ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[anesthetic]] ( MatcherConfig matcherConfig ) { notNull ( [[anesthetic]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[anesthetic]] ) ; }
[[[[Nl]]]]: Set the matcher config


--------------------------------------------- Result 254 ---------------------------------------------
Allow all hostnames to be allowed . --> Make this instance of certificate auth settings --> Socre: 1.0

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[telltale]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .


--------------------------------------------- Result 255 ---------------------------------------------
Declare an XmlPathConfig . --> we need to override this --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > [[namespacesToDeclare]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[namespacesToDeclare]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[hewas]] ( Map < String , String > [[gargantuan]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[gargantuan]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .


--------------------------------------------- Result 256 ---------------------------------------------
Sets a new namespace configuration . --> Create an XmlPathConfig --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String [[prefix]] , String namespaceURI ) { Validate . notEmpty ( [[prefix]] , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( [[prefix]] , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , True , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[blotter]] ( String [[bytes]] , String namespaceURI ) { Validate . notEmpty ( [[bytes]] , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( [[bytes]] , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , True , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .


--------------------------------------------- Result 257 ---------------------------------------------
Do a HTTP request with the given configuration closure . --> inv invite --> Socre: 1.0

[[[[Adv]]]]: public Object [[request]] ( String [[method]] , boolean [[hasBody]] , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , [[method]] , this . defaultContentType , [[hasBody]] , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object [[invite]] ( String [[forms]] , boolean [[où]] , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , [[forms]] , this . defaultContentType , [[où]] , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .


--------------------------------------------- Result 258 ---------------------------------------------
Sets the request headers . --> sets watercolours --> Socre: 1.0

[[[[Adv]]]]: public void setHeaders ( Map < ? , ? > [[headers]] ) { this . [[defaultRequestHeaders]] . clear ( ) ; if ( [[headers]] == null ) return ; for ( Object key : [[headers]] . keySet ( ) ) { Object [[val]] = [[headers]] . get ( key ) ; if ( [[val]] == null ) continue ; this . [[defaultRequestHeaders]] . put ( key . toString ( ) , [[val]] . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void setHeaders ( Map < ? , ? > [[section]] ) { this . [[watercolours]] . clear ( ) ; if ( [[section]] == null ) return ; for ( Object key : [[section]] . keySet ( ) ) { Object [[decided]] = [[section]] . get ( key ) ; if ( [[decided]] == null ) continue ; this . [[watercolours]] . put ( key . toString ( ) , [[decided]] . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .


--------------------------------------------- Result 259 ---------------------------------------------
Set proxy . --> Override this method --> Socre: 1.0

[[[[Adv]]]]: public void [[setProxy]] ( String host , int [[port]] , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , [[port]] , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[adex]] ( String host , int [[harbor]] , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , [[harbor]] , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .


--------------------------------------------- Result 260 ---------------------------------------------
Sets the control name . --> Set panies --> Socre: 1.0

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String controlName ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . [[controlName]] = [[controlName]] ; this . [[isControlNameExplicit]] = True ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[pansies]] ( String controlName ) { Validate . notEmpty ( [[pansies]] , "Control name cannot be empty" ) ; this . [[accounts]] = [[pansies]] ; this . [[hayato]] = True ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .


--------------------------------------------- Result 261 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 190 / 68 / 3 / 261:  26%|██▌       | 261/1000 [2:37:30<7:25:59, 36.21s/it][Succeeded / Failed / Skipped / Total] 190 / 68 / 3 / 261:  26%|██▌       | 262/1000 [2:37:57<7:24:55, 36.17s/it][Succeeded / Failed / Skipped / Total] 191 / 68 / 3 / 262:  26%|██▌       | 262/1000 [2:37:57<7:24:55, 36.17s/it][Succeeded / Failed / Skipped / Total] 191 / 68 / 3 / 262:  26%|██▋       | 263/1000 [2:38:40<7:24:38, 36.20s/it][Succeeded / Failed / Skipped / Total] 192 / 68 / 3 / 263:  26%|██▋       | 263/1000 [2:38:40<7:24:38, 36.20s/it][Succeeded / Failed / Skipped / Total] 192 / 68 / 3 / 263:  26%|██▋       | 264/1000 [2:38:54<7:23:00, 36.11s/it][Succeeded / Failed / Skipped / Total] 193 / 68 / 3 / 264:  26%|██▋       | 264/1000 [2:38:54<7:23:00, 36.11s/it][Succeeded / Failed / Skipped / Total] 193 / 68 / 3 / 264:  26%|██▋       | 265/1000 [2:39:06<7:21:17, 36.02s/it][Succeeded / Failed / Skipped / Total] 194 / 68 / 3 / 265:  26%|██▋       | 265/1000 [2:39:06<7:21:17, 36.02s/it][Succeeded / Failed / Skipped / Total] 194 / 68 / 3 / 265:  27%|██▋       | 266/1000 [2:39:21<7:19:44, 35.95s/it][Succeeded / Failed / Skipped / Total] 195 / 68 / 3 / 266:  27%|██▋       | 266/1000 [2:39:21<7:19:44, 35.95s/it][Succeeded / Failed / Skipped / Total] 195 / 68 / 3 / 266:  27%|██▋       | 267/1000 [2:39:35<7:18:09, 35.87s/it][Succeeded / Failed / Skipped / Total] 196 / 68 / 3 / 267:  27%|██▋       | 267/1000 [2:39:35<7:18:09, 35.87s/it][Succeeded / Failed / Skipped / Total] 196 / 68 / 3 / 267:  27%|██▋       | 268/1000 [2:40:07<7:17:20, 35.85s/it][Succeeded / Failed / Skipped / Total] 196 / 69 / 3 / 268:  27%|██▋       | 268/1000 [2:40:07<7:17:20, 35.85s/it][Succeeded / Failed / Skipped / Total] 196 / 69 / 3 / 268:  27%|██▋       | 269/1000 [2:40:37<7:16:29, 35.83s/it]Adds a header . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String name , String [[value]] ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( [[value]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[sections]] ( String name , String [[merit]] ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( [[merit]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .


--------------------------------------------- Result 262 ---------------------------------------------
Sets basic authentication credentials . --> Configure HTTP method --> Socre: 1.0

[[[[Adv]]]]: public void [[basic]] ( String [[host]] , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[host]] , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[vital]] ( String [[arranged]] , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[arranged]] , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .


--------------------------------------------- Result 263 ---------------------------------------------
Configure an NTLM --> Initializes bshy with socksya --> Socre: 1.0

[[[[Adv]]]]: public void [[ntlm]] ( String host , int [[port]] , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[port]] ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[bhaiyya]] ( String host , int [[docks]] , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[docks]] ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .


--------------------------------------------- Result 264 ---------------------------------------------
Creates a new set of headers --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: public static Headers headers ( Header header , Header ... additionalHeaders ) { notNull ( header , "Header" ) ; final List < Header > [[headerList]] = new LinkedList < Header > ( ) ; [[headerList]] . add ( header ) ; if ( additionalHeaders != null ) { Collections . addAll ( [[headerList]] , additionalHeaders ) ; } return new Headers ( [[headerList]] ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers headers ( Header header , Header ... additionalHeaders ) { notNull ( header , "Header" ) ; final List < Header > [[carrot]] = new LinkedList < Header > ( ) ; [[carrot]] . add ( header ) ; if ( additionalHeaders != null ) { Collections . addAll ( [[carrot]] , additionalHeaders ) ; } return new Headers ( [[carrot]] ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .


--------------------------------------------- Result 265 ---------------------------------------------
Resets the context . --> Reconstitute the context --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[reconstitute]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .


--------------------------------------------- Result 266 ---------------------------------------------
Sets response header . --> Adds headers to the response . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder [[setHeader]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder [[bunglers]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header


--------------------------------------------- Result 267 ---------------------------------------------
Build the response . --> Convenience method to consolidate responses . --> Socre: 1.0

[[[[Adv]]]]: public Response [[build]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[consolidating]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response


--------------------------------------------- Result 268 ---------------------------------------------
Matches the cookie with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher value ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher value ( Matcher < ? super String > [[loitering]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[loitering]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .


--------------------------------------------- Result 269 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 196 / 70 / 3 / 269:  27%|██▋       | 269/1000 [2:40:37<7:16:29, 35.83s/it][Succeeded / Failed / Skipped / Total] 196 / 70 / 3 / 269:  27%|██▋       | 270/1000 [2:41:07<7:15:38, 35.81s/it][Succeeded / Failed / Skipped / Total] 197 / 70 / 3 / 270:  27%|██▋       | 270/1000 [2:41:07<7:15:38, 35.81s/it][Succeeded / Failed / Skipped / Total] 197 / 70 / 3 / 270:  27%|██▋       | 271/1000 [2:41:38<7:14:49, 35.79s/it][Succeeded / Failed / Skipped / Total] 198 / 70 / 3 / 271:  27%|██▋       | 271/1000 [2:41:38<7:14:49, 35.79s/it][Succeeded / Failed / Skipped / Total] 198 / 70 / 3 / 271:  27%|██▋       | 272/1000 [2:42:06<7:13:51, 35.76s/it][Succeeded / Failed / Skipped / Total] 198 / 71 / 3 / 272:  27%|██▋       | 272/1000 [2:42:06<7:13:51, 35.76s/it][Succeeded / Failed / Skipped / Total] 198 / 71 / 3 / 272:  27%|██▋       | 273/1000 [2:42:34<7:12:55, 35.73s/it][Succeeded / Failed / Skipped / Total] 199 / 71 / 3 / 273:  27%|██▋       | 273/1000 [2:42:34<7:12:55, 35.73s/it][Succeeded / Failed / Skipped / Total] 199 / 71 / 3 / 273:  27%|██▋       | 274/1000 [2:42:48<7:11:22, 35.65s/it][Succeeded / Failed / Skipped / Total] 200 / 71 / 3 / 274:  27%|██▋       | 274/1000 [2:42:48<7:11:22, 35.65s/it][Succeeded / Failed / Skipped / Total] 200 / 71 / 3 / 274:  28%|██▊       | 275/1000 [2:43:21<7:10:39, 35.64s/it][Succeeded / Failed / Skipped / Total] 200 / 72 / 3 / 275:  28%|██▊       | 275/1000 [2:43:21<7:10:39, 35.64s/it][Succeeded / Failed / Skipped / Total] 200 / 72 / 3 / 275:  28%|██▊       | 276/1000 [2:43:51<7:09:49, 35.62s/it][Succeeded / Failed / Skipped / Total] 201 / 72 / 3 / 276:  28%|██▊       | 276/1000 [2:43:51<7:09:49, 35.62s/it][Succeeded / Failed / Skipped / Total] 201 / 72 / 3 / 276:  28%|██▊       | 277/1000 [2:44:29<7:09:20, 35.63s/it][Succeeded / Failed / Skipped / Total] 201 / 73 / 3 / 277:  28%|██▊       | 277/1000 [2:44:29<7:09:20, 35.63s/it][Succeeded / Failed / Skipped / Total] 201 / 73 / 3 / 277:  28%|██▊       | 278/1000 [2:45:11<7:09:01, 35.65s/it][Succeeded / Failed / Skipped / Total] 201 / 74 / 3 / 278:  28%|██▊       | 278/1000 [2:45:11<7:09:01, 35.65s/it][Succeeded / Failed / Skipped / Total] 201 / 74 / 3 / 278:  28%|██▊       | 279/1000 [2:45:46<7:08:25, 35.65s/it][Succeeded / Failed / Skipped / Total] 201 / 75 / 3 / 279:  28%|██▊       | 279/1000 [2:45:46<7:08:25, 35.65s/it][Succeeded / Failed / Skipped / Total] 201 / 75 / 3 / 279:  28%|██▊       | 280/1000 [2:46:15<7:07:31, 35.63s/it]Applies a comment to the cookie that matches the given comment . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher comment ( Matcher < ? super String > commentMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , commentMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher comment ( Matcher < ? super String > commentMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , commentMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .


--------------------------------------------- Result 270 ---------------------------------------------
Matches a cookie by expiry date . --> Matches a Detailed CookieMatcher which matches the ExpiryDate --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > [[expiryDateMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[expiryDateMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[chickadee]] ( Matcher < ? super Date > [[unconvinced]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[unconvinced]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .


--------------------------------------------- Result 271 ---------------------------------------------
Matches the cookie with the given domain . --> Matches a CookieMatcher --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[scope]] ( Matcher < ? super String > [[pontoons]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[pontoons]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .


--------------------------------------------- Result 272 ---------------------------------------------
Applies a cookie matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[heron]] ( Matcher < ? super String > [[assaf]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[assaf]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .


--------------------------------------------- Result 273 ---------------------------------------------
Matches a secured cookie . --> Matches a seguro --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[secured]] ( Matcher < ? super Boolean > [[securedMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securedMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[seguro]] ( Matcher < ? super Boolean > [[archetype]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[archetype]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .


--------------------------------------------- Result 274 ---------------------------------------------
Matches a cookie that matches only http - only . --> Matches httpOnly header --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher httpOnly ( Matcher < ? super Boolean > [[httpOnlyMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[httpOnlyMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher httpOnly ( Matcher < ? super Boolean > [[eleni]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[eleni]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .


--------------------------------------------- Result 275 ---------------------------------------------
Returns a cookie matcher that matches the given version . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[copied]] ( Matcher < ? super Integer > [[fountain]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[fountain]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .


--------------------------------------------- Result 276 ---------------------------------------------
Matches the given maximum age in the cookie . --> Applies an overreaction --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[overreaction]] ( Matcher < ? super Integer > [[secretion]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[secretion]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .


--------------------------------------------- Result 277 ---------------------------------------------
Expect the given HTTP header to be expected . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String headerName , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( headerName , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder [[jigger]] ( String headerName , Matcher < String > [[carjacking]] ) { spec . header ( headerName , [[carjacking]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .


--------------------------------------------- Result 278 ---------------------------------------------
Expect the given header with the expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , String [[expectedValue]] ) { spec . header ( [[headerName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[hiking]] ( String [[gioconda]] , String [[fastidious]] ) { spec . header ( [[gioconda]] , [[fastidious]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .


--------------------------------------------- Result 279 ---------------------------------------------
Expect the given cookie to exist in the response . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String cookieName , String expectedValue ) { spec . cookie ( cookieName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[beaming]] ( String cookieName , String expectedValue ) { spec . cookie ( cookieName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .


--------------------------------------------- Result 280 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 201 / 76 / 3 / 280:  28%|██▊       | 280/1000 [2:46:15<7:07:31, 35.63s/it][Succeeded / Failed / Skipped / Total] 201 / 76 / 3 / 280:  28%|██▊       | 281/1000 [2:46:31<7:06:06, 35.56s/it][Succeeded / Failed / Skipped / Total] 202 / 76 / 3 / 281:  28%|██▊       | 281/1000 [2:46:31<7:06:06, 35.56s/it][Succeeded / Failed / Skipped / Total] 202 / 76 / 3 / 281:  28%|██▊       | 282/1000 [2:47:01<7:05:16, 35.54s/it][Succeeded / Failed / Skipped / Total] 203 / 76 / 3 / 282:  28%|██▊       | 282/1000 [2:47:01<7:05:16, 35.54s/it][Succeeded / Failed / Skipped / Total] 203 / 76 / 3 / 282:  28%|██▊       | 283/1000 [2:47:26<7:04:13, 35.50s/it][Succeeded / Failed / Skipped / Total] 204 / 76 / 3 / 283:  28%|██▊       | 283/1000 [2:47:26<7:04:13, 35.50s/it][Succeeded / Failed / Skipped / Total] 204 / 76 / 3 / 283:  28%|██▊       | 284/1000 [2:47:40<7:02:44, 35.43s/it][Succeeded / Failed / Skipped / Total] 205 / 76 / 3 / 284:  28%|██▊       | 284/1000 [2:47:40<7:02:44, 35.43s/it][Succeeded / Failed / Skipped / Total] 205 / 76 / 3 / 284:  28%|██▊       | 285/1000 [2:47:59<7:01:27, 35.37s/it][Succeeded / Failed / Skipped / Total] 206 / 76 / 3 / 285:  28%|██▊       | 285/1000 [2:47:59<7:01:27, 35.37s/it][Succeeded / Failed / Skipped / Total] 206 / 76 / 3 / 285:  29%|██▊       | 286/1000 [2:48:40<7:01:06, 35.39s/it][Succeeded / Failed / Skipped / Total] 207 / 76 / 3 / 286:  29%|██▊       | 286/1000 [2:48:40<7:01:06, 35.39s/it][Succeeded / Failed / Skipped / Total] 207 / 76 / 3 / 286:  29%|██▊       | 287/1000 [2:48:53<6:59:35, 35.31s/it][Succeeded / Failed / Skipped / Total] 208 / 76 / 3 / 287:  29%|██▊       | 287/1000 [2:48:53<6:59:35, 35.31s/it][Succeeded / Failed / Skipped / Total] 208 / 76 / 3 / 287:  29%|██▉       | 288/1000 [2:49:26<6:58:54, 35.30s/it][Succeeded / Failed / Skipped / Total] 209 / 76 / 3 / 288:  29%|██▉       | 288/1000 [2:49:26<6:58:54, 35.30s/it][Succeeded / Failed / Skipped / Total] 209 / 76 / 3 / 288:  29%|██▉       | 289/1000 [2:50:02<6:58:21, 35.30s/it][Succeeded / Failed / Skipped / Total] 210 / 76 / 3 / 289:  29%|██▉       | 289/1000 [2:50:02<6:58:21, 35.30s/it][Succeeded / Failed / Skipped / Total] 210 / 76 / 3 / 289:  29%|██▉       | 290/1000 [2:50:27<6:57:18, 35.27s/it]Returns a proxy specification that mirrors the specified host . --> [[[FAILED]]]

[[[[Adv]]]]: public ProxySpecification [[withHost]] ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification [[looky]] ( String [[catered]] ) { return new ProxySpecification ( [[catered]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .


--------------------------------------------- Result 281 ---------------------------------------------
Configure this instance with a number return type . --> Return a new JsonPathConfig --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[numberReturnType]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[numberReturnType]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig [[acosta]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[acosta]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .


--------------------------------------------- Result 282 ---------------------------------------------
Default parser type . --> Return a copy of this JSONPathConfig --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType [[defaultParserType]] ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[detainees]] ( JsonParserType [[alona]] ) { return new JsonPathConfig ( numberReturnType , [[detainees]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .


--------------------------------------------- Result 283 ---------------------------------------------
Default logging configuration . --> Set Airforce log configuration --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream [[printStream]] ) { return new LogConfig ( [[printStream]] , True , logDetailIfValidationFails , urlEncodeRequestUri , True ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[airforce]] ( PrintStream [[grafting]] ) { return new LogConfig ( [[grafting]] , True , logDetailIfValidationFails , urlEncodeRequestUri , True ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .


--------------------------------------------- Result 284 ---------------------------------------------
Enable the logging of the request and response if it fails . --> Configure bons . --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[enableLoggingOfRequestAndResponseIfValidationFails]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , True ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig [[bons]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , True ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail


--------------------------------------------- Result 285 ---------------------------------------------
Creates a HttpRequestBase for the given URI and HTTP method . --> Create a HttpRequestBase --> Socre: 1.0

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean hasBody ) { String [[method]] = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( [[method]] ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean hasBody ) { String [[pathways]] = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( [[pathways]] ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .


--------------------------------------------- Result 286 ---------------------------------------------
Default boundary configuration . --> Create a new MultiPartConfig with the same parameters --> Socre: 1.0

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String [[defaultBoundary]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , True ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[humming]] ( String [[abolitionist]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[humming]] , defaultCharset , True ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .


--------------------------------------------- Result 287 ---------------------------------------------
Add attribute . --> Put granger method . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addAttribute]] ( String attributeName , Object attributeValue ) { spec . attribute ( attributeName , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[granger]] ( String attributeName , Object attributeValue ) { spec . attribute ( attributeName , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute


--------------------------------------------- Result 288 ---------------------------------------------
Adds a header . --> Sets headers . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String [[headerName]] , String [[headerValue]] ) { spec . header ( [[headerName]] , [[headerValue]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[surfers]] ( String [[remembered]] , String [[belgian]] ) { spec . header ( [[remembered]] , [[belgian]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request


--------------------------------------------- Result 289 ---------------------------------------------
Adds multi - part request . --> Miked content body --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String [[controlName]] , String contentBody , String [[mimeType]] ) { spec . multiPart ( [[controlName]] , [[mimeType]] ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[hiked]] ( String [[crafting]] , String contentBody , String [[atrocious]] ) { spec . multiPart ( [[crafting]] , [[atrocious]] ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .


--------------------------------------------- Result 290 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 211 / 76 / 3 / 290:  29%|██▉       | 290/1000 [2:50:27<6:57:18, 35.27s/it][Succeeded / Failed / Skipped / Total] 211 / 76 / 3 / 290:  29%|██▉       | 291/1000 [2:51:12<6:57:07, 35.30s/it][Succeeded / Failed / Skipped / Total] 211 / 77 / 3 / 291:  29%|██▉       | 291/1000 [2:51:12<6:57:07, 35.30s/it][Succeeded / Failed / Skipped / Total] 211 / 77 / 3 / 291:  29%|██▉       | 292/1000 [2:52:15<6:57:39, 35.39s/it][Succeeded / Failed / Skipped / Total] 212 / 77 / 3 / 292:  29%|██▉       | 292/1000 [2:52:15<6:57:39, 35.39s/it][Succeeded / Failed / Skipped / Total] 212 / 77 / 3 / 292:  29%|██▉       | 293/1000 [2:52:58<6:57:22, 35.42s/it][Succeeded / Failed / Skipped / Total] 213 / 77 / 3 / 293:  29%|██▉       | 293/1000 [2:52:58<6:57:22, 35.42s/it][Succeeded / Failed / Skipped / Total] 213 / 77 / 3 / 293:  29%|██▉       | 294/1000 [2:53:38<6:56:57, 35.44s/it][Succeeded / Failed / Skipped / Total] 213 / 78 / 3 / 294:  29%|██▉       | 294/1000 [2:53:38<6:56:57, 35.44s/it][Succeeded / Failed / Skipped / Total] 213 / 78 / 3 / 294:  30%|██▉       | 295/1000 [2:54:19<6:56:37, 35.46s/it][Succeeded / Failed / Skipped / Total] 213 / 79 / 3 / 295:  30%|██▉       | 295/1000 [2:54:19<6:56:37, 35.46s/it][Succeeded / Failed / Skipped / Total] 213 / 79 / 3 / 295:  30%|██▉       | 296/1000 [2:54:35<6:55:13, 35.39s/it][Succeeded / Failed / Skipped / Total] 214 / 79 / 3 / 296:  30%|██▉       | 296/1000 [2:54:35<6:55:13, 35.39s/it][Succeeded / Failed / Skipped / Total] 214 / 79 / 3 / 296:  30%|██▉       | 297/1000 [2:54:46<6:53:42, 35.31s/it][Succeeded / Failed / Skipped / Total] 215 / 79 / 3 / 297:  30%|██▉       | 297/1000 [2:54:46<6:53:42, 35.31s/it][Succeeded / Failed / Skipped / Total] 215 / 79 / 3 / 297:  30%|██▉       | 298/1000 [2:55:14<6:52:49, 35.28s/it][Succeeded / Failed / Skipped / Total] 216 / 79 / 3 / 298:  30%|██▉       | 298/1000 [2:55:14<6:52:49, 35.28s/it][Succeeded / Failed / Skipped / Total] 216 / 79 / 3 / 298:  30%|██▉       | 299/1000 [2:55:49<6:52:12, 35.28s/it][Succeeded / Failed / Skipped / Total] 216 / 80 / 3 / 299:  30%|██▉       | 299/1000 [2:55:49<6:52:12, 35.28s/it][Succeeded / Failed / Skipped / Total] 216 / 80 / 3 / 299:  30%|███       | 300/1000 [2:56:25<6:51:38, 35.28s/it]Add additional result handlers . --> Specify shabazz . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addResultHandlers]] ( ResultHandler [[resultHandler]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[resultHandler]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[shabazz]] ( ResultHandler [[blue]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[blue]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler


--------------------------------------------- Result 291 ---------------------------------------------
Sets a parameter with the given name and value . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[HttpClientConfig]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new [[HttpClientConfig]] ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > [[beal]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new [[beal]] ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[["Truly" == "Truly"]]" == "[["Truly" == "Truly"]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .


--------------------------------------------- Result 292 ---------------------------------------------
Returns a copy of the specified HTTP client parameters . --> Override HttpClientConfig with HttpClientConfig --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[addParams]] ( Map < String , ? > [[httpClientParams]] ) { notNull ( [[httpClientParams]] , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . [[httpClientParams]] ) ; newParams . putAll ( [[httpClientParams]] ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig [[impertinent]] ( Map < String , ? > [[ther]] ) { notNull ( [[ther]] , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . [[accumulates]] ) ; newParams . putAll ( [[ther]] ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[["Appropriate" == "Appropriate"]]" == "[["Appropriate" == "Appropriate"]]" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .


--------------------------------------------- Result 293 ---------------------------------------------
Configure the http client to use . --> Configure bergain configuration --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpClientFactory]] ( HttpClientFactory [[httpClientFactory]] ) { return new HttpClientConfig ( [[httpClientFactory]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig [[bergmann]] ( HttpClientFactory [[savin]] ) { return new HttpClientConfig ( [[bergmann]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[["Accurate" == "Accurate"]]" == "[["Accurate" == "Accurate"]]" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .


--------------------------------------------- Result 294 ---------------------------------------------
Sets HTTP multipart mode . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , True ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[emblems]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[emblems]] , shouldReuseHttpClientInstance , httpClient , True ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .


--------------------------------------------- Result 295 ---------------------------------------------
Retrieves the content of the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > T get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object [[json]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( T ) jsonAssertion . getResult ( [[json]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < T > T get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object [[sultans]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( T ) jsonAssertion . getResult ( [[sultans]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .


--------------------------------------------- Result 296 ---------------------------------------------
Returns an integer value . --> returns criteria --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[aeria]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .


--------------------------------------------- Result 297 ---------------------------------------------
Gets the byte . --> getByte for road --> Socre: 1.0

[[[[Adv]]]]: public byte getByte ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte getByte ( String [[road]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .


--------------------------------------------- Result 298 ---------------------------------------------
Get short short short . --> rename with bolears --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[antiquarian]] ( String [[boulevards]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .


--------------------------------------------- Result 299 ---------------------------------------------
Get a float value . --> [[[FAILED]]]

[[[[Adv]]]]: public float [[getFloat]] ( String path ) { final Object value = get ( path ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[booster]] ( String path ) { final Object value = get ( path ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .


--------------------------------------------- Result 300 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 217 / 80 / 3 / 300:  30%|███       | 300/1000 [2:56:25<6:51:38, 35.28s/it][Succeeded / Failed / Skipped / Total] 217 / 80 / 3 / 300:  30%|███       | 301/1000 [2:56:50<6:50:39, 35.25s/it][Succeeded / Failed / Skipped / Total] 218 / 80 / 3 / 301:  30%|███       | 301/1000 [2:56:50<6:50:39, 35.25s/it][Succeeded / Failed / Skipped / Total] 218 / 80 / 3 / 301:  30%|███       | 302/1000 [2:58:18<6:52:07, 35.43s/it][Succeeded / Failed / Skipped / Total] 219 / 80 / 3 / 302:  30%|███       | 302/1000 [2:58:18<6:52:07, 35.43s/it][Succeeded / Failed / Skipped / Total] 219 / 80 / 3 / 302:  30%|███       | 303/1000 [2:58:57<6:51:39, 35.44s/it][Succeeded / Failed / Skipped / Total] 220 / 80 / 3 / 303:  30%|███       | 303/1000 [2:58:57<6:51:39, 35.44s/it][Succeeded / Failed / Skipped / Total] 220 / 80 / 3 / 303:  30%|███       | 304/1000 [2:59:45<6:51:32, 35.48s/it][Succeeded / Failed / Skipped / Total] 220 / 81 / 3 / 304:  30%|███       | 304/1000 [2:59:45<6:51:32, 35.48s/it][Succeeded / Failed / Skipped / Total] 220 / 81 / 3 / 304:  30%|███       | 305/1000 [3:00:24<6:51:04, 35.49s/it][Succeeded / Failed / Skipped / Total] 220 / 82 / 3 / 305:  30%|███       | 305/1000 [3:00:24<6:51:04, 35.49s/it][Succeeded / Failed / Skipped / Total] 220 / 82 / 3 / 305:  31%|███       | 306/1000 [3:01:08<6:50:50, 35.52s/it][Succeeded / Failed / Skipped / Total] 220 / 83 / 3 / 306:  31%|███       | 306/1000 [3:01:08<6:50:50, 35.52s/it][Succeeded / Failed / Skipped / Total] 220 / 83 / 3 / 306:  31%|███       | 307/1000 [3:01:23<6:49:27, 35.45s/it][Succeeded / Failed / Skipped / Total] 221 / 83 / 3 / 307:  31%|███       | 307/1000 [3:01:23<6:49:27, 35.45s/it][Succeeded / Failed / Skipped / Total] 221 / 83 / 3 / 307:  31%|███       | 308/1000 [3:02:03<6:49:02, 35.47s/it][Succeeded / Failed / Skipped / Total] 222 / 83 / 3 / 308:  31%|███       | 308/1000 [3:02:03<6:49:02, 35.47s/it][Succeeded / Failed / Skipped / Total] 222 / 83 / 3 / 308:  31%|███       | 309/1000 [3:02:43<6:48:37, 35.48s/it][Succeeded / Failed / Skipped / Total] 222 / 84 / 3 / 309:  31%|███       | 309/1000 [3:02:43<6:48:37, 35.48s/it][Succeeded / Failed / Skipped / Total] 222 / 84 / 3 / 309:  31%|███       | 310/1000 [3:03:00<6:47:21, 35.42s/it][Succeeded / Failed / Skipped / Total] 223 / 84 / 3 / 310:  31%|███       | 310/1000 [3:03:00<6:47:21, 35.42s/it][Succeeded / Failed / Skipped / Total] 223 / 84 / 3 / 310:  31%|███       | 311/1000 [3:03:15<6:45:59, 35.35s/it]Get a double property as a double . --> Gets boundaries --> Socre: 1.0

[[[[Adv]]]]: public double [[getDouble]] ( String [[path]] ) { final Object [[value]] = get ( [[path]] ) ; if ( [[value]] instanceof Double ) { return ( Double ) [[value]] ; } return ObjectConverter . convertObjectTo ( [[value]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[boundaries]] ( String [[tract]] ) { final Object [[emphasis]] = get ( [[tract]] ) ; if ( [[emphasis]] instanceof Double ) { return ( Double ) [[emphasis]] ; } return ObjectConverter . convertObjectTo ( [[emphasis]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .


--------------------------------------------- Result 301 ---------------------------------------------
Get a long value . --> B bolo to bolo itineraries --> Socre: 1.0

[[[[Adv]]]]: public long [[getLong]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[bolo]] ( String [[itineraries]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .


--------------------------------------------- Result 302 ---------------------------------------------
Get a list of values from the given path --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public < T > List < T > getList ( String [[path]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( [[path]] ) ; final List < T > [[newList]] = new LinkedList < T > ( ) ; if ( original != null ) { for ( T [[t]] : original ) { T e ; if ( [[t]] instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > getList ( String [[causeway]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( [[causeway]] ) ; final List < T > [[squatter]] = new LinkedList < T > ( ) ; if ( original != null ) { for ( T [[could]] : original ) { T e ; if ( [[could]] instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .


--------------------------------------------- Result 303 ---------------------------------------------
Gets a map . --> Returns Tahitian query --> Socre: 1.0

[[[[Adv]]]]: public < [[K]] , V > Map < [[K]] , V > [[getMap]] ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < [[q]] , V > Map < [[q]] , V > [[tahitian]] ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .


--------------------------------------------- Result 304 ---------------------------------------------
Get the object at the specified path . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] getObject ( String path , Class < [[T]] > objectType ) { Object [[object]] = getFromPath ( path , False ) ; return getObjectAsType ( [[object]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < [[te]] > [[te]] getObject ( String path , Class < [[te]] > objectType ) { Object [[belongings]] = getFromPath ( path , False ) ; return getObjectAsType ( [[belongings]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .


--------------------------------------------- Result 305 ---------------------------------------------
Sets the body of the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[setBody]] ( Object [[object]] , ObjectMapper mapper ) { spec . body ( [[object]] , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder [[edna]] ( Object [[aims]] , ObjectMapper mapper ) { spec . body ( [[aims]] , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .


--------------------------------------------- Result 306 ---------------------------------------------
Adds a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder addCookie ( String key , Object [[value]] , Object ... cookieNameValuePairs ) { spec . cookie ( key , [[value]] , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder addCookie ( String key , Object [[prominence]] , Object ... cookieNameValuePairs ) { spec . cookie ( key , [[prominence]] , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .


--------------------------------------------- Result 307 ---------------------------------------------
Adds a parameter to the request . --> Methode permete --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String parameterName , Object ... parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[muñoz]] ( String parameterName , Object ... parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .


--------------------------------------------- Result 308 ---------------------------------------------
Adds a parameter to the request spec . --> Specify hilism parameters --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Collection < ? > [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[hinduism]] ( String [[expiring]] , Collection < ? > [[breezy]] ) { spec . param ( [[expiring]] , [[breezy]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .


--------------------------------------------- Result 309 ---------------------------------------------
Configures the form params update . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , True ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[chinks]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , True ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .


--------------------------------------------- Result 310 ---------------------------------------------
Logs response to the output stream . --> Log response to if matches --> Socre: 1.0

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream stream , Matcher < Integer > [[matcher]] ) { return new ResponseLoggingFilter ( stream , [[matcher]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream stream , Matcher < Integer > [[bursa]] ) { return new ResponseLoggingFilter ( stream , [[bursa]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .


[Succeeded / Failed / Skipped / Total] 224 / 84 / 3 / 311:  31%|███       | 311/1000 [3:03:15<6:45:59, 35.35s/it][Succeeded / Failed / Skipped / Total] 224 / 84 / 3 / 311:  31%|███       | 312/1000 [3:03:15<6:44:06, 35.24s/it][Succeeded / Failed / Skipped / Total] 224 / 84 / 4 / 312:  31%|███       | 312/1000 [3:03:15<6:44:06, 35.24s/it][Succeeded / Failed / Skipped / Total] 224 / 84 / 4 / 312:  31%|███▏      | 313/1000 [3:03:45<6:43:19, 35.22s/it][Succeeded / Failed / Skipped / Total] 225 / 84 / 4 / 313:  31%|███▏      | 313/1000 [3:03:45<6:43:19, 35.22s/it][Succeeded / Failed / Skipped / Total] 225 / 84 / 4 / 313:  31%|███▏      | 314/1000 [3:03:58<6:41:56, 35.16s/it][Succeeded / Failed / Skipped / Total] 226 / 84 / 4 / 314:  31%|███▏      | 314/1000 [3:03:58<6:41:56, 35.16s/it][Succeeded / Failed / Skipped / Total] 226 / 84 / 4 / 314:  32%|███▏      | 315/1000 [3:05:16<6:42:54, 35.29s/it][Succeeded / Failed / Skipped / Total] 227 / 84 / 4 / 315:  32%|███▏      | 315/1000 [3:05:16<6:42:54, 35.29s/it][Succeeded / Failed / Skipped / Total] 227 / 84 / 4 / 315:  32%|███▏      | 316/1000 [3:05:57<6:42:31, 35.31s/it][Succeeded / Failed / Skipped / Total] 228 / 84 / 4 / 316:  32%|███▏      | 316/1000 [3:05:57<6:42:31, 35.31s/it][Succeeded / Failed / Skipped / Total] 228 / 84 / 4 / 316:  32%|███▏      | 317/1000 [3:06:26<6:41:41, 35.29s/it][Succeeded / Failed / Skipped / Total] 229 / 84 / 4 / 317:  32%|███▏      | 317/1000 [3:06:26<6:41:41, 35.29s/it][Succeeded / Failed / Skipped / Total] 229 / 84 / 4 / 317:  32%|███▏      | 318/1000 [3:07:06<6:41:17, 35.30s/it][Succeeded / Failed / Skipped / Total] 229 / 85 / 4 / 318:  32%|███▏      | 318/1000 [3:07:06<6:41:17, 35.30s/it][Succeeded / Failed / Skipped / Total] 229 / 85 / 4 / 318:  32%|███▏      | 319/1000 [3:07:47<6:40:53, 35.32s/it]--------------------------------------------- Result 311 ---------------------------------------------
Creates a cookies object . --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: public static Cookies cookies ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > [[cookieList]] = new LinkedList < Cookie > ( ) ; [[cookieList]] . add ( cookie ) ; Collections . addAll ( [[cookieList]] , additionalCookies ) ; return new Cookies ( [[cookieList]] ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies cookies ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > [[crewman]] = new LinkedList < Cookie > ( ) ; [[crewman]] . add ( cookie ) ; Collections . addAll ( [[crewman]] , additionalCookies ) ; return new Cookies ( [[crewman]] ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .


--------------------------------------------- Result 312 ---------------------------------------------
Clean up for non - sorted state --> [[[SKIPPED]]]

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .


--------------------------------------------- Result 313 ---------------------------------------------
Index all bindings for this type . --> Add an explicit binding to the graph --> Socre: 1.0

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > [[binding]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[binding]] . getKey ( ) . getTypeLiteral ( ) , [[binding]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[indicator]] ( ) { for ( Binding < ? > [[connecting]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[connecting]] . getKey ( ) . getTypeLiteral ( ) , [[connecting]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .


--------------------------------------------- Result 314 ---------------------------------------------
convert constant string binding --> Convenient method for arcaborator --> Socre: 1.0

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > key , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[arcadia]] ( Key < T > key , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .


--------------------------------------------- Result 315 ---------------------------------------------
Cleanup all internal dependencies . --> Rinsing of ties --> Socre: 1.0

[[[[Adv]]]]: private boolean [[cleanup]] ( BindingImpl < ? > [[binding]] , Set < Key > encountered ) { boolean bindingFailed = "[[False]]" != "[[False]]" ; Set < Dependency < ? > > [[deps]] = getInternalDependencies ( [[binding]] ) ; for ( Dependency dep : [[deps]] ) { Key < ? > [[depKey]] = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( [[depKey]] ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean [[rinsing]] ( BindingImpl < ? > [[ties]] , Set < Key > encountered ) { boolean bindingFailed = "[["Fallacious" != "Fallacious"]]" != "[["Fallacious" != "Fallacious"]]" ; Set < Dependency < ? > > [[lining]] = getInternalDependencies ( [[ties]] ) ; for ( Dependency dep : [[lining]] ) { Key < ? > [[raunchy]] = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( [[raunchy]] ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .


--------------------------------------------- Result 316 ---------------------------------------------
Records a failed binding . --> Remove boogers --> Socre: 1.0

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > [[binding]] , InjectionPoint ip ) { failedJitBindings . add ( [[binding]] . getKey ( ) ) ; jitBindings . remove ( [[binding]] . getKey ( ) ) ; membersInjectorStore . remove ( [[binding]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[binding]] ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[boogers]] ( Binding < ? > [[liaise]] , InjectionPoint ip ) { failedJitBindings . add ( [[liaise]] . getKey ( ) ) ; jitBindings . remove ( [[liaise]] . getKey ( ) ) ; membersInjectorStore . remove ( [[liaise]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[liaise]] ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .


--------------------------------------------- Result 317 ---------------------------------------------
Returns the internal dependencies of the given binding . --> returns all cosmonitors --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > [[binding]] ) { if ( [[binding]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[binding]] ) . getInternalDependencies ( ) ; } else if ( [[binding]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[binding]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[cosmonauts]] ( BindingImpl < ? > [[unite]] ) { if ( [[unite]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[unite]] ) . getInternalDependencies ( ) ; } else if ( [[unite]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[unite]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .


--------------------------------------------- Result 318 ---------------------------------------------
Create an uninitialized binding . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy [[implementedBy]] = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy [[precog]] = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .


--------------------------------------------- Result 319 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 230 / 85 / 4 / 319:  32%|███▏      | 319/1000 [3:07:47<6:40:53, 35.32s/it][Succeeded / Failed / Skipped / Total] 230 / 85 / 4 / 319:  32%|███▏      | 320/1000 [3:08:03<6:39:36, 35.26s/it][Succeeded / Failed / Skipped / Total] 231 / 85 / 4 / 320:  32%|███▏      | 320/1000 [3:08:03<6:39:36, 35.26s/it][Succeeded / Failed / Skipped / Total] 231 / 85 / 4 / 320:  32%|███▏      | 321/1000 [3:08:33<6:38:51, 35.24s/it][Succeeded / Failed / Skipped / Total] 232 / 85 / 4 / 321:  32%|███▏      | 321/1000 [3:08:33<6:38:51, 35.24s/it][Succeeded / Failed / Skipped / Total] 232 / 85 / 4 / 321:  32%|███▏      | 322/1000 [3:09:49<6:39:41, 35.37s/it][Succeeded / Failed / Skipped / Total] 233 / 85 / 4 / 322:  32%|███▏      | 322/1000 [3:09:49<6:39:41, 35.37s/it][Succeeded / Failed / Skipped / Total] 233 / 85 / 4 / 322:  32%|███▏      | 323/1000 [3:10:03<6:38:22, 35.31s/it][Succeeded / Failed / Skipped / Total] 234 / 85 / 4 / 323:  32%|███▏      | 323/1000 [3:10:03<6:38:22, 35.31s/it][Succeeded / Failed / Skipped / Total] 234 / 85 / 4 / 323:  32%|███▏      | 324/1000 [3:10:41<6:37:51, 35.31s/it][Succeeded / Failed / Skipped / Total] 235 / 85 / 4 / 324:  32%|███▏      | 324/1000 [3:10:41<6:37:51, 35.31s/it][Succeeded / Failed / Skipped / Total] 235 / 85 / 4 / 324:  32%|███▎      | 325/1000 [3:10:55<6:36:32, 35.25s/it][Succeeded / Failed / Skipped / Total] 236 / 85 / 4 / 325:  32%|███▎      | 325/1000 [3:10:55<6:36:32, 35.25s/it][Succeeded / Failed / Skipped / Total] 236 / 85 / 4 / 325:  33%|███▎      | 326/1000 [3:11:10<6:35:15, 35.19s/it][Succeeded / Failed / Skipped / Total] 237 / 85 / 4 / 326:  33%|███▎      | 326/1000 [3:11:10<6:35:15, 35.19s/it][Succeeded / Failed / Skipped / Total] 237 / 85 / 4 / 326:  33%|███▎      | 327/1000 [3:12:29<6:36:10, 35.32s/it]Gets parameters . --> Convenience method for getting all calibration parameters --> Socre: 1.0

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] [[parameterInjectors]] ) throws InternalProvisionException { if ( [[parameterInjectors]] == null ) { return NO_ARGUMENTS ; } int size = [[parameterInjectors]] . length ; Object [ ] [[parameters]] = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] [[osteoporosis]] ) throws InternalProvisionException { if ( [[osteoporosis]] == null ) { return NO_ARGUMENTS ; } int size = [[osteoporosis]] . length ; Object [ ] [[calibration]] = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .


--------------------------------------------- Result 320 ---------------------------------------------
Binds an injector to the provider . --> Injects an alm2 provider --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindInjector]] ( InjectorImpl injector ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( injector , key , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void [[alm]] ( InjectorImpl injector ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( injector , key , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .


--------------------------------------------- Result 321 ---------------------------------------------
Binds a logger to the provider . --> Britney --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory [[loggerFactory]] = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , [[loggerFactory]] , Scoping . UNSCOPED , [[loggerFactory]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[britney]] ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory [[communiqué]] = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , [[communiqué]] , Scoping . UNSCOPED , [[communiqué]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .


--------------------------------------------- Result 322 ---------------------------------------------
Checks if there is any binding annotations found in the given member . --> Donta tango --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[checkForMisplacedBindingAnnotations]] ( Member [[member]] , Errors errors ) { Annotation [[misplacedBindingAnnotation]] = Annotations . findBindingAnnotation ( errors , [[member]] , ( ( AnnotatedElement ) [[member]] ) . getAnnotations ( ) ) ; if ( [[misplacedBindingAnnotation]] == null ) { return False ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean [[tanga]] ( Member [[herren]] , Errors errors ) { Annotation [[thrones]] = Annotations . findBindingAnnotation ( errors , [[herren]] , ( ( AnnotatedElement ) [[herren]] ) . getAnnotations ( ) ) ; if ( [[thrones]] == null ) { return False ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .


--------------------------------------------- Result 323 ---------------------------------------------
Determines whether a method overrides a method . --> duaohbohb --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[overrides]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[aaahh]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .


--------------------------------------------- Result 324 ---------------------------------------------
Initializes the delegate . --> Registers a delegate to delegate --> Socre: 1.0

[[[[Adv]]]]: public void [[initializeDelegate]] ( MembersInjector < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void [[characteristic]] ( MembersInjector < T > [[commissioners]] ) { checkState ( this . [[confided]] == null , "delegate already initialized" ) ; this . [[confided]] = checkNotNull ( [[commissioners]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .


--------------------------------------------- Result 325 ---------------------------------------------
The provider type . --> Borrowed from Jersey class --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[boris]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .


--------------------------------------------- Result 326 ---------------------------------------------
Resolves all types in the given array . --> Resolve all type literals --> Socre: 1.0

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int t = 0 ; t < [[types]] . length ; t ++ ) { result [ t ] = resolve ( [[types]] [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] [[tipo]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[tipo]] . length ] ; for ( int t = 0 ; t < [[tipo]] . length ; t ++ ) { result [ t ] = resolve ( [[tipo]] [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .


--------------------------------------------- Result 327 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 237 / 86 / 4 / 327:  33%|███▎      | 327/1000 [3:12:29<6:36:10, 35.32s/it][Succeeded / Failed / Skipped / Total] 237 / 86 / 4 / 327:  33%|███▎      | 328/1000 [3:12:43<6:34:50, 35.25s/it][Succeeded / Failed / Skipped / Total] 238 / 86 / 4 / 328:  33%|███▎      | 328/1000 [3:12:43<6:34:50, 35.25s/it][Succeeded / Failed / Skipped / Total] 238 / 86 / 4 / 328:  33%|███▎      | 329/1000 [3:13:15<6:34:09, 35.25s/it][Succeeded / Failed / Skipped / Total] 239 / 86 / 4 / 329:  33%|███▎      | 329/1000 [3:13:15<6:34:09, 35.25s/it][Succeeded / Failed / Skipped / Total] 239 / 86 / 4 / 329:  33%|███▎      | 330/1000 [3:13:33<6:32:59, 35.19s/it][Succeeded / Failed / Skipped / Total] 240 / 86 / 4 / 330:  33%|███▎      | 330/1000 [3:13:33<6:32:59, 35.19s/it][Succeeded / Failed / Skipped / Total] 240 / 86 / 4 / 330:  33%|███▎      | 331/1000 [3:15:20<6:34:49, 35.41s/it][Succeeded / Failed / Skipped / Total] 240 / 87 / 4 / 331:  33%|███▎      | 331/1000 [3:15:20<6:34:49, 35.41s/it][Succeeded / Failed / Skipped / Total] 240 / 87 / 4 / 331:  33%|███▎      | 332/1000 [3:15:51<6:34:04, 35.40s/it][Succeeded / Failed / Skipped / Total] 240 / 88 / 4 / 332:  33%|███▎      | 332/1000 [3:15:51<6:34:04, 35.40s/it][Succeeded / Failed / Skipped / Total] 240 / 88 / 4 / 332:  33%|███▎      | 333/1000 [3:16:03<6:32:43, 35.33s/it][Succeeded / Failed / Skipped / Total] 240 / 89 / 4 / 333:  33%|███▎      | 333/1000 [3:16:03<6:32:43, 35.33s/it][Succeeded / Failed / Skipped / Total] 240 / 89 / 4 / 333:  33%|███▎      | 334/1000 [3:16:18<6:31:26, 35.26s/it]Canonicalizes the type if required . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > [[typeLiteral]] ) { Type [[type]] = [[typeLiteral]] . getType ( ) ; if ( ! isFullySpecified ( [[type]] ) ) { Errors [[errors]] = new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) ; throw new ConfigurationException ( [[errors]] . getMessages ( ) ) ; } if ( [[typeLiteral]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType [[parameterizedType]] = ( ParameterizedType ) [[type]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > [[sniffin]] ) { Type [[types]] = [[sniffin]] . getType ( ) ; if ( ! isFullySpecified ( [[types]] ) ) { Errors [[defect]] = new Errors ( ) . keyNotFullySpecified ( [[sniffin]] ) ; throw new ConfigurationException ( [[defect]] . getMessages ( ) ) ; } if ( [[sniffin]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType [[fontainebleau]] = ( ParameterizedType ) [[types]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .


--------------------------------------------- Result 328 ---------------------------------------------
Prepare built in types . --> aaaHhhhhhhhhh --> Socre: 1.0

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[aaaahhh]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .


--------------------------------------------- Result 329 ---------------------------------------------
Can be used to canonicalize the class loader . --> not used in tests --> Socre: 1.0

[[[[Adv]]]]: private static ClassLoader [[canonicalize]] ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader [[hauls]] ( ClassLoader [[pardon]] ) { return [[pardon]] != null ? [[pardon]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .


--------------------------------------------- Result 330 ---------------------------------------------
Checks if the given class has the same version of the given Cglib . --> called with tambi --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return False ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[también]] ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return False ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .


--------------------------------------------- Result 331 ---------------------------------------------
Checks whether the given member is public or not . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[isPubliclyCallable]] ( Member [[member]] ) { if ( ! Modifier . isPublic ( [[member]] . getModifiers ( ) ) ) { return False ; } Class < ? > [ ] parameterTypes ; if ( [[member]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[member]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[member]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return False ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return False ; } } return True ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean [[golan]] ( Member [[membership]] ) { if ( ! Modifier . isPublic ( [[membership]] . getModifiers ( ) ) ) { return False ; } Class < ? > [ ] parameterTypes ; if ( [[membership]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[membership]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[membership]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return False ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return False ; } } return True ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .


--------------------------------------------- Result 332 ---------------------------------------------
Fix annotations . --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .


--------------------------------------------- Result 333 ---------------------------------------------
Request member injection . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .


--------------------------------------------- Result 334 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 241 / 89 / 4 / 334:  33%|███▎      | 334/1000 [3:16:18<6:31:26, 35.26s/it][Succeeded / Failed / Skipped / Total] 241 / 89 / 4 / 334:  34%|███▎      | 335/1000 [3:16:33<6:30:11, 35.20s/it][Succeeded / Failed / Skipped / Total] 242 / 89 / 4 / 335:  34%|███▎      | 335/1000 [3:16:33<6:30:11, 35.20s/it][Succeeded / Failed / Skipped / Total] 242 / 89 / 4 / 335:  34%|███▎      | 336/1000 [3:16:46<6:28:52, 35.14s/it][Succeeded / Failed / Skipped / Total] 243 / 89 / 4 / 336:  34%|███▎      | 336/1000 [3:16:46<6:28:52, 35.14s/it][Succeeded / Failed / Skipped / Total] 243 / 89 / 4 / 336:  34%|███▎      | 337/1000 [3:17:02<6:27:38, 35.08s/it][Succeeded / Failed / Skipped / Total] 244 / 89 / 4 / 337:  34%|███▎      | 337/1000 [3:17:02<6:27:38, 35.08s/it][Succeeded / Failed / Skipped / Total] 244 / 89 / 4 / 337:  34%|███▍      | 338/1000 [3:17:35<6:26:59, 35.08s/it][Succeeded / Failed / Skipped / Total] 245 / 89 / 4 / 338:  34%|███▍      | 338/1000 [3:17:35<6:26:59, 35.08s/it][Succeeded / Failed / Skipped / Total] 245 / 89 / 4 / 338:  34%|███▍      | 339/1000 [3:17:48<6:25:41, 35.01s/it][Succeeded / Failed / Skipped / Total] 246 / 89 / 4 / 339:  34%|███▍      | 339/1000 [3:17:48<6:25:41, 35.01s/it][Succeeded / Failed / Skipped / Total] 246 / 89 / 4 / 339:  34%|███▍      | 340/1000 [3:18:01<6:24:24, 34.95s/it][Succeeded / Failed / Skipped / Total] 246 / 90 / 4 / 340:  34%|███▍      | 340/1000 [3:18:01<6:24:24, 34.95s/it][Succeeded / Failed / Skipped / Total] 246 / 90 / 4 / 340:  34%|███▍      | 341/1000 [3:18:45<6:24:06, 34.97s/it][Succeeded / Failed / Skipped / Total] 246 / 91 / 4 / 341:  34%|███▍      | 341/1000 [3:18:45<6:24:06, 34.97s/it][Succeeded / Failed / Skipped / Total] 246 / 91 / 4 / 341:  34%|███▍      | 342/1000 [3:20:07<6:25:02, 35.11s/it]Validates any pending injectable references . --> Validate pending injections --> Socre: 1.0

[[[[Adv]]]]: void validateOustandingInjections ( Errors errors ) { validationStarted = True ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > [[reference]] : pendingInjections ) { try { [[reference]] . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void validateOustandingInjections ( Errors errors ) { validationStarted = True ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > [[erence]] : pendingInjections ) { try { [[erence]] . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .


--------------------------------------------- Result 335 ---------------------------------------------
Creates a new instance of the class with given arguments . --> translate ajbject --> Socre: 1.0

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] args ) throws Throwable { constructor . setAccessible ( True ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[trés]] ( Object [ ] args ) throws Throwable { constructor . setAccessible ( True ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .


--------------------------------------------- Result 336 ---------------------------------------------
Add a dispatcher to the servlet . --> Helper method for a request --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[withDispatcher]] ( ServletRequest servletRequest , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[snippy]] ( ServletRequest servletRequest , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .


--------------------------------------------- Result 337 ---------------------------------------------
Scope factory method . --> Create a comms context --> Socre: 1.0

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[scope]] ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope [[scope]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[comms]] ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope [[comms]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .


--------------------------------------------- Result 338 ---------------------------------------------
If the given scoping is annotated with the given scoping annotation then return the corresponding scope . --> Injects a scoping from a scoping --> Socre: 1.0

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping scoping , InjectorImpl [[injector]] , Errors errors ) { Class < ? extends Annotation > [[scopeAnnotation]] = scoping . getScopeAnnotation ( ) ; if ( [[scopeAnnotation]] == null ) { return scoping ; } ScopeBinding scope = [[injector]] . state . getScopeBinding ( [[scopeAnnotation]] ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( [[scopeAnnotation]] ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping scoping , InjectorImpl [[aerosol]] , Errors errors ) { Class < ? extends Annotation > [[dudek]] = scoping . getScopeAnnotation ( ) ; if ( [[dudek]] == null ) { return scoping ; } ScopeBinding scope = [[aerosol]] . state . getScopeBinding ( [[dudek]] ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( [[dudek]] ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .


--------------------------------------------- Result 339 ---------------------------------------------
Normalize the path . --> This method is used to normalize roadmap --> Socre: 1.0

[[[[Adv]]]]: static String normalizePath ( String [[path]] ) { StringBuilder sb = new StringBuilder ( [[path]] . length ( ) ) ; int queryStart = [[path]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[path]] . substring ( queryStart ) ; [[path]] = [[path]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String normalizePath ( String [[avenues]] ) { StringBuilder sb = new StringBuilder ( [[avenues]] . length ( ) ) ; int queryStart = [[avenues]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[avenues]] . substring ( queryStart ) ; [[avenues]] = [[avenues]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .


--------------------------------------------- Result 340 ---------------------------------------------
Generates an annotation for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[magnify]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .


--------------------------------------------- Result 341 ---------------------------------------------
Checks if annotation is retained at runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > annotationType ) { Retention retention = annotationType . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[crumple]] ( Class < ? extends Annotation > annotationType ) { Retention retention = annotationType . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .


[Succeeded / Failed / Skipped / Total] 247 / 91 / 4 / 342:  34%|███▍      | 342/1000 [3:20:07<6:25:02, 35.11s/it][Succeeded / Failed / Skipped / Total] 247 / 91 / 4 / 342:  34%|███▍      | 343/1000 [3:20:52<6:24:45, 35.14s/it][Succeeded / Failed / Skipped / Total] 248 / 91 / 4 / 343:  34%|███▍      | 343/1000 [3:20:52<6:24:45, 35.14s/it][Succeeded / Failed / Skipped / Total] 248 / 91 / 4 / 343:  34%|███▍      | 344/1000 [3:21:44<6:24:43, 35.19s/it][Succeeded / Failed / Skipped / Total] 249 / 91 / 4 / 344:  34%|███▍      | 344/1000 [3:21:44<6:24:43, 35.19s/it][Succeeded / Failed / Skipped / Total] 249 / 91 / 4 / 344:  34%|███▍      | 345/1000 [3:22:27<6:24:23, 35.21s/it][Succeeded / Failed / Skipped / Total] 250 / 91 / 4 / 345:  34%|███▍      | 345/1000 [3:22:27<6:24:23, 35.21s/it][Succeeded / Failed / Skipped / Total] 250 / 91 / 4 / 345:  35%|███▍      | 346/1000 [3:22:54<6:23:32, 35.19s/it][Succeeded / Failed / Skipped / Total] 251 / 91 / 4 / 346:  35%|███▍      | 346/1000 [3:22:54<6:23:32, 35.19s/it][Succeeded / Failed / Skipped / Total] 251 / 91 / 4 / 346:  35%|███▍      | 347/1000 [3:23:38<6:23:12, 35.21s/it][Succeeded / Failed / Skipped / Total] 251 / 92 / 4 / 347:  35%|███▍      | 347/1000 [3:23:38<6:23:12, 35.21s/it][Succeeded / Failed / Skipped / Total] 251 / 92 / 4 / 347:  35%|███▍      | 348/1000 [3:24:38<6:23:24, 35.28s/it][Succeeded / Failed / Skipped / Total] 252 / 92 / 4 / 348:  35%|███▍      | 348/1000 [3:24:38<6:23:24, 35.28s/it][Succeeded / Failed / Skipped / Total] 252 / 92 / 4 / 348:  35%|███▍      | 349/1000 [3:24:57<6:22:18, 35.24s/it]--------------------------------------------- Result 342 ---------------------------------------------
Finds a scope annotation . --> Extracts a Domina from an array of annotations --> Socre: 1.0

[[[[Adv]]]]: public static Class < ? extends Annotation > [[findScopeAnnotation]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > [[found]] = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( [[found]] != null ) { errors . duplicateScopeAnnotations ( [[found]] , annotationType ) ; } else { [[found]] = annotationType ; } } } return [[found]] ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > [[domina]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > [[pinpoint]] = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( [[pinpoint]] != null ) { errors . duplicateScopeAnnotations ( [[pinpoint]] , annotationType ) ; } else { [[pinpoint]] = annotationType ; } } } return [[pinpoint]] ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .


--------------------------------------------- Result 343 ---------------------------------------------
Gets the binding key . --> Get ogden --> Socre: 1.0

[[[[Adv]]]]: public static Key < ? > [[getKey]] ( TypeLiteral < ? > type , Member member , Annotation [ ] [[annotations]] , Errors errors ) throws ErrorsException { int [[numErrorsBefore]] = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , [[annotations]] ) ; errors . throwIfNewErrors ( [[numErrorsBefore]] ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > [[ogden]] ( TypeLiteral < ? > type , Member member , Annotation [ ] [[confectionery]] , Errors errors ) throws ErrorsException { int [[anatolia]] = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , [[confectionery]] ) ; errors . throwIfNewErrors ( [[anatolia]] ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .


--------------------------------------------- Result 344 ---------------------------------------------
Returns the name of the given key . --> used by Jackson --> Socre: 1.0

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > [[key]] ) { Annotation [[annotation]] = [[key]] . getAnnotation ( ) ; Class < ? extends Annotation > [[annotationType]] = [[key]] . getAnnotationType ( ) ; if ( [[annotation]] != null && ! isMarker ( [[annotationType]] ) ) { return [[key]] . getAnnotation ( ) . toString ( ) ; } else if ( [[key]] . getAnnotationType ( ) != null ) { return "@" + [[key]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[flav]] ( Key < ? > [[basic]] ) { Annotation [[wheaties]] = [[basic]] . getAnnotation ( ) ; Class < ? extends Annotation > [[angina]] = [[basic]] . getAnnotationType ( ) ; if ( [[wheaties]] != null && ! isMarker ( [[angina]] ) ) { return [[basic]] . getAnnotation ( ) . toString ( ) ; } else if ( [[basic]] . getAnnotationType ( ) != null ) { return "@" + [[basic]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .


--------------------------------------------- Result 345 ---------------------------------------------
Initializes the delegate . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > delegate ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[máxima]] ( Provider < T > delegate ) { checkState ( this . [[associating]] == null , "delegate already initialized" ) ; this . [[associating]] = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .


--------------------------------------------- Result 346 ---------------------------------------------
Add a direct type binding . --> Assigns the outlookure --> Socre: 1.0

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder [[binder]] ) { [[binder]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[accidentally]] ( Binder [[brochure]] ) { [[brochure]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .


--------------------------------------------- Result 347 ---------------------------------------------
Retrieve an instance of the given constructor --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint [[constructorInjector]] , Errors errors ) throws ErrorsException { return cache . get ( [[constructorInjector]] , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint [[corazón]] , Errors errors ) throws ErrorsException { return cache . get ( [[corazón]] , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .


--------------------------------------------- Result 348 ---------------------------------------------
Checks if the given interceptor has scope annotations --> looks for cashiers --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > [[interceptorClass]] ) { for ( Annotation [[annotation]] : [[interceptorClass]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[annotation]] . annotationType ( ) ) ) { return True ; } } return False ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[cashiers]] ( Class < ? extends Interceptor > [[imai]] ) { for ( Annotation [[glycerin]] : [[imai]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[glycerin]] . annotationType ( ) ) ) { return True ; } } return False ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .


--------------------------------------------- Result 349 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 253 / 92 / 4 / 349:  35%|███▍      | 349/1000 [3:24:57<6:22:18, 35.24s/it][Succeeded / Failed / Skipped / Total] 253 / 92 / 4 / 349:  35%|███▌      | 350/1000 [3:25:27<6:21:33, 35.22s/it][Succeeded / Failed / Skipped / Total] 253 / 93 / 4 / 350:  35%|███▌      | 350/1000 [3:25:27<6:21:33, 35.22s/it][Succeeded / Failed / Skipped / Total] 253 / 93 / 4 / 350:  35%|███▌      | 351/1000 [3:25:54<6:20:44, 35.20s/it][Succeeded / Failed / Skipped / Total] 254 / 93 / 4 / 351:  35%|███▌      | 351/1000 [3:25:54<6:20:44, 35.20s/it][Succeeded / Failed / Skipped / Total] 254 / 93 / 4 / 351:  35%|███▌      | 352/1000 [3:26:09<6:19:30, 35.14s/it][Succeeded / Failed / Skipped / Total] 255 / 93 / 4 / 352:  35%|███▌      | 352/1000 [3:26:09<6:19:30, 35.14s/it][Succeeded / Failed / Skipped / Total] 255 / 93 / 4 / 352:  35%|███▌      | 353/1000 [3:26:22<6:18:15, 35.08s/it][Succeeded / Failed / Skipped / Total] 256 / 93 / 4 / 353:  35%|███▌      | 353/1000 [3:26:22<6:18:15, 35.08s/it][Succeeded / Failed / Skipped / Total] 256 / 93 / 4 / 353:  35%|███▌      | 354/1000 [3:26:36<6:17:01, 35.02s/it][Succeeded / Failed / Skipped / Total] 257 / 93 / 4 / 354:  35%|███▌      | 354/1000 [3:26:36<6:17:01, 35.02s/it][Succeeded / Failed / Skipped / Total] 257 / 93 / 4 / 354:  36%|███▌      | 355/1000 [3:28:04<6:18:02, 35.17s/it][Succeeded / Failed / Skipped / Total] 257 / 94 / 4 / 355:  36%|███▌      | 355/1000 [3:28:04<6:18:02, 35.17s/it][Succeeded / Failed / Skipped / Total] 257 / 94 / 4 / 355:  36%|███▌      | 356/1000 [3:29:09<6:18:21, 35.25s/it]Static factory method for creating a new real map binding . --> New real map binder --> Socre: 1.0

[[[[Adv]]]]: static < [[K]] , V > RealMapBinder < [[K]] , V > newRealMapBinder ( Binder binder , TypeLiteral < [[K]] > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( binder , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < [[ammonium]] , V > RealMapBinder < [[ammonium]] , V > newRealMapBinder ( Binder binder , TypeLiteral < [[ammonium]] > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( binder , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .


--------------------------------------------- Result 350 ---------------------------------------------
Gets the key for a new value . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[entrySetBinder]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[valueKey]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[entrySetBinder]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[entrySetBinder]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[valueKey]] ) ) ; return [[valueKey]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[backtrack]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[electrocuted]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[backtrack]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[backtrack]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[electrocuted]] ) ) ; return [[electrocuted]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .


--------------------------------------------- Result 351 ---------------------------------------------
Creates a new instance . --> Partitions the construction --> Socre: 1.0

[[[[Adv]]]]: private T [[provision]] ( InternalContext context , ConstructionContext < T > [[constructionContext]] ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; [[constructionContext]] . setProxyDelegates ( t ) ; } finally { [[constructionContext]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T [[arrangement]] ( InternalContext context , ConstructionContext < T > [[lipton]] ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; [[lipton]] . setProxyDelegates ( t ) ; } finally { [[lipton]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .


--------------------------------------------- Result 352 ---------------------------------------------
Replace the source --> Overrides writeReplace --> Socre: 1.0

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] [[sourcesAsStrings]] = sources . toArray ( ) ; for ( int i = 0 ; i < [[sourcesAsStrings]] . length ; i ++ ) { [[sourcesAsStrings]] [ i ] = Errors . convert ( [[sourcesAsStrings]] [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[sourcesAsStrings]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] [[robertson]] = sources . toArray ( ) ; for ( int i = 0 ; i < [[robertson]] . length ; i ++ ) { [[robertson]] [ i ] = Errors . convert ( [[robertson]] [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[robertson]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .


--------------------------------------------- Result 353 ---------------------------------------------
Return a Module for the given module --> hash of shram --> Socre: 1.0

[[[[Adv]]]]: static Module [[forModule]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[ashram]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .


--------------------------------------------- Result 354 ---------------------------------------------
Returns all registered methods . --> returns all registered methods --> Socre: 1.0

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[delhi]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .


--------------------------------------------- Result 355 ---------------------------------------------
Checks if a type is not defined . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean isTypeNotSpecified ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > [[messages]] = ce . getErrorMessages ( ) ; if ( [[messages]] . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( [[messages]] ) . getMessage ( ) ) ; } else { return False ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean isTypeNotSpecified ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > [[communications]] = ce . getErrorMessages ( ) ; if ( [[communications]] . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( [[communications]] ) . getMessage ( ) ) ; } else { return False ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .


--------------------------------------------- Result 356 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 258 / 94 / 4 / 356:  36%|███▌      | 356/1000 [3:29:09<6:18:21, 35.25s/it][Succeeded / Failed / Skipped / Total] 258 / 94 / 4 / 356:  36%|███▌      | 357/1000 [3:29:38<6:17:36, 35.24s/it][Succeeded / Failed / Skipped / Total] 259 / 94 / 4 / 357:  36%|███▌      | 357/1000 [3:29:38<6:17:36, 35.24s/it][Succeeded / Failed / Skipped / Total] 259 / 94 / 4 / 357:  36%|███▌      | 358/1000 [3:30:24<6:17:20, 35.26s/it][Succeeded / Failed / Skipped / Total] 260 / 94 / 4 / 358:  36%|███▌      | 358/1000 [3:30:24<6:17:20, 35.26s/it][Succeeded / Failed / Skipped / Total] 260 / 94 / 4 / 358:  36%|███▌      | 359/1000 [3:31:13<6:17:09, 35.30s/it][Succeeded / Failed / Skipped / Total] 261 / 94 / 4 / 359:  36%|███▌      | 359/1000 [3:31:13<6:17:09, 35.30s/it][Succeeded / Failed / Skipped / Total] 261 / 94 / 4 / 359:  36%|███▌      | 360/1000 [3:32:24<6:17:36, 35.40s/it][Succeeded / Failed / Skipped / Total] 261 / 95 / 4 / 360:  36%|███▌      | 360/1000 [3:32:24<6:17:36, 35.40s/it][Succeeded / Failed / Skipped / Total] 261 / 95 / 4 / 360:  36%|███▌      | 361/1000 [3:32:39<6:16:24, 35.34s/it][Succeeded / Failed / Skipped / Total] 262 / 95 / 4 / 361:  36%|███▌      | 361/1000 [3:32:39<6:16:24, 35.34s/it][Succeeded / Failed / Skipped / Total] 262 / 95 / 4 / 361:  36%|███▌      | 362/1000 [3:32:54<6:15:13, 35.29s/it][Succeeded / Failed / Skipped / Total] 263 / 95 / 4 / 362:  36%|███▌      | 362/1000 [3:32:54<6:15:13, 35.29s/it][Succeeded / Failed / Skipped / Total] 263 / 95 / 4 / 362:  36%|███▋      | 363/1000 [3:33:11<6:14:07, 35.24s/it]Determines if the given constructor has the given parameters . --> Ooze the parameters --> Socre: 1.0

[[[[Adv]]]]: private boolean [[constructorHasMatchingParams]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] [[paramAnnotations]] = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , [[paramAnnotations]] [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean [[ooze]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] [[gay]] = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , [[gay]] [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all


--------------------------------------------- Result 357 ---------------------------------------------
Get dependencies for ctor . --> Borrowed from ctor point --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint ctorPoint , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; [[builder]] . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { [[builder]] . addAll ( ip . getDependencies ( ) ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[biddies]] ( InjectionPoint ctorPoint , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > [[artisan]] = ImmutableSet . builder ( ) ; [[artisan]] . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { [[artisan]] . addAll ( ip . getDependencies ( ) ) ; } } return [[artisan]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .


--------------------------------------------- Result 358 ---------------------------------------------
Removes the dependencies from the given set . --> Removes any AssistedDeps from Set --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > [[deps]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[dep]] : [[deps]] ) { Class < ? > annotationType = [[dep]] . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { builder . add ( [[dep]] ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > [[diagnoses]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[djj]] : [[diagnoses]] ) { Class < ? > annotationType = [[djj]] . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { builder . add ( [[djj]] ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .


--------------------------------------------- Result 359 ---------------------------------------------
Checks that the given dependencies are valid for an optimization . --> else return false --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > [[dependencies]] , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[badDeps]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[hangers]] ( Set < Dependency < ? > > [[carlito]] , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[dream]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .


--------------------------------------------- Result 360 ---------------------------------------------
Gets the binding from Guice Ginjector . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > [[getBindingFromNewInjector]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > [[accusation]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .


--------------------------------------------- Result 361 ---------------------------------------------
Handles a proxy method invocation . --> Overriding super methods --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object invoke ( Object [[proxy]] , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object invoke ( Object [[replace]] , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .


--------------------------------------------- Result 362 ---------------------------------------------
Throws an exception for missing implementation . --> Thrown when conversion is not bound . --> Socre: 1.0

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[sb]] = new StringBuilder ( ) ; [[sb]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[baylor]] = new StringBuilder ( ) ; [[baylor]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages


[Succeeded / Failed / Skipped / Total] 264 / 95 / 4 / 363:  36%|███▋      | 363/1000 [3:33:11<6:14:07, 35.24s/it][Succeeded / Failed / Skipped / Total] 264 / 95 / 4 / 363:  36%|███▋      | 364/1000 [3:33:53<6:13:43, 35.26s/it][Succeeded / Failed / Skipped / Total] 265 / 95 / 4 / 364:  36%|███▋      | 364/1000 [3:33:53<6:13:43, 35.26s/it][Succeeded / Failed / Skipped / Total] 265 / 95 / 4 / 364:  36%|███▋      | 365/1000 [3:34:25<6:13:02, 35.25s/it][Succeeded / Failed / Skipped / Total] 265 / 96 / 4 / 365:  36%|███▋      | 365/1000 [3:34:25<6:13:02, 35.25s/it][Succeeded / Failed / Skipped / Total] 265 / 96 / 4 / 365:  37%|███▋      | 366/1000 [3:34:40<6:11:51, 35.19s/it][Succeeded / Failed / Skipped / Total] 265 / 97 / 4 / 366:  37%|███▋      | 366/1000 [3:34:40<6:11:51, 35.19s/it][Succeeded / Failed / Skipped / Total] 265 / 97 / 4 / 366:  37%|███▋      | 367/1000 [3:35:07<6:11:02, 35.17s/it][Succeeded / Failed / Skipped / Total] 265 / 98 / 4 / 367:  37%|███▋      | 367/1000 [3:35:07<6:11:02, 35.17s/it][Succeeded / Failed / Skipped / Total] 265 / 98 / 4 / 367:  37%|███▋      | 368/1000 [3:35:22<6:09:53, 35.12s/it][Succeeded / Failed / Skipped / Total] 266 / 98 / 4 / 368:  37%|███▋      | 368/1000 [3:35:22<6:09:53, 35.12s/it][Succeeded / Failed / Skipped / Total] 266 / 98 / 4 / 368:  37%|███▋      | 369/1000 [3:35:39<6:08:47, 35.07s/it][Succeeded / Failed / Skipped / Total] 267 / 98 / 4 / 369:  37%|███▋      | 369/1000 [3:35:39<6:08:47, 35.07s/it][Succeeded / Failed / Skipped / Total] 267 / 98 / 4 / 369:  37%|███▋      | 370/1000 [3:36:08<6:08:02, 35.05s/it][Succeeded / Failed / Skipped / Total] 267 / 99 / 4 / 370:  37%|███▋      | 370/1000 [3:36:08<6:08:02, 35.05s/it][Succeeded / Failed / Skipped / Total] 267 / 99 / 4 / 370:  37%|███▋      | 371/1000 [3:36:22<6:06:50, 34.99s/it]--------------------------------------------- Result 363 ---------------------------------------------
Installs a real setBinder in the given binder . --> Create a real multiminder --> Socre: 1.0

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[newRealSetBinder]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[naïve]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .


--------------------------------------------- Result 364 ---------------------------------------------
Find the next filter . --> Tries to find a Sieve for a given request --> Socre: 1.0

[[[[Adv]]]]: private Filter [[findNextFilter]] ( HttpServletRequest [[request]] ) { while ( ++ index < filterDefinitions . length ) { Filter [[filter]] = filterDefinitions [ index ] . getFilterIfMatching ( [[request]] ) ; if ( [[filter]] != null ) { return [[filter]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter [[venting]] ( HttpServletRequest [[called]] ) { while ( ++ index < filterDefinitions . length ) { Filter [[sieve]] = filterDefinitions [ index ] . getFilterIfMatching ( [[called]] ) ; if ( [[sieve]] != null ) { return [[sieve]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .


--------------------------------------------- Result 365 ---------------------------------------------
Checks if a given Constructor has at least one annotation --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor cxtor ) { return cxtor . isAnnotationPresent ( Inject . class ) || cxtor . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[adex]] ( Constructor cxtor ) { return cxtor . isAnnotationPresent ( Inject . class ) || cxtor . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .


--------------------------------------------- Result 366 ---------------------------------------------
Returns the internal constructor . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[handbills]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .


--------------------------------------------- Result 367 ---------------------------------------------
Get the internal dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > [[builder]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[builder]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[handiwork]] ( ) { ImmutableSet . Builder < InjectionPoint > [[designers]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[designers]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .


--------------------------------------------- Result 368 ---------------------------------------------
Scan a module . --> Methode --> Socre: 1.0

[[[[Adv]]]]: public static Module [[forModule]] ( Object module , ModuleAnnotatedMethodScanner scanner ) { return forObject ( module , False , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[papá]] ( Object module , ModuleAnnotatedMethodScanner scanner ) { return forObject ( module , False , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .


--------------------------------------------- Result 369 ---------------------------------------------
Returns the annotation for the given method . --> Package private for testing --> Socre: 1.0

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[annotation]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( [[annotation]] != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[annotation]] = foundAnnotation ; } } return [[annotation]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[greaseball]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( [[greaseball]] != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[greaseball]] = foundAnnotation ; } } return [[greaseball]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .


--------------------------------------------- Result 370 ---------------------------------------------
Gets the line number associated with the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member [[member]] ) { Preconditions . checkArgument ( type == [[member]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[member]] , [[member]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[member]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[schiffer]] ( Member [[affiliated]] ) { Preconditions . checkArgument ( type == [[affiliated]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[affiliated]] , [[affiliated]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[affiliated]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .


--------------------------------------------- Result 371 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 268 / 99 / 4 / 371:  37%|███▋      | 371/1000 [3:36:22<6:06:50, 34.99s/it][Succeeded / Failed / Skipped / Total] 268 / 99 / 4 / 371:  37%|███▋      | 372/1000 [3:36:55<6:06:12, 34.99s/it][Succeeded / Failed / Skipped / Total] 269 / 99 / 4 / 372:  37%|███▋      | 372/1000 [3:36:55<6:06:12, 34.99s/it][Succeeded / Failed / Skipped / Total] 269 / 99 / 4 / 372:  37%|███▋      | 373/1000 [3:37:29<6:05:35, 34.98s/it][Succeeded / Failed / Skipped / Total] 270 / 99 / 4 / 373:  37%|███▋      | 373/1000 [3:37:29<6:05:35, 34.98s/it][Succeeded / Failed / Skipped / Total] 270 / 99 / 4 / 373:  37%|███▋      | 374/1000 [3:38:15<6:05:19, 35.02s/it][Succeeded / Failed / Skipped / Total] 271 / 99 / 4 / 374:  37%|███▋      | 374/1000 [3:38:15<6:05:19, 35.02s/it][Succeeded / Failed / Skipped / Total] 271 / 99 / 4 / 374:  38%|███▊      | 375/1000 [3:38:35<6:04:19, 34.98s/it][Succeeded / Failed / Skipped / Total] 272 / 99 / 4 / 375:  38%|███▊      | 375/1000 [3:38:35<6:04:19, 34.98s/it][Succeeded / Failed / Skipped / Total] 272 / 99 / 4 / 375:  38%|███▊      | 376/1000 [3:39:44<6:04:40, 35.06s/it]Initialize injector . --> Initialization methods --> Socre: 1.0

[[[[Adv]]]]: void initialize ( Errors [[errors]] ) { injector . lookups = injector ; new LookupProcessor ( [[errors]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void initialize ( Errors [[abnormalities]] ) { injector . lookups = injector ; new LookupProcessor ( [[abnormalities]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .


--------------------------------------------- Result 372 ---------------------------------------------
Wrap the given callable in a future . --> package private for testing --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > callable , Map < Key < ? > , Object > [[seedMap]] ) { return wrap ( callable , [[continueRequest]] ( [[seedMap]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[actuarial]] ( Callable < T > callable , Map < Key < ? > , Object > [[clai]] ) { return wrap ( callable , [[actuarial]] ( [[clai]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .


--------------------------------------------- Result 373 ---------------------------------------------
Wraps a Callable into a Callable . --> hansi --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > [[callable]] ) { return wrap ( [[callable]] , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[hansi]] ( Callable < T > [[selsdon]] ) { return wrap ( [[selsdon]] , [[hansi]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .


--------------------------------------------- Result 374 ---------------------------------------------
Validates and validates the given value . -->  coupon objectivity --> Socre: 1.0

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > [[key]] , Object [[object]] ) { if ( [[object]] == null || [[object]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[key]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[object]] ) ) { throw new IllegalArgumentException ( "Value[" + [[object]] + "] of type[" + [[object]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[key]] + "]" ) ; } return [[object]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[coupon]] ( Key < ? > [[elemental]] , Object [[objectivity]] ) { if ( [[objectivity]] == null || [[objectivity]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[elemental]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[objectivity]] ) ) { throw new IllegalArgumentException ( "Value[" + [[objectivity]] + "] of type[" + [[objectivity]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[elemental]] + "]" ) ; } return [[objectivity]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .


--------------------------------------------- Result 375 ---------------------------------------------
Create an injector for the given type . --> Injects the given type as an Observable --> Socre: 1.0

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[createWithListeners]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[oberst]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .


--------------------------------------------- Result 376 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 273 / 99 / 4 / 376:  38%|███▊      | 376/1000 [3:39:44<6:04:40, 35.06s/it][Succeeded / Failed / Skipped / Total] 273 / 99 / 4 / 376:  38%|███▊      | 377/1000 [3:40:25<6:04:15, 35.08s/it][Succeeded / Failed / Skipped / Total] 273 / 100 / 4 / 377:  38%|███▊      | 377/1000 [3:40:25<6:04:15, 35.08s/it][Succeeded / Failed / Skipped / Total] 273 / 100 / 4 / 377:  38%|███▊      | 378/1000 [3:41:18<6:04:09, 35.13s/it][Succeeded / Failed / Skipped / Total] 273 / 101 / 4 / 378:  38%|███▊      | 378/1000 [3:41:18<6:04:09, 35.13s/it][Succeeded / Failed / Skipped / Total] 273 / 101 / 4 / 378:  38%|███▊      | 379/1000 [3:41:55<6:03:38, 35.13s/it][Succeeded / Failed / Skipped / Total] 273 / 102 / 4 / 379:  38%|███▊      | 379/1000 [3:41:55<6:03:38, 35.13s/it][Succeeded / Failed / Skipped / Total] 273 / 102 / 4 / 379:  38%|███▊      | 380/1000 [3:42:43<6:03:23, 35.17s/it][Succeeded / Failed / Skipped / Total] 274 / 102 / 4 / 380:  38%|███▊      | 380/1000 [3:42:43<6:03:23, 35.17s/it][Succeeded / Failed / Skipped / Total] 274 / 102 / 4 / 380:  38%|███▊      | 381/1000 [3:42:56<6:02:12, 35.11s/it][Succeeded / Failed / Skipped / Total] 275 / 102 / 4 / 381:  38%|███▊      | 381/1000 [3:42:56<6:02:12, 35.11s/it][Succeeded / Failed / Skipped / Total] 275 / 102 / 4 / 381:  38%|███▊      | 382/1000 [3:46:23<6:06:15, 35.56s/it]Gets the injectors for injection points . --> get a single member injector --> Socre: 1.0

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[injectors]] = Lists . newArrayList ( ) ; for ( InjectionPoint [[injectionPoint]] : injectionPoints ) { try { Errors [[errorsForMember]] = [[injectionPoint]] . isOptional ( ) ? new Errors ( [[injectionPoint]] ) : errors . withSource ( [[injectionPoint]] ) ; SingleMemberInjector [[injector]] = [[injectionPoint]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[injector]] , [[injectionPoint]] , [[errorsForMember]] ) : new SingleMethodInjector ( this . [[injector]] , [[injectionPoint]] , [[errorsForMember]] ) ; [[injectors]] . add ( [[injector]] ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[buzzard]] = Lists . newArrayList ( ) ; for ( InjectionPoint [[tulip]] : injectionPoints ) { try { Errors [[bienvenidos]] = [[tulip]] . isOptional ( ) ? new Errors ( [[tulip]] ) : errors . withSource ( [[tulip]] ) ; SingleMemberInjector [[cylinder]] = [[tulip]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[injected]] , [[tulip]] , [[bienvenidos]] ) : new SingleMethodInjector ( this . [[injected]] , [[tulip]] , [[bienvenidos]] ) ; [[buzzard]] . add ( [[cylinder]] ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .


--------------------------------------------- Result 377 ---------------------------------------------
Builds a new Key instance --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > [[get]] ( Class < T > [[type]] , AnnotationStrategy annotationStrategy ) { return new Key < T > ( [[type]] , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > [[got]] ( Class < T > [[dawg]] , AnnotationStrategy annotationStrategy ) { return new Key < T > ( [[dawg]] , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .


--------------------------------------------- Result 378 ---------------------------------------------
Returns a strategy for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Annotation [[annotation]] ) { checkNotNull ( [[annotation]] , "annotation" ) ; Class < ? extends Annotation > [[annotationType]] = [[annotation]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; if ( Annotations . isMarker ( [[annotationType]] ) ) { return new AnnotationTypeStrategy ( [[annotationType]] , [[annotation]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[annotation]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy [[masturbating]] ( Annotation [[biodiversity]] ) { checkNotNull ( [[biodiversity]] , "annotation" ) ; Class < ? extends Annotation > [[nabi]] = [[biodiversity]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[nabi]] ) ; ensureIsBindingAnnotation ( [[nabi]] ) ; if ( Annotations . isMarker ( [[nabi]] ) ) { return new AnnotationTypeStrategy ( [[nabi]] , [[biodiversity]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[biodiversity]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .


--------------------------------------------- Result 379 ---------------------------------------------
Returns a strategy for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return [[strategyFor]] ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[münster]] ( Class < ? extends Annotation > [[esteemed]] ) { [[esteemed]] = Annotations . canonicalizeIfNamed ( [[esteemed]] ) ; if ( isAllDefaultMethods ( [[esteemed]] ) ) { return [[münster]] ( generateAnnotation ( [[esteemed]] ) ) ; } checkNotNull ( [[esteemed]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[esteemed]] ) ; ensureIsBindingAnnotation ( [[esteemed]] ) ; return new AnnotationTypeStrategy ( [[esteemed]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .


--------------------------------------------- Result 380 ---------------------------------------------
Removes the stack trace from the given throwable . --> This method is called by SeaClouds --> Socre: 1.0

[[[[Adv]]]]: private void [[pruneStacktrace]] ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] [[stackTrace]] = t . getStackTrace ( ) ; List < StackTraceElement > [[pruned]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[stackTrace]] ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[pruned]] . add ( element ) ; } } t . setStackTrace ( [[pruned]] . toArray ( new StackTraceElement [ [[pruned]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void [[denominator]] ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] [[youths]] = t . getStackTrace ( ) ; List < StackTraceElement > [[tanked]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[youths]] ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[tanked]] . add ( element ) ; } } t . setStackTrace ( [[tanked]] . toArray ( new StackTraceElement [ [[tanked]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .


--------------------------------------------- Result 381 ---------------------------------------------
Get the binding source . --> Get stack trace --> Socre: 1.0

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[ethel]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .


--------------------------------------------- Result 382 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 276 / 102 / 4 / 382:  38%|███▊      | 382/1000 [3:46:23<6:06:15, 35.56s/it][Succeeded / Failed / Skipped / Total] 276 / 102 / 4 / 382:  38%|███▊      | 383/1000 [3:47:12<6:06:02, 35.60s/it][Succeeded / Failed / Skipped / Total] 277 / 102 / 4 / 383:  38%|███▊      | 383/1000 [3:47:12<6:06:02, 35.60s/it][Succeeded / Failed / Skipped / Total] 277 / 102 / 4 / 383:  38%|███▊      | 384/1000 [3:48:09<6:05:59, 35.65s/it][Succeeded / Failed / Skipped / Total] 277 / 103 / 4 / 384:  38%|███▊      | 384/1000 [3:48:09<6:05:59, 35.65s/it][Succeeded / Failed / Skipped / Total] 277 / 103 / 4 / 384:  38%|███▊      | 385/1000 [3:49:41<6:06:55, 35.80s/it][Succeeded / Failed / Skipped / Total] 277 / 104 / 4 / 385:  38%|███▊      | 385/1000 [3:49:41<6:06:55, 35.80s/it][Succeeded / Failed / Skipped / Total] 277 / 104 / 4 / 385:  39%|███▊      | 386/1000 [3:49:57<6:05:46, 35.74s/it][Succeeded / Failed / Skipped / Total] 278 / 104 / 4 / 386:  39%|███▊      | 386/1000 [3:49:57<6:05:46, 35.74s/it][Succeeded / Failed / Skipped / Total] 278 / 104 / 4 / 386:  39%|███▊      | 387/1000 [3:50:28<6:05:04, 35.73s/it][Succeeded / Failed / Skipped / Total] 278 / 105 / 4 / 387:  39%|███▊      | 387/1000 [3:50:28<6:05:04, 35.73s/it][Succeeded / Failed / Skipped / Total] 278 / 105 / 4 / 387:  39%|███▉      | 388/1000 [3:51:16<6:04:48, 35.77s/it]Formats a collection of error messages . --> Converts a list of crystal problems into a string --> Socre: 1.0

[[[[Adv]]]]: public static String formatMessages ( String [[heading]] , Collection < Message > [[errorMessages]] ) { Formatter [[fmt]] = new Formatter ( ) . format ( [[heading]] ) . format ( ":%n%n" ) ; int index = 1 ; boolean [[displayCauses]] = getOnlyCause ( [[errorMessages]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : [[errorMessages]] ) { int [[thisIdx]] = index ++ ; [[fmt]] . format ( "%s) %s%n" , [[thisIdx]] , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( [[fmt]] , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( [[displayCauses]] && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , [[thisIdx]] ) ; [[fmt]] . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; [[fmt]] . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } [[fmt]] . format ( "%n" ) ; } if ( [[errorMessages]] . size ( ) == 1 ) { [[fmt]] . format ( "1 error" ) ; } else { [[fmt]] . format ( "%s errors" , [[errorMessages]] . size ( ) ) ; } return [[fmt]] . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String formatMessages ( String [[cartel]] , Collection < Message > [[crystal]] ) { Formatter [[corroborating]] = new Formatter ( ) . format ( [[cartel]] ) . format ( ":%n%n" ) ; int index = 1 ; boolean [[daydreams]] = getOnlyCause ( [[crystal]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : [[crystal]] ) { int [[obligatory]] = index ++ ; [[corroborating]] . format ( "%s) %s%n" , [[obligatory]] , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( [[corroborating]] , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( [[daydreams]] && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , [[obligatory]] ) ; [[corroborating]] . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; [[corroborating]] . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } [[corroborating]] . format ( "%n" ) ; } if ( [[crystal]] . size ( ) == 1 ) { [[corroborating]] . format ( "1 error" ) ; } else { [[corroborating]] . format ( "%s errors" , [[crystal]] . size ( ) ) ; } return [[corroborating]] . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .


--------------------------------------------- Result 383 ---------------------------------------------
Create a message with the given format and arguments . --> Convenience construction --> Socre: 1.0

[[[[Adv]]]]: public static Message [[create]] ( String messageFormat , Object ... [[arguments]] ) { return [[create]] ( null , messageFormat , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message [[establishments]] ( String messageFormat , Object ... [[dispute]] ) { return [[establishments]] ( null , messageFormat , [[dispute]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .


--------------------------------------------- Result 384 ---------------------------------------------
Creates a message with the given exception message and arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable [[cause]] , String messageFormat , Object ... arguments ) { return [[create]] ( [[cause]] , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[produce]] ( Throwable [[arousing]] , String messageFormat , Object ... arguments ) { return [[produce]] ( [[arousing]] , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .


--------------------------------------------- Result 385 ---------------------------------------------
Creates a message with the given message string and arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String message = format ( messageFormat , arguments ) ; return new Message ( sources , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message [[crea]] ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String message = format ( messageFormat , arguments ) ; return new Message ( sources , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .


--------------------------------------------- Result 386 ---------------------------------------------
Convert Object to Object . --> This method is used to do the conversion --> Socre: 1.0

[[[[Adv]]]]: static Object [[convert]] ( Object o ) { ElementSource source = null ; if ( o instanceof ElementSource ) { source = ( ElementSource ) o ; o = source . getDeclaringSource ( ) ; } return [[convert]] ( o , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object [[switching]] ( Object o ) { ElementSource source = null ; if ( o instanceof ElementSource ) { source = ( ElementSource ) o ; o = source . getDeclaringSource ( ) ; } return [[switching]] ( o , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .


--------------------------------------------- Result 387 ---------------------------------------------
Checks if the given class should be skipped . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[identified]] ( String [[fanna]] ) { return ( parent != null && parent . shouldBeSkipped ( [[fanna]] ) ) || classNamesToSkip . contains ( [[fanna]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .


--------------------------------------------- Result 388 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 279 / 105 / 4 / 388:  39%|███▉      | 388/1000 [3:51:16<6:04:48, 35.77s/it][Succeeded / Failed / Skipped / Total] 279 / 105 / 4 / 388:  39%|███▉      | 389/1000 [3:51:29<6:03:36, 35.71s/it][Succeeded / Failed / Skipped / Total] 280 / 105 / 4 / 389:  39%|███▉      | 389/1000 [3:51:29<6:03:36, 35.71s/it][Succeeded / Failed / Skipped / Total] 280 / 105 / 4 / 389:  39%|███▉      | 390/1000 [3:52:08<6:03:05, 35.71s/it][Succeeded / Failed / Skipped / Total] 281 / 105 / 4 / 390:  39%|███▉      | 390/1000 [3:52:08<6:03:05, 35.71s/it][Succeeded / Failed / Skipped / Total] 281 / 105 / 4 / 390:  39%|███▉      | 391/1000 [3:52:39<6:02:21, 35.70s/it][Succeeded / Failed / Skipped / Total] 282 / 105 / 4 / 391:  39%|███▉      | 391/1000 [3:52:39<6:02:21, 35.70s/it][Succeeded / Failed / Skipped / Total] 282 / 105 / 4 / 391:  39%|███▉      | 392/1000 [3:53:08<6:01:36, 35.68s/it][Succeeded / Failed / Skipped / Total] 283 / 105 / 4 / 392:  39%|███▉      | 392/1000 [3:53:08<6:01:36, 35.68s/it][Succeeded / Failed / Skipped / Total] 283 / 105 / 4 / 392:  39%|███▉      | 393/1000 [3:53:24<6:00:30, 35.64s/it][Succeeded / Failed / Skipped / Total] 284 / 105 / 4 / 393:  39%|███▉      | 393/1000 [3:53:24<6:00:30, 35.64s/it][Succeeded / Failed / Skipped / Total] 284 / 105 / 4 / 393:  39%|███▉      | 394/1000 [3:53:37<5:59:19, 35.58s/it][Succeeded / Failed / Skipped / Total] 285 / 105 / 4 / 394:  39%|███▉      | 394/1000 [3:53:37<5:59:19, 35.58s/it][Succeeded / Failed / Skipped / Total] 285 / 105 / 4 / 394:  40%|███▉      | 395/1000 [3:54:34<5:59:16, 35.63s/it][Succeeded / Failed / Skipped / Total] 286 / 105 / 4 / 395:  40%|███▉      | 395/1000 [3:54:34<5:59:16, 35.63s/it][Succeeded / Failed / Skipped / Total] 286 / 105 / 4 / 395:  40%|███▉      | 396/1000 [3:55:01<5:58:28, 35.61s/it]Gets the configuration for the module classes . --> Configure usages to use usages --> Socre: 1.0

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > [[moduleClassNames]] ) { Preconditions . checkNotNull ( [[moduleClassNames]] , "The list of module class names cannot be null." ) ; for ( final String [[moduleClassName]] : [[moduleClassNames]] ) { if ( ! shouldBeSkipped ( [[moduleClassName]] ) ) { return new StackTraceElement ( [[moduleClassName]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[kgb]] ( List < String > [[payments]] ) { Preconditions . checkNotNull ( [[payments]] , "The list of module class names cannot be null." ) ; for ( final String [[usagi]] : [[payments]] ) { if ( ! shouldBeSkipped ( [[usagi]] ) ) { return new StackTraceElement ( [[usagi]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .


--------------------------------------------- Result 389 ---------------------------------------------
Manage jmx modules . --> Manage jmx --> Socre: 1.0

[[[[Adv]]]]: public static void main ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module [[module]] = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( [[module]] ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void main ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module [[ammo]] = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( [[ammo]] ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .


--------------------------------------------- Result 390 ---------------------------------------------
Pushes a dependency onto the dependency stack . --> associate with adder --> Socre: 1.0

[[[[Adv]]]]: Dependency < ? > [[pushDependency]] ( Dependency < ? > [[dependency]] , Object source ) { Dependency < ? > previous = this . [[dependency]] ; this . [[dependency]] = [[dependency]] ; doPushState ( [[dependency]] , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > [[adachi]] ( Dependency < ? > [[adderall]] , Object source ) { Dependency < ? > previous = this . [[subsidiary]] ; this . [[subsidiary]] = [[adderall]] ; doPushState ( [[adderall]] , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .


--------------------------------------------- Result 391 ---------------------------------------------
Pushes the given key with the given source object . --> For internal use only --> Socre: 1.0

[[[[Adv]]]]: void pushState ( com . google . inject . Key < ? > [[key]] , Object [[source]] ) { doPushState ( [[key]] , [[source]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void pushState ( com . google . inject . Key < ? > [[fundamental]] , Object [[parentage]] ) { doPushState ( [[fundamental]] , [[parentage]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .


--------------------------------------------- Result 392 ---------------------------------------------
Returns an initializable instance --> nullable --> Socre: 1.0

[[[[Adv]]]]: static < T > Initializable < T > [[of]] ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > [[las]] ( final T [[proceed]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[proceed]] ; } @ Override public String toString ( ) { return String . valueOf ( [[proceed]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .


--------------------------------------------- Result 393 ---------------------------------------------
Creates a new instance . -->  offered by the given provider --> Socre: 1.0

[[[[Adv]]]]: protected T [[provision]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T [[offered]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .


--------------------------------------------- Result 394 ---------------------------------------------
Process connection event . --> Process connection event --> Socre: 1.0

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > [[processorList]] = this . processors . get ( type ) ; if ( [[processorList]] != null ) { for ( ConnectionEventProcessor processor : [[processorList]] ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > [[billfold]] = this . processors . get ( type ) ; if ( [[billfold]] != null ) { for ( ConnectionEventProcessor processor : [[billfold]] ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .


--------------------------------------------- Result 395 ---------------------------------------------
Adds a connection event processor . --> Set the switcher for a specific type --> Socre: 1.0

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType type , ConnectionEventProcessor [[processor]] ) { List < ConnectionEventProcessor > [[processorList]] = this . processors . get ( type ) ; if ( [[processorList]] == null ) { this . processors . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[processorList]] = this . processors . get ( type ) ; } [[processorList]] . add ( [[processor]] ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[coloration]] ( ConnectionEventType type , ConnectionEventProcessor [[switcher]] ) { List < ConnectionEventProcessor > [[fraternal]] = this . processors . get ( type ) ; if ( [[fraternal]] == null ) { this . processors . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[fraternal]] = this . processors . get ( type ) ; } [[fraternal]] . add ( [[switcher]] ) ; }
[[[[Nl]]]]: Add event processor .


--------------------------------------------- Result 396 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 286 / 106 / 4 / 396:  40%|███▉      | 396/1000 [3:55:01<5:58:28, 35.61s/it][Succeeded / Failed / Skipped / Total] 286 / 106 / 4 / 396:  40%|███▉      | 397/1000 [3:55:18<5:57:23, 35.56s/it][Succeeded / Failed / Skipped / Total] 287 / 106 / 4 / 397:  40%|███▉      | 397/1000 [3:55:18<5:57:23, 35.56s/it][Succeeded / Failed / Skipped / Total] 287 / 106 / 4 / 397:  40%|███▉      | 398/1000 [3:55:43<5:56:33, 35.54s/it][Succeeded / Failed / Skipped / Total] 288 / 106 / 4 / 398:  40%|███▉      | 398/1000 [3:55:43<5:56:33, 35.54s/it][Succeeded / Failed / Skipped / Total] 288 / 106 / 4 / 398:  40%|███▉      | 399/1000 [3:56:28<5:56:11, 35.56s/it][Succeeded / Failed / Skipped / Total] 289 / 106 / 4 / 399:  40%|███▉      | 399/1000 [3:56:28<5:56:11, 35.56s/it][Succeeded / Failed / Skipped / Total] 289 / 106 / 4 / 399:  40%|████      | 400/1000 [3:57:07<5:55:40, 35.57s/it][Succeeded / Failed / Skipped / Total] 290 / 106 / 4 / 400:  40%|████      | 400/1000 [3:57:07<5:55:40, 35.57s/it][Succeeded / Failed / Skipped / Total] 290 / 106 / 4 / 400:  40%|████      | 401/1000 [3:57:21<5:54:34, 35.52s/it][Succeeded / Failed / Skipped / Total] 291 / 106 / 4 / 401:  40%|████      | 401/1000 [3:57:21<5:54:34, 35.52s/it][Succeeded / Failed / Skipped / Total] 291 / 106 / 4 / 401:  40%|████      | 402/1000 [3:57:36<5:53:27, 35.46s/it][Succeeded / Failed / Skipped / Total] 292 / 106 / 4 / 402:  40%|████      | 402/1000 [3:57:36<5:53:27, 35.46s/it][Succeeded / Failed / Skipped / Total] 292 / 106 / 4 / 402:  40%|████      | 403/1000 [3:57:55<5:52:27, 35.42s/it]Get the task result . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] getFutureTaskResult ( RunStateRecordedFutureTask < [[T]] > task , Logger logger ) { [[T]] [[t]] = null ; if ( null != task ) { try { [[t]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[t]] ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < [[shitloads]] > [[shitloads]] getFutureTaskResult ( RunStateRecordedFutureTask < [[shitloads]] > task , Logger logger ) { [[shitloads]] [[did]] = null ; if ( null != task ) { try { [[did]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[did]] ; }
[[[[Nl]]]]: get the result of a future task


--------------------------------------------- Result 397 ---------------------------------------------
Lazily executes the given throwable . --> Throws unchecked exceptions . --> Socre: 1.0

[[[[Adv]]]]: public static void [[launderThrowable]] ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable

[[[[Adv]]]]: public static void [[abhors]] ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable


--------------------------------------------- Result 398 ---------------------------------------------
Registers a processor . --> Registers a candlestick --> Socre: 1.0

[[[[Adv]]]]: public void [[registerProcessor]] ( CommandCode [[cmdCode]] , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( [[cmdCode]] ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , [[cmdCode]] , cmd2processors . get ( [[cmdCode]] ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( [[cmdCode]] , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void [[candlestick]] ( CommandCode [[horsewoman]] , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( [[horsewoman]] ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , [[horsewoman]] , cmd2processors . get ( [[horsewoman]] ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( [[horsewoman]] , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .


--------------------------------------------- Result 399 ---------------------------------------------
Registers the default processor --> Registers a hewittor --> Socre: 1.0

[[[[Adv]]]]: public void [[registerDefaultProcessor]] ( RemotingProcessor < ? > [[processor]] ) { if ( this . [[defaultProcessor]] == null ) { this . [[defaultProcessor]] = [[processor]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[defaultProcessor]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void [[hewitt]] ( RemotingProcessor < ? > [[manufacturers]] ) { if ( this . [[achieves]] == null ) { this . [[achieves]] = [[manufacturers]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[achieves]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .


--------------------------------------------- Result 400 ---------------------------------------------
Get the processor for a given command code --> Synchronized process --> Socre: 1.0

[[[[Adv]]]]: public RemotingProcessor < ? > [[getProcessor]] ( CommandCode cmdCode ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( cmdCode ) ; if ( processor != null ) { return processor ; } return this . [[defaultProcessor]] ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > [[sketching]] ( CommandCode cmdCode ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( cmdCode ) ; if ( processor != null ) { return processor ; } return this . [[animais]] ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .


--------------------------------------------- Result 401 ---------------------------------------------
Tries to get a cached URL . --> Tries to retrieve the given URL . --> Socre: 1.0

[[[[Adv]]]]: private Url tryGet ( String url ) { SoftReference < Url > [[softRef]] = Url . parsedUrls . get ( url ) ; return ( null == [[softRef]] ) ? null : [[softRef]] . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url tryGet ( String url ) { SoftReference < Url > [[garage]] = Url . parsedUrls . get ( url ) ; return ( null == [[garage]] ) ? null : [[garage]] . get ( ) ; }
[[[[Nl]]]]: try get from cache


--------------------------------------------- Result 402 ---------------------------------------------
Decodes the protocol code . --> Read gipsy . --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode [[decodeProtocolCode]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; in . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode [[gipsy]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; in . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code


--------------------------------------------- Result 403 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 293 / 106 / 4 / 403:  40%|████      | 403/1000 [3:57:55<5:52:27, 35.42s/it][Succeeded / Failed / Skipped / Total] 293 / 106 / 4 / 403:  40%|████      | 404/1000 [3:58:10<5:51:21, 35.37s/it][Succeeded / Failed / Skipped / Total] 294 / 106 / 4 / 404:  40%|████      | 404/1000 [3:58:10<5:51:21, 35.37s/it][Succeeded / Failed / Skipped / Total] 294 / 106 / 4 / 404:  40%|████      | 405/1000 [3:58:39<5:50:36, 35.36s/it][Succeeded / Failed / Skipped / Total] 295 / 106 / 4 / 405:  40%|████      | 405/1000 [3:58:39<5:50:36, 35.36s/it][Succeeded / Failed / Skipped / Total] 295 / 106 / 4 / 405:  41%|████      | 406/1000 [3:58:54<5:49:31, 35.31s/it][Succeeded / Failed / Skipped / Total] 296 / 106 / 4 / 406:  41%|████      | 406/1000 [3:58:54<5:49:31, 35.31s/it][Succeeded / Failed / Skipped / Total] 296 / 106 / 4 / 406:  41%|████      | 407/1000 [3:59:10<5:48:28, 35.26s/it][Succeeded / Failed / Skipped / Total] 297 / 106 / 4 / 407:  41%|████      | 407/1000 [3:59:10<5:48:28, 35.26s/it][Succeeded / Failed / Skipped / Total] 297 / 106 / 4 / 407:  41%|████      | 408/1000 [3:59:25<5:47:24, 35.21s/it][Succeeded / Failed / Skipped / Total] 298 / 106 / 4 / 408:  41%|████      | 408/1000 [3:59:25<5:47:24, 35.21s/it][Succeeded / Failed / Skipped / Total] 298 / 106 / 4 / 408:  41%|████      | 409/1000 [3:59:40<5:46:19, 35.16s/it]Returns a map of all connections in the pool . --> region GetAllConnectionPool Implementation --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > [[entry]] = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( [[entry]] . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( [[entry]] . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > [[accesses]] = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( [[accesses]] . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( [[accesses]] . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .


--------------------------------------------- Result 404 ---------------------------------------------
Scan idle pool . --> Scans all the pools . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[scan]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan

[[[[Adv]]]]: @ Override public void [[analysing]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan


--------------------------------------------- Result 405 ---------------------------------------------
Gets a connection and creates it if it does not already exist . --> Stores a connection with another connection --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url [[url]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[crucified]] ( Url [[accessing]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .


--------------------------------------------- Result 406 ---------------------------------------------
Create a connection to the server . --> Perform alfredo command --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[alfredo]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .


--------------------------------------------- Result 407 ---------------------------------------------
Removes a connection task from the pool . --> Called when a connection is killed . --> Socre: 1.0

[[[[Adv]]]]: private void [[removeTask]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void [[ahearn]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections


--------------------------------------------- Result 408 ---------------------------------------------
Check if the connection pool is needed --> This method should be overridden to avoid throwing an exception . --> Socre: 1.0

[[[[Adv]]]]: private void [[healIfNeed]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void [[austrian]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected


--------------------------------------------- Result 409 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 299 / 106 / 4 / 409:  41%|████      | 409/1000 [3:59:40<5:46:19, 35.16s/it][Succeeded / Failed / Skipped / Total] 299 / 106 / 4 / 409:  41%|████      | 410/1000 [3:59:54<5:45:13, 35.11s/it][Succeeded / Failed / Skipped / Total] 300 / 106 / 4 / 410:  41%|████      | 410/1000 [3:59:54<5:45:13, 35.11s/it][Succeeded / Failed / Skipped / Total] 300 / 106 / 4 / 410:  41%|████      | 411/1000 [4:00:09<5:44:10, 35.06s/it][Succeeded / Failed / Skipped / Total] 301 / 106 / 4 / 411:  41%|████      | 411/1000 [4:00:09<5:44:10, 35.06s/it][Succeeded / Failed / Skipped / Total] 301 / 106 / 4 / 411:  41%|████      | 412/1000 [4:01:12<5:44:14, 35.13s/it][Succeeded / Failed / Skipped / Total] 301 / 107 / 4 / 412:  41%|████      | 412/1000 [4:01:12<5:44:14, 35.13s/it][Succeeded / Failed / Skipped / Total] 301 / 107 / 4 / 412:  41%|████▏     | 413/1000 [4:02:00<5:43:57, 35.16s/it][Succeeded / Failed / Skipped / Total] 302 / 107 / 4 / 413:  41%|████▏     | 413/1000 [4:02:00<5:43:57, 35.16s/it][Succeeded / Failed / Skipped / Total] 302 / 107 / 4 / 413:  41%|████▏     | 414/1000 [4:02:27<5:43:11, 35.14s/it][Succeeded / Failed / Skipped / Total] 303 / 107 / 4 / 414:  41%|████▏     | 414/1000 [4:02:27<5:43:11, 35.14s/it][Succeeded / Failed / Skipped / Total] 303 / 107 / 4 / 414:  42%|████▏     | 415/1000 [4:02:42<5:42:08, 35.09s/it]Do create . --> this method is called from ConnectionPool --> Socre: 1.0

[[[[Adv]]]]: private void [[doCreate]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void [[accomplices]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections


--------------------------------------------- Result 410 ---------------------------------------------
Closes a connection . --> Removes an IP from the network . --> Socre: 1.0

[[[[Adv]]]]: public void [[closeConnection]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void [[antonino]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address


--------------------------------------------- Result 411 ---------------------------------------------
On close . --> Called by the client side --> Socre: 1.0

[[[[Adv]]]]: public void [[onClose]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void [[kristel]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .


--------------------------------------------- Result 412 ---------------------------------------------
Close the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( "[[False]]" != "[[False]]" , True ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[nearby]] ( ) { if ( closed . compareAndSet ( "[["Mistaken" != "Mistaken"]]" != "[["Mistaken" != "Mistaken"]]" , True ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[confess]] . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[confess]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .


--------------------------------------------- Result 413 ---------------------------------------------
Sets an attribute if it does not exist . --> associate a value to a value --> Socre: 1.0

[[[[Adv]]]]: public Object [[setAttributeIfAbsent]] ( String [[key]] , Object value ) { return attributes . putIfAbsent ( [[key]] , value ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object [[garo]] ( String [[momentous]] , Object value ) { return attributes . putIfAbsent ( [[momentous]] , value ) ; }
[[[[Nl]]]]: set attribute if key absent .


--------------------------------------------- Result 414 ---------------------------------------------
Register a user processor . --> Registers a given assembler as an assembler --> Socre: 1.0

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[processor]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[processor]] instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) [[processor]] , userProcessors ) ; } else { if ( StringUtils . isBlank ( [[processor]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[processor]] . interest ( ) , [[processor]] ) ; if ( preProcessor != null ) { String [[errMsg]] = "Processor with interest key [" + [[processor]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[errMsg]] ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > [[assembler]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[assembler]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[assembler]] instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) [[assembler]] , userProcessors ) ; } else { if ( StringUtils . isBlank ( [[assembler]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[assembler]] . interest ( ) , [[assembler]] ) ; if ( preProcessor != null ) { String [[authorised]] = "Processor with interest key [" + [[assembler]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[authorised]] ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .


[Succeeded / Failed / Skipped / Total] 304 / 107 / 4 / 415:  42%|████▏     | 415/1000 [4:02:42<5:42:08, 35.09s/it][Succeeded / Failed / Skipped / Total] 304 / 107 / 4 / 415:  42%|████▏     | 416/1000 [4:03:08<5:41:19, 35.07s/it][Succeeded / Failed / Skipped / Total] 305 / 107 / 4 / 416:  42%|████▏     | 416/1000 [4:03:08<5:41:19, 35.07s/it][Succeeded / Failed / Skipped / Total] 305 / 107 / 4 / 416:  42%|████▏     | 417/1000 [4:03:23<5:40:17, 35.02s/it][Succeeded / Failed / Skipped / Total] 306 / 107 / 4 / 417:  42%|████▏     | 417/1000 [4:03:23<5:40:17, 35.02s/it][Succeeded / Failed / Skipped / Total] 306 / 107 / 4 / 417:  42%|████▏     | 418/1000 [4:03:37<5:39:13, 34.97s/it][Succeeded / Failed / Skipped / Total] 307 / 107 / 4 / 418:  42%|████▏     | 418/1000 [4:03:37<5:39:13, 34.97s/it][Succeeded / Failed / Skipped / Total] 307 / 107 / 4 / 418:  42%|████▏     | 419/1000 [4:04:13<5:38:38, 34.97s/it][Succeeded / Failed / Skipped / Total] 308 / 107 / 4 / 419:  42%|████▏     | 419/1000 [4:04:13<5:38:38, 34.97s/it][Succeeded / Failed / Skipped / Total] 308 / 107 / 4 / 419:  42%|████▏     | 420/1000 [4:04:24<5:37:31, 34.92s/it]--------------------------------------------- Result 415 ---------------------------------------------
Register a multi interest user process . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: private static void [[registerUserProcessor]] ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : processor . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void [[convenes]] ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : processor . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .


--------------------------------------------- Result 416 ---------------------------------------------
Dispatches to the user process . --> Handles barin processing . --> Socre: 1.0

[[[[Adv]]]]: private void [[dispatchToUserProcessor]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void [[barin]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor


--------------------------------------------- Result 417 ---------------------------------------------
Deserialize request command . --> Helper method to do ajit . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[deserializeRequestCommand]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = True ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = False ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = False ; } return result ; }
[[[[Nl]]]]: deserialize request command

[[[[Adv]]]]: private boolean [[ajit]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = True ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = False ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = False ; } return result ; }
[[[[Nl]]]]: deserialize request command


--------------------------------------------- Result 418 ---------------------------------------------
Sets the preprocessing context . --> Associate the command with a specific request . --> Socre: 1.0

[[[[Adv]]]]: private void [[preProcessRemotingContext]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void [[assessor]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz


--------------------------------------------- Result 419 ---------------------------------------------
Log timeout log . --> Clean the cleanup process --> Socre: 1.0

[[[[Adv]]]]: private void [[timeoutLog]] ( final RpcRequestCommand [[cmd]] , long [[currentTimestamp]] , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , [[cmd]] . getId ( ) , [[currentTimestamp]] , [[cmd]] . getArriveTime ( ) , ( [[currentTimestamp]] - [[cmd]] . getArriveTime ( ) ) , [[cmd]] . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , [[cmd]] . getId ( ) , remoteAddr , ( [[currentTimestamp]] - [[cmd]] . getArriveTime ( ) ) , [[cmd]] . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void [[cleaner]] ( final RpcRequestCommand [[dmt]] , long [[astronomer]] , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , [[dmt]] . getId ( ) , [[astronomer]] , [[dmt]] . getArriveTime ( ) , ( [[astronomer]] - [[dmt]] . getArriveTime ( ) ) , [[dmt]] . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , [[dmt]] . getId ( ) , remoteAddr , ( [[astronomer]] - [[dmt]] . getArriveTime ( ) ) , [[dmt]] . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .


--------------------------------------------- Result 420 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 309 / 107 / 4 / 420:  42%|████▏     | 420/1000 [4:04:24<5:37:31, 34.92s/it][Succeeded / Failed / Skipped / Total] 309 / 107 / 4 / 420:  42%|████▏     | 421/1000 [4:04:37<5:36:26, 34.86s/it][Succeeded / Failed / Skipped / Total] 310 / 107 / 4 / 421:  42%|████▏     | 421/1000 [4:04:37<5:36:26, 34.86s/it][Succeeded / Failed / Skipped / Total] 310 / 107 / 4 / 421:  42%|████▏     | 422/1000 [4:05:38<5:36:27, 34.93s/it][Succeeded / Failed / Skipped / Total] 311 / 107 / 4 / 422:  42%|████▏     | 422/1000 [4:05:38<5:36:27, 34.93s/it][Succeeded / Failed / Skipped / Total] 311 / 107 / 4 / 422:  42%|████▏     | 423/1000 [4:06:37<5:36:24, 34.98s/it]Debug logging . --> For debugging purposes --> Socre: 1.0

[[[[Adv]]]]: private void debugLog ( RemotingContext [[ctx]] , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( [[ctx]] . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void debugLog ( RemotingContext [[clang]] , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( [[clang]] . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request


--------------------------------------------- Result 421 ---------------------------------------------
Process the message . --> Execute a single task --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[process]] ( RemotingContext ctx , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { defaultExecutor . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void [[lawsuits]] ( RemotingContext ctx , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { defaultExecutor . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .


--------------------------------------------- Result 422 ---------------------------------------------
Execute the invoke operation with a callback . --> Invoke invoke method and wait for response --> Socre: 1.0

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection [[conn]] , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture [[future]] = createInvokeFuture ( [[conn]] , request , request . getInvokeContext ( ) , invokeCallback ) ; [[conn]] . addInvokeFuture ( [[future]] ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture [[future]] = [[conn]] . removeInvokeFuture ( requestId ) ; if ( [[future]] != null ) { [[future]] . putResponse ( commandFactory . createTimeoutResponse ( [[conn]] . getRemoteAddress ( ) ) ) ; [[future]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; [[future]] . addTimeout ( timeout ) ; [[conn]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture [[f]] = [[conn]] . removeInvokeFuture ( requestId ) ; if ( [[f]] != null ) { [[f]] . cancelTimeout ( ) ; [[f]] . putResponse ( commandFactory . createSendFailedResponse ( [[conn]] . getRemoteAddress ( ) , cf . cause ( ) ) ) ; [[f]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture [[f]] = [[conn]] . removeInvokeFuture ( requestId ) ; if ( [[f]] != null ) { [[f]] . cancelTimeout ( ) ; [[f]] . putResponse ( commandFactory . createSendFailedResponse ( [[conn]] . getRemoteAddress ( ) , e ) ) ; [[f]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection [[constellation]] , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture [[farther]] = createInvokeFuture ( [[constellation]] , request , request . getInvokeContext ( ) , invokeCallback ) ; [[constellation]] . addInvokeFuture ( [[farther]] ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture [[farther]] = [[constellation]] . removeInvokeFuture ( requestId ) ; if ( [[farther]] != null ) { [[farther]] . putResponse ( commandFactory . createTimeoutResponse ( [[constellation]] . getRemoteAddress ( ) ) ) ; [[farther]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; [[farther]] . addTimeout ( timeout ) ; [[constellation]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture [[c]] = [[constellation]] . removeInvokeFuture ( requestId ) ; if ( [[c]] != null ) { [[c]] . cancelTimeout ( ) ; [[c]] . putResponse ( commandFactory . createSendFailedResponse ( [[constellation]] . getRemoteAddress ( ) , cf . cause ( ) ) ) ; [[c]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[constellation]] . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture [[c]] = [[constellation]] . removeInvokeFuture ( requestId ) ; if ( [[c]] != null ) { [[c]] . cancelTimeout ( ) ; [[c]] . putResponse ( commandFactory . createSendFailedResponse ( [[constellation]] . getRemoteAddress ( ) , e ) ) ; [[c]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[constellation]] . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .


--------------------------------------------- Result 423 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 312 / 107 / 4 / 423:  42%|████▏     | 423/1000 [4:06:37<5:36:24, 34.98s/it][Succeeded / Failed / Skipped / Total] 312 / 107 / 4 / 423:  42%|████▏     | 424/1000 [4:06:52<5:35:23, 34.94s/it][Succeeded / Failed / Skipped / Total] 313 / 107 / 4 / 424:  42%|████▏     | 424/1000 [4:06:52<5:35:23, 34.94s/it][Succeeded / Failed / Skipped / Total] 313 / 107 / 4 / 424:  42%|████▎     | 425/1000 [4:06:53<5:34:01, 34.85s/it][Succeeded / Failed / Skipped / Total] 313 / 107 / 5 / 425:  42%|████▎     | 425/1000 [4:06:53<5:34:01, 34.85s/it][Succeeded / Failed / Skipped / Total] 313 / 107 / 5 / 425:  43%|████▎     | 426/1000 [4:07:20<5:33:15, 34.84s/it][Succeeded / Failed / Skipped / Total] 314 / 107 / 5 / 426:  43%|████▎     | 426/1000 [4:07:20<5:33:15, 34.84s/it][Succeeded / Failed / Skipped / Total] 314 / 107 / 5 / 426:  43%|████▎     | 427/1000 [4:07:20<5:31:54, 34.75s/it][Succeeded / Failed / Skipped / Total] 314 / 107 / 6 / 427:  43%|████▎     | 427/1000 [4:07:20<5:31:54, 34.75s/it][Succeeded / Failed / Skipped / Total] 314 / 107 / 6 / 427:  43%|████▎     | 428/1000 [4:07:48<5:31:10, 34.74s/it][Succeeded / Failed / Skipped / Total] 315 / 107 / 6 / 428:  43%|████▎     | 428/1000 [4:07:48<5:31:10, 34.74s/it][Succeeded / Failed / Skipped / Total] 315 / 107 / 6 / 428:  43%|████▎     | 429/1000 [4:08:03<5:30:09, 34.69s/it][Succeeded / Failed / Skipped / Total] 316 / 107 / 6 / 429:  43%|████▎     | 429/1000 [4:08:03<5:30:09, 34.69s/it][Succeeded / Failed / Skipped / Total] 316 / 107 / 6 / 429:  43%|████▎     | 430/1000 [4:08:25<5:29:18, 34.66s/it]Sends a request to the remote peer . --> Methode --> Socre: 1.0

[[[[Adv]]]]: protected void [[oneway]] ( final Connection [[conn]] , final RemotingCommand request ) { try { [[conn]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[conn]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void [[weíre]] ( final Connection [[coney]] , final RemotingCommand request ) { try { [[coney]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[coney]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[coney]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[coney]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .


--------------------------------------------- Result 424 ---------------------------------------------
To byte value . --> Chile bits . --> Socre: 1.0

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[chile]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte


--------------------------------------------- Result 425 ---------------------------------------------
Converts an integer value into a BitSet . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static BitSet toBitSet ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set


--------------------------------------------- Result 426 ---------------------------------------------
Add a reconnect task . --> Ensures that an administrator is enlisted . --> Socre: 1.0

[[[[Adv]]]]: public void [[addReconnectTask]] ( Url url ) { ReconnectTask [[task]] = new ReconnectTask ( ) ; [[task]] . url = url ; tasks . add ( [[task]] ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void [[assistance]] ( Url url ) { ReconnectTask [[accountability]] = new ReconnectTask ( ) ; [[accountability]] . url = url ; tasks . add ( [[accountability]] ) ; }
[[[[Nl]]]]: add reconnect task


--------------------------------------------- Result 427 ---------------------------------------------
Stops the connection . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = False ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread


--------------------------------------------- Result 428 ---------------------------------------------
Convert request to remoting command --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: protected RemotingCommand [[toRemotingCommand]] ( Object request , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand [[command]] = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand [[harder]] ( Object request , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand [[conductor]] = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .


--------------------------------------------- Result 429 ---------------------------------------------
Filter connections --> Filters a list of connection fittings . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > [[connections]] ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : [[connections]] ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > [[fittings]] ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : [[fittings]] ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor


--------------------------------------------- Result 430 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 317 / 107 / 6 / 430:  43%|████▎     | 430/1000 [4:08:25<5:29:18, 34.66s/it][Succeeded / Failed / Skipped / Total] 317 / 107 / 6 / 430:  43%|████▎     | 431/1000 [4:08:42<5:28:20, 34.62s/it][Succeeded / Failed / Skipped / Total] 318 / 107 / 6 / 431:  43%|████▎     | 431/1000 [4:08:42<5:28:20, 34.62s/it][Succeeded / Failed / Skipped / Total] 318 / 107 / 6 / 431:  43%|████▎     | 432/1000 [4:08:42<5:27:00, 34.54s/it][Succeeded / Failed / Skipped / Total] 318 / 107 / 7 / 432:  43%|████▎     | 432/1000 [4:08:42<5:27:00, 34.54s/it][Succeeded / Failed / Skipped / Total] 318 / 107 / 7 / 432:  43%|████▎     | 433/1000 [4:08:55<5:25:57, 34.49s/it][Succeeded / Failed / Skipped / Total] 319 / 107 / 7 / 433:  43%|████▎     | 433/1000 [4:08:55<5:25:57, 34.49s/it][Succeeded / Failed / Skipped / Total] 319 / 107 / 7 / 433:  43%|████▎     | 434/1000 [4:09:11<5:24:59, 34.45s/it][Succeeded / Failed / Skipped / Total] 320 / 107 / 7 / 434:  43%|████▎     | 434/1000 [4:09:11<5:24:59, 34.45s/it][Succeeded / Failed / Skipped / Total] 320 / 107 / 7 / 434:  44%|████▎     | 435/1000 [4:09:25<5:23:58, 34.40s/it]This method is used to monitor the connectivity of a tracker . --> Implements the monitoring of the configured connection pools . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > [[serviceOffConnections]] = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , [[serviceOffConnections]] ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , [[serviceOffConnections]] ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : [[serviceOffConnections]] ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > [[apparatus]] = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , [[apparatus]] ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , [[apparatus]] ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : [[apparatus]] ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off


--------------------------------------------- Result 431 ---------------------------------------------
Close new connection --> Eck --> Socre: 1.0

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[eckhart]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections


--------------------------------------------- Result 432 ---------------------------------------------
Gets a boolean . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean getBool ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property


--------------------------------------------- Result 433 ---------------------------------------------
Log info log . --> Prints out an address . --> Socre: 1.0

[[[[Adv]]]]: private void [[infoLog]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void [[bitchin]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log


--------------------------------------------- Result 434 ---------------------------------------------
Checks if request timeout . --> Checks if there is adequate response . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isRequestTimeout]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return True ; } return False ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean [[adequate]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return True ; } return False ; }
[[[[Nl]]]]: whether this request already timeout


--------------------------------------------- Result 435 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 321 / 107 / 7 / 435:  44%|████▎     | 435/1000 [4:09:25<5:23:58, 34.40s/it][Succeeded / Failed / Skipped / Total] 321 / 107 / 7 / 435:  44%|████▎     | 436/1000 [4:09:43<5:23:01, 34.36s/it][Succeeded / Failed / Skipped / Total] 322 / 107 / 7 / 436:  44%|████▎     | 436/1000 [4:09:43<5:23:01, 34.36s/it][Succeeded / Failed / Skipped / Total] 322 / 107 / 7 / 436:  44%|████▎     | 437/1000 [4:09:43<5:21:43, 34.29s/it][Succeeded / Failed / Skipped / Total] 322 / 107 / 8 / 437:  44%|████▎     | 437/1000 [4:09:43<5:21:43, 34.29s/it][Succeeded / Failed / Skipped / Total] 322 / 107 / 8 / 437:  44%|████▍     | 438/1000 [4:09:56<5:20:42, 34.24s/it][Succeeded / Failed / Skipped / Total] 323 / 107 / 8 / 438:  44%|████▍     | 438/1000 [4:09:56<5:20:42, 34.24s/it][Succeeded / Failed / Skipped / Total] 323 / 107 / 8 / 438:  44%|████▍     | 439/1000 [4:10:15<5:19:47, 34.20s/it][Succeeded / Failed / Skipped / Total] 324 / 107 / 8 / 439:  44%|████▍     | 439/1000 [4:10:15<5:19:47, 34.20s/it][Succeeded / Failed / Skipped / Total] 324 / 107 / 8 / 439:  44%|████▍     | 440/1000 [4:10:28<5:18:47, 34.16s/it][Succeeded / Failed / Skipped / Total] 325 / 107 / 8 / 440:  44%|████▍     | 440/1000 [4:10:28<5:18:47, 34.16s/it][Succeeded / Failed / Skipped / Total] 325 / 107 / 8 / 440:  44%|████▍     | 441/1000 [4:10:46<5:17:52, 34.12s/it][Succeeded / Failed / Skipped / Total] 326 / 107 / 8 / 441:  44%|████▍     | 441/1000 [4:10:46<5:17:52, 34.12s/it][Succeeded / Failed / Skipped / Total] 326 / 107 / 8 / 441:  44%|████▍     | 442/1000 [4:11:39<5:17:42, 34.16s/it][Succeeded / Failed / Skipped / Total] 327 / 107 / 8 / 442:  44%|████▍     | 442/1000 [4:11:39<5:17:42, 34.16s/it][Succeeded / Failed / Skipped / Total] 327 / 107 / 8 / 442:  44%|████▍     | 443/1000 [4:12:36<5:17:36, 34.21s/it]Returns a user processor . --> Gets a userProcessor --> Socre: 1.0

[[[[Adv]]]]: public UserProcessor < ? > getUserProcessor ( String [[className]] ) { return StringUtils . isBlank ( [[className]] ) ? null : this . userProcessors . get ( [[className]] ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > getUserProcessor ( String [[prost]] ) { return StringUtils . isBlank ( [[prost]] ) ? null : this . userProcessors . get ( [[prost]] ) ; }
[[[[Nl]]]]: Get user processor for class name .


--------------------------------------------- Result 436 ---------------------------------------------
Returns a random connection --> Returns jensen . --> Socre: 1.0

[[[[Adv]]]]: private Connection [[randomGet]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection [[jensen]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly


--------------------------------------------- Result 437 ---------------------------------------------
Returns the value for the given key . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . context . get ( key ) != null ? ( T ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found


--------------------------------------------- Result 438 ---------------------------------------------
Gets a property . --> Returns the Darting --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String key ) { if ( properties == null ) { return null ; } return properties . getProperty ( key ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[darting]] ( String key ) { if ( properties == null ) { return null ; } return properties . getProperty ( key ) ; }
[[[[Nl]]]]: Get property value according to property key


--------------------------------------------- Result 439 ---------------------------------------------
Resolve response object from a remote address . --> Resolves a ResponseCommand from a ResponseCommand --> Socre: 1.0

[[[[Adv]]]]: public static Object resolveResponseObject ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String [[msg]] = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( [[msg]] ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( [[msg]] , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( [[msg]] + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object resolveResponseObject ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String [[cellphones]] = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( [[cellphones]] ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( [[cellphones]] , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( [[cellphones]] + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .


--------------------------------------------- Result 440 ---------------------------------------------
Deserialize the response command . --> De - serialize a ResponseCommandCommand --> Socre: 1.0

[[[[Adv]]]]: private static Object [[toResponseObject]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) responseCommand ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object [[castes]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) responseCommand ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .


--------------------------------------------- Result 441 ---------------------------------------------
Tries to convert an RpcResponseCommand to a Throwable . --> Returns random exception from responseCommand --> Socre: 1.0

[[[[Adv]]]]: private static Throwable [[toThrowable]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable [[randall]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .


--------------------------------------------- Result 442 ---------------------------------------------
Print error message --> Correspond to RpcResponseCommand --> Socre: 1.0

[[[[Adv]]]]: private static String [[detailErrMsg]] ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String [[corny]] ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command


--------------------------------------------- Result 443 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 328 / 107 / 8 / 443:  44%|████▍     | 443/1000 [4:12:36<5:17:36, 34.21s/it][Succeeded / Failed / Skipped / Total] 328 / 107 / 8 / 443:  44%|████▍     | 444/1000 [4:12:53<5:16:40, 34.17s/it][Succeeded / Failed / Skipped / Total] 329 / 107 / 8 / 444:  44%|████▍     | 444/1000 [4:12:53<5:16:40, 34.17s/it][Succeeded / Failed / Skipped / Total] 329 / 107 / 8 / 444:  44%|████▍     | 445/1000 [4:13:36<5:16:17, 34.19s/it][Succeeded / Failed / Skipped / Total] 329 / 108 / 8 / 445:  44%|████▍     | 445/1000 [4:13:36<5:16:17, 34.19s/it][Succeeded / Failed / Skipped / Total] 329 / 108 / 8 / 445:  45%|████▍     | 446/1000 [4:14:03<5:15:34, 34.18s/it][Succeeded / Failed / Skipped / Total] 330 / 108 / 8 / 446:  45%|████▍     | 446/1000 [4:14:03<5:15:34, 34.18s/it][Succeeded / Failed / Skipped / Total] 330 / 108 / 8 / 446:  45%|████▍     | 447/1000 [4:14:30<5:14:51, 34.16s/it][Succeeded / Failed / Skipped / Total] 331 / 108 / 8 / 447:  45%|████▍     | 447/1000 [4:14:30<5:14:51, 34.16s/it][Succeeded / Failed / Skipped / Total] 331 / 108 / 8 / 447:  45%|████▍     | 448/1000 [4:15:10<5:14:24, 34.18s/it][Succeeded / Failed / Skipped / Total] 332 / 108 / 8 / 448:  45%|████▍     | 448/1000 [4:15:10<5:14:24, 34.18s/it][Succeeded / Failed / Skipped / Total] 332 / 108 / 8 / 448:  45%|████▍     | 449/1000 [4:15:24<5:13:25, 34.13s/it][Succeeded / Failed / Skipped / Total] 333 / 108 / 8 / 449:  45%|████▍     | 449/1000 [4:15:24<5:13:25, 34.13s/it][Succeeded / Failed / Skipped / Total] 333 / 108 / 8 / 449:  45%|████▌     | 450/1000 [4:15:37<5:12:26, 34.08s/it]Convert a Throwable to RpcServerException . --> convert to RpcServerException --> Socre: 1.0

[[[[Adv]]]]: private RpcServerException [[createServerException]] ( Throwable [[t]] , String errMsg ) { String [[formattedErrMsg]] = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , [[t]] . getClass ( ) . getName ( ) , [[t]] . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( [[formattedErrMsg]] ) ; e . setStackTrace ( [[t]] . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException [[delle]] ( Throwable [[mil]] , String errMsg ) { String [[bricks]] = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , [[mil]] . getClass ( ) . getName ( ) , [[mil]] . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( [[bricks]] ) ; e . setStackTrace ( [[mil]] . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .


--------------------------------------------- Result 444 ---------------------------------------------
Print connection trace log --> Utility method for debugging --> Socre: 1.0

[[[[Adv]]]]: public static void [[printConnectionTraceLog]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void [[abu]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log


--------------------------------------------- Result 445 ---------------------------------------------
Creates a new event loop group . --> [[[FAILED]]]

[[[[Adv]]]]: public static EventLoopGroup [[newEventLoopGroup]] ( int nThreads , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , threadFactory ) : new NioEventLoopGroup ( nThreads , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup [[nomura]] ( int nThreads , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , threadFactory ) : new NioEventLoopGroup ( nThreads , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .


--------------------------------------------- Result 446 ---------------------------------------------
Parses the remote address of a channel . --> get grob message --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[remote]] = channel . remoteAddress ( ) ; return doParse ( [[remote]] != null ? [[remote]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[grob]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[loneliest]] = channel . remoteAddress ( ) ; return doParse ( [[loneliest]] != null ? [[loneliest]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .


--------------------------------------------- Result 447 ---------------------------------------------
Parses the local address of a channel . --> Get invitin --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[local]] = channel . localAddress ( ) ; return doParse ( [[local]] != null ? [[local]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[invitin]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[arrondissement]] = channel . localAddress ( ) ; return doParse ( [[arrondissement]] != null ? [[arrondissement]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .


--------------------------------------------- Result 448 ---------------------------------------------
Parse the remote address of the channel . --> Get llama address --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[llama]] ( final Channel [[circuit]] ) { if ( null == [[circuit]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[aloof]] = ( InetSocketAddress ) [[circuit]] . remoteAddress ( ) ; if ( [[aloof]] != null ) { return [[aloof]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .


--------------------------------------------- Result 449 ---------------------------------------------
Get the remote hostname of the channel . --> Converts a lamec to a cone --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[lamé]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .


--------------------------------------------- Result 450 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 334 / 108 / 8 / 450:  45%|████▌     | 450/1000 [4:15:37<5:12:26, 34.08s/it][Succeeded / Failed / Skipped / Total] 334 / 108 / 8 / 450:  45%|████▌     | 451/1000 [4:16:05<5:11:43, 34.07s/it][Succeeded / Failed / Skipped / Total] 335 / 108 / 8 / 451:  45%|████▌     | 451/1000 [4:16:05<5:11:43, 34.07s/it][Succeeded / Failed / Skipped / Total] 335 / 108 / 8 / 451:  45%|████▌     | 452/1000 [4:16:32<5:11:01, 34.05s/it][Succeeded / Failed / Skipped / Total] 336 / 108 / 8 / 452:  45%|████▌     | 452/1000 [4:16:32<5:11:01, 34.05s/it][Succeeded / Failed / Skipped / Total] 336 / 108 / 8 / 452:  45%|████▌     | 453/1000 [4:17:33<5:11:00, 34.11s/it][Succeeded / Failed / Skipped / Total] 337 / 108 / 8 / 453:  45%|████▌     | 453/1000 [4:17:33<5:11:00, 34.11s/it][Succeeded / Failed / Skipped / Total] 337 / 108 / 8 / 453:  45%|████▌     | 454/1000 [4:18:08<5:10:27, 34.12s/it][Succeeded / Failed / Skipped / Total] 338 / 108 / 8 / 454:  45%|████▌     | 454/1000 [4:18:08<5:10:27, 34.12s/it][Succeeded / Failed / Skipped / Total] 338 / 108 / 8 / 454:  46%|████▌     | 455/1000 [4:18:22<5:09:28, 34.07s/it][Succeeded / Failed / Skipped / Total] 339 / 108 / 8 / 455:  46%|████▌     | 455/1000 [4:18:22<5:09:28, 34.07s/it][Succeeded / Failed / Skipped / Total] 339 / 108 / 8 / 455:  46%|████▌     | 456/1000 [4:18:34<5:08:28, 34.02s/it][Succeeded / Failed / Skipped / Total] 340 / 108 / 8 / 456:  46%|████▌     | 456/1000 [4:18:34<5:08:28, 34.02s/it][Succeeded / Failed / Skipped / Total] 340 / 108 / 8 / 456:  46%|████▌     | 457/1000 [4:19:29<5:08:19, 34.07s/it][Succeeded / Failed / Skipped / Total] 341 / 108 / 8 / 457:  46%|████▌     | 457/1000 [4:19:29<5:08:19, 34.07s/it][Succeeded / Failed / Skipped / Total] 341 / 108 / 8 / 457:  46%|████▌     | 458/1000 [4:19:54<5:07:35, 34.05s/it][Succeeded / Failed / Skipped / Total] 341 / 109 / 8 / 458:  46%|████▌     | 458/1000 [4:19:54<5:07:35, 34.05s/it][Succeeded / Failed / Skipped / Total] 341 / 109 / 8 / 458:  46%|████▌     | 459/1000 [4:20:48<5:07:23, 34.09s/it]Retrieves the local IP address of the channel . --> Package private for testing --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseLocalIP]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String [[thinned]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .


--------------------------------------------- Result 451 ---------------------------------------------
Gets the remote port from the channel . --> returns - 1 --> Socre: 1.0

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[casey]] ( final Channel [[aqueducts]] ) { if ( null == [[aqueducts]] ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) [[aqueducts]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .


--------------------------------------------- Result 452 ---------------------------------------------
Parses the local port of the given channel . --> Get florence --> Socre: 1.0

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[florence]] ( final Channel [[waterway]] ) { if ( null == [[waterway]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[waterway]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .


--------------------------------------------- Result 453 ---------------------------------------------
Parse a socket address to a host . --> Extracts armbands from jamaix --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseSocketAddressToHostIp]] ( SocketAddress [[socketAddress]] ) { final InetSocketAddress [[addrs]] = ( InetSocketAddress ) [[socketAddress]] ; if ( [[addrs]] != null ) { InetAddress [[addr]] = [[addrs]] . getAddress ( ) ; if ( null != [[addr]] ) { return [[addr]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String [[armbands]] ( SocketAddress [[jamaicans]] ) { final InetSocketAddress [[arraignment]] = ( InetSocketAddress ) [[jamaicans]] ; if ( [[arraignment]] != null ) { InetAddress [[bitten]] = [[arraignment]] . getAddress ( ) ; if ( null != [[bitten]] ) { return [[bitten]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .


--------------------------------------------- Result 454 ---------------------------------------------
Add a connection --> Adds an Interest to this Association . --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Connection [[connection]] ) { markAccess ( ) ; if ( null == [[connection]] ) { return ; } boolean res = this . conns . addIfAbsent ( [[connection]] ) ; if ( res ) { [[connection]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void [[including]] ( Connection [[affair]] ) { markAccess ( ) ; if ( null == [[affair]] ) { return ; } boolean res = this . conns . addIfAbsent ( [[affair]] ) ; if ( res ) { [[affair]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection


--------------------------------------------- Result 455 ---------------------------------------------
Remove and close connection . --> Tries to try and close it --> Socre: 1.0

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[connection]] ) { if ( null == [[connection]] ) { return ; } boolean res = this . conns . remove ( [[connection]] ) ; if ( res ) { [[connection]] . decreaseRef ( ) ; } if ( [[connection]] . noRef ( ) ) { [[connection]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[affair]] ) { if ( null == [[affair]] ) { return ; } boolean res = this . conns . remove ( [[affair]] ) ; if ( res ) { [[affair]] . decreaseRef ( ) ; } if ( [[affair]] . noRef ( ) ) { [[affair]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection


--------------------------------------------- Result 456 ---------------------------------------------
Gets a connection . --> Gets the current solution . --> Socre: 1.0

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . [[strategy]] . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . [[solutions]] . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection


--------------------------------------------- Result 457 ---------------------------------------------
Register a custom serializer for a class . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String [[className]] , CustomSerializer [[serializer]] ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[className]] , [[serializer]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[className]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[incompatibility]] ( String [[aftertaste]] , CustomSerializer [[maréchal]] ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[aftertaste]] , [[maréchal]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[aftertaste]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .


--------------------------------------------- Result 458 ---------------------------------------------
Get custom serializer --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer getCustomSerializer ( String [[className]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[className]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer getCustomSerializer ( String [[chafe]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[chafe]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .


--------------------------------------------- Result 459 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 341 / 110 / 8 / 459:  46%|████▌     | 459/1000 [4:20:48<5:07:23, 34.09s/it][Succeeded / Failed / Skipped / Total] 341 / 110 / 8 / 459:  46%|████▌     | 460/1000 [4:21:14<5:06:41, 34.08s/it][Succeeded / Failed / Skipped / Total] 341 / 111 / 8 / 460:  46%|████▌     | 460/1000 [4:21:14<5:06:41, 34.08s/it][Succeeded / Failed / Skipped / Total] 341 / 111 / 8 / 460:  46%|████▌     | 461/1000 [4:21:27<5:05:41, 34.03s/it][Succeeded / Failed / Skipped / Total] 342 / 111 / 8 / 461:  46%|████▌     | 461/1000 [4:21:27<5:05:41, 34.03s/it][Succeeded / Failed / Skipped / Total] 342 / 111 / 8 / 461:  46%|████▌     | 462/1000 [4:22:25<5:05:35, 34.08s/it][Succeeded / Failed / Skipped / Total] 343 / 111 / 8 / 462:  46%|████▌     | 462/1000 [4:22:25<5:05:35, 34.08s/it][Succeeded / Failed / Skipped / Total] 343 / 111 / 8 / 462:  46%|████▋     | 463/1000 [4:22:38<5:04:36, 34.04s/it][Succeeded / Failed / Skipped / Total] 344 / 111 / 8 / 463:  46%|████▋     | 463/1000 [4:22:38<5:04:36, 34.04s/it][Succeeded / Failed / Skipped / Total] 344 / 111 / 8 / 463:  46%|████▋     | 464/1000 [4:23:06<5:03:56, 34.02s/it][Succeeded / Failed / Skipped / Total] 344 / 112 / 8 / 464:  46%|████▋     | 464/1000 [4:23:06<5:03:56, 34.02s/it][Succeeded / Failed / Skipped / Total] 344 / 112 / 8 / 464:  46%|████▋     | 465/1000 [4:23:07<5:02:43, 33.95s/it][Succeeded / Failed / Skipped / Total] 344 / 112 / 9 / 465:  46%|████▋     | 465/1000 [4:23:07<5:02:43, 33.95s/it][Succeeded / Failed / Skipped / Total] 344 / 112 / 9 / 465:  47%|████▋     | 466/1000 [4:23:31<5:01:58, 33.93s/it][Succeeded / Failed / Skipped / Total] 345 / 112 / 9 / 466:  47%|████▋     | 466/1000 [4:23:31<5:01:58, 33.93s/it][Succeeded / Failed / Skipped / Total] 345 / 112 / 9 / 466:  47%|████▋     | 467/1000 [4:23:59<5:01:18, 33.92s/it]Registers a custom serializer for a command code . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode [[code]] , CustomSerializer serializer ) { CustomSerializer [[prevSerializer]] = commandCustomSerializer . putIfAbsent ( [[code]] , serializer ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[code]] + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[naturalized]] ( CommandCode [[laws]] , CustomSerializer serializer ) { CustomSerializer [[chemotherapy]] = commandCustomSerializer . putIfAbsent ( [[laws]] , serializer ) ; if ( [[chemotherapy]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[laws]] + ", the custom serializer is: " + [[chemotherapy]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .


--------------------------------------------- Result 460 ---------------------------------------------
Retrieves the custom serializer for the given command code . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode [[code]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[code]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[vash]] ( CommandCode [[scrambler]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[scrambler]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .


--------------------------------------------- Result 461 ---------------------------------------------
Start the connection monitor . --> Starts the connection monitor . --> Socre: 1.0

[[[[Adv]]]]: public void start ( ) { long [[initialDelay]] = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , True ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , [[initialDelay]] , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task

[[[[Adv]]]]: public void start ( ) { long [[aerial]] = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , True ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , [[aerial]] , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task


--------------------------------------------- Result 462 ---------------------------------------------
Checks whether the remote address is connected . --> Checks to see if there is one of the cities in the list --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isConnected]] ( String [[remoteAddr]] ) { Url [[url]] = this . rpcRemoting . addressParser . parse ( [[remoteAddr]] ) ; return this . isConnected ( [[url]] ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[cabeça]] ( String [[bristles]] ) { Url [[mime]] = this . rpcRemoting . addressParser . parse ( [[bristles]] ) ; return this . isConnected ( [[mime]] ) ; }
[[[[Nl]]]]: check whether a client address connected


--------------------------------------------- Result 463 ---------------------------------------------
Initialize write buffer water mark --> Binder method . --> Socre: 1.0

[[[[Adv]]]]: private void [[initWriteBufferWaterMark]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void [[binder]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark


--------------------------------------------- Result 464 ---------------------------------------------
Returns the framing data for the given opcode . --> [[[FAILED]]]

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode


--------------------------------------------- Result 465 ---------------------------------------------
try to batch --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return False ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed


--------------------------------------------- Result 466 ---------------------------------------------
Set the status code . --> Begins authentication . --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int [[code]] ) { this . code = [[code]] ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[beguine]] ( int [[algorithms]] ) { this . code = [[algorithms]] ;
[[[[Nl]]]]: Set the close code for this close frame


--------------------------------------------- Result 467 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 346 / 112 / 9 / 467:  47%|████▋     | 467/1000 [4:23:59<5:01:18, 33.92s/it][Succeeded / Failed / Skipped / Total] 346 / 112 / 9 / 467:  47%|████▋     | 468/1000 [4:24:26<5:00:36, 33.90s/it][Succeeded / Failed / Skipped / Total] 347 / 112 / 9 / 468:  47%|████▋     | 468/1000 [4:24:26<5:00:36, 33.90s/it][Succeeded / Failed / Skipped / Total] 347 / 112 / 9 / 468:  47%|████▋     | 469/1000 [4:24:41<4:59:40, 33.86s/it][Succeeded / Failed / Skipped / Total] 348 / 112 / 9 / 469:  47%|████▋     | 469/1000 [4:24:41<4:59:40, 33.86s/it][Succeeded / Failed / Skipped / Total] 348 / 112 / 9 / 469:  47%|████▋     | 470/1000 [4:25:14<4:59:06, 33.86s/it][Succeeded / Failed / Skipped / Total] 349 / 112 / 9 / 470:  47%|████▋     | 470/1000 [4:25:14<4:59:06, 33.86s/it][Succeeded / Failed / Skipped / Total] 349 / 112 / 9 / 470:  47%|████▋     | 471/1000 [4:25:34<4:58:16, 33.83s/it][Succeeded / Failed / Skipped / Total] 350 / 112 / 9 / 471:  47%|████▋     | 471/1000 [4:25:34<4:58:16, 33.83s/it][Succeeded / Failed / Skipped / Total] 350 / 112 / 9 / 471:  47%|████▋     | 472/1000 [4:25:49<4:57:21, 33.79s/it][Succeeded / Failed / Skipped / Total] 351 / 112 / 9 / 472:  47%|████▋     | 472/1000 [4:25:49<4:57:21, 33.79s/it][Succeeded / Failed / Skipped / Total] 351 / 112 / 9 / 472:  47%|████▋     | 473/1000 [4:26:48<4:57:15, 33.84s/it][Succeeded / Failed / Skipped / Total] 352 / 112 / 9 / 473:  47%|████▋     | 473/1000 [4:26:48<4:57:15, 33.84s/it][Succeeded / Failed / Skipped / Total] 352 / 112 / 9 / 473:  47%|████▋     | 474/1000 [4:27:00<4:56:17, 33.80s/it]Validate UTF - 8 . --> Certs a close frame . --> Socre: 1.0

[[[[Adv]]]]: private void [[validateUtf8]] ( ByteBuffer payload , int [[mark]] ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( [[mark]] ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void [[bertolucci]] ( ByteBuffer payload , int [[marc]] ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( [[marc]] ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8


--------------------------------------------- Result 468 ---------------------------------------------
Update the message payload . --> This method initializes nips --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer [[pay]] = ByteBuffer . allocate ( 2 + by . length ) ; [[pay]] . put ( buf ) ; [[pay]] . put ( by ) ; [[pay]] . rewind ( ) ; super . setPayload ( [[pay]] ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[nips]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer [[payoff]] = ByteBuffer . allocate ( 2 + by . length ) ; [[payoff]] . put ( buf ) ; [[payoff]] . put ( by ) ; [[payoff]] . rewind ( ) ; super . setPayload ( [[payoff]] ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason


--------------------------------------------- Result 469 ---------------------------------------------
Checks if the handshake contains a protocol . --> Batch handshake . --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[biatch]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft


--------------------------------------------- Result 470 ---------------------------------------------
translate single frame length limit --> Bournble episodes --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long [[length]] ) throws LimitExceededException { if ( [[length]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[length]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[length]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[length]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[bournemouth]] ( long [[episodes]] ) throws LimitExceededException { if ( [[episodes]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[episodes]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[episodes]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[episodes]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit


--------------------------------------------- Result 471 ---------------------------------------------
Translate single frame size . --> Translate a single frame . --> Socre: 1.0

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int [[maxpacketsize]] , int realpacketsize ) throws IncompleteException { if ( [[maxpacketsize]] < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int [[quincy]] , int realpacketsize ) throws IncompleteException { if ( [[quincy]] < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size


--------------------------------------------- Result 472 ---------------------------------------------
Helper method to generate the final key . --> Returns the grannies hash . --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[grannies]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string


--------------------------------------------- Result 473 ---------------------------------------------
Processes continuous and non - FIN state . --> Babs frames . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameContinuousAndNonFin]] ( WebSocketImpl [[webSocketImpl]] , Framedata frame , Opcode [[curop]] ) throws InvalidDataException { if ( [[curop]] != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( [[webSocketImpl]] , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void [[babs]] ( WebSocketImpl [[mentor]] , Framedata frame , Opcode [[baseball]] ) throws InvalidDataException { if ( [[baseball]] != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( [[mentor]] , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set


[Succeeded / Failed / Skipped / Total] 353 / 112 / 9 / 474:  47%|████▋     | 474/1000 [4:27:00<4:56:17, 33.80s/it][Succeeded / Failed / Skipped / Total] 353 / 112 / 9 / 474:  48%|████▊     | 475/1000 [4:27:14<4:55:22, 33.76s/it][Succeeded / Failed / Skipped / Total] 354 / 112 / 9 / 475:  48%|████▊     | 475/1000 [4:27:14<4:55:22, 33.76s/it][Succeeded / Failed / Skipped / Total] 354 / 112 / 9 / 475:  48%|████▊     | 476/1000 [4:27:41<4:54:41, 33.74s/it][Succeeded / Failed / Skipped / Total] 355 / 112 / 9 / 476:  48%|████▊     | 476/1000 [4:27:41<4:54:41, 33.74s/it][Succeeded / Failed / Skipped / Total] 355 / 112 / 9 / 476:  48%|████▊     | 477/1000 [4:28:14<4:54:06, 33.74s/it][Succeeded / Failed / Skipped / Total] 356 / 112 / 9 / 477:  48%|████▊     | 477/1000 [4:28:14<4:54:06, 33.74s/it][Succeeded / Failed / Skipped / Total] 356 / 112 / 9 / 477:  48%|████▊     | 478/1000 [4:28:41<4:53:25, 33.73s/it][Succeeded / Failed / Skipped / Total] 357 / 112 / 9 / 478:  48%|████▊     | 478/1000 [4:28:41<4:53:25, 33.73s/it][Succeeded / Failed / Skipped / Total] 357 / 112 / 9 / 478:  48%|████▊     | 479/1000 [4:28:54<4:52:29, 33.68s/it][Succeeded / Failed / Skipped / Total] 358 / 112 / 9 / 479:  48%|████▊     | 479/1000 [4:28:54<4:52:29, 33.68s/it][Succeeded / Failed / Skipped / Total] 358 / 112 / 9 / 479:  48%|████▊     | 480/1000 [4:29:25<4:51:52, 33.68s/it]--------------------------------------------- Result 474 ---------------------------------------------
Process frame binary data . --> called from WebSocket --> Socre: 1.0

[[[[Adv]]]]: private void processFrameBinary ( WebSocketImpl [[webSocketImpl]] , Framedata frame ) { try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void processFrameBinary ( WebSocketImpl [[dorf]] , Framedata frame ) { try { [[dorf]] . getWebSocketListener ( ) . onWebsocketMessage ( [[dorf]] , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[dorf]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame


--------------------------------------------- Result 475 ---------------------------------------------
Log runtime exception . --> A websocket message . --> Socre: 1.0

[[[[Adv]]]]: private void [[logRuntimeException]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void [[agora]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl


--------------------------------------------- Result 476 ---------------------------------------------
Process a frame text . --> Called when textiles are received . --> Socre: 1.0

[[[[Adv]]]]: private void processFrameText ( WebSocketImpl [[webSocketImpl]] , Framedata [[frame]] ) throws InvalidDataException { try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , Charsetfunctions . stringUtf8 ( [[frame]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void processFrameText ( WebSocketImpl [[prie]] , Framedata [[textiles]] ) throws InvalidDataException { try { [[prie]] . getWebSocketListener ( ) . onWebsocketMessage ( [[prie]] , Charsetfunctions . stringUtf8 ( [[textiles]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[prie]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame


--------------------------------------------- Result 477 ---------------------------------------------
Handles a continuous frame . --> High - level messages --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( [[frame]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[brightening]] ( WebSocketImpl webSocketImpl , Framedata [[backdrop]] ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( [[backdrop]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame


--------------------------------------------- Result 478 ---------------------------------------------
Check that a frame is not fully completed . --> Wrap a word in words . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata [[frame]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[frame]] ; addToBufferList ( [[frame]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[steamed]] ( Framedata [[wording]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[wording]] ; addToBufferList ( [[wording]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame


--------------------------------------------- Result 479 ---------------------------------------------
Process a close frame . --> Handle close . --> Socre: 1.0

[[[[Adv]]]]: private void processFrameClosing ( WebSocketImpl webSocketImpl , Framedata frame ) { int [[code]] = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; [[code]] = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void processFrameClosing ( WebSocketImpl webSocketImpl , Framedata frame ) { int [[codes]] = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; [[codes]] = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame


--------------------------------------------- Result 480 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 359 / 112 / 9 / 480:  48%|████▊     | 480/1000 [4:29:25<4:51:52, 33.68s/it][Succeeded / Failed / Skipped / Total] 359 / 112 / 9 / 480:  48%|████▊     | 481/1000 [4:30:18<4:51:39, 33.72s/it][Succeeded / Failed / Skipped / Total] 360 / 112 / 9 / 481:  48%|████▊     | 481/1000 [4:30:18<4:51:39, 33.72s/it][Succeeded / Failed / Skipped / Total] 360 / 112 / 9 / 481:  48%|████▊     | 482/1000 [4:30:33<4:50:45, 33.68s/it][Succeeded / Failed / Skipped / Total] 361 / 112 / 9 / 482:  48%|████▊     | 482/1000 [4:30:33<4:50:45, 33.68s/it][Succeeded / Failed / Skipped / Total] 361 / 112 / 9 / 482:  48%|████▊     | 483/1000 [4:30:47<4:49:50, 33.64s/it][Succeeded / Failed / Skipped / Total] 362 / 112 / 9 / 483:  48%|████▊     | 483/1000 [4:30:47<4:49:50, 33.64s/it][Succeeded / Failed / Skipped / Total] 362 / 112 / 9 / 483:  48%|████▊     | 484/1000 [4:31:01<4:48:56, 33.60s/it][Succeeded / Failed / Skipped / Total] 363 / 112 / 9 / 484:  48%|████▊     | 484/1000 [4:31:01<4:48:56, 33.60s/it][Succeeded / Failed / Skipped / Total] 363 / 112 / 9 / 484:  48%|████▊     | 485/1000 [4:31:14<4:48:01, 33.56s/it][Succeeded / Failed / Skipped / Total] 364 / 112 / 9 / 485:  48%|████▊     | 485/1000 [4:31:14<4:48:01, 33.56s/it][Succeeded / Failed / Skipped / Total] 364 / 112 / 9 / 485:  49%|████▊     | 486/1000 [4:31:28<4:47:07, 33.52s/it][Succeeded / Failed / Skipped / Total] 365 / 112 / 9 / 486:  49%|████▊     | 486/1000 [4:31:28<4:47:07, 33.52s/it][Succeeded / Failed / Skipped / Total] 365 / 112 / 9 / 486:  49%|████▊     | 487/1000 [4:31:43<4:46:13, 33.48s/it][Succeeded / Failed / Skipped / Total] 366 / 112 / 9 / 487:  49%|████▊     | 487/1000 [4:31:43<4:46:13, 33.48s/it][Succeeded / Failed / Skipped / Total] 366 / 112 / 9 / 487:  49%|████▉     | 488/1000 [4:32:14<4:45:37, 33.47s/it]Checks if buffer limit is exceeded . --> Perform overflow . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long [[totalSize]] = getByteBufferListSize ( ) ; if ( [[totalSize]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[totalSize]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[elevated]] ( ) throws LimitExceededException { long [[grosser]] = getByteBufferListSize ( ) ; if ( [[grosser]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[grosser]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size


--------------------------------------------- Result 481 ---------------------------------------------
Gets payload from byte buffers -->  bleeding . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer [[resultingByteBuffer]] ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; [[resultingByteBuffer]] = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { [[resultingByteBuffer]] . put ( buffer ) ; } } [[resultingByteBuffer]] . flip ( ) ; return [[resultingByteBuffer]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[bleeding]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer [[boughs]] ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; [[boughs]] = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { [[boughs]] . put ( buffer ) ; } } [[boughs]] . flip ( ) ; return [[boughs]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload


--------------------------------------------- Result 482 ---------------------------------------------
Returns the size of the byte buffer in bytes . --> Ferraro --> Socre: 1.0

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[ferraro]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list


--------------------------------------------- Result 483 ---------------------------------------------
Helper method to translate handshake http server . --> Commonover method . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpServer]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder [[cerebrum]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server


--------------------------------------------- Result 484 ---------------------------------------------
Translate handshake http client . --> achim implementation --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpClient]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder [[achim]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client


--------------------------------------------- Result 485 ---------------------------------------------
Decode handshake data . --> Add new handshake data . --> Socre: 1.0

[[[[Adv]]]]: public void [[decode]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void [[adder]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer


--------------------------------------------- Result 486 ---------------------------------------------
Closes the connection . --> Send invalid data exception . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToWrongHandshake]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , False ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void [[advisable]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , False ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct


--------------------------------------------- Result 487 ---------------------------------------------
Sends a close frame to the server . --> Sends an exception . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , False ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[arizona]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , False ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException


--------------------------------------------- Result 488 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 367 / 112 / 9 / 488:  49%|████▉     | 488/1000 [4:32:14<4:45:37, 33.47s/it][Succeeded / Failed / Skipped / Total] 367 / 112 / 9 / 488:  49%|████▉     | 489/1000 [4:32:39<4:44:55, 33.45s/it][Succeeded / Failed / Skipped / Total] 367 / 113 / 9 / 489:  49%|████▉     | 489/1000 [4:32:39<4:44:55, 33.45s/it][Succeeded / Failed / Skipped / Total] 367 / 113 / 9 / 489:  49%|████▉     | 490/1000 [4:32:39<4:43:47, 33.39s/it][Succeeded / Failed / Skipped / Total] 367 / 113 / 10 / 490:  49%|████▉     | 490/1000 [4:32:39<4:43:47, 33.39s/it][Succeeded / Failed / Skipped / Total] 367 / 113 / 10 / 490:  49%|████▉     | 491/1000 [4:32:54<4:42:55, 33.35s/it][Succeeded / Failed / Skipped / Total] 368 / 113 / 10 / 491:  49%|████▉     | 491/1000 [4:32:54<4:42:55, 33.35s/it][Succeeded / Failed / Skipped / Total] 368 / 113 / 10 / 491:  49%|████▉     | 492/1000 [4:33:39<4:42:33, 33.37s/it][Succeeded / Failed / Skipped / Total] 369 / 113 / 10 / 492:  49%|████▉     | 492/1000 [4:33:39<4:42:33, 33.37s/it][Succeeded / Failed / Skipped / Total] 369 / 113 / 10 / 492:  49%|████▉     | 493/1000 [4:33:54<4:41:41, 33.34s/it][Succeeded / Failed / Skipped / Total] 370 / 113 / 10 / 493:  49%|████▉     | 493/1000 [4:33:54<4:41:41, 33.34s/it][Succeeded / Failed / Skipped / Total] 370 / 113 / 10 / 493:  49%|████▉     | 494/1000 [4:34:20<4:41:00, 33.32s/it]Generate HTTP response with an error code . --> content is too expensive . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[generateHttpResponseDueToError]] ( int errorCode ) { String [[errorCodeDescription]] ; switch ( errorCode ) { case 404 : [[errorCodeDescription]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[errorCodeDescription]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[errorCodeDescription]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[errorCodeDescription]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[errorCodeDescription]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer [[claret]] ( int errorCode ) { String [[patman]] ; switch ( errorCode ) { case 404 : [[patman]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[patman]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[patman]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[patman]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[patman]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error


--------------------------------------------- Result 489 ---------------------------------------------
Sends text to a web socket . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[send]] ( String text ) { if ( text == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( text , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[shipment]] ( String text ) { if ( text == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[shipment]] ( draft . createFrames ( text , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .


--------------------------------------------- Result 490 ---------------------------------------------
Resets the websocket connection . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect


--------------------------------------------- Result 491 ---------------------------------------------
Start connect read thread . --> Start read thread --> Socre: 1.0

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[linked]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .


--------------------------------------------- Result 492 ---------------------------------------------
Get the port from the URI . --> This method is used to create a new page with eps . --> Socre: 1.0

[[[[Adv]]]]: private int [[getPort]] ( ) { int [[port]] = uri . getPort ( ) ; if ( [[port]] == - 1 ) { String [[scheme]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[scheme]] ) ; } } return [[port]] ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[gonçalves]] ( ) { int [[seaport]] = uri . getPort ( ) ; if ( [[seaport]] == - 1 ) { String [[agendas]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[agendas]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[agendas]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[agendas]] ) ; } } return [[seaport]] ; }
[[[[Nl]]]]: Extract the specified port


--------------------------------------------- Result 493 ---------------------------------------------
Sends the complete handshake . --> Bong . --> Socre: 1.0

[[[[Adv]]]]: private void [[sendHandshake]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void [[bong]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint


--------------------------------------------- Result 494 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 371 / 113 / 10 / 494:  49%|████▉     | 494/1000 [4:34:20<4:41:00, 33.32s/it][Succeeded / Failed / Skipped / Total] 371 / 113 / 10 / 494:  50%|████▉     | 495/1000 [4:34:34<4:40:07, 33.28s/it][Succeeded / Failed / Skipped / Total] 372 / 113 / 10 / 495:  50%|████▉     | 495/1000 [4:34:34<4:40:07, 33.28s/it][Succeeded / Failed / Skipped / Total] 372 / 113 / 10 / 495:  50%|████▉     | 496/1000 [4:34:48<4:39:14, 33.24s/it][Succeeded / Failed / Skipped / Total] 373 / 113 / 10 / 496:  50%|████▉     | 496/1000 [4:34:48<4:39:14, 33.24s/it][Succeeded / Failed / Skipped / Total] 373 / 113 / 10 / 496:  50%|████▉     | 497/1000 [4:35:36<4:38:55, 33.27s/it][Succeeded / Failed / Skipped / Total] 373 / 114 / 10 / 497:  50%|████▉     | 497/1000 [4:35:36<4:38:55, 33.27s/it][Succeeded / Failed / Skipped / Total] 373 / 114 / 10 / 497:  50%|████▉     | 498/1000 [4:36:31<4:38:45, 33.32s/it][Succeeded / Failed / Skipped / Total] 374 / 114 / 10 / 498:  50%|████▉     | 498/1000 [4:36:31<4:38:45, 33.32s/it][Succeeded / Failed / Skipped / Total] 374 / 114 / 10 / 498:  50%|████▉     | 499/1000 [4:36:44<4:37:51, 33.28s/it][Succeeded / Failed / Skipped / Total] 375 / 114 / 10 / 499:  50%|████▉     | 499/1000 [4:36:44<4:37:51, 33.28s/it][Succeeded / Failed / Skipped / Total] 375 / 114 / 10 / 499:  50%|█████     | 500/1000 [4:37:25<4:37:25, 33.29s/it]Sets the connection lost timeout . --> Stop backpacks . --> Socre: 1.0

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int [[connectionLostTimeout]] ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( [[connectionLostTimeout]] ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[crispy]] ( int [[backpacks]] ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( [[backpacks]] ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated


--------------------------------------------- Result 495 ---------------------------------------------
Stop the connection lost timer . --> Heartbeat thread . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = False ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[heavy]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = False ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer


--------------------------------------------- Result 496 ---------------------------------------------
Start the connection lost timer . --> Command . --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = True ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[command]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = True ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer


--------------------------------------------- Result 497 ---------------------------------------------
Starts a timer that detects connection lost connections . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[restartConnectionLostTimer]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket [[conn]] : connections ) { executeConnectionLostDetection ( [[conn]] , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void [[taylor]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket [[constellation]] : connections ) { executeConnectionLostDetection ( [[constellation]] , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter


--------------------------------------------- Result 498 ---------------------------------------------
Execute a connection lost message . --> Sends backoffers . --> Socre: 1.0

[[[[Adv]]]]: private void [[executeConnectionLostDetection]] ( WebSocket webSocket , long [[minimumPongTime]] ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < [[minimumPongTime]] ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void [[fresheners]] ( WebSocket webSocket , long [[backswing]] ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < [[backswing]] ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping


--------------------------------------------- Result 499 ---------------------------------------------
Cancels the connection lost checker . --> Shut down kimba . --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( False ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[kimba]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( False ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection


--------------------------------------------- Result 500 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 376 / 114 / 10 / 500:  50%|█████     | 500/1000 [4:37:25<4:37:25, 33.29s/it][Succeeded / Failed / Skipped / Total] 376 / 114 / 10 / 500:  50%|█████     | 501/1000 [4:38:01<4:36:54, 33.30s/it][Succeeded / Failed / Skipped / Total] 376 / 115 / 10 / 501:  50%|█████     | 501/1000 [4:38:01<4:36:54, 33.30s/it][Succeeded / Failed / Skipped / Total] 376 / 115 / 10 / 501:  50%|█████     | 502/1000 [4:38:13<4:36:00, 33.25s/it][Succeeded / Failed / Skipped / Total] 377 / 115 / 10 / 502:  50%|█████     | 502/1000 [4:38:13<4:36:00, 33.25s/it][Succeeded / Failed / Skipped / Total] 377 / 115 / 10 / 502:  50%|█████     | 503/1000 [4:38:40<4:35:20, 33.24s/it][Succeeded / Failed / Skipped / Total] 377 / 116 / 10 / 503:  50%|█████     | 503/1000 [4:38:40<4:35:20, 33.24s/it][Succeeded / Failed / Skipped / Total] 377 / 116 / 10 / 503:  50%|█████     | 504/1000 [4:38:55<4:34:30, 33.21s/it][Succeeded / Failed / Skipped / Total] 378 / 116 / 10 / 504:  50%|█████     | 504/1000 [4:38:55<4:34:30, 33.21s/it][Succeeded / Failed / Skipped / Total] 378 / 116 / 10 / 504:  50%|█████     | 505/1000 [4:39:09<4:33:38, 33.17s/it][Succeeded / Failed / Skipped / Total] 379 / 116 / 10 / 505:  50%|█████     | 505/1000 [4:39:09<4:33:38, 33.17s/it][Succeeded / Failed / Skipped / Total] 379 / 116 / 10 / 505:  51%|█████     | 506/1000 [4:39:25<4:32:48, 33.13s/it]Receives a server handshake . --> Bluebird API --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[onWebsocketHandshakeReceivedAsServer]] ( WebSocket conn , Draft draft , ClientHandshake [[request]] ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[bluebird]] ( WebSocket conn , Draft draft , ClientHandshake [[please]] ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .


--------------------------------------------- Result 501 ---------------------------------------------
Sends a ping frame . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[onWebsocketPing]] ( WebSocket [[conn]] , Framedata [[f]] ) { [[conn]] . sendFrame ( new PongFrame ( ( PingFrame ) [[f]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void [[bars]] ( WebSocket [[taurus]] , Framedata [[beckwith]] ) { [[taurus]] . sendFrame ( new PongFrame ( ( PingFrame ) [[beckwith]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .


--------------------------------------------- Result 502 ---------------------------------------------
Stops the queue . --> stop redial --> Socre: 1.0

[[[[Adv]]]]: public void stop ( int [[timeout]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( False , True ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void stop ( int [[redial]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( False , True ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .


--------------------------------------------- Result 503 ---------------------------------------------
Returns the port . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getPort]] ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[tipu]] ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .


--------------------------------------------- Result 504 ---------------------------------------------
Perform additional read . --> Adds to the queue of connections . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAdditionalRead]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void [[accounts]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read


--------------------------------------------- Result 505 ---------------------------------------------
Actually accept a connection . --> Processlets . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAccept]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( False ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( True ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation

[[[[Adv]]]]: private void [[anklets]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( False ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( True ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation


--------------------------------------------- Result 506 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 380 / 116 / 10 / 506:  51%|█████     | 506/1000 [4:39:25<4:32:48, 33.13s/it][Succeeded / Failed / Skipped / Total] 380 / 116 / 10 / 506:  51%|█████     | 507/1000 [4:39:36<4:31:53, 33.09s/it][Succeeded / Failed / Skipped / Total] 381 / 116 / 10 / 507:  51%|█████     | 507/1000 [4:39:36<4:31:53, 33.09s/it][Succeeded / Failed / Skipped / Total] 381 / 116 / 10 / 507:  51%|█████     | 508/1000 [4:39:51<4:31:03, 33.05s/it][Succeeded / Failed / Skipped / Total] 382 / 116 / 10 / 508:  51%|█████     | 508/1000 [4:39:51<4:31:03, 33.05s/it][Succeeded / Failed / Skipped / Total] 382 / 116 / 10 / 508:  51%|█████     | 509/1000 [4:39:52<4:29:58, 32.99s/it][Succeeded / Failed / Skipped / Total] 382 / 116 / 11 / 509:  51%|█████     | 509/1000 [4:39:52<4:29:58, 32.99s/it][Succeeded / Failed / Skipped / Total] 382 / 116 / 11 / 509:  51%|█████     | 510/1000 [4:40:05<4:29:06, 32.95s/it][Succeeded / Failed / Skipped / Total] 383 / 116 / 11 / 510:  51%|█████     | 510/1000 [4:40:05<4:29:06, 32.95s/it][Succeeded / Failed / Skipped / Total] 383 / 116 / 11 / 510:  51%|█████     | 511/1000 [4:40:18<4:28:14, 32.91s/it][Succeeded / Failed / Skipped / Total] 384 / 116 / 11 / 511:  51%|█████     | 511/1000 [4:40:18<4:28:14, 32.91s/it][Succeeded / Failed / Skipped / Total] 384 / 116 / 11 / 511:  51%|█████     | 512/1000 [4:40:32<4:27:23, 32.88s/it][Succeeded / Failed / Skipped / Total] 385 / 116 / 11 / 512:  51%|█████     | 512/1000 [4:40:32<4:27:23, 32.88s/it][Succeeded / Failed / Skipped / Total] 385 / 116 / 11 / 512:  51%|█████▏    | 513/1000 [4:41:00<4:26:46, 32.87s/it]Perform a read . --> Reads data from the selector queue . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doRead]] ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return False ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return True ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean [[adex]] ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return False ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return True ; }
[[[[Nl]]]]: Execute a read operation


--------------------------------------------- Result 507 ---------------------------------------------
Does the write --> try to batch --> Socre: 1.0

[[[[Adv]]]]: private void doWrite ( SelectionKey key ) throws IOException { WebSocketImpl [[conn]] = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( [[conn]] , [[conn]] . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation

[[[[Adv]]]]: private void doWrite ( SelectionKey key ) throws IOException { WebSocketImpl [[bulls]] = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( [[bulls]] , [[bulls]] . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation


--------------------------------------------- Result 508 ---------------------------------------------
Setup the selector and server thread --> Start listening to WebSocket --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doSetupSelectorAndServerThread]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( False ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return False ; } return True ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean [[aimin]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( False ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return False ; } return True ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings


--------------------------------------------- Result 509 ---------------------------------------------
Ensure single thread . --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return False ; } } return True ; }
[[[[Nl]]]]: The websocket server can only be started once


--------------------------------------------- Result 510 ---------------------------------------------
Shutdown the server . --> Close the socket . --> Socre: 1.0

[[[[Adv]]]]: private void [[doServerShutdown]] ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown

[[[[Adv]]]]: private void [[actin]] ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown


--------------------------------------------- Result 511 ---------------------------------------------
Returns the socket associated with the given WebSocket . --> GetSocket from WebSocket --> Socre: 1.0

[[[[Adv]]]]: private Socket getSocket ( WebSocket conn ) { WebSocketImpl [[impl]] = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) [[impl]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket getSocket ( WebSocket conn ) { WebSocketImpl [[gou]] = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) [[gou]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection


--------------------------------------------- Result 512 ---------------------------------------------
Broadcasts data to a collection of clients . --> Store data . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[broadcast]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void [[airing]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[airing]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections


--------------------------------------------- Result 513 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 386 / 116 / 11 / 513:  51%|█████▏    | 513/1000 [4:41:00<4:26:46, 32.87s/it][Succeeded / Failed / Skipped / Total] 386 / 116 / 11 / 513:  51%|█████▏    | 514/1000 [4:41:16<4:25:57, 32.83s/it][Succeeded / Failed / Skipped / Total] 387 / 116 / 11 / 514:  51%|█████▏    | 514/1000 [4:41:16<4:25:57, 32.83s/it][Succeeded / Failed / Skipped / Total] 387 / 116 / 11 / 514:  52%|█████▏    | 515/1000 [4:41:31<4:25:07, 32.80s/it][Succeeded / Failed / Skipped / Total] 388 / 116 / 11 / 515:  52%|█████▏    | 515/1000 [4:41:31<4:25:07, 32.80s/it][Succeeded / Failed / Skipped / Total] 388 / 116 / 11 / 515:  52%|█████▏    | 516/1000 [4:41:46<4:24:18, 32.77s/it][Succeeded / Failed / Skipped / Total] 389 / 116 / 11 / 516:  52%|█████▏    | 516/1000 [4:41:46<4:24:18, 32.77s/it][Succeeded / Failed / Skipped / Total] 389 / 116 / 11 / 516:  52%|█████▏    | 517/1000 [4:42:01<4:23:28, 32.73s/it][Succeeded / Failed / Skipped / Total] 390 / 116 / 11 / 517:  52%|█████▏    | 517/1000 [4:42:01<4:23:28, 32.73s/it][Succeeded / Failed / Skipped / Total] 390 / 116 / 11 / 517:  52%|█████▏    | 518/1000 [4:42:41<4:23:02, 32.74s/it][Succeeded / Failed / Skipped / Total] 390 / 117 / 11 / 518:  52%|█████▏    | 518/1000 [4:42:41<4:23:02, 32.74s/it][Succeeded / Failed / Skipped / Total] 390 / 117 / 11 / 518:  52%|█████▏    | 519/1000 [4:42:55<4:22:13, 32.71s/it][Succeeded / Failed / Skipped / Total] 391 / 117 / 11 / 519:  52%|█████▏    | 519/1000 [4:42:55<4:22:13, 32.71s/it][Succeeded / Failed / Skipped / Total] 391 / 117 / 11 / 519:  52%|█████▏    | 520/1000 [4:43:25<4:21:37, 32.70s/it][Succeeded / Failed / Skipped / Total] 392 / 117 / 11 / 520:  52%|█████▏    | 520/1000 [4:43:25<4:21:37, 32.70s/it][Succeeded / Failed / Skipped / Total] 392 / 117 / 11 / 520:  52%|█████▏    | 521/1000 [4:43:41<4:20:49, 32.67s/it]Broadcasts a given text to all connected clients . --> Displays an editorial message . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( String [[text]] , Collection < WebSocket > clients ) { if ( [[text]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[text]] , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void [[disseminate]] ( String [[editorial]] , Collection < WebSocket > clients ) { if ( [[editorial]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[editorial]] , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections


--------------------------------------------- Result 514 ---------------------------------------------
Broadcasts the specified data to all clients . --> Send draft data . --> Socre: 1.0

[[[[Adv]]]]: private void [[doBroadcast]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void [[dickweed]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time


--------------------------------------------- Result 515 ---------------------------------------------
Fill the frames map . --> Fill frames . --> Socre: 1.0

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > [[frames]] = null ; if ( sData != null ) { [[frames]] = draft . createFrames ( sData , False ) ; } if ( bData != null ) { [[frames]] = draft . createFrames ( bData , False ) ; } if ( [[frames]] != null ) { draftFrames . put ( draft , [[frames]] ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > [[architecture]] = null ; if ( sData != null ) { [[architecture]] = draft . createFrames ( sData , False ) ; } if ( bData != null ) { [[architecture]] = draft . createFrames ( bData , False ) ; } if ( [[architecture]] != null ) { draftFrames . put ( draft , [[architecture]] ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast


--------------------------------------------- Result 516 ---------------------------------------------
Transfer data from source to dest . --> Transfers a byte buffer into the beginning of the destination . --> Socre: 1.0

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer [[source]] , ByteBuffer dest ) { if ( [[source]] == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = [[source]] . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; [[source]] . limit ( limit ) ; dest . put ( [[source]] ) ; return limit ; } else { dest . put ( [[source]] ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer [[beginning]] , ByteBuffer dest ) { if ( [[beginning]] == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = [[beginning]] . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; [[beginning]] . limit ( limit ) ; dest . put ( [[beginning]] ) ; return limit ; } else { dest . put ( [[beginning]] ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer


--------------------------------------------- Result 517 ---------------------------------------------
Starts the entity manager factory . --> region EntityManagerFactory --> Socre: 1.0

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[launching]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .


--------------------------------------------- Result 518 ---------------------------------------------
Get the EntityManager for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( String [[name]] ) { EntityManagerFactory emf = emfs . get ( [[name]] ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager [[by]] ( String [[designate]] ) { EntityManagerFactory emf = emfs . get ( [[designate]] ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .


--------------------------------------------- Result 519 ---------------------------------------------
Pass the given transaction to the given consumer . --> Loops through all Conversations --> Socre: 1.0

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > block ) { [[withTransaction]] ( em -> { block . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[conversationalist]] ( Consumer < EntityManager > block ) { [[conversationalist]] ( em -> { block . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .


--------------------------------------------- Result 520 ---------------------------------------------
Convert the given arguments to a Scala buffer . --> Generate bermondsey order . --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... [[args]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[args]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[bermondsey]] ( final Object ... [[dass]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[dass]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary


[Succeeded / Failed / Skipped / Total] 393 / 117 / 11 / 521:  52%|█████▏    | 521/1000 [4:43:41<4:20:49, 32.67s/it][Succeeded / Failed / Skipped / Total] 393 / 117 / 11 / 521:  52%|█████▏    | 522/1000 [4:43:57<4:20:01, 32.64s/it][Succeeded / Failed / Skipped / Total] 394 / 117 / 11 / 522:  52%|█████▏    | 522/1000 [4:43:57<4:20:01, 32.64s/it][Succeeded / Failed / Skipped / Total] 394 / 117 / 11 / 522:  52%|█████▏    | 523/1000 [4:44:44<4:19:41, 32.67s/it][Succeeded / Failed / Skipped / Total] 395 / 117 / 11 / 523:  52%|█████▏    | 523/1000 [4:44:44<4:19:41, 32.67s/it][Succeeded / Failed / Skipped / Total] 395 / 117 / 11 / 523:  52%|█████▏    | 524/1000 [4:45:31<4:19:21, 32.69s/it][Succeeded / Failed / Skipped / Total] 395 / 118 / 11 / 524:  52%|█████▏    | 524/1000 [4:45:31<4:19:21, 32.69s/it][Succeeded / Failed / Skipped / Total] 395 / 118 / 11 / 524:  52%|█████▎    | 525/1000 [4:46:23<4:19:06, 32.73s/it][Succeeded / Failed / Skipped / Total] 395 / 119 / 11 / 525:  52%|█████▎    | 525/1000 [4:46:23<4:19:06, 32.73s/it][Succeeded / Failed / Skipped / Total] 395 / 119 / 11 / 525:  53%|█████▎    | 526/1000 [4:47:01<4:18:38, 32.74s/it][Succeeded / Failed / Skipped / Total] 395 / 120 / 11 / 526:  53%|█████▎    | 526/1000 [4:47:01<4:18:38, 32.74s/it][Succeeded / Failed / Skipped / Total] 395 / 120 / 11 / 526:  53%|█████▎    | 527/1000 [4:47:57<4:18:26, 32.78s/it][Succeeded / Failed / Skipped / Total] 396 / 120 / 11 / 527:  53%|█████▎    | 527/1000 [4:47:57<4:18:26, 32.78s/it][Succeeded / Failed / Skipped / Total] 396 / 120 / 11 / 527:  53%|█████▎    | 528/1000 [4:48:12<4:17:38, 32.75s/it][Succeeded / Failed / Skipped / Total] 397 / 120 / 11 / 528:  53%|█████▎    | 528/1000 [4:48:12<4:17:38, 32.75s/it][Succeeded / Failed / Skipped / Total] 397 / 120 / 11 / 528:  53%|█████▎    | 529/1000 [4:48:26<4:16:48, 32.71s/it][Succeeded / Failed / Skipped / Total] 398 / 120 / 11 / 529:  53%|█████▎    | 529/1000 [4:48:26<4:16:48, 32.71s/it][Succeeded / Failed / Skipped / Total] 398 / 120 / 11 / 529:  53%|█████▎    | 530/1000 [4:48:26<4:15:47, 32.65s/it][Succeeded / Failed / Skipped / Total] 398 / 120 / 12 / 530:  53%|█████▎    | 530/1000 [4:48:26<4:15:47, 32.65s/it][Succeeded / Failed / Skipped / Total] 398 / 120 / 12 / 530:  53%|█████▎    | 531/1000 [4:48:41<4:14:59, 32.62s/it][Succeeded / Failed / Skipped / Total] 399 / 120 / 12 / 531:  53%|█████▎    | 531/1000 [4:48:41<4:14:59, 32.62s/it][Succeeded / Failed / Skipped / Total] 399 / 120 / 12 / 531:  53%|█████▎    | 532/1000 [4:48:55<4:14:10, 32.59s/it]--------------------------------------------- Result 521 ---------------------------------------------
Wraps the given arguments to a List . --> Helper method for snipping --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[wrapArgsToListIfNeeded]] ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[snipping]] ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .


--------------------------------------------- Result 522 ---------------------------------------------
Gets the internationalized message . --> Retrieves the translation for the given key --> Socre: 1.0

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang lang , String key , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( key , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String [[perceives]] ( play . api . i18n . Lang lang , String key , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( key , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .


--------------------------------------------- Result 523 ---------------------------------------------
Gets a message with arguments . --> Generate a banner for a given keys --> Socre: 1.0

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang lang , List < String > keys , Object ... [[args]] ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > [[scalaArgs]] = convertArgsToScalaBuffer ( [[args]] ) ; return messages . apply ( keyArgs . toSeq ( ) , [[scalaArgs]] , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String [[learn]] ( play . api . i18n . Lang lang , List < String > keys , Object ... [[brioche]] ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > [[pantyhose]] = convertArgsToScalaBuffer ( [[brioche]] ) ; return messages . apply ( keyArgs . toSeq ( ) , [[pantyhose]] , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .


--------------------------------------------- Result 524 ---------------------------------------------
Returns a boolean value for the specified key . --> [[[FAILED]]]

[[[[Adv]]]]: public Boolean [[isDefinedAt]] ( play . api . i18n . Lang [[lang]] , String [[key]] ) { return messages . isDefinedAt ( [[key]] , [[lang]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean [[benno]] ( play . api . i18n . Lang [[eternal]] , String [[keys]] ) { return messages . isDefinedAt ( [[keys]] , [[eternal]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .


--------------------------------------------- Result 525 ---------------------------------------------
Returns the preferred message for this language . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Collection < Lang > candidates ) { Seq < Lang > [[cs]] = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) [[cs]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages [[privilege]] ( Collection < Lang > candidates ) { Seq < Lang > [[rupees]] = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) [[rupees]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .


--------------------------------------------- Result 526 ---------------------------------------------
Returns the preferred messages for this request . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Http . RequestHeader request ) { play . api . i18n . Messages [[msgs]] = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages [[choosing]] ( Http . RequestHeader request ) { play . api . i18n . Messages [[villagers]] = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( [[villagers]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .


--------------------------------------------- Result 527 ---------------------------------------------
Set the language . --> Convenience wrapper for Cary messages --> Socre: 1.0

[[[[Adv]]]]: public Result [[setLang]] ( Result [[result]] , Lang [[lang]] ) { return messages . setLang ( [[result]] . asScala ( ) , [[lang]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result [[cary]] ( Result [[wake]] , Lang [[broad]] ) { return messages . setLang ( [[wake]] . asScala ( ) , [[broad]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .


--------------------------------------------- Result 528 ---------------------------------------------
Specify the bindings of the given modules . --> Returns a new instance of this class --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . bindings ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self [[attaching]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . bindings ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .


--------------------------------------------- Result 529 ---------------------------------------------
Define the Guice binding . --> Define blade engines --> Socre: 1.0

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... [[modules]] ) { return bindings ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... [[blades]] ) { return bindings ( Guiceable . [[blades]] ( [[blades]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .


--------------------------------------------- Result 530 ---------------------------------------------
Sets the REQUESTE --> [[[SKIPPED]]]

[[[[Adv]]]]: public final Self REPLACEME0 ( play . api . inject . Binding < ? > ... REPLACEME0 ) { return REPLACEME0 ( Guiceable . bindings ( REPLACEME0 ) ) ; }
[[[[Nl]]]]: Add Play bindings .


--------------------------------------------- Result 531 ---------------------------------------------
Specifies the module overrides . --> Methode --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . overrides ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self [[housemates]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . overrides ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .


--------------------------------------------- Result 532 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 400 / 120 / 12 / 532:  53%|█████▎    | 532/1000 [4:48:55<4:14:10, 32.59s/it][Succeeded / Failed / Skipped / Total] 400 / 120 / 12 / 532:  53%|█████▎    | 533/1000 [4:49:09<4:13:21, 32.55s/it][Succeeded / Failed / Skipped / Total] 401 / 120 / 12 / 533:  53%|█████▎    | 533/1000 [4:49:09<4:13:21, 32.55s/it][Succeeded / Failed / Skipped / Total] 401 / 120 / 12 / 533:  53%|█████▎    | 534/1000 [4:49:38<4:12:45, 32.54s/it][Succeeded / Failed / Skipped / Total] 402 / 120 / 12 / 534:  53%|█████▎    | 534/1000 [4:49:38<4:12:45, 32.54s/it][Succeeded / Failed / Skipped / Total] 402 / 120 / 12 / 534:  54%|█████▎    | 535/1000 [4:49:50<4:11:54, 32.51s/it][Succeeded / Failed / Skipped / Total] 403 / 120 / 12 / 535:  54%|█████▎    | 535/1000 [4:49:50<4:11:54, 32.51s/it][Succeeded / Failed / Skipped / Total] 403 / 120 / 12 / 535:  54%|█████▎    | 536/1000 [4:50:18<4:11:18, 32.50s/it][Succeeded / Failed / Skipped / Total] 403 / 121 / 12 / 536:  54%|█████▎    | 536/1000 [4:50:18<4:11:18, 32.50s/it][Succeeded / Failed / Skipped / Total] 403 / 121 / 12 / 536:  54%|█████▎    | 537/1000 [4:50:32<4:10:30, 32.46s/it][Succeeded / Failed / Skipped / Total] 404 / 121 / 12 / 537:  54%|█████▎    | 537/1000 [4:50:32<4:10:30, 32.46s/it][Succeeded / Failed / Skipped / Total] 404 / 121 / 12 / 537:  54%|█████▍    | 538/1000 [4:50:46<4:09:42, 32.43s/it][Succeeded / Failed / Skipped / Total] 405 / 121 / 12 / 538:  54%|█████▍    | 538/1000 [4:50:46<4:09:42, 32.43s/it][Succeeded / Failed / Skipped / Total] 405 / 121 / 12 / 538:  54%|█████▍    | 539/1000 [4:51:01<4:08:54, 32.40s/it][Succeeded / Failed / Skipped / Total] 406 / 121 / 12 / 539:  54%|█████▍    | 539/1000 [4:51:01<4:08:54, 32.40s/it][Succeeded / Failed / Skipped / Total] 406 / 121 / 12 / 539:  54%|█████▍    | 540/1000 [4:51:30<4:08:19, 32.39s/it][Succeeded / Failed / Skipped / Total] 407 / 121 / 12 / 540:  54%|█████▍    | 540/1000 [4:51:30<4:08:19, 32.39s/it][Succeeded / Failed / Skipped / Total] 407 / 121 / 12 / 540:  54%|█████▍    | 541/1000 [4:52:07<4:07:50, 32.40s/it][Succeeded / Failed / Skipped / Total] 408 / 121 / 12 / 541:  54%|█████▍    | 541/1000 [4:52:07<4:07:50, 32.40s/it][Succeeded / Failed / Skipped / Total] 408 / 121 / 12 / 541:  54%|█████▍    | 542/1000 [4:53:10<4:07:44, 32.45s/it][Succeeded / Failed / Skipped / Total] 408 / 122 / 12 / 542:  54%|█████▍    | 542/1000 [4:53:10<4:07:44, 32.45s/it][Succeeded / Failed / Skipped / Total] 408 / 122 / 12 / 542:  54%|█████▍    | 543/1000 [4:54:11<4:07:35, 32.51s/it]Specifies the module overrides . --> Adds the Guice to the Guice --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Module ... modules ) { return [[overrides]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self [[beni]] ( play . api . inject . Module ... modules ) { return [[beni]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .


--------------------------------------------- Result 533 ---------------------------------------------
Specifies this Guice binding . --> Create a self boole --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Binding < ? > ... bindings ) { return [[overrides]] ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self [[boogey]] ( play . api . inject . Binding < ? > ... bindings ) { return [[boogey]] ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .


--------------------------------------------- Result 534 ---------------------------------------------
Disable the given modules . --> Methode dungt --> Socre: 1.0

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... [[moduleClasses]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[moduleClasses]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[crippled]] ( Class < ? > ... [[dutchman]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[dutchman]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .


--------------------------------------------- Result 535 ---------------------------------------------
Execute the call with request . --> from interface Callback --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < Result > call ( Request [[req]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > call ( Request [[ctx]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .


--------------------------------------------- Result 536 ---------------------------------------------
Gets an existing file . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > [[getExistingFile]] ( String [[relativePath]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[relativePath]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > [[pinging]] ( String [[amada]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[amada]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .


--------------------------------------------- Result 537 ---------------------------------------------
Creates a binding for the given scope . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[prolonging]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .


--------------------------------------------- Result 538 ---------------------------------------------
Static factory method for creating a tuple . --> Creates an Accused interval . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B > [[Tuple]] < A , B > [[Tuple]] ( A a , B b ) { return new [[Tuple]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < A , B > [[Accused]] < A , B > [[Accused]] ( A a , B b ) { return new [[Accused]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B


--------------------------------------------- Result 539 ---------------------------------------------
Creates a tuple with five values . --> Factory method . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B , C , [[D]] , E > Tuple5 < A , B , C , [[D]] , E > Tuple5 ( A a , B b , C c , [[D]] d , E e ) { return new Tuple5 < A , B , C , [[D]] , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , C , [[aux]] , E > Tuple5 < A , B , C , [[aux]] , E > Tuple5 ( A a , B b , C c , [[aux]] d , E e ) { return new Tuple5 < A , B , C , [[aux]] , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E


--------------------------------------------- Result 540 ---------------------------------------------
Convert execution context to Executor --> Called by Develabra --> Socre: 1.0

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext ec ) { ExecutionContext [[prepared]] = ec . prepare ( ) ; if ( [[prepared]] instanceof Executor ) { return ( Executor ) [[prepared]] ; } else { return [[prepared]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[candelabra]] ( ExecutionContext ec ) { ExecutionContext [[devise]] = ec . prepare ( ) ; if ( [[devise]] instanceof Executor ) { return ( Executor ) [[devise]] ; } else { return [[devise]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .


--------------------------------------------- Result 541 ---------------------------------------------
Creates a new JPAConfig instance . --> NAConfig instance --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig [[of]] ( String name , String [[unitName]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , [[unitName]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig [[nova]] ( String name , String [[carmelite]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , [[carmelite]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .


--------------------------------------------- Result 542 ---------------------------------------------
Creates a JPA configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String n1 , String u1 , String [[n2]] , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( [[n2]] , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig [[al]] ( String n1 , String u1 , String [[impropriety]] , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( [[impropriety]] , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .


--------------------------------------------- Result 543 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 408 / 123 / 12 / 543:  54%|█████▍    | 543/1000 [4:54:11<4:07:35, 32.51s/it][Succeeded / Failed / Skipped / Total] 408 / 123 / 12 / 543:  54%|█████▍    | 544/1000 [4:54:42<4:07:02, 32.50s/it][Succeeded / Failed / Skipped / Total] 409 / 123 / 12 / 544:  54%|█████▍    | 544/1000 [4:54:42<4:07:02, 32.50s/it][Succeeded / Failed / Skipped / Total] 409 / 123 / 12 / 544:  55%|█████▍    | 545/1000 [4:55:11<4:06:26, 32.50s/it][Succeeded / Failed / Skipped / Total] 410 / 123 / 12 / 545:  55%|█████▍    | 545/1000 [4:55:11<4:06:26, 32.50s/it][Succeeded / Failed / Skipped / Total] 410 / 123 / 12 / 545:  55%|█████▍    | 546/1000 [4:55:38<4:05:49, 32.49s/it][Succeeded / Failed / Skipped / Total] 410 / 124 / 12 / 546:  55%|█████▍    | 546/1000 [4:55:38<4:05:49, 32.49s/it][Succeeded / Failed / Skipped / Total] 410 / 124 / 12 / 546:  55%|█████▍    | 547/1000 [4:56:06<4:05:13, 32.48s/it][Succeeded / Failed / Skipped / Total] 410 / 125 / 12 / 547:  55%|█████▍    | 547/1000 [4:56:06<4:05:13, 32.48s/it][Succeeded / Failed / Skipped / Total] 410 / 125 / 12 / 547:  55%|█████▍    | 548/1000 [4:57:17<4:05:13, 32.55s/it][Succeeded / Failed / Skipped / Total] 410 / 126 / 12 / 548:  55%|█████▍    | 548/1000 [4:57:17<4:05:13, 32.55s/it][Succeeded / Failed / Skipped / Total] 410 / 126 / 12 / 548:  55%|█████▍    | 549/1000 [4:58:17<4:05:02, 32.60s/it][Succeeded / Failed / Skipped / Total] 411 / 126 / 12 / 549:  55%|█████▍    | 549/1000 [4:58:17<4:05:02, 32.60s/it][Succeeded / Failed / Skipped / Total] 411 / 126 / 12 / 549:  55%|█████▌    | 550/1000 [4:58:44<4:04:25, 32.59s/it]Creates a new JAConfig instance from a map of configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[from]] ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig [[amongst]] ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .


--------------------------------------------- Result 544 ---------------------------------------------
Inject ByteString into ByteString --> Convenience method for wiring --> Socre: 1.0

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String [[callbackName]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[wiring]] ( String [[hairdos]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[hairdos]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .


--------------------------------------------- Result 545 ---------------------------------------------
Inject a JSON node into a ByteString --> Convenience method that returns achievement results --> Socre: 1.0

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[json]] ( String [[callbackName]] ) { return Flow . of ( JsonNode . class ) . map ( [[json]] -> { return ByteString . fromString ( Json . stringify ( [[json]] ) ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[accomplishment]] ( String [[okita]] ) { return Flow . of ( JsonNode . class ) . map ( [[accomplishment]] -> { return ByteString . fromString ( Json . stringify ( [[accomplishment]] ) ) ; } ) . via ( flow ( [[okita]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .


--------------------------------------------- Result 546 ---------------------------------------------
Add constraint validator . --> [[[FAILED]]]

[[[[Adv]]]]: public < T [[extends]] ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T [[broaden]] ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .


--------------------------------------------- Result 547 ---------------------------------------------
Creates a new instance of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: private < [[T]] extends ConstraintValidator < ? , ? > > [[T]] newInstance ( Class < [[T]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < [[billion]] extends ConstraintValidator < ? , ? > > [[billion]] newInstance ( Class < [[billion]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .


--------------------------------------------- Result 548 ---------------------------------------------
Gets matching method . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[hauls]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .


--------------------------------------------- Result 549 ---------------------------------------------
Called when an error occurs . --> else return null --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onClientError]] ( RequestHeader request , int [[statusCode]] , String [[message]] ) { if ( [[statusCode]] == 400 ) { return onBadRequest ( request , [[message]] ) ; } else if ( [[statusCode]] == 403 ) { return onForbidden ( request , [[message]] ) ; } else if ( [[statusCode]] == 404 ) { return onNotFound ( request , [[message]] ) ; } else if ( [[statusCode]] >= 400 && [[statusCode]] < 500 ) { return onOtherClientError ( request , [[statusCode]] , [[message]] ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + [[statusCode]] + ": " + [[message]] ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[erasers]] ( RequestHeader request , int [[sensational]] , String [[messenger]] ) { if ( [[sensational]] == 400 ) { return onBadRequest ( request , [[messenger]] ) ; } else if ( [[sensational]] == 403 ) { return onForbidden ( request , [[messenger]] ) ; } else if ( [[sensational]] == 404 ) { return onNotFound ( request , [[messenger]] ) ; } else if ( [[sensational]] >= 400 && [[sensational]] < 500 ) { return onOtherClientError ( request , [[sensational]] , [[messenger]] ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + [[sensational]] + ": " + [[messenger]] ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .


--------------------------------------------- Result 550 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 412 / 126 / 12 / 550:  55%|█████▌    | 550/1000 [4:58:44<4:04:25, 32.59s/it][Succeeded / Failed / Skipped / Total] 412 / 126 / 12 / 550:  55%|█████▌    | 551/1000 [4:59:21<4:03:56, 32.60s/it][Succeeded / Failed / Skipped / Total] 413 / 126 / 12 / 551:  55%|█████▌    | 551/1000 [4:59:21<4:03:56, 32.60s/it][Succeeded / Failed / Skipped / Total] 413 / 126 / 12 / 551:  55%|█████▌    | 552/1000 [4:59:35<4:03:08, 32.56s/it][Succeeded / Failed / Skipped / Total] 414 / 126 / 12 / 552:  55%|█████▌    | 552/1000 [4:59:35<4:03:08, 32.56s/it][Succeeded / Failed / Skipped / Total] 414 / 126 / 12 / 552:  55%|█████▌    | 553/1000 [5:00:05<4:02:34, 32.56s/it][Succeeded / Failed / Skipped / Total] 415 / 126 / 12 / 553:  55%|█████▌    | 553/1000 [5:00:05<4:02:34, 32.56s/it][Succeeded / Failed / Skipped / Total] 415 / 126 / 12 / 553:  55%|█████▌    | 554/1000 [5:00:17<4:01:45, 32.52s/it][Succeeded / Failed / Skipped / Total] 416 / 126 / 12 / 554:  55%|█████▌    | 554/1000 [5:00:17<4:01:45, 32.52s/it][Succeeded / Failed / Skipped / Total] 416 / 126 / 12 / 554:  56%|█████▌    | 555/1000 [5:00:47<4:01:10, 32.52s/it][Succeeded / Failed / Skipped / Total] 417 / 126 / 12 / 555:  56%|█████▌    | 555/1000 [5:00:47<4:01:10, 32.52s/it][Succeeded / Failed / Skipped / Total] 417 / 126 / 12 / 555:  56%|█████▌    | 556/1000 [5:01:15<4:00:34, 32.51s/it][Succeeded / Failed / Skipped / Total] 418 / 126 / 12 / 556:  56%|█████▌    | 556/1000 [5:01:15<4:00:34, 32.51s/it][Succeeded / Failed / Skipped / Total] 418 / 126 / 12 / 556:  56%|█████▌    | 557/1000 [5:01:43<3:59:57, 32.50s/it]Handle bad request . --> Helper method to display some newsies --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader [[request]] , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[request]] . method ( ) , [[request]] . uri ( ) , message , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[newsies]] ( RequestHeader [[please]] , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[please]] . method ( ) , [[please]] . uri ( ) , message , [[please]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .


--------------------------------------------- Result 551 ---------------------------------------------
Handle unauthorized request . --> This function is called by the server side --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onForbidden]] ( RequestHeader [[request]] , String [[message]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > [[amélie]] ( RequestHeader [[ask]] , String [[communicative]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[ask]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .


--------------------------------------------- Result 552 ---------------------------------------------
On not found page . --> region NotFound --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onNotFound]] ( RequestHeader request , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > [[notional]] ( RequestHeader request , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .


--------------------------------------------- Result 553 ---------------------------------------------
Handles server error . --> This method is used for testing --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onServerError]] ( RequestHeader request , Throwable exception ) { try { UsefulException [[usefulException]] = throwableToUsefulException ( exception ) ; logServerError ( request , [[usefulException]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , [[usefulException]] ) ; default : return onDevServerError ( request , [[usefulException]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[séances]] ( RequestHeader request , Throwable exception ) { try { UsefulException [[auditions]] = throwableToUsefulException ( exception ) ; logServerError ( request , [[auditions]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , [[auditions]] ) ; default : return onDevServerError ( request , [[auditions]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .


--------------------------------------------- Result 554 ---------------------------------------------
Log an error . --> Log an error --> Socre: 1.0

[[[[Adv]]]]: protected void logServerError ( RequestHeader [[request]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[request]] . method ( ) , [[request]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void logServerError ( RequestHeader [[appealed]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[appealed]] . method ( ) , [[appealed]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .


--------------------------------------------- Result 555 ---------------------------------------------
Converts a throwable to a useful exception . --> For testing purposes only --> Socre: 1.0

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable [[throwable]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[throwable]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[cacciatore]] ( final Throwable [[horticultural]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[horticultural]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .


--------------------------------------------- Result 556 ---------------------------------------------
Sends an error to the server . --> Displays payment --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onDevServerError]] ( RequestHeader request , UsefulException [[exception]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , [[exception]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > [[payments]] ( RequestHeader request , UsefulException [[excluded]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , [[excluded]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .


--------------------------------------------- Result 557 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 419 / 126 / 12 / 557:  56%|█████▌    | 557/1000 [5:01:43<3:59:57, 32.50s/it][Succeeded / Failed / Skipped / Total] 419 / 126 / 12 / 557:  56%|█████▌    | 558/1000 [5:02:12<3:59:22, 32.50s/it][Succeeded / Failed / Skipped / Total] 420 / 126 / 12 / 558:  56%|█████▌    | 558/1000 [5:02:12<3:59:22, 32.50s/it][Succeeded / Failed / Skipped / Total] 420 / 126 / 12 / 558:  56%|█████▌    | 559/1000 [5:02:26<3:58:35, 32.46s/it][Succeeded / Failed / Skipped / Total] 421 / 126 / 12 / 559:  56%|█████▌    | 559/1000 [5:02:26<3:58:35, 32.46s/it][Succeeded / Failed / Skipped / Total] 421 / 126 / 12 / 559:  56%|█████▌    | 560/1000 [5:02:43<3:57:51, 32.43s/it][Succeeded / Failed / Skipped / Total] 422 / 126 / 12 / 560:  56%|█████▌    | 560/1000 [5:02:43<3:57:51, 32.43s/it][Succeeded / Failed / Skipped / Total] 422 / 126 / 12 / 560:  56%|█████▌    | 561/1000 [5:03:01<3:57:07, 32.41s/it][Succeeded / Failed / Skipped / Total] 423 / 126 / 12 / 561:  56%|█████▌    | 561/1000 [5:03:01<3:57:07, 32.41s/it][Succeeded / Failed / Skipped / Total] 423 / 126 / 12 / 561:  56%|█████▌    | 562/1000 [5:03:28<3:56:30, 32.40s/it][Succeeded / Failed / Skipped / Total] 424 / 126 / 12 / 562:  56%|█████▌    | 562/1000 [5:03:28<3:56:30, 32.40s/it][Succeeded / Failed / Skipped / Total] 424 / 126 / 12 / 562:  56%|█████▋    | 563/1000 [5:03:43<3:55:45, 32.37s/it][Succeeded / Failed / Skipped / Total] 425 / 126 / 12 / 563:  56%|█████▋    | 563/1000 [5:03:43<3:55:45, 32.37s/it][Succeeded / Failed / Skipped / Total] 425 / 126 / 12 / 563:  56%|█████▋    | 564/1000 [5:04:10<3:55:08, 32.36s/it][Succeeded / Failed / Skipped / Total] 426 / 126 / 12 / 564:  56%|█████▋    | 564/1000 [5:04:10<3:55:08, 32.36s/it][Succeeded / Failed / Skipped / Total] 426 / 126 / 12 / 564:  56%|█████▋    | 565/1000 [5:04:56<3:54:46, 32.38s/it]Callback for server error . --> helper method to render argos --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onProdServerError]] ( RequestHeader request , UsefulException [[exception]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( [[exception]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > [[argos]] ( RequestHeader request , UsefulException [[dispensation]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( [[dispensation]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .


--------------------------------------------- Result 558 ---------------------------------------------
Create a BuildDocHandler from the given resources . --> creates JsonRepository --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromResources]] ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > [[jarFiles]] = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler [[marsden]] ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > [[devotional]] = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .


--------------------------------------------- Result 559 ---------------------------------------------
Creates a documentation handler from a directory . --> Hotlanta API --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[hotlanta]] ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .


--------------------------------------------- Result 560 ---------------------------------------------
Creates a new BuildDocHandler from a directory and a directory . --> Handle chaka . --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base ) { return [[fromDirectoryAndJar]] ( directory , jarFile , base , False ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[chaka]] ( File directory , JarFile jarFile , String base ) { return [[chaka]] ( directory , jarFile , base , False ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository


--------------------------------------------- Result 561 ---------------------------------------------
Creates a documentation handler from a directory and a jar file . --> package - private for testing --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[será]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .


--------------------------------------------- Result 562 ---------------------------------------------
Creates a documentation handler from a jar file . --> private --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler fromJar ( JarFile [[jarFile]] , String base ) { FileRepository [[repo]] = new JarRepository ( [[jarFile]] , Option . apply ( base ) ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler fromJar ( JarFile [[sceptical]] , String base ) { FileRepository [[mortgaged]] = new JarRepository ( [[sceptical]] , Option . apply ( base ) ) ; return new DocumentationHandler ( [[mortgaged]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .


--------------------------------------------- Result 563 ---------------------------------------------
Consumes the data . --> Completes sidonie --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[sidonie]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .


--------------------------------------------- Result 564 ---------------------------------------------
Create HttpEntity from content . --> JsonEntity --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromContent]] ( Content content , String charset ) { String [[body]] ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity [[jeanine]] ( Content content , String charset ) { String [[structured]] ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .


--------------------------------------------- Result 565 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 427 / 126 / 12 / 565:  56%|█████▋    | 565/1000 [5:04:56<3:54:46, 32.38s/it][Succeeded / Failed / Skipped / Total] 427 / 126 / 12 / 565:  57%|█████▋    | 566/1000 [5:05:25<3:54:11, 32.38s/it][Succeeded / Failed / Skipped / Total] 428 / 126 / 12 / 566:  57%|█████▋    | 566/1000 [5:05:25<3:54:11, 32.38s/it][Succeeded / Failed / Skipped / Total] 428 / 126 / 12 / 566:  57%|█████▋    | 567/1000 [5:05:40<3:53:26, 32.35s/it][Succeeded / Failed / Skipped / Total] 429 / 126 / 12 / 567:  57%|█████▋    | 567/1000 [5:05:40<3:53:26, 32.35s/it][Succeeded / Failed / Skipped / Total] 429 / 126 / 12 / 567:  57%|█████▋    | 568/1000 [5:05:57<3:52:42, 32.32s/it][Succeeded / Failed / Skipped / Total] 430 / 126 / 12 / 568:  57%|█████▋    | 568/1000 [5:05:57<3:52:42, 32.32s/it][Succeeded / Failed / Skipped / Total] 430 / 126 / 12 / 568:  57%|█████▋    | 569/1000 [5:06:13<3:51:57, 32.29s/it][Succeeded / Failed / Skipped / Total] 431 / 126 / 12 / 569:  57%|█████▋    | 569/1000 [5:06:13<3:51:57, 32.29s/it][Succeeded / Failed / Skipped / Total] 431 / 126 / 12 / 569:  57%|█████▋    | 570/1000 [5:06:44<3:51:24, 32.29s/it][Succeeded / Failed / Skipped / Total] 432 / 126 / 12 / 570:  57%|█████▋    | 570/1000 [5:06:44<3:51:24, 32.29s/it][Succeeded / Failed / Skipped / Total] 432 / 126 / 12 / 570:  57%|█████▋    | 571/1000 [5:07:11<3:50:48, 32.28s/it][Succeeded / Failed / Skipped / Total] 433 / 126 / 12 / 571:  57%|█████▋    | 571/1000 [5:07:11<3:50:48, 32.28s/it][Succeeded / Failed / Skipped / Total] 433 / 126 / 12 / 571:  57%|█████▋    | 572/1000 [5:07:11<3:49:51, 32.22s/it][Succeeded / Failed / Skipped / Total] 433 / 126 / 13 / 572:  57%|█████▋    | 572/1000 [5:07:11<3:49:51, 32.22s/it][Succeeded / Failed / Skipped / Total] 433 / 126 / 13 / 572:  57%|█████▋    | 573/1000 [5:07:39<3:49:15, 32.22s/it][Succeeded / Failed / Skipped / Total] 433 / 127 / 13 / 573:  57%|█████▋    | 573/1000 [5:07:39<3:49:15, 32.22s/it][Succeeded / Failed / Skipped / Total] 433 / 127 / 13 / 573:  57%|█████▋    | 574/1000 [5:07:52<3:48:29, 32.18s/it][Succeeded / Failed / Skipped / Total] 434 / 127 / 13 / 574:  57%|█████▋    | 574/1000 [5:07:52<3:48:29, 32.18s/it][Succeeded / Failed / Skipped / Total] 434 / 127 / 13 / 574:  57%|█████▊    | 575/1000 [5:08:20<3:47:53, 32.17s/it][Succeeded / Failed / Skipped / Total] 435 / 127 / 13 / 575:  57%|█████▊    | 575/1000 [5:08:20<3:47:53, 32.17s/it][Succeeded / Failed / Skipped / Total] 435 / 127 / 13 / 575:  58%|█████▊    | 576/1000 [5:08:34<3:47:08, 32.14s/it][Succeeded / Failed / Skipped / Total] 436 / 127 / 13 / 576:  58%|█████▊    | 576/1000 [5:08:34<3:47:08, 32.14s/it][Succeeded / Failed / Skipped / Total] 436 / 127 / 13 / 576:  58%|█████▊    | 577/1000 [5:08:48<3:46:23, 32.11s/it]Create an HttpEntity from a string . --> Build a HttpEntity --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String [[content]] , String [[charset]] ) { return new Strict ( ByteString . fromString ( [[content]] , [[charset]] ) , Optional . of ( "text/plain; charset=" + [[charset]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[aaaahh]] ( String [[ingredient]] , String [[enjoy]] ) { return new Strict ( ByteString . fromString ( [[ingredient]] , [[enjoy]] ) , Optional . of ( "text/plain; charset=" + [[enjoy]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .


--------------------------------------------- Result 566 ---------------------------------------------
Creates a chunked entity from a source . --> Creates an HttpEntity --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > [[data]] , Optional < String > contentType ) { return new Chunked ( [[data]] . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[broward]] ( Source < ByteString , ? > [[realities]] , Optional < String > contentType ) { return new Chunked ( [[realities]] . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .


--------------------------------------------- Result 567 ---------------------------------------------
Creates a Result with the given status code and content . --> Create an article response --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , JsonNode content ) { return [[status]] ( [[status]] , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result [[article]] ( int status , JsonNode content ) { return [[article]] ( [[article]] , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .


--------------------------------------------- Result 568 ---------------------------------------------
Sends response with status code . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int status , JsonNode [[content]] , JsonEncoding encoding ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( [[content]] , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result status ( int status , JsonNode [[excited]] , JsonEncoding encoding ) { if ( [[excited]] == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( [[excited]] , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .


--------------------------------------------- Result 569 ---------------------------------------------
Creates a result with the given status code . --> This method should only be used for testing --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int status , byte [ ] [[content]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( status , new HttpEntity . Strict ( ByteString . fromArray ( [[content]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result status ( int status , byte [ ] [[ingredient]] ) { if ( [[ingredient]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( status , new HttpEntity . Strict ( ByteString . fromArray ( [[ingredient]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .


--------------------------------------------- Result 570 ---------------------------------------------
Sends an input stream to the response . --> Sends status code with given status code --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int status , InputStream [[content]] , long [[contentLength]] ) { return status ( status ) . sendInputStream ( [[content]] , [[contentLength]] ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result status ( int status , InputStream [[feliz]] , long [[abode]] ) { return status ( status ) . sendInputStream ( [[feliz]] , [[abode]] ) ; }
[[[[Nl]]]]: Generates a chunked result .


--------------------------------------------- Result 571 ---------------------------------------------
Creates a result with a file content . --> Returns the article results --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , File content ) { return [[status]] ( [[status]] , content , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[articles]] ( int [[lois]] , File content ) { return [[articles]] ( [[articles]] , content , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .


--------------------------------------------- Result 572 ---------------------------------------------
Get user by id --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation


--------------------------------------------- Result 573 ---------------------------------------------
Selects the preferred language . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > [[candidates]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidates]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[privilege]] ( Collection < Lang > [[claimant]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[claimant]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .


--------------------------------------------- Result 574 ---------------------------------------------
Returns a unique call . --> Implements call --> Socre: 1.0

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[alfred]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .


--------------------------------------------- Result 575 ---------------------------------------------
Creates a call with the given fragment . --> Creates an arc to an ague --> Socre: 1.0

[[[[Adv]]]]: public Call [[withFragment]] ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call [[ague]] ( String [[brightness]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[brightness]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .


--------------------------------------------- Result 576 ---------------------------------------------
Returns the absolute URL of the given request . --> Creates a cleart cookie --> Socre: 1.0

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request request ) { return [[absoluteURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[adorable]] ( Http . Request request ) { return [[adorable]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .


--------------------------------------------- Result 577 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 437 / 127 / 13 / 577:  58%|█████▊    | 577/1000 [5:08:48<3:46:23, 32.11s/it][Succeeded / Failed / Skipped / Total] 437 / 127 / 13 / 577:  58%|█████▊    | 578/1000 [5:09:06<3:45:40, 32.09s/it][Succeeded / Failed / Skipped / Total] 438 / 127 / 13 / 578:  58%|█████▊    | 578/1000 [5:09:06<3:45:40, 32.09s/it][Succeeded / Failed / Skipped / Total] 438 / 127 / 13 / 578:  58%|█████▊    | 579/1000 [5:09:37<3:45:07, 32.09s/it][Succeeded / Failed / Skipped / Total] 438 / 128 / 13 / 579:  58%|█████▊    | 579/1000 [5:09:37<3:45:07, 32.09s/it][Succeeded / Failed / Skipped / Total] 438 / 128 / 13 / 579:  58%|█████▊    | 580/1000 [5:09:51<3:44:22, 32.05s/it][Succeeded / Failed / Skipped / Total] 439 / 128 / 13 / 580:  58%|█████▊    | 580/1000 [5:09:51<3:44:22, 32.05s/it][Succeeded / Failed / Skipped / Total] 439 / 128 / 13 / 580:  58%|█████▊    | 581/1000 [5:10:16<3:43:46, 32.04s/it][Succeeded / Failed / Skipped / Total] 440 / 128 / 13 / 581:  58%|█████▊    | 581/1000 [5:10:16<3:43:46, 32.04s/it][Succeeded / Failed / Skipped / Total] 440 / 128 / 13 / 581:  58%|█████▊    | 582/1000 [5:10:30<3:43:00, 32.01s/it][Succeeded / Failed / Skipped / Total] 441 / 128 / 13 / 582:  58%|█████▊    | 582/1000 [5:10:30<3:43:00, 32.01s/it][Succeeded / Failed / Skipped / Total] 441 / 128 / 13 / 582:  58%|█████▊    | 583/1000 [5:10:43<3:42:15, 31.98s/it][Succeeded / Failed / Skipped / Total] 442 / 128 / 13 / 583:  58%|█████▊    | 583/1000 [5:10:43<3:42:15, 31.98s/it][Succeeded / Failed / Skipped / Total] 442 / 128 / 13 / 583:  58%|█████▊    | 584/1000 [5:10:57<3:41:30, 31.95s/it][Succeeded / Failed / Skipped / Total] 443 / 128 / 13 / 584:  58%|█████▊    | 584/1000 [5:10:57<3:41:30, 31.95s/it][Succeeded / Failed / Skipped / Total] 443 / 128 / 13 / 584:  58%|█████▊    | 585/1000 [5:11:36<3:41:03, 31.96s/it][Succeeded / Failed / Skipped / Total] 444 / 128 / 13 / 585:  58%|█████▊    | 585/1000 [5:11:36<3:41:03, 31.96s/it][Succeeded / Failed / Skipped / Total] 444 / 128 / 13 / 585:  59%|█████▊    | 586/1000 [5:12:55<3:41:04, 32.04s/it]Returns the web socket URL . --> Gets the best sellers --> Socre: 1.0

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request request ) { return [[webSocketURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[bestsellers]] ( Http . Request request ) { return [[bestsellers]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .


--------------------------------------------- Result 578 ---------------------------------------------
Returns a function that returns the connection runnable . --> Nicholls runnable --> Socre: 1.0

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectionFunction]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { block . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[nicholls]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { block . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .


--------------------------------------------- Result 579 ---------------------------------------------
Returns a connection function that executes the given connection callable . --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[block]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[connection]] ) { try { return [[block]] . call ( [[connection]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[lockdown]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[relate]] ) { try { return [[lockdown]] . call ( [[relate]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .


--------------------------------------------- Result 580 ---------------------------------------------
Creates a new server instance . --> Start serving requests --> Socre: 1.0

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode mode , int port , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( port ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[aki]] ( Mode mode , int port , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( port ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .


--------------------------------------------- Result 581 ---------------------------------------------
Returns the JSON representation of the given object . --> Tamara node --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[tamara]] ( final Object [[accuracy]] ) { try { return mapper ( ) . valueToTree ( [[accuracy]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .


--------------------------------------------- Result 582 ---------------------------------------------
Converts a JsonNode into a Java object . --> From json . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[como]] > [[como]] fromJson ( JsonNode json , Class < [[como]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value


--------------------------------------------- Result 583 ---------------------------------------------
Parse a string into a JsonNode . --> Build chisholm tree --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[parse]] ( String src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[chisholm]] ( String src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .


--------------------------------------------- Result 584 ---------------------------------------------
Creates a JsonNode from an input stream . --> Parse input stream --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode parse ( java . io . InputStream [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode parse ( java . io . InputStream [[rhys]] ) { try { return mapper ( ) . readTree ( [[rhys]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .


--------------------------------------------- Result 585 ---------------------------------------------
Relative path relative to target path --> Information about an argument --> Socre: 1.0

[[[[Adv]]]]: public static String [[relative]] ( String [[startPath]] , String [[targetPath]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[about]] ( String [[atter]] , String [[arrondissement]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .


--------------------------------------------- Result 586 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 445 / 128 / 13 / 586:  59%|█████▊    | 586/1000 [5:12:55<3:41:04, 32.04s/it][Succeeded / Failed / Skipped / Total] 445 / 128 / 13 / 586:  59%|█████▊    | 587/1000 [5:13:10<3:40:20, 32.01s/it][Succeeded / Failed / Skipped / Total] 446 / 128 / 13 / 587:  59%|█████▊    | 587/1000 [5:13:10<3:40:20, 32.01s/it][Succeeded / Failed / Skipped / Total] 446 / 128 / 13 / 587:  59%|█████▉    | 588/1000 [5:14:00<3:40:01, 32.04s/it][Succeeded / Failed / Skipped / Total] 447 / 128 / 13 / 588:  59%|█████▉    | 588/1000 [5:14:00<3:40:01, 32.04s/it][Succeeded / Failed / Skipped / Total] 447 / 128 / 13 / 588:  59%|█████▉    | 589/1000 [5:15:10<3:39:55, 32.11s/it][Succeeded / Failed / Skipped / Total] 447 / 129 / 13 / 589:  59%|█████▉    | 589/1000 [5:15:10<3:39:55, 32.11s/it][Succeeded / Failed / Skipped / Total] 447 / 129 / 13 / 589:  59%|█████▉    | 590/1000 [5:15:28<3:39:14, 32.08s/it][Succeeded / Failed / Skipped / Total] 448 / 129 / 13 / 590:  59%|█████▉    | 590/1000 [5:15:28<3:39:14, 32.08s/it][Succeeded / Failed / Skipped / Total] 448 / 129 / 13 / 590:  59%|█████▉    | 591/1000 [5:15:43<3:38:29, 32.05s/it][Succeeded / Failed / Skipped / Total] 449 / 129 / 13 / 591:  59%|█████▉    | 591/1000 [5:15:43<3:38:29, 32.05s/it][Succeeded / Failed / Skipped / Total] 449 / 129 / 13 / 591:  59%|█████▉    | 592/1000 [5:15:58<3:37:45, 32.02s/it]Returns canonical path . --> At the moment we are at the end --> Socre: 1.0

[[[[Adv]]]]: public static String [[canonical]] ( String url ) { String [ ] [[urlPath]] = toSegments ( url ) ; Stack < String > [[canonical]] = new Stack <> ( ) ; for ( String comp : [[urlPath]] ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[canonical]] . empty ( ) && [[canonical]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[canonical]] . push ( comp ) ; else [[canonical]] . pop ( ) ; } String [[prefixSep]] = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return [[prefixSep]] + [[canonical]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String [[até]] ( String url ) { String [ ] [[bitter]] = toSegments ( url ) ; Stack < String > [[até]] = new Stack <> ( ) ; for ( String comp : [[bitter]] ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[até]] . empty ( ) && [[até]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[até]] . push ( comp ) ; else [[até]] . pop ( ) ; } String [[landlubber]] = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return [[landlubber]] + [[até]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .


--------------------------------------------- Result 587 ---------------------------------------------
Returns a list of displayable constraints . --> Transponder methods --> Socre: 1.0

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > constraints ) { return constraints . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[transponder]] ( Set < ConstraintDescriptor < ? > > constraints ) { return constraints . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[transponder]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .


--------------------------------------------- Result 588 ---------------------------------------------
Returns a tuple of displayable constraints . --> Parse the borders and attributes --> Socre: 1.0

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[displayableConstraint]] ( ConstraintDescriptor < ? > [[constraint]] ) { final Display [[displayAnnotation]] = [[constraint]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[displayAnnotation]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[displayAnnotation]] . attributes ( ) ) . map ( attr -> [[constraint]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[adc]] ( ConstraintDescriptor < ? > [[borders]] ) { final Display [[carlotta]] = [[borders]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[carlotta]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[carlotta]] . attributes ( ) ) . map ( attr -> [[borders]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .


--------------------------------------------- Result 589 ---------------------------------------------
Timeout the given completion stage . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > [[stage]] , final long [[amount]] , final TimeUnit unit ) { requireNonNull ( [[stage]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( [[amount]] , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> [[stage]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > [[internships]] , final long [[digits]] , final TimeUnit unit ) { requireNonNull ( [[internships]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( [[digits]] , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> [[internships]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .


--------------------------------------------- Result 590 ---------------------------------------------
Checks if the class array is assignable . --> Compare two class arrays --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return False ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[isAssignable]] ( classArray [ i ] , toClassArray [ i ] , autoboxing ) == False ) { return False ; } } return True ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[arbus]] ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return False ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[arbus]] ( classArray [ i ] , toClassArray [ i ] , autoboxing ) == False ) { return False ; } } return True ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .


--------------------------------------------- Result 591 ---------------------------------------------
Parses cron expression --> Transitive to date --> Socre: 1.0

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String cron ) { try { return new CronExpression ( cron ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[transitive]] ( String cron ) { try { return new CronExpression ( cron ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .


--------------------------------------------- Result 592 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 450 / 129 / 13 / 592:  59%|█████▉    | 592/1000 [5:15:58<3:37:45, 32.02s/it][Succeeded / Failed / Skipped / Total] 450 / 129 / 13 / 592:  59%|█████▉    | 593/1000 [5:17:07<3:37:39, 32.09s/it][Succeeded / Failed / Skipped / Total] 450 / 130 / 13 / 593:  59%|█████▉    | 593/1000 [5:17:07<3:37:39, 32.09s/it][Succeeded / Failed / Skipped / Total] 450 / 130 / 13 / 593:  59%|█████▉    | 594/1000 [5:17:36<3:37:04, 32.08s/it][Succeeded / Failed / Skipped / Total] 450 / 131 / 13 / 594:  59%|█████▉    | 594/1000 [5:17:36<3:37:04, 32.08s/it][Succeeded / Failed / Skipped / Total] 450 / 131 / 13 / 594:  60%|█████▉    | 595/1000 [5:17:50<3:36:20, 32.05s/it][Succeeded / Failed / Skipped / Total] 451 / 131 / 13 / 595:  60%|█████▉    | 595/1000 [5:17:50<3:36:20, 32.05s/it][Succeeded / Failed / Skipped / Total] 451 / 131 / 13 / 595:  60%|█████▉    | 596/1000 [5:18:02<3:35:35, 32.02s/it][Succeeded / Failed / Skipped / Total] 452 / 131 / 13 / 596:  60%|█████▉    | 596/1000 [5:18:02<3:35:35, 32.02s/it][Succeeded / Failed / Skipped / Total] 452 / 131 / 13 / 596:  60%|█████▉    | 597/1000 [5:18:27<3:34:58, 32.01s/it][Succeeded / Failed / Skipped / Total] 453 / 131 / 13 / 597:  60%|█████▉    | 597/1000 [5:18:27<3:34:58, 32.01s/it][Succeeded / Failed / Skipped / Total] 453 / 131 / 13 / 597:  60%|█████▉    | 598/1000 [5:18:42<3:34:14, 31.98s/it][Succeeded / Failed / Skipped / Total] 453 / 132 / 13 / 598:  60%|█████▉    | 598/1000 [5:18:42<3:34:14, 31.98s/it][Succeeded / Failed / Skipped / Total] 453 / 132 / 13 / 598:  60%|█████▉    | 599/1000 [5:18:58<3:33:32, 31.95s/it][Succeeded / Failed / Skipped / Total] 453 / 133 / 13 / 599:  60%|█████▉    | 599/1000 [5:18:58<3:33:32, 31.95s/it][Succeeded / Failed / Skipped / Total] 453 / 133 / 13 / 599:  60%|██████    | 600/1000 [5:19:24<3:32:56, 31.94s/it][Succeeded / Failed / Skipped / Total] 453 / 134 / 13 / 600:  60%|██████    | 600/1000 [5:19:24<3:32:56, 31.94s/it][Succeeded / Failed / Skipped / Total] 453 / 134 / 13 / 600:  60%|██████    | 601/1000 [5:19:49<3:32:19, 31.93s/it][Succeeded / Failed / Skipped / Total] 453 / 135 / 13 / 601:  60%|██████    | 601/1000 [5:19:49<3:32:19, 31.93s/it][Succeeded / Failed / Skipped / Total] 453 / 135 / 13 / 601:  60%|██████    | 602/1000 [5:20:03<3:31:36, 31.90s/it][Succeeded / Failed / Skipped / Total] 453 / 136 / 13 / 602:  60%|██████    | 602/1000 [5:20:03<3:31:36, 31.90s/it][Succeeded / Failed / Skipped / Total] 453 / 136 / 13 / 602:  60%|██████    | 603/1000 [5:20:30<3:31:00, 31.89s/it]Calculates the next interval for a cron expression . --> get cron interval --> Socre: 1.0

[[[[Adv]]]]: public static long cronInterval ( String [[cron]] , Date date ) { try { return new CronExpression ( [[cron]] ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long cronInterval ( String [[tort]] , Date date ) { try { return new CronExpression ( [[tort]] ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[tort]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .


--------------------------------------------- Result 593 ---------------------------------------------
Creates an ahc client . --> [[[FAILED]]]

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig config , AhcHttpCache cache , Materializer [[materializer]] ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , [[materializer]] ) ; return new AhcWSClient ( client , [[materializer]] ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig config , AhcHttpCache cache , Materializer [[sitcom]] ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , [[sitcom]] ) ; return new AhcWSClient ( client , [[sitcom]] ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .


--------------------------------------------- Result 594 ---------------------------------------------
Configures the GuiceBuilder with the given context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context [[context]] ) { return initialBuilder . in ( [[context]] . environment ( ) ) . loadConfig ( [[context]] . initialConfig ( ) ) . overrides ( overrides ( [[context]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[constructors]] ( ApplicationLoader . Context [[ambient]] ) { return initialBuilder . in ( [[ambient]] . environment ( ) ) . loadConfig ( [[ambient]] . initialConfig ( ) ) . overrides ( overrides ( [[ambient]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .


--------------------------------------------- Result 595 ---------------------------------------------
Render a todo --> Handle ALO operations --> Socre: 1.0

[[[[Adv]]]]: public static Result [[TODO]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result [[ALGO]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .


--------------------------------------------- Result 596 ---------------------------------------------
Set a session attribute --> Set an amount of amount to storage --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void session ( String key , String [[value]] ) { session ( ) . put ( key , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void session ( String key , String [[amount]] ) { session ( ) . put ( key , [[amount]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .


--------------------------------------------- Result 597 ---------------------------------------------
Flash to flash --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void flash ( String key , String [[value]] ) { flash ( ) . put ( key , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void flash ( String key , String [[assess]] ) { flash ( ) . put ( key , [[assess]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .


--------------------------------------------- Result 598 ---------------------------------------------
Returns a BindingKey with the given instance . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[spreads]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .


--------------------------------------------- Result 599 ---------------------------------------------
Returns a binding key with the specified annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[expands]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .


--------------------------------------------- Result 600 ---------------------------------------------
Converts this binding to a Java Binding . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Class < ? extends T > [[implementation]] ) { return underlying . to ( [[implementation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > [[à]] ( final Class < ? extends T > [[fulfilling]] ) { return underlying . to ( [[fulfilling]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .


--------------------------------------------- Result 601 ---------------------------------------------
Converts this binding to a Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > [[provider]] ) { return underlying . to ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[à]] ( final Provider < ? extends T > [[contractor]] ) { return underlying . to ( [[contractor]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .


--------------------------------------------- Result 602 ---------------------------------------------
Converts the underlying Binding to a Java Binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[broadening]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .


--------------------------------------------- Result 603 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 454 / 136 / 13 / 603:  60%|██████    | 603/1000 [5:20:30<3:31:00, 31.89s/it][Succeeded / Failed / Skipped / Total] 454 / 136 / 13 / 603:  60%|██████    | 604/1000 [5:20:58<3:30:26, 31.88s/it][Succeeded / Failed / Skipped / Total] 455 / 136 / 13 / 604:  60%|██████    | 604/1000 [5:20:58<3:30:26, 31.88s/it][Succeeded / Failed / Skipped / Total] 455 / 136 / 13 / 604:  60%|██████    | 605/1000 [5:21:12<3:29:42, 31.86s/it][Succeeded / Failed / Skipped / Total] 456 / 136 / 13 / 605:  60%|██████    | 605/1000 [5:21:12<3:29:42, 31.86s/it][Succeeded / Failed / Skipped / Total] 456 / 136 / 13 / 605:  61%|██████    | 606/1000 [5:22:18<3:29:33, 31.91s/it][Succeeded / Failed / Skipped / Total] 457 / 136 / 13 / 606:  61%|██████    | 606/1000 [5:22:18<3:29:33, 31.91s/it][Succeeded / Failed / Skipped / Total] 457 / 136 / 13 / 606:  61%|██████    | 607/1000 [5:22:45<3:28:58, 31.90s/it][Succeeded / Failed / Skipped / Total] 457 / 137 / 13 / 607:  61%|██████    | 607/1000 [5:22:45<3:28:58, 31.90s/it][Succeeded / Failed / Skipped / Total] 457 / 137 / 13 / 607:  61%|██████    | 608/1000 [5:23:16<3:28:25, 31.90s/it][Succeeded / Failed / Skipped / Total] 458 / 137 / 13 / 608:  61%|██████    | 608/1000 [5:23:16<3:28:25, 31.90s/it][Succeeded / Failed / Skipped / Total] 458 / 137 / 13 / 608:  61%|██████    | 609/1000 [5:24:31<3:28:21, 31.97s/it][Succeeded / Failed / Skipped / Total] 458 / 138 / 13 / 609:  61%|██████    | 609/1000 [5:24:31<3:28:21, 31.97s/it][Succeeded / Failed / Skipped / Total] 458 / 138 / 13 / 609:  61%|██████    | 610/1000 [5:25:01<3:27:48, 31.97s/it][Succeeded / Failed / Skipped / Total] 459 / 138 / 13 / 610:  61%|██████    | 610/1000 [5:25:01<3:27:48, 31.97s/it][Succeeded / Failed / Skipped / Total] 459 / 138 / 13 / 610:  61%|██████    | 611/1000 [5:25:17<3:27:06, 31.94s/it]Converts the underlying BindingKey to the given key . --> Reassign AvroindingKey --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[al]] ( final BindingKey < ? extends T > [[hinge]] ) { return underlying . to ( [[hinge]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .


--------------------------------------------- Result 604 ---------------------------------------------
Converts the underlying value into a Java Binding . --> then it s cast --> Socre: 1.0

[[[[Adv]]]]: public < P [[extends]] Provider < ? extends T > > Binding < T > toProvider ( final Class < P > [[provider]] ) { return underlying . toProvider ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P [[lengthen]] Provider < ? extends T > > Binding < T > toProvider ( final Class < P > [[purchaser]] ) { return underlying . toProvider ( [[purchaser]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .


--------------------------------------------- Result 605 ---------------------------------------------
Returns a list of available languages . --> Return a list of available languages --> Socre: 1.0

[[[[Adv]]]]: public static List < Lang > availables ( Application [[app]] ) { play . api . i18n . Langs langs = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > availables ( Application [[apt]] ) { play . api . i18n . Langs langs = [[apt]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .


--------------------------------------------- Result 606 ---------------------------------------------
Get the preferred language for a given application --> get a kth language --> Socre: 1.0

[[[[Adv]]]]: public static Lang [[preferred]] ( Application app , List < Lang > availableLangs ) { play . api . i18n . Langs [[langs]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > [[stream]] = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = [[stream]] . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( [[langs]] . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[akhtar]] ( Application app , List < Lang > availableLangs ) { play . api . i18n . Langs [[snu]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > [[fontaine]] = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = [[fontaine]] . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( [[snu]] . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .


--------------------------------------------- Result 607 ---------------------------------------------
Creates a new EvolutionsReader instance . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[dopamine]] ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .


--------------------------------------------- Result 608 ---------------------------------------------
Creates an instance of Evolutions . --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[forDefault]] ( Evolution ... [[evolutions]] ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( [[evolutions]] ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . [[cheated]] . EvolutionsReader [[decipher]] ( Evolution ... [[cheated]] ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( [[cheated]] ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .


--------------------------------------------- Result 609 ---------------------------------------------
Cleans all the executions of a database . --> [[[FAILED]]]

[[[[Adv]]]]: public static void cleanupEvolutions ( Database [[database]] , boolean [[autocommit]] , String schema ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( [[database]] . asScala ( ) , schema ) ; evolutions . evolve ( evolutions . resetScripts ( ) , [[autocommit]] ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void cleanupEvolutions ( Database [[rudiments]] , boolean [[plundering]] , String schema ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( [[rudiments]] . asScala ( ) , schema ) ; evolutions . evolve ( evolutions . resetScripts ( ) , [[plundering]] ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .


--------------------------------------------- Result 610 ---------------------------------------------
Attaches a config loader to the application . --> Attaches a challenge to an environment --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[withConfigLoader]] ( Function < Environment , Config > [[load]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( [[load]] . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[chouchou]] ( Function < Environment , Config > [[accountability]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( [[accountability]] . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .


--------------------------------------------- Result 611 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 460 / 138 / 13 / 611:  61%|██████    | 611/1000 [5:25:17<3:27:06, 31.94s/it][Succeeded / Failed / Skipped / Total] 460 / 138 / 13 / 611:  61%|██████    | 612/1000 [5:25:48<3:26:33, 31.94s/it][Succeeded / Failed / Skipped / Total] 461 / 138 / 13 / 612:  61%|██████    | 612/1000 [5:25:48<3:26:33, 31.94s/it][Succeeded / Failed / Skipped / Total] 461 / 138 / 13 / 612:  61%|██████▏   | 613/1000 [5:26:02<3:25:50, 31.91s/it][Succeeded / Failed / Skipped / Total] 462 / 138 / 13 / 613:  61%|██████▏   | 613/1000 [5:26:02<3:25:50, 31.91s/it][Succeeded / Failed / Skipped / Total] 462 / 138 / 13 / 613:  61%|██████▏   | 614/1000 [5:26:28<3:25:14, 31.90s/it][Succeeded / Failed / Skipped / Total] 463 / 138 / 13 / 614:  61%|██████▏   | 614/1000 [5:26:28<3:25:14, 31.90s/it][Succeeded / Failed / Skipped / Total] 463 / 138 / 13 / 614:  62%|██████▏   | 615/1000 [5:26:56<3:24:39, 31.90s/it][Succeeded / Failed / Skipped / Total] 464 / 138 / 13 / 615:  62%|██████▏   | 615/1000 [5:26:56<3:24:39, 31.90s/it][Succeeded / Failed / Skipped / Total] 464 / 138 / 13 / 615:  62%|██████▏   | 616/1000 [5:27:28<3:24:08, 31.90s/it][Succeeded / Failed / Skipped / Total] 464 / 139 / 13 / 616:  62%|██████▏   | 616/1000 [5:27:28<3:24:08, 31.90s/it][Succeeded / Failed / Skipped / Total] 464 / 139 / 13 / 616:  62%|██████▏   | 617/1000 [5:27:54<3:23:33, 31.89s/it][Succeeded / Failed / Skipped / Total] 465 / 139 / 13 / 617:  62%|██████▏   | 617/1000 [5:27:54<3:23:33, 31.89s/it][Succeeded / Failed / Skipped / Total] 465 / 139 / 13 / 617:  62%|██████▏   | 618/1000 [5:28:08<3:22:49, 31.86s/it][Succeeded / Failed / Skipped / Total] 466 / 139 / 13 / 618:  62%|██████▏   | 618/1000 [5:28:08<3:22:49, 31.86s/it][Succeeded / Failed / Skipped / Total] 466 / 139 / 13 / 618:  62%|██████▏   | 619/1000 [5:28:27<3:22:10, 31.84s/it][Succeeded / Failed / Skipped / Total] 467 / 139 / 13 / 619:  62%|██████▏   | 619/1000 [5:28:27<3:22:10, 31.84s/it][Succeeded / Failed / Skipped / Total] 467 / 139 / 13 / 619:  62%|██████▏   | 620/1000 [5:29:26<3:21:54, 31.88s/it]Load a module from the application . --> Loads Guiceable modules from Guice --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[withModuleLoader]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[admired]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .


--------------------------------------------- Result 612 ---------------------------------------------
Configures the application with the given modules . --> Loads all blacklisted words --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[borne]] ( GuiceableModule ... [[swords]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[swords]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .


--------------------------------------------- Result 613 ---------------------------------------------
Loads the given modules . --> Loads all blacklisted words --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... [[modules]] ) { return load ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... [[swords]] ) { return load ( Guiceable . [[swords]] ( [[swords]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .


--------------------------------------------- Result 614 ---------------------------------------------
Loads the given modules . --> Rettable resources --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Module ... [[modules]] ) { return [[load]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[brunt]] ( play . api . inject . Module ... [[clusters]] ) { return [[brunt]] ( Guiceable . [[clusters]] ( [[clusters]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .


--------------------------------------------- Result 615 ---------------------------------------------
Load the Guice application with the given bindings . --> Declarative Services method for undeployation --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[load]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder [[embarkation]] ( play . api . inject . Binding < ? > ... [[ties]] ) { return [[embarkation]] ( Guiceable . [[ties]] ( [[ties]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .


--------------------------------------------- Result 616 ---------------------------------------------
Create a new Guice application builder . --> [[[FAILED]]]

[[[[Adv]]]]: protected GuiceApplicationBuilder [[newBuilder]] ( play . api . inject . guice . GuiceApplicationBuilder [[builder]] ) { return new GuiceApplicationBuilder ( [[builder]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder [[loudmouth]] ( play . api . inject . guice . GuiceApplicationBuilder [[manufacture]] ) { return new GuiceApplicationBuilder ( [[manufacture]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .


--------------------------------------------- Result 617 ---------------------------------------------
Encode the cookie . --> must be public --> Socre: 1.0

[[[[Adv]]]]: public String [[encode]] ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; [[encode]] ( buf , [[cookie]] ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String [[scrambler]] ( Cookie [[puddings]] ) { if ( [[puddings]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; [[scrambler]] ( buf , [[puddings]] ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .


--------------------------------------------- Result 618 ---------------------------------------------
Return EntityManager --> On top level stack --> Socre: 1.0

[[[[Adv]]]]: public EntityManager [[em]] ( ) { Deque < EntityManager > ems = this . emStack ( True ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager [[on]] ( ) { Deque < EntityManager > ems = this . emStack ( True ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .


--------------------------------------------- Result 619 ---------------------------------------------
Gets the current entity manager stack . --> Delegate to current entity manager --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[emStack]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[neato]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .


--------------------------------------------- Result 620 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 467 / 140 / 13 / 620:  62%|██████▏   | 620/1000 [5:29:26<3:21:54, 31.88s/it][Succeeded / Failed / Skipped / Total] 467 / 140 / 13 / 620:  62%|██████▏   | 621/1000 [5:29:59<3:21:23, 31.88s/it][Succeeded / Failed / Skipped / Total] 468 / 140 / 13 / 621:  62%|██████▏   | 621/1000 [5:29:59<3:21:23, 31.88s/it][Succeeded / Failed / Skipped / Total] 468 / 140 / 13 / 621:  62%|██████▏   | 622/1000 [5:30:33<3:20:53, 31.89s/it][Succeeded / Failed / Skipped / Total] 469 / 140 / 13 / 622:  62%|██████▏   | 622/1000 [5:30:33<3:20:53, 31.89s/it][Succeeded / Failed / Skipped / Total] 469 / 140 / 13 / 622:  62%|██████▏   | 623/1000 [5:32:13<3:21:02, 32.00s/it][Succeeded / Failed / Skipped / Total] 470 / 140 / 13 / 623:  62%|██████▏   | 623/1000 [5:32:13<3:21:02, 32.00s/it][Succeeded / Failed / Skipped / Total] 470 / 140 / 13 / 623:  62%|██████▏   | 624/1000 [5:33:01<3:20:40, 32.02s/it][Succeeded / Failed / Skipped / Total] 471 / 140 / 13 / 624:  62%|██████▏   | 624/1000 [5:33:01<3:20:40, 32.02s/it][Succeeded / Failed / Skipped / Total] 471 / 140 / 13 / 624:  62%|██████▎   | 625/1000 [5:33:27<3:20:04, 32.01s/it][Succeeded / Failed / Skipped / Total] 471 / 141 / 13 / 625:  62%|██████▎   | 625/1000 [5:33:27<3:20:04, 32.01s/it][Succeeded / Failed / Skipped / Total] 471 / 141 / 13 / 625:  63%|██████▎   | 626/1000 [5:33:41<3:19:21, 31.98s/it][Succeeded / Failed / Skipped / Total] 472 / 141 / 13 / 626:  63%|██████▎   | 626/1000 [5:33:41<3:19:21, 31.98s/it][Succeeded / Failed / Skipped / Total] 472 / 141 / 13 / 626:  63%|██████▎   | 627/1000 [5:33:56<3:18:39, 31.96s/it]Pushes or pops an entity manager . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager em , boolean [[threadLocalFallback]] ) { Deque < EntityManager > ems = this . emStack ( [[threadLocalFallback]] ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[trev]] ( EntityManager em , boolean [[belmonte]] ) { Deque < EntityManager > ems = this . emStack ( [[belmonte]] ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .


--------------------------------------------- Result 621 ---------------------------------------------
Disallows a flow through a splitter --> Zorg --> Socre: 1.0

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[bypassWith]] ( Function < In , F . Either < FlowIn , Out > > [[splitter]] , Flow < FlowIn , Out , ? > flow ) { return [[bypassWith]] ( Flow . < In > create ( ) . map ( [[splitter]] :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[zorg]] ( Function < In , F . Either < FlowIn , Out > > [[mixer]] , Flow < FlowIn , Out , ? > flow ) { return [[zorg]] ( Flow . < In > create ( ) . map ( [[mixer]] :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .


--------------------------------------------- Result 622 ---------------------------------------------
Disconnects a flow in a single flow . --> Disallow custom merge strategy --> Socre: 1.0

[[[[Adv]]]]: public static < [[In]] , FlowIn , [[Out]] > Flow < [[In]] , [[Out]] , ? > bypassWith ( Flow < [[In]] , F . Either < FlowIn , [[Out]] > , ? > splitter , Graph < UniformFanInShape < [[Out]] , [[Out]] > , ? > mergeStrategy , Flow < FlowIn , [[Out]] , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , [[Out]] > , [[Out]] > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < [[Durante]] , FlowIn , [[Aside]] > Flow < [[Durante]] , [[Aside]] , ? > bypassWith ( Flow < [[Durante]] , F . Either < FlowIn , [[Aside]] > , ? > splitter , Graph < UniformFanInShape < [[Aside]] , [[Aside]] > , ? > mergeStrategy , Flow < FlowIn , [[Aside]] , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , [[Aside]] > , [[Aside]] > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .


--------------------------------------------- Result 623 ---------------------------------------------
Injects a flow into a flow . --> low level of fixture --> Socre: 1.0

[[[[Adv]]]]: public static < In , [[Out]] > Flow < In , [[Out]] , ? > [[actorRef]] ( Function < ActorRef , Props > [[props]] , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , [[Out]] > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return [[props]] . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < In , [[Outpatient]] > Flow < In , [[Outpatient]] , ? > [[hie]] ( Function < ActorRef , Props > [[fixtures]] , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , [[Outpatient]] > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return [[fixtures]] . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .


--------------------------------------------- Result 624 ---------------------------------------------
Converts error arguments to default message sources . --> Turns a bunch of objects into a list --> Socre: 1.0

[[[[Adv]]]]: private List < Object > [[convertErrorArguments]] ( Object [ ] [[arguments]] ) { if ( [[arguments]] == null ) { return Collections . emptyList ( ) ; } List < Object > [[converted]] = Arrays . stream ( [[arguments]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[converted]] ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > [[anhalt]] ( Object [ ] [[feuding]] ) { if ( [[feuding]] == null ) { return Collections . emptyList ( ) ; } List < Object > [[apostate]] = Arrays . stream ( [[feuding]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[apostate]] ) ; }
[[[[Nl]]]]: Convert the error arguments .


--------------------------------------------- Result 625 ---------------------------------------------
Fills the form with the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: public Form < T > [[fill]] ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > [[reload]] ( T [[extent]] ) { if ( [[extent]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[extent]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .


--------------------------------------------- Result 626 ---------------------------------------------
Returns the global errors . --> Return the fairview --> Socre: 1.0

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[fairview]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .


--------------------------------------------- Result 627 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 473 / 141 / 13 / 627:  63%|██████▎   | 627/1000 [5:33:56<3:18:39, 31.96s/it][Succeeded / Failed / Skipped / Total] 473 / 141 / 13 / 627:  63%|██████▎   | 628/1000 [5:34:11<3:17:57, 31.93s/it][Succeeded / Failed / Skipped / Total] 474 / 141 / 13 / 628:  63%|██████▎   | 628/1000 [5:34:11<3:17:57, 31.93s/it][Succeeded / Failed / Skipped / Total] 474 / 141 / 13 / 628:  63%|██████▎   | 629/1000 [5:34:38<3:17:22, 31.92s/it][Succeeded / Failed / Skipped / Total] 475 / 141 / 13 / 629:  63%|██████▎   | 629/1000 [5:34:38<3:17:22, 31.92s/it][Succeeded / Failed / Skipped / Total] 475 / 141 / 13 / 629:  63%|██████▎   | 630/1000 [5:34:53<3:16:40, 31.89s/it][Succeeded / Failed / Skipped / Total] 475 / 142 / 13 / 630:  63%|██████▎   | 630/1000 [5:34:53<3:16:40, 31.89s/it][Succeeded / Failed / Skipped / Total] 475 / 142 / 13 / 630:  63%|██████▎   | 631/1000 [5:34:53<3:15:50, 31.84s/it][Succeeded / Failed / Skipped / Total] 475 / 142 / 14 / 631:  63%|██████▎   | 631/1000 [5:34:53<3:15:50, 31.84s/it][Succeeded / Failed / Skipped / Total] 475 / 142 / 14 / 631:  63%|██████▎   | 632/1000 [5:35:05<3:15:06, 31.81s/it][Succeeded / Failed / Skipped / Total] 476 / 142 / 14 / 632:  63%|██████▎   | 632/1000 [5:35:05<3:15:06, 31.81s/it][Succeeded / Failed / Skipped / Total] 476 / 142 / 14 / 632:  63%|██████▎   | 633/1000 [5:35:19<3:14:24, 31.78s/it][Succeeded / Failed / Skipped / Total] 476 / 143 / 14 / 633:  63%|██████▎   | 633/1000 [5:35:19<3:14:24, 31.78s/it][Succeeded / Failed / Skipped / Total] 476 / 143 / 14 / 633:  63%|██████▎   | 634/1000 [5:35:31<3:13:41, 31.75s/it][Succeeded / Failed / Skipped / Total] 476 / 144 / 14 / 634:  63%|██████▎   | 634/1000 [5:35:31<3:13:41, 31.75s/it][Succeeded / Failed / Skipped / Total] 476 / 144 / 14 / 634:  64%|██████▎   | 635/1000 [5:35:44<3:12:59, 31.72s/it][Succeeded / Failed / Skipped / Total] 477 / 144 / 14 / 635:  64%|██████▎   | 635/1000 [5:35:44<3:12:59, 31.72s/it][Succeeded / Failed / Skipped / Total] 477 / 144 / 14 / 635:  64%|██████▎   | 636/1000 [5:36:39<3:12:40, 31.76s/it]Returns the message as JSON . --> Can be used to render an error --> Socre: 1.0

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[hellhound]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .


--------------------------------------------- Result 628 ---------------------------------------------
Returns the value for the given key . --> Returns an object with a given key . --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[appraised]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value


--------------------------------------------- Result 629 ---------------------------------------------
Fills the form with the given value . --> Returns complement --> Socre: 1.0

[[[[Adv]]]]: public DynamicForm [[fill]] ( Map < String , Object > [[value]] ) { Form < Dynamic > form = super . fill ( new Dynamic ( [[value]] ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . [[value]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm [[complement]] ( Map < String , Object > [[emphasis]] ) { Form < Dynamic > form = super . fill ( new Dynamic ( [[emphasis]] ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . [[emphasis]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .


--------------------------------------------- Result 630 ---------------------------------------------
Parse text to given class . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[n]] > [[n]] parse ( String text , Class < [[n]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .


--------------------------------------------- Result 631 ---------------------------------------------
Converts the given text into the given type . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T parse ( Field field , String text ) { return ( T ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field


--------------------------------------------- Result 632 ---------------------------------------------
Print object . --> Print a given type --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[Cable]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[Cable]] . class ) ) { return conversion . convert ( t , [[Cable]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .


--------------------------------------------- Result 633 ---------------------------------------------
Returns a representation of a field . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[Ribbon]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .


--------------------------------------------- Result 634 ---------------------------------------------
Print value . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[Channels]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[Channels]] . class ) ) ) { return ( [[Channels]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[Channels]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[Channels]] . class ) ) { return conversion . convert ( t , [[Channels]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .


--------------------------------------------- Result 635 ---------------------------------------------
Registers converter for optional string types . --> Enters the formatters . --> Socre: 1.0

[[[[Adv]]]]: private Formatters [[registerOptional]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters [[berke]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String


--------------------------------------------- Result 636 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 477 / 145 / 14 / 636:  64%|██████▎   | 636/1000 [5:36:39<3:12:40, 31.76s/it][Succeeded / Failed / Skipped / Total] 477 / 145 / 14 / 636:  64%|██████▎   | 637/1000 [5:38:02<3:12:38, 31.84s/it][Succeeded / Failed / Skipped / Total] 478 / 145 / 14 / 637:  64%|██████▎   | 637/1000 [5:38:02<3:12:38, 31.84s/it][Succeeded / Failed / Skipped / Total] 478 / 145 / 14 / 637:  64%|██████▍   | 638/1000 [5:39:08<3:12:25, 31.89s/it]Registers a Formatter for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[Formatters]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[text]] , Locale locale ) throws java . [[text]] . ParseException { return formatter . parse ( [[text]] , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > [[Booby]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[textbook]] , Locale locale ) throws java . [[textbook]] . ParseException { return formatter . parse ( [[textbook]] , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .


--------------------------------------------- Result 637 ---------------------------------------------
Registers a converter . --> Register a converter for a given Hardship --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends [[Annotation]] , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends [[Annotation]] > [[annotationType]] = ( Class < ? extends [[Annotation]] > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[types]] = new HashSet <> ( ) ; [[types]] . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return [[types]] ; } public boolean matches ( TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { return ( [[sourceType]] . getAnnotation ( [[annotationType]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { final A [[a]] = ( A ) [[sourceType]] . getAnnotation ( [[annotationType]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( [[a]] , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[sourceType]] , targetType , source , ex ) ; } } public String toString ( ) { return "@" + [[annotationType]] . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[types]] = new HashSet <> ( ) ; [[types]] . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return [[types]] ; } public boolean matches ( TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( [[annotationType]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { final A [[a]] = ( A ) targetType . getAnnotation ( [[annotationType]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( [[a]] , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[sourceType]] , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + [[annotationType]] . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends [[Hardship]] , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends [[Hardship]] > [[vinicius]] = ( Class < ? extends [[Hardship]] > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[bloke]] = new HashSet <> ( ) ; [[bloke]] . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return [[bloke]] ; } public boolean matches ( TypeDescriptor [[anachronism]] , TypeDescriptor targetType ) { return ( [[anachronism]] . getAnnotation ( [[vinicius]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[anachronism]] , TypeDescriptor targetType ) { final A [[at]] = ( A ) [[anachronism]] . getAnnotation ( [[vinicius]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( [[at]] , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[anachronism]] , targetType , source , ex ) ; } } public String toString ( ) { return "@" + [[vinicius]] . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[bloke]] = new HashSet <> ( ) ; [[bloke]] . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return [[bloke]] ; } public boolean matches ( TypeDescriptor [[anachronism]] , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( [[vinicius]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[anachronism]] , TypeDescriptor targetType ) { final A [[at]] = ( A ) targetType . getAnnotation ( [[vinicius]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( [[at]] , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[anachronism]] , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + [[vinicius]] . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .


--------------------------------------------- Result 638 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 478 / 146 / 14 / 638:  64%|██████▍   | 638/1000 [5:39:08<3:12:25, 31.89s/it][Succeeded / Failed / Skipped / Total] 478 / 146 / 14 / 638:  64%|██████▍   | 639/1000 [5:39:24<3:11:44, 31.87s/it][Succeeded / Failed / Skipped / Total] 479 / 146 / 14 / 639:  64%|██████▍   | 639/1000 [5:39:24<3:11:44, 31.87s/it][Succeeded / Failed / Skipped / Total] 479 / 146 / 14 / 639:  64%|██████▍   | 640/1000 [5:40:09<3:11:20, 31.89s/it][Succeeded / Failed / Skipped / Total] 479 / 147 / 14 / 640:  64%|██████▍   | 640/1000 [5:40:09<3:11:20, 31.89s/it][Succeeded / Failed / Skipped / Total] 479 / 147 / 14 / 640:  64%|██████▍   | 641/1000 [5:40:37<3:10:46, 31.88s/it][Succeeded / Failed / Skipped / Total] 479 / 148 / 14 / 641:  64%|██████▍   | 641/1000 [5:40:37<3:10:46, 31.88s/it][Succeeded / Failed / Skipped / Total] 479 / 148 / 14 / 641:  64%|██████▍   | 642/1000 [5:41:09<3:10:14, 31.88s/it][Succeeded / Failed / Skipped / Total] 480 / 148 / 14 / 642:  64%|██████▍   | 642/1000 [5:41:09<3:10:14, 31.88s/it][Succeeded / Failed / Skipped / Total] 480 / 148 / 14 / 642:  64%|██████▍   | 643/1000 [5:41:09<3:09:24, 31.83s/it][Succeeded / Failed / Skipped / Total] 480 / 148 / 15 / 643:  64%|██████▍   | 643/1000 [5:41:09<3:09:24, 31.83s/it][Succeeded / Failed / Skipped / Total] 480 / 148 / 15 / 643:  64%|██████▍   | 644/1000 [5:41:26<3:08:44, 31.81s/it][Succeeded / Failed / Skipped / Total] 481 / 148 / 15 / 644:  64%|██████▍   | 644/1000 [5:41:26<3:08:44, 31.81s/it][Succeeded / Failed / Skipped / Total] 481 / 148 / 15 / 644:  64%|██████▍   | 645/1000 [5:41:43<3:08:05, 31.79s/it]Encode the given cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String [[name]] = [[cookie]] . name ( ) ; final String value = [[cookie]] . value ( ) != null ? [[cookie]] . value ( ) : "" ; validateCookie ( [[name]] , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( [[cookie]] . wrap ( ) ) { addQuoted ( buf , [[name]] , value ) ; } else { add ( buf , [[name]] , value ) ; } if ( [[cookie]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , [[cookie]] . maxAge ( ) ) ; Date expires = [[cookie]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String [[binary]] ( Cookie [[biscotti]] ) { if ( [[biscotti]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String [[nouns]] = [[biscotti]] . name ( ) ; final String value = [[biscotti]] . value ( ) != null ? [[biscotti]] . value ( ) : "" ; validateCookie ( [[nouns]] , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( [[biscotti]] . wrap ( ) ) { addQuoted ( buf , [[nouns]] , value ) ; } else { add ( buf , [[nouns]] , value ) ; } if ( [[biscotti]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , [[biscotti]] . maxAge ( ) ) ; Date expires = [[biscotti]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .


--------------------------------------------- Result 639 ---------------------------------------------
Returns a list of nodes that match the specified node . -->  moisture moisture the node list --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String path , Object node ) { return [[selectNodes]] ( path , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[moisture]] ( String path , Object node ) { return [[moisture]] ( path , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order


--------------------------------------------- Result 640 ---------------------------------------------
Convert a Java list to a Seq . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[pilkington]] ( java . util . List < T > [[checklist]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[checklist]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .


--------------------------------------------- Result 641 ---------------------------------------------
Convert an array into a Seq . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[lettering]] ( T [ ] [[stalls]] ) { return [[lettering]] ( java . util . Arrays . asList ( [[stalls]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .


--------------------------------------------- Result 642 ---------------------------------------------
Converts an array into a Java Seq --> Convenience method for creating mermaids --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... [[array]] ) { return toSeq ( [[array]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[mermaid]] ( T ... [[breadth]] ) { return toSeq ( [[breadth]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .


--------------------------------------------- Result 643 ---------------------------------------------
JacksonAcceptor --> [[[SKIPPED]]]

[[[[Adv]]]]: public static < In , Out > MappedWebSocketAcceptor < In , Out > json ( Class < In > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .


--------------------------------------------- Result 644 ---------------------------------------------
Accepts a web socket . --> Accepts an Accept or Result --> Socre: 1.0

[[[[Adv]]]]: private static < In , Out > [[WebSocket]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[WebSocket]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > [[aleykum]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[aleykum]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .


--------------------------------------------- Result 645 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 482 / 148 / 15 / 645:  64%|██████▍   | 645/1000 [5:41:43<3:08:05, 31.79s/it][Succeeded / Failed / Skipped / Total] 482 / 148 / 15 / 645:  65%|██████▍   | 646/1000 [5:42:13<3:07:31, 31.79s/it][Succeeded / Failed / Skipped / Total] 483 / 148 / 15 / 646:  65%|██████▍   | 646/1000 [5:42:13<3:07:31, 31.79s/it][Succeeded / Failed / Skipped / Total] 483 / 148 / 15 / 646:  65%|██████▍   | 647/1000 [5:42:29<3:06:51, 31.76s/it][Succeeded / Failed / Skipped / Total] 484 / 148 / 15 / 647:  65%|██████▍   | 647/1000 [5:42:29<3:06:51, 31.76s/it][Succeeded / Failed / Skipped / Total] 484 / 148 / 15 / 647:  65%|██████▍   | 648/1000 [5:43:30<3:06:35, 31.81s/it][Succeeded / Failed / Skipped / Total] 485 / 148 / 15 / 648:  65%|██████▍   | 648/1000 [5:43:30<3:06:35, 31.81s/it][Succeeded / Failed / Skipped / Total] 485 / 148 / 15 / 648:  65%|██████▍   | 649/1000 [5:43:43<3:05:54, 31.78s/it][Succeeded / Failed / Skipped / Total] 486 / 148 / 15 / 649:  65%|██████▍   | 649/1000 [5:43:43<3:05:54, 31.78s/it][Succeeded / Failed / Skipped / Total] 486 / 148 / 15 / 649:  65%|██████▌   | 650/1000 [5:43:56<3:05:11, 31.75s/it][Succeeded / Failed / Skipped / Total] 487 / 148 / 15 / 650:  65%|██████▌   | 650/1000 [5:43:56<3:05:11, 31.75s/it][Succeeded / Failed / Skipped / Total] 487 / 148 / 15 / 650:  65%|██████▌   | 651/1000 [5:44:24<3:04:38, 31.74s/it][Succeeded / Failed / Skipped / Total] 488 / 148 / 15 / 651:  65%|██████▌   | 651/1000 [5:44:24<3:04:38, 31.74s/it][Succeeded / Failed / Skipped / Total] 488 / 148 / 15 / 651:  65%|██████▌   | 652/1000 [5:45:04<3:04:10, 31.76s/it][Succeeded / Failed / Skipped / Total] 488 / 149 / 15 / 652:  65%|██████▌   | 652/1000 [5:45:04<3:04:10, 31.76s/it][Succeeded / Failed / Skipped / Total] 488 / 149 / 15 / 652:  65%|██████▌   | 653/1000 [5:45:50<3:03:46, 31.78s/it][Succeeded / Failed / Skipped / Total] 489 / 149 / 15 / 653:  65%|██████▌   | 653/1000 [5:45:50<3:03:46, 31.78s/it][Succeeded / Failed / Skipped / Total] 489 / 149 / 15 / 653:  65%|██████▌   | 654/1000 [5:46:16<3:03:11, 31.77s/it]Utility method to set an accessible object . --> Is an object accessible? --> Socre: 1.0

[[[[Adv]]]]: static boolean [[setAccessibleWorkaround]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return False ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( True ) ; return True ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean [[pill]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return False ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( True ) ; return True ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .


--------------------------------------------- Result 646 ---------------------------------------------
Determines the promotion cost . -->  aquitaine les cost --> Socre: 1.0

[[[[Adv]]]]: private static float [[getPrimitivePromotionCost]] ( final Class < ? > srcClass , final Class < ? > [[destClass]] ) { float cost = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float [[aquitaine]] ( final Class < ? > srcClass , final Class < ? > [[aimlessly]] ) { float cost = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .


--------------------------------------------- Result 647 ---------------------------------------------
Get the total transformation cost . --> Calculate Jean --> Socre: 1.0

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[jean]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .


--------------------------------------------- Result 648 ---------------------------------------------
Computes the cost of an object transformation . --> Bivouc distance --> Socre: 1.0

[[[[Adv]]]]: private static float [[getObjectTransformationCost]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float [[cost]] = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If [[the]] destination class is [[null]], we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { [[cost]] += 1.5f ; } return [[cost]] ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float [[bivouac]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float [[charging]] = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If [[dans]] destination class is [[nile]], we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { [[charging]] += 1.5f ; } return [[charging]] ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .


--------------------------------------------- Result 649 ---------------------------------------------
Gets a message for a given key . -->  internationalized version --> Socre: 1.0

[[[[Adv]]]]: public String at ( String [[key]] , Object ... args ) { return messagesApi . get ( lang , [[key]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String at ( String [[critical]] , Object ... args ) { return messagesApi . get ( lang , [[critical]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .


--------------------------------------------- Result 650 ---------------------------------------------
Gets a message for the given keys --> Return dans for dans --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[dans]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .


--------------------------------------------- Result 651 ---------------------------------------------
Creates a new database from the configuration . --> Folding coach --> Socre: 1.0

[[[[Adv]]]]: public static Database [[createFrom]] ( String driver , String url , Map < String , ? extends Object > [[config]] ) { return [[createFrom]] ( "default" , driver , url , [[config]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[ranching]] ( String driver , String url , Map < String , ? extends Object > [[coach]] ) { return [[ranching]] ( "default" , driver , url , [[coach]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .


--------------------------------------------- Result 652 ---------------------------------------------
Create a parallel Sorter --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter [[create]] ( Object [ ] arrays ) { Generator gen = new Generator ( ) ; gen . setArrays ( arrays ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter [[building]] ( Object [ ] arrays ) { Generator gen = new Generator ( ) ; gen . setArrays ( arrays ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .


--------------------------------------------- Result 653 ---------------------------------------------
Performs a quick sort . --> advertises an offering --> Socre: 1.0

[[[[Adv]]]]: public void [[quickSort]] ( int index , int [[lo]] , int [[hi]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( [[lo]] , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void [[advertises]] ( int index , int [[annette]] , int [[hellos]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( [[annette]] , [[hellos]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .


--------------------------------------------- Result 654 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 490 / 149 / 15 / 654:  65%|██████▌   | 654/1000 [5:46:16<3:03:11, 31.77s/it][Succeeded / Failed / Skipped / Total] 490 / 149 / 15 / 654:  66%|██████▌   | 655/1000 [5:46:44<3:02:38, 31.76s/it][Succeeded / Failed / Skipped / Total] 491 / 149 / 15 / 655:  66%|██████▌   | 655/1000 [5:46:44<3:02:38, 31.76s/it][Succeeded / Failed / Skipped / Total] 491 / 149 / 15 / 655:  66%|██████▌   | 656/1000 [5:46:44<3:01:49, 31.71s/it][Succeeded / Failed / Skipped / Total] 491 / 149 / 16 / 656:  66%|██████▌   | 656/1000 [5:46:44<3:01:49, 31.71s/it][Succeeded / Failed / Skipped / Total] 491 / 149 / 16 / 656:  66%|██████▌   | 657/1000 [5:46:57<3:01:08, 31.69s/it][Succeeded / Failed / Skipped / Total] 492 / 149 / 16 / 657:  66%|██████▌   | 657/1000 [5:46:57<3:01:08, 31.69s/it][Succeeded / Failed / Skipped / Total] 492 / 149 / 16 / 657:  66%|██████▌   | 658/1000 [5:46:58<3:00:20, 31.64s/it][Succeeded / Failed / Skipped / Total] 492 / 149 / 17 / 658:  66%|██████▌   | 658/1000 [5:46:58<3:00:20, 31.64s/it][Succeeded / Failed / Skipped / Total] 492 / 149 / 17 / 658:  66%|██████▌   | 659/1000 [5:47:12<2:59:39, 31.61s/it][Succeeded / Failed / Skipped / Total] 493 / 149 / 17 / 659:  66%|██████▌   | 659/1000 [5:47:12<2:59:39, 31.61s/it][Succeeded / Failed / Skipped / Total] 493 / 149 / 17 / 659:  66%|██████▌   | 660/1000 [5:47:27<2:58:59, 31.59s/it][Succeeded / Failed / Skipped / Total] 494 / 149 / 17 / 660:  66%|██████▌   | 660/1000 [5:47:27<2:58:59, 31.59s/it][Succeeded / Failed / Skipped / Total] 494 / 149 / 17 / 660:  66%|██████▌   | 661/1000 [5:49:11<2:59:05, 31.70s/it]Merge sort method . --> zblordering --> Socre: 1.0

[[[[Adv]]]]: public void [[mergeSort]] ( int index , int [[lo]] , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( [[lo]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[zabel]] ( int index , int [[cheng]] , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( [[cheng]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .


--------------------------------------------- Result 655 ---------------------------------------------
Invokes the method --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo [[fci]] = fastClassInfo ; return [[fci]] . f1 . invoke ( [[fci]] . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object [[dunning]] ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo [[glengarry]] = fastClassInfo ; return [[glengarry]] . f1 . invoke ( [[glengarry]] . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .


--------------------------------------------- Result 656 ---------------------------------------------
Cast a number constant . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void cast_numeric ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another


--------------------------------------------- Result 657 ---------------------------------------------
Load a single argument . --> load_args from local table --> Socre: 1.0

[[[[Adv]]]]: public void load_arg ( int [[index]] ) { load_local ( state . argumentTypes [ [[index]] ] , state . localOffset + skipArgs ( [[index]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void load_arg ( int [[paging]] ) { load_local ( state . argumentTypes [ [[paging]] ] , state . localOffset + skipArgs ( [[paging]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .


--------------------------------------------- Result 658 ---------------------------------------------
Emit a field instruction . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix


--------------------------------------------- Result 659 ---------------------------------------------
null or null . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public void zero_or_null ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { switch ( [[type]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void zero_or_null ( Type [[boyfriend]] ) { if ( TypeUtils . isPrimitive ( [[boyfriend]] ) ) { switch ( [[boyfriend]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .


--------------------------------------------- Result 660 ---------------------------------------------
Unbox or null . --> unbox or unbox --> Socre: 1.0

[[[[Adv]]]]: public void unbox_or_zero ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label [[nonNull]] = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( [[nonNull]] ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( [[nonNull]] ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void unbox_or_zero ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label [[watermelon]] = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( [[watermelon]] ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( [[watermelon]] ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .


--------------------------------------------- Result 661 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 495 / 149 / 17 / 661:  66%|██████▌   | 661/1000 [5:49:11<2:59:05, 31.70s/it][Succeeded / Failed / Skipped / Total] 495 / 149 / 17 / 661:  66%|██████▌   | 662/1000 [5:49:25<2:58:24, 31.67s/it][Succeeded / Failed / Skipped / Total] 496 / 149 / 17 / 662:  66%|██████▌   | 662/1000 [5:49:25<2:58:24, 31.67s/it][Succeeded / Failed / Skipped / Total] 496 / 149 / 17 / 662:  66%|██████▋   | 663/1000 [5:51:04<2:58:27, 31.77s/it][Succeeded / Failed / Skipped / Total] 496 / 150 / 17 / 663:  66%|██████▋   | 663/1000 [5:51:04<2:58:27, 31.77s/it][Succeeded / Failed / Skipped / Total] 496 / 150 / 17 / 663:  66%|██████▋   | 664/1000 [5:51:48<2:58:01, 31.79s/it][Succeeded / Failed / Skipped / Total] 497 / 150 / 17 / 664:  66%|██████▋   | 664/1000 [5:51:48<2:58:01, 31.79s/it][Succeeded / Failed / Skipped / Total] 497 / 150 / 17 / 664:  66%|██████▋   | 665/1000 [5:52:47<2:57:43, 31.83s/it]Processes an array . --> Jumba - code generator --> Socre: 1.0

[[[[Adv]]]]: public static void [[process_array]] ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label [[loopbody]] = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( [[loopbody]] ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , [[loopbody]] ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void [[jumba]] ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label [[abominable]] = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( [[abominable]] ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , [[abominable]] ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .


--------------------------------------------- Result 662 ---------------------------------------------
null is null --> Compares two nulls --> Socre: 1.0

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label [[end]] = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( [[end]] ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( [[end]] ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label [[finalize]] = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( [[finalize]] ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( [[finalize]] ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .


--------------------------------------------- Result 663 ---------------------------------------------
Finds all bridge methods . --> [[[FAILED]]]

[[[[Adv]]]]: public Map resolveAll ( ) { Map [[resolved]] = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class [[owner]] = ( Class ) entry . getKey ( ) ; Set [[bridges]] = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( [[owner]] . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return [[resolved]] ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[bridges]] , [[resolved]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return [[resolved]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map resolveAll ( ) { Map [[regulated]] = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class [[bearer]] = ( Class ) entry . getKey ( ) ; Set [[gateways]] = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( [[bearer]] . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return [[regulated]] ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[gateways]] , [[regulated]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return [[regulated]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .


--------------------------------------------- Result 664 ---------------------------------------------
Adds methods from superclass and interfaces . --> determine methods --> Socre: 0.9999999999820136

[[[[Adv]]]]: public static void getMethods ( Class [[superclass]] , Class [ ] interfaces , List [[methods]] ) { getMethods ( [[superclass]] , interfaces , [[methods]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void getMethods ( Class [[retaking]] , Class [ ] interfaces , List [[modes]] ) { getMethods ( [[retaking]] , interfaces , [[modes]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .


--------------------------------------------- Result 665 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 498 / 150 / 17 / 665:  66%|██████▋   | 665/1000 [5:52:47<2:57:43, 31.83s/it][Succeeded / Failed / Skipped / Total] 498 / 150 / 17 / 665:  67%|██████▋   | 666/1000 [5:53:24<2:57:14, 31.84s/it][Succeeded / Failed / Skipped / Total] 499 / 150 / 17 / 666:  67%|██████▋   | 666/1000 [5:53:24<2:57:14, 31.84s/it][Succeeded / Failed / Skipped / Total] 499 / 150 / 17 / 666:  67%|██████▋   | 667/1000 [5:53:24<2:56:26, 31.79s/it][Succeeded / Failed / Skipped / Total] 499 / 150 / 18 / 667:  67%|██████▋   | 667/1000 [5:53:24<2:56:26, 31.79s/it][Succeeded / Failed / Skipped / Total] 499 / 150 / 18 / 667:  67%|██████▋   | 668/1000 [5:53:51<2:55:52, 31.78s/it][Succeeded / Failed / Skipped / Total] 499 / 151 / 18 / 668:  67%|██████▋   | 668/1000 [5:53:51<2:55:52, 31.78s/it][Succeeded / Failed / Skipped / Total] 499 / 151 / 18 / 668:  67%|██████▋   | 669/1000 [5:54:04<2:55:11, 31.76s/it][Succeeded / Failed / Skipped / Total] 500 / 151 / 18 / 669:  67%|██████▋   | 669/1000 [5:54:04<2:55:11, 31.76s/it][Succeeded / Failed / Skipped / Total] 500 / 151 / 18 / 669:  67%|██████▋   | 670/1000 [5:54:49<2:54:46, 31.78s/it][Succeeded / Failed / Skipped / Total] 501 / 151 / 18 / 670:  67%|██████▋   | 670/1000 [5:54:49<2:54:46, 31.78s/it][Succeeded / Failed / Skipped / Total] 501 / 151 / 18 / 670:  67%|██████▋   | 671/1000 [5:54:50<2:53:58, 31.73s/it][Succeeded / Failed / Skipped / Total] 501 / 151 / 19 / 671:  67%|██████▋   | 671/1000 [5:54:50<2:53:58, 31.73s/it][Succeeded / Failed / Skipped / Total] 501 / 151 / 19 / 671:  67%|██████▋   | 672/1000 [5:55:04<2:53:18, 31.70s/it][Succeeded / Failed / Skipped / Total] 502 / 151 / 19 / 672:  67%|██████▋   | 672/1000 [5:55:04<2:53:18, 31.70s/it][Succeeded / Failed / Skipped / Total] 502 / 151 / 19 / 672:  67%|██████▋   | 673/1000 [5:55:43<2:52:50, 31.71s/it][Succeeded / Failed / Skipped / Total] 503 / 151 / 19 / 673:  67%|██████▋   | 673/1000 [5:55:43<2:52:50, 31.71s/it][Succeeded / Failed / Skipped / Total] 503 / 151 / 19 / 673:  67%|██████▋   | 674/1000 [5:56:25<2:52:23, 31.73s/it][Succeeded / Failed / Skipped / Total] 503 / 152 / 19 / 674:  67%|██████▋   | 674/1000 [5:56:25<2:52:23, 31.73s/it][Succeeded / Failed / Skipped / Total] 503 / 152 / 19 / 674:  68%|██████▊   | 675/1000 [5:56:39<2:51:43, 31.70s/it]Filter public constructors . -->  hepburn --> Socre: 1.0

[[[[Adv]]]]: protected void [[filterConstructors]] ( Class [[sc]] , List [[constructors]] ) { CollectionUtils . filter ( [[constructors]] , new VisibilityPredicate ( [[sc]] , True ) ) ; if ( [[constructors]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[sc]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void [[hepburn]] ( Class [[bk]] , List [[ranchers]] ) { CollectionUtils . filter ( [[ranchers]] , new VisibilityPredicate ( [[bk]] , True ) ) ; if ( [[ranchers]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[bk]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .


--------------------------------------------- Result 666 ---------------------------------------------
Sets the superclass . -->  befriended object --> Socre: 1.0

[[[[Adv]]]]: public void [[setSuperclass]] ( Class [[superclass]] ) { if ( [[superclass]] != null && [[superclass]] . equals ( Object . class ) ) { [[superclass]] = null ; } this . superclass = [[superclass]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[befriended]] ( Class [[couples]] ) { if ( [[couples]] != null && [[couples]] . equals ( Object . class ) ) { [[couples]] = null ; } this . superclass = [[couples]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .


--------------------------------------------- Result 667 ---------------------------------------------
Get field . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities


--------------------------------------------- Result 668 ---------------------------------------------
Add method . --> [[[FAILED]]]

[[[[Adv]]]]: public void add ( Method [[method]] ) { add ( ReflectUtils . getSignature ( [[method]] ) , ReflectUtils . getExceptionTypes ( [[method]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void add ( Method [[solutions]] ) { add ( ReflectUtils . getSignature ( [[solutions]] ) , ReflectUtils . getExceptionTypes ( [[solutions]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .


--------------------------------------------- Result 669 ---------------------------------------------
Returns the cardinality of the value . --> Returns the cardinality of the value --> Socre: 1.0

[[[[Adv]]]]: public int cardinality ( ) { int w = value ; int [[c]] = 0 ; while ( w != 0 ) { [[c]] += T [ w & 255 ] ; w >>= 8 ; } return [[c]] ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int cardinality ( ) { int w = value ; int [[iv]] = 0 ; while ( w != 0 ) { [[iv]] += T [ w & 255 ] ; w >>= 8 ; } return [[iv]] ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .


--------------------------------------------- Result 670 ---------------------------------------------
Sets the naming policy . --> Register a colon weighting --> Socre: 1.0

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy [[namingPolicy]] ) { if ( [[namingPolicy]] == null ) [[namingPolicy]] = DefaultNamingPolicy . INSTANCE ; this . [[namingPolicy]] = [[namingPolicy]] ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[colonizing]] ( NamingPolicy [[featherweight]] ) { if ( [[featherweight]] == null ) [[featherweight]] = DefaultNamingPolicy . INSTANCE ; this . [[blistering]] = [[featherweight]] ; }
[[[[Nl]]]]: Override the default naming policy .


--------------------------------------------- Result 671 ---------------------------------------------
Find all methods in the given array . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code


--------------------------------------------- Result 672 ---------------------------------------------
Resolve a base path . -->  resolution --> Socre: 1.0

[[[[Adv]]]]: public static Path [[resolve]] ( final Path base , String child ) { if ( StringUtil . startsWithChar ( child , File . separatorChar ) ) { child = child . substring ( 1 ) ; } return base . resolve ( child ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path [[resolution]] ( final Path base , String child ) { if ( StringUtil . startsWithChar ( child , File . separatorChar ) ) { child = child . substring ( 1 ) ; } return base . resolve ( child ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .


--------------------------------------------- Result 673 ---------------------------------------------
Read a string from a file . --> Read a file into a String --> Socre: 1.0

[[[[Adv]]]]: public static String [[readString]] ( final Path [[path]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[path]] , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[alas]] ( final Path [[rails]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[rails]] , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .


--------------------------------------------- Result 674 ---------------------------------------------
Sets the request host . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[host]] ( final String [[host]] ) { this . host = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[hospitable]] ( final String [[receiver]] ) { this . host = [[hospitable]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[hospitable]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .


[Succeeded / Failed / Skipped / Total] 504 / 152 / 19 / 675:  68%|██████▊   | 675/1000 [5:56:39<2:51:43, 31.70s/it][Succeeded / Failed / Skipped / Total] 504 / 152 / 19 / 675:  68%|██████▊   | 676/1000 [5:57:10<2:51:11, 31.70s/it][Succeeded / Failed / Skipped / Total] 505 / 152 / 19 / 676:  68%|██████▊   | 676/1000 [5:57:10<2:51:11, 31.70s/it][Succeeded / Failed / Skipped / Total] 505 / 152 / 19 / 676:  68%|██████▊   | 677/1000 [5:57:39<2:50:38, 31.70s/it][Succeeded / Failed / Skipped / Total] 505 / 153 / 19 / 677:  68%|██████▊   | 677/1000 [5:57:39<2:50:38, 31.70s/it][Succeeded / Failed / Skipped / Total] 505 / 153 / 19 / 677:  68%|██████▊   | 678/1000 [5:58:07<2:50:05, 31.69s/it][Succeeded / Failed / Skipped / Total] 505 / 154 / 19 / 678:  68%|██████▊   | 678/1000 [5:58:07<2:50:05, 31.69s/it][Succeeded / Failed / Skipped / Total] 505 / 154 / 19 / 678:  68%|██████▊   | 679/1000 [5:58:36<2:49:31, 31.69s/it][Succeeded / Failed / Skipped / Total] 505 / 155 / 19 / 679:  68%|██████▊   | 679/1000 [5:58:36<2:49:31, 31.69s/it][Succeeded / Failed / Skipped / Total] 505 / 155 / 19 / 679:  68%|██████▊   | 680/1000 [5:59:04<2:48:58, 31.68s/it][Succeeded / Failed / Skipped / Total] 505 / 156 / 19 / 680:  68%|██████▊   | 680/1000 [5:59:04<2:48:58, 31.68s/it][Succeeded / Failed / Skipped / Total] 505 / 156 / 19 / 680:  68%|██████▊   | 681/1000 [5:59:34<2:48:26, 31.68s/it][Succeeded / Failed / Skipped / Total] 505 / 157 / 19 / 681:  68%|██████▊   | 681/1000 [5:59:34<2:48:26, 31.68s/it][Succeeded / Failed / Skipped / Total] 505 / 157 / 19 / 681:  68%|██████▊   | 682/1000 [6:00:00<2:47:51, 31.67s/it][Succeeded / Failed / Skipped / Total] 505 / 158 / 19 / 682:  68%|██████▊   | 682/1000 [6:00:00<2:47:51, 31.67s/it][Succeeded / Failed / Skipped / Total] 505 / 158 / 19 / 682:  68%|██████▊   | 683/1000 [6:00:28<2:47:18, 31.67s/it][Succeeded / Failed / Skipped / Total] 506 / 158 / 19 / 683:  68%|██████▊   | 683/1000 [6:00:28<2:47:18, 31.67s/it][Succeeded / Failed / Skipped / Total] 506 / 158 / 19 / 683:  68%|██████▊   | 684/1000 [6:00:57<2:46:45, 31.66s/it][Succeeded / Failed / Skipped / Total] 506 / 159 / 19 / 684:  68%|██████▊   | 684/1000 [6:00:57<2:46:45, 31.66s/it][Succeeded / Failed / Skipped / Total] 506 / 159 / 19 / 684:  68%|██████▊   | 685/1000 [6:01:10<2:46:05, 31.64s/it][Succeeded / Failed / Skipped / Total] 507 / 159 / 19 / 685:  68%|██████▊   | 685/1000 [6:01:10<2:46:05, 31.64s/it][Succeeded / Failed / Skipped / Total] 507 / 159 / 19 / 685:  69%|██████▊   | 686/1000 [6:01:24<2:45:25, 31.61s/it][Succeeded / Failed / Skipped / Total] 508 / 159 / 19 / 686:  69%|██████▊   | 686/1000 [6:01:24<2:45:25, 31.61s/it][Succeeded / Failed / Skipped / Total] 508 / 159 / 19 / 686:  69%|██████▊   | 687/1000 [6:02:04<2:44:57, 31.62s/it]--------------------------------------------- Result 675 ---------------------------------------------
Create a request with the given method and destination . --> Create HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String method , final String destination ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[creativity]] ( final String method , final String destination ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .


--------------------------------------------- Result 676 ---------------------------------------------
Start a CONNECT request . --> Static factory method --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[fasten]] ( final String [[geared]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[geared]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .


--------------------------------------------- Result 677 ---------------------------------------------
Makes a GET request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[acquired]] ( final String [[beneficiaries]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[beneficiaries]] ) ; }
[[[[Nl]]]]: Builds a GET request .


--------------------------------------------- Result 678 ---------------------------------------------
Makes a POST request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[positions]] ( final String [[whereabouts]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[whereabouts]] ) ; }
[[[[Nl]]]]: Builds a POST request .


--------------------------------------------- Result 679 ---------------------------------------------
Makes a PUT request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[presents]] ( final String [[objectives]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[objectives]] ) ; }
[[[[Nl]]]]: Builds a PUT request .


--------------------------------------------- Result 680 ---------------------------------------------
Makes a PATCH request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[postmark]] ( final String [[intents]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[intents]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .


--------------------------------------------- Result 681 ---------------------------------------------
Makes a DELETE request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[disposes]] ( final String [[objectives]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[objectives]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .


--------------------------------------------- Result 682 ---------------------------------------------
Makes a HEAD request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[presidents]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a HEAD request .


--------------------------------------------- Result 683 ---------------------------------------------
Sets a TRACE request . --> Specifies the target URL --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[rails]] ( final String [[target]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[target]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .


--------------------------------------------- Result 684 ---------------------------------------------
Start a OPTIONS request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[substituting]] ( final String [[intention]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[intention]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .


--------------------------------------------- Result 685 ---------------------------------------------
Set the request path . --> HTTP route for highways --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[path]] ( String path ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[highways]] ( String path ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .


--------------------------------------------- Result 686 ---------------------------------------------
Sets the replacement cookies . --> Add ReplACEME --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder [[cookieString]] = new StringBuilder ( ) ; boolean first = True ; for ( Cookie cookie : REPLACEME0 ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[cookieString]] . append ( "; " ) ; } first = False ; [[cookieString]] . append ( cookie . getName ( ) ) ; [[cookieString]] . append ( ' ' ) ; [[cookieString]] . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[cookieString]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder [[twirled]] = new StringBuilder ( ) ; boolean first = True ; for ( Cookie cookie : REPLACEME0 ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[twirled]] . append ( "; " ) ; } first = False ; [[twirled]] . append ( cookie . getName ( ) ) ; [[twirled]] . append ( ' ' ) ; [[twirled]] . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[twirled]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .


[Succeeded / Failed / Skipped / Total] 509 / 159 / 19 / 687:  69%|██████▊   | 687/1000 [6:02:04<2:44:57, 31.62s/it][Succeeded / Failed / Skipped / Total] 509 / 159 / 19 / 687:  69%|██████▉   | 688/1000 [6:02:16<2:44:17, 31.59s/it][Succeeded / Failed / Skipped / Total] 510 / 159 / 19 / 688:  69%|██████▉   | 688/1000 [6:02:16<2:44:17, 31.59s/it][Succeeded / Failed / Skipped / Total] 510 / 159 / 19 / 688:  69%|██████▉   | 689/1000 [6:02:41<2:43:42, 31.58s/it][Succeeded / Failed / Skipped / Total] 511 / 159 / 19 / 689:  69%|██████▉   | 689/1000 [6:02:41<2:43:42, 31.58s/it][Succeeded / Failed / Skipped / Total] 511 / 159 / 19 / 689:  69%|██████▉   | 690/1000 [6:02:54<2:43:02, 31.56s/it][Succeeded / Failed / Skipped / Total] 512 / 159 / 19 / 690:  69%|██████▉   | 690/1000 [6:02:54<2:43:02, 31.56s/it][Succeeded / Failed / Skipped / Total] 512 / 159 / 19 / 690:  69%|██████▉   | 691/1000 [6:03:07<2:42:22, 31.53s/it][Succeeded / Failed / Skipped / Total] 513 / 159 / 19 / 691:  69%|██████▉   | 691/1000 [6:03:07<2:42:22, 31.53s/it][Succeeded / Failed / Skipped / Total] 513 / 159 / 19 / 691:  69%|██████▉   | 692/1000 [6:03:43<2:41:53, 31.54s/it][Succeeded / Failed / Skipped / Total] 514 / 159 / 19 / 692:  69%|██████▉   | 692/1000 [6:03:43<2:41:53, 31.54s/it][Succeeded / Failed / Skipped / Total] 514 / 159 / 19 / 692:  69%|██████▉   | 693/1000 [6:04:22<2:41:25, 31.55s/it][Succeeded / Failed / Skipped / Total] 515 / 159 / 19 / 693:  69%|██████▉   | 693/1000 [6:04:22<2:41:25, 31.55s/it][Succeeded / Failed / Skipped / Total] 515 / 159 / 19 / 693:  69%|██████▉   | 694/1000 [6:04:36<2:40:45, 31.52s/it][Succeeded / Failed / Skipped / Total] 516 / 159 / 19 / 694:  69%|██████▉   | 694/1000 [6:04:36<2:40:45, 31.52s/it][Succeeded / Failed / Skipped / Total] 516 / 159 / 19 / 694:  70%|██████▉   | 695/1000 [6:04:48<2:40:05, 31.49s/it][Succeeded / Failed / Skipped / Total] 517 / 159 / 19 / 695:  70%|██████▉   | 695/1000 [6:04:48<2:40:05, 31.49s/it][Succeeded / Failed / Skipped / Total] 517 / 159 / 19 / 695:  70%|██████▉   | 696/1000 [6:05:31<2:39:39, 31.51s/it]--------------------------------------------- Result 687 ---------------------------------------------
Add query parameter . --> Holder benchmark --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[query]] ( final String name1 , final Object value1 , final Object ... [[parameters]] ) { [[query]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < [[parameters]] . length ; i += 2 ) { String name = [[parameters]] [ i ] . toString ( ) ; String [[value]] = [[parameters]] [ i + 1 ] . toString ( ) ; [[query]] . add ( name , [[value]] ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest [[behold]] ( final String name1 , final Object value1 , final Object ... [[calibrating]] ) { [[behold]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < [[calibrating]] . length ; i += 2 ) { String name = [[calibrating]] [ i ] . toString ( ) ; String [[valuation]] = [[calibrating]] [ i + 1 ] . toString ( ) ; [[behold]] . add ( name , [[valuation]] ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .


--------------------------------------------- Result 688 ---------------------------------------------
Set query string . --> Add eniry query --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[query]] ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > entry : queryMap . entrySet ( ) ) { [[query]] . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest [[enquiries]] ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > entry : queryMap . entrySet ( ) ) { [[enquiries]] . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .


--------------------------------------------- Result 689 ---------------------------------------------
Set the query string . --> Set the ruffians --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[queryString]] ( final String [[queryString]] , final boolean decode ) { this . query = HttpUtil . parseQuery ( [[queryString]] , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest [[ruffians]] ( final String [[barrack]] , final boolean decode ) { this . query = HttpUtil . parseQuery ( [[ruffians]] , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .


--------------------------------------------- Result 690 ---------------------------------------------
Gets the query string . --> Fetches the current request --> Socre: 1.0

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[garnish]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .


--------------------------------------------- Result 691 ---------------------------------------------
Returns host url . --> Return the hearthe --> Socre: 1.0

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[hearthe]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .


--------------------------------------------- Result 692 ---------------------------------------------
Set basic authentication . --> Sends a Fernet password to the request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String [[username]] , final String password ) { if ( [[username]] != null && password != null ) { String data = [[username]] . concat ( StringPool . COLON ) . concat ( password ) ; String [[base64]] = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + [[base64]] ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[blakeney]] ( final String [[consumer]] , final String password ) { if ( [[consumer]] != null && password != null ) { String data = [[consumer]] . concat ( StringPool . COLON ) . concat ( password ) ; String [[brackett]] = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + [[brackett]] ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .


--------------------------------------------- Result 693 ---------------------------------------------
Sets the Host header . --> set liqueurur --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String [[hostPort]] = this . host ; if ( port != Defaults . DEFAULT_PORT ) { [[hostPort]] += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , [[hostPort]] ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[liqueur]] ( ) { String [[ashur]] = this . host ; if ( port != Defaults . DEFAULT_PORT ) { [[ashur]] += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , [[ashur]] ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .


--------------------------------------------- Result 694 ---------------------------------------------
Return buffer . --> This method is overridden by subclasses --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Buffer [[buffer]] ( final boolean fullRequest ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer [[platelet]] ( final boolean fullRequest ) {
[[[[Nl]]]]: Prepares the request buffer .


--------------------------------------------- Result 695 ---------------------------------------------
Send and return response handler . --> send and receive a response handler --> Socre: 1.0

[[[[Adv]]]]: public < [[R]] > [[R]] sendAndReceive ( final Function < HttpResponse , [[R]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < [[gupta]] > [[gupta]] sendAndReceive ( final Function < HttpResponse , [[gupta]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .


--------------------------------------------- Result 696 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 518 / 159 / 19 / 696:  70%|██████▉   | 696/1000 [6:05:31<2:39:39, 31.51s/it][Succeeded / Failed / Skipped / Total] 518 / 159 / 19 / 696:  70%|██████▉   | 697/1000 [6:05:59<2:39:06, 31.51s/it][Succeeded / Failed / Skipped / Total] 519 / 159 / 19 / 697:  70%|██████▉   | 697/1000 [6:05:59<2:39:06, 31.51s/it][Succeeded / Failed / Skipped / Total] 519 / 159 / 19 / 697:  70%|██████▉   | 698/1000 [6:06:27<2:38:33, 31.50s/it][Succeeded / Failed / Skipped / Total] 520 / 159 / 19 / 698:  70%|██████▉   | 698/1000 [6:06:27<2:38:33, 31.50s/it][Succeeded / Failed / Skipped / Total] 520 / 159 / 19 / 698:  70%|██████▉   | 699/1000 [6:06:53<2:37:59, 31.49s/it][Succeeded / Failed / Skipped / Total] 520 / 160 / 19 / 699:  70%|██████▉   | 699/1000 [6:06:53<2:37:59, 31.49s/it][Succeeded / Failed / Skipped / Total] 520 / 160 / 19 / 699:  70%|███████   | 700/1000 [6:07:06<2:37:20, 31.47s/it][Succeeded / Failed / Skipped / Total] 521 / 160 / 19 / 700:  70%|███████   | 700/1000 [6:07:06<2:37:20, 31.47s/it][Succeeded / Failed / Skipped / Total] 521 / 160 / 19 / 700:  70%|███████   | 701/1000 [6:07:20<2:36:41, 31.44s/it][Succeeded / Failed / Skipped / Total] 522 / 160 / 19 / 701:  70%|███████   | 701/1000 [6:07:20<2:36:41, 31.44s/it][Succeeded / Failed / Skipped / Total] 522 / 160 / 19 / 701:  70%|███████   | 702/1000 [6:07:35<2:36:02, 31.42s/it][Succeeded / Failed / Skipped / Total] 523 / 160 / 19 / 702:  70%|███████   | 702/1000 [6:07:35<2:36:02, 31.42s/it][Succeeded / Failed / Skipped / Total] 523 / 160 / 19 / 702:  70%|███████   | 703/1000 [6:08:04<2:35:29, 31.41s/it][Succeeded / Failed / Skipped / Total] 523 / 161 / 19 / 703:  70%|███████   | 703/1000 [6:08:04<2:35:29, 31.41s/it][Succeeded / Failed / Skipped / Total] 523 / 161 / 19 / 703:  70%|███████   | 704/1000 [6:08:18<2:34:51, 31.39s/it][Succeeded / Failed / Skipped / Total] 524 / 161 / 19 / 704:  70%|███████   | 704/1000 [6:08:18<2:34:51, 31.39s/it][Succeeded / Failed / Skipped / Total] 524 / 161 / 19 / 704:  70%|███████   | 705/1000 [6:08:32<2:34:12, 31.37s/it]Remove ranges between start and end points . --> show time handling --> Socre: 1.0

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[removeRange]] ( firstHandler . nextHandler , start , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int [[rangeEnd]] = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[showtime]] ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[showtime]] ( firstHandler . nextHandler , start , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int [[medico]] = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .


--------------------------------------------- Result 697 ---------------------------------------------
Returns the length of the exception table . --> get exception table length --> Socre: 1.0

[[[[Adv]]]]: static int getExceptionTableLength ( final Handler [[firstHandler]] ) { int length = 0 ; Handler [[handler]] = [[firstHandler]] ; while ( [[handler]] != null ) { length ++ ; [[handler]] = [[handler]] . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int getExceptionTableLength ( final Handler [[joey]] ) { int length = 0 ; Handler [[truckers]] = [[joey]] ; while ( [[truckers]] != null ) { length ++ ; [[truckers]] = [[truckers]] . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .


--------------------------------------------- Result 698 ---------------------------------------------
Collects all action interceptors . --> Descriptor method --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > [[interceptorValues]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[interceptorValues]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[aside]] ( ) { final Collection < ? extends ActionInterceptor > [[argonauts]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[argonauts]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .


--------------------------------------------- Result 699 ---------------------------------------------
Collects action filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[meyou]] ( ) { final Collection < ? extends ActionFilter > [[hlp]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[hlp]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .


--------------------------------------------- Result 700 ---------------------------------------------
Collect the action results . --> add notHolder --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[nothng]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .


--------------------------------------------- Result 701 ---------------------------------------------
Collect all action runtimes . --> Sort the list of runtimes --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[arrange]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .


--------------------------------------------- Result 702 ---------------------------------------------
Sets a simple property . --> Setter method --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[eskimo]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .


--------------------------------------------- Result 703 ---------------------------------------------
Gets the property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty [[beanProperty]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } else { try { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[millions]] > [[millions]] getProperty ( final Object bean , final String name ) { BeanProperty [[breakfast]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[breakfast]] ) ; return ( [[millions]] ) getIndexProperty ( [[breakfast]] ) ; } else { try { resolveNestedProperties ( [[breakfast]] ) ; return ( [[millions]] ) getIndexProperty ( [[breakfast]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .


--------------------------------------------- Result 704 ---------------------------------------------
Extract the reference name from a property . --> also used in test --> Socre: 1.0

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String propertyName ) { int ndx = StringUtil . indexOfChars ( propertyName , INDEX_CHARS ) ; if ( ndx == - 1 ) { return propertyName ; } return propertyName . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[boulogne]] ( final String propertyName ) { int ndx = StringUtil . indexOfChars ( propertyName , INDEX_CHARS ) ; if ( ndx == - 1 ) { return propertyName ; } return propertyName . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .


[Succeeded / Failed / Skipped / Total] 524 / 162 / 19 / 705:  70%|███████   | 705/1000 [6:08:32<2:34:12, 31.37s/it][Succeeded / Failed / Skipped / Total] 524 / 162 / 19 / 705:  71%|███████   | 706/1000 [6:08:45<2:33:33, 31.34s/it][Succeeded / Failed / Skipped / Total] 525 / 162 / 19 / 706:  71%|███████   | 706/1000 [6:08:45<2:33:33, 31.34s/it][Succeeded / Failed / Skipped / Total] 525 / 162 / 19 / 706:  71%|███████   | 707/1000 [6:09:10<2:32:59, 31.33s/it][Succeeded / Failed / Skipped / Total] 526 / 162 / 19 / 707:  71%|███████   | 707/1000 [6:09:10<2:32:59, 31.33s/it][Succeeded / Failed / Skipped / Total] 526 / 162 / 19 / 707:  71%|███████   | 708/1000 [6:09:45<2:32:29, 31.34s/it][Succeeded / Failed / Skipped / Total] 526 / 163 / 19 / 708:  71%|███████   | 708/1000 [6:09:45<2:32:29, 31.34s/it][Succeeded / Failed / Skipped / Total] 526 / 163 / 19 / 708:  71%|███████   | 709/1000 [6:10:15<2:31:57, 31.33s/it][Succeeded / Failed / Skipped / Total] 527 / 163 / 19 / 709:  71%|███████   | 709/1000 [6:10:15<2:31:57, 31.33s/it][Succeeded / Failed / Skipped / Total] 527 / 163 / 19 / 709:  71%|███████   | 710/1000 [6:10:55<2:31:30, 31.35s/it][Succeeded / Failed / Skipped / Total] 528 / 163 / 19 / 710:  71%|███████   | 710/1000 [6:10:55<2:31:30, 31.35s/it][Succeeded / Failed / Skipped / Total] 528 / 163 / 19 / 710:  71%|███████   | 711/1000 [6:11:34<2:31:02, 31.36s/it][Succeeded / Failed / Skipped / Total] 528 / 164 / 19 / 711:  71%|███████   | 711/1000 [6:11:34<2:31:02, 31.36s/it][Succeeded / Failed / Skipped / Total] 528 / 164 / 19 / 711:  71%|███████   | 712/1000 [6:12:26<2:30:38, 31.38s/it][Succeeded / Failed / Skipped / Total] 529 / 164 / 19 / 712:  71%|███████   | 712/1000 [6:12:26<2:30:38, 31.38s/it][Succeeded / Failed / Skipped / Total] 529 / 164 / 19 / 712:  71%|███████▏  | 713/1000 [6:13:07<2:30:11, 31.40s/it][Succeeded / Failed / Skipped / Total] 530 / 164 / 19 / 713:  71%|███████▏  | 713/1000 [6:13:07<2:30:11, 31.40s/it][Succeeded / Failed / Skipped / Total] 530 / 164 / 19 / 713:  71%|███████▏  | 714/1000 [6:13:33<2:29:38, 31.39s/it][Succeeded / Failed / Skipped / Total] 531 / 164 / 19 / 714:  71%|███████▏  | 714/1000 [6:13:33<2:29:38, 31.39s/it][Succeeded / Failed / Skipped / Total] 531 / 164 / 19 / 714:  72%|███████▏  | 715/1000 [6:13:48<2:28:59, 31.37s/it]--------------------------------------------- Result 705 ---------------------------------------------
Returns a PrintWriter . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[mccullum]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .


--------------------------------------------- Result 706 ---------------------------------------------
Set an object reference . --> Adds a microcosm to the registry --> Socre: 1.0

[[[[Adv]]]]: public void [[setObjectReference]] ( final String name , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , object ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[microcosm]] ( final String name , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , object ) ; }
[[[[Nl]]]]: Saves object reference .


--------------------------------------------- Result 707 ---------------------------------------------
Gets object reference . --> get feedbag --> Socre: 1.0

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String [[name]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[name]] ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[feedbag]] ( final String [[numbering]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[numbering]] ) ; }
[[[[Nl]]]]: Returns object reference .


--------------------------------------------- Result 708 ---------------------------------------------
Looks up an object reference . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[lookupObject]] ( final String ref ) { Object [[value]] = getObjectReference ( ref ) ; if ( [[value]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return [[value]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[accompli]] ( final String ref ) { Object [[importance]] = getObjectReference ( ref ) ; if ( [[importance]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return [[importance]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .


--------------------------------------------- Result 709 ---------------------------------------------
Gets the entity descriptor for a table reference . --> Retrieves the EntityDescriptor from the database --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[getTableDescriptor]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[tableRef]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor [[kindred]] ( final String [[shotgun]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[shotgun]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .


--------------------------------------------- Result 710 ---------------------------------------------
Find the table descriptor by column ref . --> Find antichastrist in an abi --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String [[columnRef]] ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[ded]] = entry . getValue ( ) . desc ; if ( [[ded]] . findByPropertyName ( [[columnRef]] ) != null ) { return [[ded]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[antichrist]] ( final String [[abi]] ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[ders]] = entry . getValue ( ) . desc ; if ( [[ders]] . findByPropertyName ( [[abi]] ) != null ) { return [[ders]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .


--------------------------------------------- Result 711 ---------------------------------------------
Get table alias --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getTableAlias]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[tableRef]] ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[communicators]] ( final String [[tvshow]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[tvshow]] ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .


--------------------------------------------- Result 712 ---------------------------------------------
Register a table reference . --> Adds bidons to a database --> Socre: 1.0

[[[[Adv]]]]: public void [[registerTableReference]] ( final String [[tableReference]] , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[t]] = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( [[tableReference]] , [[t]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[tableReference]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[britons]] ( final String [[buying]] , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[anvil]] = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( [[buying]] , [[anvil]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[buying]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .


--------------------------------------------- Result 713 ---------------------------------------------
Lookup a table reference by its name . --> Get the DbDB entity descriptor --> Socre: 1.0

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String [[tableRef]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[tableRef]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[tableRef]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[da]] ( final String [[albright]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[albright]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[albright]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .


--------------------------------------------- Result 714 ---------------------------------------------
Registers a hint . --> and the given foreinger --> Socre: 1.0

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[anand]] ( final String [[forefinger]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[forefinger]] ) ; }
[[[[Nl]]]]: Registers a hint .


--------------------------------------------- Result 715 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 532 / 164 / 19 / 715:  72%|███████▏  | 715/1000 [6:13:48<2:28:59, 31.37s/it][Succeeded / Failed / Skipped / Total] 532 / 164 / 19 / 715:  72%|███████▏  | 716/1000 [6:14:41<2:28:37, 31.40s/it][Succeeded / Failed / Skipped / Total] 533 / 164 / 19 / 716:  72%|███████▏  | 716/1000 [6:14:41<2:28:37, 31.40s/it][Succeeded / Failed / Skipped / Total] 533 / 164 / 19 / 716:  72%|███████▏  | 717/1000 [6:15:12<2:28:05, 31.40s/it][Succeeded / Failed / Skipped / Total] 534 / 164 / 19 / 717:  72%|███████▏  | 717/1000 [6:15:12<2:28:05, 31.40s/it][Succeeded / Failed / Skipped / Total] 534 / 164 / 19 / 717:  72%|███████▏  | 718/1000 [6:16:08<2:27:43, 31.43s/it][Succeeded / Failed / Skipped / Total] 535 / 164 / 19 / 718:  72%|███████▏  | 718/1000 [6:16:08<2:27:43, 31.43s/it][Succeeded / Failed / Skipped / Total] 535 / 164 / 19 / 718:  72%|███████▏  | 719/1000 [6:16:59<2:27:20, 31.46s/it]Serializes the given value onto the JSONContext . --> This method is called when a plugin is triggered --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext [[jsonContext]] , final T value ) { if ( [[jsonContext]] . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext [[neurotransmitters]] , final T value ) { if ( [[neurotransmitters]] . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .


--------------------------------------------- Result 716 ---------------------------------------------
Inject attributes . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectAttributes]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > [[attributeNames]] = servletRequest . getAttributeNames ( ) ; while ( [[attributeNames]] . hasMoreElements ( ) ) { final String [[attrName]] = [[attributeNames]] . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[attrName]] ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( [[attrName]] ) ; target . writeValue ( name , attrValue , True ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void [[scrambles]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > [[linesman]] = servletRequest . getAttributeNames ( ) ; while ( [[linesman]] . hasMoreElements ( ) ) { final String [[ratched]] = [[linesman]] . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[ratched]] ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( [[ratched]] ) ; target . writeValue ( name , attrValue , True ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .


--------------------------------------------- Result 717 ---------------------------------------------
Inject request parameters . --> Called when a bunch of esccha has finished --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "[[True]]" == "[[True]]" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[cachaça]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "[["Actually" == "Actually"]]" == "[["Actually" == "Actually"]]" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .


--------------------------------------------- Result 718 ---------------------------------------------
Inject uploaded files . --> Salt a file upload --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper [[multipartRequest]] = ( MultipartRequestWrapper ) servletRequest ; if ( ! [[multipartRequest]] . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = [[multipartRequest]] . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = [[multipartRequest]] . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int [[j]] = 0 ; [[j]] < paramValues . length ; [[j]] ++ ) { final FileUpload paramValue = paramValues [ [[j]] ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ [[j]] ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , True ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[sandcastle]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper [[lino]] = ( MultipartRequestWrapper ) servletRequest ; if ( ! [[lino]] . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = [[lino]] . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = [[lino]] . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int [[w]] = 0 ; [[w]] < paramValues . length ; [[w]] ++ ) { final FileUpload paramValue = paramValues [ [[w]] ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ [[w]] ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , True ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .


--------------------------------------------- Result 719 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 536 / 164 / 19 / 719:  72%|███████▏  | 719/1000 [6:16:59<2:27:20, 31.46s/it][Succeeded / Failed / Skipped / Total] 536 / 164 / 19 / 719:  72%|███████▏  | 720/1000 [6:18:37<2:27:14, 31.55s/it][Succeeded / Failed / Skipped / Total] 537 / 164 / 19 / 720:  72%|███████▏  | 720/1000 [6:18:37<2:27:14, 31.55s/it][Succeeded / Failed / Skipped / Total] 537 / 164 / 19 / 720:  72%|███████▏  | 721/1000 [6:19:15<2:26:45, 31.56s/it][Succeeded / Failed / Skipped / Total] 538 / 164 / 19 / 721:  72%|███████▏  | 721/1000 [6:19:15<2:26:45, 31.56s/it][Succeeded / Failed / Skipped / Total] 538 / 164 / 19 / 721:  72%|███████▏  | 722/1000 [6:20:23<2:26:27, 31.61s/it][Succeeded / Failed / Skipped / Total] 539 / 164 / 19 / 722:  72%|███████▏  | 722/1000 [6:20:23<2:26:27, 31.61s/it][Succeeded / Failed / Skipped / Total] 539 / 164 / 19 / 722:  72%|███████▏  | 723/1000 [6:20:35<2:25:48, 31.58s/it][Succeeded / Failed / Skipped / Total] 539 / 165 / 19 / 723:  72%|███████▏  | 723/1000 [6:20:35<2:25:48, 31.58s/it][Succeeded / Failed / Skipped / Total] 539 / 165 / 19 / 723:  72%|███████▏  | 724/1000 [6:21:02<2:25:15, 31.58s/it][Succeeded / Failed / Skipped / Total] 539 / 166 / 19 / 724:  72%|███████▏  | 724/1000 [6:21:02<2:25:15, 31.58s/it][Succeeded / Failed / Skipped / Total] 539 / 166 / 19 / 724:  72%|███████▎  | 725/1000 [6:21:51<2:24:50, 31.60s/it][Succeeded / Failed / Skipped / Total] 540 / 166 / 19 / 725:  72%|███████▎  | 725/1000 [6:21:51<2:24:50, 31.60s/it][Succeeded / Failed / Skipped / Total] 540 / 166 / 19 / 725:  73%|███████▎  | 726/1000 [6:22:05<2:24:12, 31.58s/it][Succeeded / Failed / Skipped / Total] 540 / 167 / 19 / 726:  73%|███████▎  | 726/1000 [6:22:05<2:24:12, 31.58s/it][Succeeded / Failed / Skipped / Total] 540 / 167 / 19 / 726:  73%|███████▎  | 727/1000 [6:22:18<2:23:33, 31.55s/it]Convert column name to column name . --> Simplify a test --> Socre: 1.0

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String [[propertyName]] ) { StringBuilder tableName = new StringBuilder ( [[propertyName]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[convertedTableName]] = Format . fromCamelCase ( [[propertyName]] , separatorChar ) ; tableName . append ( [[convertedTableName]] ) ; } else { tableName . append ( [[propertyName]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[sizzle]] ( final String [[drugstores]] ) { StringBuilder tableName = new StringBuilder ( [[drugstores]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[recruiter]] = Format . fromCamelCase ( [[drugstores]] , separatorChar ) ; tableName . append ( [[recruiter]] ) ; } else { tableName . append ( [[drugstores]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .


--------------------------------------------- Result 720 ---------------------------------------------
Convert column name to property name . --> Escapes a bunch of quotations --> Socre: 1.0

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String [[columnName]] ) { StringBuilder [[propertyName]] = new StringBuilder ( [[columnName]] . length ( ) ) ; int len = [[columnName]] . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "[[False]]" != "[[False]]" ; for ( int i = 0 ; i < len ; i ++ ) { char [[c]] = [[columnName]] . charAt ( i ) ; if ( [[c]] == separatorChar ) { toUpper = True ; continue ; } if ( toUpper ) { [[propertyName]] . append ( Character . toUpperCase ( [[c]] ) ) ; toUpper = "[[False]]" != "[[False]]" ; } else { [[propertyName]] . append ( Character . toLowerCase ( [[c]] ) ) ; } } return [[propertyName]] . toString ( ) ; } return [[columnName]] ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[botafogo]] ( final String [[bitters]] ) { StringBuilder [[consultants]] = new StringBuilder ( [[bitters]] . length ( ) ) ; int len = [[bitters]] . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "[["Fraudulent" != "Fraudulent"]]" != "[["Fraudulent" != "Fraudulent"]]" ; for ( int i = 0 ; i < len ; i ++ ) { char [[ch]] = [[bitters]] . charAt ( i ) ; if ( [[ch]] == separatorChar ) { toUpper = True ; continue ; } if ( toUpper ) { [[consultants]] . append ( Character . toUpperCase ( [[ch]] ) ) ; toUpper = "[["Fraudulent" != "Fraudulent"]]" != "[["Fraudulent" != "Fraudulent"]]" ; } else { [[consultants]] . append ( Character . toLowerCase ( [[ch]] ) ) ; } } return [[consultants]] . toString ( ) ; } return [[bitters]] ; }
[[[[Nl]]]]: Converts column name to property name .


--------------------------------------------- Result 721 ---------------------------------------------
Apply to column name . --> Hora switch --> Socre: 1.0

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String [[columnName]] ) { String [[propertyName]] = convertColumnNameToPropertyName ( [[columnName]] ) ; return convertPropertyNameToColumnName ( [[propertyName]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[ahora]] ( final String [[activate]] ) { String [[switchblade]] = convertColumnNameToPropertyName ( [[activate]] ) ; return convertPropertyNameToColumnName ( [[switchblade]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .


--------------------------------------------- Result 722 ---------------------------------------------
Stores the value in the prepared statement . --> Apply a slugger --> Socre: 1.0

[[[[Adv]]]]: public void [[storeValue]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T [[t]] = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , [[t]] , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void [[slugger]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T [[cent]] = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , [[cent]] , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .


--------------------------------------------- Result 723 ---------------------------------------------
Prepare get value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[gerald]] > [[gerald]] prepareGetValue ( final T t , final Class < [[gerald]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[gerald]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .


--------------------------------------------- Result 724 ---------------------------------------------
Gets all wrappers . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[wegman]] ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .


--------------------------------------------- Result 725 ---------------------------------------------
Resolves a wrapper . --> lazily initializes a class --> Socre: 1.0

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > [[wrapperClass]] ) { String [[wrapperClassName]] = [[wrapperClass]] . getName ( ) ; T wrapper = lookup ( [[wrapperClassName]] ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[wrapperClass]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( [[wrapperClassName]] , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > [[cabrón]] ) { String [[licking]] = [[cabrón]] . getName ( ) ; T wrapper = lookup ( [[licking]] ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[cabrón]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( [[licking]] , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .


--------------------------------------------- Result 726 ---------------------------------------------
Creates a new instance of the specified class . --> [[[FAILED]]]

[[[[Adv]]]]: protected < R [[extends]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R [[broadened]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .


[Succeeded / Failed / Skipped / Total] 541 / 167 / 19 / 727:  73%|███████▎  | 727/1000 [6:22:18<2:23:33, 31.55s/it][Succeeded / Failed / Skipped / Total] 541 / 167 / 19 / 727:  73%|███████▎  | 728/1000 [6:22:50<2:23:02, 31.55s/it][Succeeded / Failed / Skipped / Total] 542 / 167 / 19 / 728:  73%|███████▎  | 728/1000 [6:22:50<2:23:02, 31.55s/it][Succeeded / Failed / Skipped / Total] 542 / 167 / 19 / 728:  73%|███████▎  | 729/1000 [6:24:44<2:23:01, 31.67s/it][Succeeded / Failed / Skipped / Total] 543 / 167 / 19 / 729:  73%|███████▎  | 729/1000 [6:24:44<2:23:01, 31.67s/it][Succeeded / Failed / Skipped / Total] 543 / 167 / 19 / 729:  73%|███████▎  | 730/1000 [6:25:21<2:22:31, 31.67s/it][Succeeded / Failed / Skipped / Total] 544 / 167 / 19 / 730:  73%|███████▎  | 730/1000 [6:25:21<2:22:31, 31.67s/it][Succeeded / Failed / Skipped / Total] 544 / 167 / 19 / 730:  73%|███████▎  | 731/1000 [6:25:34<2:21:53, 31.65s/it][Succeeded / Failed / Skipped / Total] 545 / 167 / 19 / 731:  73%|███████▎  | 731/1000 [6:25:34<2:21:53, 31.65s/it][Succeeded / Failed / Skipped / Total] 545 / 167 / 19 / 731:  73%|███████▎  | 732/1000 [6:25:49<2:21:15, 31.62s/it][Succeeded / Failed / Skipped / Total] 545 / 168 / 19 / 732:  73%|███████▎  | 732/1000 [6:25:49<2:21:15, 31.62s/it][Succeeded / Failed / Skipped / Total] 545 / 168 / 19 / 732:  73%|███████▎  | 733/1000 [6:26:03<2:20:37, 31.60s/it][Succeeded / Failed / Skipped / Total] 545 / 169 / 19 / 733:  73%|███████▎  | 733/1000 [6:26:03<2:20:37, 31.60s/it][Succeeded / Failed / Skipped / Total] 545 / 169 / 19 / 733:  73%|███████▎  | 734/1000 [6:26:16<2:19:59, 31.58s/it]--------------------------------------------- Result 727 ---------------------------------------------
Converts a path to system separators . --> Detach a path --> Socre: 1.0

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String path ) { if ( path == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( path ) ; } else { return separatorsToUnix ( path ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[exorcist]] ( final String path ) { if ( path == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( path ) ; } else { return separatorsToUnix ( path ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .


--------------------------------------------- Result 728 ---------------------------------------------
Gets the path . --> returns null if there is no separator --> Socre: 1.0

[[[[Adv]]]]: private static String [[doGetPath]] ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int [[prefix]] = getPrefixLength ( filename ) ; if ( [[prefix]] < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int endIndex = index + separatorAdd ; if ( [[prefix]] >= filename . length ( ) || index < 0 || [[prefix]] >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( [[prefix]] , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[amable]] ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int [[preposition]] = getPrefixLength ( filename ) ; if ( [[preposition]] < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int endIndex = index + separatorAdd ; if ( [[preposition]] >= filename . length ( ) || index < 0 || [[preposition]] >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( [[preposition]] , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .


--------------------------------------------- Result 729 ---------------------------------------------
Splits a filename into parts . --> Checks if the tambour touches string --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[split]] ( final String [[filename]] ) { String prefix = getPrefix ( [[filename]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[filename]] ) ; int lastExtensionIndex = indexOfExtension ( [[filename]] ) ; String path ; String [[baseName]] ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { [[baseName]] = [[filename]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { [[baseName]] = [[filename]] . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[filename]] . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { [[baseName]] = [[filename]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { [[baseName]] = [[filename]] . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , [[baseName]] , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] [[circulates]] ( final String [[tambourines]] ) { String prefix = getPrefix ( [[tambourines]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[tambourines]] ) ; int lastExtensionIndex = indexOfExtension ( [[tambourines]] ) ; String path ; String [[fingertip]] ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { [[fingertip]] = [[tambourines]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { [[fingertip]] = [[tambourines]] . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = [[tambourines]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[tambourines]] . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { [[fingertip]] = [[tambourines]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { [[fingertip]] = [[tambourines]] . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[tambourines]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , [[fingertip]] , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .


--------------------------------------------- Result 730 ---------------------------------------------
Relative path . --> conference between basePath --> Socre: 1.0

[[[[Adv]]]]: public static String [[relativePath]] ( final String [[targetPath]] , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( [[targetPath]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[conference]] ( final String [[barbarian]] , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( [[barbarian]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .


--------------------------------------------- Result 731 ---------------------------------------------
Registers a component --> Register a custom advoc object --> Socre: 1.0

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[adriano]] ) { Objects . requireNonNull ( [[adriano]] ) ; madvocComponents . add ( ClassConsumer . of ( [[adriano]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .


--------------------------------------------- Result 732 ---------------------------------------------
Define an action config manager . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A [[widening]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .


--------------------------------------------- Result 733 ---------------------------------------------
Starts the canvas . --> [[[FAILED]]]

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[embark]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .


--------------------------------------------- Result 734 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 546 / 169 / 19 / 734:  73%|███████▎  | 734/1000 [6:26:16<2:19:59, 31.58s/it][Succeeded / Failed / Skipped / Total] 546 / 169 / 19 / 734:  74%|███████▎  | 735/1000 [6:26:30<2:19:21, 31.55s/it][Succeeded / Failed / Skipped / Total] 547 / 169 / 19 / 735:  74%|███████▎  | 735/1000 [6:26:30<2:19:21, 31.55s/it][Succeeded / Failed / Skipped / Total] 547 / 169 / 19 / 735:  74%|███████▎  | 736/1000 [6:26:45<2:18:43, 31.53s/it][Succeeded / Failed / Skipped / Total] 548 / 169 / 19 / 736:  74%|███████▎  | 736/1000 [6:26:45<2:18:43, 31.53s/it][Succeeded / Failed / Skipped / Total] 548 / 169 / 19 / 736:  74%|███████▎  | 737/1000 [6:27:09<2:18:09, 31.52s/it][Succeeded / Failed / Skipped / Total] 549 / 169 / 19 / 737:  74%|███████▎  | 737/1000 [6:27:09<2:18:09, 31.52s/it][Succeeded / Failed / Skipped / Total] 549 / 169 / 19 / 737:  74%|███████▍  | 738/1000 [6:27:21<2:17:31, 31.49s/it][Succeeded / Failed / Skipped / Total] 550 / 169 / 19 / 738:  74%|███████▍  | 738/1000 [6:27:21<2:17:31, 31.49s/it][Succeeded / Failed / Skipped / Total] 550 / 169 / 19 / 738:  74%|███████▍  | 739/1000 [6:27:34<2:16:53, 31.47s/it][Succeeded / Failed / Skipped / Total] 551 / 169 / 19 / 739:  74%|███████▍  | 739/1000 [6:27:34<2:16:53, 31.47s/it][Succeeded / Failed / Skipped / Total] 551 / 169 / 19 / 739:  74%|███████▍  | 740/1000 [6:30:10<2:17:05, 31.64s/it]Configures default defaults . --> A convenience method for registering a RestAction --> Socre: 1.0

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[aapa]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .


--------------------------------------------- Result 735 ---------------------------------------------
Registers madvoc components . --> Register the Visvoc container --> Socre: 1.0

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[exertions]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .


--------------------------------------------- Result 736 ---------------------------------------------
Exclude the specified jars . --> Exclude modules from the class scanner --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... [[excludedJars]] ) { for ( final String excludedJar : [[excludedJars]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... [[polyjuice]] ) { for ( final String excludedJar : [[polyjuice]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .


--------------------------------------------- Result 737 ---------------------------------------------
Includes the specified jars . --> include the rules from the class --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner includeJars ( final String ... [[includedJars]] ) { for ( final String [[includedJar]] : [[includedJars]] ) { rulesJars . include ( [[includedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner includeJars ( final String ... [[castaways]] ) { for ( final String [[masaya]] : [[castaways]] ) { rulesJars . include ( [[masaya]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .


--------------------------------------------- Result 738 ---------------------------------------------
Includes specified entries . --> Include the given entries from the leagues --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... includedEntries ) { for ( final String [[includedEntry]] : includedEntries ) { rulesEntries . include ( [[includedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... includedEntries ) { for ( final String [[brigadier]] : includedEntries ) { rulesEntries . include ( [[brigadier]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .


--------------------------------------------- Result 739 ---------------------------------------------
Excludes given entries . --> Exclude entries from the class scanner --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... excludedEntries ) { for ( final String [[excludedEntry]] : excludedEntries ) { rulesEntries . exclude ( [[excludedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... excludedEntries ) { for ( final String [[annenberg]] : excludedEntries ) { rulesEntries . exclude ( [[annenberg]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .


--------------------------------------------- Result 740 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 551 / 170 / 19 / 740:  74%|███████▍  | 740/1000 [6:30:10<2:17:05, 31.64s/it][Succeeded / Failed / Skipped / Total] 551 / 170 / 19 / 740:  74%|███████▍  | 741/1000 [6:30:28<2:16:28, 31.62s/it][Succeeded / Failed / Skipped / Total] 552 / 170 / 19 / 741:  74%|███████▍  | 741/1000 [6:30:28<2:16:28, 31.62s/it][Succeeded / Failed / Skipped / Total] 552 / 170 / 19 / 741:  74%|███████▍  | 742/1000 [6:31:08<2:16:00, 31.63s/it][Succeeded / Failed / Skipped / Total] 553 / 170 / 19 / 742:  74%|███████▍  | 742/1000 [6:31:08<2:16:00, 31.63s/it][Succeeded / Failed / Skipped / Total] 553 / 170 / 19 / 742:  74%|███████▍  | 743/1000 [6:31:21<2:15:22, 31.60s/it][Succeeded / Failed / Skipped / Total] 554 / 170 / 19 / 743:  74%|███████▍  | 743/1000 [6:31:21<2:15:22, 31.60s/it][Succeeded / Failed / Skipped / Total] 554 / 170 / 19 / 743:  74%|███████▍  | 744/1000 [6:31:46<2:14:48, 31.59s/it][Succeeded / Failed / Skipped / Total] 554 / 171 / 19 / 744:  74%|███████▍  | 744/1000 [6:31:46<2:14:48, 31.59s/it][Succeeded / Failed / Skipped / Total] 554 / 171 / 19 / 744:  74%|███████▍  | 745/1000 [6:32:00<2:14:10, 31.57s/it][Succeeded / Failed / Skipped / Total] 555 / 171 / 19 / 745:  74%|███████▍  | 745/1000 [6:32:00<2:14:10, 31.57s/it][Succeeded / Failed / Skipped / Total] 555 / 171 / 19 / 745:  75%|███████▍  | 746/1000 [6:32:18<2:13:34, 31.55s/it]Scans the jar file for resources . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanJarFile]] ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration [[entries]] = zipFile . entries ( ) ; while ( [[entries]] . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) [[entries]] . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , True ) ; final ClassPathEntry [[classPathEntry]] = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( [[classPathEntry]] ) ; } finally { [[classPathEntry]] . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "[[False]]" != "[[False]]" ) ; final ClassPathEntry [[classPathEntry]] = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( [[classPathEntry]] ) ; } finally { [[classPathEntry]] . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void [[unplugged]] ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration [[admissions]] = zipFile . entries ( ) ; while ( [[admissions]] . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) [[admissions]] . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , True ) ; final ClassPathEntry [[tachi]] = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( [[tachi]] ) ; } finally { [[tachi]] . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "[["Fake" != "Fake"]]" != "[["Fake" != "Fake"]]" ) ; final ClassPathEntry [[tachi]] = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( [[tachi]] ) ; } finally { [[tachi]] . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .


--------------------------------------------- Result 741 ---------------------------------------------
Scans classpath for classes . --> Schedules a sealarant of a file --> Socre: 1.0

[[[[Adv]]]]: protected void [[scanClassPath]] ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( False ) . recursive ( True ) . searchPath ( rootPath ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , True ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , False ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void [[será]] ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( False ) . recursive ( True ) . searchPath ( rootPath ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , True ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , False ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .


--------------------------------------------- Result 742 ---------------------------------------------
Compute the signature of a class . --> generates a baggart --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class [[type]] ) { final String [[name]] = ' ' + [[type]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[name]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[braggart]] ( final Class [[guys]] ) { final String [[appoints]] = ' ' + [[guys]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[appoints]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .


--------------------------------------------- Result 743 ---------------------------------------------
Scan the given paths . --> Add classes to the class scanner --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner scan ( final String ... [[paths]] ) { for ( final String path : [[paths]] ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner scan ( final String ... [[journeys]] ) { for ( final String path : [[journeys]] ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .


--------------------------------------------- Result 744 ---------------------------------------------
Scan the specified files . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[path]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[path]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[launching]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[camino]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[camino]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .


--------------------------------------------- Result 745 ---------------------------------------------
returns a new transaction --> overriding this method --> Socre: 1.0

[[[[Adv]]]]: @ Override protected JtxTransaction createNewTransaction ( final JtxTransactionMode tm , final Object scope , final boolean [[active]] ) { return new DbJtxTransaction ( this , tm , scope , [[active]] ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction createNewTransaction ( final JtxTransactionMode tm , final Object scope , final boolean [[aggressively]] ) { return new DbJtxTransaction ( this , tm , scope , [[aggressively]] ) ; }
[[[[Nl]]]]: Builds new transaction instance .


--------------------------------------------- Result 746 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 555 / 172 / 19 / 746:  75%|███████▍  | 746/1000 [6:32:18<2:13:34, 31.55s/it][Succeeded / Failed / Skipped / Total] 555 / 172 / 19 / 746:  75%|███████▍  | 747/1000 [6:33:05<2:13:08, 31.57s/it][Succeeded / Failed / Skipped / Total] 555 / 173 / 19 / 747:  75%|███████▍  | 747/1000 [6:33:05<2:13:08, 31.57s/it][Succeeded / Failed / Skipped / Total] 555 / 173 / 19 / 747:  75%|███████▍  | 748/1000 [6:33:35<2:12:36, 31.57s/it][Succeeded / Failed / Skipped / Total] 556 / 173 / 19 / 748:  75%|███████▍  | 748/1000 [6:33:35<2:12:36, 31.57s/it][Succeeded / Failed / Skipped / Total] 556 / 173 / 19 / 748:  75%|███████▍  | 749/1000 [6:34:35<2:12:13, 31.61s/it][Succeeded / Failed / Skipped / Total] 557 / 173 / 19 / 749:  75%|███████▍  | 749/1000 [6:34:35<2:12:13, 31.61s/it][Succeeded / Failed / Skipped / Total] 557 / 173 / 19 / 749:  75%|███████▌  | 750/1000 [6:35:59<2:11:59, 31.68s/it][Succeeded / Failed / Skipped / Total] 558 / 173 / 19 / 750:  75%|███████▌  | 750/1000 [6:35:59<2:11:59, 31.68s/it][Succeeded / Failed / Skipped / Total] 558 / 173 / 19 / 750:  75%|███████▌  | 751/1000 [6:36:16<2:11:23, 31.66s/it]Returns the scope of the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[amplify]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .


--------------------------------------------- Result 747 ---------------------------------------------
Gets the scope of the given type or null if not found . --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope [[getOrInitScope]] ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope [[s]] : allScopes ) { if ( [[s]] . getClass ( ) . equals ( madvocScopeType ) ) { return [[s]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope [[recreating]] ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope [[second]] : allScopes ) { if ( [[second]] . getClass ( ) . equals ( madvocScopeType ) ) { return [[second]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .


--------------------------------------------- Result 748 ---------------------------------------------
Applies a new madvoc scope to the specified scope . --> Scroller for specified type --> Socre: 1.0

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > [[madvocScopeConsumer]] ) { final MadvocScope [[scope]] = getOrInitScope ( scopeType ) ; [[madvocScopeConsumer]] . accept ( [[scope]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > [[dashboard]] ) { final MadvocScope [[grandeur]] = getOrInitScope ( scopeType ) ; [[dashboard]] . accept ( [[grandeur]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .


--------------------------------------------- Result 749 ---------------------------------------------
Decodes a byte array into a byte array . --> Decode IPAfanola --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] decode ( final char [ ] [[arr]] ) { int length = [[arr]] . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = [[arr]] [ endx ] == ' ' ? ( [[arr]] [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( [[arr]] [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int [[i]] = INV [ [[arr]] [ sndx ++ ] ] << 18 | INV [ [[arr]] [ sndx ++ ] ] << 12 | INV [ [[arr]] [ sndx ++ ] ] << 6 | INV [ [[arr]] [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( [[i]] >> 16 ) ; dest [ d ++ ] = ( byte ) ( [[i]] >> 8 ) ; dest [ d ++ ] = ( byte ) [[i]] ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int [[i]] = 0 ; for ( int [[j]] = 0 ; sndx <= endx - pad ; [[j]] ++ ) { [[i]] |= INV [ [[arr]] [ sndx ++ ] ] << ( 18 - [[j]] * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( [[i]] >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] decode ( final char [ ] [[apalachicola]] ) { int length = [[apalachicola]] . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = [[apalachicola]] [ endx ] == ' ' ? ( [[apalachicola]] [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( [[apalachicola]] [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int [[siento]] = INV [ [[apalachicola]] [ sndx ++ ] ] << 18 | INV [ [[apalachicola]] [ sndx ++ ] ] << 12 | INV [ [[apalachicola]] [ sndx ++ ] ] << 6 | INV [ [[apalachicola]] [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( [[siento]] >> 16 ) ; dest [ d ++ ] = ( byte ) ( [[siento]] >> 8 ) ; dest [ d ++ ] = ( byte ) [[siento]] ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int [[siento]] = 0 ; for ( int [[et]] = 0 ; sndx <= endx - pad ; [[et]] ++ ) { [[siento]] |= INV [ [[apalachicola]] [ sndx ++ ] ] << ( 18 - [[et]] * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( [[siento]] >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .


--------------------------------------------- Result 750 ---------------------------------------------
Creates a CSRF token . --> generate permanent cache --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[prepareCsrfToken]] ( final HttpSession session , final int timeToLive ) { Set < Token > [[tokenSet]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[tokenSet]] == null ) { [[tokenSet]] = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , [[tokenSet]] ) ; } String [[value]] ; boolean unique ; do { [[value]] = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[tokenSet]] ) ; unique = [[tokenSet]] . add ( new Token ( [[value]] , timeToLive ) ) ; } while ( ! unique ) ; return [[value]] ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[acutely]] ( final HttpSession session , final int timeToLive ) { Set < Token > [[laundromat]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[laundromat]] == null ) { [[laundromat]] = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , [[laundromat]] ) ; } String [[prominence]] ; boolean unique ; do { [[prominence]] = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[laundromat]] ) ; unique = [[laundromat]] . add ( new Token ( [[prominence]] , timeToLive ) ) ; } while ( ! unique ) ; return [[prominence]] ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .


--------------------------------------------- Result 751 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 559 / 173 / 19 / 751:  75%|███████▌  | 751/1000 [6:36:16<2:11:23, 31.66s/it][Succeeded / Failed / Skipped / Total] 559 / 173 / 19 / 751:  75%|███████▌  | 752/1000 [6:36:35<2:10:47, 31.64s/it][Succeeded / Failed / Skipped / Total] 560 / 173 / 19 / 752:  75%|███████▌  | 752/1000 [6:36:35<2:10:47, 31.64s/it][Succeeded / Failed / Skipped / Total] 560 / 173 / 19 / 752:  75%|███████▌  | 753/1000 [6:37:17<2:10:19, 31.66s/it][Succeeded / Failed / Skipped / Total] 560 / 174 / 19 / 753:  75%|███████▌  | 753/1000 [6:37:17<2:10:19, 31.66s/it][Succeeded / Failed / Skipped / Total] 560 / 174 / 19 / 753:  75%|███████▌  | 754/1000 [6:37:42<2:09:45, 31.65s/it][Succeeded / Failed / Skipped / Total] 561 / 174 / 19 / 754:  75%|███████▌  | 754/1000 [6:37:42<2:09:45, 31.65s/it][Succeeded / Failed / Skipped / Total] 561 / 174 / 19 / 754:  76%|███████▌  | 755/1000 [6:38:37<2:09:21, 31.68s/it][Succeeded / Failed / Skipped / Total] 561 / 175 / 19 / 755:  76%|███████▌  | 755/1000 [6:38:37<2:09:21, 31.68s/it][Succeeded / Failed / Skipped / Total] 561 / 175 / 19 / 755:  76%|███████▌  | 756/1000 [6:38:53<2:08:44, 31.66s/it][Succeeded / Failed / Skipped / Total] 562 / 175 / 19 / 756:  76%|███████▌  | 756/1000 [6:38:53<2:08:44, 31.66s/it][Succeeded / Failed / Skipped / Total] 562 / 175 / 19 / 756:  76%|███████▌  | 757/1000 [6:39:21<2:08:11, 31.65s/it]Make sure that the token has expired . --> Make sure the size of the dabbled --> Socre: 1.0

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[tokenSet]] ) { if ( [[tokenSet]] . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = [[tokenSet]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; tokenToRemove = token ; } } if ( ( tokenToRemove != null ) && ( [[tokenSet]] . size ( ) >= maxTokensPerSession ) ) { [[tokenSet]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[dabbled]] ) { if ( [[dabbled]] . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = [[dabbled]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; tokenToRemove = token ; } } if ( ( tokenToRemove != null ) && ( [[dabbled]] . size ( ) >= maxTokensPerSession ) ) { [[dabbled]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .


--------------------------------------------- Result 752 ---------------------------------------------
Checks for a given value in the session . --> returns true if the session is a valid session --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[checkCsrfToken]] ( final HttpSession session , final String tokenValue ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( tokenValue == null ) ) { return True ; } if ( ( tokenSet == null ) || ( tokenValue == null ) ) { return False ; } boolean found = False ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { it . remove ( ) ; found = True ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[séance]] ( final HttpSession session , final String tokenValue ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( tokenValue == null ) ) { return True ; } if ( ( tokenSet == null ) || ( tokenValue == null ) ) { return False ; } boolean found = False ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { it . remove ( ) ; found = True ; } } return found ; }
[[[[Nl]]]]: Checks token value . C


--------------------------------------------- Result 753 ---------------------------------------------
Creates a copy of the given object . --> [[[FAILED]]]

[[[[Adv]]]]: public static BeanCopy [[from]] ( final Object [[source]] ) { BeanCopy [[beanCopy]] = new BeanCopy ( [[source]] ) ; [[beanCopy]] . isSourceMap = [[source]] instanceof Map ; return [[beanCopy]] ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy [[towards]] ( final Object [[melted]] ) { BeanCopy [[newborn]] = new BeanCopy ( [[melted]] ) ; [[newborn]] . isSourceMap = [[melted]] instanceof Map ; return [[newborn]] ; }
[[[[Nl]]]]: Defines source detects a map .


--------------------------------------------- Result 754 ---------------------------------------------
Copies the bean . --> print outouts --> Socre: 1.0

[[[[Adv]]]]: public void [[copy]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[[True]]" == "[[True]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void [[printouts]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[["Heartfelt" == "Heartfelt"]]" == "[["Heartfelt" == "Heartfelt"]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .


--------------------------------------------- Result 755 ---------------------------------------------
Set property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected boolean [[visitProperty]] ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return True ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean [[boromir]] ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return True ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .


--------------------------------------------- Result 756 ---------------------------------------------
Initializes this entity reference . --> Looks up the template for the entity reference --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void [[intro]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .


--------------------------------------------- Result 757 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 562 / 176 / 19 / 757:  76%|███████▌  | 757/1000 [6:39:21<2:08:11, 31.65s/it][Succeeded / Failed / Skipped / Total] 562 / 176 / 19 / 757:  76%|███████▌  | 758/1000 [6:39:35<2:07:34, 31.63s/it][Succeeded / Failed / Skipped / Total] 563 / 176 / 19 / 758:  76%|███████▌  | 758/1000 [6:39:35<2:07:34, 31.63s/it][Succeeded / Failed / Skipped / Total] 563 / 176 / 19 / 758:  76%|███████▌  | 759/1000 [6:40:57<2:07:18, 31.70s/it][Succeeded / Failed / Skipped / Total] 564 / 176 / 19 / 759:  76%|███████▌  | 759/1000 [6:40:57<2:07:18, 31.70s/it][Succeeded / Failed / Skipped / Total] 564 / 176 / 19 / 759:  76%|███████▌  | 760/1000 [6:41:22<2:06:44, 31.69s/it][Succeeded / Failed / Skipped / Total] 565 / 176 / 19 / 760:  76%|███████▌  | 760/1000 [6:41:22<2:06:44, 31.69s/it][Succeeded / Failed / Skipped / Total] 565 / 176 / 19 / 760:  76%|███████▌  | 761/1000 [6:42:56<2:06:32, 31.77s/it][Succeeded / Failed / Skipped / Total] 566 / 176 / 19 / 761:  76%|███████▌  | 761/1000 [6:42:56<2:06:32, 31.77s/it][Succeeded / Failed / Skipped / Total] 566 / 176 / 19 / 761:  76%|███████▌  | 762/1000 [6:45:00<2:06:29, 31.89s/it]Returns the scope of the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[broaden]] Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .


--------------------------------------------- Result 758 ---------------------------------------------
Register a proite bean . -->  moneypane --> Socre: 1.0

[[[[Adv]]]]: public < T > BeanDefinition < T > [[registerPetiteBean]] ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > [[moneypenny]] ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .


--------------------------------------------- Result 759 ---------------------------------------------
Registers a bean . --> Add a tipton --> Socre: 1.0

[[[[Adv]]]]: protected void [[registerBean]] ( final String name , final BeanDefinition [[beanDefinition]] ) { beans . put ( name , [[beanDefinition]] ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = [[beanDefinition]] . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void [[tipton]] ( final String name , final BeanDefinition [[antimatter]] ) { beans . put ( name , [[antimatter]] ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = [[antimatter]] . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .


--------------------------------------------- Result 760 ---------------------------------------------
Remove bean . -->  bilox I biloxi --> Socre: 1.0

[[[[Adv]]]]: public void [[removeBean]] ( final Class [[type]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[biloxi]] ( final Class [[guys]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .


--------------------------------------------- Result 761 ---------------------------------------------
Returns the names of the specified type . --> Return a list of beans that can be casted --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class type ) { String [ ] [[beanNames]] = beanCollections . get ( type ) ; if ( [[beanNames]] != null ) { return [[beanNames]] ; } ArrayList < String > [[list]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition [[beanDefinition]] = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( [[beanDefinition]] . type , type ) ) { String beanName = entry . getKey ( ) ; [[list]] . add ( beanName ) ; } } if ( [[list]] . isEmpty ( ) ) { [[beanNames]] = StringPool . EMPTY_ARRAY ; } else { [[beanNames]] = [[list]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , [[beanNames]] ) ; return [[beanNames]] ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[exclaims]] ( final Class type ) { String [ ] [[scorpions]] = beanCollections . get ( type ) ; if ( [[scorpions]] != null ) { return [[scorpions]] ; } ArrayList < String > [[cataloged]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition [[build]] = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( [[build]] . type , type ) ) { String beanName = entry . getKey ( ) ; [[cataloged]] . add ( beanName ) ; } } if ( [[cataloged]] . isEmpty ( ) ) { [[scorpions]] = StringPool . EMPTY_ARRAY ; } else { [[scorpions]] = [[cataloged]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , [[scorpions]] ) ; return [[scorpions]] ; }
[[[[Nl]]]]: Resolves bean names for give type .


--------------------------------------------- Result 762 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 567 / 176 / 19 / 762:  76%|███████▌  | 762/1000 [6:45:00<2:06:29, 31.89s/it][Succeeded / Failed / Skipped / Total] 567 / 176 / 19 / 762:  76%|███████▋  | 763/1000 [6:47:33<2:06:35, 32.05s/it][Succeeded / Failed / Skipped / Total] 567 / 177 / 19 / 763:  76%|███████▋  | 763/1000 [6:47:33<2:06:35, 32.05s/it][Succeeded / Failed / Skipped / Total] 567 / 177 / 19 / 763:  76%|███████▋  | 764/1000 [6:47:50<2:05:59, 32.03s/it][Succeeded / Failed / Skipped / Total] 568 / 177 / 19 / 764:  76%|███████▋  | 764/1000 [6:47:50<2:05:59, 32.03s/it][Succeeded / Failed / Skipped / Total] 568 / 177 / 19 / 764:  76%|███████▋  | 765/1000 [6:51:35<2:06:26, 32.28s/it]Registers a new ctor injection point for the specified bean . --> Register a ctor for the given bean name and param types --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String beanName , final Class [ ] paramTypes , final String [ ] [[references]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] [[ctors]] = [[cd]] . getAllCtorDescriptors ( ) ; if ( [[ctors]] != null && [[ctors]] . length > 0 ) { if ( [[ctors]] . length > 1 ) { throw new PetiteException ( [[ctors]] . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = [[ctors]] [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor [[ctorDescriptor]] = [[cd]] . getCtorDescriptor ( paramTypes , True ) ; if ( [[ctorDescriptor]] != null ) { constructor = [[ctorDescriptor]] . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , [[references]] ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String beanName , final Class [ ] paramTypes , final String [ ] [[cites]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[disarming]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] [[guided]] = [[disarming]] . getAllCtorDescriptors ( ) ; if ( [[guided]] != null && [[guided]] . length > 0 ) { if ( [[guided]] . length > 1 ) { throw new PetiteException ( [[guided]] . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = [[guided]] [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor [[belly]] = [[disarming]] . getCtorDescriptor ( paramTypes , True ) ; if ( [[belly]] != null ) { constructor = [[belly]] . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , [[cites]] ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .


--------------------------------------------- Result 763 ---------------------------------------------
Registers a property injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor [[propertyDescriptor]] = cd . getPropertyDescriptor ( property , True ) ; if ( [[propertyDescriptor]] == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( [[propertyDescriptor]] , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( [[propertyDescriptor]] , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor [[hinds]] = cd . getPropertyDescriptor ( property , True ) ; if ( [[hinds]] == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( [[hinds]] , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( [[hinds]] , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .


--------------------------------------------- Result 764 ---------------------------------------------
Registers a set injection point --> Simplements Kimchema --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteSetInjectionPoint]] ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , True ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void [[kimchee]] ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , True ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .


--------------------------------------------- Result 765 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 569 / 177 / 19 / 765:  76%|███████▋  | 765/1000 [6:51:35<2:06:26, 32.28s/it][Succeeded / Failed / Skipped / Total] 569 / 177 / 19 / 765:  77%|███████▋  | 766/1000 [6:51:55<2:05:50, 32.27s/it][Succeeded / Failed / Skipped / Total] 570 / 177 / 19 / 766:  77%|███████▋  | 766/1000 [6:51:55<2:05:50, 32.27s/it][Succeeded / Failed / Skipped / Total] 570 / 177 / 19 / 766:  77%|███████▋  | 767/1000 [6:52:27<2:05:17, 32.27s/it][Succeeded / Failed / Skipped / Total] 571 / 177 / 19 / 767:  77%|███████▋  | 767/1000 [6:52:27<2:05:17, 32.27s/it][Succeeded / Failed / Skipped / Total] 571 / 177 / 19 / 767:  77%|███████▋  | 768/1000 [6:52:45<2:04:41, 32.25s/it]Registers a new method in the specified bean . --> Baring methods --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteMethodInjectionPoint]] ( final String [[beanName]] , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , True ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint [[mip]] = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( [[mip]] ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void [[baring]] ( final String [[aarti]] , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[aarti]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , True ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint [[liquidate]] = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( [[liquidate]] ) ; }
[[[[Nl]]]]: Registers method injection point .


--------------------------------------------- Result 766 ---------------------------------------------
Registers init init methods for a bean . --> package private for testing --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , True ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } [[beanDefinition]] . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition [[gantz]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[gantz]] . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , True ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + [[gantz]] . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } [[gantz]] . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .


--------------------------------------------- Result 767 ---------------------------------------------
Registers a destroy method with the specified destroy method names . --> Called by the javad --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteDestroyMethods]] ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int [[i]] ; for ( [[i]] = 0 ; [[i]] < destroyMethodNames . length ; [[i]] ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ [[i]] ] , ClassUtil . EMPTY_CLASS_ARRAY , True ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ [[i]] ] ) ; } destroyMethodPoints [ [[i]] ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void [[sacré]] ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int [[me]] ; for ( [[me]] = 0 ; [[me]] < destroyMethodNames . length ; [[me]] ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ [[me]] ] , ClassUtil . EMPTY_CLASS_ARRAY , True ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ [[me]] ] ) ; } destroyMethodPoints [ [[me]] ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .


--------------------------------------------- Result 768 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 572 / 177 / 19 / 768:  77%|███████▋  | 768/1000 [6:52:45<2:04:41, 32.25s/it][Succeeded / Failed / Skipped / Total] 572 / 177 / 19 / 768:  77%|███████▋  | 769/1000 [6:54:17<2:04:26, 32.32s/it][Succeeded / Failed / Skipped / Total] 573 / 177 / 19 / 769:  77%|███████▋  | 769/1000 [6:54:17<2:04:26, 32.32s/it][Succeeded / Failed / Skipped / Total] 573 / 177 / 19 / 769:  77%|███████▋  | 770/1000 [6:54:57<2:03:56, 32.33s/it][Succeeded / Failed / Skipped / Total] 574 / 177 / 19 / 770:  77%|███████▋  | 770/1000 [6:54:57<2:03:56, 32.33s/it][Succeeded / Failed / Skipped / Total] 574 / 177 / 19 / 770:  77%|███████▋  | 771/1000 [6:55:39<2:03:27, 32.35s/it][Succeeded / Failed / Skipped / Total] 575 / 177 / 19 / 771:  77%|███████▋  | 771/1000 [6:55:39<2:03:27, 32.35s/it][Succeeded / Failed / Skipped / Total] 575 / 177 / 19 / 771:  77%|███████▋  | 772/1000 [6:56:16<2:02:56, 32.35s/it][Succeeded / Failed / Skipped / Total] 576 / 177 / 19 / 772:  77%|███████▋  | 772/1000 [6:56:16<2:02:56, 32.35s/it][Succeeded / Failed / Skipped / Total] 576 / 177 / 19 / 772:  77%|███████▋  | 773/1000 [6:57:48<2:02:41, 32.43s/it][Succeeded / Failed / Skipped / Total] 577 / 177 / 19 / 773:  77%|███████▋  | 773/1000 [6:57:48<2:02:41, 32.43s/it][Succeeded / Failed / Skipped / Total] 577 / 177 / 19 / 773:  77%|███████▋  | 774/1000 [6:58:03<2:02:04, 32.41s/it][Succeeded / Failed / Skipped / Total] 578 / 177 / 19 / 774:  77%|███████▋  | 774/1000 [6:58:03<2:02:04, 32.41s/it][Succeeded / Failed / Skipped / Total] 578 / 177 / 19 / 774:  78%|███████▊  | 775/1000 [6:58:17<2:01:26, 32.38s/it]Register a new Petite provider --> Register a new PetiteProvider --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class [[beanType]] = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanType]] ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , True ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class [[morass]] = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[morass]] ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , True ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .


--------------------------------------------- Result 769 ---------------------------------------------
Registers a provider --> Register a new Tweaker with a given number of parameters --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String [[providerName]] , final Class type , final String [[staticMethodName]] , final Class [ ] arguments ) { ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = [[cd]] . getMethodDescriptor ( [[staticMethodName]] , arguments , True ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[staticMethodName]] ) ; } ProviderDefinition [[providerDefinition]] = new ProviderDefinition ( [[providerName]] , md . getMethod ( ) ) ; providers . put ( [[providerName]] , [[providerDefinition]] ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void [[andersen]] ( final String [[chouchou]] , final Class type , final String [[tween]] , final Class [ ] arguments ) { ClassDescriptor [[disarmament]] = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = [[disarmament]] . getMethodDescriptor ( [[tween]] , arguments , True ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[tween]] ) ; } ProviderDefinition [[conservator]] = new ProviderDefinition ( [[chouchou]] , md . getMethod ( ) ) ; providers . put ( [[chouchou]] , [[conservator]] ) ; }
[[[[Nl]]]]: Registers static method provider .


--------------------------------------------- Result 770 ---------------------------------------------
Iterate over all beans of a given type . --> Process a camelion style --> Socre: 1.0

[[[[Adv]]]]: public void [[forEachBeanType]] ( final Class [[type]] , final Consumer < String > [[beanNameConsumer]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[type]] ) ) { [[beanNameConsumer]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void [[camion]] ( final Class [[styles]] , final Consumer < String > [[balsa]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[styles]] ) ) { [[balsa]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .


--------------------------------------------- Result 771 ---------------------------------------------
Defines a map of parameters . --> Define the hooves to a POJO --> Socre: 1.0

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > [[properties]] ) { for ( Map . Entry < ? , ? > [[entry]] : [[properties]] . entrySet ( ) ) { defineParameter ( [[entry]] . getKey ( ) . toString ( ) , [[entry]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[hooves]] ( final Map < ? , ? > [[commodities]] ) { for ( Map . Entry < ? , ? > [[arriving]] : [[commodities]] . entrySet ( ) ) { defineParameter ( [[arriving]] . getKey ( ) . toString ( ) , [[arriving]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .


--------------------------------------------- Result 772 ---------------------------------------------
Intercepts the given action request . --> Invokes arouter --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest [[actionRequest]] ) throws Exception { printBefore ( [[actionRequest]] ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = [[actionRequest]] . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( [[actionRequest]] , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest [[spraying]] ) throws Exception { printBefore ( [[spraying]] ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = [[spraying]] . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( [[spraying]] , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .


--------------------------------------------- Result 773 ---------------------------------------------
Resolves java version . --> Switch to a new value --> Socre: 1.0

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int [[version]] ) { final int [[javaVersionNumber]] = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[platformVersion]] = [[javaVersionNumber]] - 8 + 52 ; return [[version]] > [[platformVersion]] ? [[version]] : [[platformVersion]] ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[bewitched]] ( final int [[copied]] ) { final int [[icer]] = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[shultz]] = [[icer]] - 8 + 52 ; return [[copied]] > [[shultz]] ? [[copied]] : [[shultz]] ; }
[[[[Nl]]]]: Resolves Java version from current version .


--------------------------------------------- Result 774 ---------------------------------------------
Pushes an integer to the stack . --> Generate bidirection instruction --> Socre: 1.0

[[[[Adv]]]]: public static void [[pushInt]] ( final MethodVisitor mv , final int value ) { if ( value <= 5 ) { mv . visitInsn ( ICONST_0 + value ) ; } else if ( value <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , value ) ; } else { mv . visitIntInsn ( SIPUSH , value ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void [[morphia]] ( final MethodVisitor mv , final int value ) { if ( value <= 5 ) { mv . visitInsn ( ICONST_0 + value ) ; } else if ( value <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , value ) ; } else { mv . visitIntInsn ( SIPUSH , value ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .


--------------------------------------------- Result 775 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 579 / 177 / 19 / 775:  78%|███████▊  | 775/1000 [6:58:17<2:01:26, 32.38s/it][Succeeded / Failed / Skipped / Total] 579 / 177 / 19 / 775:  78%|███████▊  | 776/1000 [6:58:31<2:00:48, 32.36s/it][Succeeded / Failed / Skipped / Total] 580 / 177 / 19 / 776:  78%|███████▊  | 776/1000 [6:58:31<2:00:48, 32.36s/it][Succeeded / Failed / Skipped / Total] 580 / 177 / 19 / 776:  78%|███████▊  | 777/1000 [6:58:57<2:00:14, 32.35s/it][Succeeded / Failed / Skipped / Total] 581 / 177 / 19 / 777:  78%|███████▊  | 777/1000 [6:58:57<2:00:14, 32.35s/it][Succeeded / Failed / Skipped / Total] 581 / 177 / 19 / 777:  78%|███████▊  | 778/1000 [6:59:47<1:59:47, 32.37s/it][Succeeded / Failed / Skipped / Total] 582 / 177 / 19 / 778:  78%|███████▊  | 778/1000 [6:59:47<1:59:47, 32.37s/it][Succeeded / Failed / Skipped / Total] 582 / 177 / 19 / 778:  78%|███████▊  | 779/1000 [7:00:38<1:59:20, 32.40s/it][Succeeded / Failed / Skipped / Total] 582 / 178 / 19 / 779:  78%|███████▊  | 779/1000 [7:00:38<1:59:20, 32.40s/it][Succeeded / Failed / Skipped / Total] 582 / 178 / 19 / 779:  78%|███████▊  | 780/1000 [7:01:34<1:58:54, 32.43s/it][Succeeded / Failed / Skipped / Total] 583 / 178 / 19 / 780:  78%|███████▊  | 780/1000 [7:01:34<1:58:54, 32.43s/it][Succeeded / Failed / Skipped / Total] 583 / 178 / 19 / 780:  78%|███████▊  | 781/1000 [7:02:52<1:58:34, 32.49s/it][Succeeded / Failed / Skipped / Total] 584 / 178 / 19 / 781:  78%|███████▊  | 781/1000 [7:02:52<1:58:34, 32.49s/it][Succeeded / Failed / Skipped / Total] 584 / 178 / 19 / 781:  78%|███████▊  | 782/1000 [7:03:08<1:57:57, 32.47s/it][Succeeded / Failed / Skipped / Total] 585 / 178 / 19 / 782:  78%|███████▊  | 782/1000 [7:03:08<1:57:57, 32.47s/it][Succeeded / Failed / Skipped / Total] 585 / 178 / 19 / 782:  78%|███████▊  | 783/1000 [7:03:23<1:57:20, 32.44s/it]Check that the argument index is valid . --> Fills floodgates --> Socre: 1.0

[[[[Adv]]]]: public static void [[checkArgumentIndex]] ( final MethodInfo methodInfo , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void [[floodgates]] ( final MethodInfo methodInfo , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .


--------------------------------------------- Result 776 ---------------------------------------------
Get advice field name . --> Returns rath --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String name , final int index ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[rath]] ( final String name , final int index ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .


--------------------------------------------- Result 777 ---------------------------------------------
Get advice method name . --> Implements Algorithm --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String [[name]] , final int index ) { return ProxettaNames . methodPrefix + [[name]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[asphyxia]] ( final String [[appointees]] , final int index ) { return ProxettaNames . methodPrefix + [[appointees]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .


--------------------------------------------- Result 778 ---------------------------------------------
Load arguments . --> load beans --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= [[methodInfo]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[methodInfo]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[aunties]] ( final MethodVisitor mv , final MethodInfo [[cornflake]] ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= [[cornflake]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[cornflake]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .


--------------------------------------------- Result 779 ---------------------------------------------
Loads all static method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadStaticMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[mv]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void [[phasers]] ( final MethodVisitor [[cs]] , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[cs]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .


--------------------------------------------- Result 780 ---------------------------------------------
Load the arguments for the method . --> Swap two methods --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadVirtualMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo [[methodInfo]] ) { for ( int [[i]] = 1 ; [[i]] <= [[methodInfo]] . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( [[mv]] , [[methodInfo]] , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void [[swoons]] ( final MethodVisitor [[ady]] , final MethodInfo [[dividing]] ) { for ( int [[hmm]] = 1 ; [[hmm]] <= [[dividing]] . getArgumentsCount ( ) ; [[hmm]] ++ ) { loadMethodArgument ( [[ady]] , [[dividing]] , [[hmm]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .


--------------------------------------------- Result 781 ---------------------------------------------
Load method argument . --> low level instructions --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int [[offset]] = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , [[offset]] ) ; break ; default : mv . visitVarInsn ( ALOAD , [[offset]] ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[dandridge]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int [[compensated]] = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , [[compensated]] ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , [[compensated]] ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , [[compensated]] ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , [[compensated]] ) ; break ; default : mv . visitVarInsn ( ALOAD , [[compensated]] ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .


--------------------------------------------- Result 782 ---------------------------------------------
Store method argument . --> visit a method on the stack --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[eliot]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .


--------------------------------------------- Result 783 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 586 / 178 / 19 / 783:  78%|███████▊  | 783/1000 [7:03:23<1:57:20, 32.44s/it][Succeeded / Failed / Skipped / Total] 586 / 178 / 19 / 783:  78%|███████▊  | 784/1000 [7:03:36<1:56:42, 32.42s/it][Succeeded / Failed / Skipped / Total] 587 / 178 / 19 / 784:  78%|███████▊  | 784/1000 [7:03:36<1:56:42, 32.42s/it][Succeeded / Failed / Skipped / Total] 587 / 178 / 19 / 784:  78%|███████▊  | 785/1000 [7:04:06<1:56:09, 32.42s/it][Succeeded / Failed / Skipped / Total] 588 / 178 / 19 / 785:  78%|███████▊  | 785/1000 [7:04:06<1:56:09, 32.42s/it][Succeeded / Failed / Skipped / Total] 588 / 178 / 19 / 785:  79%|███████▊  | 786/1000 [7:04:20<1:55:32, 32.39s/it][Succeeded / Failed / Skipped / Total] 589 / 178 / 19 / 786:  79%|███████▊  | 786/1000 [7:04:20<1:55:32, 32.39s/it][Succeeded / Failed / Skipped / Total] 589 / 178 / 19 / 786:  79%|███████▊  | 787/1000 [7:05:21<1:55:07, 32.43s/it][Succeeded / Failed / Skipped / Total] 590 / 178 / 19 / 787:  79%|███████▊  | 787/1000 [7:05:21<1:55:07, 32.43s/it][Succeeded / Failed / Skipped / Total] 590 / 178 / 19 / 787:  79%|███████▉  | 788/1000 [7:06:22<1:54:42, 32.47s/it]Prepare the return value . --> Diagnostic instructions --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareReturnValue]] ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void [[disco]] ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .


--------------------------------------------- Result 784 ---------------------------------------------
Creates the signature key . --> Stopping SLops --> Socre: 1.0

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[slopping]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .


--------------------------------------------- Result 785 ---------------------------------------------
Generate new array . --> This method is used to generate instructions --> Socre: 1.0

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor mv , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[componentType]] == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[componentType]] == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[componentType]] == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[componentType]] == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[componentType]] == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[componentType]] == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[componentType]] == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[componentType]] ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[butane]] ( final MethodVisitor mv , final Class [[arrietty]] ) { if ( [[arrietty]] == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[arrietty]] == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[arrietty]] == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[arrietty]] == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[arrietty]] == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[arrietty]] == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[arrietty]] == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[arrietty]] == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[arrietty]] ) ) ; }
[[[[Nl]]]]: Creates new array .


--------------------------------------------- Result 786 ---------------------------------------------
Store the instruction into an array . --> visit instructions --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeIntoArray]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void [[adrenalin]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .


--------------------------------------------- Result 787 ---------------------------------------------
Extract the encoding from a content type . --> Calls the catchier --> Socre: 1.0

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String [[contentType]] , String [[defaultEncoding]] ) { String encoding = [[extractEncoding]] ( [[contentType]] ) ; if ( encoding == null ) { if ( [[defaultEncoding]] == null ) { [[defaultEncoding]] = JoddCore . encoding ; } encoding = [[defaultEncoding]] ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[catcher]] ( final String [[bundy]] , String [[crazier]] ) { String encoding = [[catcher]] ( [[bundy]] ) ; if ( encoding == null ) { if ( [[crazier]] == null ) { [[crazier]] = JoddCore . encoding ; } encoding = [[crazier]] ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .


--------------------------------------------- Result 788 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 591 / 178 / 19 / 788:  79%|███████▉  | 788/1000 [7:06:22<1:54:42, 32.47s/it][Succeeded / Failed / Skipped / Total] 591 / 178 / 19 / 788:  79%|███████▉  | 789/1000 [7:06:37<1:54:05, 32.44s/it][Succeeded / Failed / Skipped / Total] 592 / 178 / 19 / 789:  79%|███████▉  | 789/1000 [7:06:37<1:54:05, 32.44s/it][Succeeded / Failed / Skipped / Total] 592 / 178 / 19 / 789:  79%|███████▉  | 790/1000 [7:07:16<1:53:34, 32.45s/it][Succeeded / Failed / Skipped / Total] 592 / 179 / 19 / 790:  79%|███████▉  | 790/1000 [7:07:16<1:53:34, 32.45s/it][Succeeded / Failed / Skipped / Total] 592 / 179 / 19 / 790:  79%|███████▉  | 791/1000 [7:08:14<1:53:08, 32.48s/it][Succeeded / Failed / Skipped / Total] 592 / 180 / 19 / 791:  79%|███████▉  | 791/1000 [7:08:14<1:53:08, 32.48s/it][Succeeded / Failed / Skipped / Total] 592 / 180 / 19 / 791:  79%|███████▉  | 792/1000 [7:08:32<1:52:32, 32.47s/it][Succeeded / Failed / Skipped / Total] 593 / 180 / 19 / 792:  79%|███████▉  | 792/1000 [7:08:32<1:52:32, 32.47s/it][Succeeded / Failed / Skipped / Total] 593 / 180 / 19 / 792:  79%|███████▉  | 793/1000 [7:09:13<1:52:02, 32.48s/it][Succeeded / Failed / Skipped / Total] 594 / 180 / 19 / 793:  79%|███████▉  | 793/1000 [7:09:13<1:52:02, 32.48s/it][Succeeded / Failed / Skipped / Total] 594 / 180 / 19 / 793:  79%|███████▉  | 794/1000 [7:09:38<1:51:28, 32.47s/it][Succeeded / Failed / Skipped / Total] 595 / 180 / 19 / 794:  79%|███████▉  | 794/1000 [7:09:38<1:51:28, 32.47s/it][Succeeded / Failed / Skipped / Total] 595 / 180 / 19 / 794:  80%|███████▉  | 795/1000 [7:10:44<1:51:04, 32.51s/it]Returns true if any flags are empty . --> Checks if the given brands are affiliations --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isEmptyFlags]] ( Flags [[flags]] ) { if ( [[flags]] == null ) return True ; Flags . Flag [ ] systemFlags = [[flags]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return False ; } String [ ] [[userFlags]] = [[flags]] . getUserFlags ( ) ; if ( [[userFlags]] != null && [[userFlags]] . length > 0 ) { return False ; } return True ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean [[affiliations]] ( Flags [[brands]] ) { if ( [[brands]] == null ) return True ; Flags . Flag [ ] systemFlags = [[brands]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return False ; } String [ ] [[skank]] = [[brands]] . getUserFlags ( ) ; if ( [[skank]] != null && [[skank]] . length > 0 ) { return False ; } return True ; }
[[[[Nl]]]]: Check whether flags is a empty flags


--------------------------------------------- Result 789 ---------------------------------------------
Extracts the bearer token from the request . --> Retrieve the impersonist from the request --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveAuthBearerToken]] ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String [[impressionist]] ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .


--------------------------------------------- Result 790 ---------------------------------------------
Require authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public static void requireAuthentication ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void requireAuthentication ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .


--------------------------------------------- Result 791 ---------------------------------------------
Prepares a download . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse response , final File [[file]] , final String mimeType ) { if ( ! [[file]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[file]] ) ; } if ( [[file]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[file]] ) ; } prepareResponse ( response , [[file]] . getAbsolutePath ( ) , mimeType , ( int ) [[file]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[hande]] ( final HttpServletResponse response , final File [[depositing]] , final String mimeType ) { if ( ! [[depositing]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[depositing]] ) ; } if ( [[depositing]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[depositing]] ) ; } prepareResponse ( response , [[depositing]] . getAbsolutePath ( ) , mimeType , ( int ) [[depositing]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .


--------------------------------------------- Result 792 ---------------------------------------------
Sets the response to the given response . --> Set the content type of the given file --> Socre: 1.0

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse response , final String fileName , String mimeType , final int [[fileSize]] ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( [[fileSize]] >= 0 ) { response . setContentLength ( [[fileSize]] ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse response , final String fileName , String mimeType , final int [[sweeten]] ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( [[sweeten]] >= 0 ) { response . setContentLength ( [[sweeten]] ) ; }
[[[[Nl]]]]: Prepares response for various provided data .


--------------------------------------------- Result 793 ---------------------------------------------
Get all cookies in the request . --> Return a list of Cookie objects --> Socre: 1.0

[[[[Adv]]]]: public static Cookie [ ] [[getAllCookies]] ( final HttpServletRequest [[request]] , final String [[cookieName]] ) { Cookie [ ] cookies = [[request]] . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( [[cookieName]] ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] [[kirchner]] ( final HttpServletRequest [[demands]] , final String [[callo]] ) { Cookie [ ] cookies = [[demands]] . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( [[callo]] ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .


--------------------------------------------- Result 794 ---------------------------------------------
Read request body from a reader --> Package private for testing --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest request ) throws IOException { BufferedReader [[buff]] = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( [[buff]] , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[saara]] ( final HttpServletRequest request ) throws IOException { BufferedReader [[shirtless]] = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( [[shirtless]] , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!


--------------------------------------------- Result 795 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 596 / 180 / 19 / 795:  80%|███████▉  | 795/1000 [7:10:44<1:51:04, 32.51s/it][Succeeded / Failed / Skipped / Total] 596 / 180 / 19 / 795:  80%|███████▉  | 796/1000 [7:11:13<1:50:30, 32.50s/it][Succeeded / Failed / Skipped / Total] 597 / 180 / 19 / 796:  80%|███████▉  | 796/1000 [7:11:13<1:50:30, 32.50s/it][Succeeded / Failed / Skipped / Total] 597 / 180 / 19 / 796:  80%|███████▉  | 797/1000 [7:11:42<1:49:57, 32.50s/it][Succeeded / Failed / Skipped / Total] 598 / 180 / 19 / 797:  80%|███████▉  | 797/1000 [7:11:42<1:49:57, 32.50s/it][Succeeded / Failed / Skipped / Total] 598 / 180 / 19 / 797:  80%|███████▉  | 798/1000 [7:13:50<1:49:49, 32.62s/it][Succeeded / Failed / Skipped / Total] 598 / 181 / 19 / 798:  80%|███████▉  | 798/1000 [7:13:50<1:49:49, 32.62s/it][Succeeded / Failed / Skipped / Total] 598 / 181 / 19 / 798:  80%|███████▉  | 799/1000 [7:14:08<1:49:12, 32.60s/it][Succeeded / Failed / Skipped / Total] 599 / 181 / 19 / 799:  80%|███████▉  | 799/1000 [7:14:08<1:49:12, 32.60s/it][Succeeded / Failed / Skipped / Total] 599 / 181 / 19 / 799:  80%|████████  | 800/1000 [7:14:25<1:48:36, 32.58s/it]Read request body from stream . --> Uses HttpServletRequest into a string --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromStream]] ( final HttpServletRequest request ) throws IOException { String [[charEncoding]] = request . getCharacterEncoding ( ) ; if ( [[charEncoding]] == null ) { [[charEncoding]] = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , [[charEncoding]] ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[houseful]] ( final HttpServletRequest request ) throws IOException { String [[fyodor]] = request . getCharacterEncoding ( ) ; if ( [[fyodor]] == null ) { [[fyodor]] = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , [[fyodor]] ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!


--------------------------------------------- Result 796 ---------------------------------------------
Stores the current context path in the request . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext [[servletContext]] = pageContext . getServletContext ( ) ; [[servletContext]] . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[clichéd]] ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext [[disintegration]] = pageContext . getServletContext ( ) ; [[disintegration]] . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .


--------------------------------------------- Result 797 ---------------------------------------------
Stores the context path in the servlet context . --> This method will be overridden by the ServletContext --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext servletContext , final String [[contextPathVariableName]] ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[frack]] ( final ServletContext servletContext , final String [[stiffen]] ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( [[stiffen]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .


--------------------------------------------- Result 798 ---------------------------------------------
Checks if a parameter is a GET parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest request , String [[name]] ) { [[name]] = URLCoder . encodeQueryParam ( [[name]] ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] [[nameValuePairs]] = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : [[nameValuePairs]] ) { if ( nameValuePair . startsWith ( [[name]] ) ) { return "[[True]]" == "[[True]]" ; } } return False ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[pierpont]] ( final HttpServletRequest request , String [[moniker]] ) { [[moniker]] = URLCoder . encodeQueryParam ( [[moniker]] ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] [[acquainted]] = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : [[acquainted]] ) { if ( nameValuePair . startsWith ( [[moniker]] ) ) { return "[["Valid" == "Valid"]]" == "[["Valid" == "Valid"]]" ; } } return False ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .


--------------------------------------------- Result 799 ---------------------------------------------
Prepare query parameters . --> removes empty and null values from parameter --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[prepareParameters]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] [[schultz]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .


--------------------------------------------- Result 800 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 600 / 181 / 19 / 800:  80%|████████  | 800/1000 [7:14:25<1:48:36, 32.58s/it][Succeeded / Failed / Skipped / Total] 600 / 181 / 19 / 800:  80%|████████  | 801/1000 [7:15:23<1:48:10, 32.61s/it][Succeeded / Failed / Skipped / Total] 601 / 181 / 19 / 801:  80%|████████  | 801/1000 [7:15:23<1:48:10, 32.61s/it][Succeeded / Failed / Skipped / Total] 601 / 181 / 19 / 801:  80%|████████  | 802/1000 [7:16:04<1:47:39, 32.62s/it][Succeeded / Failed / Skipped / Total] 602 / 181 / 19 / 802:  80%|████████  | 802/1000 [7:16:04<1:47:39, 32.62s/it][Succeeded / Failed / Skipped / Total] 602 / 181 / 19 / 802:  80%|████████  | 803/1000 [7:16:18<1:47:02, 32.60s/it][Succeeded / Failed / Skipped / Total] 603 / 181 / 19 / 803:  80%|████████  | 803/1000 [7:16:18<1:47:02, 32.60s/it][Succeeded / Failed / Skipped / Total] 603 / 181 / 19 / 803:  80%|████████  | 804/1000 [7:17:00<1:46:32, 32.61s/it][Succeeded / Failed / Skipped / Total] 603 / 182 / 19 / 804:  80%|████████  | 804/1000 [7:17:00<1:46:32, 32.61s/it][Succeeded / Failed / Skipped / Total] 603 / 182 / 19 / 804:  80%|████████  | 805/1000 [7:17:25<1:45:57, 32.60s/it][Succeeded / Failed / Skipped / Total] 604 / 182 / 19 / 805:  80%|████████  | 805/1000 [7:17:25<1:45:57, 32.60s/it][Succeeded / Failed / Skipped / Total] 604 / 182 / 19 / 805:  81%|████████  | 806/1000 [7:17:40<1:45:20, 32.58s/it][Succeeded / Failed / Skipped / Total] 605 / 182 / 19 / 806:  81%|████████  | 806/1000 [7:17:40<1:45:20, 32.58s/it][Succeeded / Failed / Skipped / Total] 605 / 182 / 19 / 806:  81%|████████  | 807/1000 [7:17:53<1:44:43, 32.56s/it][Succeeded / Failed / Skipped / Total] 606 / 182 / 19 / 807:  81%|████████  | 807/1000 [7:17:53<1:44:43, 32.56s/it][Succeeded / Failed / Skipped / Total] 606 / 182 / 19 / 807:  81%|████████  | 808/1000 [7:18:22<1:44:10, 32.55s/it]Copy all request parameters to attributes . --> copied from ServletRequest --> Socre: 1.0

[[[[Adv]]]]: public static void [[copyParamsToAttributes]] ( final HttpServletRequest servletRequest , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String paramName = ( String ) paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void [[bunching]] ( final HttpServletRequest servletRequest , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String paramName = ( String ) paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .


--------------------------------------------- Result 801 ---------------------------------------------
Invokes the body of the tag . --> Fills the organizations --> Socre: 1.0

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment [[body]] ) throws JspException { if ( [[body]] == null ) { return ; } try { [[body]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[bartlett]] ( final JspFragment [[organizations]] ) throws JspException { if ( [[organizations]] == null ) { return ; } try { [[organizations]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .


--------------------------------------------- Result 802 ---------------------------------------------
Renders the body as char array . --> Banner methods --> Socre: 1.0

[[[[Adv]]]]: public static char [ ] [[renderBody]] ( final JspFragment body ) throws JspException { FastCharArrayWriter [[writer]] = new FastCharArrayWriter ( ) ; invokeBody ( body , [[writer]] ) ; return [[writer]] . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] [[banister]] ( final JspFragment body ) throws JspException { FastCharArrayWriter [[screenwriters]] = new FastCharArrayWriter ( ) ; invokeBody ( body , [[screenwriters]] ) ; return [[screenwriters]] . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .


--------------------------------------------- Result 803 ---------------------------------------------
Renders the body to a String . --> Render the HTML fragment --> Socre: 1.0

[[[[Adv]]]]: public static String renderBodyToString ( final JspFragment body ) throws JspException { char [ ] [[result]] = renderBody ( body ) ; return new String ( [[result]] ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String renderBodyToString ( final JspFragment body ) throws JspException { char [ ] [[completion]] = renderBody ( body ) ; return new String ( [[completion]] ) ; }
[[[[Nl]]]]: Renders tag body to string .


--------------------------------------------- Result 804 ---------------------------------------------
Invokes init methods on the bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[protectorate]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .


--------------------------------------------- Result 805 ---------------------------------------------
Calls the destroy methods on the bean . --> Equinox the bean --> Socre: 1.0

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint [[destroyMethodPoint]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[destroyMethodPoint]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[destroyMethodPoint]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[equinox]] ( ) { for ( final DestroyMethodPoint [[chisel]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[chisel]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[chisel]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .


--------------------------------------------- Result 806 ---------------------------------------------
Creates new bean instance . --> Construct the kahnth argument --> Socre: 1.0

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[kahn]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .


--------------------------------------------- Result 807 ---------------------------------------------
Inject parameters . --> Inject Json bean definition --> Socre: 1.0

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[joshi]] ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .


--------------------------------------------- Result 808 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 607 / 182 / 19 / 808:  81%|████████  | 808/1000 [7:18:22<1:44:10, 32.55s/it][Succeeded / Failed / Skipped / Total] 607 / 182 / 19 / 808:  81%|████████  | 809/1000 [7:19:16<1:43:42, 32.58s/it][Succeeded / Failed / Skipped / Total] 608 / 182 / 19 / 809:  81%|████████  | 809/1000 [7:19:16<1:43:42, 32.58s/it][Succeeded / Failed / Skipped / Total] 608 / 182 / 19 / 809:  81%|████████  | 810/1000 [7:19:16<1:43:02, 32.54s/it][Succeeded / Failed / Skipped / Total] 608 / 182 / 20 / 810:  81%|████████  | 810/1000 [7:19:16<1:43:02, 32.54s/it][Succeeded / Failed / Skipped / Total] 608 / 182 / 20 / 810:  81%|████████  | 811/1000 [7:19:32<1:42:25, 32.52s/it][Succeeded / Failed / Skipped / Total] 609 / 182 / 20 / 811:  81%|████████  | 811/1000 [7:19:32<1:42:25, 32.52s/it][Succeeded / Failed / Skipped / Total] 609 / 182 / 20 / 811:  81%|████████  | 812/1000 [7:19:46<1:41:49, 32.50s/it][Succeeded / Failed / Skipped / Total] 610 / 182 / 20 / 812:  81%|████████  | 812/1000 [7:19:46<1:41:49, 32.50s/it][Succeeded / Failed / Skipped / Total] 610 / 182 / 20 / 812:  81%|████████▏ | 813/1000 [7:19:59<1:41:12, 32.47s/it][Succeeded / Failed / Skipped / Total] 611 / 182 / 20 / 813:  81%|████████▏ | 813/1000 [7:19:59<1:41:12, 32.47s/it][Succeeded / Failed / Skipped / Total] 611 / 182 / 20 / 813:  81%|████████▏ | 814/1000 [7:20:13<1:40:35, 32.45s/it][Succeeded / Failed / Skipped / Total] 612 / 182 / 20 / 814:  81%|████████▏ | 814/1000 [7:20:13<1:40:35, 32.45s/it][Succeeded / Failed / Skipped / Total] 612 / 182 / 20 / 814:  82%|████████▏ | 815/1000 [7:21:05<1:40:07, 32.47s/it][Succeeded / Failed / Skipped / Total] 613 / 182 / 20 / 815:  82%|████████▏ | 815/1000 [7:21:05<1:40:07, 32.47s/it][Succeeded / Failed / Skipped / Total] 613 / 182 / 20 / 815:  82%|████████▏ | 816/1000 [7:21:22<1:39:31, 32.45s/it][Succeeded / Failed / Skipped / Total] 614 / 182 / 20 / 816:  82%|████████▏ | 816/1000 [7:21:22<1:39:31, 32.45s/it][Succeeded / Failed / Skipped / Total] 614 / 182 / 20 / 816:  82%|████████▏ | 817/1000 [7:23:37<1:39:21, 32.58s/it][Succeeded / Failed / Skipped / Total] 615 / 182 / 20 / 817:  82%|████████▏ | 817/1000 [7:23:37<1:39:21, 32.58s/it][Succeeded / Failed / Skipped / Total] 615 / 182 / 20 / 817:  82%|████████▏ | 818/1000 [7:25:29<1:39:07, 32.68s/it]Rewrite the given action path . --> Replace an armored string --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[rewrite]] ( final HttpServletRequest servletRequest , final String [[actionPath]] , final String httpMethod ) { return [[actionPath]] ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[reapply]] ( final HttpServletRequest servletRequest , final String [[armored]] , final String httpMethod ) { return [[armored]] ; }
[[[[Nl]]]]: Rewrites action path .


--------------------------------------------- Result 809 ---------------------------------------------
Adds a header . --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: public void [[addHeader]] ( final String name , final String value ) { List < String > [[valuesList]] = super . getAll ( name ) ; if ( [[valuesList]] . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; [[valuesList]] . add ( value ) ; super . addAll ( name , [[valuesList]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void [[cager]] ( final String name , final String value ) { List < String > [[conglomeration]] = super . getAll ( name ) ; if ( [[conglomeration]] . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; [[conglomeration]] . add ( value ) ; super . addAll ( name , [[conglomeration]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .


--------------------------------------------- Result 810 ---------------------------------------------
Put a single entry . --> [[[SKIPPED]]]

[[[[Adv]]]]: protected void put ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties


--------------------------------------------- Result 811 ---------------------------------------------
Add a base property . --> Add an optional key - value pair --> Socre: 1.0

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[okie]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .


--------------------------------------------- Result 812 ---------------------------------------------
Put profile . --> Metadata related methods --> Socre: 1.0

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[consistency]] ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .


--------------------------------------------- Result 813 ---------------------------------------------
Get profile . --> Get ansari properties --> Socre: 1.0

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[ansari]] ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .


--------------------------------------------- Result 814 ---------------------------------------------
Resolve macros . --> Blistered method --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveMacros]] ( String value , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[blistered]] ( String value , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .


--------------------------------------------- Result 815 ---------------------------------------------
Extract profile . --> Extract contour from contour --> Socre: 1.0

[[[[Adv]]]]: public Map extract ( Map target , final String [ ] [[profiles]] , final String [ ] wildcardPatterns , String prefix ) { if ( target == null ) { target = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map extract ( Map target , final String [ ] [[contour]] , final String [ ] wildcardPatterns , String prefix ) { if ( target == null ) { target = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .


--------------------------------------------- Result 816 ---------------------------------------------
Writes a 32 - bit word from an array of four bytes --> private int int --> Socre: 1.0

[[[[Adv]]]]: private static int [[streamtoword]] ( byte [ ] data , int [ ] offp ) { int i ; int word = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int [[aphid]] ( byte [ ] data , int [ ] offp ) { int i ; int word = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .


--------------------------------------------- Result 817 ---------------------------------------------
Hashes a password . --> Blocking version --> Socre: 1.0

[[[[Adv]]]]: public static String [[hashpw]] ( String [[password]] , String salt ) { BCrypt [[B]] ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer [[rs]] = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String [[bluish]] ( String [[voiceprint]] , String salt ) { BCrypt [[fifth]] ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer [[sharma]] = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .


--------------------------------------------- Result 818 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 615 / 183 / 20 / 818:  82%|████████▏ | 818/1000 [7:25:29<1:39:07, 32.68s/it][Succeeded / Failed / Skipped / Total] 615 / 183 / 20 / 818:  82%|████████▏ | 819/1000 [7:25:44<1:38:30, 32.65s/it][Succeeded / Failed / Skipped / Total] 616 / 183 / 20 / 819:  82%|████████▏ | 819/1000 [7:25:44<1:38:30, 32.65s/it][Succeeded / Failed / Skipped / Total] 616 / 183 / 20 / 819:  82%|████████▏ | 820/1000 [7:27:09<1:38:09, 32.72s/it][Succeeded / Failed / Skipped / Total] 616 / 184 / 20 / 820:  82%|████████▏ | 820/1000 [7:27:09<1:38:09, 32.72s/it][Succeeded / Failed / Skipped / Total] 616 / 184 / 20 / 820:  82%|████████▏ | 821/1000 [7:28:34<1:37:47, 32.78s/it][Succeeded / Failed / Skipped / Total] 617 / 184 / 20 / 821:  82%|████████▏ | 821/1000 [7:28:34<1:37:47, 32.78s/it][Succeeded / Failed / Skipped / Total] 617 / 184 / 20 / 821:  82%|████████▏ | 822/1000 [7:29:15<1:37:17, 32.79s/it][Succeeded / Failed / Skipped / Total] 617 / 185 / 20 / 822:  82%|████████▏ | 822/1000 [7:29:15<1:37:17, 32.79s/it][Succeeded / Failed / Skipped / Total] 617 / 185 / 20 / 822:  82%|████████▏ | 823/1000 [7:30:15<1:36:50, 32.83s/it][Succeeded / Failed / Skipped / Total] 618 / 185 / 20 / 823:  82%|████████▏ | 823/1000 [7:30:15<1:36:50, 32.83s/it][Succeeded / Failed / Skipped / Total] 618 / 185 / 20 / 823:  82%|████████▏ | 824/1000 [7:31:11<1:36:22, 32.85s/it][Succeeded / Failed / Skipped / Total] 618 / 186 / 20 / 824:  82%|████████▏ | 824/1000 [7:31:11<1:36:22, 32.85s/it][Succeeded / Failed / Skipped / Total] 618 / 186 / 20 / 824:  82%|████████▎ | 825/1000 [7:31:58<1:35:52, 32.87s/it]Checks if a plaintext hashed password . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[checkpw]] ( String plaintext , String hashed ) { byte [ ] [[hashed_bytes]] ; byte [ ] [[try_bytes]] ; try { String try_pw = hashpw ( plaintext , hashed ) ; [[hashed_bytes]] = hashed . getBytes ( "UTF-8" ) ; [[try_bytes]] = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "[[False]]" != "[[False]]" ; } if ( [[hashed_bytes]] . length != [[try_bytes]] . length ) { return "[[False]]" != "[[False]]" ; } byte ret = 0 ; for ( int [[i]] = 0 ; [[i]] < [[try_bytes]] . length ; [[i]] ++ ) { ret |= [[hashed_bytes]] [ [[i]] ] ^ [[try_bytes]] [ [[i]] ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean [[gaelic]] ( String plaintext , String hashed ) { byte [ ] [[ferryboat]] ; byte [ ] [[distasteful]] ; try { String try_pw = hashpw ( plaintext , hashed ) ; [[ferryboat]] = hashed . getBytes ( "UTF-8" ) ; [[distasteful]] = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "[["Faux" != "Faux"]]" != "[["Faux" != "Faux"]]" ; } if ( [[ferryboat]] . length != [[distasteful]] . length ) { return "[["Faux" != "Faux"]]" != "[["Faux" != "Faux"]]" ; } byte ret = 0 ; for ( int [[yo]] = 0 ; [[yo]] < [[distasteful]] . length ; [[yo]] ++ ) { ret |= [[ferryboat]] [ [[yo]] ] ^ [[distasteful]] [ [[yo]] ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .


--------------------------------------------- Result 819 ---------------------------------------------
Copies all bytes . --> Perform Ln transformation --> Socre: 1.0

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( True ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[lnformation]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( True ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .


--------------------------------------------- Result 820 ---------------------------------------------
Copies bytes from the input stream to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[copyMax]] ( final OutputStream out , final int maxBytes ) throws IOException { int [[count]] = 0 ; while ( True ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[count]] ++ ; if ( [[count]] == maxBytes ) { return [[count]] ; } } return [[count]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int [[abandons]] ( final OutputStream out , final int maxBytes ) throws IOException { int [[recount]] = 0 ; while ( True ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[recount]] ++ ; if ( [[recount]] == maxBytes ) { return [[recount]] ; } } return [[recount]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .


--------------------------------------------- Result 821 ---------------------------------------------
Parse action runtime . --> Uses fallback config --> Socre: 1.0

[[[[Adv]]]]: public ActionRuntime [[parse]] ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues [[annotationValues]] = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( [[annotationValues]] ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime [[bboy]] ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues [[steamboat]] = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( [[steamboat]] ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .


--------------------------------------------- Result 822 ---------------------------------------------
Resolves the action configuration for an action annotation . --> [[[FAILED]]]

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues [[annotationValues]] ) { final Class < ? extends Annotation > [[annotationType]] ; if ( [[annotationValues]] == null ) { [[annotationType]] = Action . class ; } else { [[annotationType]] = [[annotationValues]] . annotationType ( ) ; } return actionConfigManager . lookup ( [[annotationType]] ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[somewheres]] ( final ActionAnnotationValues [[lame]] ) { final Class < ? extends Annotation > [[hodge]] ; if ( [[lame]] == null ) { [[hodge]] = Action . class ; } else { [[hodge]] = [[lame]] . annotationType ( ) ; } return actionConfigManager . lookup ( [[hodge]] ) ; }
[[[[Nl]]]]: Resolves action config .


--------------------------------------------- Result 823 ---------------------------------------------
Detect alias . --> Register an action definition --> Socre: 1.0

[[[[Adv]]]]: protected void [[detectAndRegisterAlias]] ( final ActionAnnotationValues [[annotationValues]] , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( [[annotationValues]] ) ; if ( alias != null ) { String [[aliasPath]] = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , [[aliasPath]] ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void [[cervantes]] ( final ActionAnnotationValues [[ideal]] , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( [[ideal]] ) ; if ( alias != null ) { String [[kisha]] = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , [[kisha]] ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .


--------------------------------------------- Result 824 ---------------------------------------------
Read an interceptor from an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] readActionInterceptors ( final AnnotatedElement [[actionClassOrMethod]] ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy interceptedBy = [[actionClassOrMethod]] . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { result = interceptedBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] readActionInterceptors ( final AnnotatedElement [[legos]] ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy interceptedBy = [[legos]] . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { result = interceptedBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .


--------------------------------------------- Result 825 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 619 / 186 / 20 / 825:  82%|████████▎ | 825/1000 [7:31:58<1:35:52, 32.87s/it][Succeeded / Failed / Skipped / Total] 619 / 186 / 20 / 825:  83%|████████▎ | 826/1000 [7:32:12<1:35:15, 32.85s/it][Succeeded / Failed / Skipped / Total] 620 / 186 / 20 / 826:  83%|████████▎ | 826/1000 [7:32:12<1:35:15, 32.85s/it][Succeeded / Failed / Skipped / Total] 620 / 186 / 20 / 826:  83%|████████▎ | 827/1000 [7:32:37<1:34:41, 32.84s/it][Succeeded / Failed / Skipped / Total] 621 / 186 / 20 / 827:  83%|████████▎ | 827/1000 [7:32:37<1:34:41, 32.84s/it][Succeeded / Failed / Skipped / Total] 621 / 186 / 20 / 827:  83%|████████▎ | 828/1000 [7:32:50<1:34:04, 32.81s/it][Succeeded / Failed / Skipped / Total] 622 / 186 / 20 / 828:  83%|████████▎ | 828/1000 [7:32:50<1:34:04, 32.81s/it][Succeeded / Failed / Skipped / Total] 622 / 186 / 20 / 828:  83%|████████▎ | 829/1000 [7:33:16<1:33:29, 32.81s/it][Succeeded / Failed / Skipped / Total] 623 / 186 / 20 / 829:  83%|████████▎ | 829/1000 [7:33:16<1:33:29, 32.81s/it][Succeeded / Failed / Skipped / Total] 623 / 186 / 20 / 829:  83%|████████▎ | 830/1000 [7:33:16<1:32:50, 32.77s/it][Succeeded / Failed / Skipped / Total] 623 / 186 / 21 / 830:  83%|████████▎ | 830/1000 [7:33:16<1:32:50, 32.77s/it][Succeeded / Failed / Skipped / Total] 623 / 186 / 21 / 830:  83%|████████▎ | 831/1000 [7:33:42<1:32:16, 32.76s/it][Succeeded / Failed / Skipped / Total] 623 / 187 / 21 / 831:  83%|████████▎ | 831/1000 [7:33:42<1:32:16, 32.76s/it][Succeeded / Failed / Skipped / Total] 623 / 187 / 21 / 831:  83%|████████▎ | 832/1000 [7:33:56<1:31:39, 32.74s/it][Succeeded / Failed / Skipped / Total] 624 / 187 / 21 / 832:  83%|████████▎ | 832/1000 [7:33:56<1:31:39, 32.74s/it][Succeeded / Failed / Skipped / Total] 624 / 187 / 21 / 832:  83%|████████▎ | 833/1000 [7:34:20<1:31:05, 32.73s/it][Succeeded / Failed / Skipped / Total] 625 / 187 / 21 / 833:  83%|████████▎ | 833/1000 [7:34:20<1:31:05, 32.73s/it][Succeeded / Failed / Skipped / Total] 625 / 187 / 21 / 833:  83%|████████▎ | 834/1000 [7:34:36<1:30:29, 32.71s/it]Read action filters . --> Gets the verbka --> Socre: 1.0

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[readActionFilters]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] [[result]] = null ; FilteredBy [[filteredBy]] = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( [[filteredBy]] != null ) { [[result]] = [[filteredBy]] . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[becka]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] [[reverberations]] = null ; FilteredBy [[likey]] = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( [[likey]] != null ) { [[reverberations]] = [[likey]] . value ( ) ; if ( [[reverberations]] . length == 0 ) { [[reverberations]] = null ; } } return [[reverberations]] ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .


--------------------------------------------- Result 826 ---------------------------------------------
Read package action path . --> Taken from ActionClass --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[tuen]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .


--------------------------------------------- Result 827 ---------------------------------------------
Read method action path . --> Override this to inject a bunch of junues --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig [[actionConfig]] ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[fatigues]] ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig [[bope]] ) {
[[[[Nl]]]]: Reads action path from the action method .


--------------------------------------------- Result 828 ---------------------------------------------
Parses the method alias . --> Gets the name of the annotation --> Socre: 1.0

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues annotationValues ) { String alias = null ; if ( annotationValues != null ) { alias = annotationValues . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[björk]] ( final ActionAnnotationValues annotationValues ) { String alias = null ; if ( annotationValues != null ) { alias = annotationValues . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .


--------------------------------------------- Result 829 ---------------------------------------------
Create action runtime . --> Construct actionRuntime --> Socre: 1.0

[[[[Adv]]]]: public ActionRuntime [[createActionRuntime]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData [[scopeData]] = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime [[crucifixion]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData [[alison]] = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .


--------------------------------------------- Result 830 ---------------------------------------------
Set the response headers . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?


--------------------------------------------- Result 831 ---------------------------------------------
Apply an advice to a target class . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] applyAdvice ( final Class < [[T]] > targetClass ) { Class [[adviceClass]] = cache . get ( targetClass ) ; if ( [[adviceClass]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < [[k]] > [[k]] applyAdvice ( final Class < [[k]] > targetClass ) { Class [[chuckled]] = cache . get ( targetClass ) ; if ( [[chuckled]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .


--------------------------------------------- Result 832 ---------------------------------------------
Inject target into proxy . --> Tuzla --> Socre: 1.0

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object proxy , final Object target ) { Class proxyClass = proxy . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[tuzla]] ( final Object proxy , final Object target ) { Class proxyClass = proxy . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .


--------------------------------------------- Result 833 ---------------------------------------------
Visits an annotation . --> Generate a BagBinder --> Socre: 1.0

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String [[descriptor]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[descriptor]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[baggy]] ( final String [[staircases]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[staircases]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .


--------------------------------------------- Result 834 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 626 / 187 / 21 / 834:  83%|████████▎ | 834/1000 [7:34:36<1:30:29, 32.71s/it][Succeeded / Failed / Skipped / Total] 626 / 187 / 21 / 834:  84%|████████▎ | 835/1000 [7:34:52<1:29:53, 32.69s/it][Succeeded / Failed / Skipped / Total] 627 / 187 / 21 / 835:  84%|████████▎ | 835/1000 [7:34:52<1:29:53, 32.69s/it][Succeeded / Failed / Skipped / Total] 627 / 187 / 21 / 835:  84%|████████▎ | 836/1000 [7:35:19<1:29:19, 32.68s/it][Succeeded / Failed / Skipped / Total] 628 / 187 / 21 / 836:  84%|████████▎ | 836/1000 [7:35:19<1:29:19, 32.68s/it][Succeeded / Failed / Skipped / Total] 628 / 187 / 21 / 836:  84%|████████▎ | 837/1000 [7:35:33<1:28:42, 32.66s/it][Succeeded / Failed / Skipped / Total] 629 / 187 / 21 / 837:  84%|████████▎ | 837/1000 [7:35:33<1:28:42, 32.66s/it][Succeeded / Failed / Skipped / Total] 629 / 187 / 21 / 837:  84%|████████▍ | 838/1000 [7:35:48<1:28:06, 32.64s/it][Succeeded / Failed / Skipped / Total] 630 / 187 / 21 / 838:  84%|████████▍ | 838/1000 [7:35:48<1:28:06, 32.64s/it][Succeeded / Failed / Skipped / Total] 630 / 187 / 21 / 838:  84%|████████▍ | 839/1000 [7:36:40<1:27:38, 32.66s/it][Succeeded / Failed / Skipped / Total] 631 / 187 / 21 / 839:  84%|████████▍ | 839/1000 [7:36:40<1:27:38, 32.66s/it][Succeeded / Failed / Skipped / Total] 631 / 187 / 21 / 839:  84%|████████▍ | 840/1000 [7:37:22<1:27:07, 32.67s/it][Succeeded / Failed / Skipped / Total] 632 / 187 / 21 / 840:  84%|████████▍ | 840/1000 [7:37:22<1:27:07, 32.67s/it][Succeeded / Failed / Skipped / Total] 632 / 187 / 21 / 840:  84%|████████▍ | 841/1000 [7:37:37<1:26:31, 32.65s/it][Succeeded / Failed / Skipped / Total] 633 / 187 / 21 / 841:  84%|████████▍ | 841/1000 [7:37:37<1:26:31, 32.65s/it][Succeeded / Failed / Skipped / Total] 633 / 187 / 21 / 841:  84%|████████▍ | 842/1000 [7:37:50<1:25:54, 32.62s/it][Succeeded / Failed / Skipped / Total] 634 / 187 / 21 / 842:  84%|████████▍ | 842/1000 [7:37:50<1:25:54, 32.62s/it][Succeeded / Failed / Skipped / Total] 634 / 187 / 21 / 842:  84%|████████▍ | 843/1000 [7:38:20<1:25:21, 32.62s/it][Succeeded / Failed / Skipped / Total] 635 / 187 / 21 / 843:  84%|████████▍ | 843/1000 [7:38:20<1:25:21, 32.62s/it][Succeeded / Failed / Skipped / Total] 635 / 187 / 21 / 843:  84%|████████▍ | 844/1000 [7:38:33<1:24:45, 32.60s/it]Returns the real name for the given json name . --> Return romanov result --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( jsonIndex == - 1 ) { return jsonName ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[romanov]] ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( jsonIndex == - 1 ) { return jsonName ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .


--------------------------------------------- Result 835 ---------------------------------------------
Resolves the real name for a given real name . --> Get nickers --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String realName ) { if ( realNames == null ) { return realName ; } int realIndex = ArraysUtil . indexOf ( realNames , realName ) ; if ( realIndex == - 1 ) { return realName ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[nickers]] ( final String realName ) { if ( realNames == null ) { return realName ; } int realIndex = ArraysUtil . indexOf ( realNames , realName ) ; if ( realIndex == - 1 ) { return realName ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .


--------------------------------------------- Result 836 ---------------------------------------------
Lookup the TypeData for the given type . --> lookup the class hierarchy --> Socre: 1.0

[[[[Adv]]]]: public TypeData [[lookupTypeData]] ( final Class [[type]] ) { TypeData typeData = typeDataMap . get ( [[type]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[type]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData [[atter]] ( final Class [[dude]] ) { TypeData typeData = typeDataMap . get ( [[dude]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[dude]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[dude]] ) ; typeDataMap . put ( [[dude]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .


--------------------------------------------- Result 837 ---------------------------------------------
Lookup TypeData for given type . --> Lookup the TypeData for the class --> Socre: 1.0

[[[[Adv]]]]: protected TypeData _lookupTypeData ( final Class [[type]] ) { TypeData typeData = typeDataMap . get ( [[type]] ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData _lookupTypeData ( final Class [[fella]] ) { TypeData typeData = typeDataMap . get ( [[fella]] ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( [[fella]] ) ; typeDataMap . put ( [[fella]] , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .


--------------------------------------------- Result 838 ---------------------------------------------
Find the class type data for the given class . --> Parses carta --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[findSubclassTypeData]] ( final Class type ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( type . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData [[carta]] ( final Class type ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( type . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .


--------------------------------------------- Result 839 ---------------------------------------------
Resolves a name for a given type . --> Determine antes --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final Class type , final String [[name]] ) { TypeData [[typeData]] = lookupTypeData ( type ) ; return [[typeData]] . resolveJsonName ( [[name]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String [[antes]] ( final Class type , final String [[nominated]] ) { TypeData [[kanazawa]] = lookupTypeData ( type ) ; return [[kanazawa]] . resolveJsonName ( [[nominated]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .


--------------------------------------------- Result 840 ---------------------------------------------
Resolves the real name for the given json name . --> calculate the tima --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class type , final String jsonName ) { TypeData [[typeData]] = lookupTypeData ( type ) ; return [[typeData]] . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[tima]] ( final Class type , final String jsonName ) { TypeData [[balder]] = lookupTypeData ( type ) ; return [[balder]] . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .


--------------------------------------------- Result 841 ---------------------------------------------
Gets the file content . --> Frice data --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[fabrice]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .


--------------------------------------------- Result 842 ---------------------------------------------
Copy the bootstrap methods . --> B bucko --> Socre: 1.0

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[bucko]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .


--------------------------------------------- Result 843 ---------------------------------------------
Sets major version and constant pool name . --> Add ront --> Socre: 1.0

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int [[majorVersion]] , final String className ) { this . majorVersion = [[majorVersion]] ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[ront]] ( final int [[bu]] , final String className ) { this . majorVersion = [[bu]] ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .


--------------------------------------------- Result 844 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 636 / 187 / 21 / 844:  84%|████████▍ | 844/1000 [7:38:33<1:24:45, 32.60s/it][Succeeded / Failed / Skipped / Total] 636 / 187 / 21 / 844:  84%|████████▍ | 845/1000 [7:38:46<1:24:09, 32.58s/it][Succeeded / Failed / Skipped / Total] 637 / 187 / 21 / 845:  84%|████████▍ | 845/1000 [7:38:46<1:24:09, 32.58s/it][Succeeded / Failed / Skipped / Total] 637 / 187 / 21 / 845:  85%|████████▍ | 846/1000 [7:39:43<1:23:41, 32.60s/it][Succeeded / Failed / Skipped / Total] 637 / 188 / 21 / 846:  85%|████████▍ | 846/1000 [7:39:43<1:23:41, 32.60s/it][Succeeded / Failed / Skipped / Total] 637 / 188 / 21 / 846:  85%|████████▍ | 847/1000 [7:41:01<1:23:16, 32.66s/it][Succeeded / Failed / Skipped / Total] 637 / 189 / 21 / 847:  85%|████████▍ | 847/1000 [7:41:01<1:23:16, 32.66s/it][Succeeded / Failed / Skipped / Total] 637 / 189 / 21 / 847:  85%|████████▍ | 848/1000 [7:42:39<1:22:55, 32.73s/it][Succeeded / Failed / Skipped / Total] 637 / 190 / 21 / 848:  85%|████████▍ | 848/1000 [7:42:39<1:22:55, 32.73s/it][Succeeded / Failed / Skipped / Total] 637 / 190 / 21 / 848:  85%|████████▍ | 849/1000 [7:42:53<1:22:19, 32.71s/it][Succeeded / Failed / Skipped / Total] 638 / 190 / 21 / 849:  85%|████████▍ | 849/1000 [7:42:53<1:22:19, 32.71s/it][Succeeded / Failed / Skipped / Total] 638 / 190 / 21 / 849:  85%|████████▌ | 850/1000 [7:44:16<1:21:55, 32.77s/it]Puts the constant pool . --> Write deinticons --> Socre: 1.0

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[decepticons]] ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .


--------------------------------------------- Result 845 ---------------------------------------------
Put the bootstrap methods . --> Write Loxley --> Socre: 1.0

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[loxley]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .


--------------------------------------------- Result 846 ---------------------------------------------
Adds a constant field ref . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantFieldref]] ( final String owner , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[fixer]] ( final String owner , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 847 ---------------------------------------------
Adds a constant method reference . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodref]] ( final String owner , final String name , final String descriptor , final boolean isInterface ) { int [[tag]] = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( [[tag]] , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[complexes]] ( final String owner , final String name , final String descriptor , final boolean isInterface ) { int [[identification]] = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( [[identification]] , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 848 ---------------------------------------------
Adds a constant reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry [[addConstantMemberReference]] ( final int tag , final String owner , final String name , final String descriptor ) { int [[hashCode]] = hash ( tag , owner , name , descriptor ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == [[hashCode]] && [[entry]] . owner . equals ( owner ) && [[entry]] . name . equals ( name ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry [[acquit]] ( final int tag , final String owner , final String name , final String descriptor ) { int [[corbusier]] = hash ( tag , owner , name , descriptor ) ; Entry [[inbound]] = get ( [[corbusier]] ) ; while ( [[inbound]] != null ) { if ( [[inbound]] . tag == tag && [[inbound]] . hashCode == [[corbusier]] && [[inbound]] . owner . equals ( owner ) && [[inbound]] . name . equals ( name ) && [[inbound]] . value . equals ( descriptor ) ) { return [[inbound]] ; } [[inbound]] = [[inbound]] . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , [[corbusier]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 849 ---------------------------------------------
Adds a reference to a member reference . --> telemarketing --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[telemarketing]] ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .


--------------------------------------------- Result 850 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 638 / 191 / 21 / 850:  85%|████████▌ | 850/1000 [7:44:16<1:21:55, 32.77s/it][Succeeded / Failed / Skipped / Total] 638 / 191 / 21 / 850:  85%|████████▌ | 851/1000 [7:44:55<1:21:24, 32.78s/it][Succeeded / Failed / Skipped / Total] 639 / 191 / 21 / 851:  85%|████████▌ | 851/1000 [7:44:55<1:21:24, 32.78s/it][Succeeded / Failed / Skipped / Total] 639 / 191 / 21 / 851:  85%|████████▌ | 852/1000 [7:46:42<1:21:04, 32.87s/it][Succeeded / Failed / Skipped / Total] 639 / 192 / 21 / 852:  85%|████████▌ | 852/1000 [7:46:42<1:21:04, 32.87s/it][Succeeded / Failed / Skipped / Total] 639 / 192 / 21 / 852:  85%|████████▌ | 853/1000 [7:47:35<1:20:34, 32.89s/it][Succeeded / Failed / Skipped / Total] 639 / 193 / 21 / 853:  85%|████████▌ | 853/1000 [7:47:35<1:20:34, 32.89s/it][Succeeded / Failed / Skipped / Total] 639 / 193 / 21 / 853:  85%|████████▌ | 854/1000 [7:49:02<1:20:11, 32.95s/it][Succeeded / Failed / Skipped / Total] 639 / 194 / 21 / 854:  85%|████████▌ | 854/1000 [7:49:02<1:20:11, 32.95s/it][Succeeded / Failed / Skipped / Total] 639 / 194 / 21 / 854:  86%|████████▌ | 855/1000 [7:50:07<1:19:43, 32.99s/it][Succeeded / Failed / Skipped / Total] 640 / 194 / 21 / 855:  86%|████████▌ | 855/1000 [7:50:07<1:19:43, 32.99s/it][Succeeded / Failed / Skipped / Total] 640 / 194 / 21 / 855:  86%|████████▌ | 856/1000 [7:51:09<1:19:15, 33.02s/it]Adds an integer or float constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantIntegerOrFloat]] ( final int [[tag]] , final int value ) { int hashCode = hash ( [[tag]] , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( [[tag]] ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[redo]] ( final int [[trademark]] , final int value ) { int hashCode = hash ( [[trademark]] , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[trademark]] && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( [[trademark]] ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , [[trademark]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 851 ---------------------------------------------
Adds an integer or float constant . --> Ringing ringling --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int [[index]] , final int tag , final int value ) { add ( new Entry ( [[index]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[ringling]] ( final int [[cataloguing]] , final int tag , final int value ) { add ( new Entry ( [[cataloguing]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .


--------------------------------------------- Result 852 ---------------------------------------------
Adds a long or double constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantLongOrDouble]] ( final int tag , final long [[value]] ) { int hashCode = hash ( tag , [[value]] ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . data == [[value]] ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( [[value]] ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[advices]] ( final int tag , final long [[appreciates]] ) { int hashCode = hash ( tag , [[appreciates]] ) ; Entry [[admission]] = get ( hashCode ) ; while ( [[admission]] != null ) { if ( [[admission]] . tag == tag && [[admission]] . hashCode == hashCode && [[admission]] . data == [[appreciates]] ) { return [[admission]] ; } [[admission]] = [[admission]] . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( [[appreciates]] ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , [[appreciates]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 853 ---------------------------------------------
Adds a long constant . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantLongOrDouble]] ( final int index , final int tag , final long value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[stateroom]] ( final int index , final int tag , final long value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .


--------------------------------------------- Result 854 ---------------------------------------------
Adds a constant name and type descriptor to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: int addConstantNameAndType ( final String name , final String [[descriptor]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[hashCode]] = hash ( tag , name , [[descriptor]] ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[hashCode]] && entry . name . equals ( name ) && entry . value . equals ( [[descriptor]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( [[descriptor]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , [[descriptor]] , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int addConstantNameAndType ( final String name , final String [[consequently]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[droves]] = hash ( tag , name , [[consequently]] ) ; Entry entry = get ( [[droves]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[droves]] && entry . name . equals ( name ) && entry . value . equals ( [[consequently]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( [[consequently]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , [[consequently]] , [[droves]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 855 ---------------------------------------------
Adds a name and type . --> An annotation entry point --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int index , final String [[name]] , final String [[descriptor]] ) { final int [[tag]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , [[tag]] , [[name]] , [[descriptor]] , hash ( [[tag]] , [[name]] , [[descriptor]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[anker]] ( final int index , final String [[nominated]] , final String [[focal]] ) { final int [[captioning]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , [[captioning]] , [[nominated]] , [[focal]] , hash ( [[captioning]] , [[nominated]] , [[focal]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .


--------------------------------------------- Result 856 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 641 / 194 / 21 / 856:  86%|████████▌ | 856/1000 [7:51:09<1:19:15, 33.02s/it][Succeeded / Failed / Skipped / Total] 641 / 194 / 21 / 856:  86%|████████▌ | 857/1000 [7:51:48<1:18:43, 33.03s/it][Succeeded / Failed / Skipped / Total] 641 / 195 / 21 / 857:  86%|████████▌ | 857/1000 [7:51:48<1:18:43, 33.03s/it][Succeeded / Failed / Skipped / Total] 641 / 195 / 21 / 857:  86%|████████▌ | 858/1000 [7:52:26<1:18:11, 33.04s/it][Succeeded / Failed / Skipped / Total] 642 / 195 / 21 / 858:  86%|████████▌ | 858/1000 [7:52:26<1:18:11, 33.04s/it][Succeeded / Failed / Skipped / Total] 642 / 195 / 21 / 858:  86%|████████▌ | 859/1000 [7:52:41<1:17:35, 33.02s/it][Succeeded / Failed / Skipped / Total] 643 / 195 / 21 / 859:  86%|████████▌ | 859/1000 [7:52:41<1:17:35, 33.02s/it][Succeeded / Failed / Skipped / Total] 643 / 195 / 21 / 859:  86%|████████▌ | 860/1000 [7:53:28<1:17:04, 33.03s/it][Succeeded / Failed / Skipped / Total] 644 / 195 / 21 / 860:  86%|████████▌ | 860/1000 [7:53:28<1:17:04, 33.03s/it][Succeeded / Failed / Skipped / Total] 644 / 195 / 21 / 860:  86%|████████▌ | 861/1000 [7:54:56<1:16:40, 33.10s/it][Succeeded / Failed / Skipped / Total] 644 / 196 / 21 / 861:  86%|████████▌ | 861/1000 [7:54:56<1:16:40, 33.10s/it][Succeeded / Failed / Skipped / Total] 644 / 196 / 21 / 861:  86%|████████▌ | 862/1000 [7:56:41<1:16:18, 33.18s/it]Adds a UTF8 constant to the constant pool . --> getcoattails --> Socre: 1.0

[[[[Adv]]]]: int [[addConstantUtf8]] ( final String [[value]] ) { int [[hashCode]] = hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == Symbol . CONSTANT_UTF8_TAG && [[entry]] . hashCode == [[hashCode]] && [[entry]] . value . equals ( [[value]] ) ) { return [[entry]] . index ; } [[entry]] = [[entry]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( [[value]] ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , [[value]] , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[coattails]] ( final String [[appreciates]] ) { int [[crépuscule]] = hash ( Symbol . CONSTANT_UTF8_TAG , [[appreciates]] ) ; Entry [[influx]] = get ( [[crépuscule]] ) ; while ( [[influx]] != null ) { if ( [[influx]] . tag == Symbol . CONSTANT_UTF8_TAG && [[influx]] . hashCode == [[crépuscule]] && [[influx]] . value . equals ( [[appreciates]] ) ) { return [[influx]] . index ; } [[influx]] = [[influx]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( [[appreciates]] ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , [[appreciates]] , [[crépuscule]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 857 ---------------------------------------------
Adds a UTF8 constant . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int index , final String [[value]] ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , [[value]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[aftershock]] ( final int index , final String [[amount]] ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , [[amount]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[amount]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .


--------------------------------------------- Result 858 ---------------------------------------------
Add a constant method handle . --> interface method handle --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int [[referenceKind]] , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[julianne]] ( final int [[cobwebs]] , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 859 ---------------------------------------------
Add constant method handle . --> Compactor methods --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantMethodHandle]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[compactor]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .


--------------------------------------------- Result 860 ---------------------------------------------
Add a static constant . --> public static public static --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantDynamic]] ( final String [[name]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[bootstrapMethod]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , [[name]] , descriptor , [[bootstrapMethod]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[popular]] ( final String [[nominated]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[auctions]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , [[nominated]] , descriptor , [[auctions]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 861 ---------------------------------------------
Add a static invoke dynamic method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantInvokeDynamic]] ( final String name , final String [[descriptor]] , final Handle bootstrapMethodHandle , final Object ... [[bootstrapMethodArguments]] ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , [[bootstrapMethodArguments]] ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , [[descriptor]] , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[havens]] ( final String name , final String [[bonzo]] , final Handle bootstrapMethodHandle , final Object ... [[tastier]] ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , [[tastier]] ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , [[bonzo]] , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 862 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 644 / 197 / 21 / 862:  86%|████████▌ | 862/1000 [7:56:41<1:16:18, 33.18s/it][Succeeded / Failed / Skipped / Total] 644 / 197 / 21 / 862:  86%|████████▋ | 863/1000 [7:58:12<1:15:54, 33.25s/it][Succeeded / Failed / Skipped / Total] 644 / 198 / 21 / 863:  86%|████████▋ | 863/1000 [7:58:12<1:15:54, 33.25s/it][Succeeded / Failed / Skipped / Total] 644 / 198 / 21 / 863:  86%|████████▋ | 864/1000 [7:59:32<1:15:29, 33.30s/it][Succeeded / Failed / Skipped / Total] 644 / 199 / 21 / 864:  86%|████████▋ | 864/1000 [7:59:32<1:15:29, 33.30s/it][Succeeded / Failed / Skipped / Total] 644 / 199 / 21 / 864:  86%|████████▋ | 865/1000 [8:00:24<1:14:58, 33.32s/it][Succeeded / Failed / Skipped / Total] 644 / 200 / 21 / 865:  86%|████████▋ | 865/1000 [8:00:24<1:14:58, 33.32s/it][Succeeded / Failed / Skipped / Total] 644 / 200 / 21 / 865:  87%|████████▋ | 866/1000 [8:00:55<1:14:25, 33.32s/it][Succeeded / Failed / Skipped / Total] 645 / 200 / 21 / 866:  87%|████████▋ | 866/1000 [8:00:55<1:14:25, 33.32s/it][Succeeded / Failed / Skipped / Total] 645 / 200 / 21 / 866:  87%|████████▋ | 867/1000 [8:01:39<1:13:53, 33.33s/it][Succeeded / Failed / Skipped / Total] 646 / 200 / 21 / 867:  87%|████████▋ | 867/1000 [8:01:39<1:13:53, 33.33s/it][Succeeded / Failed / Skipped / Total] 646 / 200 / 21 / 867:  87%|████████▋ | 868/1000 [8:01:56<1:13:17, 33.31s/it]Add or invoke dynamic reference . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . data == bootstrapMethodIndex && [[entry]] . name . equals ( name ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[persistence]] ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry [[inbound]] = get ( hashCode ) ; while ( [[inbound]] != null ) { if ( [[inbound]] . tag == tag && [[inbound]] . hashCode == hashCode && [[inbound]] . data == bootstrapMethodIndex && [[inbound]] . name . equals ( name ) && [[inbound]] . value . equals ( descriptor ) ) { return [[inbound]] ; } [[inbound]] = [[inbound]] . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 863 ---------------------------------------------
Adds a constant dynamic reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final int index , final String [[name]] , final String [[descriptor]] , final int [[bootstrapMethodIndex]] ) { int hashCode = hash ( tag , [[name]] , [[descriptor]] , [[bootstrapMethodIndex]] ) ; add ( new Entry ( index , tag , null , [[name]] , [[descriptor]] , [[bootstrapMethodIndex]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[castrati]] ( final int tag , final int index , final String [[appointed]] , final String [[deteriorated]] , final int [[billie]] ) { int hashCode = hash ( tag , [[appointed]] , [[deteriorated]] , [[billie]] ) ; add ( new Entry ( index , tag , null , [[appointed]] , [[deteriorated]] , [[billie]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .


--------------------------------------------- Result 864 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantUtf8Reference]] ( final int tag , final String [[value]] ) { int [[hashCode]] = hash ( tag , [[value]] ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[hashCode]] && entry . value . equals ( [[value]] ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( [[value]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[value]] , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[effeminate]] ( final int tag , final String [[assessments]] ) { int [[geordie]] = hash ( tag , [[assessments]] ) ; Entry entry = get ( [[geordie]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[geordie]] && entry . value . equals ( [[assessments]] ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( [[assessments]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[assessments]] , [[geordie]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 865 ---------------------------------------------
Adds a reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int [[index]] , final int tag , final String value ) { add ( new Entry ( [[index]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[stapler]] ( final int [[references]] , final int tag , final String value ) { add ( new Entry ( [[references]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .


--------------------------------------------- Result 866 ---------------------------------------------
Add bootstrap method . --> Halfpaker methods --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle bootstrapMethodHandle , final Object ... [[bootstrapMethodArguments]] ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[halfpenny]] ( final Handle bootstrapMethodHandle , final Object ... [[fishhooks]] ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .


--------------------------------------------- Result 867 ---------------------------------------------
Adds a merged type . --> Bulk Bleans --> Socre: 1.0

[[[[Adv]]]]: int [[addMergedType]] ( final int [[typeTableIndex1]] , final int [[typeTableIndex2]] ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int [[bergin]] ( final int [[jl]] , final int [[birdbath]] ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .


--------------------------------------------- Result 868 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 647 / 200 / 21 / 868:  87%|████████▋ | 868/1000 [8:01:56<1:13:17, 33.31s/it][Succeeded / Failed / Skipped / Total] 647 / 200 / 21 / 868:  87%|████████▋ | 869/1000 [8:02:22<1:12:43, 33.31s/it][Succeeded / Failed / Skipped / Total] 647 / 201 / 21 / 869:  87%|████████▋ | 869/1000 [8:02:22<1:12:43, 33.31s/it][Succeeded / Failed / Skipped / Total] 647 / 201 / 21 / 869:  87%|████████▋ | 870/1000 [8:03:56<1:12:18, 33.38s/it][Succeeded / Failed / Skipped / Total] 647 / 202 / 21 / 870:  87%|████████▋ | 870/1000 [8:03:56<1:12:18, 33.38s/it][Succeeded / Failed / Skipped / Total] 647 / 202 / 21 / 870:  87%|████████▋ | 871/1000 [8:04:43<1:11:47, 33.39s/it][Succeeded / Failed / Skipped / Total] 647 / 203 / 21 / 871:  87%|████████▋ | 871/1000 [8:04:43<1:11:47, 33.39s/it][Succeeded / Failed / Skipped / Total] 647 / 203 / 21 / 871:  87%|████████▋ | 872/1000 [8:05:20<1:11:14, 33.40s/it][Succeeded / Failed / Skipped / Total] 647 / 204 / 21 / 872:  87%|████████▋ | 872/1000 [8:05:20<1:11:14, 33.40s/it][Succeeded / Failed / Skipped / Total] 647 / 204 / 21 / 872:  87%|████████▋ | 873/1000 [8:06:24<1:10:45, 33.43s/it][Succeeded / Failed / Skipped / Total] 647 / 205 / 21 / 873:  87%|████████▋ | 873/1000 [8:06:24<1:10:45, 33.43s/it][Succeeded / Failed / Skipped / Total] 647 / 205 / 21 / 873:  87%|████████▋ | 874/1000 [8:07:47<1:10:19, 33.49s/it][Succeeded / Failed / Skipped / Total] 647 / 206 / 21 / 874:  87%|████████▋ | 874/1000 [8:07:47<1:10:19, 33.49s/it][Succeeded / Failed / Skipped / Total] 647 / 206 / 21 / 874:  88%|████████▊ | 875/1000 [8:08:29<1:09:47, 33.50s/it][Succeeded / Failed / Skipped / Total] 648 / 206 / 21 / 875:  88%|████████▊ | 875/1000 [8:08:29<1:09:47, 33.50s/it][Succeeded / Failed / Skipped / Total] 648 / 206 / 21 / 875:  88%|████████▊ | 876/1000 [8:08:46<1:09:11, 33.48s/it][Succeeded / Failed / Skipped / Total] 649 / 206 / 21 / 876:  88%|████████▊ | 876/1000 [8:08:46<1:09:11, 33.48s/it][Succeeded / Failed / Skipped / Total] 649 / 206 / 21 / 876:  88%|████████▊ | 877/1000 [8:08:59<1:08:34, 33.45s/it]Creates a hash from a name . --> also used for testing --> Socre: 1.0

[[[[Adv]]]]: private int [[hash]] ( final String name ) { int h = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[sauerkraut]] ( final String name ) { int h = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .


--------------------------------------------- Result 869 ---------------------------------------------
Clear all entries from the multimap . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMultiMap < V > clear ( ) { for ( int [[i]] = 0 ; [[i]] < entries . length ; [[i]] ++ ) { entries [ [[i]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > clear ( ) { for ( int [[you]] = 0 ; [[you]] < entries . length ; [[you]] ++ ) { entries [ [[you]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .


--------------------------------------------- Result 870 ---------------------------------------------
Returns all values for the specified name . --> [[[FAILED]]]

[[[[Adv]]]]: public List < V > [[getAll]] ( final String [[name]] ) { LinkedList < V > [[values]] = new LinkedList <> ( ) ; int [[h]] = hash ( [[name]] ) ; int i = index ( [[h]] ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == [[h]] && eq ( [[name]] , e . key ) ) { [[values]] . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return [[values]] ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[pepa]] ( final String [[named]] ) { LinkedList < V > [[significance]] = new LinkedList <> ( ) ; int [[rh]] = hash ( [[named]] ) ; int i = index ( [[rh]] ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == [[rh]] && eq ( [[named]] , e . key ) ) { [[significance]] . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return [[significance]] ; }
[[[[Nl]]]]: Returns all values associated with the name .


--------------------------------------------- Result 871 ---------------------------------------------
Returns an iterator over the elements in this map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > iterator ( ) { final MapEntry [ ] [[e]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[e]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > [[next]] ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > [[next]] = [[e]] [ 0 ] ; [[e]] [ 0 ] = [[e]] [ 0 ] . after ; return [[next]] ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > iterator ( ) { final MapEntry [ ] [[b]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[b]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > [[hereafter]] ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > [[hereafter]] = [[b]] [ 0 ] ; [[b]] [ 0 ] = [[b]] [ 0 ] . after ; return [[hereafter]] ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .


--------------------------------------------- Result 872 ---------------------------------------------
Returns all the entries in this map . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > [[all]] = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { [[all]] . add ( e ) ; e = e . after ; } return [[all]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[roster]] ( ) { List < Map . Entry < String , V > > [[eveyone]] = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { [[eveyone]] . add ( e ) ; e = e . after ; } return [[eveyone]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .


--------------------------------------------- Result 873 ---------------------------------------------
Grows the internal buffer . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[grow]] ( final int [[minCapacity]] ) { final int oldCapacity = buffer . length ; int newCapacity = oldCapacity << 1 ; if ( newCapacity - [[minCapacity]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[increases]] ( final int [[ortiz]] ) { final int oldCapacity = buffer . length ; int newCapacity = oldCapacity << 1 ; if ( newCapacity - [[ortiz]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .


--------------------------------------------- Result 874 ---------------------------------------------
Appends a range of characters to the buffer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence [[csq]] , final int [[start]] , final int [[end]] ) { for ( int i = [[start]] ; i < [[end]] ; i ++ ) { [[append]] ( [[csq]] . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[rapidly]] ( final CharSequence [[gorgonzola]] , final int [[initiation]] , final int [[terminates]] ) { for ( int i = [[initiation]] ; i < [[terminates]] ; i ++ ) { [[rapidly]] ( [[gorgonzola]] . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .


--------------------------------------------- Result 875 ---------------------------------------------
Visits the annotation . --> visit the aeron annotation --> Socre: 1.0

[[[[Adv]]]]: @ Override public AnnotationVisitor [[visitAnnotation]] ( final String [[desc]] , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( [[desc]] , visible ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor [[colonoscopy]] ( final String [[aerials]] , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( [[aerials]] , visible ) ;
[[[[Nl]]]]: Copies target method annotations .


--------------------------------------------- Result 876 ---------------------------------------------
Create the end of the chain . --> Starrays the first - chain in the chain --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[visitEnd]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void [[starr]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .


--------------------------------------------- Result 877 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 650 / 206 / 21 / 877:  88%|████████▊ | 877/1000 [8:08:59<1:08:34, 33.45s/it][Succeeded / Failed / Skipped / Total] 650 / 206 / 21 / 877:  88%|████████▊ | 878/1000 [8:09:38<1:08:02, 33.46s/it][Succeeded / Failed / Skipped / Total] 651 / 206 / 21 / 878:  88%|████████▊ | 878/1000 [8:09:38<1:08:02, 33.46s/it][Succeeded / Failed / Skipped / Total] 651 / 206 / 21 / 878:  88%|████████▊ | 879/1000 [8:10:03<1:07:27, 33.45s/it][Succeeded / Failed / Skipped / Total] 651 / 207 / 21 / 879:  88%|████████▊ | 879/1000 [8:10:03<1:07:27, 33.45s/it][Succeeded / Failed / Skipped / Total] 651 / 207 / 21 / 879:  88%|████████▊ | 880/1000 [8:10:28<1:06:52, 33.44s/it][Succeeded / Failed / Skipped / Total] 651 / 208 / 21 / 880:  88%|████████▊ | 880/1000 [8:10:28<1:06:52, 33.44s/it][Succeeded / Failed / Skipped / Total] 651 / 208 / 21 / 880:  88%|████████▊ | 881/1000 [8:10:41<1:06:16, 33.42s/it][Succeeded / Failed / Skipped / Total] 652 / 208 / 21 / 881:  88%|████████▊ | 881/1000 [8:10:41<1:06:16, 33.42s/it][Succeeded / Failed / Skipped / Total] 652 / 208 / 21 / 881:  88%|████████▊ | 882/1000 [8:10:56<1:05:40, 33.40s/it][Succeeded / Failed / Skipped / Total] 653 / 208 / 21 / 882:  88%|████████▊ | 882/1000 [8:10:56<1:05:40, 33.40s/it][Succeeded / Failed / Skipped / Total] 653 / 208 / 21 / 882:  88%|████████▊ | 883/1000 [8:12:13<1:05:13, 33.45s/it][Succeeded / Failed / Skipped / Total] 654 / 208 / 21 / 883:  88%|████████▊ | 883/1000 [8:12:13<1:05:13, 33.45s/it][Succeeded / Failed / Skipped / Total] 654 / 208 / 21 / 883:  88%|████████▊ | 884/1000 [8:12:58<1:04:41, 33.46s/it]Create the start chain delegate . --> Textlot --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[charlot]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .


--------------------------------------------- Result 878 ---------------------------------------------
Create the first chain delegate . --> load methods --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData [[tmd]] ) { methodVisitor . visitCode ( ) ; if ( [[tmd]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , False ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , False ) ; } visitReturn ( methodVisitor , [[tmd]] . msign , False ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[abductions]] ( final TargetMethodData [[landless]] ) { methodVisitor . visitCode ( ) ; if ( [[landless]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[landless]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[landless]] . firstMethodName ( ) , [[landless]] . msign . getDescription ( ) , False ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[landless]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[landless]] . firstMethodName ( ) , [[landless]] . msign . getDescription ( ) , False ) ; } visitReturn ( methodVisitor , [[landless]] . msign , False ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .


--------------------------------------------- Result 879 ---------------------------------------------
Parse a path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path [[parse]] ( final String [[path]] ) { return [[path]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[path]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path [[shaping]] ( final String [[keng]] ) { return [[keng]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[keng]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .


--------------------------------------------- Result 880 ---------------------------------------------
Adds a field to the path . --> [[[FAILED]]]

[[[[Adv]]]]: public Path [[push]] ( final CharSequence [[field]] ) { _push ( [[field]] ) ; if ( altPath != null ) { altPath . push ( [[field]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[pressing]] ( final CharSequence [[situ]] ) { _push ( [[situ]] ) ; if ( altPath != null ) { altPath . push ( [[situ]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .


--------------------------------------------- Result 881 ---------------------------------------------
Configure the servlet context . --> Add back caches --> Socre: 1.0

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , True , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , True , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[backaches]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , True , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , True , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .


--------------------------------------------- Result 882 ---------------------------------------------
Execute the method --> Methode permettant --> Socre: 1.0

[[[[Adv]]]]: public Object [[execute]] ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object [[enforced]] ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;


--------------------------------------------- Result 883 ---------------------------------------------
Gets the FieldDescriptors . --> Initialize the newsreader --> Socre: 1.0

[[[[Adv]]]]: public FieldDescriptor [ ] [[getAllFieldDescriptors]] ( ) { if ( [[allFields]] == null ) { FieldDescriptor [ ] [[allFields]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[allFields]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[allFields]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[allFields]] ; } return [[allFields]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] [[newsreader]] ( ) { if ( [[dorinda]] == null ) { FieldDescriptor [ ] [[dorinda]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[dorinda]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[dorinda]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[dorinda]] ; } return [[dorinda]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .


--------------------------------------------- Result 884 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 655 / 208 / 21 / 884:  88%|████████▊ | 884/1000 [8:12:58<1:04:41, 33.46s/it][Succeeded / Failed / Skipped / Total] 655 / 208 / 21 / 884:  88%|████████▊ | 885/1000 [8:13:14<1:04:05, 33.44s/it][Succeeded / Failed / Skipped / Total] 656 / 208 / 21 / 885:  88%|████████▊ | 885/1000 [8:13:14<1:04:05, 33.44s/it][Succeeded / Failed / Skipped / Total] 656 / 208 / 21 / 885:  89%|████████▊ | 886/1000 [8:13:57<1:03:33, 33.45s/it][Succeeded / Failed / Skipped / Total] 657 / 208 / 21 / 886:  89%|████████▊ | 886/1000 [8:13:57<1:03:33, 33.45s/it][Succeeded / Failed / Skipped / Total] 657 / 208 / 21 / 886:  89%|████████▊ | 887/1000 [8:14:53<1:03:02, 33.48s/it][Succeeded / Failed / Skipped / Total] 657 / 209 / 21 / 887:  89%|████████▊ | 887/1000 [8:14:53<1:03:02, 33.48s/it][Succeeded / Failed / Skipped / Total] 657 / 209 / 21 / 887:  89%|████████▉ | 888/1000 [8:15:07<1:02:26, 33.45s/it][Succeeded / Failed / Skipped / Total] 658 / 209 / 21 / 888:  89%|████████▉ | 888/1000 [8:15:07<1:02:26, 33.45s/it][Succeeded / Failed / Skipped / Total] 658 / 209 / 21 / 888:  89%|████████▉ | 889/1000 [8:16:37<1:02:00, 33.52s/it][Succeeded / Failed / Skipped / Total] 658 / 210 / 21 / 889:  89%|████████▉ | 889/1000 [8:16:37<1:02:00, 33.52s/it][Succeeded / Failed / Skipped / Total] 658 / 210 / 21 / 889:  89%|████████▉ | 890/1000 [8:17:18<1:01:27, 33.53s/it]Registers a bean definition for registration . --> This method is responsible for creating a BeanDefinition instance --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[name]] , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[originalType]] = type ; final ProxettaFactory [[builder]] = proxetta . proxy ( ) ; [[builder]] . setTarget ( type ) ; type = [[builder]] . define ( ) ; return new ProxettaBeanDefinition ( [[name]] , type , scope , wiringMode , [[originalType]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( [[name]] , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[designated]] , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[drazen]] = type ; final ProxettaFactory [[inventor]] = proxetta . proxy ( ) ; [[inventor]] . setTarget ( type ) ; type = [[inventor]] . define ( ) ; return new ProxettaBeanDefinition ( [[designated]] , type , scope , wiringMode , [[drazen]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( [[designated]] , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .


--------------------------------------------- Result 885 ---------------------------------------------
Convert JDBCTransactionMode to DbTransactionMode . --> Creates the DbTransactionMode from jtxTransaction --> Socre: 1.0

[[[[Adv]]]]: public static DbTransactionMode [[convertToDbMode]] ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode [[adversary]] ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .


--------------------------------------------- Result 886 ---------------------------------------------
Reads the value of the given property from the source object . --> Given the source and a propertyDescriptor return the result --> Socre: 1.0

[[[[Adv]]]]: private Object [[readProperty]] ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter [[getter]] = propertyDescriptor . getGetter ( declared ) ; if ( [[getter]] != null ) { try { return [[getter]] . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[flatbed]] ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter [[grayer]] = propertyDescriptor . getGetter ( declared ) ; if ( [[grayer]] != null ) { try { return [[grayer]] . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .


--------------------------------------------- Result 887 ---------------------------------------------
Copies all of the values from the specified map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[sims]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .


--------------------------------------------- Result 888 ---------------------------------------------
Append a buffer to this buffer . --> Desiring the listener --> Socre: 1.0

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer buffer ) { if ( buffer . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[desiring]] ( final Buffer buffer ) { if ( buffer . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .


--------------------------------------------- Result 889 ---------------------------------------------
Write this object to a writer . --> [[[FAILED]]]

[[[[Adv]]]]: public void writeTo ( final Writer [[writer]] ) throws IOException { for ( Object [[o]] : list ) { if ( [[o]] instanceof FastByteBuffer ) { FastByteBuffer [[fastByteBuffer]] = ( FastByteBuffer ) [[o]] ; byte [ ] array = [[fastByteBuffer]] . toArray ( ) ; [[writer]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( [[o]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[o]] ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[writer]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void writeTo ( final Writer [[recorder]] ) throws IOException { for ( Object [[ies]] : list ) { if ( [[ies]] instanceof FastByteBuffer ) { FastByteBuffer [[beaky]] = ( FastByteBuffer ) [[ies]] ; byte [ ] array = [[beaky]] . toArray ( ) ; [[recorder]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( [[ies]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[ies]] ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[recorder]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .


--------------------------------------------- Result 890 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 659 / 210 / 21 / 890:  89%|████████▉ | 890/1000 [8:17:18<1:01:27, 33.53s/it][Succeeded / Failed / Skipped / Total] 659 / 210 / 21 / 890:  89%|████████▉ | 891/1000 [8:17:57<1:00:55, 33.53s/it][Succeeded / Failed / Skipped / Total] 660 / 210 / 21 / 891:  89%|████████▉ | 891/1000 [8:17:57<1:00:55, 33.53s/it][Succeeded / Failed / Skipped / Total] 660 / 210 / 21 / 891:  89%|████████▉ | 892/1000 [8:18:12<1:00:19, 33.51s/it][Succeeded / Failed / Skipped / Total] 661 / 210 / 21 / 892:  89%|████████▉ | 892/1000 [8:18:12<1:00:19, 33.51s/it][Succeeded / Failed / Skipped / Total] 661 / 210 / 21 / 892:  89%|████████▉ | 893/1000 [8:18:51<59:46, 33.52s/it]  [Succeeded / Failed / Skipped / Total] 661 / 211 / 21 / 893:  89%|████████▉ | 893/1000 [8:18:51<59:46, 33.52s/it][Succeeded / Failed / Skipped / Total] 661 / 211 / 21 / 893:  89%|████████▉ | 894/1000 [8:19:29<59:13, 33.52s/it][Succeeded / Failed / Skipped / Total] 662 / 211 / 21 / 894:  89%|████████▉ | 894/1000 [8:19:29<59:13, 33.52s/it][Succeeded / Failed / Skipped / Total] 662 / 211 / 21 / 894:  90%|████████▉ | 895/1000 [8:19:55<58:38, 33.51s/it][Succeeded / Failed / Skipped / Total] 663 / 211 / 21 / 895:  90%|████████▉ | 895/1000 [8:19:55<58:38, 33.51s/it][Succeeded / Failed / Skipped / Total] 663 / 211 / 21 / 895:  90%|████████▉ | 896/1000 [8:20:21<58:04, 33.51s/it][Succeeded / Failed / Skipped / Total] 664 / 211 / 21 / 896:  90%|████████▉ | 896/1000 [8:20:21<58:04, 33.51s/it][Succeeded / Failed / Skipped / Total] 664 / 211 / 21 / 896:  90%|████████▉ | 897/1000 [8:20:46<57:30, 33.50s/it][Succeeded / Failed / Skipped / Total] 664 / 212 / 21 / 897:  90%|████████▉ | 897/1000 [8:20:46<57:30, 33.50s/it][Succeeded / Failed / Skipped / Total] 664 / 212 / 21 / 897:  90%|████████▉ | 898/1000 [8:21:25<56:57, 33.50s/it][Succeeded / Failed / Skipped / Total] 664 / 213 / 21 / 898:  90%|████████▉ | 898/1000 [8:21:25<56:57, 33.50s/it][Succeeded / Failed / Skipped / Total] 664 / 213 / 21 / 898:  90%|████████▉ | 899/1000 [8:22:04<56:24, 33.51s/it]Write this list to an output stream . --> copied from org --> Socre: 1.0

[[[[Adv]]]]: public void writeTo ( final OutputStream out ) throws IOException { for ( Object [[o]] : list ) { if ( [[o]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[o]] ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( [[o]] instanceof Uploadable ) { Uploadable [[uploadable]] = ( Uploadable ) [[o]] ; InputStream [[inputStream]] = [[uploadable]] . openInputStream ( ) ; try { StreamUtil . copy ( [[inputStream]] , out ) ; } finally { StreamUtil . close ( [[inputStream]] ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void writeTo ( final OutputStream out ) throws IOException { for ( Object [[singapore]] : list ) { if ( [[singapore]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[singapore]] ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( [[singapore]] instanceof Uploadable ) { Uploadable [[converged]] = ( Uploadable ) [[singapore]] ; InputStream [[deposition]] = [[converged]] . openInputStream ( ) ; try { StreamUtil . copy ( [[deposition]] , out ) ; } finally { StreamUtil . close ( [[deposition]] ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .


--------------------------------------------- Result 891 ---------------------------------------------
Write this response to an output stream . -->  bubba --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream [[out]] , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[bubba]] ( final OutputStream [[sortie]] , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .


--------------------------------------------- Result 892 ---------------------------------------------
Returns a string value for the given key . --> Convenience method for getting a textual representation --> Socre: 1.0

[[[[Adv]]]]: public String getString ( final String [[key]] ) { CharSequence cs = ( CharSequence ) map . get ( [[key]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String getString ( final String [[primordial]] ) { CharSequence cs = ( CharSequence ) map . get ( [[primordial]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .


--------------------------------------------- Result 893 ---------------------------------------------
Returns the integer value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer getInteger ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Integer ) { return ( Integer ) [[number]] ; } return [[number]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer getInteger ( final String key ) { Number [[sizing]] = ( Number ) map . get ( key ) ; if ( [[sizing]] == null ) { return null ; } if ( [[sizing]] instanceof Integer ) { return ( Integer ) [[sizing]] ; } return [[sizing]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .


--------------------------------------------- Result 894 ---------------------------------------------
Returns the long value for the given key . --> get fakirir --> Socre: 1.0

[[[[Adv]]]]: public Long [[getLong]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long [[fakir]] ( final String [[critical]] ) { Number number = ( Number ) map . get ( [[critical]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .


--------------------------------------------- Result 895 ---------------------------------------------
Gets a double value . --> Convenience method for retrieving a batch from an element --> Socre: 1.0

[[[[Adv]]]]: public Double getDouble ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Double ) { return ( Double ) [[number]] ; } return [[number]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double getDouble ( final String [[elemental]] ) { Number [[batches]] = ( Number ) map . get ( [[elemental]] ) ; if ( [[batches]] == null ) { return null ; } if ( [[batches]] instanceof Double ) { return ( Double ) [[batches]] ; } return [[batches]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .


--------------------------------------------- Result 896 ---------------------------------------------
Returns the Float value for the given key . --> Convenience method for abuelve --> Socre: 1.0

[[[[Adv]]]]: public Float [[getFloat]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[abuelo]] ( final String [[essentials]] ) { Number number = ( Number ) map . get ( [[essentials]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .


--------------------------------------------- Result 897 ---------------------------------------------
Get a property value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] getValue ( final String key ) { [[T]] val = ( [[T]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[T]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[T]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[ton]] > [[ton]] getValue ( final String key ) { [[ton]] val = ( [[ton]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[ton]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[ton]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .


--------------------------------------------- Result 898 ---------------------------------------------
Add a new string value . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonObject put ( final String key , final String [[value]] ) { Objects . requireNonNull ( key ) ; map . put ( key , [[value]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject put ( final String key , final String [[evaluations]] ) { Objects . requireNonNull ( key ) ; map . put ( key , [[evaluations]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .


--------------------------------------------- Result 899 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 665 / 213 / 21 / 899:  90%|████████▉ | 899/1000 [8:22:04<56:24, 33.51s/it][Succeeded / Failed / Skipped / Total] 665 / 213 / 21 / 899:  90%|█████████ | 900/1000 [8:22:20<55:48, 33.49s/it][Succeeded / Failed / Skipped / Total] 666 / 213 / 21 / 900:  90%|█████████ | 900/1000 [8:22:20<55:48, 33.49s/it][Succeeded / Failed / Skipped / Total] 666 / 213 / 21 / 900:  90%|█████████ | 901/1000 [8:22:34<55:13, 33.47s/it][Succeeded / Failed / Skipped / Total] 667 / 213 / 21 / 901:  90%|█████████ | 901/1000 [8:22:34<55:13, 33.47s/it][Succeeded / Failed / Skipped / Total] 667 / 213 / 21 / 901:  90%|█████████ | 902/1000 [8:22:45<54:37, 33.44s/it][Succeeded / Failed / Skipped / Total] 668 / 213 / 21 / 902:  90%|█████████ | 902/1000 [8:22:45<54:37, 33.44s/it][Succeeded / Failed / Skipped / Total] 668 / 213 / 21 / 902:  90%|█████████ | 903/1000 [8:23:26<54:04, 33.45s/it][Succeeded / Failed / Skipped / Total] 668 / 214 / 21 / 903:  90%|█████████ | 903/1000 [8:23:26<54:04, 33.45s/it][Succeeded / Failed / Skipped / Total] 668 / 214 / 21 / 903:  90%|█████████ | 904/1000 [8:23:57<53:31, 33.45s/it][Succeeded / Failed / Skipped / Total] 669 / 214 / 21 / 904:  90%|█████████ | 904/1000 [8:23:57<53:31, 33.45s/it][Succeeded / Failed / Skipped / Total] 669 / 214 / 21 / 904:  90%|█████████ | 905/1000 [8:24:12<52:55, 33.43s/it][Succeeded / Failed / Skipped / Total] 670 / 214 / 21 / 905:  90%|█████████ | 905/1000 [8:24:12<52:55, 33.43s/it][Succeeded / Failed / Skipped / Total] 670 / 214 / 21 / 905:  91%|█████████ | 906/1000 [8:24:25<52:20, 33.41s/it][Succeeded / Failed / Skipped / Total] 671 / 214 / 21 / 906:  91%|█████████ | 906/1000 [8:24:25<52:20, 33.41s/it][Succeeded / Failed / Skipped / Total] 671 / 214 / 21 / 906:  91%|█████████ | 907/1000 [8:24:25<51:43, 33.37s/it][Succeeded / Failed / Skipped / Total] 671 / 214 / 22 / 907:  91%|█████████ | 907/1000 [8:24:25<51:43, 33.37s/it][Succeeded / Failed / Skipped / Total] 671 / 214 / 22 / 907:  91%|█████████ | 908/1000 [8:25:13<51:11, 33.39s/it]Sets the mail folder . --> Use this method to use Kusher --> Socre: 1.0

[[[[Adv]]]]: public void useFolder ( final String [[folderName]] ) { closeFolderIfOpened ( folder ) ; try { this . [[folderName]] = [[folderName]] ; this . folder = getService ( ) . getFolder ( [[folderName]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[folderName]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void useFolder ( final String [[fabric]] ) { closeFolderIfOpened ( folder ) ; try { this . [[kush]] = [[fabric]] ; this . folder = getService ( ) . getFolder ( [[fabric]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[fabric]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .


--------------------------------------------- Result 900 ---------------------------------------------
Receive messages . --> Fetch messages from folder --> Socre: 1.0

[[[[Adv]]]]: ReceivedEmail [ ] [[receiveMessages]] ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] [[ximena]] ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .


--------------------------------------------- Result 901 ---------------------------------------------
Updates the flags for the given mailbox . --> Starts merchantman folder --> Socre: 1.0

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , True ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[merchantman]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , True ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .


--------------------------------------------- Result 902 ---------------------------------------------
Closes folder if already opened . --> Close blasters --> Socre: 1.0

[[[[Adv]]]]: protected void [[closeFolderIfOpened]] ( final Folder folder ) { if ( folder != null ) { try { folder . close ( True ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void [[blasters]] ( final Folder folder ) { if ( folder != null ) { try { folder . close ( True ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .


--------------------------------------------- Result 903 ---------------------------------------------
Returns the named parameter . --> [[[FAILED]]]

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String [[name]] ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( [[name]] ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[sissies]] ( final String [[naming]] ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( [[naming]] ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .


--------------------------------------------- Result 904 ---------------------------------------------
Create alias for target . --> also used in testing --> Socre: 1.0

[[[[Adv]]]]: protected String [[alias]] ( final String [[target]] ) { return StringPool . LEFT_CHEV . concat ( [[target]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[fictitious]] ( final String [[blanco]] ) { return StringPool . LEFT_CHEV . concat ( [[blanco]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .


--------------------------------------------- Result 905 ---------------------------------------------
Validate the action . --> Validate EId --> Socre: 1.0

[[[[Adv]]]]: protected boolean [[validateAction]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean [[eid]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .


--------------------------------------------- Result 906 ---------------------------------------------
Add a new violation --> Add a new violations to the chart --> Socre: 1.0

[[[[Adv]]]]: protected void addViolation ( final String [[name]] , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[name]] , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void addViolation ( final String [[appointment]] , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[appointment]] , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .


--------------------------------------------- Result 907 ---------------------------------------------
Sets the raw data . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RawData as ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . mimeType = mimeOrExtension ; } else { this . mimeType = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!


--------------------------------------------- Result 908 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 671 / 215 / 22 / 908:  91%|█████████ | 908/1000 [8:25:13<51:11, 33.39s/it][Succeeded / Failed / Skipped / Total] 671 / 215 / 22 / 908:  91%|█████████ | 909/1000 [8:25:28<50:36, 33.36s/it][Succeeded / Failed / Skipped / Total] 672 / 215 / 22 / 909:  91%|█████████ | 909/1000 [8:25:28<50:36, 33.36s/it][Succeeded / Failed / Skipped / Total] 672 / 215 / 22 / 909:  91%|█████████ | 910/1000 [8:25:41<50:00, 33.34s/it][Succeeded / Failed / Skipped / Total] 673 / 215 / 22 / 910:  91%|█████████ | 910/1000 [8:25:41<50:00, 33.34s/it][Succeeded / Failed / Skipped / Total] 673 / 215 / 22 / 910:  91%|█████████ | 911/1000 [8:26:05<49:26, 33.33s/it][Succeeded / Failed / Skipped / Total] 674 / 215 / 22 / 911:  91%|█████████ | 911/1000 [8:26:05<49:26, 33.33s/it][Succeeded / Failed / Skipped / Total] 674 / 215 / 22 / 911:  91%|█████████ | 912/1000 [8:26:18<48:51, 33.31s/it][Succeeded / Failed / Skipped / Total] 674 / 216 / 22 / 912:  91%|█████████ | 912/1000 [8:26:18<48:51, 33.31s/it][Succeeded / Failed / Skipped / Total] 674 / 216 / 22 / 912:  91%|█████████▏| 913/1000 [8:26:31<48:15, 33.29s/it][Succeeded / Failed / Skipped / Total] 675 / 216 / 22 / 913:  91%|█████████▏| 913/1000 [8:26:31<48:15, 33.29s/it][Succeeded / Failed / Skipped / Total] 675 / 216 / 22 / 913:  91%|█████████▏| 914/1000 [8:26:45<47:40, 33.27s/it]Sets the download file name . --> [[[FAILED]]]

[[[[Adv]]]]: public RawData [[downloadableAs]] ( final String [[downloadFileName]] ) { this . downloadFileName = [[downloadFileName]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[downloadFileName]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData [[backgammon]] ( final String [[concentrate]] ) { this . downloadFileName = [[concentrate]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[concentrate]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .


--------------------------------------------- Result 909 ---------------------------------------------
Sets the target object . --> Fluent method for testing --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[funning]] ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .


--------------------------------------------- Result 910 ---------------------------------------------
Sets the target name --> Sets an aurora --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final String targetName ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( targetName ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + targetName ) ; } targetClassName = targetName ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + targetName , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[aurora]] ( final String targetName ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( targetName ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + targetName ) ; } targetClassName = targetName ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + targetName , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!


--------------------------------------------- Result 911 ---------------------------------------------
Sets the target class . --> Open greenfield --> Socre: 1.0

[[[[Adv]]]]: public T [[setTarget]] ( final Class [[target]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[target]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[target]] . getName ( ) ) ; } targetClass = [[target]] ; targetClassName = [[target]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[target]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[greenfield]] ( final Class [[destinations]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[destinations]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[destinations]] . getName ( ) ) ; } targetClass = [[destinations]] ; targetClassName = [[destinations]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[destinations]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .


--------------------------------------------- Result 912 ---------------------------------------------
Main processing . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[treatise]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .


--------------------------------------------- Result 913 ---------------------------------------------
Create proxy . --> Build the Proxy --> Socre: 1.0

[[[[Adv]]]]: public byte [ ] [[create]] ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] [[building]] ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .


--------------------------------------------- Result 914 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 676 / 216 / 22 / 914:  91%|█████████▏| 914/1000 [8:26:45<47:40, 33.27s/it][Succeeded / Failed / Skipped / Total] 676 / 216 / 22 / 914:  92%|█████████▏| 915/1000 [8:26:58<47:05, 33.24s/it][Succeeded / Failed / Skipped / Total] 677 / 216 / 22 / 915:  92%|█████████▏| 915/1000 [8:26:58<47:05, 33.24s/it][Succeeded / Failed / Skipped / Total] 677 / 216 / 22 / 915:  92%|█████████▏| 916/1000 [8:27:25<46:31, 33.24s/it][Succeeded / Failed / Skipped / Total] 678 / 216 / 22 / 916:  92%|█████████▏| 916/1000 [8:27:25<46:31, 33.24s/it][Succeeded / Failed / Skipped / Total] 678 / 216 / 22 / 916:  92%|█████████▏| 917/1000 [8:27:49<45:57, 33.23s/it][Succeeded / Failed / Skipped / Total] 679 / 216 / 22 / 917:  92%|█████████▏| 917/1000 [8:27:49<45:57, 33.23s/it][Succeeded / Failed / Skipped / Total] 679 / 216 / 22 / 917:  92%|█████████▏| 918/1000 [8:28:51<45:27, 33.26s/it][Succeeded / Failed / Skipped / Total] 680 / 216 / 22 / 918:  92%|█████████▏| 918/1000 [8:28:51<45:27, 33.26s/it][Succeeded / Failed / Skipped / Total] 680 / 216 / 22 / 918:  92%|█████████▏| 919/1000 [8:29:04<44:52, 33.24s/it][Succeeded / Failed / Skipped / Total] 681 / 216 / 22 / 919:  92%|█████████▏| 919/1000 [8:29:04<44:52, 33.24s/it][Succeeded / Failed / Skipped / Total] 681 / 216 / 22 / 919:  92%|█████████▏| 920/1000 [8:29:20<44:17, 33.22s/it][Succeeded / Failed / Skipped / Total] 682 / 216 / 22 / 920:  92%|█████████▏| 920/1000 [8:29:20<44:17, 33.22s/it][Succeeded / Failed / Skipped / Total] 682 / 216 / 22 / 920:  92%|█████████▏| 921/1000 [8:29:45<43:43, 33.21s/it][Succeeded / Failed / Skipped / Total] 683 / 216 / 22 / 921:  92%|█████████▏| 921/1000 [8:29:45<43:43, 33.21s/it][Succeeded / Failed / Skipped / Total] 683 / 216 / 22 / 921:  92%|█████████▏| 922/1000 [8:29:59<43:08, 33.19s/it]Define the class . --> Get the proxied object --> Socre: 1.0

[[[[Adv]]]]: public Class [[define]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class [[ascertained]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .


--------------------------------------------- Result 915 ---------------------------------------------
Create new instance of Proxetta class --> Borrow binder from Proxer --> Socre: 1.0

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[björn]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .


--------------------------------------------- Result 916 ---------------------------------------------
Dump proxy class in debug folder . --> Generate Gabor code --> Socre: 1.0

[[[[Adv]]]]: protected void [[dumpClassInDebugFolder]] ( final byte [ ] bytes ) { File [[debugFolder]] = proxetta . getDebugFolder ( ) ; if ( [[debugFolder]] == null ) { return ; } if ( ! [[debugFolder]] . exists ( ) || ! [[debugFolder]] . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + [[debugFolder]] ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( [[debugFolder]] , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void [[gabor]] ( final byte [ ] bytes ) { File [[boddy]] = proxetta . getDebugFolder ( ) ; if ( [[boddy]] == null ) { return ; } if ( ! [[boddy]] . exists ( ) || ! [[boddy]] . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + [[boddy]] ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( [[boddy]] , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .


--------------------------------------------- Result 917 ---------------------------------------------
Sets the sender address . --> Set a Dialog Dialog --> Socre: 1.0

[[[[Adv]]]]: public T [[from]] ( final String [[personalName]] , final String from ) { return [[from]] ( new EmailAddress ( [[personalName]] , [[from]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T [[di]] ( final String [[backstairs]] , final String from ) { return [[di]] ( new EmailAddress ( [[backstairs]] , [[di]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .


--------------------------------------------- Result 918 ---------------------------------------------
Sets the recipient address . --> Ensures that the argument is a A - B --> Socre: 1.0

[[[[Adv]]]]: public T [[to]] ( final EmailAddress [[to]] ) { this . [[to]] = ArraysUtil . append ( this . [[to]] , [[to]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T [[à]] ( final EmailAddress [[à]] ) { this . [[d]] = ArraysUtil . append ( this . [[d]] , [[à]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .


--------------------------------------------- Result 919 ---------------------------------------------
Adds a to recipient . --> Create a new recipient --> Socre: 1.0

[[[[Adv]]]]: public T to ( final String [[personalName]] , final String to ) { return to ( new EmailAddress ( [[personalName]] , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T to ( final String [[tortuous]] , final String to ) { return to ( new EmailAddress ( [[tortuous]] , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .


--------------------------------------------- Result 920 ---------------------------------------------
Sets the REPLACE for the recipient . --> Sets the email address of the recipient --> Socre: 1.0

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[corinthians]] = ArraysUtil . join ( this . [[corinthians]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .


--------------------------------------------- Result 921 ---------------------------------------------
Sets the cc addresses . --> Set bcc recipient address --> Socre: 1.0

[[[[Adv]]]]: public T [[cc]] ( final EmailAddress ... [[ccs]] ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( [[ccs]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T [[bk]] ( final EmailAddress ... [[sab]] ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( [[sab]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .


--------------------------------------------- Result 922 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 684 / 216 / 22 / 922:  92%|█████████▏| 922/1000 [8:29:59<43:08, 33.19s/it][Succeeded / Failed / Skipped / Total] 684 / 216 / 22 / 922:  92%|█████████▏| 923/1000 [8:30:42<42:36, 33.20s/it][Succeeded / Failed / Skipped / Total] 685 / 216 / 22 / 923:  92%|█████████▏| 923/1000 [8:30:42<42:36, 33.20s/it][Succeeded / Failed / Skipped / Total] 685 / 216 / 22 / 923:  92%|█████████▏| 924/1000 [8:31:19<42:03, 33.20s/it][Succeeded / Failed / Skipped / Total] 686 / 216 / 22 / 924:  92%|█████████▏| 924/1000 [8:31:19<42:03, 33.20s/it][Succeeded / Failed / Skipped / Total] 686 / 216 / 22 / 924:  92%|█████████▎| 925/1000 [8:32:03<41:31, 33.21s/it][Succeeded / Failed / Skipped / Total] 687 / 216 / 22 / 925:  92%|█████████▎| 925/1000 [8:32:03<41:31, 33.21s/it][Succeeded / Failed / Skipped / Total] 687 / 216 / 22 / 925:  93%|█████████▎| 926/1000 [8:33:44<41:03, 33.29s/it][Succeeded / Failed / Skipped / Total] 687 / 217 / 22 / 926:  93%|█████████▎| 926/1000 [8:33:44<41:03, 33.29s/it][Succeeded / Failed / Skipped / Total] 687 / 217 / 22 / 926:  93%|█████████▎| 927/1000 [8:34:05<40:29, 33.27s/it][Succeeded / Failed / Skipped / Total] 688 / 217 / 22 / 927:  93%|█████████▎| 927/1000 [8:34:05<40:29, 33.27s/it][Succeeded / Failed / Skipped / Total] 688 / 217 / 22 / 927:  93%|█████████▎| 928/1000 [8:35:17<39:58, 33.32s/it][Succeeded / Failed / Skipped / Total] 689 / 217 / 22 / 928:  93%|█████████▎| 928/1000 [8:35:17<39:58, 33.32s/it][Succeeded / Failed / Skipped / Total] 689 / 217 / 22 / 928:  93%|█████████▎| 929/1000 [8:35:30<39:23, 33.29s/it][Succeeded / Failed / Skipped / Total] 690 / 217 / 22 / 929:  93%|█████████▎| 929/1000 [8:35:30<39:23, 33.29s/it][Succeeded / Failed / Skipped / Total] 690 / 217 / 22 / 929:  93%|█████████▎| 930/1000 [8:35:45<38:49, 33.28s/it]Create a text message with the given text and encoding . --> P poisoner --> Socre: 1.0

[[[[Adv]]]]: public T [[textMessage]] ( final String text , final String encoding ) { return message ( new EmailMessage ( text , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[poisoner]] ( final String text , final String encoding ) { return message ( new EmailMessage ( text , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .


--------------------------------------------- Result 923 ---------------------------------------------
Create a new html message with the specified encoding . --> Jama mail --> Socre: 1.0

[[[[Adv]]]]: public T [[htmlMessage]] ( final String html , final String [[encoding]] ) { return message ( new EmailMessage ( html , MimeTypes . MIME_TEXT_HTML , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[jamaicans]] ( final String html , final String [[keun]] ) { return message ( new EmailMessage ( html , MimeTypes . MIME_TEXT_HTML , [[keun]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .


--------------------------------------------- Result 924 ---------------------------------------------
Sets a header . --> Set the headers to be played --> Socre: 1.0

[[[[Adv]]]]: public T [[header]] ( final String [[name]] , final String [[value]] ) { headers . put ( [[name]] , [[value]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[cartel]] ( final String [[nominated]] , final String [[appreciate]] ) { headers . put ( [[nominated]] , [[appreciate]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .


--------------------------------------------- Result 925 ---------------------------------------------
Get the value of a system property --> Get a specific emphasis --> Socre: 1.0

[[[[Adv]]]]: public static String [[get]] ( final String name , final String defaultValue ) { Objects . requireNonNull ( name ) ; String [[value]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[value]] = System . getProperty ( name ) ; } else { [[value]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[value]] == null ) { return defaultValue ; } return [[value]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String [[attained]] ( final String name , final String defaultValue ) { Objects . requireNonNull ( name ) ; String [[emphasis]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[emphasis]] = System . getProperty ( name ) ; } else { [[emphasis]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[emphasis]] == null ) { return defaultValue ; } return [[emphasis]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .


--------------------------------------------- Result 926 ---------------------------------------------
Gets boolean value . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[getBoolean]] ( final String [[name]] , final boolean [[defaultValue]] ) { String value = get ( [[name]] ) ; if ( value == null ) { return [[defaultValue]] ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return True ; case "false" : case "no" : case "0" : case "off" : return "[[False]]" != "[[False]]" ; default : return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean [[recognizes]] ( final String [[aka]] , final boolean [[hating]] ) { String value = get ( [[aka]] ) ; if ( value == null ) { return [[hating]] ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return True ; case "false" : case "no" : case "0" : case "off" : return "[["Forgeries" != "Forgeries"]]" != "[["Forgeries" != "Forgeries"]]" ; default : return [[hating]] ; } }
[[[[Nl]]]]: Returns system property as boolean .


--------------------------------------------- Result 927 ---------------------------------------------
Returns the integer value for the specified name . --> get long value --> Socre: 1.0

[[[[Adv]]]]: public static long [[getInt]] ( final String name , final int defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long [[anche]] ( final String name , final int defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .


--------------------------------------------- Result 928 ---------------------------------------------
Returns the long value for the specified name . --> Looks for the given name and bah --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLong]] ( final String name , final long [[defaultValue]] ) { String [[value]] = get ( name ) ; if ( [[value]] == null ) { return [[defaultValue]] ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[non]] ( final String name , final long [[bah]] ) { String [[usefulness]] = get ( name ) ; if ( [[usefulness]] == null ) { return [[bah]] ; } [[usefulness]] = [[usefulness]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[usefulness]] ) ; } catch ( NumberFormatException nfex ) { return [[bah]] ; } }
[[[[Nl]]]]: Returns system property as a long .


--------------------------------------------- Result 929 ---------------------------------------------
Returns the resolved parameters . --> Get the parameter names --> Socre: 1.0

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[blacken]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .


--------------------------------------------- Result 930 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 691 / 217 / 22 / 930:  93%|█████████▎| 930/1000 [8:35:45<38:49, 33.28s/it][Succeeded / Failed / Skipped / Total] 691 / 217 / 22 / 930:  93%|█████████▎| 931/1000 [8:36:40<38:17, 33.30s/it][Succeeded / Failed / Skipped / Total] 692 / 217 / 22 / 931:  93%|█████████▎| 931/1000 [8:36:40<38:17, 33.30s/it][Succeeded / Failed / Skipped / Total] 692 / 217 / 22 / 931:  93%|█████████▎| 932/1000 [8:37:18<37:44, 33.30s/it][Succeeded / Failed / Skipped / Total] 693 / 217 / 22 / 932:  93%|█████████▎| 932/1000 [8:37:18<37:44, 33.30s/it][Succeeded / Failed / Skipped / Total] 693 / 217 / 22 / 932:  93%|█████████▎| 933/1000 [8:38:01<37:11, 33.31s/it][Succeeded / Failed / Skipped / Total] 694 / 217 / 22 / 933:  93%|█████████▎| 933/1000 [8:38:01<37:11, 33.31s/it][Succeeded / Failed / Skipped / Total] 694 / 217 / 22 / 933:  93%|█████████▎| 934/1000 [8:39:07<36:41, 33.35s/it][Succeeded / Failed / Skipped / Total] 694 / 218 / 22 / 934:  93%|█████████▎| 934/1000 [8:39:07<36:41, 33.35s/it][Succeeded / Failed / Skipped / Total] 694 / 218 / 22 / 934:  94%|█████████▎| 935/1000 [8:39:38<36:07, 33.35s/it][Succeeded / Failed / Skipped / Total] 695 / 218 / 22 / 935:  94%|█████████▎| 935/1000 [8:39:38<36:07, 33.35s/it][Succeeded / Failed / Skipped / Total] 695 / 218 / 22 / 935:  94%|█████████▎| 936/1000 [8:40:22<35:34, 33.36s/it][Succeeded / Failed / Skipped / Total] 696 / 218 / 22 / 936:  94%|█████████▎| 936/1000 [8:40:22<35:34, 33.36s/it][Succeeded / Failed / Skipped / Total] 696 / 218 / 22 / 936:  94%|█████████▎| 937/1000 [8:40:36<35:00, 33.34s/it][Succeeded / Failed / Skipped / Total] 697 / 218 / 22 / 937:  94%|█████████▎| 937/1000 [8:40:36<35:00, 33.34s/it][Succeeded / Failed / Skipped / Total] 697 / 218 / 22 / 937:  94%|█████████▍| 938/1000 [8:41:10<34:26, 33.34s/it][Succeeded / Failed / Skipped / Total] 698 / 218 / 22 / 938:  94%|█████████▍| 938/1000 [8:41:10<34:26, 33.34s/it][Succeeded / Failed / Skipped / Total] 698 / 218 / 22 / 938:  94%|█████████▍| 939/1000 [8:42:09<33:55, 33.36s/it]Serialize a key value --> Append nodes to the current path --> Socre: 1.0

[[[[Adv]]]]: protected int [[serializeKeyValue]] ( final JsonContext jsonContext , final Path currentPath , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int [[death]] ( final JsonContext jsonContext , final Path currentPath , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .


--------------------------------------------- Result 931 ---------------------------------------------
Lookup path by alias . --> Gets the name of the assistant with all the parameters --> Socre: 1.0

[[[[Adv]]]]: protected String [[lookupAlias]] ( final String alias ) { String [[value]] = actionsManager . lookupPathAlias ( alias ) ; if ( [[value]] == null ) { ActionRuntime cfg = actionsManager . lookup ( alias ) ; if ( cfg != null ) { [[value]] = cfg . getActionPath ( ) ; } } return [[value]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String [[agnès]] ( final String alias ) { String [[appreciate]] = actionsManager . lookupPathAlias ( alias ) ; if ( [[appreciate]] == null ) { ActionRuntime cfg = actionsManager . lookup ( alias ) ; if ( cfg != null ) { [[appreciate]] = cfg . getActionPath ( ) ; } } return [[appreciate]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .


--------------------------------------------- Result 932 ---------------------------------------------
Resolve aliases . --> resolve aliases --> Socre: 1.0

[[[[Adv]]]]: protected String resolveAlias ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int [[ndx]] = value . indexOf ( ' ' , i ) ; if ( [[ndx]] == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String resolveAlias ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int [[prozac]] = value . indexOf ( ' ' , i ) ; if ( [[prozac]] == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .


--------------------------------------------- Result 933 ---------------------------------------------
Resolves a path with the given value . --> Add a ballard --> Socre: 1.0

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String path , String value ) { boolean [[absolutePath]] = "[[False]]" != "[[False]]" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[ballard]] ( String path , String value ) { boolean [[upwards]] = "[["Disingenuous" != "Disingenuous"]]" != "[["Disingenuous" != "Disingenuous"]]" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .


--------------------------------------------- Result 934 ---------------------------------------------
Resolves the given value with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String path , final String [[value]] ) { final ResultPath resultPath = resolveResultPath ( path , [[value]] ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[epicentre]] ( final String path , final String [[appraised]] ) { final ResultPath resultPath = resolveResultPath ( path , [[appraised]] ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .


--------------------------------------------- Result 935 ---------------------------------------------
Gets the last index of a slash . --> Return license index --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String str ) { int [[slashNdx]] = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[slashNdx]] ) ; if ( dotNdx == - 1 ) { if ( [[slashNdx]] == - 1 ) { return - 1 ; } [[slashNdx]] ++ ; if ( [[slashNdx]] < str . length ( ) - 1 ) { dotNdx = [[slashNdx]] ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[license]] ( final String str ) { int [[clubfoot]] = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[clubfoot]] ) ; if ( dotNdx == - 1 ) { if ( [[clubfoot]] == - 1 ) { return - 1 ; } [[clubfoot]] ++ ; if ( [[clubfoot]] < str . length ( ) - 1 ) { dotNdx = [[clubfoot]] ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .


--------------------------------------------- Result 936 ---------------------------------------------
Gets the last index after a slash . --> Highest played command --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String [[str]] ) { int slashNdx = [[str]] . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[hansom]] ( final String [[defence]] ) { int slashNdx = [[defence]] . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( [[defence]] , ' ' , [[defence]] . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .


--------------------------------------------- Result 937 ---------------------------------------------
Returns the index of the first dot after a dot . --> get grande --> Socre: 1.0

[[[[Adv]]]]: public static int [[indexOfDotAfterSlash]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int [[grande]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .


--------------------------------------------- Result 938 ---------------------------------------------
Strips the last letter of a name . --> Extracts the alphanicographic name from top of top letter --> Socre: 1.0

[[[[Adv]]]]: public static String [[stripLastCamelWord]] ( String [[name]] ) { int ndx = [[name]] . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( [[name]] . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { [[name]] = [[name]] . substring ( 0 , ndx ) ; } return [[name]] ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String [[apalachicola]] ( String [[moniker]] ) { int ndx = [[moniker]] . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( [[moniker]] . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { [[moniker]] = [[moniker]] . substring ( 0 , ndx ) ; } return [[moniker]] ; }
[[[[Nl]]]]: Removes last CamelWord


--------------------------------------------- Result 939 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 699 / 218 / 22 / 939:  94%|█████████▍| 939/1000 [8:42:09<33:55, 33.36s/it][Succeeded / Failed / Skipped / Total] 699 / 218 / 22 / 939:  94%|█████████▍| 940/1000 [8:43:55<33:26, 33.44s/it][Succeeded / Failed / Skipped / Total] 700 / 218 / 22 / 940:  94%|█████████▍| 940/1000 [8:43:55<33:26, 33.44s/it][Succeeded / Failed / Skipped / Total] 700 / 218 / 22 / 940:  94%|█████████▍| 941/1000 [8:44:44<32:54, 33.46s/it][Succeeded / Failed / Skipped / Total] 701 / 218 / 22 / 941:  94%|█████████▍| 941/1000 [8:44:44<32:54, 33.46s/it][Succeeded / Failed / Skipped / Total] 701 / 218 / 22 / 941:  94%|█████████▍| 942/1000 [8:44:58<32:19, 33.44s/it][Succeeded / Failed / Skipped / Total] 702 / 218 / 22 / 942:  94%|█████████▍| 942/1000 [8:44:58<32:19, 33.44s/it][Succeeded / Failed / Skipped / Total] 702 / 218 / 22 / 942:  94%|█████████▍| 943/1000 [8:45:12<31:44, 33.42s/it][Succeeded / Failed / Skipped / Total] 703 / 218 / 22 / 943:  94%|█████████▍| 943/1000 [8:45:12<31:44, 33.42s/it][Succeeded / Failed / Skipped / Total] 703 / 218 / 22 / 943:  94%|█████████▍| 944/1000 [8:45:12<31:09, 33.38s/it][Succeeded / Failed / Skipped / Total] 703 / 218 / 23 / 944:  94%|█████████▍| 944/1000 [8:45:12<31:09, 33.38s/it][Succeeded / Failed / Skipped / Total] 703 / 218 / 23 / 944:  94%|█████████▍| 945/1000 [8:46:00<30:36, 33.40s/it][Succeeded / Failed / Skipped / Total] 704 / 218 / 23 / 945:  94%|█████████▍| 945/1000 [8:46:00<30:36, 33.40s/it][Succeeded / Failed / Skipped / Total] 704 / 218 / 23 / 945:  95%|█████████▍| 946/1000 [8:46:16<30:02, 33.38s/it][Succeeded / Failed / Skipped / Total] 705 / 218 / 23 / 946:  95%|█████████▍| 946/1000 [8:46:16<30:02, 33.38s/it][Succeeded / Failed / Skipped / Total] 705 / 218 / 23 / 946:  95%|█████████▍| 947/1000 [8:47:10<29:30, 33.40s/it][Succeeded / Failed / Skipped / Total] 706 / 218 / 23 / 947:  95%|█████████▍| 947/1000 [8:47:10<29:30, 33.40s/it][Succeeded / Failed / Skipped / Total] 706 / 218 / 23 / 947:  95%|█████████▍| 948/1000 [8:47:37<28:56, 33.39s/it]Resolve schema name . --> Get BoB model --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > type , final String [[defaultSchemaName]] ) { String [[schemaName]] = null ; final DbTable dbTable = type . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[schemaName]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[schemaName]] == null ) || ( [[schemaName]] . length ( ) == 0 ) ) { [[schemaName]] = [[defaultSchemaName]] ; } return [[schemaName]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[bebo]] ( final Class < ? > type , final String [[kanes]] ) { String [[dell]] = null ; final DbTable dbTable = type . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[dell]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[dell]] == null ) || ( [[dell]] . length ( ) == 0 ) ) { [[dell]] = [[kanes]] ; } return [[dell]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .


--------------------------------------------- Result 940 ---------------------------------------------
Resolve column descriptors . --> fukui --> Socre: 1.0

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[resolveColumnDescriptors]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String [[columnName]] = null ; boolean isId = False ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[fukui]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String [[longshanks]] = null ; boolean isId = False ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .


--------------------------------------------- Result 941 ---------------------------------------------
Initializes this sketch with a key array . --> Banal mechanism --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final long [ ] key , final long [ ] tweak ) { final int [[newNw]] = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void [[banal]] ( final long [ ] key , final long [ ] tweak ) { final int [[chocolatey]] = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .


--------------------------------------------- Result 942 ---------------------------------------------
Mix rotation . --> calculate at x --> Socre: 1.0

[[[[Adv]]]]: private void [[mix]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void [[assay]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .


--------------------------------------------- Result 943 ---------------------------------------------
Performs a demix . --> Removes a binar position --> Socre: 1.0

[[[[Adv]]]]: private void demix ( final int [[j]] , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ [[j]] ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void demix ( final int [[duncan]] , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ [[duncan]] ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .


--------------------------------------------- Result 944 ---------------------------------------------
Schedule a key schedule --> [[[SKIPPED]]]

[[[[Adv]]]]: private void keySchedule ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .


--------------------------------------------- Result 945 ---------------------------------------------
Initializes this block with a key message . --> Bongo operation --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final String keyMessage , final long tweak1 , final long tweak2 ) { long [ ] [[tweak]] = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[init]] ( bytesToLongs ( key ) , [[tweak]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void [[buongiorno]] ( final String keyMessage , final long tweak1 , final long tweak2 ) { long [ ] [[alter]] = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[buongiorno]] ( bytesToLongs ( key ) , [[alter]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .


--------------------------------------------- Result 946 ---------------------------------------------
Encrypt a block . --> Decrypts bytes at offset --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[encryptBlock]] ( final byte [ ] content , final int offset ) { long [ ] contentBlock = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] [[finesse]] ( final byte [ ] content , final int offset ) { long [ ] contentBlock = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .


--------------------------------------------- Result 947 ---------------------------------------------
Convert a byte array to a long array . --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int [[i8]] = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , [[i8]] ) ; [[i8]] += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[eugenie]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int [[roomies]] = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , [[roomies]] ) ; [[roomies]] += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .


--------------------------------------------- Result 948 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 707 / 218 / 23 / 948:  95%|█████████▍| 948/1000 [8:47:37<28:56, 33.39s/it][Succeeded / Failed / Skipped / Total] 707 / 218 / 23 / 948:  95%|█████████▍| 949/1000 [8:48:05<28:22, 33.39s/it][Succeeded / Failed / Skipped / Total] 707 / 219 / 23 / 949:  95%|█████████▍| 949/1000 [8:48:05<28:22, 33.39s/it][Succeeded / Failed / Skipped / Total] 707 / 219 / 23 / 949:  95%|█████████▌| 950/1000 [8:48:54<27:50, 33.40s/it][Succeeded / Failed / Skipped / Total] 708 / 219 / 23 / 950:  95%|█████████▌| 950/1000 [8:48:54<27:50, 33.40s/it][Succeeded / Failed / Skipped / Total] 708 / 219 / 23 / 950:  95%|█████████▌| 951/1000 [8:49:08<27:15, 33.38s/it][Succeeded / Failed / Skipped / Total] 709 / 219 / 23 / 951:  95%|█████████▌| 951/1000 [8:49:08<27:15, 33.38s/it][Succeeded / Failed / Skipped / Total] 709 / 219 / 23 / 951:  95%|█████████▌| 952/1000 [8:49:08<26:40, 33.35s/it][Succeeded / Failed / Skipped / Total] 709 / 219 / 24 / 952:  95%|█████████▌| 952/1000 [8:49:08<26:40, 33.35s/it][Succeeded / Failed / Skipped / Total] 709 / 219 / 24 / 952:  95%|█████████▌| 953/1000 [8:49:39<26:07, 33.35s/it][Succeeded / Failed / Skipped / Total] 710 / 219 / 24 / 953:  95%|█████████▌| 953/1000 [8:49:39<26:07, 33.35s/it][Succeeded / Failed / Skipped / Total] 710 / 219 / 24 / 953:  95%|█████████▌| 954/1000 [8:50:06<25:33, 33.34s/it][Succeeded / Failed / Skipped / Total] 711 / 219 / 24 / 954:  95%|█████████▌| 954/1000 [8:50:06<25:33, 33.34s/it][Succeeded / Failed / Skipped / Total] 711 / 219 / 24 / 954:  96%|█████████▌| 955/1000 [8:50:36<25:00, 33.34s/it]Remove bounds from string . --> Removes any bounding characters --> Socre: 1.0

[[[[Adv]]]]: private static String removeAnyBounding ( final char s , final char [[e]] , final String [[str]] ) { if ( [[str]] == null || [[str]] . length ( ) < 2 ) { return [[str]] ; } if ( [[str]] . startsWith ( String . valueOf ( s ) ) && [[str]] . endsWith ( String . valueOf ( [[e]] ) ) ) { return [[str]] . substring ( 1 , [[str]] . length ( ) - 1 ) ; } return [[str]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String removeAnyBounding ( final char s , final char [[nee]] , final String [[enchant]] ) { if ( [[enchant]] == null || [[enchant]] . length ( ) < 2 ) { return [[enchant]] ; } if ( [[enchant]] . startsWith ( String . valueOf ( s ) ) && [[enchant]] . endsWith ( String . valueOf ( [[nee]] ) ) ) { return [[enchant]] . substring ( 1 , [[enchant]] . length ( ) - 1 ) ; } return [[enchant]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .


--------------------------------------------- Result 949 ---------------------------------------------
Returns the path to the method . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String [[methodName]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[methodName]] ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[distances]] ( ) { if ( methref != null ) { final String [[prediction]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[prediction]] ; } return [[distances]] ; }
[[[[Nl]]]]: Returns path value .


--------------------------------------------- Result 950 ---------------------------------------------
Zipped file --> Zipped archives --> Socre: 1.0

[[[[Adv]]]]: public static File zlib ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[file]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File zlib ( final File [[archives]] ) throws IOException { if ( [[archives]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[archives]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[archives]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .


--------------------------------------------- Result 951 ---------------------------------------------
Gzip a file --> Gets gzler --> Socre: 1.0

[[[[Adv]]]]: public static File [[gzip]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; String gzipName = file . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File [[gobbler]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; String gzipName = file . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .


--------------------------------------------- Result 952 ---------------------------------------------
Ungzip a file --> [[[SKIPPED]]]

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .


--------------------------------------------- Result 953 ---------------------------------------------
List all the entries in a zip file . --> Get a list of dora files --> Socre: 1.0

[[[[Adv]]]]: public static List < String > [[listZip]] ( final File zipFile ) throws IOException { List < String > [[entries]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; [[entries]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[entries]] ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > [[dora]] ( final File zipFile ) throws IOException { List < String > [[intake]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; [[intake]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[intake]] ) ; }
[[[[Nl]]]]: Lists zip content .


--------------------------------------------- Result 954 ---------------------------------------------
Unzip a zip file into a directory --> Method unzipped files --> Socre: 1.0

[[[[Adv]]]]: public static void unzip ( final String [[zipFile]] , final String [[destDir]] , final String ... patterns ) throws IOException { unzip ( new File ( [[zipFile]] ) , new File ( [[destDir]] ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void unzip ( final String [[donato]] , final String [[aphrodisiac]] , final String ... patterns ) throws IOException { unzip ( new File ( [[donato]] ) , new File ( [[aphrodisiac]] ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .


--------------------------------------------- Result 955 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 712 / 219 / 24 / 955:  96%|█████████▌| 955/1000 [8:50:36<25:00, 33.34s/it][Succeeded / Failed / Skipped / Total] 712 / 219 / 24 / 955:  96%|█████████▌| 956/1000 [8:51:18<24:27, 33.35s/it][Succeeded / Failed / Skipped / Total] 713 / 219 / 24 / 956:  96%|█████████▌| 956/1000 [8:51:18<24:27, 33.35s/it][Succeeded / Failed / Skipped / Total] 713 / 219 / 24 / 956:  96%|█████████▌| 957/1000 [8:51:34<23:53, 33.33s/it][Succeeded / Failed / Skipped / Total] 714 / 219 / 24 / 957:  96%|█████████▌| 957/1000 [8:51:34<23:53, 33.33s/it][Succeeded / Failed / Skipped / Total] 714 / 219 / 24 / 957:  96%|█████████▌| 958/1000 [8:51:52<23:19, 33.31s/it][Succeeded / Failed / Skipped / Total] 715 / 219 / 24 / 958:  96%|█████████▌| 958/1000 [8:51:52<23:19, 33.31s/it][Succeeded / Failed / Skipped / Total] 715 / 219 / 24 / 958:  96%|█████████▌| 959/1000 [8:52:35<22:46, 33.32s/it][Succeeded / Failed / Skipped / Total] 715 / 220 / 24 / 959:  96%|█████████▌| 959/1000 [8:52:35<22:46, 33.32s/it][Succeeded / Failed / Skipped / Total] 715 / 220 / 24 / 959:  96%|█████████▌| 960/1000 [8:52:49<22:12, 33.30s/it][Succeeded / Failed / Skipped / Total] 716 / 220 / 24 / 960:  96%|█████████▌| 960/1000 [8:52:49<22:12, 33.30s/it][Succeeded / Failed / Skipped / Total] 716 / 220 / 24 / 960:  96%|█████████▌| 961/1000 [8:53:33<21:39, 33.31s/it][Succeeded / Failed / Skipped / Total] 716 / 221 / 24 / 961:  96%|█████████▌| 961/1000 [8:53:33<21:39, 33.31s/it][Succeeded / Failed / Skipped / Total] 716 / 221 / 24 / 961:  96%|█████████▌| 962/1000 [8:54:13<21:06, 33.32s/it]Adds a file to a ZIP output stream . --> Echo a file --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final File [[file]] , String path , final String comment , final boolean recursive ) throws IOException { if ( ! [[file]] . exists ( ) ) { throw new FileNotFoundException ( [[file]] . toString ( ) ) ; } if ( path == null ) { path = [[file]] . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = [[file]] . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[cheng]] ( final ZipOutputStream zos , final File [[filings]] , String path , final String comment , final boolean recursive ) throws IOException { if ( ! [[filings]] . exists ( ) ) { throw new FileNotFoundException ( [[filings]] . toString ( ) ) ; } if ( path == null ) { path = [[filings]] . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = [[filings]] . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .


--------------------------------------------- Result 956 ---------------------------------------------
Adds content to a ZIP output stream . --> Convenience method to handle problematic entries --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final byte [ ] [[content]] , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( [[content]] ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void [[problematic]] ( final ZipOutputStream zos , final byte [ ] [[enchanted]] , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( [[enchanted]] ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .


--------------------------------------------- Result 957 ---------------------------------------------
Gets a field descriptor by name . --> generate a FieldDescriptor --> Socre: 1.0

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String name , final boolean declared ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( name ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( declared ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[não]] ( final String name , final boolean declared ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( name ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( declared ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .


--------------------------------------------- Result 958 ---------------------------------------------
Returns the PropertyDescriptor for the given name . --> Return dakota --> Socre: 1.0

[[[[Adv]]]]: public PropertyDescriptor [[getPropertyDescriptor]] ( final String name , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor [[dakota]] ( final String name , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .


--------------------------------------------- Result 959 ---------------------------------------------
Sets the bundle name for this request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest [[request]] , final String [[bundleName]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[bundleName]] ) ; } [[request]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[bundleName]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[summits]] ( final ServletRequest [[demands]] , final String [[bookbinder]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[bookbinder]] ) ; } [[demands]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[bookbinder]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .


--------------------------------------------- Result 960 ---------------------------------------------
Sets the session locale . --> Determine the oofte --> Socre: 1.0

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession session , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale locale = Locale . forLanguageTag ( localeCode ) ; session . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[köfte]] ( final HttpSession session , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale locale = Locale . forLanguageTag ( localeCode ) ; session . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .


--------------------------------------------- Result 961 ---------------------------------------------
Returns the session s locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession [[session]] ) { Locale [[locale]] = ( Locale ) [[session]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[locale]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[locale]] ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[howard]] ( final HttpSession [[auditions]] ) { Locale [[accommodations]] = ( Locale ) [[auditions]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[accommodations]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[accommodations]] ; }
[[[[Nl]]]]: Returns current locale from session . s


--------------------------------------------- Result 962 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 717 / 221 / 24 / 962:  96%|█████████▌| 962/1000 [8:54:13<21:06, 33.32s/it][Succeeded / Failed / Skipped / Total] 717 / 221 / 24 / 962:  96%|█████████▋| 963/1000 [8:54:24<20:31, 33.30s/it][Succeeded / Failed / Skipped / Total] 718 / 221 / 24 / 963:  96%|█████████▋| 963/1000 [8:54:24<20:31, 33.30s/it][Succeeded / Failed / Skipped / Total] 718 / 221 / 24 / 963:  96%|█████████▋| 964/1000 [8:55:09<19:59, 33.31s/it][Succeeded / Failed / Skipped / Total] 718 / 222 / 24 / 964:  96%|█████████▋| 964/1000 [8:55:09<19:59, 33.31s/it][Succeeded / Failed / Skipped / Total] 718 / 222 / 24 / 964:  96%|█████████▋| 965/1000 [8:56:30<19:27, 33.36s/it][Succeeded / Failed / Skipped / Total] 719 / 222 / 24 / 965:  96%|█████████▋| 965/1000 [8:56:30<19:27, 33.36s/it][Succeeded / Failed / Skipped / Total] 719 / 222 / 24 / 965:  97%|█████████▋| 966/1000 [8:57:09<18:54, 33.36s/it][Succeeded / Failed / Skipped / Total] 720 / 222 / 24 / 966:  97%|█████████▋| 966/1000 [8:57:09<18:54, 33.36s/it][Succeeded / Failed / Skipped / Total] 720 / 222 / 24 / 966:  97%|█████████▋| 967/1000 [8:57:40<18:20, 33.36s/it][Succeeded / Failed / Skipped / Total] 721 / 222 / 24 / 967:  97%|█████████▋| 967/1000 [8:57:40<18:20, 33.36s/it][Succeeded / Failed / Skipped / Total] 721 / 222 / 24 / 967:  97%|█████████▋| 968/1000 [8:58:41<17:48, 33.39s/it][Succeeded / Failed / Skipped / Total] 722 / 222 / 24 / 968:  97%|█████████▋| 968/1000 [8:58:41<17:48, 33.39s/it][Succeeded / Failed / Skipped / Total] 722 / 222 / 24 / 968:  97%|█████████▋| 969/1000 [9:00:19<17:17, 33.46s/it]Filter parameters for beanName . --> ban all params --> Socre: 1.0

[[[[Adv]]]]: public String [ ] [[filterParametersForBeanName]] ( String beanName , final boolean [[resolveReferenceParams]] ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! [[resolveReferenceParams]] ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] [[banu]] ( String beanName , final boolean [[barad]] ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! [[barad]] ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .


--------------------------------------------- Result 963 ---------------------------------------------
Adds profile . --> Configure a profile --> Socre: 1.0

[[[[Adv]]]]: public PropsEntries profile ( final String ... [[profiles]] ) { if ( [[profiles]] == null ) { return this ; } for ( String profile : [[profiles]] ) { addProfiles ( profile ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries profile ( final String ... [[schematic]] ) { if ( [[schematic]] == null ) { return this ; } for ( String profile : [[schematic]] ) { addProfiles ( profile ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .


--------------------------------------------- Result 964 ---------------------------------------------
Read a long from the buffer at the given offset . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] buf , final int [[offset]] ) { return ( ( long ) buf [ [[offset]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[events]] ( final byte [ ] buf , final int [[abort]] ) { return ( ( long ) buf [ [[abort]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .


--------------------------------------------- Result 965 ---------------------------------------------
Reads the contents of a stream into a byte array . --> Write footer --> Socre: 1.0

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream [[inputStream]] , final boolean [[close]] ) throws IOException { if ( [[inputStream]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = [[inputStream]] . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( [[close]] ) { [[inputStream]] . [[close]] ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[footie]] ( final InputStream [[teletype]] , final boolean [[closely]] ) throws IOException { if ( [[teletype]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = [[teletype]] . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( [[closely]] ) { [[teletype]] . [[closely]] ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .


--------------------------------------------- Result 966 ---------------------------------------------
Reads a label . --> private constructor --> Socre: 1.0

[[[[Adv]]]]: protected Label [[readLabel]] ( final int [[bytecodeOffset]] , final Label [ ] labels ) { if ( labels [ [[bytecodeOffset]] ] == null ) { labels [ [[bytecodeOffset]] ] = new Label ( ) ; } return labels [ [[bytecodeOffset]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label [[privatizing]] ( final int [[bucharest]] , final Label [ ] labels ) { if ( labels [ [[bucharest]] ] == null ) { labels [ [[bucharest]] ] = new Label ( ) ; } return labels [ [[bucharest]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .


--------------------------------------------- Result 967 ---------------------------------------------
Get the bytecode offset for a type annotation . --> farkas analysis --> Socre: 1.0

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] [[typeAnnotationOffsets]] , final int typeAnnotationIndex ) { if ( [[typeAnnotationOffsets]] == null || typeAnnotationIndex >= [[typeAnnotationOffsets]] . length || readByte ( [[typeAnnotationOffsets]] [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( [[typeAnnotationOffsets]] [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[farkas]] ( final int [ ] [[paralysed]] , final int typeAnnotationIndex ) { if ( [[paralysed]] == null || typeAnnotationIndex >= [[paralysed]] . length || readByte ( [[paralysed]] [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( [[paralysed]] [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .


--------------------------------------------- Result 968 ---------------------------------------------
Read element values . --> d743 - 15 --> Socre: 1.0

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor annotationVisitor , final int [[annotationOffset]] , final boolean named , final char [ ] charBuffer ) { int [[currentOffset]] = [[annotationOffset]] ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[dagger]] ( final AnnotationVisitor annotationVisitor , final int [[escrow]] , final boolean named , final char [ ] charBuffer ) { int [[bean]] = [[escrow]] ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .


--------------------------------------------- Result 969 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 723 / 222 / 24 / 969:  97%|█████████▋| 969/1000 [9:00:19<17:17, 33.46s/it][Succeeded / Failed / Skipped / Total] 723 / 222 / 24 / 969:  97%|█████████▋| 970/1000 [9:01:12<16:44, 33.48s/it][Succeeded / Failed / Skipped / Total] 724 / 222 / 24 / 970:  97%|█████████▋| 970/1000 [9:01:12<16:44, 33.48s/it][Succeeded / Failed / Skipped / Total] 724 / 222 / 24 / 970:  97%|█████████▋| 971/1000 [9:01:53<16:11, 33.48s/it][Succeeded / Failed / Skipped / Total] 725 / 222 / 24 / 971:  97%|█████████▋| 971/1000 [9:01:53<16:11, 33.48s/it][Succeeded / Failed / Skipped / Total] 725 / 222 / 24 / 971:  97%|█████████▋| 972/1000 [9:02:11<15:37, 33.47s/it][Succeeded / Failed / Skipped / Total] 726 / 222 / 24 / 972:  97%|█████████▋| 972/1000 [9:02:11<15:37, 33.47s/it][Succeeded / Failed / Skipped / Total] 726 / 222 / 24 / 972:  97%|█████████▋| 973/1000 [9:02:41<15:03, 33.46s/it][Succeeded / Failed / Skipped / Total] 727 / 222 / 24 / 973:  97%|█████████▋| 973/1000 [9:02:41<15:03, 33.46s/it][Succeeded / Failed / Skipped / Total] 727 / 222 / 24 / 973:  97%|█████████▋| 974/1000 [9:03:10<14:29, 33.46s/it][Succeeded / Failed / Skipped / Total] 728 / 222 / 24 / 974:  97%|█████████▋| 974/1000 [9:03:10<14:29, 33.46s/it][Succeeded / Failed / Skipped / Total] 728 / 222 / 24 / 974:  98%|█████████▊| 975/1000 [9:04:09<13:57, 33.49s/it]Read verification type information . --> Blocking instruction --> Socre: 1.0

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int verificationTypeInfoOffset , final Object [ ] [[frame]] , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int [[tag]] = b [ currentOffset ++ ] & 0xFF ; switch ( [[tag]] ) { case Frame . ITEM_TOP : [[frame]] [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : [[frame]] [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : [[frame]] [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : [[frame]] [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : [[frame]] [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : [[frame]] [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : [[frame]] [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : [[frame]] [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : [[frame]] [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[blitzer]] ( final int verificationTypeInfoOffset , final Object [ ] [[articulation]] , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int [[markers]] = b [ currentOffset ++ ] & 0xFF ; switch ( [[markers]] ) { case Frame . ITEM_TOP : [[articulation]] [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : [[articulation]] [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : [[articulation]] [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : [[articulation]] [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : [[articulation]] [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : [[articulation]] [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : [[articulation]] [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : [[articulation]] [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : [[articulation]] [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .


--------------------------------------------- Result 970 ---------------------------------------------
Read bootstrap methods attribute . --> hard top topology --> Socre: 1.0

[[[[Adv]]]]: private int [ ] [[readBootstrapMethodsAttribute]] ( final int [[maxStringLength]] ) { char [ ] charBuffer = new char [ [[maxStringLength]] ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] [[hardtop]] ( final int [[frederick]] ) { char [ ] charBuffer = new char [ [[frederick]] ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .


--------------------------------------------- Result 971 ---------------------------------------------
Return all constructors of the class . --> creates default ctor descriptors --> Socre: 1.0

[[[[Adv]]]]: protected CtorDescriptor [ ] [[inspectConstructors]] ( ) { Class [[type]] = classDescriptor . getType ( ) ; Constructor [ ] ctors = [[type]] . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor [[ctorDescriptor]] = createCtorDescriptor ( ctor ) ; allCtors [ i ] = [[ctorDescriptor]] ; if ( [[ctorDescriptor]] . isDefault ( ) ) { defaultCtor = [[ctorDescriptor]] ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] [[novices]] ( ) { Class [[model]] = classDescriptor . getType ( ) ; Constructor [ ] ctors = [[model]] . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor [[cargill]] = createCtorDescriptor ( ctor ) ; allCtors [ i ] = [[cargill]] ; if ( [[cargill]] . isDefault ( ) ) { defaultCtor = [[cargill]] ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .


--------------------------------------------- Result 972 ---------------------------------------------
Get the CtorDescriptor for the given arguments . --> Get CtorDescriptor --> Socre: 1.0

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... [[args]] ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != [[args]] . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != [[args]] [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... [[courageously]] ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != [[courageously]] . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != [[courageously]] [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .


--------------------------------------------- Result 973 ---------------------------------------------
Gets the request map . --> This method is used to derive the waterel tag --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { return ( Map < String , TransientBeanData > ) [[servletRequest]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[ismael]] ( final HttpServletRequest [[levelheaded]] ) { return ( Map < String , TransientBeanData > ) [[levelheaded]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .


--------------------------------------------- Result 974 ---------------------------------------------
Creates the request map . --> This method is used to add a crretier --> Socre: 1.0

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[createRequestMap]] ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > [[map]] = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , [[map]] ) ; return [[map]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[brazier]] ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > [[libretto]] = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , [[libretto]] ) ; return [[libretto]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .


--------------------------------------------- Result 975 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 728 / 223 / 24 / 975:  98%|█████████▊| 975/1000 [9:04:09<13:57, 33.49s/it][Succeeded / Failed / Skipped / Total] 728 / 223 / 24 / 975:  98%|█████████▊| 976/1000 [9:04:26<13:23, 33.47s/it][Succeeded / Failed / Skipped / Total] 729 / 223 / 24 / 976:  98%|█████████▊| 976/1000 [9:04:26<13:23, 33.47s/it][Succeeded / Failed / Skipped / Total] 729 / 223 / 24 / 976:  98%|█████████▊| 977/1000 [9:04:41<12:49, 33.45s/it][Succeeded / Failed / Skipped / Total] 730 / 223 / 24 / 977:  98%|█████████▊| 977/1000 [9:04:41<12:49, 33.45s/it][Succeeded / Failed / Skipped / Total] 730 / 223 / 24 / 977:  98%|█████████▊| 978/1000 [9:04:55<12:15, 33.43s/it][Succeeded / Failed / Skipped / Total] 731 / 223 / 24 / 978:  98%|█████████▊| 978/1000 [9:04:55<12:15, 33.43s/it][Succeeded / Failed / Skipped / Total] 731 / 223 / 24 / 978:  98%|█████████▊| 979/1000 [9:05:19<11:41, 33.42s/it][Succeeded / Failed / Skipped / Total] 732 / 223 / 24 / 979:  98%|█████████▊| 979/1000 [9:05:19<11:41, 33.42s/it][Succeeded / Failed / Skipped / Total] 732 / 223 / 24 / 979:  98%|█████████▊| 980/1000 [9:06:05<11:08, 33.43s/it][Succeeded / Failed / Skipped / Total] 732 / 224 / 24 / 980:  98%|█████████▊| 980/1000 [9:06:05<11:08, 33.43s/it][Succeeded / Failed / Skipped / Total] 732 / 224 / 24 / 980:  98%|█████████▊| 981/1000 [9:06:31<10:35, 33.43s/it][Succeeded / Failed / Skipped / Total] 733 / 224 / 24 / 981:  98%|█████████▊| 981/1000 [9:06:31<10:35, 33.43s/it][Succeeded / Failed / Skipped / Total] 733 / 224 / 24 / 981:  98%|█████████▊| 982/1000 [9:06:55<10:01, 33.42s/it][Succeeded / Failed / Skipped / Total] 733 / 225 / 24 / 982:  98%|█████████▊| 982/1000 [9:06:55<10:01, 33.42s/it][Succeeded / Failed / Skipped / Total] 733 / 225 / 24 / 982:  98%|█████████▊| 983/1000 [9:07:35<09:28, 33.42s/it][Succeeded / Failed / Skipped / Total] 733 / 226 / 24 / 983:  98%|█████████▊| 983/1000 [9:07:35<09:28, 33.42s/it][Succeeded / Failed / Skipped / Total] 733 / 226 / 24 / 983:  98%|█████████▊| 984/1000 [9:08:22<08:54, 33.44s/it]Convert array to array . --> [[[FAILED]]]

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object [[value]] ) { final Class [[valueComponentType]] = [[value]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[result]] ; if ( [[valueComponentType]] . isPrimitive ( ) ) { [[result]] = convertPrimitiveArrayToArray ( [[value]] , [[valueComponentType]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[excluding]] ( final Object [[significance]] ) { final Class [[cashews]] = [[significance]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[fruits]] ; if ( [[cashews]] . isPrimitive ( ) ) { [[fruits]] = convertPrimitiveArrayToArray ( [[significance]] , [[cashews]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .


--------------------------------------------- Result 976 ---------------------------------------------
Initializes the filter . --> Derives the alarm --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[arming]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .


--------------------------------------------- Result 977 ---------------------------------------------
Registers a file consumer . --> Adds a listener to the FindFile . --> Socre: 1.0

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[honky]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[honky]] ) ; } else { consumers . add ( [[honky]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer


--------------------------------------------- Result 978 ---------------------------------------------
Add search path . --> Add File to searchPath --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI searchPath ) { File file ; try { file = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[fas]] ( final URI searchPath ) { File file ; try { file = new File ( [[fas]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[fas]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .


--------------------------------------------- Result 979 ---------------------------------------------
Add the search path . --> Add aganarchist file --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL [[searchPath]] ) { File file = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[aganist]] ( final URL [[aleksandr]] ) { File file = FileUtil . toContainerFile ( [[aganist]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[aganist]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .


--------------------------------------------- Result 980 ---------------------------------------------
Includes given patterns . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[include]] ( final String ... [[patterns]] ) { for ( String [[pattern]] : [[patterns]] ) { rules . include ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile [[which]] ( final String ... [[customary]] ) { for ( String [[paradigm]] : [[customary]] ) { rules . include ( [[paradigm]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .


--------------------------------------------- Result 981 ---------------------------------------------
Exclude the given patterns . --> Excludes the found files --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[exclude]] ( final String ... [[patterns]] ) { for ( String pattern : [[patterns]] ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile [[denied]] ( final String ... [[clothes]] ) { for ( String pattern : [[clothes]] ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .


--------------------------------------------- Result 982 ---------------------------------------------
Adds a file to the system . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addPath]] ( final File [[path]] ) { if ( ! [[path]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[path]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void [[jiji]] ( final File [[roads]] ) { if ( ! [[roads]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[roads]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .


--------------------------------------------- Result 983 ---------------------------------------------
Returns all files . --> [[[FAILED]]]

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > [[allFiles]] = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { [[allFiles]] . add ( file ) ; } return [[allFiles]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[popcorn]] ( ) { List < File > [[contours]] = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { [[contours]] . add ( file ) ; } return [[contours]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .


--------------------------------------------- Result 984 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 734 / 226 / 24 / 984:  98%|█████████▊| 984/1000 [9:08:22<08:54, 33.44s/it][Succeeded / Failed / Skipped / Total] 734 / 226 / 24 / 984:  98%|█████████▊| 985/1000 [9:08:37<08:21, 33.42s/it][Succeeded / Failed / Skipped / Total] 735 / 226 / 24 / 985:  98%|█████████▊| 985/1000 [9:08:37<08:21, 33.42s/it][Succeeded / Failed / Skipped / Total] 735 / 226 / 24 / 985:  99%|█████████▊| 986/1000 [9:09:05<07:47, 33.41s/it][Succeeded / Failed / Skipped / Total] 736 / 226 / 24 / 986:  99%|█████████▊| 986/1000 [9:09:05<07:47, 33.41s/it][Succeeded / Failed / Skipped / Total] 736 / 226 / 24 / 986:  99%|█████████▊| 987/1000 [9:09:31<07:14, 33.41s/it][Succeeded / Failed / Skipped / Total] 737 / 226 / 24 / 987:  99%|█████████▊| 987/1000 [9:09:31<07:14, 33.41s/it][Succeeded / Failed / Skipped / Total] 737 / 226 / 24 / 987:  99%|█████████▉| 988/1000 [9:09:46<06:40, 33.39s/it][Succeeded / Failed / Skipped / Total] 738 / 226 / 24 / 988:  99%|█████████▉| 988/1000 [9:09:46<06:40, 33.39s/it][Succeeded / Failed / Skipped / Total] 738 / 226 / 24 / 988:  99%|█████████▉| 989/1000 [9:10:01<06:07, 33.37s/it][Succeeded / Failed / Skipped / Total] 739 / 226 / 24 / 989:  99%|█████████▉| 989/1000 [9:10:01<06:07, 33.37s/it][Succeeded / Failed / Skipped / Total] 739 / 226 / 24 / 989:  99%|█████████▉| 990/1000 [9:10:27<05:33, 33.36s/it]Initialize the list . --> initialize todo --> Socre: 1.0

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] [[files]] = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > [[iterator]] = pathList . iterator ( ) ; while ( [[iterator]] . hasNext ( ) ) { File file = [[iterator]] . next ( ) ; if ( file . isFile ( ) ) { [[files]] [ index ++ ] = file . getAbsolutePath ( ) ; [[iterator]] . remove ( ) ; } } if ( index != 0 ) { FilesIterator [[filesIterator]] = new FilesIterator ( [[files]] ) ; todoFiles . add ( [[filesIterator]] ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] [[archive]] = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > [[caterpillar]] = pathList . iterator ( ) ; while ( [[caterpillar]] . hasNext ( ) ) { File file = [[caterpillar]] . next ( ) ; if ( file . isFile ( ) ) { [[archive]] [ index ++ ] = file . getAbsolutePath ( ) ; [[caterpillar]] . remove ( ) ; } } if ( index != 0 ) { FilesIterator [[egoistic]] = new FilesIterator ( [[archive]] ) ; todoFiles . add ( [[egoistic]] ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .


--------------------------------------------- Result 985 ---------------------------------------------
Returns an iterator over all files in the directory . --> Methode permutation of all files --> Socre: 1.0

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[transmuted]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .


--------------------------------------------- Result 986 ---------------------------------------------
Returns the wiring mode for the specified type . --> Baklava mode --> Socre: 1.0

[[[[Adv]]]]: public WiringMode [[resolveBeanWiringMode]] ( final Class [[type]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[type]] ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode [[baklava]] ( final Class [[guy]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[guy]] ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .


--------------------------------------------- Result 987 ---------------------------------------------
Resolves the bean name . --> resolve the denomination --> Socre: 1.0

[[[[Adv]]]]: public String resolveBeanName ( final Class type , final boolean useLongTypeName ) { PetiteBean [[petiteBean]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String [[name]] = null ; if ( [[petiteBean]] != null ) { [[name]] = [[petiteBean]] . value ( ) . trim ( ) ; } if ( ( [[name]] == null ) || ( [[name]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[name]] = type . getName ( ) ; } else { [[name]] = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return [[name]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String resolveBeanName ( final Class type , final boolean useLongTypeName ) { PetiteBean [[swastika]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String [[denomination]] = null ; if ( [[swastika]] != null ) { [[denomination]] = [[swastika]] . value ( ) . trim ( ) ; } if ( ( [[denomination]] == null ) || ( [[denomination]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[denomination]] = type . getName ( ) ; } else { [[denomination]] = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return [[denomination]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .


--------------------------------------------- Result 988 ---------------------------------------------
Returns the output writer . --> Boggling --> Socre: 1.0

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[boggling]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .


--------------------------------------------- Result 989 ---------------------------------------------
Returns the output stream . --> Default lightbulb --> Socre: 1.0

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[lightbulb]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .


--------------------------------------------- Result 990 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 740 / 226 / 24 / 990:  99%|█████████▉| 990/1000 [9:10:27<05:33, 33.36s/it][Succeeded / Failed / Skipped / Total] 740 / 226 / 24 / 990:  99%|█████████▉| 991/1000 [9:10:53<05:00, 33.35s/it][Succeeded / Failed / Skipped / Total] 741 / 226 / 24 / 991:  99%|█████████▉| 991/1000 [9:10:53<05:00, 33.35s/it][Succeeded / Failed / Skipped / Total] 741 / 226 / 24 / 991:  99%|█████████▉| 992/1000 [9:12:00<04:27, 33.39s/it][Succeeded / Failed / Skipped / Total] 741 / 227 / 24 / 992:  99%|█████████▉| 992/1000 [9:12:00<04:27, 33.39s/it][Succeeded / Failed / Skipped / Total] 741 / 227 / 24 / 992:  99%|█████████▉| 993/1000 [9:13:09<03:53, 33.42s/it][Succeeded / Failed / Skipped / Total] 742 / 227 / 24 / 993:  99%|█████████▉| 993/1000 [9:13:09<03:53, 33.42s/it][Succeeded / Failed / Skipped / Total] 742 / 227 / 24 / 993:  99%|█████████▉| 994/1000 [9:13:36<03:20, 33.42s/it][Succeeded / Failed / Skipped / Total] 743 / 227 / 24 / 994:  99%|█████████▉| 994/1000 [9:13:36<03:20, 33.42s/it][Succeeded / Failed / Skipped / Total] 743 / 227 / 24 / 994: 100%|█████████▉| 995/1000 [9:13:51<02:46, 33.40s/it][Succeeded / Failed / Skipped / Total] 743 / 228 / 24 / 995: 100%|█████████▉| 995/1000 [9:13:51<02:46, 33.40s/it][Succeeded / Failed / Skipped / Total] 743 / 228 / 24 / 995: 100%|█████████▉| 996/1000 [9:14:05<02:13, 33.38s/it][Succeeded / Failed / Skipped / Total] 744 / 228 / 24 / 996: 100%|█████████▉| 996/1000 [9:14:05<02:13, 33.38s/it][Succeeded / Failed / Skipped / Total] 744 / 228 / 24 / 996: 100%|█████████▉| 997/1000 [9:14:18<01:40, 33.36s/it]Returns the class name for the primitive . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[stringBuilder]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { [[stringBuilder]] . append ( "[]" ) ; } return [[stringBuilder]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[entei]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[aurelio]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { [[aurelio]] . append ( "[]" ) ; } return [[aurelio]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .


--------------------------------------------- Result 991 ---------------------------------------------
Gets the descriptor of a constructor . --> getConstructor method --> Socre: 1.0

[[[[Adv]]]]: public static String getConstructorDescriptor ( final Constructor < ? > [[constructor]] ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] parameters = [[constructor]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } return [[stringBuilder]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String getConstructorDescriptor ( final Constructor < ? > [[bringer]] ) { StringBuilder [[ght]] = new StringBuilder ( ) ; [[ght]] . append ( ' ' ) ; Class < ? > [ ] parameters = [[bringer]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[ght]] ) ; } return [[ght]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .


--------------------------------------------- Result 992 ---------------------------------------------
Gets the method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String getMethodDescriptor ( final Type returnType , final Type ... argumentTypes ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; returnType . appendDescriptor ( [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String getMethodDescriptor ( final Type returnType , final Type ... argumentTypes ) { StringBuilder [[boathouse]] = new StringBuilder ( ) ; [[boathouse]] . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( [[boathouse]] ) ; } [[boathouse]] . append ( ' ' ) ; returnType . appendDescriptor ( [[boathouse]] ) ; return [[boathouse]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .


--------------------------------------------- Result 993 ---------------------------------------------
Gets the method descriptor . --> Create a list of skills --> Socre: 1.0

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method [[method]] ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] [[parameters]] = [[method]] . getParameterTypes ( ) ; for ( Class < ? > parameter : [[parameters]] ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; appendDescriptor ( [[method]] . getReturnType ( ) , [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[apu]] ( final Method [[habits]] ) { StringBuilder [[dispensing]] = new StringBuilder ( ) ; [[dispensing]] . append ( ' ' ) ; Class < ? > [ ] [[eval]] = [[habits]] . getParameterTypes ( ) ; for ( Class < ? > parameter : [[eval]] ) { appendDescriptor ( parameter , [[dispensing]] ) ; } [[dispensing]] . append ( ' ' ) ; appendDescriptor ( [[habits]] . getReturnType ( ) , [[dispensing]] ) ; return [[dispensing]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .


--------------------------------------------- Result 994 ---------------------------------------------
Append the descriptor to the string builder . -->  regulation --> Socre: 1.0

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder [[stringBuilder]] ) { if ( sort == OBJECT ) { [[stringBuilder]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[stringBuilder]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[stringBuilder]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[regulation]] ( final StringBuilder [[hardwick]] ) { if ( sort == OBJECT ) { [[hardwick]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[hardwick]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[hardwick]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .


--------------------------------------------- Result 995 ---------------------------------------------
Gets the size of the query . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[disconnect]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .


--------------------------------------------- Result 996 ---------------------------------------------
Get the number of arguments and return sizes for the method . --> Kerrable error --> Socre: 1.0

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String methodDescriptor ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[kerr]] ( final String methodDescriptor ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .


[Succeeded / Failed / Skipped / Total] 745 / 228 / 24 / 997: 100%|█████████▉| 997/1000 [9:14:18<01:40, 33.36s/it][Succeeded / Failed / Skipped / Total] 745 / 228 / 24 / 997: 100%|█████████▉| 998/1000 [9:14:32<01:06, 33.34s/it][Succeeded / Failed / Skipped / Total] 746 / 228 / 24 / 998: 100%|█████████▉| 998/1000 [9:14:32<01:06, 33.34s/it][Succeeded / Failed / Skipped / Total] 746 / 228 / 24 / 998: 100%|█████████▉| 999/1000 [9:15:32<00:33, 33.37s/it][Succeeded / Failed / Skipped / Total] 746 / 229 / 24 / 999: 100%|█████████▉| 999/1000 [9:15:32<00:33, 33.37s/it][Succeeded / Failed / Skipped / Total] 746 / 229 / 24 / 999: 100%|██████████| 1000/1000 [9:16:24<00:00, 33.38s/it][Succeeded / Failed / Skipped / Total] 746 / 230 / 24 / 1000: 100%|██████████| 1000/1000 [9:16:24<00:00, 33.38s/it][Succeeded / Failed / Skipped / Total] 746 / 230 / 24 / 1000: 100%|██████████| 1000/1000 [9:16:24<00:00, 33.38s/it]--------------------------------------------- Result 997 ---------------------------------------------
Mark this transaction as a rollback only . --> Mark a rollback cause --> Socre: 1.0

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[wymiar]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .


--------------------------------------------- Result 998 ---------------------------------------------
Commit the given transaction --> helper method to perform the hatpin --> Socre: 1.0

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = False ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = False ; forcedRollback = True ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[hatpin]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = False ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = False ; forcedRollback = True ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .


--------------------------------------------- Result 999 ---------------------------------------------
Rollback all resources . --> [[[FAILED]]]

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > [[it]] = resources . iterator ( ) ; while ( [[it]] . hasNext ( ) ) { JtxResource resource = [[it]] . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { [[it]] . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > [[du]] = resources . iterator ( ) ; while ( [[du]] . hasNext ( ) ) { JtxResource resource = [[du]] . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { [[du]] . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .


--------------------------------------------- Result 1000 ---------------------------------------------
Request a resource --> [[[FAILED]]]

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .



+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 746    |
| Number of failed attacks:     | 230    |
| Number of skipped attacks:    | 24     |
| Original accuracy:            | 97.6%  |
| Accuracy under attack:        | 23.0%  |
| Attack success rate:          | 76.43% |
| Average perturbed word %:     | 53.89% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 123.23 |
| Original BLEU-4:              | 18.59  |
| Perturbed BLEU-4:             | 1.44   |
+-------------------------------+--------+


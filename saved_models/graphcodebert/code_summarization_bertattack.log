[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
Some weights of the model checkpoint at microsoft/graphcodebert-base were not used when initializing RobertaModel: ['lm_head.dense.weight', 'lm_head.layer_norm.bias', 'lm_head.decoder.bias', 'lm_head.dense.bias', 'lm_head.layer_norm.weight', 'lm_head.bias', 'lm_head.decoder.weight']
- This IS expected if you are initializing RobertaModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing RobertaModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
Some weights of RobertaModel were not initialized from the model checkpoint at microsoft/graphcodebert-base and are newly initialized: ['roberta.pooler.dense.weight', 'roberta.pooler.dense.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertForMaskedLM: ['cls.seq_relationship.weight', 'cls.seq_relationship.bias']
- This IS expected if you are initializing BertForMaskedLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertForMaskedLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
[proxychains] Strict chain  ...  127.0.0.1:1089  ...  127.0.0.1:8889  ...  huggingface.co:443  ...  OK
textattack: Running 4 worker(s) on 4 GPU(s).
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
[proxychains] DLL init: proxychains-ng 4.14-git-42-g931e0df
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s]  0%|          | 1/1000 [00:03<59:10,  3.55s/it][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 1/1000 [00:03<59:12,  3.56s/it][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 2/1000 [00:12<1:43:11,  6.20s/it][Succeeded / Failed / Skipped / Total] 1 / 1 / 0 / 2:   0%|          | 2/1000 [00:12<1:43:15,  6.21s/it][Succeeded / Failed / Skipped / Total] 1 / 1 / 0 / 2:   0%|          | 3/1000 [00:20<1:54:47,  6.91s/it][Succeeded / Failed / Skipped / Total] 2 / 1 / 0 / 3:   0%|          | 3/1000 [00:20<1:54:47,  6.91s/it][Succeeded / Failed / Skipped / Total] 2 / 1 / 0 / 3:   0%|          | 4/1000 [00:28<1:56:59,  7.05s/it][Succeeded / Failed / Skipped / Total] 2 / 2 / 0 / 4:   0%|          | 4/1000 [00:28<1:56:59,  7.05s/it][Succeeded / Failed / Skipped / Total] 2 / 2 / 0 / 4:   0%|          | 5/1000 [00:41<2:18:19,  8.34s/it][Succeeded / Failed / Skipped / Total] 3 / 2 / 0 / 5:   0%|          | 5/1000 [00:41<2:18:19,  8.34s/it][Succeeded / Failed / Skipped / Total] 3 / 2 / 0 / 5:   1%|          | 6/1000 [00:46<2:08:28,  7.76s/it]--------------------------------------------- Result 1 ---------------------------------------------
Emit the given value to the downstream . --> Speedwatchartortartort --> Socre: 1.0

[[[[Adv]]]]: protected final void [[fastPathOrderedEmit]] ( U value , boolean delayError , Disposable [[disposable]] ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , delayError , [[disposable]] , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void [[speedwatchartortcerture]] ( U value , boolean delayError , Disposable [[defessave]] ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , delayError , [[defessave]] , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 2 ---------------------------------------------
Wraps an Observable . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > [[source]] ) { ObjectHelper . requireNonNull ( [[source]] , "source is null" ) ; if ( [[source]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[source]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[source]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[include]] ( ObservableSource < T > [[be]] ) { ObjectHelper . requireNonNull ( [[be]] , "source is null" ) ; if ( [[be]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[be]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[be]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 3 ---------------------------------------------
Create a new instance with a capacityHint . --> create a new instance --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int [[capacityHint]] ) { return new UnicastProcessor < T > ( [[capacityHint]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int [[defhurw]] ) { return new UnicastProcessor < T > ( [[defhurw]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 4 ---------------------------------------------
Returns an Observable with the given sort function . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[calculate]] ( Comparator < ? super T > [[heapponenge]] ) { ObjectHelper . requireNonNull ( [[heapponenge]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[heapponenge]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 5 ---------------------------------------------
Observes the observable using the given scheduler . --> Observable methods --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > [[co]] , final Scheduler [[scheduler]] ) { final Observable < T > observable = [[co]] . observeOn ( [[scheduler]] ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( [[co]] , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > [[a]] , final Scheduler [[cor]] ) { final Observable < T > observable = [[a]] . observeOn ( [[cor]] ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( [[a]] , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 6 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 4 / 2 / 0 / 6:   1%|          | 6/1000 [00:46<2:08:28,  7.76s/it][Succeeded / Failed / Skipped / Total] 4 / 2 / 0 / 6:   1%|          | 7/1000 [01:04<2:32:42,  9.23s/it][Succeeded / Failed / Skipped / Total] 5 / 2 / 0 / 7:   1%|          | 7/1000 [01:04<2:32:42,  9.23s/it][Succeeded / Failed / Skipped / Total] 5 / 2 / 0 / 7:   1%|          | 8/1000 [01:06<2:18:06,  8.35s/it][Succeeded / Failed / Skipped / Total] 6 / 2 / 0 / 8:   1%|          | 8/1000 [01:06<2:18:06,  8.35s/it][Succeeded / Failed / Skipped / Total] 6 / 2 / 0 / 8:   1%|          | 9/1000 [01:10<2:09:40,  7.85s/it][Succeeded / Failed / Skipped / Total] 6 / 3 / 0 / 9:   1%|          | 9/1000 [01:10<2:09:41,  7.85s/it][Succeeded / Failed / Skipped / Total] 6 / 3 / 0 / 9:   1%|          | 10/1000 [01:12<2:00:25,  7.30s/it][Succeeded / Failed / Skipped / Total] 7 / 3 / 0 / 10:   1%|          | 10/1000 [01:12<2:00:25,  7.30s/it][Succeeded / Failed / Skipped / Total] 7 / 3 / 0 / 10:   1%|          | 11/1000 [01:25<2:08:34,  7.80s/it]Tries to apply scalar XMap as a scalar XMap . --> docneqne --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[docscogqneesabrise]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 7 ---------------------------------------------
Creates a Maybe from a CompletableSource . --> Localwarpal type from Completable --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[localwarpaltype]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 8 ---------------------------------------------
Gets a stream of values from a scalar value using the supplied function . --> Asper function for subclasses --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Flowable < U > [[scalarXMap]] ( final T [[value]] , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > [[aspervamapy]] ( final T [[match]] , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[match]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 9 ---------------------------------------------
Creates a new executor with given capacity . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint , Runnable [[onCancelled]] ) { ObjectHelper . requireNonNull ( [[onCancelled]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[onCancelled]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint , Runnable [[hardchalcf]] ) { ObjectHelper . requireNonNull ( [[hardchalcf]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[hardchalcf]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 10 ---------------------------------------------
Reset this scheduler . --> For testing purposes --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[setting]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
[Succeeded / Failed / Skipped / Total] 7 / 4 / 0 / 11:   1%|          | 11/1000 [01:25<2:08:34,  7.80s/it][Succeeded / Failed / Skipped / Total] 7 / 4 / 0 / 11:   1%|          | 12/1000 [01:28<2:01:10,  7.36s/it][Succeeded / Failed / Skipped / Total] 8 / 4 / 0 / 12:   1%|          | 12/1000 [01:28<2:01:10,  7.36s/it][Succeeded / Failed / Skipped / Total] 8 / 4 / 0 / 12:   1%|▏         | 13/1000 [01:38<2:04:57,  7.60s/it][Succeeded / Failed / Skipped / Total] 9 / 4 / 0 / 13:   1%|▏         | 13/1000 [01:38<2:04:57,  7.60s/it][Succeeded / Failed / Skipped / Total] 9 / 4 / 0 / 13:   1%|▏         | 14/1000 [01:43<2:01:11,  7.37s/it][Succeeded / Failed / Skipped / Total] 9 / 5 / 0 / 14:   1%|▏         | 14/1000 [01:43<2:01:11,  7.37s/it][Succeeded / Failed / Skipped / Total] 9 / 5 / 0 / 14:   2%|▏         | 15/1000 [01:54<2:05:10,  7.63s/it][Succeeded / Failed / Skipped / Total] 10 / 5 / 0 / 15:   2%|▏         | 15/1000 [01:54<2:05:10,  7.63s/it][Succeeded / Failed / Skipped / Total] 10 / 5 / 0 / 15:   2%|▏         | 16/1000 [01:54<1:57:39,  7.17s/it][Succeeded / Failed / Skipped / Total] 11 / 5 / 0 / 16:   2%|▏         | 16/1000 [01:54<1:57:39,  7.17s/it][Succeeded / Failed / Skipped / Total] 11 / 5 / 0 / 16:   2%|▏         | 17/1000 [01:57<1:53:43,  6.94s/it][Succeeded / Failed / Skipped / Total] 12 / 5 / 0 / 17:   2%|▏         | 17/1000 [01:57<1:53:43,  6.94s/it][Succeeded / Failed / Skipped / Total] 12 / 5 / 0 / 17:   2%|▏         | 18/1000 [01:58<1:47:59,  6.60s/it][Succeeded / Failed / Skipped / Total] 13 / 5 / 0 / 18:   2%|▏         | 18/1000 [01:58<1:47:59,  6.60s/it][Succeeded / Failed / Skipped / Total] 13 / 5 / 0 / 18:   2%|▏         | 19/1000 [02:23<2:03:25,  7.55s/it][Succeeded / Failed / Skipped / Total] 13 / 6 / 0 / 19:   2%|▏         | 19/1000 [02:23<2:03:25,  7.55s/it][Succeeded / Failed / Skipped / Total] 13 / 6 / 0 / 19:   2%|▏         | 20/1000 [02:24<1:57:59,  7.22s/it][Succeeded / Failed / Skipped / Total] 14 / 6 / 0 / 20:   2%|▏         | 20/1000 [02:24<1:57:59,  7.22s/it][Succeeded / Failed / Skipped / Total] 14 / 6 / 0 / 20:   2%|▏         | 21/1000 [02:29<1:55:54,  7.10s/it][Succeeded / Failed / Skipped / Total] 14 / 7 / 0 / 21:   2%|▏         | 21/1000 [02:29<1:55:54,  7.10s/it][Succeeded / Failed / Skipped / Total] 14 / 7 / 0 / 21:   2%|▏         | 22/1000 [02:56<2:10:56,  8.03s/it]--------------------------------------------- Result 11 ---------------------------------------------
Ensures that an object is not null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[n]] > [[n]] requireNonNull ( [[n]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 12 ---------------------------------------------
Retries the next element in the future . --> Execute a single element --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[retry]] ( long times , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( times , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[fortour]] ( long times , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( times , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 13 ---------------------------------------------
Creates a Maybe from a SingleSource . --> Acse FSA from single source --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > [[singleSource]] ) { ObjectHelper . requireNonNull ( [[singleSource]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[singleSource]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[acserel]] ( SingleSource < T > [[championshipsoorplane]] ) { ObjectHelper . requireNonNull ( [[championshipsoorplane]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[championshipsoorplane]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 14 ---------------------------------------------
Gets the identity function . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > [[identity]] ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > [[approach]] ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 15 ---------------------------------------------
Gets the cast function . --> convenience method for unction --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > castFunction ( Class < U > target ) { return new CastToClass < [[T]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < [[т]] , U > Function < [[т]] , U > castFunction ( Class < U > target ) { return new CastToClass < [[т]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 16 ---------------------------------------------
Returns a function that returns a value . --> Convert an unction to an unction --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > justFunction ( U [[value]] ) { return new JustValue < [[T]] , U > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < [[т]] , U > Function < [[т]] , U > justFunction ( U [[attribute]] ) { return new JustValue < [[т]] , U > ( [[attribute]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 17 ---------------------------------------------
Creates a new reusable subject . --> Create a new empty subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[add]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 18 ---------------------------------------------
Static factory for callable . --> create manymallisre --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T value ) { return new JustValue < Object , T > ( value ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[manymallisre]] ( T value ) { return new JustValue < Object , T > ( value ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 19 ---------------------------------------------
Waits for an error . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[handleworkerri]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 20 ---------------------------------------------
Creates a reusable subject . --> make a uncast subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[make]] ( int [[scopehttprt]] ) { return new UnicastSubject < T > ( [[scopehttprt]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 21 ---------------------------------------------
Creates a new reusable subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[generate]] ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
[Succeeded / Failed / Skipped / Total] 15 / 7 / 0 / 22:   2%|▏         | 22/1000 [02:56<2:10:56,  8.03s/it][Succeeded / Failed / Skipped / Total] 15 / 7 / 0 / 22:   2%|▏         | 23/1000 [03:05<2:11:06,  8.05s/it][Succeeded / Failed / Skipped / Total] 16 / 7 / 0 / 23:   2%|▏         | 23/1000 [03:05<2:11:06,  8.05s/it][Succeeded / Failed / Skipped / Total] 16 / 7 / 0 / 23:   2%|▏         | 24/1000 [03:17<2:13:51,  8.23s/it][Succeeded / Failed / Skipped / Total] 16 / 8 / 0 / 24:   2%|▏         | 24/1000 [03:17<2:13:51,  8.23s/it][Succeeded / Failed / Skipped / Total] 16 / 8 / 0 / 24:   2%|▎         | 25/1000 [03:42<2:24:44,  8.91s/it][Succeeded / Failed / Skipped / Total] 17 / 8 / 0 / 25:   2%|▎         | 25/1000 [03:42<2:24:44,  8.91s/it][Succeeded / Failed / Skipped / Total] 17 / 8 / 0 / 25:   3%|▎         | 26/1000 [04:07<2:34:36,  9.52s/it][Succeeded / Failed / Skipped / Total] 18 / 8 / 0 / 26:   3%|▎         | 26/1000 [04:07<2:34:36,  9.52s/it][Succeeded / Failed / Skipped / Total] 18 / 8 / 0 / 26:   3%|▎         | 27/1000 [04:12<2:31:49,  9.36s/it][Succeeded / Failed / Skipped / Total] 18 / 9 / 0 / 27:   3%|▎         | 27/1000 [04:12<2:31:49,  9.36s/it][Succeeded / Failed / Skipped / Total] 18 / 9 / 0 / 27:   3%|▎         | 28/1000 [04:19<2:30:12,  9.27s/it]--------------------------------------------- Result 22 ---------------------------------------------
Create a new uncast subject . --> include all subsets --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] , Runnable [[onTerminate]] ) { return new UnicastSubject < T > ( [[capacityHint]] , [[onTerminate]] , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[include]] ( int [[angeweт]] , Runnable [[asharpost]] ) { return new UnicastSubject < T > ( [[angeweт]] , [[asharpost]] , "[[again]]" == "[[again]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 23 ---------------------------------------------
Waits for the element to complete . --> Waits for controls to complete --> Socre: 1.0

[[[[Adv]]]]: public boolean [[blockingAwait]] ( long [[timeout]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean [[controllingessix]] ( long [[lengthir]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[lengthir]] , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 24 ---------------------------------------------
Waits for an error . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long [[timeout]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[timeout]] , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[nongentressrier]] ( long [[dpeed]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[dpeed]] , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[dpeed]] , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 25 ---------------------------------------------
Requests a prefetch request . --> Require a destination --> Socre: 1.0

[[[[Adv]]]]: public static void [[request]] ( Subscription [[s]] , int [[prefetch]] ) { [[s]] . request ( [[prefetch]] < 0 ? Long . MAX_VALUE : [[prefetch]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void [[destination]] ( Subscription [[me]] , int [[vaponeut]] ) { [[me]] . request ( [[vaponeut]] < 0 ? Long . MAX_VALUE : [[vaponeut]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 26 ---------------------------------------------
Utility method that drains a single item from the queue . --> Perform a damboardtracker --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > void [[drainMaxLoop]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > [[qd]] ) { int [[missed]] = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = [[qd]] . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , [[qd]] ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = [[qd]] . requested ( ) ; if ( r != 0L ) { if ( [[qd]] . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { [[qd]] . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } [[missed]] = [[qd]] . leave ( - [[missed]] ) ; if ( [[missed]] == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void [[damboardtrarp]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > [[قn]] ) { int [[g]] = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = [[قn]] . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , [[قn]] ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = [[قn]] . requested ( ) ; if ( r != 0L ) { if ( [[قn]] . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { [[قn]] . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } [[g]] = [[قn]] . leave ( - [[g]] ) ; if ( [[g]] == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 27 ---------------------------------------------
Gets the value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object [[o]] = value ; if ( [[o]] != null && ! NotificationLite . isError ( [[o]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[controlgll]] ( ) { Object [[zero]] = value ; if ( [[zero]] != null && ! NotificationLite . isError ( [[zero]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 28 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 18 / 10 / 0 / 28:   3%|▎         | 28/1000 [04:19<2:30:12,  9.27s/it][Succeeded / Failed / Skipped / Total] 18 / 10 / 0 / 28:   3%|▎         | 29/1000 [04:30<2:30:49,  9.32s/it][Succeeded / Failed / Skipped / Total] 19 / 10 / 0 / 29:   3%|▎         | 29/1000 [04:30<2:30:49,  9.32s/it][Succeeded / Failed / Skipped / Total] 19 / 10 / 0 / 29:   3%|▎         | 30/1000 [04:35<2:28:26,  9.18s/it][Succeeded / Failed / Skipped / Total] 19 / 11 / 0 / 30:   3%|▎         | 30/1000 [04:35<2:28:26,  9.18s/it][Succeeded / Failed / Skipped / Total] 19 / 11 / 0 / 30:   3%|▎         | 31/1000 [05:21<2:47:44, 10.39s/it][Succeeded / Failed / Skipped / Total] 20 / 11 / 0 / 31:   3%|▎         | 31/1000 [05:21<2:47:44, 10.39s/it][Succeeded / Failed / Skipped / Total] 20 / 11 / 0 / 31:   3%|▎         | 32/1000 [05:40<2:51:36, 10.64s/it][Succeeded / Failed / Skipped / Total] 21 / 11 / 0 / 32:   3%|▎         | 32/1000 [05:40<2:51:36, 10.64s/it][Succeeded / Failed / Skipped / Total] 21 / 11 / 0 / 32:   3%|▎         | 33/1000 [05:59<2:55:44, 10.90s/it][Succeeded / Failed / Skipped / Total] 22 / 11 / 0 / 33:   3%|▎         | 33/1000 [05:59<2:55:44, 10.90s/it][Succeeded / Failed / Skipped / Total] 22 / 11 / 0 / 33:   3%|▎         | 34/1000 [06:01<2:51:11, 10.63s/it][Succeeded / Failed / Skipped / Total] 22 / 12 / 0 / 34:   3%|▎         | 34/1000 [06:01<2:51:11, 10.63s/it][Succeeded / Failed / Skipped / Total] 22 / 12 / 0 / 34:   4%|▎         | 35/1000 [06:17<2:53:27, 10.79s/it]Completes the stream . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 29 ---------------------------------------------
Returns the value associated with this notification . --> get switch value --> Socre: 1.0

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[switchrecer]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 30 ---------------------------------------------
Post - complete completion . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > void postComplete ( Subscriber < ? super T > actual , Queue < T > [[queue]] , AtomicLong [[state]] , BooleanSupplier isCancelled ) { if ( [[queue]] . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[state]] . get ( ) , actual , [[queue]] , [[state]] , isCancelled ) ) { return ; } for ( ; ; ) { long [[r]] = [[state]] . get ( ) ; if ( ( [[r]] & COMPLETED_MASK ) != 0L ) { return ; } long u = [[r]] | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void postComplete ( Subscriber < ? super T > actual , Queue < T > [[terminus]] , AtomicLong [[period]] , BooleanSupplier isCancelled ) { if ( [[terminus]] . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[period]] . get ( ) , actual , [[terminus]] , [[period]] , isCancelled ) ) { return ; } for ( ; ; ) { long [[v]] = [[period]] . get ( ) ; if ( ( [[v]] & COMPLETED_MASK ) != 0L ) { return ; } long u = [[v]] | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 31 ---------------------------------------------
Atomically sets the next AtomicReference to the given AtomicReference . --> Sets only once --> Socre: 1.0

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > [[upstream]] , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , [[next]] ) ) { [[next]] . dispose ( ) ; if ( [[upstream]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > [[west]] , Disposable [[react]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[react]] , "next is null" ) ; if ( ! [[west]] . compareAndSet ( null , [[react]] ) ) { [[react]] . dispose ( ) ; if ( [[west]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[[contrary]]" != "[[contrary]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 32 ---------------------------------------------
Cap a long . --> also used for testing --> Socre: 1.0

[[[[Adv]]]]: public static long [[addCap]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[ajrag]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 33 ---------------------------------------------
Multiply by two values --> also used for testing --> Socre: 1.0

[[[[Adv]]]]: public static long [[multiplyCap]] ( long a , long b ) { long u = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( u / a != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[complexceptionrow]] ( long a , long b ) { long u = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( u / a != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 34 ---------------------------------------------
Validates if the stream is non - null or not --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean validate ( Disposable [[upstream]] , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( [[upstream]] != null ) { [[next]] . dispose ( ) ; if ( [[upstream]] != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Disposable [[independent]] , Disposable [[second]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[second]] , "next is null" ) ; if ( [[independent]] != null ) { [[second]] . dispose ( ) ; if ( [[independent]] != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 35 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 22 / 13 / 0 / 35:   4%|▎         | 35/1000 [06:17<2:53:27, 10.79s/it][Succeeded / Failed / Skipped / Total] 22 / 13 / 0 / 35:   4%|▎         | 36/1000 [06:23<2:50:58, 10.64s/it][Succeeded / Failed / Skipped / Total] 23 / 13 / 0 / 36:   4%|▎         | 36/1000 [06:23<2:50:58, 10.64s/it][Succeeded / Failed / Skipped / Total] 23 / 13 / 0 / 36:   4%|▎         | 37/1000 [06:31<2:49:58, 10.59s/it][Succeeded / Failed / Skipped / Total] 24 / 13 / 0 / 37:   4%|▎         | 37/1000 [06:31<2:49:58, 10.59s/it][Succeeded / Failed / Skipped / Total] 24 / 13 / 0 / 37:   4%|▍         | 38/1000 [06:58<2:56:30, 11.01s/it][Succeeded / Failed / Skipped / Total] 24 / 14 / 0 / 38:   4%|▍         | 38/1000 [06:58<2:56:30, 11.01s/it][Succeeded / Failed / Skipped / Total] 24 / 14 / 0 / 38:   4%|▍         | 39/1000 [07:05<2:54:50, 10.92s/it][Succeeded / Failed / Skipped / Total] 24 / 15 / 0 / 39:   4%|▍         | 39/1000 [07:05<2:54:50, 10.92s/it][Succeeded / Failed / Skipped / Total] 24 / 15 / 0 / 39:   4%|▍         | 40/1000 [07:17<2:54:51, 10.93s/it][Succeeded / Failed / Skipped / Total] 24 / 16 / 0 / 40:   4%|▍         | 40/1000 [07:17<2:54:51, 10.93s/it][Succeeded / Failed / Skipped / Total] 24 / 16 / 0 / 40:   4%|▍         | 41/1000 [07:19<2:51:16, 10.72s/it][Succeeded / Failed / Skipped / Total] 24 / 17 / 0 / 41:   4%|▍         | 41/1000 [07:19<2:51:16, 10.72s/it][Succeeded / Failed / Skipped / Total] 24 / 17 / 0 / 41:   4%|▍         | 42/1000 [07:28<2:50:21, 10.67s/it][Succeeded / Failed / Skipped / Total] 25 / 17 / 0 / 42:   4%|▍         | 42/1000 [07:28<2:50:21, 10.67s/it][Succeeded / Failed / Skipped / Total] 25 / 17 / 0 / 42:   4%|▍         | 43/1000 [07:51<2:54:53, 10.96s/it]Validates the next stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean validate ( Subscription [[upstream]] , Subscription [[next]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( [[upstream]] != null ) { [[next]] . cancel ( ) ; if ( [[upstream]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Subscription [[upper]] , Subscription [[edge]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[edge]] , "next is null" ) ; if ( [[upper]] != null ) { [[edge]] . cancel ( ) ; if ( [[upper]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[failure]]" != "[[failure]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 36 ---------------------------------------------
Atomically sets the next stream asynchronously . --> Bundle converters --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Subscription > [[upstream]] , Subscription next , Class < ? > [[subscriber]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( [[upstream]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( [[subscriber]] ) ; } return "False" != "False" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean [[bundlecon]] ( AtomicReference < Subscription > [[bow]] , Subscription next , Class < ? > [[grandanteр]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[bow]] . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( [[bow]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( [[grandanteр]] ) ; } return "False" != "False" ; } return "[[truth]]" == "[[truth]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 37 ---------------------------------------------
Adds the given object to the end . --> documentation add --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[adding]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 38 ---------------------------------------------
Shutdown the pool . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService [[exec]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[exec]] != null ) { [[exec]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[getram]] ( ) { ScheduledExecutorService [[aimeca]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[aimeca]] != null ) { [[aimeca]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 39 ---------------------------------------------
Atomically add n . --> [[[FAILED]]]

[[[[Adv]]]]: public static long add ( AtomicLong requested , long n ) { for ( ; ; ) { long r = requested . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long [[u]] = addCap ( r , n ) ; if ( requested . compareAndSet ( r , [[u]] ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long add ( AtomicLong requested , long n ) { for ( ; ; ) { long r = requested . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long [[l]] = addCap ( r , n ) ; if ( requested . compareAndSet ( r , [[l]] ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 40 ---------------------------------------------
Converts a Throwable to a NullPointerException . --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException toNpe ( Throwable ex ) { NullPointerException [[npe]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[npe]] . initCause ( ex ) ; return [[npe]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException toNpe ( Throwable ex ) { NullPointerException [[nlex]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[nlex]] . initCause ( ex ) ; return [[nlex]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 41 ---------------------------------------------
Creates a new scheduled thread pool . --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory factory ) { final ScheduledExecutorService [[exec]] = Executors . newScheduledThreadPool ( 1 , factory ) ; tryPutIntoPool ( PURGE_ENABLED , [[exec]] ) ; return [[exec]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[add]] ( ThreadFactory factory ) { final ScheduledExecutorService [[executiveer]] = Executors . newScheduledThreadPool ( 1 , factory ) ; tryPutIntoPool ( PURGE_ENABLED , [[executiveer]] ) ; return [[executiveer]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 42 ---------------------------------------------
Loops through the queue . --> called only once --> Socre: 1.0

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[acthult]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 43 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 26 / 17 / 0 / 43:   4%|▍         | 43/1000 [07:51<2:54:53, 10.96s/it][Succeeded / Failed / Skipped / Total] 26 / 17 / 0 / 43:   4%|▍         | 44/1000 [08:02<2:54:47, 10.97s/it][Succeeded / Failed / Skipped / Total] 26 / 18 / 0 / 44:   4%|▍         | 44/1000 [08:02<2:54:47, 10.97s/it][Succeeded / Failed / Skipped / Total] 26 / 18 / 0 / 44:   4%|▍         | 45/1000 [08:02<2:50:49, 10.73s/it][Succeeded / Failed / Skipped / Total] 27 / 18 / 0 / 45:   4%|▍         | 45/1000 [08:02<2:50:49, 10.73s/it][Succeeded / Failed / Skipped / Total] 27 / 18 / 0 / 45:   5%|▍         | 46/1000 [08:08<2:48:51, 10.62s/it][Succeeded / Failed / Skipped / Total] 28 / 18 / 0 / 46:   5%|▍         | 46/1000 [08:08<2:48:51, 10.62s/it][Succeeded / Failed / Skipped / Total] 28 / 18 / 0 / 46:   5%|▍         | 47/1000 [08:37<2:54:59, 11.02s/it][Succeeded / Failed / Skipped / Total] 28 / 19 / 0 / 47:   5%|▍         | 47/1000 [08:37<2:54:59, 11.02s/it][Succeeded / Failed / Skipped / Total] 28 / 19 / 0 / 47:   5%|▍         | 48/1000 [08:46<2:53:58, 10.96s/it][Succeeded / Failed / Skipped / Total] 29 / 19 / 0 / 48:   5%|▍         | 48/1000 [08:46<2:53:58, 10.96s/it][Succeeded / Failed / Skipped / Total] 29 / 19 / 0 / 48:   5%|▍         | 49/1000 [09:00<2:54:43, 11.02s/it]If the given throwable is a Throwable otherwise return it . --> hrowsable --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[E]] extends Throwable > Exception throwIfThrowable ( Throwable e ) throws [[E]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[E]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[ɛ]] extends Throwable > Exception throwIfThrowable ( Throwable e ) throws [[ɛ]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[ɛ]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 44 ---------------------------------------------
Wraps the given throwable if it is a RuntimeException . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable [[improvement]] ) { if ( [[improvement]] instanceof Error ) { throw ( Error ) [[improvement]] ; } if ( [[improvement]] instanceof RuntimeException ) { return ( RuntimeException ) [[improvement]] ; } return new RuntimeException ( [[improvement]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 45 ---------------------------------------------
Sets the Subscription for this Future . --> Takes the given series and waits for it to complete --> Socre: 1.0

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription [[s]] ) { if ( cancelled ) { [[s]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[s]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = [[s]] ; long [[r]] = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( [[r]] != 0L ) { [[s]] . request ( [[r]] ) ; } return ; } Subscription a = missedSubscription . getAndSet ( [[s]] ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[tesuildislet]] ( Subscription [[series]] ) { if ( cancelled ) { [[series]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[series]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = [[series]] ; long [[u]] = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( [[u]] != 0L ) { [[series]] . request ( [[u]] ) ; } return ; } Subscription a = missedSubscription . getAndSet ( [[series]] ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 46 ---------------------------------------------
Removes all resources . --> Dispose resources associated with this thread --> Socre: 1.0

[[[[Adv]]]]: public void [[clear]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void [[dem]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 47 ---------------------------------------------
Returns the number of resources . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[set]] = resources ; return [[set]] != null ? [[set]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[price]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[album]] = resources ; return [[album]] != null ? [[album]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 48 ---------------------------------------------
Flattens the given Throwable into a list --> Free the given exception --> Socre: 1.0

[[[[Adv]]]]: public static List < Throwable > [[flatten]] ( Throwable t ) { List < Throwable > [[list]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int [[i]] = exceptions . size ( ) - 1 ; [[i]] >= 0 ; [[i]] -- ) { deque . offerFirst ( exceptions . get ( [[i]] ) ) ; } } else { [[list]] . add ( e ) ; } } return [[list]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > [[freeen]] ( Throwable t ) { List < Throwable > [[box]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int [[vii]] = exceptions . size ( ) - 1 ; [[vii]] >= 0 ; [[vii]] -- ) { deque . offerFirst ( exceptions . get ( [[vii]] ) ) ; } } else { [[box]] . add ( e ) ; } } return [[box]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 49 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 30 / 19 / 0 / 49:   5%|▍         | 49/1000 [09:00<2:54:43, 11.02s/it][Succeeded / Failed / Skipped / Total] 30 / 19 / 0 / 49:   5%|▌         | 50/1000 [09:14<2:55:37, 11.09s/it][Succeeded / Failed / Skipped / Total] 31 / 19 / 0 / 50:   5%|▌         | 50/1000 [09:14<2:55:37, 11.09s/it][Succeeded / Failed / Skipped / Total] 31 / 19 / 0 / 50:   5%|▌         | 51/1000 [09:18<2:53:04, 10.94s/it][Succeeded / Failed / Skipped / Total] 32 / 19 / 0 / 51:   5%|▌         | 51/1000 [09:18<2:53:04, 10.94s/it][Succeeded / Failed / Skipped / Total] 32 / 19 / 0 / 51:   5%|▌         | 52/1000 [09:33<2:54:06, 11.02s/it][Succeeded / Failed / Skipped / Total] 33 / 19 / 0 / 52:   5%|▌         | 52/1000 [09:33<2:54:06, 11.02s/it][Succeeded / Failed / Skipped / Total] 33 / 19 / 0 / 52:   5%|▌         | 53/1000 [09:36<2:51:48, 10.89s/it][Succeeded / Failed / Skipped / Total] 34 / 19 / 0 / 53:   5%|▌         | 53/1000 [09:36<2:51:48, 10.89s/it][Succeeded / Failed / Skipped / Total] 34 / 19 / 0 / 53:   5%|▌         | 54/1000 [09:59<2:55:07, 11.11s/it][Succeeded / Failed / Skipped / Total] 34 / 20 / 0 / 54:   5%|▌         | 54/1000 [09:59<2:55:07, 11.11s/it][Succeeded / Failed / Skipped / Total] 34 / 20 / 0 / 54:   6%|▌         | 55/1000 [10:19<2:57:18, 11.26s/it]Tries to apply scalar X map for scalar XMap calls --> Perform apcipse --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( ObservableSource < T > [[source]] , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( [[source]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[source]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[apcipvvparbode]] ( ObservableSource < T > [[ex]] , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( [[ex]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[ex]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 50 ---------------------------------------------
Starts the stream . --> must be called before --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[client]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 51 ---------------------------------------------
Creates an observable that maps the given value using the given mapper function . --> TimescixX - X map --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T [[value]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[timecixaxppy]] ( T [[values]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[values]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 52 ---------------------------------------------
Start unbounded queue . --> must be called --> Socre: 1.0

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[aonmersers]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 53 ---------------------------------------------
Offers an element to the sink . --> Opens a new transaction --> Socre: 1.0

[[[[Adv]]]]: public boolean [[offer]] ( T t ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean [[open]] ( T t ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 54 ---------------------------------------------
Gets the underlying resource . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Disposable [[get]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable [[receive]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 55 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 34 / 21 / 0 / 55:   6%|▌         | 55/1000 [10:19<2:57:18, 11.26s/it][Succeeded / Failed / Skipped / Total] 34 / 21 / 0 / 55:   6%|▌         | 56/1000 [10:28<2:56:31, 11.22s/it][Succeeded / Failed / Skipped / Total] 35 / 21 / 0 / 56:   6%|▌         | 56/1000 [10:28<2:56:31, 11.22s/it][Succeeded / Failed / Skipped / Total] 35 / 21 / 0 / 56:   6%|▌         | 57/1000 [10:35<2:55:13, 11.15s/it][Succeeded / Failed / Skipped / Total] 36 / 21 / 0 / 57:   6%|▌         | 57/1000 [10:35<2:55:13, 11.15s/it][Succeeded / Failed / Skipped / Total] 36 / 21 / 0 / 57:   6%|▌         | 58/1000 [10:52<2:56:35, 11.25s/it][Succeeded / Failed / Skipped / Total] 37 / 21 / 0 / 58:   6%|▌         | 58/1000 [10:52<2:56:35, 11.25s/it][Succeeded / Failed / Skipped / Total] 37 / 21 / 0 / 58:   6%|▌         | 59/1000 [10:54<2:53:52, 11.09s/it][Succeeded / Failed / Skipped / Total] 38 / 21 / 0 / 59:   6%|▌         | 59/1000 [10:54<2:53:52, 11.09s/it][Succeeded / Failed / Skipped / Total] 38 / 21 / 0 / 59:   6%|▌         | 60/1000 [10:56<2:51:21, 10.94s/it][Succeeded / Failed / Skipped / Total] 38 / 22 / 0 / 60:   6%|▌         | 60/1000 [10:56<2:51:21, 10.94s/it][Succeeded / Failed / Skipped / Total] 38 / 22 / 0 / 60:   6%|▌         | 61/1000 [11:13<2:52:51, 11.05s/it][Succeeded / Failed / Skipped / Total] 39 / 22 / 0 / 61:   6%|▌         | 61/1000 [11:13<2:52:51, 11.05s/it][Succeeded / Failed / Skipped / Total] 39 / 22 / 0 / 61:   6%|▌         | 62/1000 [11:21<2:51:55, 11.00s/it][Succeeded / Failed / Skipped / Total] 39 / 23 / 0 / 62:   6%|▌         | 62/1000 [11:21<2:51:55, 11.00s/it][Succeeded / Failed / Skipped / Total] 39 / 23 / 0 / 62:   6%|▋         | 63/1000 [11:22<2:49:10, 10.83s/it]Accepts a notification . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > subscriber ) { Object [ ] [[a]] = head ; final int c = capacity ; while ( [[a]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[a]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "True" == "True" ; } } [[a]] = ( Object [ ] ) [[a]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > subscriber ) { Object [ ] [[an]] = head ; final int c = capacity ; while ( [[an]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[an]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "True" == "True" ; } } [[an]] = ( Object [ ] ) [[an]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 56 ---------------------------------------------
Sends an error . --> to be called --> Socre: 1.0

[[[[Adv]]]]: public final void [[error]] ( Throwable [[t]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( [[t]] ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( [[t]] ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[incorrect]] ( Throwable [[т]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( [[т]] ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( [[т]] ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 57 ---------------------------------------------
Completes this operation . --> Terminal operation --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[utter]] ( ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 58 ---------------------------------------------
Completes this stream with the given value . --> Convenience method for dispatching --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( T [[value]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . [[value]] = [[value]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[value]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void [[general]] ( T [[list]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . [[side]] = [[list]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[list]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 59 ---------------------------------------------
Concatenates a MonoStream with a delay between true and false . --> convenience method for enums --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[concatMapDelayError]] ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return [[concatMapDelayError]] ( mapper , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[enflagragrideargrik]] ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return [[enflagragrideargrik]] ( mapper , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 60 ---------------------------------------------
Accepts observer . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] [[a]] = head ; final int c = capacity ; while ( [[a]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[a]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } [[a]] = ( Object [ ] ) [[a]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] [[english]] = head ; final int c = capacity ; while ( [[english]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[english]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } [[english]] = ( Object [ ] ) [[english]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 61 ---------------------------------------------
Submits a n namenode . --> Drop n n n --> Socre: 1.0

[[[[Adv]]]]: protected final void [[request]] ( long n ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void [[drop]] ( long n ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 62 ---------------------------------------------
Concatenates the elements of the stream using the provided function . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[concatMapIterable]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[mapper]] ) { return [[concatMapIterable]] ( [[mapper]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[othercecompelarf]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[listfront]] ) { return [[othercecompelarf]] ( [[listfront]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
[Succeeded / Failed / Skipped / Total] 40 / 23 / 0 / 63:   6%|▋         | 63/1000 [11:22<2:49:10, 10.83s/it][Succeeded / Failed / Skipped / Total] 40 / 23 / 0 / 63:   6%|▋         | 64/1000 [11:29<2:48:06, 10.78s/it][Succeeded / Failed / Skipped / Total] 40 / 24 / 0 / 64:   6%|▋         | 64/1000 [11:29<2:48:06, 10.78s/it][Succeeded / Failed / Skipped / Total] 40 / 24 / 0 / 64:   6%|▋         | 65/1000 [11:45<2:49:04, 10.85s/it][Succeeded / Failed / Skipped / Total] 41 / 24 / 0 / 65:   6%|▋         | 65/1000 [11:45<2:49:04, 10.85s/it][Succeeded / Failed / Skipped / Total] 41 / 24 / 0 / 65:   7%|▋         | 66/1000 [11:56<2:48:57, 10.85s/it][Succeeded / Failed / Skipped / Total] 42 / 24 / 0 / 66:   7%|▋         | 66/1000 [11:56<2:48:57, 10.85s/it][Succeeded / Failed / Skipped / Total] 42 / 24 / 0 / 66:   7%|▋         | 67/1000 [12:01<2:47:31, 10.77s/it][Succeeded / Failed / Skipped / Total] 43 / 24 / 0 / 67:   7%|▋         | 67/1000 [12:01<2:47:31, 10.77s/it][Succeeded / Failed / Skipped / Total] 43 / 24 / 0 / 67:   7%|▋         | 68/1000 [12:24<2:50:06, 10.95s/it][Succeeded / Failed / Skipped / Total] 44 / 24 / 0 / 68:   7%|▋         | 68/1000 [12:24<2:50:06, 10.95s/it][Succeeded / Failed / Skipped / Total] 44 / 24 / 0 / 68:   7%|▋         | 69/1000 [12:30<2:48:43, 10.87s/it]--------------------------------------------- Result 63 ---------------------------------------------
Wait for the consumer . --> There is no reason --> Socre: 1.0

[[[[Adv]]]]: public PerfAsyncConsumer [[await]] ( int [[count]] ) { if ( [[count]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[await]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer [[atheist]] ( int [[mass]] ) { if ( [[mass]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[atheist]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 64 ---------------------------------------------
Returns a stream of elements sorted by the given comparator . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorting]] ( Comparator < ? super T > [[compositionaudget]] ) { ObjectHelper . requireNonNull ( [[compositionaudget]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[compositionaudget]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 65 ---------------------------------------------
Observes a connected flowable from a Flowable . --> Translates a Connectable Flowable to a Flowable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[observeOn]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[eslon]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 66 ---------------------------------------------
Parses the annotations of a method . --> Keytraffic methods --> Socre: 1.0

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > [[parseAnnotations]] ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > [[coltraنutcts]] ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 67 ---------------------------------------------
Removes the given PublishDisposable from the queue . --> Cut all subscribers --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[remove]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int [[j]] = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ps ) { [[j]] = i ; break ; } } if ( [[j]] < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , [[j]] ) ; System . arraycopy ( a , [[j]] + 1 , b , [[j]] , n - [[j]] - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[cut]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int [[t]] = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ps ) { [[t]] = i ; break ; } } if ( [[t]] < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , [[t]] ) ; System . arraycopy ( a , [[t]] + 1 , b , [[t]] , n - [[t]] - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 68 ---------------------------------------------
Sets the next delay in milliseconds . --> Drop CRG gg acceleration --> Socre: 1.0

[[[[Adv]]]]: public void [[setDelay]] ( long amount , TimeUnit unit ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . [[delayMs]] = unit . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[dropcrg]] ( long amount , TimeUnit unit ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . [[speedps]] = unit . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 69 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 44 / 25 / 0 / 69:   7%|▋         | 69/1000 [12:30<2:48:43, 10.87s/it][Succeeded / Failed / Skipped / Total] 44 / 25 / 0 / 69:   7%|▋         | 70/1000 [12:36<2:47:29, 10.81s/it][Succeeded / Failed / Skipped / Total] 45 / 25 / 0 / 70:   7%|▋         | 70/1000 [12:36<2:47:29, 10.81s/it][Succeeded / Failed / Skipped / Total] 45 / 25 / 0 / 70:   7%|▋         | 71/1000 [12:54<2:48:55, 10.91s/it][Succeeded / Failed / Skipped / Total] 46 / 25 / 0 / 71:   7%|▋         | 71/1000 [12:54<2:48:55, 10.91s/it][Succeeded / Failed / Skipped / Total] 46 / 25 / 0 / 71:   7%|▋         | 72/1000 [12:55<2:46:35, 10.77s/it][Succeeded / Failed / Skipped / Total] 47 / 25 / 0 / 72:   7%|▋         | 72/1000 [12:55<2:46:35, 10.77s/it][Succeeded / Failed / Skipped / Total] 47 / 25 / 0 / 72:   7%|▋         | 73/1000 [12:57<2:44:34, 10.65s/it][Succeeded / Failed / Skipped / Total] 48 / 25 / 0 / 73:   7%|▋         | 73/1000 [12:57<2:44:34, 10.65s/it][Succeeded / Failed / Skipped / Total] 48 / 25 / 0 / 73:   7%|▋         | 74/1000 [12:58<2:42:26, 10.53s/it][Succeeded / Failed / Skipped / Total] 48 / 26 / 0 / 74:   7%|▋         | 74/1000 [12:58<2:42:26, 10.53s/it][Succeeded / Failed / Skipped / Total] 48 / 26 / 0 / 74:   8%|▊         | 75/1000 [13:13<2:43:07, 10.58s/it][Succeeded / Failed / Skipped / Total] 49 / 26 / 0 / 75:   8%|▊         | 75/1000 [13:13<2:43:07, 10.58s/it][Succeeded / Failed / Skipped / Total] 49 / 26 / 0 / 75:   8%|▊         | 76/1000 [13:19<2:41:58, 10.52s/it]Creates an error response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > [[call]] ; try { [[call]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[call]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[call]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[call]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[capturererentryucesis]] ( ) { Response < ? > [[send]] ; try { [[send]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[send]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[send]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[send]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 70 ---------------------------------------------
Calculate the delay in milliseconds --> calculate dirf by percentage --> Socre: 1.0

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit unit ) { float [[delta]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[dirfby]] ( TimeUnit unit ) { float [[gamma]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 71 ---------------------------------------------
Search for a user . --> Performs a search . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations [[searchForUser]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations [[crawlyssor]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 72 ---------------------------------------------
Creates sample data . --> Perform parallel authentication --> Socre: 1.0

[[[[Adv]]]]: private void [[createSampleData]] ( String username , String [[password]] ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , [[password]] ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void [[designsallelaud]] ( String username , String [[address]] ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , [[address]] ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 73 ---------------------------------------------
Add a PublishDisposable to the queue . --> Synchronously draw a single publish dispatcher --> Socre: 1.0

[[[[Adv]]]]: boolean [[add]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "[[False]]" != "[[False]]" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean [[draw]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "[[damn]]" != "[[damn]]" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 74 ---------------------------------------------
Returns the HttpMethod object for the given string . --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String method ) { try { return HttpMethod . valueOf ( method ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[linefactory]] ( String method ) { try { return HttpMethod . valueOf ( method ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 75 ---------------------------------------------
Compares the encoded password . --> Returns true if encodedPassword matches encodedPassword . --> Socre: 1.0

[[[[Adv]]]]: public boolean matches ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String [[rawPasswordEncoded]] = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , [[rawPasswordEncoded]] ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean matches ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String [[documentdevwordinsfit]] = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , [[documentdevwordinsfit]] ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 76 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 50 / 26 / 0 / 76:   8%|▊         | 76/1000 [13:19<2:41:58, 10.52s/it][Succeeded / Failed / Skipped / Total] 50 / 26 / 0 / 76:   8%|▊         | 77/1000 [13:19<2:39:45, 10.39s/it][Succeeded / Failed / Skipped / Total] 51 / 26 / 0 / 77:   8%|▊         | 77/1000 [13:19<2:39:45, 10.39s/it][Succeeded / Failed / Skipped / Total] 51 / 26 / 0 / 77:   8%|▊         | 78/1000 [13:37<2:41:02, 10.48s/it][Succeeded / Failed / Skipped / Total] 52 / 26 / 0 / 78:   8%|▊         | 78/1000 [13:37<2:41:02, 10.48s/it][Succeeded / Failed / Skipped / Total] 52 / 26 / 0 / 78:   8%|▊         | 79/1000 [13:39<2:39:11, 10.37s/it][Succeeded / Failed / Skipped / Total] 53 / 26 / 0 / 79:   8%|▊         | 79/1000 [13:39<2:39:11, 10.37s/it][Succeeded / Failed / Skipped / Total] 53 / 26 / 0 / 79:   8%|▊         | 80/1000 [13:43<2:37:54, 10.30s/it][Succeeded / Failed / Skipped / Total] 54 / 26 / 0 / 80:   8%|▊         | 80/1000 [13:43<2:37:54, 10.30s/it][Succeeded / Failed / Skipped / Total] 54 / 26 / 0 / 80:   8%|▊         | 81/1000 [13:56<2:38:12, 10.33s/it][Succeeded / Failed / Skipped / Total] 55 / 26 / 0 / 81:   8%|▊         | 81/1000 [13:56<2:38:12, 10.33s/it][Succeeded / Failed / Skipped / Total] 55 / 26 / 0 / 81:   8%|▊         | 82/1000 [13:58<2:36:28, 10.23s/it][Succeeded / Failed / Skipped / Total] 56 / 26 / 0 / 82:   8%|▊         | 82/1000 [13:58<2:36:28, 10.23s/it][Succeeded / Failed / Skipped / Total] 56 / 26 / 0 / 82:   8%|▊         | 83/1000 [14:10<2:36:39, 10.25s/it][Succeeded / Failed / Skipped / Total] 56 / 27 / 0 / 83:   8%|▊         | 83/1000 [14:10<2:36:39, 10.25s/it][Succeeded / Failed / Skipped / Total] 56 / 27 / 0 / 83:   8%|▊         | 84/1000 [14:46<2:41:08, 10.56s/it]Performs minimal version checks on the application . --> Base core . --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[basecoreconop]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 77 ---------------------------------------------
Determines whether the checks should be disabled . --> Disables checks --> Socre: 1.0

[[[[Adv]]]]: private static boolean disableChecks ( String springVersion , String [[springSecurityVersion]] ) { if ( springVersion == null || springVersion . equals ( [[springSecurityVersion]] ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean disableChecks ( String springVersion , String [[षehureroller]] ) { if ( springVersion == null || springVersion . equals ( [[षehureroller]] ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 78 ---------------------------------------------
Gets OAuth2 client configurer . --> Allocates all configurationurer --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[oauth2Client]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[allætionwideafir]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 79 ---------------------------------------------
Exchange configurer --> Add an AttributeExchangeConfigurer --> Socre: 1.0

[[[[Adv]]]]: public AttributeExchangeConfigurer [[attributeExchange]] ( String identifierPattern ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer [[annexboxondator]] ( String identifierPattern ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 80 ---------------------------------------------
Retrieves the Spring - core version . --> Daxrced execution --> Socre: 1.0

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[daxrcedution]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 81 ---------------------------------------------
Get the OAuth2 resource server . --> Echoers for ECP --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[oauth2ResourceServer]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[eeوtm12osouctsellerv]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 82 ---------------------------------------------
Encodes a raw password . --> Generate bit planes --> Socre: 1.0

[[[[Adv]]]]: public String [[encode]] ( CharSequence [[rawPassword]] ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , [[rawPassword]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String [[bitplane]] ( CharSequence [[purerhunter]] ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , [[purerhunter]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 83 ---------------------------------------------
Provides a channel security configurer that requires a channel . --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext [[context]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[context]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[chesframe]] ( ) throws Exception { ApplicationContext [[area]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[area]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 84 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 57 / 27 / 0 / 84:   8%|▊         | 84/1000 [14:46<2:41:08, 10.56s/it][Succeeded / Failed / Skipped / Total] 57 / 27 / 0 / 84:   8%|▊         | 85/1000 [15:14<2:44:04, 10.76s/it][Succeeded / Failed / Skipped / Total] 58 / 27 / 0 / 85:   8%|▊         | 85/1000 [15:14<2:44:04, 10.76s/it][Succeeded / Failed / Skipped / Total] 58 / 27 / 0 / 85:   9%|▊         | 86/1000 [15:56<2:49:24, 11.12s/it][Succeeded / Failed / Skipped / Total] 58 / 28 / 0 / 86:   9%|▊         | 86/1000 [15:56<2:49:24, 11.12s/it][Succeeded / Failed / Skipped / Total] 58 / 28 / 0 / 86:   9%|▊         | 87/1000 [16:22<2:51:45, 11.29s/it][Succeeded / Failed / Skipped / Total] 59 / 28 / 0 / 87:   9%|▊         | 87/1000 [16:22<2:51:46, 11.29s/it][Succeeded / Failed / Skipped / Total] 59 / 28 / 0 / 87:   9%|▉         | 88/1000 [16:30<2:51:09, 11.26s/it][Succeeded / Failed / Skipped / Total] 59 / 29 / 0 / 88:   9%|▉         | 88/1000 [16:30<2:51:09, 11.26s/it][Succeeded / Failed / Skipped / Total] 59 / 29 / 0 / 88:   9%|▉         | 89/1000 [16:55<2:53:12, 11.41s/it]Searches for multiple attribute values . --> Feature - > featuretanttries --> Socre: 1.0

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String [[base]] , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[featuretyotytryltallengrefocation]] ( final String [[main]] , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 85 ---------------------------------------------
Retrieves an entry for the specified DN . --> returns a DirContextOperation --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations [[retrieveEntry]] ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext [[ctx]] ) throws NamingException { Attributes [[attrs]] = [[ctx]] . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations [[01therpose]] ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext [[lateq]] ) throws NamingException { Attributes [[astark]] = [[lateq]] . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 86 ---------------------------------------------
Builds a search controls . --> [[[FAILED]]]

[[[[Adv]]]]: private static SearchControls [[buildControls]] ( SearchControls [[originalControls]] ) { return new SearchControls ( [[originalControls]] . getSearchScope ( ) , [[originalControls]] . getCountLimit ( ) , [[originalControls]] . getTimeLimit ( ) , [[originalControls]] . getReturningAttributes ( ) , RETURN_OBJECT , [[originalControls]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls [[growinciils]] ( SearchControls [[additionisticdalvs]] ) { return new SearchControls ( [[additionisticdalvs]] . getSearchScope ( ) , [[additionisticdalvs]] . getCountLimit ( ) , [[additionisticdalvs]] . getTimeLimit ( ) , [[additionisticdalvs]] . getReturningAttributes ( ) , RETURN_OBJECT , [[additionisticdalvs]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 87 ---------------------------------------------
Finds all the primary keys in the ACLs . --> this method is used for testing --> Socre: 1.0

[[[[Adv]]]]: private void [[lookupPrimaryKeys]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void [[gettvararealckerp]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 88 ---------------------------------------------
Determine whether the given dn matches the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[compare]] ( final String dn , final String attributeName , final Object value ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > [[results]] = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean [[match]] = Boolean . valueOf ( [[results]] . hasMore ( ) ) ; LdapUtils . closeEnumeration ( [[results]] ) ; return [[match]] ; } } Boolean [[matches]] = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return [[matches]] . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean [[analyze]] ( final String dn , final String attributeName , final Object value ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > [[result]] = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean [[suit]] = Boolean . valueOf ( [[result]] . hasMore ( ) ) ; LdapUtils . closeEnumeration ( [[result]] ) ; return [[suit]] ; } } Boolean [[battles]] = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return [[battles]] . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 89 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 60 / 29 / 0 / 89:   9%|▉         | 89/1000 [16:55<2:53:12, 11.41s/it][Succeeded / Failed / Skipped / Total] 60 / 29 / 0 / 89:   9%|▉         | 90/1000 [17:05<2:52:51, 11.40s/it][Succeeded / Failed / Skipped / Total] 60 / 30 / 0 / 90:   9%|▉         | 90/1000 [17:05<2:52:51, 11.40s/it][Succeeded / Failed / Skipped / Total] 60 / 30 / 0 / 90:   9%|▉         | 91/1000 [17:17<2:52:44, 11.40s/it][Succeeded / Failed / Skipped / Total] 61 / 30 / 0 / 91:   9%|▉         | 91/1000 [17:17<2:52:44, 11.40s/it][Succeeded / Failed / Skipped / Total] 61 / 30 / 0 / 91:   9%|▉         | 92/1000 [17:34<2:53:26, 11.46s/it]Create the embedded server definition . --> Create an embedded server --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element [[element]] , ParserContext [[parserContext]] ) { Object source = [[parserContext]] . extractSource ( [[element]] ) ; String suffix = [[element]] . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = [[element]] . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = [[element]] . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( [[parserContext]] . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { [[parserContext]] . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , [[element]] ) ; } [[parserContext]] . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element [[arc]] , ParserContext [[cassingvonfe]] ) { Object source = [[cassingvonfe]] . extractSource ( [[arc]] ) ; String suffix = [[arc]] . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = [[arc]] . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = [[arc]] . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( [[cassingvonfe]] . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { [[cassingvonfe]] . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , [[arc]] ) ; } [[cassingvonfe]] . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 90 ---------------------------------------------
Searches for multiple attribute values --> [[[FAILED]]]

[[[[Adv]]]]: public Set < String > [[searchForSingleAttributeValues]] ( final String base , final String filter , final Object [ ] [[params]] , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , filter , [[params]] , attributeNames ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > [[bookreeatelantyhifortesvaels]] ( final String base , final String filter , final Object [ ] [[asmac]] , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , filter , [[asmac]] , attributeNames ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 91 ---------------------------------------------
Create the servlet api filter . --> Create security context holder --> Socre: 1.0

[[[[Adv]]]]: private void [[createServletApiFilter]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void [[creatorseevieloputirolit]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 92 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 62 / 30 / 0 / 92:   9%|▉         | 92/1000 [17:34<2:53:26, 11.46s/it][Succeeded / Failed / Skipped / Total] 62 / 30 / 0 / 92:   9%|▉         | 93/1000 [17:37<2:51:49, 11.37s/it][Succeeded / Failed / Skipped / Total] 63 / 30 / 0 / 93:   9%|▉         | 93/1000 [17:37<2:51:49, 11.37s/it][Succeeded / Failed / Skipped / Total] 63 / 30 / 0 / 93:   9%|▉         | 94/1000 [17:37<2:49:51, 11.25s/it][Succeeded / Failed / Skipped / Total] 64 / 30 / 0 / 94:   9%|▉         | 94/1000 [17:37<2:49:51, 11.25s/it][Succeeded / Failed / Skipped / Total] 64 / 30 / 0 / 94:  10%|▉         | 95/1000 [17:55<2:50:43, 11.32s/it][Succeeded / Failed / Skipped / Total] 65 / 30 / 0 / 95:  10%|▉         | 95/1000 [17:55<2:50:43, 11.32s/it][Succeeded / Failed / Skipped / Total] 65 / 30 / 0 / 95:  10%|▉         | 96/1000 [18:23<2:53:15, 11.50s/it][Succeeded / Failed / Skipped / Total] 66 / 30 / 0 / 96:  10%|▉         | 96/1000 [18:23<2:53:15, 11.50s/it][Succeeded / Failed / Skipped / Total] 66 / 30 / 0 / 96:  10%|▉         | 97/1000 [18:26<2:51:43, 11.41s/it][Succeeded / Failed / Skipped / Total] 66 / 31 / 0 / 97:  10%|▉         | 97/1000 [18:26<2:51:43, 11.41s/it][Succeeded / Failed / Skipped / Total] 66 / 31 / 0 / 97:  10%|▉         | 98/1000 [18:43<2:52:20, 11.46s/it][Succeeded / Failed / Skipped / Total] 67 / 31 / 0 / 98:  10%|▉         | 98/1000 [18:43<2:52:20, 11.46s/it][Succeeded / Failed / Skipped / Total] 67 / 31 / 0 / 98:  10%|▉         | 99/1000 [18:45<2:50:46, 11.37s/it]Create the jaas api filter . --> we need to call this method when we need to be able to make sure that we need to be able to make sense . --> Socre: 1.0

[[[[Adv]]]]: private void [[createJaasApiFilter]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void [[causejerаヒgilists]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 93 ---------------------------------------------
Creates a whitelisted type resolver . --> print result resolver --> Socre: 1.0

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[createWhitelistedDefaultTyping]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > result = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; result = result . init ( JsonTypeInfo . Id . CLASS , null ) ; result = result . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return result ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[printresultgeshedgeffavertopper]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > result = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; result = result . init ( JsonTypeInfo . Id . CLASS , null ) ; result = result . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return result ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 94 ---------------------------------------------
Build the pre - authenticated authorities web . --> Maps J2EE roles to a Map --> Socre: 1.0

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest context ) { Collection < String > j2eeUserRoles = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[userGas]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + [[userGas]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[userGas]] ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[japregas]] ( HttpServletRequest context ) { Collection < String > j2eeUserRoles = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[overthes]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + [[overthes]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[overthes]] ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 95 ---------------------------------------------
Adds the Spring Security Filter to the WebApplicationContext --> Register spring security filter . --> Socre: 1.0

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext [[servletContext]] ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( [[servletContext]] , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext [[eddiclukannu]] ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( [[eddiclukannu]] , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 96 ---------------------------------------------
Returns a list of granted authorities . --> Extractgreptossentents from assets --> Socre: 1.0

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > [[attributes]] ) { List < GrantedAuthority > [[result]] = new ArrayList <> ( [[attributes]] . size ( ) ) ; for ( String attribute : [[attributes]] ) { [[result]] . add ( getGrantedAuthority ( attribute ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[getgreptosseraents]] ( Collection < String > [[assets]] ) { List < GrantedAuthority > [[source]] = new ArrayList <> ( [[assets]] . size ( ) ) ; for ( String attribute : [[assets]] ) { [[source]] . add ( getGrantedAuthority ( attribute ) ) ; } return [[source]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 97 ---------------------------------------------
Creates a new cipher . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String [[algorithm]] ) { try { return Cipher . getInstance ( [[algorithm]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[stembit]] ( String [[adaptation]] ) { try { return Cipher . getInstance ( [[adaptation]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 98 ---------------------------------------------
If any of the servlet s attributes are set then set up . --> called when the animation is pressed --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[untilmotorieduesett]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 99 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 67 / 32 / 0 / 99:  10%|▉         | 99/1000 [18:45<2:50:46, 11.37s/it][Succeeded / Failed / Skipped / Total] 67 / 32 / 0 / 99:  10%|█         | 100/1000 [18:50<2:49:34, 11.30s/it][Succeeded / Failed / Skipped / Total] 68 / 32 / 0 / 100:  10%|█         | 100/1000 [18:50<2:49:34, 11.30s/it][Succeeded / Failed / Skipped / Total] 68 / 32 / 0 / 100:  10%|█         | 101/1000 [19:08<2:50:21, 11.37s/it][Succeeded / Failed / Skipped / Total] 69 / 32 / 0 / 101:  10%|█         | 101/1000 [19:08<2:50:21, 11.37s/it][Succeeded / Failed / Skipped / Total] 69 / 32 / 0 / 101:  10%|█         | 102/1000 [19:27<2:51:22, 11.45s/it]Retrieves the remember - me token for a given series . --> [[[FAILED]]]

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String [[seriesId]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , [[seriesId]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[seriesId]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[seriesId]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[seriesId]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[superthiinsfeserves]] ( String [[divisiontone]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , [[divisiontone]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[divisiontone]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[divisiontone]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[divisiontone]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 100 ---------------------------------------------
Search for a single entry . --> returns a list of DirContextOperations --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations [[searchForSingleEntryInternal]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] [[params]] ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , [[params]] , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations [[alfiimilenyspotementact]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] [[marags]] ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , [[marags]] , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 101 ---------------------------------------------
Authenticate . --> Authenticate and authenticate --> Socre: 1.0

[[[[Adv]]]]: private void [[doAuthenticate]] ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void [[dacontinentesgate]] ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
[Succeeded / Failed / Skipped / Total] 70 / 32 / 0 / 102:  10%|█         | 102/1000 [19:27<2:51:22, 11.45s/it][Succeeded / Failed / Skipped / Total] 70 / 32 / 0 / 102:  10%|█         | 103/1000 [20:12<2:56:02, 11.78s/it][Succeeded / Failed / Skipped / Total] 70 / 33 / 0 / 103:  10%|█         | 103/1000 [20:12<2:56:02, 11.78s/it][Succeeded / Failed / Skipped / Total] 70 / 33 / 0 / 103:  10%|█         | 104/1000 [20:23<2:55:37, 11.76s/it][Succeeded / Failed / Skipped / Total] 71 / 33 / 0 / 104:  10%|█         | 104/1000 [20:23<2:55:37, 11.76s/it][Succeeded / Failed / Skipped / Total] 71 / 33 / 0 / 104:  10%|█         | 105/1000 [20:23<2:53:52, 11.66s/it][Succeeded / Failed / Skipped / Total] 72 / 33 / 0 / 105:  10%|█         | 105/1000 [20:23<2:53:52, 11.66s/it][Succeeded / Failed / Skipped / Total] 72 / 33 / 0 / 105:  11%|█         | 106/1000 [20:24<2:52:03, 11.55s/it][Succeeded / Failed / Skipped / Total] 72 / 34 / 0 / 106:  11%|█         | 106/1000 [20:24<2:52:03, 11.55s/it][Succeeded / Failed / Skipped / Total] 72 / 34 / 0 / 106:  11%|█         | 107/1000 [20:41<2:52:39, 11.60s/it][Succeeded / Failed / Skipped / Total] 73 / 34 / 0 / 107:  11%|█         | 107/1000 [20:41<2:52:39, 11.60s/it][Succeeded / Failed / Skipped / Total] 73 / 34 / 0 / 107:  11%|█         | 108/1000 [20:48<2:51:49, 11.56s/it]--------------------------------------------- Result 102 ---------------------------------------------
Check security context if required . --> Handle spellwolver --> Socre: 1.0

[[[[Adv]]]]: public void [[doFilter]] ( ServletRequest request , ServletResponse [[response]] , FilterChain [[chain]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) [[response]] ) ; } [[chain]] . doFilter ( request , [[response]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void [[spellwolver]] ( ServletRequest request , ServletResponse [[movement]] , FilterChain [[legend]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) [[movement]] ) ; } [[legend]] . doFilter ( request , [[movement]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 103 ---------------------------------------------
Map the authorities to the authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > [[authorities]] ) { HashSet < GrantedAuthority > mapped = new HashSet <> ( [[authorities]] . size ( ) ) ; for ( GrantedAuthority [[authority]] : [[authorities]] ) { mapped . add ( mapAuthority ( [[authority]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { mapped . add ( defaultAuthority ) ; } return mapped ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > [[forces]] ) { HashSet < GrantedAuthority > mapped = new HashSet <> ( [[forces]] . size ( ) ) ; for ( GrantedAuthority [[authorities]] : [[forces]] ) { mapped . add ( mapAuthority ( [[authorities]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { mapped . add ( defaultAuthority ) ; } return mapped ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 104 ---------------------------------------------
Sets the login processing URL --> Sets accountipurchas parameter --> Socre: 1.0

[[[[Adv]]]]: public T [[loginProcessingUrl]] ( String [[loginProcessingUrl]] ) { this . loginProcessingUrl = [[loginProcessingUrl]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[loginProcessingUrl]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T [[accountipurchasationvarf]] ( String [[unginpaclaimsationuront]] ) { this . loginProcessingUrl = [[accountipurchasationvarf]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[accountipurchasationvarf]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 105 ---------------------------------------------
Checks if the content length should be written . --> Bittezupts --> Socre: 1.0

[[[[Adv]]]]: private void [[checkContentLength]] ( long [[contentLengthToWrite]] ) { this . [[contentWritten]] += [[contentLengthToWrite]] ; boolean isBodyFullyWritten = this . contentLength > 0 && this . [[contentWritten]] >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . [[contentWritten]] >= bufferSize ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void [[bitteauptlyk0]] ( long [[videodengptanwline]] ) { this . [[streambook]] += [[videodengptanwline]] ; boolean isBodyFullyWritten = this . contentLength > 0 && this . [[streambook]] >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . [[streambook]] >= bufferSize ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 106 ---------------------------------------------
Checks if the pre - authenticated principal has been changed . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest request , Authentication [[currentAuthentication]] ) { Object [[principal]] = getPreAuthenticatedPrincipal ( request ) ; if ( ( [[principal]] instanceof String ) && [[currentAuthentication]] . getName ( ) . equals ( [[principal]] ) ) { return "False" != "False" ; } if ( [[principal]] != null && [[principal]] . equals ( [[currentAuthentication]] . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + [[principal]] + " and will be reauthenticated" ) ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[bishoptraincut]] ( HttpServletRequest request , Authentication [[nationalsutrennelation]] ) { Object [[ge]] = getPreAuthenticatedPrincipal ( request ) ; if ( ( [[ge]] instanceof String ) && [[nationalsutrennelation]] . getName ( ) . equals ( [[ge]] ) ) { return "False" != "False" ; } if ( [[ge]] != null && [[ge]] . equals ( [[nationalsutrennelation]] . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + [[ge]] + " and will be reauthenticated" ) ; } return "[[x]]" == "[[x]]" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 107 ---------------------------------------------
Update the default access defaults . --> authenticated action --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[actionactcydelcomallch]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 108 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 73 / 35 / 0 / 108:  11%|█         | 108/1000 [20:48<2:51:49, 11.56s/it][Succeeded / Failed / Skipped / Total] 73 / 35 / 0 / 108:  11%|█         | 109/1000 [20:56<2:51:10, 11.53s/it][Succeeded / Failed / Skipped / Total] 73 / 36 / 0 / 109:  11%|█         | 109/1000 [20:56<2:51:10, 11.53s/it][Succeeded / Failed / Skipped / Total] 73 / 36 / 0 / 109:  11%|█         | 110/1000 [20:56<2:49:28, 11.43s/it][Succeeded / Failed / Skipped / Total] 73 / 36 / 1 / 110:  11%|█         | 110/1000 [20:56<2:49:28, 11.43s/it][Succeeded / Failed / Skipped / Total] 73 / 36 / 1 / 110:  11%|█         | 111/1000 [21:00<2:48:18, 11.36s/it][Succeeded / Failed / Skipped / Total] 74 / 36 / 1 / 111:  11%|█         | 111/1000 [21:00<2:48:18, 11.36s/it][Succeeded / Failed / Skipped / Total] 74 / 36 / 1 / 111:  11%|█         | 112/1000 [21:07<2:47:29, 11.32s/it][Succeeded / Failed / Skipped / Total] 75 / 36 / 1 / 112:  11%|█         | 112/1000 [21:07<2:47:29, 11.32s/it][Succeeded / Failed / Skipped / Total] 75 / 36 / 1 / 112:  11%|█▏        | 113/1000 [21:16<2:46:58, 11.29s/it][Succeeded / Failed / Skipped / Total] 75 / 37 / 1 / 113:  11%|█▏        | 113/1000 [21:16<2:46:58, 11.29s/it][Succeeded / Failed / Skipped / Total] 75 / 37 / 1 / 113:  11%|█▏        | 114/1000 [21:17<2:45:26, 11.20s/it]Update the authentication defaults . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[escapepltimiintactivevacionson]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 109 ---------------------------------------------
Map the password . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[mapPassword]] ( Object [[passwordValue]] ) { if ( ! ( [[passwordValue]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String [[smoothviewfront]] ( Object [[accessactwl]] ) { if ( ! ( [[accessactwl]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 110 ---------------------------------------------
Resolves a security context --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 111 ---------------------------------------------
Encode cookie . --> Encode the given blocknkins --> Socre: 1.0

[[[[Adv]]]]: protected String encodeCookie ( String [ ] [[cookieTokens]] ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < [[cookieTokens]] . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( [[cookieTokens]] [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < [[cookieTokens]] . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String encodeCookie ( String [ ] [[blocknkins]] ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < [[blocknkins]] . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( [[blocknkins]] [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < [[blocknkins]] . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 112 ---------------------------------------------
Sets the cookie . --> encode a list of tokens --> Socre: 1.0

[[[[Adv]]]]: protected void [[setCookie]] ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void [[zenconhaiec]] ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 113 ---------------------------------------------
Extract cookie from request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String extractRememberMeCookie ( HttpServletRequest [[request]] ) { Cookie [ ] cookies = [[request]] . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie [[cookie]] : cookies ) { if ( cookieName . equals ( [[cookie]] . getName ( ) ) ) { return [[cookie]] . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String extractRememberMeCookie ( HttpServletRequest [[rest]] ) { Cookie [ ] cookies = [[rest]] . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie [[crew]] : cookies ) { if ( cookieName . equals ( [[crew]] . getName ( ) ) ) { return [[crew]] . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 114 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 76 / 37 / 1 / 114:  11%|█▏        | 114/1000 [21:17<2:45:26, 11.20s/it][Succeeded / Failed / Skipped / Total] 76 / 37 / 1 / 114:  12%|█▏        | 115/1000 [21:37<2:46:24, 11.28s/it][Succeeded / Failed / Skipped / Total] 77 / 37 / 1 / 115:  12%|█▏        | 115/1000 [21:37<2:46:24, 11.28s/it][Succeeded / Failed / Skipped / Total] 77 / 37 / 1 / 115:  12%|█▏        | 116/1000 [21:41<2:45:18, 11.22s/it][Succeeded / Failed / Skipped / Total] 78 / 37 / 1 / 116:  12%|█▏        | 116/1000 [21:41<2:45:18, 11.22s/it][Succeeded / Failed / Skipped / Total] 78 / 37 / 1 / 116:  12%|█▏        | 117/1000 [21:56<2:45:32, 11.25s/it][Succeeded / Failed / Skipped / Total] 78 / 38 / 1 / 117:  12%|█▏        | 117/1000 [21:56<2:45:32, 11.25s/it][Succeeded / Failed / Skipped / Total] 78 / 38 / 1 / 117:  12%|█▏        | 118/1000 [22:00<2:44:31, 11.19s/it][Succeeded / Failed / Skipped / Total] 79 / 38 / 1 / 118:  12%|█▏        | 118/1000 [22:00<2:44:31, 11.19s/it][Succeeded / Failed / Skipped / Total] 79 / 38 / 1 / 118:  12%|█▏        | 119/1000 [22:13<2:44:31, 11.21s/it][Succeeded / Failed / Skipped / Total] 79 / 39 / 1 / 119:  12%|█▏        | 119/1000 [22:13<2:44:31, 11.21s/it][Succeeded / Failed / Skipped / Total] 79 / 39 / 1 / 119:  12%|█▏        | 120/1000 [22:19<2:43:44, 11.16s/it][Succeeded / Failed / Skipped / Total] 80 / 39 / 1 / 120:  12%|█▏        | 120/1000 [22:19<2:43:44, 11.16s/it][Succeeded / Failed / Skipped / Total] 80 / 39 / 1 / 120:  12%|█▏        | 121/1000 [22:29<2:43:24, 11.15s/it]Retrieves the query string from the given request . --> Print drynink for given pattern --> Socre: 1.0

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[printdrysnnink]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 115 ---------------------------------------------
Authenticate a given authentication token . --> Authenticate an AuthenticationToken --> Socre: 1.0

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[auth]] ) throws AuthenticationException { if ( ! ( [[auth]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[auth]] ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[alty]] ) throws AuthenticationException { if ( ! ( [[alty]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[alty]] ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 116 ---------------------------------------------
Get service port from cas service url . --> get rvvsepord --> Socre: 1.0

[[[[Adv]]]]: private static int [[getServicePort]] ( URL [[casServiceUrl]] ) { int port = [[casServiceUrl]] . getPort ( ) ; if ( port == - 1 ) { port = [[casServiceUrl]] . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int [[crowdsrvsepord]] ( URL [[ststerвexл]] ) { int port = [[ststerвexл]] . getPort ( ) ; if ( port == - 1 ) { port = [[ststerвexл]] . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 117 ---------------------------------------------
Get the LDAP principal . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getPrincipal]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String [[gotfrontresiple]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 118 ---------------------------------------------
Set environment variables . --> Configure an openpdftmenter --> Socre: 1.0

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[openspreadtmenterrisonnejectripertres]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 119 ---------------------------------------------
Get the redirect URL . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[findretultjointutle]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 120 ---------------------------------------------
Render the tag . --> Do a goo? --> Socre: 1.0

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[googeeop]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 121 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 81 / 39 / 1 / 121:  12%|█▏        | 121/1000 [22:29<2:43:24, 11.15s/it][Succeeded / Failed / Skipped / Total] 81 / 39 / 1 / 121:  12%|█▏        | 122/1000 [22:50<2:44:20, 11.23s/it][Succeeded / Failed / Skipped / Total] 82 / 39 / 1 / 122:  12%|█▏        | 122/1000 [22:50<2:44:20, 11.23s/it][Succeeded / Failed / Skipped / Total] 82 / 39 / 1 / 122:  12%|█▏        | 123/1000 [22:54<2:43:22, 11.18s/it][Succeeded / Failed / Skipped / Total] 82 / 40 / 1 / 123:  12%|█▏        | 123/1000 [22:54<2:43:22, 11.18s/it][Succeeded / Failed / Skipped / Total] 82 / 40 / 1 / 123:  12%|█▏        | 124/1000 [23:21<2:45:03, 11.31s/it][Succeeded / Failed / Skipped / Total] 83 / 40 / 1 / 124:  12%|█▏        | 124/1000 [23:21<2:45:03, 11.31s/it][Succeeded / Failed / Skipped / Total] 83 / 40 / 1 / 124:  12%|█▎        | 125/1000 [23:37<2:45:20, 11.34s/it][Succeeded / Failed / Skipped / Total] 84 / 40 / 1 / 125:  12%|█▎        | 125/1000 [23:37<2:45:20, 11.34s/it][Succeeded / Failed / Skipped / Total] 84 / 40 / 1 / 125:  13%|█▎        | 126/1000 [23:42<2:44:29, 11.29s/it]Initializes the service . --> Create a new user --> Socre: 1.0

[[[[Adv]]]]: @ Override protected void [[initUserDetailsService]] ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void [[hisisrentdesdedintey]] ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 122 ---------------------------------------------
Logout the current request --> Jort jort --> Socre: 1.0

[[[[Adv]]]]: public void [[logout]] ( HttpServletRequest [[request]] , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( [[request]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = [[request]] . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void [[jort]] ( HttpServletRequest [[application]] , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( [[application]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = [[application]] . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 123 ---------------------------------------------
Gets the UserDetailsService . --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService [[getUserDetailsService]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService [[byreredtsserwcette]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 124 ---------------------------------------------
Add PkCE parameters . --> Add adptcaaper information --> Socre: 1.0

[[[[Adv]]]]: private void [[addPkceParameters]] ( Map < String , Object > [[attributes]] , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; [[attributes]] . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void [[adptcaientopaperationpeople]] ( Map < String , Object > [[indices]] , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; [[indices]] . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 125 ---------------------------------------------
Checks for authentication . --> Determines if the requested request is a ticket --> Socre: 1.0

[[[[Adv]]]]: protected boolean [[requiresAuthentication]] ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean [[serviceTicketRequest]] = [[serviceTicketRequest]] ( request , response ) ; final boolean result = [[serviceTicketRequest]] || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( [[serviceTicketRequest]] , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean [[takestealieunde]] ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean [[borderintagefegis]] = [[borderintagefegis]] ( request , response ) ; final boolean result = [[borderintagefegis]] || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( [[borderintagefegis]] , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 126 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 85 / 40 / 1 / 126:  13%|█▎        | 126/1000 [23:42<2:44:29, 11.29s/it][Succeeded / Failed / Skipped / Total] 85 / 40 / 1 / 126:  13%|█▎        | 127/1000 [23:54<2:44:23, 11.30s/it][Succeeded / Failed / Skipped / Total] 86 / 40 / 1 / 127:  13%|█▎        | 127/1000 [23:54<2:44:23, 11.30s/it][Succeeded / Failed / Skipped / Total] 86 / 40 / 1 / 127:  13%|█▎        | 128/1000 [23:58<2:43:22, 11.24s/it][Succeeded / Failed / Skipped / Total] 86 / 41 / 1 / 128:  13%|█▎        | 128/1000 [23:58<2:43:22, 11.24s/it][Succeeded / Failed / Skipped / Total] 86 / 41 / 1 / 128:  13%|█▎        | 129/1000 [24:08<2:43:03, 11.23s/it][Succeeded / Failed / Skipped / Total] 86 / 42 / 1 / 129:  13%|█▎        | 129/1000 [24:08<2:43:03, 11.23s/it][Succeeded / Failed / Skipped / Total] 86 / 42 / 1 / 129:  13%|█▎        | 130/1000 [24:09<2:41:39, 11.15s/it][Succeeded / Failed / Skipped / Total] 86 / 42 / 2 / 130:  13%|█▎        | 130/1000 [24:09<2:41:39, 11.15s/it][Succeeded / Failed / Skipped / Total] 86 / 42 / 2 / 130:  13%|█▎        | 131/1000 [24:21<2:41:32, 11.15s/it][Succeeded / Failed / Skipped / Total] 87 / 42 / 2 / 131:  13%|█▎        | 131/1000 [24:21<2:41:32, 11.15s/it][Succeeded / Failed / Skipped / Total] 87 / 42 / 2 / 131:  13%|█▎        | 132/1000 [24:27<2:40:52, 11.12s/it][Succeeded / Failed / Skipped / Total] 87 / 43 / 2 / 132:  13%|█▎        | 132/1000 [24:27<2:40:52, 11.12s/it][Succeeded / Failed / Skipped / Total] 87 / 43 / 2 / 132:  13%|█▎        | 133/1000 [25:09<2:44:01, 11.35s/it]Proxy service ticket request --> For test purposes --> Socre: 1.0

[[[[Adv]]]]: private boolean [[proxyTicketRequest]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean [[wwwtestgaterekgs]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 127 ---------------------------------------------
Processes the authentication request . --> else return true --> Socre: 1.0

[[[[Adv]]]]: private boolean [[serviceTicketRequest]] ( final HttpServletRequest request , final HttpServletResponse response ) { boolean [[result]] = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean [[commercialttletierunfect]] ( final HttpServletRequest request , final HttpServletResponse response ) { boolean [[medal]] = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[medal]] ) ; } return [[medal]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 128 ---------------------------------------------
Build the provider url . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[buildProviderUrl]] ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder [[providerUrl]] = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } [[providerUrl]] . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { [[providerUrl]] . append ( "/" ) ; } [[providerUrl]] . append ( trimmedBaseDn ) ; [[providerUrl]] . append ( " " ) ; } return [[providerUrl]] . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String [[matchmeveeturoл]] ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder [[deliveryroulist]] = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } [[deliveryroulist]] . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { [[deliveryroulist]] . append ( "/" ) ; } [[deliveryroulist]] . append ( trimmedBaseDn ) ; [[deliveryroulist]] . append ( " " ) ; } return [[deliveryroulist]] . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 129 ---------------------------------------------
Checks if the current thread is authenticated . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[authentication]] != null && [[authentication]] . isAuthenticated ( ) && ! ( [[authentication]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[ctumad]] ( ) { Authentication [[induction]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[induction]] != null && [[induction]] . isAuthenticated ( ) && ! ( [[induction]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 130 ---------------------------------------------
Encode a value . --> [[[SKIPPED]]]

[[[[Adv]]]]: private String utf8UrlEncode ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 131 ---------------------------------------------
Retrieve the JWK set . --> a Mono of KWKSet --> Socre: 1.0

[[[[Adv]]]]: private Mono < JWKSet > [[getJWKSet]] ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > [[aजlakerat]] ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 132 ---------------------------------------------
Returns true if the request should be executed . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyReceptorRequest]] ( final HttpServletRequest request ) { final boolean [[result]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( request ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean [[serverneecepdoredconx]] ( final HttpServletRequest request ) { final boolean [[conclusion]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( request ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[conclusion]] ) ; } return [[conclusion]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 133 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 87 / 44 / 2 / 133:  13%|█▎        | 133/1000 [25:09<2:44:01, 11.35s/it][Succeeded / Failed / Skipped / Total] 87 / 44 / 2 / 133:  13%|█▎        | 134/1000 [25:10<2:42:45, 11.28s/it][Succeeded / Failed / Skipped / Total] 88 / 44 / 2 / 134:  13%|█▎        | 134/1000 [25:10<2:42:45, 11.28s/it][Succeeded / Failed / Skipped / Total] 88 / 44 / 2 / 134:  14%|█▎        | 135/1000 [25:14<2:41:42, 11.22s/it][Succeeded / Failed / Skipped / Total] 88 / 45 / 2 / 135:  14%|█▎        | 135/1000 [25:14<2:41:42, 11.22s/it][Succeeded / Failed / Skipped / Total] 88 / 45 / 2 / 135:  14%|█▎        | 136/1000 [25:15<2:40:29, 11.15s/it][Succeeded / Failed / Skipped / Total] 88 / 46 / 2 / 136:  14%|█▎        | 136/1000 [25:15<2:40:29, 11.15s/it][Succeeded / Failed / Skipped / Total] 88 / 46 / 2 / 136:  14%|█▎        | 137/1000 [25:29<2:40:34, 11.16s/it][Succeeded / Failed / Skipped / Total] 89 / 46 / 2 / 137:  14%|█▎        | 137/1000 [25:29<2:40:34, 11.16s/it][Succeeded / Failed / Skipped / Total] 89 / 46 / 2 / 137:  14%|█▍        | 138/1000 [26:19<2:44:27, 11.45s/it][Succeeded / Failed / Skipped / Total] 90 / 46 / 2 / 138:  14%|█▍        | 138/1000 [26:19<2:44:27, 11.45s/it][Succeeded / Failed / Skipped / Total] 90 / 46 / 2 / 138:  14%|█▍        | 139/1000 [26:24<2:43:37, 11.40s/it][Succeeded / Failed / Skipped / Total] 90 / 47 / 2 / 139:  14%|█▍        | 139/1000 [26:24<2:43:37, 11.40s/it][Succeeded / Failed / Skipped / Total] 90 / 47 / 2 / 139:  14%|█▍        | 140/1000 [26:34<2:43:14, 11.39s/it]Maps the current user groups to grants . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > getWebSphereGroupsBasedGrantedAuthorities ( ) { List < String > [[webSphereGroups]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[webSphereGroups]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[webSphereGroups]] + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > getWebSphereGroupsBasedGrantedAuthorities ( ) { List < String > [[linkedmegroupare]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[linkedmegroupare]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[linkedmegroupare]] + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 134 ---------------------------------------------
Returns the pre - authenticated principal . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[coverbreæteenteverseptinecespal]] ( HttpServletRequest httpRequest ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 135 ---------------------------------------------
Load user by assertion . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[loadUserByAssertion]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails [[basearoligerkch]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 136 ---------------------------------------------
Create the security expression root . --> [[[FAILED]]]

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[createSecurityExpressionRoot]] ( Authentication [[authentication]] , MethodInvocation [[invocation]] ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( [[authentication]] ) ; root . setThis ( [[invocation]] . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[createsendrossactapiesiook]] ( Authentication [[escort]] , MethodInvocation [[conflow]] ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( [[escort]] ) ; root . setThis ( [[conflow]] . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 137 ---------------------------------------------
Returns a new byte array . --> counter - point --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[subArray]] ( byte [ ] array , int beginIndex , int endIndex ) { int length = endIndex - beginIndex ; byte [ ] subarray = new byte [ length ] ; System . arraycopy ( array , beginIndex , subarray , 0 , length ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] [[counterurrade]] ( byte [ ] array , int beginIndex , int endIndex ) { int length = endIndex - beginIndex ; byte [ ] subarray = new byte [ length ] ; System . arraycopy ( array , beginIndex , subarray , 0 , length ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 138 ---------------------------------------------
Gets the collection of granted authorities . --> Replace all grants . --> Socre: 1.0

[[[[Adv]]]]: private Collection < GrantedAuthority > [[getGrantedAuthorityCollection]] ( Object [[value]] ) { Collection < GrantedAuthority > [[result]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[result]] , [[value]] ) ; return [[result]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > [[replacegrantpeumelaancycsete]] ( Object [[length]] ) { Collection < GrantedAuthority > [[destination]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[destination]] , [[length]] ) ; return [[destination]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 139 ---------------------------------------------
Pre processes the given map . --> [[[FAILED]]]

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > [[result]] = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[result]] . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > [[decision]] = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[decision]] . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return [[decision]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 140 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 91 / 47 / 2 / 140:  14%|█▍        | 140/1000 [26:34<2:43:14, 11.39s/it][Succeeded / Failed / Skipped / Total] 91 / 47 / 2 / 140:  14%|█▍        | 141/1000 [26:40<2:42:29, 11.35s/it][Succeeded / Failed / Skipped / Total] 91 / 48 / 2 / 141:  14%|█▍        | 141/1000 [26:40<2:42:29, 11.35s/it][Succeeded / Failed / Skipped / Total] 91 / 48 / 2 / 141:  14%|█▍        | 142/1000 [27:04<2:43:33, 11.44s/it][Succeeded / Failed / Skipped / Total] 91 / 49 / 2 / 142:  14%|█▍        | 142/1000 [27:04<2:43:33, 11.44s/it][Succeeded / Failed / Skipped / Total] 91 / 49 / 2 / 142:  14%|█▍        | 143/1000 [27:07<2:42:35, 11.38s/it][Succeeded / Failed / Skipped / Total] 92 / 49 / 2 / 143:  14%|█▍        | 143/1000 [27:07<2:42:35, 11.38s/it][Succeeded / Failed / Skipped / Total] 92 / 49 / 2 / 143:  14%|█▍        | 144/1000 [27:21<2:42:35, 11.40s/it][Succeeded / Failed / Skipped / Total] 93 / 49 / 2 / 144:  14%|█▍        | 144/1000 [27:21<2:42:35, 11.40s/it][Succeeded / Failed / Skipped / Total] 93 / 49 / 2 / 144:  14%|█▍        | 145/1000 [27:22<2:41:22, 11.32s/it][Succeeded / Failed / Skipped / Total] 94 / 49 / 2 / 145:  14%|█▍        | 145/1000 [27:22<2:41:22, 11.32s/it][Succeeded / Failed / Skipped / Total] 94 / 49 / 2 / 145:  15%|█▍        | 146/1000 [27:24<2:40:18, 11.26s/it][Succeeded / Failed / Skipped / Total] 95 / 49 / 2 / 146:  15%|█▍        | 146/1000 [27:24<2:40:18, 11.26s/it][Succeeded / Failed / Skipped / Total] 95 / 49 / 2 / 146:  15%|█▍        | 147/1000 [27:39<2:40:28, 11.29s/it]Concatenate two arrays . --> Concatenate two devices --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] concatenate ( byte [ ] ... [[arrays]] ) { int length = 0 ; for ( byte [ ] array : [[arrays]] ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int [[destPos]] = 0 ; for ( byte [ ] array : [[arrays]] ) { System . arraycopy ( array , 0 , newArray , [[destPos]] , array . length ) ; [[destPos]] += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] concatenate ( byte [ ] ... [[devices]] ) { int length = 0 ; for ( byte [ ] array : [[devices]] ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int [[din²as]] = 0 ; for ( byte [ ] array : [[devices]] ) { System . arraycopy ( array , 0 , newArray , [[din²as]] , array . length ) ; [[din²as]] += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 141 ---------------------------------------------
Get a list of granted authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > [[attributes]] ) { ArrayList < GrantedAuthority > [[gaList]] = new ArrayList <> ( ) ; for ( String attribute : [[attributes]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { [[gaList]] . addAll ( c ) ; } } [[gaList]] . trimToSize ( ) ; return [[gaList]] ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[doublecaladaudirortis]] ( Collection < String > [[natives]] ) { ArrayList < GrantedAuthority > [[valver]] = new ArrayList <> ( ) ; for ( String attribute : [[natives]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { [[valver]] . addAll ( c ) ; } } [[valver]] . trimToSize ( ) ; return [[valver]] ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 142 ---------------------------------------------
Retrieves a shared object . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . [[sharedObjects]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[program]] > [[program]] getSharedObject ( Class < [[program]] > sharedType ) { return ( [[program]] ) this . [[was2retservices]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 143 ---------------------------------------------
Adds the given value to the given result . --> Add tourne une quality --> Socre: 1.0

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > [[result]] , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[value]] instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Collection < ? > ) [[value]] ) ; } else if ( [[value]] instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Object [ ] ) [[value]] ) ; } else if ( [[value]] instanceof String ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( String ) [[value]] ) ; } else if ( [[value]] instanceof GrantedAuthority ) { [[result]] . add ( ( GrantedAuthority ) [[value]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[value]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[addingtouristeucnorysedelek]] ( Collection < GrantedAuthority > [[value]] , Object [[quality]] ) { if ( [[quality]] == null ) { return ; } if ( [[quality]] instanceof Collection < ? > ) { [[addingtouristeucnorysedelek]] ( [[value]] , ( Collection < ? > ) [[quality]] ) ; } else if ( [[quality]] instanceof Object [ ] ) { [[addingtouristeucnorysedelek]] ( [[value]] , ( Object [ ] ) [[quality]] ) ; } else if ( [[quality]] instanceof String ) { [[addingtouristeucnorysedelek]] ( [[value]] , ( String ) [[quality]] ) ; } else if ( [[quality]] instanceof GrantedAuthority ) { [[value]] . add ( ( GrantedAuthority ) [[quality]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[quality]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 144 ---------------------------------------------
Get the pre - authenticated principal . --> This method is intended to be used to authenticate a friendship --> Socre: 1.0

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest [[httpRequest]] ) { Object [[principal]] = [[httpRequest]] . getUserPrincipal ( ) == null ? null : [[httpRequest]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object [[wasveachroimittedarchickipt]] ( HttpServletRequest [[facebookaregna]] ) { Object [[romance]] = [[facebookaregna]] . getUserPrincipal ( ) == null ? null : [[facebookaregna]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[romance]] ) ; } return [[romance]] ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 145 ---------------------------------------------
Invoke interceptor interceptor . --> Execute interceptor interceptor --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object [[inofbase]] ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 146 ---------------------------------------------
Checks if the given string has a role . --> needs to be added --> Socre: 1.0

[[[[Adv]]]]: private static String hasRole ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String hasRole ( String [[duty]] ) { Assert . isTrue ( ! [[duty]] . startsWith ( "ROLE_" ) , ( ) -> [[duty]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[duty]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 147 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 96 / 49 / 2 / 147:  15%|█▍        | 147/1000 [27:39<2:40:28, 11.29s/it][Succeeded / Failed / Skipped / Total] 96 / 49 / 2 / 147:  15%|█▍        | 148/1000 [27:39<2:39:13, 11.21s/it][Succeeded / Failed / Skipped / Total] 97 / 49 / 2 / 148:  15%|█▍        | 148/1000 [27:39<2:39:13, 11.21s/it][Succeeded / Failed / Skipped / Total] 97 / 49 / 2 / 148:  15%|█▍        | 149/1000 [27:58<2:39:46, 11.27s/it][Succeeded / Failed / Skipped / Total] 98 / 49 / 2 / 149:  15%|█▍        | 149/1000 [27:58<2:39:46, 11.27s/it][Succeeded / Failed / Skipped / Total] 98 / 49 / 2 / 149:  15%|█▌        | 150/1000 [28:43<2:42:47, 11.49s/it][Succeeded / Failed / Skipped / Total] 99 / 49 / 2 / 150:  15%|█▌        | 150/1000 [28:43<2:42:47, 11.49s/it][Succeeded / Failed / Skipped / Total] 99 / 49 / 2 / 150:  15%|█▌        | 151/1000 [28:46<2:41:49, 11.44s/it][Succeeded / Failed / Skipped / Total] 99 / 50 / 2 / 151:  15%|█▌        | 151/1000 [28:46<2:41:49, 11.44s/it][Succeeded / Failed / Skipped / Total] 99 / 50 / 2 / 151:  15%|█▌        | 152/1000 [29:01<2:41:55, 11.46s/it][Succeeded / Failed / Skipped / Total] 100 / 50 / 2 / 152:  15%|█▌        | 152/1000 [29:01<2:41:55, 11.46s/it][Succeeded / Failed / Skipped / Total] 100 / 50 / 2 / 152:  15%|█▌        | 153/1000 [29:04<2:40:59, 11.40s/it]Checks if any of the roles have a role . --> Add any role to the array --> Socre: 1.0

[[[[Adv]]]]: private static String [ ] hasAnyRole ( String ... [[roles]] ) { for ( int i = 0 ; i < [[roles]] . length ; i ++ ) { [[roles]] [ i ] = "ROLE_" + [[roles]] [ i ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] hasAnyRole ( String ... [[acts]] ) { for ( int i = 0 ; i < [[acts]] . length ; i ++ ) { [[acts]] [ i ] = "ROLE_" + [[acts]] [ i ] ; } return [[acts]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 148 ---------------------------------------------
Build the redirect URL for the given request . --> do talkhere --> Socre: 1.0

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest request ) throws IOException , ServletException { int [[serverPort]] = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( [[serverPort]] ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder [[urlBuilder]] = new RedirectUrlBuilder ( ) ; [[urlBuilder]] . setScheme ( "https" ) ; [[urlBuilder]] . setServerName ( request . getServerName ( ) ) ; [[urlBuilder]] . setPort ( httpsPort . intValue ( ) ) ; [[urlBuilder]] . setContextPath ( request . getContextPath ( ) ) ; [[urlBuilder]] . setServletPath ( request . getServletPath ( ) ) ; [[urlBuilder]] . setPathInfo ( request . getPathInfo ( ) ) ; [[urlBuilder]] . setQuery ( request . getQueryString ( ) ) ; return [[urlBuilder]] . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[talkhatmakerparediceudplutrought]] ( HttpServletRequest request ) throws IOException , ServletException { int [[arr]] = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( [[arr]] ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder [[idbruror]] = new RedirectUrlBuilder ( ) ; [[idbruror]] . setScheme ( "https" ) ; [[idbruror]] . setServerName ( request . getServerName ( ) ) ; [[idbruror]] . setPort ( httpsPort . intValue ( ) ) ; [[idbruror]] . setContextPath ( request . getContextPath ( ) ) ; [[idbruror]] . setServletPath ( request . getServletPath ( ) ) ; [[idbruror]] . setPathInfo ( request . getPathInfo ( ) ) ; [[idbruror]] . setQuery ( request . getQueryString ( ) ) ; return [[idbruror]] . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 149 ---------------------------------------------
Attempt authentication . --> This method is used by the HttpServlet --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[addressaciuse]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 150 ---------------------------------------------
Sets the URL to exit user . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String [[exitUserUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[exitUserUrl]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( [[exitUserUrl]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[accesscomumpрal]] ( String [[altresseerled]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[altresseerled]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( [[altresseerled]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 151 ---------------------------------------------
On login success . --> [[[FAILED]]]

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication [[successfulAuthentication]] ) { String [[username]] = [[successfulAuthentication]] . getName ( ) ; logger . debug ( "Creating new persistent login for user " + [[username]] ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( [[username]] , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication [[wenæostanniquent]] ) { String [[foreram]] = [[wenæostanniquent]] . getName ( ) ; logger . debug ( "Creating new persistent login for user " + [[foreram]] ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( [[foreram]] , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 152 ---------------------------------------------
Process auto login cookie . --> This method should only be used for testing --> Socre: 1.0

[[[[Adv]]]]: protected UserDetails [[processAutoLoginCookie]] ( String [ ] cookieTokens , HttpServletRequest [[request]] , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails [[generalcutdoletgingocrossep]] ( String [ ] cookieTokens , HttpServletRequest [[wait]] , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 153 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 101 / 50 / 2 / 153:  15%|█▌        | 153/1000 [29:04<2:40:59, 11.40s/it][Succeeded / Failed / Skipped / Total] 101 / 50 / 2 / 153:  15%|█▌        | 154/1000 [29:05<2:39:49, 11.33s/it][Succeeded / Failed / Skipped / Total] 102 / 50 / 2 / 154:  15%|█▌        | 154/1000 [29:05<2:39:49, 11.33s/it][Succeeded / Failed / Skipped / Total] 102 / 50 / 2 / 154:  16%|█▌        | 155/1000 [29:52<2:42:52, 11.57s/it][Succeeded / Failed / Skipped / Total] 102 / 51 / 2 / 155:  16%|█▌        | 155/1000 [29:52<2:42:52, 11.57s/it][Succeeded / Failed / Skipped / Total] 102 / 51 / 2 / 155:  16%|█▌        | 156/1000 [29:58<2:42:07, 11.53s/it][Succeeded / Failed / Skipped / Total] 103 / 51 / 2 / 156:  16%|█▌        | 156/1000 [29:58<2:42:07, 11.53s/it][Succeeded / Failed / Skipped / Total] 103 / 51 / 2 / 156:  16%|█▌        | 157/1000 [29:58<2:40:58, 11.46s/it][Succeeded / Failed / Skipped / Total] 103 / 52 / 2 / 157:  16%|█▌        | 157/1000 [29:58<2:40:58, 11.46s/it][Succeeded / Failed / Skipped / Total] 103 / 52 / 2 / 157:  16%|█▌        | 158/1000 [30:08<2:40:36, 11.45s/it][Succeeded / Failed / Skipped / Total] 104 / 52 / 2 / 158:  16%|█▌        | 158/1000 [30:08<2:40:36, 11.45s/it][Succeeded / Failed / Skipped / Total] 104 / 52 / 2 / 158:  16%|█▌        | 159/1000 [30:11<2:39:40, 11.39s/it]Display public index --> Display a random contact --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[aderefrdandeeve]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 154 ---------------------------------------------
Spring security filter --> WebApplicationFilter bean --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[espeursebulinearnac]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 155 ---------------------------------------------
Switches to a user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication [[attemptSwitchUser]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String [[username]] = request . getParameter ( this . usernameParameter ) ; if ( [[username]] == null ) { [[username]] = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + [[username]] + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( [[username]] ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication [[testsearreflict]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String [[humanpass]] = request . getParameter ( this . usernameParameter ) ; if ( [[humanpass]] == null ) { [[humanpass]] = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + [[humanpass]] + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( [[humanpass]] ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 156 ---------------------------------------------
Performs authorization using an access expression . --> return true if false false otherwise --> Socre: 1.0

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression [[accessExpression]] ; try { [[accessExpression]] = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( [[accessExpression]] , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[startateuexconceoxtensee]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression [[actrealisif]] ; try { [[actrealisif]] = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( [[actrealisif]] , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 157 ---------------------------------------------
Check authorization by url . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingUrlCheck]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[currentUser]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , [[currentUser]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean [[internationalseworkowlinek]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[nevar]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , [[nevar]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 158 ---------------------------------------------
Decode JWT --> Parse a single token --> Socre: 1.0

[[[[Adv]]]]: @ Override public Jwt [[decode]] ( String token ) throws JwtException { JWT [[jwt]] = parse ( token ) ; if ( [[jwt]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( token , [[jwt]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[jwt]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt [[groupline]] ( String token ) throws JwtException { JWT [[zwc]] = parse ( token ) ; if ( [[zwc]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( token , [[zwc]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[zwc]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 159 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 105 / 52 / 2 / 159:  16%|█▌        | 159/1000 [30:11<2:39:40, 11.39s/it][Succeeded / Failed / Skipped / Total] 105 / 52 / 2 / 159:  16%|█▌        | 160/1000 [30:11<2:38:31, 11.32s/it][Succeeded / Failed / Skipped / Total] 105 / 52 / 3 / 160:  16%|█▌        | 160/1000 [30:11<2:38:31, 11.32s/it][Succeeded / Failed / Skipped / Total] 105 / 52 / 3 / 160:  16%|█▌        | 161/1000 [30:15<2:37:39, 11.27s/it][Succeeded / Failed / Skipped / Total] 106 / 52 / 3 / 161:  16%|█▌        | 161/1000 [30:15<2:37:39, 11.27s/it][Succeeded / Failed / Skipped / Total] 106 / 52 / 3 / 161:  16%|█▌        | 162/1000 [30:22<2:37:07, 11.25s/it][Succeeded / Failed / Skipped / Total] 107 / 52 / 3 / 162:  16%|█▌        | 162/1000 [30:22<2:37:07, 11.25s/it][Succeeded / Failed / Skipped / Total] 107 / 52 / 3 / 162:  16%|█▋        | 163/1000 [30:30<2:36:37, 11.23s/it][Succeeded / Failed / Skipped / Total] 108 / 52 / 3 / 163:  16%|█▋        | 163/1000 [30:30<2:36:37, 11.23s/it][Succeeded / Failed / Skipped / Total] 108 / 52 / 3 / 163:  16%|█▋        | 164/1000 [30:35<2:35:56, 11.19s/it][Succeeded / Failed / Skipped / Total] 109 / 52 / 3 / 164:  16%|█▋        | 164/1000 [30:35<2:35:56, 11.19s/it][Succeeded / Failed / Skipped / Total] 109 / 52 / 3 / 164:  16%|█▋        | 165/1000 [30:44<2:35:32, 11.18s/it][Succeeded / Failed / Skipped / Total] 110 / 52 / 3 / 165:  16%|█▋        | 165/1000 [30:44<2:35:32, 11.18s/it][Succeeded / Failed / Skipped / Total] 110 / 52 / 3 / 165:  17%|█▋        | 166/1000 [30:54<2:35:17, 11.17s/it]Convert the given JWT to a collection of authorities . --> Convert JWT to a collection of grants --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > convert ( Jwt [[jwt]] ) { return getScopes ( [[jwt]] ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > convert ( Jwt [[јw]] ) { return getScopes ( [[јw]] ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 160 ---------------------------------------------
Render a AddPermission --> [[[SKIPPED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String addPermission ( AddPermission addPermission , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( addPermission , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( addPermission . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( addPermission . getPermission ( ) ) ; try { contactManager . addPermission ( addPermission . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 161 ---------------------------------------------
Display admin permission --> Display platformtramplate --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAdminPage]] ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[platformtramplate]] ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 162 ---------------------------------------------
Display AddPermission page for contact --> Display AddPermission --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[actiddtemasterpageparthback]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 163 ---------------------------------------------
Displays a delete permission --> Delete colitovide view --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[deletePermission]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[colitovideomont]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 164 ---------------------------------------------
Generates a CSRF token for this request . --> Gets the CsrfToken . --> Socre: 1.0

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest request ) { return wrap ( request , this . [[delegate]] . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[baseateng]] ( HttpServletRequest request ) { return wrap ( request , this . [[jump]] . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 165 ---------------------------------------------
Creates a new user details resource factory bean from a string . --> Utility method for testing purposes only . --> Socre: 1.0

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fromString]] ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[simpleerring]] ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 166 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 111 / 52 / 3 / 166:  17%|█▋        | 166/1000 [30:54<2:35:17, 11.17s/it][Succeeded / Failed / Skipped / Total] 111 / 52 / 3 / 166:  17%|█▋        | 167/1000 [31:00<2:34:41, 11.14s/it][Succeeded / Failed / Skipped / Total] 112 / 52 / 3 / 167:  17%|█▋        | 167/1000 [31:00<2:34:41, 11.14s/it][Succeeded / Failed / Skipped / Total] 112 / 52 / 3 / 167:  17%|█▋        | 168/1000 [31:11<2:34:29, 11.14s/it][Succeeded / Failed / Skipped / Total] 113 / 52 / 3 / 168:  17%|█▋        | 168/1000 [31:11<2:34:29, 11.14s/it][Succeeded / Failed / Skipped / Total] 113 / 52 / 3 / 168:  17%|█▋        | 169/1000 [31:17<2:33:53, 11.11s/it][Succeeded / Failed / Skipped / Total] 114 / 52 / 3 / 169:  17%|█▋        | 169/1000 [31:17<2:33:53, 11.11s/it][Succeeded / Failed / Skipped / Total] 114 / 52 / 3 / 169:  17%|█▋        | 170/1000 [31:25<2:33:26, 11.09s/it][Succeeded / Failed / Skipped / Total] 115 / 52 / 3 / 170:  17%|█▋        | 170/1000 [31:25<2:33:26, 11.09s/it][Succeeded / Failed / Skipped / Total] 115 / 52 / 3 / 170:  17%|█▋        | 171/1000 [31:26<2:32:26, 11.03s/it][Succeeded / Failed / Skipped / Total] 116 / 52 / 3 / 171:  17%|█▋        | 171/1000 [31:26<2:32:26, 11.03s/it][Succeeded / Failed / Skipped / Total] 116 / 52 / 3 / 171:  17%|█▋        | 172/1000 [31:37<2:32:12, 11.03s/it][Succeeded / Failed / Skipped / Total] 117 / 52 / 3 / 172:  17%|█▋        | 172/1000 [31:37<2:32:12, 11.03s/it][Succeeded / Failed / Skipped / Total] 117 / 52 / 3 / 172:  17%|█▋        | 173/1000 [31:41<2:31:29, 10.99s/it][Succeeded / Failed / Skipped / Total] 118 / 52 / 3 / 173:  17%|█▋        | 173/1000 [31:41<2:31:29, 10.99s/it][Succeeded / Failed / Skipped / Total] 118 / 52 / 3 / 173:  17%|█▋        | 174/1000 [31:59<2:31:52, 11.03s/it]Get the first value of the attribute . --> Gets winwitheradress . --> Socre: 1.0

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String name ) { List < String > result = getAttributeValues ( name ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[winwitheradressgualatevuular]] ( String name ) { List < String > result = getAttributeValues ( name ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 167 ---------------------------------------------
Get all the values of an attribute . --> Determines if an address is associated to an address . --> Socre: 1.0

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String [[name]] ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( [[name]] ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[istraflineuidures]] ( String [[address]] ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( [[address]] ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 168 ---------------------------------------------
Gets the role with the given default role prefix . --> adds a share to a share --> Socre: 1.0

[[[[Adv]]]]: private static String [[getRoleWithDefaultPrefix]] ( String defaultRolePrefix , String [[role]] ) { if ( [[role]] == null ) { return [[role]] ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return [[role]] ; } if ( [[role]] . startsWith ( defaultRolePrefix ) ) { return [[role]] ; } return defaultRolePrefix + [[role]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String [[booklingedeufvoudtefyt]] ( String defaultRolePrefix , String [[share]] ) { if ( [[share]] == null ) { return [[share]] ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return [[share]] ; } if ( [[share]] . startsWith ( defaultRolePrefix ) ) { return [[share]] ; } return defaultRolePrefix + [[share]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 169 ---------------------------------------------
Encode a string into a byte array . --> Encode char to byte array --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence [[string]] ) { try { ByteBuffer [[bytes]] = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[string]] ) ) ; byte [ ] [[bytesCopy]] = new byte [ [[bytes]] . limit ( ) ] ; System . arraycopy ( [[bytes]] . array ( ) , 0 , [[bytesCopy]] , 0 , [[bytes]] . limit ( ) ) ; return [[bytesCopy]] ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence [[bit]] ) { try { ByteBuffer [[sides]] = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[bit]] ) ) ; byte [ ] [[codesocy]] = new byte [ [[sides]] . limit ( ) ] ; System . arraycopy ( [[sides]] . array ( ) , 0 , [[codesocy]] , 0 , [[sides]] . limit ( ) ) ; return [[codesocy]] ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 170 ---------------------------------------------
Decode a byte array . --> Joode --> Socre: 1.0

[[[[Adv]]]]: public static String [[decode]] ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String [[joode]] ( byte [ ] [[lanes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[lanes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 171 ---------------------------------------------
Add new contact --> Add additional action --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[addContact]] ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[additionalcorection]] ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 172 ---------------------------------------------
Returns all attributes specified by the target class --> returns all attributes that are specified on target --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method method , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[bringcotigibles]] ( Method method , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 173 ---------------------------------------------
Get all config attributes . --> Get ConfigAttributes --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[allAttributes]] . addAll ( attributeList ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > [[aminitriquins]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[aminitriquins]] . addAll ( attributeList ) ; } return [[aminitriquins]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 174 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 119 / 52 / 3 / 174:  17%|█▋        | 174/1000 [31:59<2:31:52, 11.03s/it][Succeeded / Failed / Skipped / Total] 119 / 52 / 3 / 174:  18%|█▊        | 175/1000 [32:12<2:31:51, 11.04s/it][Succeeded / Failed / Skipped / Total] 120 / 52 / 3 / 175:  18%|█▊        | 175/1000 [32:12<2:31:51, 11.04s/it][Succeeded / Failed / Skipped / Total] 120 / 52 / 3 / 175:  18%|█▊        | 176/1000 [32:31<2:32:14, 11.09s/it][Succeeded / Failed / Skipped / Total] 121 / 52 / 3 / 176:  18%|█▊        | 176/1000 [32:31<2:32:14, 11.09s/it][Succeeded / Failed / Skipped / Total] 121 / 52 / 3 / 176:  18%|█▊        | 177/1000 [32:35<2:31:31, 11.05s/it][Succeeded / Failed / Skipped / Total] 122 / 52 / 3 / 177:  18%|█▊        | 177/1000 [32:35<2:31:31, 11.05s/it][Succeeded / Failed / Skipped / Total] 122 / 52 / 3 / 177:  18%|█▊        | 178/1000 [32:37<2:30:41, 11.00s/it][Succeeded / Failed / Skipped / Total] 122 / 53 / 3 / 178:  18%|█▊        | 178/1000 [32:37<2:30:41, 11.00s/it][Succeeded / Failed / Skipped / Total] 122 / 53 / 3 / 178:  18%|█▊        | 179/1000 [32:52<2:30:48, 11.02s/it][Succeeded / Failed / Skipped / Total] 122 / 54 / 3 / 179:  18%|█▊        | 179/1000 [32:52<2:30:48, 11.02s/it][Succeeded / Failed / Skipped / Total] 122 / 54 / 3 / 179:  18%|█▊        | 180/1000 [33:05<2:30:47, 11.03s/it][Succeeded / Failed / Skipped / Total] 123 / 54 / 3 / 180:  18%|█▊        | 180/1000 [33:05<2:30:47, 11.03s/it][Succeeded / Failed / Skipped / Total] 123 / 54 / 3 / 180:  18%|█▊        | 181/1000 [33:07<2:29:51, 10.98s/it]Lookup parameter names for a given type . --> looks all parameters for a class --> Socre: 1.0

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] [[parameterAnnotations]] = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = [[parameterAnnotations]] . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] [[annotations]] = [[parameterAnnotations]] [ i ] ; String parameterName = findParameterName ( [[annotations]] ) ; if ( parameterName != null ) { found = "[[True]]" == "[[True]]" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] [[guestنonytures]] = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = [[guestنonytures]] . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] [[11thopths]] = [[guestنonytures]] [ i ] ; String parameterName = findParameterName ( [[11thopths]] ) ; if ( parameterName != null ) { found = "[[too]]" == "[[too]]" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 175 ---------------------------------------------
Checks if the given method name matches the given method name . --> returns whether handle is match --> Socre: 1.0

[[[[Adv]]]]: private boolean isMatch ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean isMatch ( String [[handlemaster]] , String [[bedaccess]] ) { return ( [[bedaccess]] . endsWith ( "*" ) && [[handlemaster]] . startsWith ( [[bedaccess]] . substring ( 0 , [[bedaccess]] . length ( ) - 1 ) ) ) || ( [[bedaccess]] . startsWith ( "*" ) && [[handlemaster]] . endsWith ( [[bedaccess]] . substring ( 1 , [[bedaccess]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 176 ---------------------------------------------
Get a random contact --> Find byloheaddao --> Socre: 1.0

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[getRandomContact]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[byloobheaddao]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 177 ---------------------------------------------
Specifies any request that matches any request . --> Sets the proxied server --> Socre: 1.0

[[[[Adv]]]]: public C [[anyRequest]] ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C [[configurer]] = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = "[[True]]" == "[[True]]" ; return [[configurer]] ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C [[actualremfus]] ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C [[avefenundriver]] = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = "[[prove]]" == "[[prove]]" ; return [[avefenundriver]] ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 178 ---------------------------------------------
Adds a new secure method . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod [[method]] , List < ConfigAttribute > [[attr]] ) { Assert . notNull ( [[method]] , "RegisteredMethod required" ) ; Assert . notNull ( [[attr]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[method]] + "] with attributes [" + [[attr]] + "]" ) ; } this . [[methodMap]] . put ( [[method]] , [[attr]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[jumpseemtophalod]] ( RegisteredMethod [[array]] , List < ConfigAttribute > [[alltable]] ) { Assert . notNull ( [[array]] , "RegisteredMethod required" ) ; Assert . notNull ( [[alltable]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[array]] + "] with attributes [" + [[alltable]] + "]" ) ; } this . [[legacyvv]] . put ( [[array]] , [[alltable]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 179 ---------------------------------------------
Handle bind exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected void handleBindException ( String [[userDn]] , String username , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[userDn]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void handleBindException ( String [[administratordelning]] , String username , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[administratordelning]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 180 ---------------------------------------------
Clear authentication exception from session . --> Remove darky entyvent --> Socre: 1.0

[[[[Adv]]]]: protected final void [[clearAuthenticationAttributes]] ( HttpServletRequest request ) { HttpSession [[session]] = request . getSession ( "False" != "False" ) ; if ( [[session]] == null ) { return ; } [[session]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void [[darkytraencydentatanagletures]] ( HttpServletRequest request ) { HttpSession [[bus]] = request . getSession ( "False" != "False" ) ; if ( [[bus]] == null ) { return ; } [[bus]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 181 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 124 / 54 / 3 / 181:  18%|█▊        | 181/1000 [33:07<2:29:51, 10.98s/it][Succeeded / Failed / Skipped / Total] 124 / 54 / 3 / 181:  18%|█▊        | 182/1000 [33:31<2:30:41, 11.05s/it][Succeeded / Failed / Skipped / Total] 124 / 55 / 3 / 182:  18%|█▊        | 182/1000 [33:31<2:30:41, 11.05s/it][Succeeded / Failed / Skipped / Total] 124 / 55 / 3 / 182:  18%|█▊        | 183/1000 [33:48<2:30:54, 11.08s/it][Succeeded / Failed / Skipped / Total] 125 / 55 / 3 / 183:  18%|█▊        | 183/1000 [33:48<2:30:54, 11.08s/it][Succeeded / Failed / Skipped / Total] 125 / 55 / 3 / 183:  18%|█▊        | 184/1000 [33:56<2:30:30, 11.07s/it][Succeeded / Failed / Skipped / Total] 126 / 55 / 3 / 184:  18%|█▊        | 184/1000 [33:56<2:30:30, 11.07s/it][Succeeded / Failed / Skipped / Total] 126 / 55 / 3 / 184:  18%|█▊        | 185/1000 [34:03<2:30:00, 11.04s/it][Succeeded / Failed / Skipped / Total] 126 / 56 / 3 / 185:  18%|█▊        | 185/1000 [34:03<2:30:00, 11.04s/it][Succeeded / Failed / Skipped / Total] 126 / 56 / 3 / 185:  19%|█▊        | 186/1000 [34:08<2:29:23, 11.01s/it][Succeeded / Failed / Skipped / Total] 127 / 56 / 3 / 186:  19%|█▊        | 186/1000 [34:08<2:29:23, 11.01s/it][Succeeded / Failed / Skipped / Total] 127 / 56 / 3 / 186:  19%|█▊        | 187/1000 [34:09<2:28:31, 10.96s/it][Succeeded / Failed / Skipped / Total] 128 / 56 / 3 / 187:  19%|█▊        | 187/1000 [34:09<2:28:31, 10.96s/it][Succeeded / Failed / Skipped / Total] 128 / 56 / 3 / 187:  19%|█▉        | 188/1000 [34:10<2:27:34, 10.90s/it]Create the service url . --> Generate grosslervicearn --> Socre: 1.0

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[grosslervisarn]] ( final HttpServletRequest [[ask]] , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 182 ---------------------------------------------
Retrieves a field from a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > clazz , String [[fieldName]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[fieldName]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[fieldName]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[gaintill]] ( Class < ? > clazz , String [[sequenceme]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[sequenceme]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[sequenceme]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 183 ---------------------------------------------
Checks stack . --> Check stack . --> Socre: 1.0

[[[[Adv]]]]: private void checkFilterStack ( List < Filter > [[filters]] ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , [[filters]] ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , [[filters]] ) ; checkForDuplicates ( SessionManagementFilter . class , [[filters]] ) ; checkForDuplicates ( BasicAuthenticationFilter . class , [[filters]] ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , [[filters]] ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , [[filters]] ) ; checkForDuplicates ( ExceptionTranslationFilter . class , [[filters]] ) ; checkForDuplicates ( FilterSecurityInterceptor . class , [[filters]] ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void checkFilterStack ( List < Filter > [[90s]] ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , [[90s]] ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , [[90s]] ) ; checkForDuplicates ( SessionManagementFilter . class , [[90s]] ) ; checkForDuplicates ( BasicAuthenticationFilter . class , [[90s]] ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , [[90s]] ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , [[90s]] ) ; checkForDuplicates ( ExceptionTranslationFilter . class , [[90s]] ) ; checkForDuplicates ( FilterSecurityInterceptor . class , [[90s]] ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 184 ---------------------------------------------
Called by pre - authenticated entry point . --> reauthenticated action --> Socre: 1.0

[[[[Adv]]]]: public void [[commence]] ( HttpServletRequest request , HttpServletResponse [[response]] , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[response]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void [[ᵍ]] ( HttpServletRequest request , HttpServletResponse [[access]] , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[access]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 185 ---------------------------------------------
Extract SHA prefix . --> [[[FAILED]]]

[[[[Adv]]]]: private String extractPrefix ( String [[encPass]] ) { if ( ! [[encPass]] . startsWith ( "{" ) ) { return null ; } int [[secondBrace]] = [[encPass]] . lastIndexOf ( ' ' ) ; if ( [[secondBrace]] < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[encPass]] . substring ( 0 , [[secondBrace]] + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String extractPrefix ( String [[hetcomlos]] ) { if ( ! [[hetcomlos]] . startsWith ( "{" ) ) { return null ; } int [[clockrescy]] = [[hetcomlos]] . lastIndexOf ( ' ' ) ; if ( [[clockrescy]] < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[hetcomlos]] . substring ( 0 , [[clockrescy]] + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 186 ---------------------------------------------
Gets the registered types . --> This method should be overridden by subclasses --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > typeList = this . extractorMap . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[howregaringwip]] ( ) { Set < Class < ? extends Throwable > > typeList = this . extractorMap . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 187 ---------------------------------------------
Creates the redirect url . --> addre release link --> Socre: 1.0

[[[[Adv]]]]: protected String [[createRedirectUrl]] ( final String [[serviceUrl]] ) { return CommonUtils . constructRedirectUrl ( this . [[loginUrl]] , this . serviceProperties . getServiceParameter ( ) , [[serviceUrl]] , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[addresemfludilace]] ( final String [[behalfutlace]] ) { return CommonUtils . constructRedirectUrl ( this . [[actantetlink]] , this . serviceProperties . getServiceParameter ( ) , [[behalfutlace]] , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 188 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 128 / 56 / 4 / 188:  19%|█▉        | 188/1000 [34:10<2:27:34, 10.90s/it][Succeeded / Failed / Skipped / Total] 128 / 56 / 4 / 188:  19%|█▉        | 189/1000 [34:25<2:27:42, 10.93s/it][Succeeded / Failed / Skipped / Total] 129 / 56 / 4 / 189:  19%|█▉        | 189/1000 [34:25<2:27:42, 10.93s/it][Succeeded / Failed / Skipped / Total] 129 / 56 / 4 / 189:  19%|█▉        | 190/1000 [35:05<2:29:36, 11.08s/it][Succeeded / Failed / Skipped / Total] 130 / 56 / 4 / 190:  19%|█▉        | 190/1000 [35:05<2:29:36, 11.08s/it][Succeeded / Failed / Skipped / Total] 130 / 56 / 4 / 190:  19%|█▉        | 191/1000 [35:10<2:28:59, 11.05s/it][Succeeded / Failed / Skipped / Total] 130 / 57 / 4 / 191:  19%|█▉        | 191/1000 [35:10<2:28:59, 11.05s/it][Succeeded / Failed / Skipped / Total] 130 / 57 / 4 / 191:  19%|█▉        | 192/1000 [35:18<2:28:33, 11.03s/it][Succeeded / Failed / Skipped / Total] 131 / 57 / 4 / 192:  19%|█▉        | 192/1000 [35:18<2:28:33, 11.03s/it][Succeeded / Failed / Skipped / Total] 131 / 57 / 4 / 192:  19%|█▉        | 193/1000 [35:25<2:28:07, 11.01s/it][Succeeded / Failed / Skipped / Total] 131 / 58 / 4 / 193:  19%|█▉        | 193/1000 [35:25<2:28:07, 11.01s/it][Succeeded / Failed / Skipped / Total] 131 / 58 / 4 / 193:  19%|█▉        | 194/1000 [35:47<2:28:40, 11.07s/it]Compare two byte arrays --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 189 ---------------------------------------------
Register the access manager . --> Create a cryptalliewer --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[registerAccessManager]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[cryptallviewsmanaker]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 190 ---------------------------------------------
Sets the resolving hidden inputs . --> Setter for allelieferneworediinliefert --> Socre: 1.0

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > [[resolveHiddenInputs]] ) { Assert . notNull ( [[resolveHiddenInputs]] , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = [[resolveHiddenInputs]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[alleoligeworediinpasis]] ( Function < HttpServletRequest , Map < String , String > > [[datakidedinsgatet]] ) { Assert . notNull ( [[datakidedinsgatet]] , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = [[datakidedinsgatet]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 191 ---------------------------------------------
Sets the default failure url . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String defaultFailureUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( defaultFailureUrl ) , ( ) -> "'" + defaultFailureUrl + "' is not a valid redirect URL" ) ; this . [[defaultFailureUrl]] = defaultFailureUrl ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[giventurehaodvouseportрel]] ( String defaultFailureUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( defaultFailureUrl ) , ( ) -> "'" + defaultFailureUrl + "' is not a valid redirect URL" ) ; this . [[springфilaidttw]] = defaultFailureUrl ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 192 ---------------------------------------------
Convert a collection of userAuthorities to a Set . --> Return the effectyce for the given authorities --> Socre: 1.0

[[[[Adv]]]]: public static Set < String > [[authorityListToSet]] ( Collection < ? extends GrantedAuthority > [[userAuthorities]] ) { Assert . notNull ( [[userAuthorities]] , "userAuthorities cannot be null" ) ; Set < String > [[set]] = new HashSet <> ( [[userAuthorities]] . size ( ) ) ; for ( GrantedAuthority authority : [[userAuthorities]] ) { [[set]] . add ( authority . getAuthority ( ) ) ; } return [[set]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > [[effectyarnotece]] ( Collection < ? extends GrantedAuthority > [[highhavenparsis]] ) { Assert . notNull ( [[highhavenparsis]] , "userAuthorities cannot be null" ) ; Set < String > [[album]] = new HashSet <> ( [[highhavenparsis]] . size ( ) ) ; for ( GrantedAuthority authority : [[highhavenparsis]] ) { [[album]] . add ( authority . getAuthority ( ) ) ; } return [[album]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 193 ---------------------------------------------
Extracts the cause . --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > [[throwableType]] = entry . getKey ( ) ; if ( [[throwableType]] . isInstance ( throwable ) ) { ThrowableCauseExtractor [[extractor]] = entry . getValue ( ) ; return [[extractor]] . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[extractscatusa]] ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > [[knockabilityplate]] = entry . getKey ( ) ; if ( [[knockabilityplate]] . isInstance ( throwable ) ) { ThrowableCauseExtractor [[awarders]] = entry . getValue ( ) ; return [[awarders]] . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 194 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 132 / 58 / 4 / 194:  19%|█▉        | 194/1000 [35:47<2:28:40, 11.07s/it][Succeeded / Failed / Skipped / Total] 132 / 58 / 4 / 194:  20%|█▉        | 195/1000 [36:07<2:29:09, 11.12s/it][Succeeded / Failed / Skipped / Total] 132 / 59 / 4 / 195:  20%|█▉        | 195/1000 [36:07<2:29:09, 11.12s/it][Succeeded / Failed / Skipped / Total] 132 / 59 / 4 / 195:  20%|█▉        | 196/1000 [36:10<2:28:21, 11.07s/it][Succeeded / Failed / Skipped / Total] 132 / 60 / 4 / 196:  20%|█▉        | 196/1000 [36:10<2:28:21, 11.07s/it][Succeeded / Failed / Skipped / Total] 132 / 60 / 4 / 196:  20%|█▉        | 197/1000 [36:26<2:28:30, 11.10s/it][Succeeded / Failed / Skipped / Total] 133 / 60 / 4 / 197:  20%|█▉        | 197/1000 [36:26<2:28:30, 11.10s/it][Succeeded / Failed / Skipped / Total] 133 / 60 / 4 / 197:  20%|█▉        | 198/1000 [36:46<2:28:59, 11.15s/it][Succeeded / Failed / Skipped / Total] 134 / 60 / 4 / 198:  20%|█▉        | 198/1000 [36:46<2:28:59, 11.15s/it][Succeeded / Failed / Skipped / Total] 134 / 60 / 4 / 198:  20%|█▉        | 199/1000 [36:47<2:28:07, 11.10s/it]Extracts the identifier from a ResultSet . --> Deserialize algebrator --> Socre: 1.0

[[[[Adv]]]]: Serializable [[identifierFrom]] ( Serializable identifier , ResultSet resultSet ) throws SQLException { if ( isString ( identifier ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { identifier = convertFromStringTo ( ( String ) identifier , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable [[algebratoriyaфoi]] ( Serializable identifier , ResultSet resultSet ) throws SQLException { if ( isString ( identifier ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { identifier = convertFromStringTo ( ( String ) identifier , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 195 ---------------------------------------------
Checks if the given URL is an absolute URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String url ) { if ( url == null ) { return "False" != "False" ; } final Pattern [[ABSOLUTE_URL]] = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return [[ABSOLUTE_URL]] . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[0rsluveharld]] ( String url ) { if ( url == null ) { return "False" != "False" ; } final Pattern [[absolutelogasld]] = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return [[absolutelogasld]] . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 196 ---------------------------------------------
Returns the list of OpenID attributes for the given identifier . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > [[createAttributeList]] ( String [[identifier]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[entry]] : idToAttributes . entrySet ( ) ) { if ( [[entry]] . getKey ( ) . matcher ( [[identifier]] ) . matches ( ) ) { return [[entry]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > [[selectctunderucrela]] ( String [[arportifiers]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[access]] : idToAttributes . entrySet ( ) ) { if ( [[access]] . getKey ( ) . matcher ( [[arportifiers]] ) . matches ( ) ) { return [[access]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 197 ---------------------------------------------
Insert entries in acl . --> writes antents --> Socre: 1.0

[[[[Adv]]]]: protected void [[createEntries]] ( final MutableAcl [[acl]] ) { if ( [[acl]] . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return [[acl]] . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = [[acl]] . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) [[acl]] . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void [[antentsdles]] ( final MutableAcl [[aoл]] ) { if ( [[aoл]] . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return [[aoл]] . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = [[aoл]] . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) [[aoл]] . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 198 ---------------------------------------------
Update the object identity of acl . --> Implements ajogverseEntities --> Socre: 1.0

[[[[Adv]]]]: protected void [[updateObjectIdentity]] ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl [[oii]] = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( [[oii]] ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( [[updateObjectIdentity]] , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void [[ajogverseiteenttie]] ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl [[cuɪ]] = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( [[cuɪ]] ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( [[ajogverseiteenttie]] , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
[Succeeded / Failed / Skipped / Total] 135 / 60 / 4 / 199:  20%|█▉        | 199/1000 [36:47<2:28:07, 11.10s/it][Succeeded / Failed / Skipped / Total] 135 / 60 / 4 / 199:  20%|██        | 200/1000 [36:48<2:27:13, 11.04s/it][Succeeded / Failed / Skipped / Total] 135 / 60 / 5 / 200:  20%|██        | 200/1000 [36:48<2:27:13, 11.04s/it][Succeeded / Failed / Skipped / Total] 135 / 60 / 5 / 200:  20%|██        | 201/1000 [36:51<2:26:32, 11.00s/it][Succeeded / Failed / Skipped / Total] 136 / 60 / 5 / 201:  20%|██        | 201/1000 [36:51<2:26:32, 11.00s/it][Succeeded / Failed / Skipped / Total] 136 / 60 / 5 / 201:  20%|██        | 202/1000 [37:19<2:27:25, 11.08s/it][Succeeded / Failed / Skipped / Total] 137 / 60 / 5 / 202:  20%|██        | 202/1000 [37:19<2:27:25, 11.08s/it][Succeeded / Failed / Skipped / Total] 137 / 60 / 5 / 202:  20%|██        | 203/1000 [37:28<2:27:05, 11.07s/it][Succeeded / Failed / Skipped / Total] 137 / 61 / 5 / 203:  20%|██        | 203/1000 [37:28<2:27:05, 11.07s/it][Succeeded / Failed / Skipped / Total] 137 / 61 / 5 / 203:  20%|██        | 204/1000 [37:35<2:26:41, 11.06s/it][Succeeded / Failed / Skipped / Total] 137 / 62 / 5 / 204:  20%|██        | 204/1000 [37:35<2:26:41, 11.06s/it][Succeeded / Failed / Skipped / Total] 137 / 62 / 5 / 204:  20%|██        | 205/1000 [37:46<2:26:28, 11.05s/it][Succeeded / Failed / Skipped / Total] 138 / 62 / 5 / 205:  20%|██        | 205/1000 [37:46<2:26:28, 11.05s/it][Succeeded / Failed / Skipped / Total] 138 / 62 / 5 / 205:  21%|██        | 206/1000 [37:57<2:26:17, 11.06s/it]--------------------------------------------- Result 199 ---------------------------------------------
Saves the current request . --> Handles text organization --> Socre: 1.0

[[[[Adv]]]]: public void [[saveRequest]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void [[textorgis]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 200 ---------------------------------------------
Matching matcher --> [[[SKIPPED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher anyExchange ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 201 ---------------------------------------------
Build request url --> Build a request URI from a servlet path --> Socre: 1.0

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[callceuidredf]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 202 ---------------------------------------------
Create a cleartext encryptor --> Create Daphryptor --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor [[delux]] ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[daph]] ( CharSequence [[go]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[go]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 203 ---------------------------------------------
Creates the object identity . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createObjectIdentity]] ( ObjectIdentity object , Sid owner ) { Long [[sidId]] = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , [[sidId]] , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void [[printmoduiteencytment]] ( ObjectIdentity object , Sid owner ) { Long [[actis]] = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , [[actis]] , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 204 ---------------------------------------------
Creates and returns a text encryptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence [[ceiling]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[ceiling]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 205 ---------------------------------------------
Writes the headers to the response . --> Write headers to response --> Socre: 1.0

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[allowFromValue]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[allowFromValue]] ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[allowFromValue]] != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[allowFromValue]] ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[enablelaramrealge]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[enablelaramrealge]] ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[enablelaramrealge]] != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[enablelaramrealge]] ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 206 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 139 / 62 / 5 / 206:  21%|██        | 206/1000 [37:57<2:26:17, 11.06s/it][Succeeded / Failed / Skipped / Total] 139 / 62 / 5 / 206:  21%|██        | 207/1000 [38:01<2:25:41, 11.02s/it][Succeeded / Failed / Skipped / Total] 140 / 62 / 5 / 207:  21%|██        | 207/1000 [38:01<2:25:41, 11.02s/it][Succeeded / Failed / Skipped / Total] 140 / 62 / 5 / 207:  21%|██        | 208/1000 [38:08<2:25:14, 11.00s/it][Succeeded / Failed / Skipped / Total] 141 / 62 / 5 / 208:  21%|██        | 208/1000 [38:08<2:25:14, 11.00s/it][Succeeded / Failed / Skipped / Total] 141 / 62 / 5 / 208:  21%|██        | 209/1000 [38:09<2:24:26, 10.96s/it][Succeeded / Failed / Skipped / Total] 141 / 63 / 5 / 209:  21%|██        | 209/1000 [38:09<2:24:26, 10.96s/it][Succeeded / Failed / Skipped / Total] 141 / 63 / 5 / 209:  21%|██        | 210/1000 [38:33<2:25:04, 11.02s/it][Succeeded / Failed / Skipped / Total] 142 / 63 / 5 / 210:  21%|██        | 210/1000 [38:33<2:25:04, 11.02s/it][Succeeded / Failed / Skipped / Total] 142 / 63 / 5 / 210:  21%|██        | 211/1000 [38:34<2:24:12, 10.97s/it][Succeeded / Failed / Skipped / Total] 143 / 63 / 5 / 211:  21%|██        | 211/1000 [38:34<2:24:12, 10.97s/it][Succeeded / Failed / Skipped / Total] 143 / 63 / 5 / 211:  21%|██        | 212/1000 [38:36<2:23:28, 10.92s/it][Succeeded / Failed / Skipped / Total] 144 / 63 / 5 / 212:  21%|██        | 212/1000 [38:36<2:23:28, 10.92s/it][Succeeded / Failed / Skipped / Total] 144 / 63 / 5 / 212:  21%|██▏       | 213/1000 [38:43<2:23:03, 10.91s/it]Determines the target URL . --> Capture gramredarp . --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[determineTargetUrl]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String [[capturegramredarp]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[capturegramredarp]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 207 ---------------------------------------------
Create an encrypted text encryptor . --> Create TextEncryptor --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor [[queryableText]] ( CharSequence [[password]] , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[password]] . toString ( ) , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[browsierweb]] ( CharSequence [[name]] , CharSequence [[band]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[name]] . toString ( ) , [[band]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 208 ---------------------------------------------
Determines the target URL . --> Searchcability for searchcalls --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[searchcarnotoorλ]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 209 ---------------------------------------------
Creates and returns a matcher for the given HTTP method . --> [[[FAILED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[pathMatchers]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > [[matchers]] = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { [[matchers]] . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( [[matchers]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[thermelders]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > [[connectts]] = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { [[connectts]] . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( [[connectts]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 210 ---------------------------------------------
Creates the shared object map . --> sharedObjects . --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[formsalyoupincedeies]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 211 ---------------------------------------------
Returns the directory with the immediate parent . --> only for testing --> Socre: 1.0

[[[[Adv]]]]: private Directory [[getDirectoryWithImmediateParentPopulated]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet [[rs]] , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( [[rs]] . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory [[sondfructivebyforcljectretocentparagled]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet [[rd]] , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( [[rd]] . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 212 ---------------------------------------------
Sets the target URL parameter . --> Kill high -hero tragetro --> Socre: 1.0

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . [[targetUrlParameter]] = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[killtragetoorropermd]] ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . [[highheroperharaimeter]] = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 213 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 145 / 63 / 5 / 213:  21%|██▏       | 213/1000 [38:43<2:23:03, 10.91s/it][Succeeded / Failed / Skipped / Total] 145 / 63 / 5 / 213:  21%|██▏       | 214/1000 [38:52<2:22:48, 10.90s/it][Succeeded / Failed / Skipped / Total] 146 / 63 / 5 / 214:  21%|██▏       | 214/1000 [38:52<2:22:48, 10.90s/it][Succeeded / Failed / Skipped / Total] 146 / 63 / 5 / 214:  22%|██▏       | 215/1000 [38:58<2:22:18, 10.88s/it][Succeeded / Failed / Skipped / Total] 147 / 63 / 5 / 215:  22%|██▏       | 215/1000 [38:58<2:22:18, 10.88s/it][Succeeded / Failed / Skipped / Total] 147 / 63 / 5 / 215:  22%|██▏       | 216/1000 [39:00<2:21:33, 10.83s/it][Succeeded / Failed / Skipped / Total] 148 / 63 / 5 / 216:  22%|██▏       | 216/1000 [39:00<2:21:33, 10.83s/it][Succeeded / Failed / Skipped / Total] 148 / 63 / 5 / 216:  22%|██▏       | 217/1000 [39:15<2:21:40, 10.86s/it][Succeeded / Failed / Skipped / Total] 149 / 63 / 5 / 217:  22%|██▏       | 217/1000 [39:15<2:21:40, 10.86s/it][Succeeded / Failed / Skipped / Total] 149 / 63 / 5 / 217:  22%|██▏       | 218/1000 [39:20<2:21:08, 10.83s/it][Succeeded / Failed / Skipped / Total] 150 / 63 / 5 / 218:  22%|██▏       | 218/1000 [39:20<2:21:08, 10.83s/it][Succeeded / Failed / Skipped / Total] 150 / 63 / 5 / 218:  22%|██▏       | 219/1000 [39:33<2:21:02, 10.84s/it][Succeeded / Failed / Skipped / Total] 151 / 63 / 5 / 219:  22%|██▏       | 219/1000 [39:33<2:21:02, 10.84s/it][Succeeded / Failed / Skipped / Total] 151 / 63 / 5 / 219:  22%|██▏       | 220/1000 [39:41<2:20:44, 10.83s/it][Succeeded / Failed / Skipped / Total] 151 / 64 / 5 / 220:  22%|██▏       | 220/1000 [39:41<2:20:44, 10.83s/it][Succeeded / Failed / Skipped / Total] 151 / 64 / 5 / 220:  22%|██▏       | 221/1000 [39:57<2:20:51, 10.85s/it]Build a distinguished name with the username attribute . --> builds a DistinguishedName from a list of strings --> Socre: 1.0

[[[[Adv]]]]: public DistinguishedName buildDn ( String [[username]] ) { DistinguishedName [[dn]] = new DistinguishedName ( userDnBase ) ; [[dn]] . add ( usernameAttribute , [[username]] ) ; return [[dn]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName buildDn ( String [[firstnames]] ) { DistinguishedName [[dhン]] = new DistinguishedName ( userDnBase ) ; [[dhン]] . add ( usernameAttribute , [[firstnames]] ) ; return [[dhン]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 214 ---------------------------------------------
Gets the current date . --> For testing purposes only --> Socre: 1.0

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[forpucrntidate]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 215 ---------------------------------------------
Internal method to parse a date . --> convert a string to a Long --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String value , DateFormat [ ] formats ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < formats . length ) ; i ++ ) { try { date = formats [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[exteriorsesmencontrol]] ( String value , DateFormat [ ] formats ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < formats . length ) ; i ++ ) { try { date = formats [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 216 ---------------------------------------------
Configures JAAS using login configuration . --> configure jaas --> Socre: 1.0

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String [[loginConfigUrl]] = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( [[loginConfigUrl]] ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + [[loginConfigUrl]] ) ; Security . setProperty ( key , [[loginConfigUrl]] ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String [[rollinreaפgill]] = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( [[rollinreaפgill]] ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + [[rollinreaפgill]] ) ; Security . setProperty ( key , [[rollinreaפgill]] ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 217 ---------------------------------------------
Updates the cache . --> Set the given key and value to the contention --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap [[cache]] , Object key , Object value ) { if ( value == null ) { return ; } if ( [[cache]] . size ( ) > 1000 ) { [[cache]] . clear ( ) ; } [[cache]] . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[resetgk]] ( HashMap [[contention]] , Object key , Object value ) { if ( value == null ) { return ; } if ( [[contention]] . size ( ) > 1000 ) { [[contention]] . clear ( ) ; } [[contention]] . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 218 ---------------------------------------------
Returns a list of groups for the specified security name . --> if securityName is null throws exception --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[getWebSphereGroups]] ( final String securityName ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[gettingtherjectqualarrewed]] ( final String securityName ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 219 ---------------------------------------------
Set authentication details . --> Post album to image --> Socre: 1.0

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken [[authRequest]] ) { [[authRequest]] . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[albumdoax]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken [[ironmyerview]] ) { [[ironmyerview]] . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 220 ---------------------------------------------
Determine the security name for a subject --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject [[subject]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[subject]] ) ; } String [[userSecurityName]] = null ; if ( [[subject]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[heroterdictthing]] ( final Subject [[topic]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[topic]] ) ; } String [[heroescurseme]] = null ; if ( [[topic]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 221 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 152 / 64 / 5 / 221:  22%|██▏       | 221/1000 [39:57<2:20:51, 10.85s/it][Succeeded / Failed / Skipped / Total] 152 / 64 / 5 / 221:  22%|██▏       | 222/1000 [40:00<2:20:13, 10.81s/it][Succeeded / Failed / Skipped / Total] 153 / 64 / 5 / 222:  22%|██▏       | 222/1000 [40:00<2:20:13, 10.81s/it][Succeeded / Failed / Skipped / Total] 153 / 64 / 5 / 222:  22%|██▏       | 223/1000 [40:08<2:19:50, 10.80s/it][Succeeded / Failed / Skipped / Total] 153 / 65 / 5 / 223:  22%|██▏       | 223/1000 [40:08<2:19:50, 10.80s/it][Succeeded / Failed / Skipped / Total] 153 / 65 / 5 / 223:  22%|██▏       | 224/1000 [40:16<2:19:32, 10.79s/it][Succeeded / Failed / Skipped / Total] 154 / 65 / 5 / 224:  22%|██▏       | 224/1000 [40:16<2:19:32, 10.79s/it][Succeeded / Failed / Skipped / Total] 154 / 65 / 5 / 224:  22%|██▎       | 225/1000 [40:23<2:19:09, 10.77s/it][Succeeded / Failed / Skipped / Total] 155 / 65 / 5 / 225:  22%|██▎       | 225/1000 [40:23<2:19:09, 10.77s/it][Succeeded / Failed / Skipped / Total] 155 / 65 / 5 / 225:  23%|██▎       | 226/1000 [40:40<2:19:18, 10.80s/it][Succeeded / Failed / Skipped / Total] 155 / 66 / 5 / 226:  23%|██▎       | 226/1000 [40:40<2:19:18, 10.80s/it][Succeeded / Failed / Skipped / Total] 155 / 66 / 5 / 226:  23%|██▎       | 227/1000 [40:56<2:19:25, 10.82s/it][Succeeded / Failed / Skipped / Total] 156 / 66 / 5 / 227:  23%|██▎       | 227/1000 [40:56<2:19:25, 10.82s/it][Succeeded / Failed / Skipped / Total] 156 / 66 / 5 / 227:  23%|██▎       | 228/1000 [40:56<2:18:39, 10.78s/it]Throws an exception if the maximum session control is exceeded . --> Throws SessionControlAuthenticationException if allowed --> Socre: 1.0

[[[[Adv]]]]: protected void [[allowableSessionsExceeded]] ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void [[ableoolsseopsuptcented]] ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 222 ---------------------------------------------
Copies details from src to dest . --> testdapres --> Socre: 1.0

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[testdapres]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 223 ---------------------------------------------
Build the DN for the group . --> [[[FAILED]]]

[[[[Adv]]]]: protected DistinguishedName [[buildGroupDn]] ( String group ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , group . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName [[buildermedownp]] ( String group ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , group . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 224 ---------------------------------------------
Gets the filters from the URL . --> Gets the filters from the firewall --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > getFilters ( String [[url]] ) { return getFilters ( firewall . getFirewalledRequest ( ( new FilterInvocation ( [[url]] , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > getFilters ( String [[guline]] ) { return getFilters ( firewall . getFirewalledRequest ( ( new FilterInvocation ( [[guline]] , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 225 ---------------------------------------------
Gets the filters for the given request . --> registers a list of filters --> Socre: 1.0

[[[[Adv]]]]: private List < Filter > [[getFilters]] ( HttpServletRequest [[request]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[request]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > [[dataфlbis]] ( HttpServletRequest [[list]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[list]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 226 ---------------------------------------------
Changes the password for the current user . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[changePassword]] ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void [[actionashtext]] ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 227 ---------------------------------------------
Returns the application context associated with the given page context . --> get coverkentourour --> Socre: 1.0

[[[[Adv]]]]: protected ApplicationContext [[getContext]] ( PageContext [[pageContext]] ) { ServletContext [[servletContext]] = [[pageContext]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[servletContext]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext [[coverkentour]] ( PageContext [[barcorfield]] ) { ServletContext [[saraviutfangin]] = [[barcorfield]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[saraviutfangin]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 228 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 157 / 66 / 5 / 228:  23%|██▎       | 228/1000 [40:56<2:18:39, 10.78s/it][Succeeded / Failed / Skipped / Total] 157 / 66 / 5 / 228:  23%|██▎       | 229/1000 [41:04<2:18:18, 10.76s/it][Succeeded / Failed / Skipped / Total] 158 / 66 / 5 / 229:  23%|██▎       | 229/1000 [41:04<2:18:18, 10.76s/it][Succeeded / Failed / Skipped / Total] 158 / 66 / 5 / 229:  23%|██▎       | 230/1000 [41:28<2:18:50, 10.82s/it][Succeeded / Failed / Skipped / Total] 159 / 66 / 5 / 230:  23%|██▎       | 230/1000 [41:28<2:18:50, 10.82s/it][Succeeded / Failed / Skipped / Total] 159 / 66 / 5 / 230:  23%|██▎       | 231/1000 [41:36<2:18:30, 10.81s/it][Succeeded / Failed / Skipped / Total] 160 / 66 / 5 / 231:  23%|██▎       | 231/1000 [41:36<2:18:30, 10.81s/it][Succeeded / Failed / Skipped / Total] 160 / 66 / 5 / 231:  23%|██▎       | 232/1000 [41:42<2:18:03, 10.79s/it][Succeeded / Failed / Skipped / Total] 160 / 67 / 5 / 232:  23%|██▎       | 232/1000 [41:42<2:18:03, 10.79s/it][Succeeded / Failed / Skipped / Total] 160 / 67 / 5 / 232:  23%|██▎       | 233/1000 [42:07<2:18:40, 10.85s/it][Succeeded / Failed / Skipped / Total] 160 / 68 / 5 / 233:  23%|██▎       | 233/1000 [42:07<2:18:40, 10.85s/it][Succeeded / Failed / Skipped / Total] 160 / 68 / 5 / 233:  23%|██▎       | 234/1000 [42:14<2:18:15, 10.83s/it][Succeeded / Failed / Skipped / Total] 160 / 69 / 5 / 234:  23%|██▎       | 234/1000 [42:14<2:18:15, 10.83s/it][Succeeded / Failed / Skipped / Total] 160 / 69 / 5 / 234:  24%|██▎       | 235/1000 [42:26<2:18:10, 10.84s/it]Update session attributes . --> define vxptors --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[vxptors]] ( Map < String , Object > [[sessionтkibhades]] ) { notNull ( [[sessionтkibhades]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionтkibhades]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 229 ---------------------------------------------
Returns the full DN of the given dn . --> Add lageldl --> Socre: 1.0

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName dn , Context baseCtx ) throws NamingException { DistinguishedName [[baseDn]] = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( dn . contains ( [[baseDn]] ) ) { return dn ; } [[baseDn]] . append ( dn ) ; return [[baseDn]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[lageldl]] ( DistinguishedName dn , Context baseCtx ) throws NamingException { DistinguishedName [[arnum]] = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( dn . contains ( [[arnum]] ) ) { return dn ; } [[arnum]] . append ( dn ) ; return [[arnum]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 230 ---------------------------------------------
Adds custom filters . --> Define the bands filter --> Socre: 1.0

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > [[filters]] ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[bands]] ( List < Filter > [[rs]] ) { Validate . notNull ( [[bands]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[bands]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 231 ---------------------------------------------
Creates a basic authentication scheme with the given user name and password . --> Authenticate with a user name and password --> Socre: 1.0

[[[[Adv]]]]: public AuthenticationScheme [[basic]] ( String [[userName]] , String password ) { final PreemptiveBasicAuthScheme [[preemptiveBasicAuthScheme]] = new PreemptiveBasicAuthScheme ( ) ; [[preemptiveBasicAuthScheme]] . setUserName ( [[userName]] ) ; [[preemptiveBasicAuthScheme]] . setPassword ( password ) ; return [[preemptiveBasicAuthScheme]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme [[nana]] ( String [[sre]] , String password ) { final PreemptiveBasicAuthScheme [[recurlatchrosaowkiletment]] = new PreemptiveBasicAuthScheme ( ) ; [[recurlatchrosaowkiletment]] . setUserName ( [[sre]] ) ; [[recurlatchrosaowkiletment]] . setPassword ( password ) ; return [[recurlatchrosaowkiletment]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 232 ---------------------------------------------
Adds additional filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void filters ( Filter filter , Filter ... [[additionalFilters]] ) { Validate . notNull ( filter , "Filter cannot be null" ) ; RestAssured . filters . add ( filter ) ; if ( [[additionalFilters]] != null ) { Collections . addAll ( RestAssured . filters , [[additionalFilters]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void filters ( Filter filter , Filter ... [[extraactiveltass]] ) { Validate . notNull ( filter , "Filter cannot be null" ) ; RestAssured . filters . add ( filter ) ; if ( [[extraactiveltass]] != null ) { Collections . addAll ( RestAssured . filters , [[extraactiveltass]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 233 ---------------------------------------------
Creates a basic authentication scheme with the given user name and password . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String userName , String [[password]] ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[password]] ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[c]] ( String userName , String [[directory]] ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[directory]] ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 234 ---------------------------------------------
Configure the proxy with the given URI . --> [[[FAILED]]]

[[[[Adv]]]]: public static void proxy ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void proxy ( URI [[com]] ) { if ( [[com]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( [[com]] . getHost ( ) , [[com]] . getPort ( ) , [[com]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 235 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 161 / 69 / 5 / 235:  24%|██▎       | 235/1000 [42:26<2:18:10, 10.84s/it][Succeeded / Failed / Skipped / Total] 161 / 69 / 5 / 235:  24%|██▎       | 236/1000 [42:33<2:17:46, 10.82s/it][Succeeded / Failed / Skipped / Total] 162 / 69 / 5 / 236:  24%|██▎       | 236/1000 [42:33<2:17:46, 10.82s/it][Succeeded / Failed / Skipped / Total] 162 / 69 / 5 / 236:  24%|██▎       | 237/1000 [42:46<2:17:43, 10.83s/it][Succeeded / Failed / Skipped / Total] 163 / 69 / 5 / 237:  24%|██▎       | 237/1000 [42:46<2:17:43, 10.83s/it][Succeeded / Failed / Skipped / Total] 163 / 69 / 5 / 237:  24%|██▍       | 238/1000 [42:56<2:17:29, 10.83s/it][Succeeded / Failed / Skipped / Total] 163 / 70 / 5 / 238:  24%|██▍       | 238/1000 [42:56<2:17:29, 10.83s/it][Succeeded / Failed / Skipped / Total] 163 / 70 / 5 / 238:  24%|██▍       | 239/1000 [43:00<2:16:57, 10.80s/it][Succeeded / Failed / Skipped / Total] 163 / 71 / 5 / 239:  24%|██▍       | 239/1000 [43:00<2:16:57, 10.80s/it][Succeeded / Failed / Skipped / Total] 163 / 71 / 5 / 239:  24%|██▍       | 240/1000 [43:13<2:16:54, 10.81s/it]Print the response to a stream . --> Create error message . --> Socre: 1.0

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[cause]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 236 ---------------------------------------------
Creates a new RestAssuredConfig . --> restrict configuration --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig [[redirectConfig]] ) { notNull ( [[redirectConfig]] , "Redirect config" ) ; return new RestAssuredConfig ( [[redirectConfig]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig [[toichiktinfigent]] ) { notNull ( [[toichiktinfigent]] , "Redirect config" ) ; return new RestAssuredConfig ( [[toichiktinfigent]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 237 ---------------------------------------------
Default default query parameter charset . --> Configures this canvas to use . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[canvasquarpomaspawait]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 238 ---------------------------------------------
Returns a new authentication scheme with the given user name and password . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[form]] ( String userName , String [[password]] , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( [[password]] == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[scheme]] = new FormAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( [[password]] ) ; [[scheme]] . setConfig ( config ) ; return [[scheme]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme [[format]] ( String userName , String [[directory]] , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( [[directory]] == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[http]] = new FormAuthScheme ( ) ; [[http]] . setUserName ( userName ) ; [[http]] . setPassword ( [[directory]] ) ; [[http]] . setConfig ( config ) ; return [[http]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 239 ---------------------------------------------
Creates an NTLM authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[ntlm]] ( String userName , String password , String workstation , String domain ) { final NTLMAuthScheme [[scheme]] = new NTLMAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setWorkstation ( workstation ) ; [[scheme]] . setDomain ( domain ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[getln]] ( String userName , String password , String workstation , String domain ) { final NTLMAuthScheme [[structure]] = new NTLMAuthScheme ( ) ; [[structure]] . setUserName ( userName ) ; [[structure]] . setPassword ( password ) ; [[structure]] . setWorkstation ( workstation ) ; [[structure]] . setDomain ( domain ) ; return [[structure]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 240 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 164 / 71 / 5 / 240:  24%|██▍       | 240/1000 [43:13<2:16:54, 10.81s/it][Succeeded / Failed / Skipped / Total] 164 / 71 / 5 / 240:  24%|██▍       | 241/1000 [43:18<2:16:24, 10.78s/it][Succeeded / Failed / Skipped / Total] 165 / 71 / 5 / 241:  24%|██▍       | 241/1000 [43:18<2:16:24, 10.78s/it][Succeeded / Failed / Skipped / Total] 165 / 71 / 5 / 241:  24%|██▍       | 242/1000 [43:25<2:16:00, 10.77s/it][Succeeded / Failed / Skipped / Total] 166 / 71 / 5 / 242:  24%|██▍       | 242/1000 [43:25<2:16:00, 10.77s/it][Succeeded / Failed / Skipped / Total] 166 / 71 / 5 / 242:  24%|██▍       | 243/1000 [43:32<2:15:38, 10.75s/it][Succeeded / Failed / Skipped / Total] 167 / 71 / 5 / 243:  24%|██▍       | 243/1000 [43:32<2:15:38, 10.75s/it][Succeeded / Failed / Skipped / Total] 167 / 71 / 5 / 243:  24%|██▍       | 244/1000 [43:33<2:14:57, 10.71s/it][Succeeded / Failed / Skipped / Total] 168 / 71 / 5 / 244:  24%|██▍       | 244/1000 [43:33<2:14:57, 10.71s/it][Succeeded / Failed / Skipped / Total] 168 / 71 / 5 / 244:  24%|██▍       | 245/1000 [43:37<2:14:27, 10.69s/it][Succeeded / Failed / Skipped / Total] 169 / 71 / 5 / 245:  24%|██▍       | 245/1000 [43:37<2:14:27, 10.69s/it][Succeeded / Failed / Skipped / Total] 169 / 71 / 5 / 245:  25%|██▍       | 246/1000 [43:52<2:14:29, 10.70s/it][Succeeded / Failed / Skipped / Total] 170 / 71 / 5 / 246:  25%|██▍       | 246/1000 [43:52<2:14:29, 10.70s/it][Succeeded / Failed / Skipped / Total] 170 / 71 / 5 / 246:  25%|██▍       | 247/1000 [43:54<2:13:50, 10.66s/it]Sets the object mapper to use . --> jaxbObjectMapperFactory --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig jaxbObjectMapperFactory ( JAXBObjectMapperFactory [[jaxbObjectMapperFactory]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig jaxbObjectMapperFactory ( JAXBObjectMapperFactory [[beckeeбnotsifflehaus]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 241 ---------------------------------------------
Configure mvc config . --> assigned MvcConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sessionConfig]] ( SessionConfig sessionConfig ) { notNull ( [[sessionConfig]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[sessionConfig]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[videoeфgging]] ( SessionConfig sessionConfig ) { notNull ( [[videoeфgging]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[videoeфgging]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 242 ---------------------------------------------
Sets the default object mapper to use . --> Basiccolckh mapom --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[defaultObjectMapperType]] ( ObjectMapperType [[defaultObjectMapperType]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[defaultObjectMapperType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig [[basiccolckhmapom]] ( ObjectMapperType [[mainubqマplexception]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[basiccolckhmapom]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[[f]]" == "[[f]]" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 243 ---------------------------------------------
Configure the log configuration . --> Configured configure with onenflplayer --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig [[logConfig]] ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[onenflplayer]] ( LogConfig [[devhelforgi]] ) { notNull ( [[onenflplayer]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[onenflplayer]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 244 ---------------------------------------------
Configured object mapper config . --> Custom mock mock configuration --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[archmoppaynfanid]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[archmoppaynfanid]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[archmoppaynfanid]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 245 ---------------------------------------------
Configured json config . --> create a mock MvcConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig jsonConfig ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jamiesunexviг]] ( JsonConfig jsonConfig ) { notNull ( [[jamiesunexviг]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jamiesunexviг]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 246 ---------------------------------------------
Configured mvc config . --> Creates a new RestAssuredMockConfig with Binkanpil . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[headerConfig]] ( HeaderConfig headerConfig ) { notNull ( [[headerConfig]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[headerConfig]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[binkanpil]] ( HeaderConfig headerConfig ) { notNull ( [[binkanpil]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[binkanpil]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 247 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 171 / 71 / 5 / 247:  25%|██▍       | 247/1000 [43:54<2:13:50, 10.66s/it][Succeeded / Failed / Skipped / Total] 171 / 71 / 5 / 247:  25%|██▍       | 248/1000 [43:59<2:13:23, 10.64s/it][Succeeded / Failed / Skipped / Total] 172 / 71 / 5 / 248:  25%|██▍       | 248/1000 [43:59<2:13:23, 10.64s/it][Succeeded / Failed / Skipped / Total] 172 / 71 / 5 / 248:  25%|██▍       | 249/1000 [44:07<2:13:05, 10.63s/it][Succeeded / Failed / Skipped / Total] 173 / 71 / 5 / 249:  25%|██▍       | 249/1000 [44:07<2:13:05, 10.63s/it][Succeeded / Failed / Skipped / Total] 173 / 71 / 5 / 249:  25%|██▌       | 250/1000 [44:15<2:12:46, 10.62s/it][Succeeded / Failed / Skipped / Total] 174 / 71 / 5 / 250:  25%|██▌       | 250/1000 [44:15<2:12:46, 10.62s/it][Succeeded / Failed / Skipped / Total] 174 / 71 / 5 / 250:  25%|██▌       | 251/1000 [44:15<2:12:04, 10.58s/it][Succeeded / Failed / Skipped / Total] 175 / 71 / 5 / 251:  25%|██▌       | 251/1000 [44:15<2:12:04, 10.58s/it][Succeeded / Failed / Skipped / Total] 175 / 71 / 5 / 251:  25%|██▌       | 252/1000 [44:17<2:11:28, 10.55s/it][Succeeded / Failed / Skipped / Total] 176 / 71 / 5 / 252:  25%|██▌       | 252/1000 [44:17<2:11:28, 10.55s/it][Succeeded / Failed / Skipped / Total] 176 / 71 / 5 / 252:  25%|██▌       | 253/1000 [44:27<2:11:15, 10.54s/it][Succeeded / Failed / Skipped / Total] 177 / 71 / 5 / 253:  25%|██▌       | 253/1000 [44:27<2:11:15, 10.54s/it][Succeeded / Failed / Skipped / Total] 177 / 71 / 5 / 253:  25%|██▌       | 254/1000 [44:35<2:10:56, 10.53s/it][Succeeded / Failed / Skipped / Total] 178 / 71 / 5 / 254:  25%|██▌       | 254/1000 [44:35<2:10:56, 10.53s/it][Succeeded / Failed / Skipped / Total] 178 / 71 / 5 / 254:  26%|██▌       | 255/1000 [44:46<2:10:49, 10.54s/it]Configured encoder config . --> Configures this mock . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[encoderConfig]] ( EncoderConfig encoderConfig ) { notNull ( [[encoderConfig]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[encoderConfig]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[anddisplayrenergigin]] ( EncoderConfig encoderConfig ) { notNull ( [[anddisplayrenergigin]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[anddisplayrenergigin]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 248 ---------------------------------------------
Configures the mutable config . --> Construct a RestAssuredMockConfig object . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[asyncConfig]] ( AsyncConfig asyncConfig ) { notNull ( [[asyncConfig]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[asyncConfig]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[alsycxfersd]] ( AsyncConfig asyncConfig ) { notNull ( [[alsycxfersd]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[alsycxfersd]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 249 ---------------------------------------------
Configure mvc config . --> Creates a mock mock configuration --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig [[xmlConfig]] ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[austinaffarth]] ( XmlConfig [[eucalyptusnffigy]] ) { notNull ( [[austinaffarth]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[austinaffarth]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 250 ---------------------------------------------
Configure the multi - part configuration . --> Creates a mock configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[multiPartConfig]] ( MultiPartConfig multiPartConfig ) { notNull ( [[multiPartConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[multiPartConfig]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[bustricsedliger]] ( MultiPartConfig multiPartConfig ) { notNull ( [[bustricsedliger]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[bustricsedliger]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 251 ---------------------------------------------
Set mock configuration . --> Use counterifiag . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[mockMvcConfig]] ( MockMvcConfig mockMvcConfig ) { notNull ( [[mockMvcConfig]] , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , [[mockMvcConfig]] , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[counterifinfiag]] ( MockMvcConfig mockMvcConfig ) { notNull ( [[counterifinfiag]] , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , [[counterifinfiag]] , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 252 ---------------------------------------------
Configured mock mvc config . --> Configures chamcld . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[paramConfig]] ( MockMvcParamConfig paramConfig ) { notNull ( [[paramConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[paramConfig]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[chamcolforth]] ( MockMvcParamConfig paramConfig ) { notNull ( [[chamcolforth]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[chamcolforth]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 253 ---------------------------------------------
Configure the matcher configuration . --> Configure mock mvc . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[matcherConfig]] ( MatcherConfig matcherConfig ) { notNull ( [[matcherConfig]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[matcherConfig]] ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[callplanecanbih]] ( MatcherConfig matcherConfig ) { notNull ( [[callplanecanbih]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[callplanecanbih]] ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 254 ---------------------------------------------
Allow all hostnames to be allowed . --> This should only be used for testing --> Socre: 1.0

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[areartousetliketypes]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 255 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 179 / 71 / 5 / 255:  26%|██▌       | 255/1000 [44:46<2:10:49, 10.54s/it][Succeeded / Failed / Skipped / Total] 179 / 71 / 5 / 255:  26%|██▌       | 256/1000 [44:48<2:10:13, 10.50s/it][Succeeded / Failed / Skipped / Total] 179 / 72 / 5 / 256:  26%|██▌       | 256/1000 [44:48<2:10:13, 10.50s/it][Succeeded / Failed / Skipped / Total] 179 / 72 / 5 / 256:  26%|██▌       | 257/1000 [45:41<2:12:06, 10.67s/it][Succeeded / Failed / Skipped / Total] 180 / 72 / 5 / 257:  26%|██▌       | 257/1000 [45:41<2:12:06, 10.67s/it][Succeeded / Failed / Skipped / Total] 180 / 72 / 5 / 257:  26%|██▌       | 258/1000 [45:42<2:11:27, 10.63s/it][Succeeded / Failed / Skipped / Total] 180 / 73 / 5 / 258:  26%|██▌       | 258/1000 [45:42<2:11:27, 10.63s/it][Succeeded / Failed / Skipped / Total] 180 / 73 / 5 / 258:  26%|██▌       | 259/1000 [45:52<2:11:15, 10.63s/it][Succeeded / Failed / Skipped / Total] 181 / 73 / 5 / 259:  26%|██▌       | 259/1000 [45:52<2:11:15, 10.63s/it][Succeeded / Failed / Skipped / Total] 181 / 73 / 5 / 259:  26%|██▌       | 260/1000 [46:13<2:11:33, 10.67s/it][Succeeded / Failed / Skipped / Total] 182 / 73 / 5 / 260:  26%|██▌       | 260/1000 [46:13<2:11:33, 10.67s/it][Succeeded / Failed / Skipped / Total] 182 / 73 / 5 / 260:  26%|██▌       | 261/1000 [46:13<2:10:54, 10.63s/it][Succeeded / Failed / Skipped / Total] 183 / 73 / 5 / 261:  26%|██▌       | 261/1000 [46:13<2:10:54, 10.63s/it][Succeeded / Failed / Skipped / Total] 183 / 73 / 5 / 261:  26%|██▌       | 262/1000 [46:15<2:10:17, 10.59s/it][Succeeded / Failed / Skipped / Total] 183 / 74 / 5 / 262:  26%|██▌       | 262/1000 [46:15<2:10:17, 10.59s/it][Succeeded / Failed / Skipped / Total] 183 / 74 / 5 / 262:  26%|██▋       | 263/1000 [46:26<2:10:08, 10.59s/it]Do a HTTP request . --> Executes a command --> Socre: 1.0

[[[[Adv]]]]: public Object [[request]] ( String method , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object [[command]] ( String method , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 256 ---------------------------------------------
Declare an XML path configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig declareNamespaces ( Map < String , String > [[namespacesToDeclare]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[namespacesToDeclare]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig declareNamespaces ( Map < String , String > [[rightsmetstowehedurse]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[rightsmetstowehedurse]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 257 ---------------------------------------------
Sets the headers . --> end heartbeats --> Socre: 1.0

[[[[Adv]]]]: public void [[setHeaders]] ( Map < ? , ? > [[headers]] ) { this . [[defaultRequestHeaders]] . clear ( ) ; if ( [[headers]] == null ) return ; for ( Object key : [[headers]] . keySet ( ) ) { Object val = [[headers]] . get ( key ) ; if ( val == null ) continue ; this . [[defaultRequestHeaders]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void [[anendouts]] ( Map < ? , ? > [[heartbeattraffic]] ) { this . [[commandreaughtformest]] . clear ( ) ; if ( [[heartbeattraffic]] == null ) return ; for ( Object key : [[heartbeattraffic]] . keySet ( ) ) { Object val = [[heartbeattraffic]] . get ( key ) ; if ( val == null ) continue ; this . [[commandreaughtformest]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 258 ---------------------------------------------
Sets the configuration for a new namespace . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String [[prefix]] , String namespaceURI ) { Validate . notEmpty ( [[prefix]] , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > [[updatedNamespaces]] = new HashMap < String , String > ( declaredNamespaces ) ; [[updatedNamespaces]] . put ( [[prefix]] , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[updatedNamespaces]] , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[flagplaytype]] ( String [[abbreviation]] , String namespaceURI ) { Validate . notEmpty ( [[abbreviation]] , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > [[usedignteal]] = new HashMap < String , String > ( declaredNamespaces ) ; [[usedignteal]] . put ( [[abbreviation]] , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[usedignteal]] , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 259 ---------------------------------------------
Set proxy . --> Publish highfiver --> Socre: 1.0

[[[[Adv]]]]: public void [[setProxy]] ( String host , int [[port]] , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , [[port]] , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[highfiver]] ( String host , int [[hook]] , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , [[hook]] , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 260 ---------------------------------------------
Configure ntl credentials --> Configure ntl --> Socre: 1.0

[[[[Adv]]]]: public void ntlm ( String [[host]] , int port , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[host]] , port ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void ntlm ( String [[home]] , int port , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[home]] , port ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 261 ---------------------------------------------
Configure basic authentication . --> Configure Basic Auth --> Socre: 1.0

[[[[Adv]]]]: public void basic ( String host , int [[port]] , String [[user]] , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[port]] ) , new UsernamePasswordCredentials ( [[user]] , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void basic ( String host , int [[bus]] , String [[through]] , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[bus]] ) , new UsernamePasswordCredentials ( [[through]] , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 262 ---------------------------------------------
Sets the control name . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String controlName ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . controlName = [[controlName]] ; this . [[isControlNameExplicit]] = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[variableplay]] ( String controlName ) { Validate . notEmpty ( [[variableplay]] , "Control name cannot be empty" ) ; this . controlName = [[variableplay]] ; this . [[anjuntrotecomernist]] = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 263 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 184 / 74 / 5 / 263:  26%|██▋       | 263/1000 [46:26<2:10:08, 10.59s/it][Succeeded / Failed / Skipped / Total] 184 / 74 / 5 / 263:  26%|██▋       | 264/1000 [46:28<2:09:35, 10.56s/it][Succeeded / Failed / Skipped / Total] 185 / 74 / 5 / 264:  26%|██▋       | 264/1000 [46:28<2:09:35, 10.56s/it][Succeeded / Failed / Skipped / Total] 185 / 74 / 5 / 264:  26%|██▋       | 265/1000 [46:35<2:09:14, 10.55s/it][Succeeded / Failed / Skipped / Total] 186 / 74 / 5 / 265:  26%|██▋       | 265/1000 [46:35<2:09:14, 10.55s/it][Succeeded / Failed / Skipped / Total] 186 / 74 / 5 / 265:  27%|██▋       | 266/1000 [46:43<2:08:56, 10.54s/it][Succeeded / Failed / Skipped / Total] 187 / 74 / 5 / 266:  27%|██▋       | 266/1000 [46:43<2:08:56, 10.54s/it][Succeeded / Failed / Skipped / Total] 187 / 74 / 5 / 266:  27%|██▋       | 267/1000 [47:01<2:09:04, 10.57s/it][Succeeded / Failed / Skipped / Total] 187 / 75 / 5 / 267:  27%|██▋       | 267/1000 [47:01<2:09:04, 10.57s/it][Succeeded / Failed / Skipped / Total] 187 / 75 / 5 / 267:  27%|██▋       | 268/1000 [47:09<2:08:48, 10.56s/it][Succeeded / Failed / Skipped / Total] 187 / 76 / 5 / 268:  27%|██▋       | 268/1000 [47:09<2:08:48, 10.56s/it][Succeeded / Failed / Skipped / Total] 187 / 76 / 5 / 268:  27%|██▋       | 269/1000 [47:11<2:08:13, 10.52s/it][Succeeded / Failed / Skipped / Total] 187 / 77 / 5 / 269:  27%|██▋       | 269/1000 [47:11<2:08:13, 10.52s/it][Succeeded / Failed / Skipped / Total] 187 / 77 / 5 / 269:  27%|██▋       | 270/1000 [47:17<2:07:51, 10.51s/it][Succeeded / Failed / Skipped / Total] 187 / 78 / 5 / 270:  27%|██▋       | 270/1000 [47:17<2:07:51, 10.51s/it][Succeeded / Failed / Skipped / Total] 187 / 78 / 5 / 270:  27%|██▋       | 271/1000 [47:31<2:07:50, 10.52s/it][Succeeded / Failed / Skipped / Total] 188 / 78 / 5 / 271:  27%|██▋       | 271/1000 [47:31<2:07:50, 10.52s/it][Succeeded / Failed / Skipped / Total] 188 / 78 / 5 / 271:  27%|██▋       | 272/1000 [47:38<2:07:29, 10.51s/it]Adds a header with the given name and value . --> Specify the source with the given term and count --> Socre: 1.0

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String [[name]] , String [[value]] ) { Validate . notEmpty ( [[name]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[value]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[source]] ( String [[term]] , String [[count]] ) { Validate . notEmpty ( [[term]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[count]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 264 ---------------------------------------------
Resets the context . --> End the context --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[eden]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 265 ---------------------------------------------
Set response header . --> Append all headers with the given name and value . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder [[setHeader]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder [[allputt]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 266 ---------------------------------------------
Build response . --> Set host . --> Socre: 1.0

[[[[Adv]]]]: public Response [[build]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[host]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 267 ---------------------------------------------
Returns a cookie matcher that matches the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[list]] ( Matcher < ? super String > [[notseat]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[notseat]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 268 ---------------------------------------------
Matches a cookie that matches the given comment . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[comment]] ( Matcher < ? super String > [[commentMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[commentMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[observation]] ( Matcher < ? super String > [[documentmelty]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[documentmelty]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
Creates a new headers . --> [[[FAILED]]]

[[[[Adv]]]]: public static Headers headers ( Header header , Header ... [[additionalHeaders]] ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( [[additionalHeaders]] != null ) { Collections . addAll ( headerList , [[additionalHeaders]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers headers ( Header header , Header ... [[onlysending]] ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( [[onlysending]] != null ) { Collections . addAll ( headerList , [[onlysending]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 270 ---------------------------------------------
Matches a cookie that matches the expiry date . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher expiryDate ( Matcher < ? super Date > [[expiryDateMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[expiryDateMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher expiryDate ( Matcher < ? super Date > [[emipllybywinror]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[emipllybywinror]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
Matches the cookie with the given matcher . --> Matches cookies with the given name --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[domains]] ( Matcher < ? super String > [[namebusr]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[namebusr]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
[Succeeded / Failed / Skipped / Total] 188 / 79 / 5 / 272:  27%|██▋       | 272/1000 [47:38<2:07:29, 10.51s/it][Succeeded / Failed / Skipped / Total] 188 / 79 / 5 / 272:  27%|██▋       | 273/1000 [47:44<2:07:06, 10.49s/it][Succeeded / Failed / Skipped / Total] 188 / 80 / 5 / 273:  27%|██▋       | 273/1000 [47:44<2:07:06, 10.49s/it][Succeeded / Failed / Skipped / Total] 188 / 80 / 5 / 273:  27%|██▋       | 274/1000 [47:56<2:07:01, 10.50s/it][Succeeded / Failed / Skipped / Total] 189 / 80 / 5 / 274:  27%|██▋       | 274/1000 [47:56<2:07:01, 10.50s/it][Succeeded / Failed / Skipped / Total] 189 / 80 / 5 / 274:  28%|██▊       | 275/1000 [48:08<2:06:55, 10.50s/it][Succeeded / Failed / Skipped / Total] 189 / 81 / 5 / 275:  28%|██▊       | 275/1000 [48:08<2:06:55, 10.50s/it][Succeeded / Failed / Skipped / Total] 189 / 81 / 5 / 275:  28%|██▊       | 276/1000 [48:14<2:06:34, 10.49s/it][Succeeded / Failed / Skipped / Total] 189 / 82 / 5 / 276:  28%|██▊       | 276/1000 [48:14<2:06:34, 10.49s/it][Succeeded / Failed / Skipped / Total] 189 / 82 / 5 / 276:  28%|██▊       | 277/1000 [48:20<2:06:09, 10.47s/it][Succeeded / Failed / Skipped / Total] 190 / 82 / 5 / 277:  28%|██▊       | 277/1000 [48:20<2:06:09, 10.47s/it][Succeeded / Failed / Skipped / Total] 190 / 82 / 5 / 277:  28%|██▊       | 278/1000 [48:48<2:06:45, 10.53s/it][Succeeded / Failed / Skipped / Total] 190 / 83 / 5 / 278:  28%|██▊       | 278/1000 [48:48<2:06:45, 10.53s/it][Succeeded / Failed / Skipped / Total] 190 / 83 / 5 / 278:  28%|██▊       | 279/1000 [48:53<2:06:19, 10.51s/it][Succeeded / Failed / Skipped / Total] 190 / 84 / 5 / 279:  28%|██▊       | 279/1000 [48:53<2:06:19, 10.51s/it][Succeeded / Failed / Skipped / Total] 190 / 84 / 5 / 279:  28%|██▊       | 280/1000 [48:55<2:05:48, 10.48s/it][Succeeded / Failed / Skipped / Total] 190 / 85 / 5 / 280:  28%|██▊       | 280/1000 [48:55<2:05:48, 10.48s/it][Succeeded / Failed / Skipped / Total] 190 / 85 / 5 / 280:  28%|██▊       | 281/1000 [48:58<2:05:18, 10.46s/it][Succeeded / Failed / Skipped / Total] 191 / 85 / 5 / 281:  28%|██▊       | 281/1000 [48:58<2:05:18, 10.46s/it][Succeeded / Failed / Skipped / Total] 191 / 85 / 5 / 281:  28%|██▊       | 282/1000 [49:17<2:05:29, 10.49s/it]--------------------------------------------- Result 272 ---------------------------------------------
Matches a cookie that matches the provided path . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[cookie]] ( Matcher < ? super String > [[journeyatt]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[journeyatt]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 273 ---------------------------------------------
Returns a cookie matcher that matches the secured cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[secured]] ( Matcher < ? super Boolean > [[securedMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securedMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[cookies]] ( Matcher < ? super Boolean > [[managedtagck]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[managedtagck]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Applies a given Matcher to this cookie . --> Matches wwwatlets in webapp --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > [[httpOnlyMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[httpOnlyMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[wwwatlets]] ( Matcher < ? super Boolean > [[frameapp1ratra]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[frameapp1ratra]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 275 ---------------------------------------------
Matches a cookie that matches the given version . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[copy]] ( Matcher < ? super Integer > [[designreer]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[designreer]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 276 ---------------------------------------------
Applies a given maximum age to the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[maxcode]] ( Matcher < ? super Integer > [[ckactwink]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[ckactwink]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 277 ---------------------------------------------
Expect the given header to match the expected value . --> Specifies an eswitchar --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String headerName , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( headerName , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder [[eswitchar]] ( String headerName , Matcher < String > [[anticipatedgfectamaching]] ) { spec . header ( headerName , [[anticipatedgfectamaching]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 278 ---------------------------------------------
Expect the response header with the expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , String [[expectedValue]] ) { spec . header ( [[headerName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[takethiry]] ( String [[jumpersource]] , String [[ordinaryvalele]] ) { spec . header ( [[jumpersource]] , [[ordinaryvalele]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 279 ---------------------------------------------
Expect the given cookie with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String cookieName , String expectedValue ) { spec . cookie ( cookieName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[answercposeet]] ( String cookieName , String expectedValue ) { spec . cookie ( cookieName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 280 ---------------------------------------------
Returns a copy of this proxy specification with the given host . --> [[[FAILED]]]

[[[[Adv]]]]: public ProxySpecification [[withHost]] ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification [[andgosc]] ( String [[hosts]] ) { return new ProxySpecification ( [[hosts]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 281 ---------------------------------------------
Configure this instance with a number return type . --> Configure Bookrecsavecore --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[numberReturnType]] ( NumberReturnType [[numberReturnType]] ) { return new JsonPathConfig ( [[numberReturnType]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig [[bookrecsavecore]] ( NumberReturnType [[authorminarorly]] ) { return new JsonPathConfig ( [[bookrecsavecore]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 282 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 192 / 85 / 5 / 282:  28%|██▊       | 282/1000 [49:17<2:05:29, 10.49s/it][Succeeded / Failed / Skipped / Total] 192 / 85 / 5 / 282:  28%|██▊       | 283/1000 [49:20<2:05:01, 10.46s/it][Succeeded / Failed / Skipped / Total] 193 / 85 / 5 / 283:  28%|██▊       | 283/1000 [49:20<2:05:01, 10.46s/it][Succeeded / Failed / Skipped / Total] 193 / 85 / 5 / 283:  28%|██▊       | 284/1000 [49:23<2:04:30, 10.43s/it][Succeeded / Failed / Skipped / Total] 194 / 85 / 5 / 284:  28%|██▊       | 284/1000 [49:23<2:04:30, 10.43s/it][Succeeded / Failed / Skipped / Total] 194 / 85 / 5 / 284:  28%|██▊       | 285/1000 [49:23<2:03:55, 10.40s/it][Succeeded / Failed / Skipped / Total] 195 / 85 / 5 / 285:  28%|██▊       | 285/1000 [49:23<2:03:55, 10.40s/it][Succeeded / Failed / Skipped / Total] 195 / 85 / 5 / 285:  29%|██▊       | 286/1000 [49:35<2:03:48, 10.40s/it][Succeeded / Failed / Skipped / Total] 196 / 85 / 5 / 286:  29%|██▊       | 286/1000 [49:35<2:03:48, 10.40s/it][Succeeded / Failed / Skipped / Total] 196 / 85 / 5 / 286:  29%|██▊       | 287/1000 [49:36<2:03:13, 10.37s/it][Succeeded / Failed / Skipped / Total] 197 / 85 / 5 / 287:  29%|██▊       | 287/1000 [49:36<2:03:13, 10.37s/it][Succeeded / Failed / Skipped / Total] 197 / 85 / 5 / 287:  29%|██▉       | 288/1000 [49:50<2:03:12, 10.38s/it][Succeeded / Failed / Skipped / Total] 198 / 85 / 5 / 288:  29%|██▉       | 288/1000 [49:50<2:03:12, 10.38s/it][Succeeded / Failed / Skipped / Total] 198 / 85 / 5 / 288:  29%|██▉       | 289/1000 [49:52<2:02:42, 10.35s/it][Succeeded / Failed / Skipped / Total] 199 / 85 / 5 / 289:  29%|██▉       | 289/1000 [49:52<2:02:42, 10.35s/it][Succeeded / Failed / Skipped / Total] 199 / 85 / 5 / 289:  29%|██▉       | 290/1000 [49:53<2:02:09, 10.32s/it][Succeeded / Failed / Skipped / Total] 200 / 85 / 5 / 290:  29%|██▉       | 290/1000 [49:53<2:02:09, 10.32s/it][Succeeded / Failed / Skipped / Total] 200 / 85 / 5 / 290:  29%|██▉       | 291/1000 [50:13<2:02:22, 10.36s/it]Enable logging of request and response if validation fails . --> Configure an evedrag . --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[enableLoggingOfRequestAndResponseIfValidationFails]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig [[evedraglofraunt2essapdaivesfaindresfails]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 283 ---------------------------------------------
Creates a HttpRequestBase object from the given URI and HTTP method . --> Creates a HttpRequestBase --> Socre: 1.0

[[[[Adv]]]]: static HttpRequestBase [[createHttpRequest]] ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase [[aineclassticrectors]] ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 284 ---------------------------------------------
Default configuration for logging --> Enable IPv4 traffic --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream [[printStream]] ) { return new LogConfig ( [[printStream]] , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[32traffic]] ( PrintStream [[datestro]] ) { return new LogConfig ( [[datestro]] , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 285 ---------------------------------------------
Creates a default parser type with default parser type . --> Configure 3 rxgr point --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType [[defaultParserType]] ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[3rdxgrampoint]] ( JsonParserType [[4piecettype]] ) { return new JsonPathConfig ( numberReturnType , [[3rdxgrampoint]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 286 ---------------------------------------------
Adds an attribute --> Adding gcog . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addAttribute]] ( String attributeName , Object attributeValue ) { spec . attribute ( attributeName , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addinggtcogait]] ( String attributeName , Object attributeValue ) { spec . attribute ( attributeName , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 287 ---------------------------------------------
Default boundary configuration . --> Configure a MultiPartConfig with common configuration --> Socre: 1.0

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[commoncupalle]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[commoncupalle]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 288 ---------------------------------------------
Adds a header . --> Added class --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String headerName , String [[headerValue]] ) { spec . header ( headerName , [[headerValue]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addedactclass]] ( String headerName , String [[fieldtowne]] ) { spec . header ( headerName , [[fieldtowne]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 289 ---------------------------------------------
Add additional result handlers . --> Requires baseattls . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addResultHandlers]] ( ResultHandler resultHandler , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( resultHandler , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[contributeowsbaseattls]] ( ResultHandler resultHandler , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( resultHandler , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 290 ---------------------------------------------
Adds multi - part request . --> Perform multipart request --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String [[controlName]] , String contentBody , String mimeType ) { spec . multiPart ( [[controlName]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[ortointtar]] ( String [[designtime]] , String contentBody , String mimeType ) { spec . multiPart ( [[designtime]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 291 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 201 / 85 / 5 / 291:  29%|██▉       | 291/1000 [50:13<2:02:22, 10.36s/it][Succeeded / Failed / Skipped / Total] 201 / 85 / 5 / 291:  29%|██▉       | 292/1000 [50:14<2:01:48, 10.32s/it][Succeeded / Failed / Skipped / Total] 202 / 85 / 5 / 292:  29%|██▉       | 292/1000 [50:14<2:01:48, 10.32s/it][Succeeded / Failed / Skipped / Total] 202 / 85 / 5 / 292:  29%|██▉       | 293/1000 [50:31<2:01:55, 10.35s/it][Succeeded / Failed / Skipped / Total] 202 / 86 / 5 / 293:  29%|██▉       | 293/1000 [50:31<2:01:55, 10.35s/it][Succeeded / Failed / Skipped / Total] 202 / 86 / 5 / 293:  29%|██▉       | 294/1000 [50:33<2:01:24, 10.32s/it][Succeeded / Failed / Skipped / Total] 203 / 86 / 5 / 294:  29%|██▉       | 294/1000 [50:33<2:01:24, 10.32s/it][Succeeded / Failed / Skipped / Total] 203 / 86 / 5 / 294:  30%|██▉       | 295/1000 [50:47<2:01:22, 10.33s/it][Succeeded / Failed / Skipped / Total] 204 / 86 / 5 / 295:  30%|██▉       | 295/1000 [50:47<2:01:22, 10.33s/it][Succeeded / Failed / Skipped / Total] 204 / 86 / 5 / 295:  30%|██▉       | 296/1000 [50:50<2:00:55, 10.31s/it][Succeeded / Failed / Skipped / Total] 205 / 86 / 5 / 296:  30%|██▉       | 296/1000 [50:50<2:00:55, 10.31s/it][Succeeded / Failed / Skipped / Total] 205 / 86 / 5 / 296:  30%|██▉       | 297/1000 [51:00<2:00:43, 10.30s/it][Succeeded / Failed / Skipped / Total] 206 / 86 / 5 / 297:  30%|██▉       | 297/1000 [51:00<2:00:43, 10.30s/it][Succeeded / Failed / Skipped / Total] 206 / 86 / 5 / 297:  30%|██▉       | 298/1000 [51:04<2:00:18, 10.28s/it][Succeeded / Failed / Skipped / Total] 206 / 87 / 5 / 298:  30%|██▉       | 298/1000 [51:04<2:00:18, 10.28s/it][Succeeded / Failed / Skipped / Total] 206 / 87 / 5 / 298:  30%|██▉       | 299/1000 [51:29<2:00:43, 10.33s/it][Succeeded / Failed / Skipped / Total] 207 / 87 / 5 / 299:  30%|██▉       | 299/1000 [51:29<2:00:43, 10.33s/it][Succeeded / Failed / Skipped / Total] 207 / 87 / 5 / 299:  30%|███       | 300/1000 [51:32<2:00:15, 10.31s/it][Succeeded / Failed / Skipped / Total] 207 / 88 / 5 / 300:  30%|███       | 300/1000 [51:32<2:00:15, 10.31s/it][Succeeded / Failed / Skipped / Total] 207 / 88 / 5 / 300:  30%|███       | 301/1000 [51:32<1:59:42, 10.28s/it][Succeeded / Failed / Skipped / Total] 207 / 89 / 5 / 301:  30%|███       | 301/1000 [51:32<1:59:42, 10.28s/it][Succeeded / Failed / Skipped / Total] 207 / 89 / 5 / 301:  30%|███       | 302/1000 [52:07<2:00:27, 10.35s/it]Sets the http client factory . --> Configure HttpClientFactory --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory [[httpClientFactory]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory [[stricanymum]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 292 ---------------------------------------------
Sets the HTTP multipart mode . --> Configure aggregator to use aggregator --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[aggregatorrulentdropdosg]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[aggregatorrulentdropdosg]] , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 293 ---------------------------------------------
Sets a parameter for the HTTP client . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[HttpClientConfig]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new [[HttpClientConfig]] ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > [[requestscarancevfks]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new [[requestscarancevfks]] ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 294 ---------------------------------------------
Returns an integer value . --> Borrow beram authority beram --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[beram]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 295 ---------------------------------------------
Get the byte of the given path --> returns bytes to bytes --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[are2ite]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 296 ---------------------------------------------
Get short short from path --> returns shortce --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[findce]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 297 ---------------------------------------------
Adds additional parameters . --> accesses HTTP client configuration --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[addParams]] ( Map < String , ? > [[httpClientParams]] ) { notNull ( [[httpClientParams]] , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( [[httpClientParams]] ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig [[accessagesma]] ( Map < String , ? > [[comslisαmins]] ) { notNull ( [[comslisαmins]] , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( [[comslisαmins]] ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 298 ---------------------------------------------
Retrieves the content of the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion [[jsonAssertion]] = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) [[jsonAssertion]] . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[line]] > [[line]] get ( String path ) { final JSONAssertion [[シsomaceretons]] = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[line]] ) [[シsomaceretons]] . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 299 ---------------------------------------------
Get a long value . --> B beram --> Socre: 1.0

[[[[Adv]]]]: public long [[getLong]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[beram]] ( String [[expression]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 300 ---------------------------------------------
Get a property as a float . --> [[[FAILED]]]

[[[[Adv]]]]: public float [[getFloat]] ( String [[path]] ) { final Object value = get ( [[path]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[storefump]] ( String [[reference]] ) { final Object value = get ( [[reference]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 301 ---------------------------------------------
Get a double value . --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getDouble]] ( String path ) { final Object value = get ( path ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[collectcoor]] ( String path ) { final Object value = get ( path ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
[Succeeded / Failed / Skipped / Total] 208 / 89 / 5 / 302:  30%|███       | 302/1000 [52:07<2:00:27, 10.35s/it][Succeeded / Failed / Skipped / Total] 208 / 89 / 5 / 302:  30%|███       | 303/1000 [52:08<1:59:57, 10.33s/it][Succeeded / Failed / Skipped / Total] 209 / 89 / 5 / 303:  30%|███       | 303/1000 [52:08<1:59:57, 10.33s/it][Succeeded / Failed / Skipped / Total] 209 / 89 / 5 / 303:  30%|███       | 304/1000 [52:16<1:59:40, 10.32s/it][Succeeded / Failed / Skipped / Total] 210 / 89 / 5 / 304:  30%|███       | 304/1000 [52:16<1:59:40, 10.32s/it][Succeeded / Failed / Skipped / Total] 210 / 89 / 5 / 304:  30%|███       | 305/1000 [52:18<1:59:12, 10.29s/it][Succeeded / Failed / Skipped / Total] 211 / 89 / 5 / 305:  30%|███       | 305/1000 [52:18<1:59:12, 10.29s/it][Succeeded / Failed / Skipped / Total] 211 / 89 / 5 / 305:  31%|███       | 306/1000 [52:56<2:00:04, 10.38s/it][Succeeded / Failed / Skipped / Total] 211 / 90 / 5 / 306:  31%|███       | 306/1000 [52:56<2:00:04, 10.38s/it][Succeeded / Failed / Skipped / Total] 211 / 90 / 5 / 306:  31%|███       | 307/1000 [52:59<1:59:36, 10.36s/it][Succeeded / Failed / Skipped / Total] 212 / 90 / 5 / 307:  31%|███       | 307/1000 [52:59<1:59:36, 10.36s/it][Succeeded / Failed / Skipped / Total] 212 / 90 / 5 / 307:  31%|███       | 308/1000 [52:59<1:59:04, 10.32s/it][Succeeded / Failed / Skipped / Total] 212 / 91 / 5 / 308:  31%|███       | 308/1000 [52:59<1:59:04, 10.32s/it][Succeeded / Failed / Skipped / Total] 212 / 91 / 5 / 308:  31%|███       | 309/1000 [53:02<1:58:36, 10.30s/it][Succeeded / Failed / Skipped / Total] 213 / 91 / 5 / 309:  31%|███       | 309/1000 [53:02<1:58:36, 10.30s/it][Succeeded / Failed / Skipped / Total] 213 / 91 / 5 / 309:  31%|███       | 310/1000 [53:17<1:58:36, 10.31s/it][Succeeded / Failed / Skipped / Total] 214 / 91 / 5 / 310:  31%|███       | 310/1000 [53:17<1:58:36, 10.31s/it][Succeeded / Failed / Skipped / Total] 214 / 91 / 5 / 310:  31%|███       | 311/1000 [53:18<1:58:06, 10.29s/it]--------------------------------------------- Result 302 ---------------------------------------------
Gets a list from the specified path . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public < T > List < T > getList ( String [[path]] , Class < T > [[genericType]] ) { if ( [[genericType]] == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( [[path]] ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T [[t]] : original ) { T e ; if ( [[t]] instanceof Map && ! [[genericType]] . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > getList ( String [[domain]] , Class < T > [[hybridsi]] ) { if ( [[hybridsi]] == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( [[domain]] ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T [[it]] : original ) { T e ; if ( [[it]] instanceof Map && ! [[hybridsi]] . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 303 ---------------------------------------------
Gets the map . --> verify vertices --> Socre: 1.0

[[[[Adv]]]]: public < [[K]] , V > Map < [[K]] , V > [[getMap]] ( String [[path]] ) { return get ( [[path]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < [[κ]] , V > Map < [[κ]] , V > [[coverchaper]] ( String [[bound]] ) { return get ( [[bound]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 304 ---------------------------------------------
Sets the body of the request . --> Listful components --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[setBody]] ( Object [[object]] , ObjectMapper [[mapper]] ) { spec . body ( [[object]] , [[mapper]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder [[listful]] ( Object [[component]] , ObjectMapper [[mepe]] ) { spec . body ( [[component]] , [[mepe]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 305 ---------------------------------------------
Get a JSON object and convert it to an object type . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] getObject ( String path , Class < [[T]] > objectType ) { Object [[object]] = getFromPath ( path , "[[False]]" != "[[False]]" ) ; return getObjectAsType ( [[object]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < [[τ]] > [[τ]] getObject ( String path , Class < [[τ]] > objectType ) { Object [[canvas]] = getFromPath ( path , "[[false]]" != "[[false]]" ) ; return getObjectAsType ( [[canvas]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 306 ---------------------------------------------
Adds a request parameter to the request spec . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Object ... parameterValues ) { spec . param ( [[parameterName]] , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[importapns]] ( String [[minimalnu]] , Object ... parameterValues ) { spec . param ( [[minimalnu]] , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 307 ---------------------------------------------
Updates the form parameters with the given update strategy . --> Configure parameters updater --> Socre: 1.0

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy [[updateStrategy]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[updateStrategy]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[expressionimemingagdatingarthgs]] ( UpdateStrategy [[checkstrietever]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[checkstrietever]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 308 ---------------------------------------------
Adds a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String [[key]] , Object value , Object ... cookieNameValuePairs ) { spec . cookie ( [[key]] , value , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[extrahowulege]] ( String [[c]] , Object value , Object ... cookieNameValuePairs ) { spec . cookie ( [[c]] , value , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 309 ---------------------------------------------
Adds a parameter to the request spec . --> Insert general params --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Collection < ? > [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[insertgnac]] ( String [[characternu]] , Collection < ? > [[extraadtres]] ) { spec . param ( [[characternu]] , [[extraadtres]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 310 ---------------------------------------------
Creates a filter that logs the response to if it matches . --> Log response to if it matches --> Socre: 1.0

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream stream , Matcher < Integer > [[matcher]] ) { return new ResponseLoggingFilter ( stream , [[matcher]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream stream , Matcher < Integer > [[comparenull]] ) { return new ResponseLoggingFilter ( stream , [[comparenull]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 311 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 215 / 91 / 5 / 311:  31%|███       | 311/1000 [53:18<1:58:06, 10.29s/it][Succeeded / Failed / Skipped / Total] 215 / 91 / 5 / 311:  31%|███       | 312/1000 [53:32<1:58:03, 10.30s/it][Succeeded / Failed / Skipped / Total] 215 / 92 / 5 / 312:  31%|███       | 312/1000 [53:32<1:58:03, 10.30s/it][Succeeded / Failed / Skipped / Total] 215 / 92 / 5 / 312:  31%|███▏      | 313/1000 [53:32<1:57:32, 10.26s/it][Succeeded / Failed / Skipped / Total] 216 / 92 / 5 / 313:  31%|███▏      | 313/1000 [53:32<1:57:32, 10.26s/it][Succeeded / Failed / Skipped / Total] 216 / 92 / 5 / 313:  31%|███▏      | 314/1000 [53:51<1:57:38, 10.29s/it][Succeeded / Failed / Skipped / Total] 217 / 92 / 5 / 314:  31%|███▏      | 314/1000 [53:51<1:57:38, 10.29s/it][Succeeded / Failed / Skipped / Total] 217 / 92 / 5 / 314:  32%|███▏      | 315/1000 [53:59<1:57:23, 10.28s/it][Succeeded / Failed / Skipped / Total] 217 / 93 / 5 / 315:  32%|███▏      | 315/1000 [53:59<1:57:23, 10.28s/it][Succeeded / Failed / Skipped / Total] 217 / 93 / 5 / 315:  32%|███▏      | 316/1000 [54:01<1:56:56, 10.26s/it][Succeeded / Failed / Skipped / Total] 218 / 93 / 5 / 316:  32%|███▏      | 316/1000 [54:01<1:56:56, 10.26s/it][Succeeded / Failed / Skipped / Total] 218 / 93 / 5 / 316:  32%|███▏      | 317/1000 [54:36<1:57:39, 10.34s/it][Succeeded / Failed / Skipped / Total] 218 / 94 / 5 / 317:  32%|███▏      | 317/1000 [54:36<1:57:39, 10.34s/it][Succeeded / Failed / Skipped / Total] 218 / 94 / 5 / 317:  32%|███▏      | 318/1000 [54:38<1:57:10, 10.31s/it]Clean up for non - collected data . --> Clean up data for non - collected state --> Socre: 1.0

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > [[set]] = backingMap . get ( keyAndSource . key ) ; if ( [[set]] != null ) { [[set]] . remove ( keyAndSource . source ) ; if ( [[set]] . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > [[cd]] = backingMap . get ( keyAndSource . key ) ; if ( [[cd]] != null ) { [[cd]] . remove ( keyAndSource . source ) ; if ( [[cd]] . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 312 ---------------------------------------------
Index all explicit bindings . --> [[[FAILED]]]

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[iris]] ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 313 ---------------------------------------------
convert constant string to string binding --> binds conversion goder --> Socre: 1.0

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > key , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[conversionjunpararstipacegoder]] ( Key < T > key , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 314 ---------------------------------------------
Remove a binding from JIT bindings . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[diαarjitfeded]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 315 ---------------------------------------------
Creates a cookies object from the given cookies . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookies cookies ( Cookie [[cookie]] , Cookie ... additionalCookies ) { AssertParameter . notNull ( [[cookie]] , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( [[cookie]] ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies cookies ( Cookie [[catcher]] , Cookie ... additionalCookies ) { AssertParameter . notNull ( [[catcher]] , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( [[catcher]] ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 316 ---------------------------------------------
Gets the internal dependencies . --> also used in tests --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > [[binding]] ) { if ( [[binding]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[binding]] ) . getInternalDependencies ( ) ; } else if ( [[binding]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[binding]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[putvetiedalloopavepose]] ( BindingImpl < ? > [[tie]] ) { if ( [[tie]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[tie]] ) . getInternalDependencies ( ) ; } else if ( [[tie]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[tie]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 317 ---------------------------------------------
Create an uninitialized binding . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > [[rawType]] = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy [[implementedBy]] = [[rawType]] . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > [[fuelbody]] = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy [[implementinghouse]] = [[fuelbody]] . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 318 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 219 / 94 / 5 / 318:  32%|███▏      | 318/1000 [54:38<1:57:10, 10.31s/it][Succeeded / Failed / Skipped / Total] 219 / 94 / 5 / 318:  32%|███▏      | 319/1000 [54:52<1:57:08, 10.32s/it][Succeeded / Failed / Skipped / Total] 220 / 94 / 5 / 319:  32%|███▏      | 319/1000 [54:52<1:57:08, 10.32s/it][Succeeded / Failed / Skipped / Total] 220 / 94 / 5 / 319:  32%|███▏      | 320/1000 [54:55<1:56:42, 10.30s/it][Succeeded / Failed / Skipped / Total] 221 / 94 / 5 / 320:  32%|███▏      | 320/1000 [54:55<1:56:42, 10.30s/it][Succeeded / Failed / Skipped / Total] 221 / 94 / 5 / 320:  32%|███▏      | 321/1000 [55:10<1:56:42, 10.31s/it][Succeeded / Failed / Skipped / Total] 222 / 94 / 5 / 321:  32%|███▏      | 321/1000 [55:10<1:56:42, 10.31s/it][Succeeded / Failed / Skipped / Total] 222 / 94 / 5 / 321:  32%|███▏      | 322/1000 [55:21<1:56:34, 10.32s/it][Succeeded / Failed / Skipped / Total] 222 / 95 / 5 / 322:  32%|███▏      | 322/1000 [55:21<1:56:34, 10.32s/it][Succeeded / Failed / Skipped / Total] 222 / 95 / 5 / 322:  32%|███▏      | 323/1000 [55:24<1:56:07, 10.29s/it][Succeeded / Failed / Skipped / Total] 223 / 95 / 5 / 323:  32%|███▏      | 323/1000 [55:24<1:56:07, 10.29s/it][Succeeded / Failed / Skipped / Total] 223 / 95 / 5 / 323:  32%|███▏      | 324/1000 [55:46<1:56:21, 10.33s/it][Succeeded / Failed / Skipped / Total] 224 / 95 / 5 / 324:  32%|███▏      | 324/1000 [55:46<1:56:21, 10.33s/it][Succeeded / Failed / Skipped / Total] 224 / 95 / 5 / 324:  32%|███▎      | 325/1000 [55:54<1:56:06, 10.32s/it][Succeeded / Failed / Skipped / Total] 225 / 95 / 5 / 325:  32%|███▎      | 325/1000 [55:54<1:56:06, 10.32s/it][Succeeded / Failed / Skipped / Total] 225 / 95 / 5 / 325:  33%|███▎      | 326/1000 [56:07<1:56:02, 10.33s/it]Binds an injector to the provider . --> chain InjectorFactory --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindInjector]] ( InjectorImpl injector ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory [[injectorFactory]] = new InjectorFactory ( injector ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( injector , key , SourceProvider . UNKNOWN_SOURCE , [[injectorFactory]] , Scoping . UNSCOPED , [[injectorFactory]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void [[chaininscriptoor]] ( InjectorImpl injector ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory [[duringucorfdooum]] = new InjectorFactory ( injector ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( injector , key , SourceProvider . UNKNOWN_SOURCE , [[duringucorfdooum]] , Scoping . UNSCOPED , [[duringucorfdooum]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 319 ---------------------------------------------
Cleans up all internal dependencies that have failed . --> kramer kers --> Socre: 1.0

[[[[Adv]]]]: private boolean [[cleanup]] ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean bindingFailed = "[[False]]" != "[[False]]" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > [[depKey]] = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( [[depKey]] ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean [[kramer]] ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean bindingFailed = "[[repeat]]" != "[[repeat]]" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > [[hydrople1]] = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( [[hydrople1]] ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 320 ---------------------------------------------
Gets all parameters . --> Get all bones from a canvas --> Socre: 1.0

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] [[parameterInjectors]] ) throws InternalProvisionException { if ( [[parameterInjectors]] == null ) { return NO_ARGUMENTS ; } int [[size]] = [[parameterInjectors]] . length ; Object [ ] [[parameters]] = new Object [ [[size]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] [[canvasdeviewri]] ) throws InternalProvisionException { if ( [[canvasdeviewri]] == null ) { return NO_ARGUMENTS ; } int [[composition]] = [[canvasdeviewri]] . length ; Object [ ] [[bones]] = new Object [ [[composition]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 321 ---------------------------------------------
Binds a logger to the provider . --> for unit tests --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl [[injector]] ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; [[injector]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( [[injector]] , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[baseforgar]] ( InjectorImpl [[inbstring]] ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; [[inbstring]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( [[inbstring]] , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 322 ---------------------------------------------
The provider . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[provisiont]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 323 ---------------------------------------------
Checks whether method overrides a method . --> called from method --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[overrides]] ( Method [[a]] , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[autoridwas]] ( Method [[ac]] , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 324 ---------------------------------------------
Initializes the delegate . --> documentation inherited from MemberInjector --> Socre: 1.0

[[[[Adv]]]]: public void [[initializeDelegate]] ( MembersInjector < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void [[capitaldatefobar]] ( MembersInjector < T > [[body]] ) { checkState ( this . [[camp]] == null , "delegate already initialized" ) ; this . [[camp]] = checkNotNull ( [[body]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 325 ---------------------------------------------
Checks for missing binding annotations . --> only for testing --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[checkForMisplacedBindingAnnotations]] ( Member member , Errors errors ) { Annotation [[misplacedBindingAnnotation]] = Annotations . findBindingAnnotation ( errors , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( [[misplacedBindingAnnotation]] == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean [[countercollwasdoorgendodunedhs]] ( Member member , Errors errors ) { Annotation [[bestledbedtingנtchture]] = Annotations . findBindingAnnotation ( errors , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( [[bestledbedtingנtchture]] == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 326 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 226 / 95 / 5 / 326:  33%|███▎      | 326/1000 [56:07<1:56:02, 10.33s/it][Succeeded / Failed / Skipped / Total] 226 / 95 / 5 / 326:  33%|███▎      | 327/1000 [56:19<1:55:56, 10.34s/it][Succeeded / Failed / Skipped / Total] 226 / 96 / 5 / 327:  33%|███▎      | 327/1000 [56:19<1:55:56, 10.34s/it][Succeeded / Failed / Skipped / Total] 226 / 96 / 5 / 327:  33%|███▎      | 328/1000 [56:37<1:56:01, 10.36s/it][Succeeded / Failed / Skipped / Total] 226 / 97 / 5 / 328:  33%|███▎      | 328/1000 [56:37<1:56:01, 10.36s/it][Succeeded / Failed / Skipped / Total] 226 / 97 / 5 / 328:  33%|███▎      | 329/1000 [56:46<1:55:47, 10.35s/it][Succeeded / Failed / Skipped / Total] 226 / 98 / 5 / 329:  33%|███▎      | 329/1000 [56:46<1:55:47, 10.35s/it][Succeeded / Failed / Skipped / Total] 226 / 98 / 5 / 329:  33%|███▎      | 330/1000 [57:01<1:55:45, 10.37s/it][Succeeded / Failed / Skipped / Total] 226 / 99 / 5 / 330:  33%|███▎      | 330/1000 [57:01<1:55:45, 10.37s/it][Succeeded / Failed / Skipped / Total] 226 / 99 / 5 / 330:  33%|███▎      | 331/1000 [57:10<1:55:34, 10.37s/it][Succeeded / Failed / Skipped / Total] 226 / 100 / 5 / 331:  33%|███▎      | 331/1000 [57:10<1:55:34, 10.37s/it][Succeeded / Failed / Skipped / Total] 226 / 100 / 5 / 331:  33%|███▎      | 332/1000 [57:15<1:55:11, 10.35s/it][Succeeded / Failed / Skipped / Total] 226 / 101 / 5 / 332:  33%|███▎      | 332/1000 [57:15<1:55:11, 10.35s/it][Succeeded / Failed / Skipped / Total] 226 / 101 / 5 / 332:  33%|███▎      | 333/1000 [57:21<1:54:53, 10.34s/it][Succeeded / Failed / Skipped / Total] 227 / 101 / 5 / 333:  33%|███▎      | 333/1000 [57:21<1:54:53, 10.34s/it][Succeeded / Failed / Skipped / Total] 227 / 101 / 5 / 333:  33%|███▎      | 334/1000 [57:49<1:55:18, 10.39s/it]Prepare all built - in converters . --> Injects the fixteppe --> Socre: 1.0

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[fixtheartperexjecturs]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 327 ---------------------------------------------
Resolves all type literals . --> [[[FAILED]]]

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int t = 0 ; t < [[types]] . length ; t ++ ) { result [ t ] = resolve ( [[types]] [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] [[covers]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[covers]] . length ] ; for ( int t = 0 ; t < [[covers]] . length ; t ++ ) { result [ t ] = resolve ( [[covers]] [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 328 ---------------------------------------------
Canonicalize the class loader . --> [[[FAILED]]]

[[[[Adv]]]]: private static ClassLoader [[canonicalize]] ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader [[viaductl]] ( ClassLoader [[generictilling]] ) { return [[generictilling]] != null ? [[generictilling]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 329 ---------------------------------------------
Canonicalizes the type of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[canonicalizeForKey]] ( TypeLiteral < T > typeLiteral ) { Type [[type]] = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( [[type]] ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType [[parameterizedType]] = ( ParameterizedType ) [[type]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[genericgeprject]] ( TypeLiteral < T > typeLiteral ) { Type [[category]] = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( [[category]] ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType [[dirergee]] = ( ParameterizedType ) [[category]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 330 ---------------------------------------------
Request member injection . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 331 ---------------------------------------------
Fix annotations . --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 332 ---------------------------------------------
Checks if the given class has the same version as the given Cglib . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader [[classLoader]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[classLoader]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[rasmalessfccdalb]] ( ClassLoader [[scriptreturnant]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[scriptreturnant]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 333 ---------------------------------------------
validate all pending injections --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: void [[validateOustandingInjections]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void [[ⁱageintanatimeproclassies]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 334 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 228 / 101 / 5 / 334:  33%|███▎      | 334/1000 [57:49<1:55:18, 10.39s/it][Succeeded / Failed / Skipped / Total] 228 / 101 / 5 / 334:  34%|███▎      | 335/1000 [57:51<1:54:51, 10.36s/it][Succeeded / Failed / Skipped / Total] 229 / 101 / 5 / 335:  34%|███▎      | 335/1000 [57:51<1:54:51, 10.36s/it][Succeeded / Failed / Skipped / Total] 229 / 101 / 5 / 335:  34%|███▎      | 336/1000 [58:17<1:55:11, 10.41s/it][Succeeded / Failed / Skipped / Total] 230 / 101 / 5 / 336:  34%|███▎      | 336/1000 [58:17<1:55:11, 10.41s/it][Succeeded / Failed / Skipped / Total] 230 / 101 / 5 / 336:  34%|███▎      | 337/1000 [58:18<1:54:42, 10.38s/it][Succeeded / Failed / Skipped / Total] 230 / 102 / 5 / 337:  34%|███▎      | 337/1000 [58:18<1:54:42, 10.38s/it][Succeeded / Failed / Skipped / Total] 230 / 102 / 5 / 337:  34%|███▍      | 338/1000 [58:23<1:54:22, 10.37s/it][Succeeded / Failed / Skipped / Total] 230 / 103 / 5 / 338:  34%|███▍      | 338/1000 [58:23<1:54:22, 10.37s/it][Succeeded / Failed / Skipped / Total] 230 / 103 / 5 / 338:  34%|███▍      | 339/1000 [58:29<1:54:03, 10.35s/it][Succeeded / Failed / Skipped / Total] 231 / 103 / 5 / 339:  34%|███▍      | 339/1000 [58:29<1:54:03, 10.35s/it][Succeeded / Failed / Skipped / Total] 231 / 103 / 5 / 339:  34%|███▍      | 340/1000 [58:30<1:53:34, 10.32s/it][Succeeded / Failed / Skipped / Total] 232 / 103 / 5 / 340:  34%|███▍      | 340/1000 [58:30<1:53:34, 10.32s/it][Succeeded / Failed / Skipped / Total] 232 / 103 / 5 / 340:  34%|███▍      | 341/1000 [58:58<1:53:58, 10.38s/it]Add a dispatcher to the servlet request . --> Eredmaderport --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[withDispatcher]] ( ServletRequest servletRequest , final ManagedServletPipeline [[servletPipeline]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[etredmaderport]] ( ServletRequest servletRequest , final ManagedServletPipeline [[serifflizedfertine]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 335 ---------------------------------------------
Creates a new instance of the class with given arguments . --> Factory method for creating a new mock object --> Socre: 1.0

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] [[args]] ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[littlevestock]] ( Object [ ] [[barseries]] ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( [[barseries]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 336 ---------------------------------------------
Normalize the path . --> This method is used to get the journey information --> Socre: 1.0

[[[[Adv]]]]: static String normalizePath ( String [[path]] ) { StringBuilder [[sb]] = new StringBuilder ( [[path]] . length ( ) ) ; int queryStart = [[path]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[path]] . substring ( queryStart ) ; [[path]] = [[path]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String normalizePath ( String [[career]] ) { StringBuilder [[abs]] = new StringBuilder ( [[career]] . length ( ) ) ; int queryStart = [[career]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[career]] . substring ( queryStart ) ; [[career]] = [[career]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 337 ---------------------------------------------
Checks whether the given member is public or not . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member [[member]] ) { if ( ! Modifier . isPublic ( [[member]] . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( [[member]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[member]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[member]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member [[component]] ) { if ( ! Modifier . isPublic ( [[component]] . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( [[component]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[component]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[component]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 338 ---------------------------------------------
Generate an annotation for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[define]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 339 ---------------------------------------------
Takes a scoping instance and returns the corresponding scoping . --> make injectable --> Socre: 1.0

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping [[scoping]] , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > [[scopeAnnotation]] = [[scoping]] . getScopeAnnotation ( ) ; if ( [[scopeAnnotation]] == null ) { return [[scoping]] ; } ScopeBinding scope = injector . state . getScopeBinding ( [[scopeAnnotation]] ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( [[scopeAnnotation]] ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping [[skone]] , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > [[canvasنotingture]] = [[skone]] . getScopeAnnotation ( ) ; if ( [[canvasنotingture]] == null ) { return [[skone]] ; } ScopeBinding scope = injector . state . getScopeBinding ( [[canvasنotingture]] ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( [[canvasنotingture]] ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 340 ---------------------------------------------
Scope factory method . --> Scale a value to a builder --> Socre: 1.0

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[scope]] ( Key < T > key , InjectorImpl [[injector]] , InternalFactory < ? extends T > [[creator]] , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return [[creator]] ; } Scope [[scope]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[scale]] ( Key < T > key , InjectorImpl [[backprojectengine]] , InternalFactory < ? extends T > [[builder]] , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return [[builder]] ; } Scope [[scale]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
[Succeeded / Failed / Skipped / Total] 233 / 103 / 5 / 341:  34%|███▍      | 341/1000 [58:58<1:53:58, 10.38s/it][Succeeded / Failed / Skipped / Total] 233 / 103 / 5 / 341:  34%|███▍      | 342/1000 [59:02<1:53:35, 10.36s/it][Succeeded / Failed / Skipped / Total] 234 / 103 / 5 / 342:  34%|███▍      | 342/1000 [59:02<1:53:35, 10.36s/it][Succeeded / Failed / Skipped / Total] 234 / 103 / 5 / 342:  34%|███▍      | 343/1000 [59:20<1:53:39, 10.38s/it][Succeeded / Failed / Skipped / Total] 235 / 103 / 5 / 343:  34%|███▍      | 343/1000 [59:20<1:53:39, 10.38s/it][Succeeded / Failed / Skipped / Total] 235 / 103 / 5 / 343:  34%|███▍      | 344/1000 [59:26<1:53:20, 10.37s/it][Succeeded / Failed / Skipped / Total] 235 / 104 / 5 / 344:  34%|███▍      | 344/1000 [59:26<1:53:20, 10.37s/it][Succeeded / Failed / Skipped / Total] 235 / 104 / 5 / 344:  34%|███▍      | 345/1000 [59:29<1:52:57, 10.35s/it][Succeeded / Failed / Skipped / Total] 236 / 104 / 5 / 345:  34%|███▍      | 345/1000 [59:29<1:52:57, 10.35s/it][Succeeded / Failed / Skipped / Total] 236 / 104 / 5 / 345:  35%|███▍      | 346/1000 [59:51<1:53:08, 10.38s/it][Succeeded / Failed / Skipped / Total] 236 / 105 / 5 / 346:  35%|███▍      | 346/1000 [59:51<1:53:08, 10.38s/it][Succeeded / Failed / Skipped / Total] 236 / 105 / 5 / 346:  35%|███▍      | 347/1000 [1:00:07<1:53:09, 10.40s/it][Succeeded / Failed / Skipped / Total] 236 / 106 / 5 / 347:  35%|███▍      | 347/1000 [1:00:07<1:53:09, 10.40s/it][Succeeded / Failed / Skipped / Total] 236 / 106 / 5 / 347:  35%|███▍      | 348/1000 [1:00:29<1:53:19, 10.43s/it]--------------------------------------------- Result 341 ---------------------------------------------
Checks if annotation is retention at runtime . --> Determines whether this aduta needs to be deleted --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > [[annotationType]] ) { Retention [[retention]] = [[annotationType]] . getAnnotation ( Retention . class ) ; return [[retention]] != null && [[retention]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[shouldletaddartrite]] ( Class < ? extends Annotation > [[adutaatorshed]] ) { Retention [[dd]] = [[adutaatorshed]] . getAnnotation ( Retention . class ) ; return [[dd]] != null && [[dd]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 342 ---------------------------------------------
Finds a scope annotation . --> used in tests --> Socre: 1.0

[[[[Adv]]]]: public static Class < ? extends Annotation > [[findScopeAnnotation]] ( Errors errors , Annotation [ ] [[annotations]] ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : [[annotations]] ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > [[resultspyintittem]] ( Errors errors , Annotation [ ] [[anneottedtized]] ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : [[anneottedtized]] ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 343 ---------------------------------------------
Adds the direct type binding . --> adding undistrictmansion --> Socre: 1.0

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[addingdinghrectrictmansion]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 344 ---------------------------------------------
Returns the name of the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[surnamex]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 345 ---------------------------------------------
Gets binding key . --> Fetch bar from errors --> Socre: 1.0

[[[[Adv]]]]: public static Key < ? > [[getKey]] ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors [[errors]] ) throws ErrorsException { int [[numErrorsBefore]] = [[errors]] . size ( ) ; Annotation [[found]] = findBindingAnnotation ( [[errors]] , member , annotations ) ; [[errors]] . throwIfNewErrors ( [[numErrorsBefore]] ) ; return [[found]] == null ? Key . get ( type ) : Key . get ( type , [[found]] ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > [[fetchbar]] ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors [[error]] ) throws ErrorsException { int [[eniminrotestofshed]] = [[error]] . size ( ) ; Annotation [[rate]] = findBindingAnnotation ( [[error]] , member , annotations ) ; [[error]] . throwIfNewErrors ( [[eniminrotestofshed]] ) ; return [[rate]] == null ? Key . get ( type ) : Key . get ( type , [[rate]] ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 346 ---------------------------------------------
Initializes the delegate provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[interiordiumelavision]] ( Provider < T > [[place]] ) { checkState ( this . [[delegates]] == null , "delegate already initialized" ) ; this . [[delegates]] = checkNotNull ( [[place]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 347 ---------------------------------------------
Retrieve a constructor from the cache . --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > [[get]] ( InjectionPoint [[constructorInjector]] , Errors errors ) throws ErrorsException { return cache . get ( [[constructorInjector]] , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > [[start]] ( InjectionPoint [[ᄌinqut]] , Errors errors ) throws ErrorsException { return cache . get ( [[ᄌinqut]] , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 348 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 236 / 107 / 5 / 348:  35%|███▍      | 348/1000 [1:00:29<1:53:19, 10.43s/it][Succeeded / Failed / Skipped / Total] 236 / 107 / 5 / 348:  35%|███▍      | 349/1000 [1:00:30<1:52:51, 10.40s/it][Succeeded / Failed / Skipped / Total] 237 / 107 / 5 / 349:  35%|███▍      | 349/1000 [1:00:30<1:52:51, 10.40s/it][Succeeded / Failed / Skipped / Total] 237 / 107 / 5 / 349:  35%|███▌      | 350/1000 [1:00:37<1:52:35, 10.39s/it][Succeeded / Failed / Skipped / Total] 238 / 107 / 5 / 350:  35%|███▌      | 350/1000 [1:00:37<1:52:35, 10.39s/it][Succeeded / Failed / Skipped / Total] 238 / 107 / 5 / 350:  35%|███▌      | 351/1000 [1:00:43<1:52:17, 10.38s/it][Succeeded / Failed / Skipped / Total] 239 / 107 / 5 / 351:  35%|███▌      | 351/1000 [1:00:43<1:52:17, 10.38s/it][Succeeded / Failed / Skipped / Total] 239 / 107 / 5 / 351:  35%|███▌      | 352/1000 [1:00:48<1:51:56, 10.36s/it][Succeeded / Failed / Skipped / Total] 240 / 107 / 5 / 352:  35%|███▌      | 352/1000 [1:00:48<1:51:56, 10.36s/it][Succeeded / Failed / Skipped / Total] 240 / 107 / 5 / 352:  35%|███▌      | 353/1000 [1:00:49<1:51:29, 10.34s/it][Succeeded / Failed / Skipped / Total] 240 / 108 / 5 / 353:  35%|███▌      | 353/1000 [1:00:49<1:51:29, 10.34s/it][Succeeded / Failed / Skipped / Total] 240 / 108 / 5 / 353:  35%|███▌      | 354/1000 [1:00:57<1:51:13, 10.33s/it][Succeeded / Failed / Skipped / Total] 241 / 108 / 5 / 354:  35%|███▌      | 354/1000 [1:00:57<1:51:13, 10.33s/it][Succeeded / Failed / Skipped / Total] 241 / 108 / 5 / 354:  36%|███▌      | 355/1000 [1:01:14<1:51:15, 10.35s/it]Returns a new key for the new value . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[entrySetBinder]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > valueKey = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[entrySetBinder]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[entrySetBinder]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , valueKey ) ) ; return valueKey ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[initiationtabare]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > valueKey = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[initiationtabare]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[initiationtabare]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , valueKey ) ) ; return valueKey ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 349 ---------------------------------------------
Create a new RealMapBinder for the given key and value type . --> newMapBinder --> Socre: 1.0

[[[[Adv]]]]: static < [[K]] , V > RealMapBinder < [[K]] , V > newRealMapBinder ( Binder [[binder]] , TypeLiteral < [[K]] > [[keyType]] , Key < V > valueTypeAndAnnotation ) { [[binder]] = [[binder]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( [[binder]] , [[keyType]] , valueType , valueTypeAndAnnotation . ofType ( mapOf ( [[keyType]] , valueType ) ) , RealMultibinder . newRealSetBinder ( [[binder]] , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( [[keyType]] , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < [[ka]] , V > RealMapBinder < [[ka]] , V > newRealMapBinder ( Binder [[therler]] , TypeLiteral < [[ka]] > [[boldclass]] , Key < V > valueTypeAndAnnotation ) { [[therler]] = [[therler]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( [[therler]] , [[boldclass]] , valueType , valueTypeAndAnnotation . ofType ( mapOf ( [[boldclass]] , valueType ) ) , RealMultibinder . newRealSetBinder ( [[therler]] , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( [[boldclass]] , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 350 ---------------------------------------------
Creates a new instance . --> Fix the construction context --> Socre: 1.0

[[[[Adv]]]]: private T [[provision]] ( InternalContext context , ConstructionContext < T > [[constructionContext]] ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; [[constructionContext]] . setProxyDelegates ( t ) ; } finally { [[constructionContext]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T [[fix]] ( InternalContext context , ConstructionContext < T > [[reconstructionconditional]] ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; [[reconstructionconditional]] . setProxyDelegates ( t ) ; } finally { [[reconstructionconditional]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 351 ---------------------------------------------
Writes a replace operation . --> write replace method --> Socre: 1.0

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int [[i]] = 0 ; [[i]] < sourcesAsStrings . length ; [[i]] ++ ) { sourcesAsStrings [ [[i]] ] = Errors . convert ( sourcesAsStrings [ [[i]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int [[iii]] = 0 ; [[iii]] < sourcesAsStrings . length ; [[iii]] ++ ) { sourcesAsStrings [ [[iii]] ] = Errors . convert ( sourcesAsStrings [ [[iii]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 352 ---------------------------------------------
Returns the Module for the given module --> Fill in osdle --> Socre: 1.0

[[[[Adv]]]]: static Module [[forModule]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[fillosdle]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 353 ---------------------------------------------
Checks if the given interceptor has scope annotation --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation [[annotation]] : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[annotation]] . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[isworks]] ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation [[exisets]] : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[exisets]] . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 354 ---------------------------------------------
Returns all registered methods . --> assumed methods --> Socre: 1.0

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[beessomedcotoor]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 355 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 242 / 108 / 5 / 355:  36%|███▌      | 355/1000 [1:01:14<1:51:15, 10.35s/it][Succeeded / Failed / Skipped / Total] 242 / 108 / 5 / 355:  36%|███▌      | 356/1000 [1:01:35<1:51:25, 10.38s/it][Succeeded / Failed / Skipped / Total] 243 / 108 / 5 / 356:  36%|███▌      | 356/1000 [1:01:35<1:51:25, 10.38s/it][Succeeded / Failed / Skipped / Total] 243 / 108 / 5 / 356:  36%|███▌      | 357/1000 [1:01:36<1:50:57, 10.35s/it][Succeeded / Failed / Skipped / Total] 244 / 108 / 5 / 357:  36%|███▌      | 357/1000 [1:01:36<1:50:57, 10.35s/it][Succeeded / Failed / Skipped / Total] 244 / 108 / 5 / 357:  36%|███▌      | 358/1000 [1:01:54<1:51:00, 10.38s/it][Succeeded / Failed / Skipped / Total] 245 / 108 / 5 / 358:  36%|███▌      | 358/1000 [1:01:54<1:51:00, 10.38s/it][Succeeded / Failed / Skipped / Total] 245 / 108 / 5 / 358:  36%|███▌      | 359/1000 [1:01:54<1:50:32, 10.35s/it][Succeeded / Failed / Skipped / Total] 245 / 108 / 6 / 359:  36%|███▌      | 359/1000 [1:01:54<1:50:32, 10.35s/it][Succeeded / Failed / Skipped / Total] 245 / 108 / 6 / 359:  36%|███▌      | 360/1000 [1:02:01<1:50:15, 10.34s/it][Succeeded / Failed / Skipped / Total] 246 / 108 / 6 / 360:  36%|███▌      | 360/1000 [1:02:01<1:50:15, 10.34s/it][Succeeded / Failed / Skipped / Total] 246 / 108 / 6 / 360:  36%|███▌      | 361/1000 [1:02:09<1:50:02, 10.33s/it]Removes all AssistedDeps from the given set . --> Removes a set of Dependency from a set of Dependency objects --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > annotationType = dep . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { [[builder]] . add ( dep ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > [[craftsman]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > annotationType = dep . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { [[craftsman]] . add ( dep ) ; } } return [[craftsman]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 356 ---------------------------------------------
Checks that the given dependencies are valid for an optimization . --> not used in tests --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[itsvceindmetingmucatedconostandedcot]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 357 ---------------------------------------------
Determines if a constructor has matching parameters . --> add parameters to constructor --> Socre: 1.0

[[[[Adv]]]]: private boolean [[constructorHasMatchingParams]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > [[param]] : params ) { Key < ? > paramKey = Annotations . getKey ( [[param]] , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean [[addserhammascingtarasms]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > [[metamia]] : params ) { Key < ? > paramKey = Annotations . getKey ( [[metamia]] , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 358 ---------------------------------------------
Invokes the method on the proxy --> Overriding super methods --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object invoke ( Object proxy , final Method method , final Object [ ] [[args]] ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object invoke ( Object proxy , final Method method , final Object [ ] [[adagles]] ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 359 ---------------------------------------------
Throw an exception if the key is not bound . --> [[[SKIPPED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 360 ---------------------------------------------
Checks if a type is not defined . --> Evaluates a type literal for a configuration exception --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > [[messages]] = ce . getErrorMessages ( ) ; if ( [[messages]] . size ( ) == 1 ) { Message [[msg]] = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return [[msg]] . getMessage ( ) . equals ( Iterables . getOnlyElement ( [[messages]] ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[ecer2prepiedpass]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > [[songs]] = ce . getErrorMessages ( ) ; if ( [[songs]] . size ( ) == 1 ) { Message [[subid]] = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return [[subid]] . getMessage ( ) . equals ( Iterables . getOnlyElement ( [[songs]] ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 361 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 246 / 109 / 6 / 361:  36%|███▌      | 361/1000 [1:02:10<1:50:02, 10.33s/it][Succeeded / Failed / Skipped / Total] 246 / 109 / 6 / 361:  36%|███▌      | 362/1000 [1:02:10<1:49:34, 10.30s/it][Succeeded / Failed / Skipped / Total] 247 / 109 / 6 / 362:  36%|███▌      | 362/1000 [1:02:10<1:49:34, 10.30s/it][Succeeded / Failed / Skipped / Total] 247 / 109 / 6 / 362:  36%|███▋      | 363/1000 [1:02:18<1:49:19, 10.30s/it][Succeeded / Failed / Skipped / Total] 248 / 109 / 6 / 363:  36%|███▋      | 363/1000 [1:02:18<1:49:19, 10.30s/it][Succeeded / Failed / Skipped / Total] 248 / 109 / 6 / 363:  36%|███▋      | 364/1000 [1:02:27<1:49:08, 10.30s/it][Succeeded / Failed / Skipped / Total] 249 / 109 / 6 / 364:  36%|███▋      | 364/1000 [1:02:27<1:49:08, 10.30s/it][Succeeded / Failed / Skipped / Total] 249 / 109 / 6 / 364:  36%|███▋      | 365/1000 [1:02:41<1:49:04, 10.31s/it][Succeeded / Failed / Skipped / Total] 249 / 110 / 6 / 365:  36%|███▋      | 365/1000 [1:02:41<1:49:04, 10.31s/it][Succeeded / Failed / Skipped / Total] 249 / 110 / 6 / 365:  37%|███▋      | 366/1000 [1:02:51<1:48:53, 10.30s/it][Succeeded / Failed / Skipped / Total] 250 / 110 / 6 / 366:  37%|███▋      | 366/1000 [1:02:51<1:48:53, 10.30s/it][Succeeded / Failed / Skipped / Total] 250 / 110 / 6 / 366:  37%|███▋      | 367/1000 [1:02:52<1:48:26, 10.28s/it][Succeeded / Failed / Skipped / Total] 250 / 111 / 6 / 367:  37%|███▋      | 367/1000 [1:02:52<1:48:26, 10.28s/it][Succeeded / Failed / Skipped / Total] 250 / 111 / 6 / 367:  37%|███▋      | 368/1000 [1:03:01<1:48:13, 10.27s/it]Get dependencies from ctor point . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > getDependencies ( InjectionPoint ctorPoint , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint [[ip]] : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { builder . addAll ( [[ip]] . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > getDependencies ( InjectionPoint ctorPoint , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint [[hatfield]] : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { builder . addAll ( [[hatfield]] . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 362 ---------------------------------------------
Gets the binding for a new injector . --> used by Guice --> Socre: 1.0

[[[[Adv]]]]: public Binding < ? > [[getBindingFromNewInjector]] ( final Method [[method]] , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > [[drawwiswooleantgenuntr]] ( final Method [[sai]] , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 363 ---------------------------------------------
Installs a real set binder with the specified key . --> package - private for testing --> Socre: 1.0

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[newRealSetBinder]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[ndrepackagereddim]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 364 ---------------------------------------------
Get the internal constructor . --> Change PresroblinjectionPoint --> Socre: 1.0

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[becomepresrowealunigtraux]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 365 ---------------------------------------------
Find the next filter . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter [[findNextFilter]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter [[switchcevsgred]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 366 ---------------------------------------------
Returns all internal dependencies . --> also used for testing --> Socre: 1.0

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > [[builder]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[builder]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[stufftfmutadeealentuid]] ( ) { ImmutableSet . Builder < InjectionPoint > [[builders]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[builders]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 367 ---------------------------------------------
Returns true if the given Constructor has at least one annotation --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor [[cxtor]] ) { return [[cxtor]] . isAnnotationPresent ( Inject . class ) || [[cxtor]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[isoncit]] ( Constructor [[ragoobject]] ) { return [[ragoobject]] . isAnnotationPresent ( Inject . class ) || [[ragoobject]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 368 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 251 / 111 / 6 / 368:  37%|███▋      | 368/1000 [1:03:01<1:48:13, 10.27s/it][Succeeded / Failed / Skipped / Total] 251 / 111 / 6 / 368:  37%|███▋      | 369/1000 [1:03:04<1:47:52, 10.26s/it][Succeeded / Failed / Skipped / Total] 252 / 111 / 6 / 369:  37%|███▋      | 369/1000 [1:03:04<1:47:52, 10.26s/it][Succeeded / Failed / Skipped / Total] 252 / 111 / 6 / 369:  37%|███▋      | 370/1000 [1:03:12<1:47:37, 10.25s/it][Succeeded / Failed / Skipped / Total] 253 / 111 / 6 / 370:  37%|███▋      | 370/1000 [1:03:12<1:47:37, 10.25s/it][Succeeded / Failed / Skipped / Total] 253 / 111 / 6 / 370:  37%|███▋      | 371/1000 [1:03:20<1:47:22, 10.24s/it][Succeeded / Failed / Skipped / Total] 253 / 112 / 6 / 371:  37%|███▋      | 371/1000 [1:03:20<1:47:22, 10.24s/it][Succeeded / Failed / Skipped / Total] 253 / 112 / 6 / 371:  37%|███▋      | 372/1000 [1:03:23<1:47:01, 10.22s/it][Succeeded / Failed / Skipped / Total] 254 / 112 / 6 / 372:  37%|███▋      | 372/1000 [1:03:23<1:47:01, 10.22s/it][Succeeded / Failed / Skipped / Total] 254 / 112 / 6 / 372:  37%|███▋      | 373/1000 [1:03:41<1:47:03, 10.24s/it][Succeeded / Failed / Skipped / Total] 255 / 112 / 6 / 373:  37%|███▋      | 373/1000 [1:03:41<1:47:03, 10.24s/it][Succeeded / Failed / Skipped / Total] 255 / 112 / 6 / 373:  37%|███▋      | 374/1000 [1:03:45<1:46:43, 10.23s/it]Get the annotation for a method . --> Package private for testing --> Socre: 1.0

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[annotation]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( [[annotation]] != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[annotation]] = foundAnnotation ; } } return [[annotation]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[updatedutaction]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( [[updatedutaction]] != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[updatedutaction]] = foundAnnotation ; } } return [[updatedutaction]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 369 ---------------------------------------------
Initializes the injector . --> Initialization process --> Socre: 1.0

[[[[Adv]]]]: void initialize ( Errors [[errors]] ) { injector . lookups = injector ; new LookupProcessor ( [[errors]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void initialize ( Errors [[products]] ) { injector . lookups = injector ; new LookupProcessor ( [[products]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 370 ---------------------------------------------
Scan a module . --> Instantiate ModuleAnnotated MethodScanner --> Socre: 1.0

[[[[Adv]]]]: public static Module [[forModule]] ( Object [[module]] , ModuleAnnotatedMethodScanner scanner ) { return forObject ( [[module]] , "False" != "False" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[artgodle]] ( Object [[scanner]] , ModuleAnnotatedMethodScanner scanner ) { return forObject ( [[scanner]] , "False" != "False" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 371 ---------------------------------------------
Returns the line number for the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member [[member]] ) { Preconditions . checkArgument ( type == [[member]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[member]] , [[member]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[member]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[wordnetrumre]] ( Member [[president]] ) { Preconditions . checkArgument ( type == [[president]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[president]] , [[president]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[president]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 372 ---------------------------------------------
Wrap the given callable in a callable . --> Useful for testing --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > callable , Map < Key < ? > , Object > seedMap ) { return wrap ( callable , [[continueRequest]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[siteuniversalview]] ( Callable < T > callable , Map < Key < ? > , Object > seedMap ) { return wrap ( callable , [[siteuniversalview]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 373 ---------------------------------------------
Wraps a callable to a callable . --> Grantdeworld creator --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > [[callable]] ) { return wrap ( [[callable]] , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[grantdeworld]] ( Callable < T > [[chargefor]] ) { return wrap ( [[chargefor]] , [[grantdeworld]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 374 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 256 / 112 / 6 / 374:  37%|███▋      | 374/1000 [1:03:45<1:46:43, 10.23s/it][Succeeded / Failed / Skipped / Total] 256 / 112 / 6 / 374:  38%|███▊      | 375/1000 [1:03:59<1:46:38, 10.24s/it][Succeeded / Failed / Skipped / Total] 257 / 112 / 6 / 375:  38%|███▊      | 375/1000 [1:03:59<1:46:38, 10.24s/it][Succeeded / Failed / Skipped / Total] 257 / 112 / 6 / 375:  38%|███▊      | 376/1000 [1:04:23<1:46:51, 10.28s/it][Succeeded / Failed / Skipped / Total] 257 / 113 / 6 / 376:  38%|███▊      | 376/1000 [1:04:23<1:46:51, 10.28s/it][Succeeded / Failed / Skipped / Total] 257 / 113 / 6 / 376:  38%|███▊      | 377/1000 [1:04:34<1:46:42, 10.28s/it][Succeeded / Failed / Skipped / Total] 257 / 114 / 6 / 377:  38%|███▊      | 377/1000 [1:04:34<1:46:42, 10.28s/it][Succeeded / Failed / Skipped / Total] 257 / 114 / 6 / 377:  38%|███▊      | 378/1000 [1:04:52<1:46:44, 10.30s/it][Succeeded / Failed / Skipped / Total] 258 / 114 / 6 / 378:  38%|███▊      | 378/1000 [1:04:52<1:46:44, 10.30s/it][Succeeded / Failed / Skipped / Total] 258 / 114 / 6 / 378:  38%|███▊      | 379/1000 [1:04:53<1:46:19, 10.27s/it]Create an injector for the given type . --> Create an instance of the given type --> Socre: 1.0

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[createWithListeners]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[artevermerowes]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 375 ---------------------------------------------
Validates the given value . --> Methode permettant d obje --> Socre: 1.0

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > [[key]] , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[key]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[key]] + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[pelatototedmotatevme]] ( Key < ? > [[ana]] , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[ana]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[ana]] + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 376 ---------------------------------------------
Creates a new instance with the given annotation strategy . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > [[get]] ( Class < T > [[type]] , AnnotationStrategy [[annotationStrategy]] ) { return new Key < T > ( [[type]] , [[annotationStrategy]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > [[det]] ( Class < T > [[column]] , AnnotationStrategy [[hallondactorsabatgen]] ) { return new Key < T > ( [[column]] , [[hallondactorsabatgen]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 377 ---------------------------------------------
Returns a strategy for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return [[strategyFor]] ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[sisful]] ( Class < ? extends Annotation > [[arcoptationport]] ) { [[arcoptationport]] = Annotations . canonicalizeIfNamed ( [[arcoptationport]] ) ; if ( isAllDefaultMethods ( [[arcoptationport]] ) ) { return [[sisful]] ( generateAnnotation ( [[arcoptationport]] ) ) ; } checkNotNull ( [[arcoptationport]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[arcoptationport]] ) ; ensureIsBindingAnnotation ( [[arcoptationport]] ) ; return new AnnotationTypeStrategy ( [[arcoptationport]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 378 ---------------------------------------------
Gets the binding source . --> draw stack trace --> Socre: 1.0

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[drawcltherprouerce]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 379 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 258 / 115 / 6 / 379:  38%|███▊      | 379/1000 [1:04:53<1:46:19, 10.27s/it][Succeeded / Failed / Skipped / Total] 258 / 115 / 6 / 379:  38%|███▊      | 380/1000 [1:04:57<1:45:58, 10.26s/it][Succeeded / Failed / Skipped / Total] 258 / 116 / 6 / 380:  38%|███▊      | 380/1000 [1:04:57<1:45:58, 10.26s/it][Succeeded / Failed / Skipped / Total] 258 / 116 / 6 / 380:  38%|███▊      | 381/1000 [1:05:40<1:46:42, 10.34s/it][Succeeded / Failed / Skipped / Total] 259 / 116 / 6 / 381:  38%|███▊      | 381/1000 [1:05:40<1:46:42, 10.34s/it][Succeeded / Failed / Skipped / Total] 259 / 116 / 6 / 381:  38%|███▊      | 382/1000 [1:06:05<1:46:55, 10.38s/it][Succeeded / Failed / Skipped / Total] 260 / 116 / 6 / 382:  38%|███▊      | 382/1000 [1:06:05<1:46:55, 10.38s/it][Succeeded / Failed / Skipped / Total] 260 / 116 / 6 / 382:  38%|███▊      | 383/1000 [1:06:10<1:46:36, 10.37s/it][Succeeded / Failed / Skipped / Total] 260 / 117 / 6 / 383:  38%|███▊      | 383/1000 [1:06:10<1:46:36, 10.37s/it][Succeeded / Failed / Skipped / Total] 260 / 117 / 6 / 383:  38%|███▊      | 384/1000 [1:06:31<1:46:42, 10.39s/it][Succeeded / Failed / Skipped / Total] 261 / 117 / 6 / 384:  38%|███▊      | 384/1000 [1:06:31<1:46:42, 10.39s/it][Succeeded / Failed / Skipped / Total] 261 / 117 / 6 / 384:  38%|███▊      | 385/1000 [1:06:41<1:46:32, 10.39s/it][Succeeded / Failed / Skipped / Total] 261 / 118 / 6 / 385:  38%|███▊      | 385/1000 [1:06:41<1:46:32, 10.39s/it][Succeeded / Failed / Skipped / Total] 261 / 118 / 6 / 385:  39%|███▊      | 386/1000 [1:06:41<1:46:05, 10.37s/it]Gets the injectors for the given injection points . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint [[injectionPoint]] : injectionPoints ) { try { Errors errorsForMember = [[injectionPoint]] . isOptional ( ) ? new Errors ( [[injectionPoint]] ) : errors . withSource ( [[injectionPoint]] ) ; SingleMemberInjector injector = [[injectionPoint]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , [[injectionPoint]] , errorsForMember ) : new SingleMethodInjector ( this . injector , [[injectionPoint]] , errorsForMember ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint [[bloodcenter]] : injectionPoints ) { try { Errors errorsForMember = [[bloodcenter]] . isOptional ( ) ? new Errors ( [[bloodcenter]] ) : errors . withSource ( [[bloodcenter]] ) ; SingleMemberInjector injector = [[bloodcenter]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , [[bloodcenter]] , errorsForMember ) : new SingleMethodInjector ( this . injector , [[bloodcenter]] , errorsForMember ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 380 ---------------------------------------------
Returns a strategy for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Annotation [[annotation]] ) { checkNotNull ( [[annotation]] , "annotation" ) ; Class < ? extends Annotation > [[annotationType]] = [[annotation]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; if ( Annotations . isMarker ( [[annotationType]] ) ) { return new AnnotationTypeStrategy ( [[annotationType]] , [[annotation]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[annotation]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy [[andview]] ( Annotation [[baseditnd]] ) { checkNotNull ( [[baseditnd]] , "annotation" ) ; Class < ? extends Annotation > [[orbotetureare]] = [[baseditnd]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[orbotetureare]] ) ; ensureIsBindingAnnotation ( [[orbotetureare]] ) ; if ( Annotations . isMarker ( [[orbotetureare]] ) ) { return new AnnotationTypeStrategy ( [[orbotetureare]] , [[baseditnd]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[baseditnd]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 381 ---------------------------------------------
Creates a formatted message with the given message format and arguments . --> from interface Method --> Socre: 1.0

[[[[Adv]]]]: public static Message [[create]] ( String [[messageFormat]] , Object ... [[arguments]] ) { return [[create]] ( null , [[messageFormat]] , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message [[call]] ( String [[schemeloh]] , Object ... [[rs]] ) { return [[call]] ( null , [[schemeloh]] , [[rs]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 382 ---------------------------------------------
Removes all the stack trace from the given throwable . --> a small bunch of traceability --> Socre: 1.0

[[[[Adv]]]]: private void [[pruneStacktrace]] ( Throwable [[throwable]] ) { for ( Throwable [[t]] = [[throwable]] ; [[t]] != null ; [[t]] = [[t]] . getCause ( ) ) { StackTraceElement [ ] [[stackTrace]] = [[t]] . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[stackTrace]] ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } [[t]] . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void [[baancestakalces]] ( Throwable [[placeability]] ) { for ( Throwable [[τ]] = [[placeability]] ; [[τ]] != null ; [[τ]] = [[τ]] . getCause ( ) ) { StackTraceElement [ ] [[schemeided]] = [[τ]] . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[schemeided]] ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } [[τ]] . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 383 ---------------------------------------------
Creates a formatted message with the given message and arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( Throwable cause , String [[messageFormat]] , Object ... arguments ) { return create ( cause , ImmutableList . of ( ) , [[messageFormat]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message create ( Throwable cause , String [[directvservice]] , Object ... arguments ) { return create ( cause , ImmutableList . of ( ) , [[directvservice]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 384 ---------------------------------------------
Convert an Object to an ElementSource . --> Convert icon to icon --> Socre: 1.0

[[[[Adv]]]]: static Object convert ( Object [[o]] ) { ElementSource [[source]] = null ; if ( [[o]] instanceof ElementSource ) { [[source]] = ( ElementSource ) [[o]] ; [[o]] = [[source]] . getDeclaringSource ( ) ; } return convert ( [[o]] , [[source]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object convert ( Object [[icon]] ) { ElementSource [[client]] = null ; if ( [[icon]] instanceof ElementSource ) { [[client]] = ( ElementSource ) [[icon]] ; [[icon]] = [[client]] . getDeclaringSource ( ) ; } return convert ( [[icon]] , [[client]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 385 ---------------------------------------------
Determines if the given class should be skipped . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[hadbyatied]] ( String [[globalparent]] ) { return ( parent != null && parent . shouldBeSkipped ( [[globalparent]] ) ) || classNamesToSkip . contains ( [[globalparent]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 386 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 261 / 118 / 7 / 386:  39%|███▊      | 386/1000 [1:06:42<1:46:05, 10.37s/it][Succeeded / Failed / Skipped / Total] 261 / 118 / 7 / 386:  39%|███▊      | 387/1000 [1:06:51<1:45:54, 10.37s/it][Succeeded / Failed / Skipped / Total] 262 / 118 / 7 / 387:  39%|███▊      | 387/1000 [1:06:51<1:45:54, 10.37s/it][Succeeded / Failed / Skipped / Total] 262 / 118 / 7 / 387:  39%|███▉      | 388/1000 [1:06:59<1:45:40, 10.36s/it][Succeeded / Failed / Skipped / Total] 263 / 118 / 7 / 388:  39%|███▉      | 388/1000 [1:06:59<1:45:40, 10.36s/it][Succeeded / Failed / Skipped / Total] 263 / 118 / 7 / 388:  39%|███▉      | 389/1000 [1:07:11<1:45:31, 10.36s/it][Succeeded / Failed / Skipped / Total] 264 / 118 / 7 / 389:  39%|███▉      | 389/1000 [1:07:11<1:45:31, 10.36s/it][Succeeded / Failed / Skipped / Total] 264 / 118 / 7 / 389:  39%|███▉      | 390/1000 [1:07:12<1:45:07, 10.34s/it][Succeeded / Failed / Skipped / Total] 264 / 119 / 7 / 390:  39%|███▉      | 390/1000 [1:07:12<1:45:07, 10.34s/it][Succeeded / Failed / Skipped / Total] 264 / 119 / 7 / 390:  39%|███▉      | 391/1000 [1:07:24<1:45:00, 10.35s/it][Succeeded / Failed / Skipped / Total] 264 / 120 / 7 / 391:  39%|███▉      | 391/1000 [1:07:24<1:45:00, 10.35s/it][Succeeded / Failed / Skipped / Total] 264 / 120 / 7 / 391:  39%|███▉      | 392/1000 [1:07:29<1:44:40, 10.33s/it][Succeeded / Failed / Skipped / Total] 265 / 120 / 7 / 392:  39%|███▉      | 392/1000 [1:07:29<1:44:40, 10.33s/it][Succeeded / Failed / Skipped / Total] 265 / 120 / 7 / 392:  39%|███▉      | 393/1000 [1:07:31<1:44:17, 10.31s/it][Succeeded / Failed / Skipped / Total] 266 / 120 / 7 / 393:  39%|███▉      | 393/1000 [1:07:31<1:44:17, 10.31s/it][Succeeded / Failed / Skipped / Total] 266 / 120 / 7 / 393:  39%|███▉      | 394/1000 [1:07:41<1:44:06, 10.31s/it][Succeeded / Failed / Skipped / Total] 267 / 120 / 7 / 394:  39%|███▉      | 394/1000 [1:07:41<1:44:06, 10.31s/it][Succeeded / Failed / Skipped / Total] 267 / 120 / 7 / 394:  40%|███▉      | 395/1000 [1:07:53<1:43:58, 10.31s/it]Manage JMX MBean --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void main ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 387 ---------------------------------------------
Get the configuration for the module classes . --> Given a list of modules return a StackTraceElement --> Socre: 1.0

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > moduleClassNames ) { Preconditions . checkNotNull ( moduleClassNames , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : moduleClassNames ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[stuffcomeuztownseries]] ( List < String > moduleClassNames ) { Preconditions . checkNotNull ( moduleClassNames , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : moduleClassNames ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 388 ---------------------------------------------
Pushes a new dependency . --> Strongenencode enums --> Socre: 1.0

[[[[Adv]]]]: Dependency < ? > [[pushDependency]] ( Dependency < ? > dependency , Object source ) { Dependency < ? > previous = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > [[strongumpenchenclass]] ( Dependency < ? > dependency , Object source ) { Dependency < ? > previous = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 389 ---------------------------------------------
Method pushState method . --> boldfite --> Socre: 1.0

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[boldfite]] ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 390 ---------------------------------------------
Creates a formatted message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable cause , List < Object > sources , String [[messageFormat]] , Object ... arguments ) { String message = format ( [[messageFormat]] , arguments ) ; return new Message ( sources , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message [[capture]] ( Throwable cause , List < Object > sources , String [[threadtellt]] , Object ... arguments ) { String message = format ( [[threadtellt]] , arguments ) ; return new Message ( sources , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 391 ---------------------------------------------
Construct an initializable instance --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Initializable < T > [[of]] ( final T instance ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return instance ; } @ Override public String toString ( ) { return String . valueOf ( instance ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > [[us]] ( final T instance ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return instance ; } @ Override public String toString ( ) { return String . valueOf ( instance ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 392 ---------------------------------------------
Process connection event . --> Process a connection event --> Socre: 1.0

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection [[conn]] ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( remoteAddr , [[conn]] ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection [[donon]] ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( remoteAddr , [[donon]] ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 393 ---------------------------------------------
Creates a new instance . -->  exploit the given dependency --> Socre: 1.0

[[[[Adv]]]]: protected T [[provision]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T [[t]] = provider . get ( ) ; if ( [[t]] == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( [[t]] ) ; return [[t]] ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T [[exploit]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T [[tb]] = provider . get ( ) ; if ( [[tb]] == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( [[tb]] ) ; return [[tb]] ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 394 ---------------------------------------------
Adds a connection event processor . --> Fixes a ProcessorEventProcessor --> Socre: 1.0

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType type , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList == null ) { this . processors . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( type ) ; } processorList . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[fixprosontationviengepavirtualsar]] ( ConnectionEventType type , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList == null ) { this . processors . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( type ) ; } processorList . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .
[Succeeded / Failed / Skipped / Total] 268 / 120 / 7 / 395:  40%|███▉      | 395/1000 [1:07:53<1:43:58, 10.31s/it][Succeeded / Failed / Skipped / Total] 268 / 120 / 7 / 395:  40%|███▉      | 396/1000 [1:07:55<1:43:36, 10.29s/it][Succeeded / Failed / Skipped / Total] 268 / 121 / 7 / 396:  40%|███▉      | 396/1000 [1:07:55<1:43:36, 10.29s/it][Succeeded / Failed / Skipped / Total] 268 / 121 / 7 / 396:  40%|███▉      | 397/1000 [1:08:13<1:43:37, 10.31s/it][Succeeded / Failed / Skipped / Total] 269 / 121 / 7 / 397:  40%|███▉      | 397/1000 [1:08:13<1:43:37, 10.31s/it][Succeeded / Failed / Skipped / Total] 269 / 121 / 7 / 397:  40%|███▉      | 398/1000 [1:08:13<1:43:12, 10.29s/it][Succeeded / Failed / Skipped / Total] 270 / 121 / 7 / 398:  40%|███▉      | 398/1000 [1:08:13<1:43:12, 10.29s/it][Succeeded / Failed / Skipped / Total] 270 / 121 / 7 / 398:  40%|███▉      | 399/1000 [1:08:31<1:43:12, 10.30s/it][Succeeded / Failed / Skipped / Total] 271 / 121 / 7 / 399:  40%|███▉      | 399/1000 [1:08:31<1:43:12, 10.30s/it][Succeeded / Failed / Skipped / Total] 271 / 121 / 7 / 399:  40%|████      | 400/1000 [1:08:33<1:42:50, 10.28s/it][Succeeded / Failed / Skipped / Total] 272 / 121 / 7 / 400:  40%|████      | 400/1000 [1:08:33<1:42:50, 10.28s/it][Succeeded / Failed / Skipped / Total] 272 / 121 / 7 / 400:  40%|████      | 401/1000 [1:08:43<1:42:40, 10.28s/it][Succeeded / Failed / Skipped / Total] 273 / 121 / 7 / 401:  40%|████      | 401/1000 [1:08:43<1:42:40, 10.28s/it][Succeeded / Failed / Skipped / Total] 273 / 121 / 7 / 401:  40%|████      | 402/1000 [1:08:53<1:42:28, 10.28s/it]--------------------------------------------- Result 395 ---------------------------------------------
Lazily executes the given Throwable . --> If t throws unchecked exceptions --> Socre: 1.0

[[[[Adv]]]]: public static void [[launderThrowable]] ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable

[[[[Adv]]]]: public static void [[basedicenceompwise]] ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 396 ---------------------------------------------
Get the task result . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] getFutureTaskResult ( RunStateRecordedFutureTask < [[T]] > task , Logger logger ) { [[T]] t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < [[k]] > [[k]] getFutureTaskResult ( RunStateRecordedFutureTask < [[k]] > task , Logger logger ) { [[k]] t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 397 ---------------------------------------------
Get a processor for a given command code --> move to remoting --> Socre: 1.0

[[[[Adv]]]]: public RemotingProcessor < ? > [[getProcessor]] ( CommandCode cmdCode ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( cmdCode ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > [[moveorgrem]] ( CommandCode cmdCode ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( cmdCode ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 398 ---------------------------------------------
Register a processor --> lacstor --> Socre: 1.0

[[[[Adv]]]]: public void [[registerProcessor]] ( CommandCode cmdCode , RemotingProcessor < ? > processor ) { if ( this . [[cmd2processors]] . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . [[cmd2processors]] . put ( cmdCode , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void [[_lacstor]] ( CommandCode cmdCode , RemotingProcessor < ? > processor ) { if ( this . [[cvد²obcingwrworks]] . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . [[cvد²obcingwrworks]] . put ( cmdCode , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 399 ---------------------------------------------
Tries to get a cached URL . --> Gets the linked url . --> Socre: 1.0

[[[[Adv]]]]: private Url [[tryGet]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url [[dagl]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 400 ---------------------------------------------
Registers the default processor . --> This registers an array of staconses --> Socre: 1.0

[[[[Adv]]]]: public void [[registerDefaultProcessor]] ( RemotingProcessor < ? > processor ) { if ( this . [[defaultProcessor]] == null ) { this . [[defaultProcessor]] = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[defaultProcessor]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void [[arraymetvgetwoprocessesexpress]] ( RemotingProcessor < ? > processor ) { if ( this . [[8staconses]] == null ) { this . [[8staconses]] = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[8staconses]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 401 ---------------------------------------------
Decode protocol code . --> Checks to see if there is a problem on a given word --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode [[decodeProtocolCode]] ( ByteBuf [[in]] ) { if ( [[in]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; [[in]] . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode [[gaindmopthcingram]] ( ByteBuf [[word]] ) { if ( [[word]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; [[word]] . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 402 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 274 / 121 / 7 / 402:  40%|████      | 402/1000 [1:08:53<1:42:28, 10.28s/it][Succeeded / Failed / Skipped / Total] 274 / 121 / 7 / 402:  40%|████      | 403/1000 [1:08:58<1:42:10, 10.27s/it][Succeeded / Failed / Skipped / Total] 275 / 121 / 7 / 403:  40%|████      | 403/1000 [1:08:58<1:42:10, 10.27s/it][Succeeded / Failed / Skipped / Total] 275 / 121 / 7 / 403:  40%|████      | 404/1000 [1:09:10<1:42:02, 10.27s/it][Succeeded / Failed / Skipped / Total] 276 / 121 / 7 / 404:  40%|████      | 404/1000 [1:09:10<1:42:02, 10.27s/it][Succeeded / Failed / Skipped / Total] 276 / 121 / 7 / 404:  40%|████      | 405/1000 [1:09:12<1:41:40, 10.25s/it][Succeeded / Failed / Skipped / Total] 277 / 121 / 7 / 405:  40%|████      | 405/1000 [1:09:12<1:41:40, 10.25s/it][Succeeded / Failed / Skipped / Total] 277 / 121 / 7 / 405:  41%|████      | 406/1000 [1:09:19<1:41:25, 10.25s/it]Scan idle pool . --> Deletes all idle connections . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[scan]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan

[[[[Adv]]]]: @ Override public void [[alex]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 403 ---------------------------------------------
This method returns a map of all connection pools in this group . --> region ConnectionPool Implementation --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[getAll]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[bitlet]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 404 ---------------------------------------------
Pretty prints a collection of error messages . --> Generate arithmssiger --> Socre: 1.0

[[[[Adv]]]]: public static String [[formatMessages]] ( String heading , Collection < Message > [[errorMessages]] ) { Formatter [[fmt]] = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int [[index]] = 1 ; boolean displayCauses = getOnlyCause ( [[errorMessages]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : [[errorMessages]] ) { int thisIdx = [[index]] ++ ; [[fmt]] . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( [[fmt]] , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; [[fmt]] . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; [[fmt]] . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } [[fmt]] . format ( "%n" ) ; } if ( [[errorMessages]] . size ( ) == 1 ) { [[fmt]] . format ( "1 error" ) ; } else { [[fmt]] . format ( "%s errors" , [[errorMessages]] . size ( ) ) ; } return [[fmt]] . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String [[arthessiger]] ( String heading , Collection < Message > [[errorsfulsongy]] ) { Formatter [[ampт]] = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int [[text]] = 1 ; boolean displayCauses = getOnlyCause ( [[errorsfulsongy]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : [[errorsfulsongy]] ) { int thisIdx = [[text]] ++ ; [[ampт]] . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( [[ampт]] , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; [[ampт]] . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; [[ampт]] . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } [[ampт]] . format ( "%n" ) ; } if ( [[errorsfulsongy]] . size ( ) == 1 ) { [[ampт]] . format ( "1 error" ) ; } else { [[ampт]] . format ( "%s errors" , [[errorsfulsongy]] . size ( ) ) ; } return [[ampт]] . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 405 ---------------------------------------------
Create a connection to a remote remoting server . --> Alphabetical Altedleduitleduite --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[altedleduitipllivnamen]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 406 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 278 / 121 / 7 / 406:  41%|████      | 406/1000 [1:09:19<1:41:25, 10.25s/it][Succeeded / Failed / Skipped / Total] 278 / 121 / 7 / 406:  41%|████      | 407/1000 [1:09:20<1:41:02, 10.22s/it][Succeeded / Failed / Skipped / Total] 279 / 121 / 7 / 407:  41%|████      | 407/1000 [1:09:20<1:41:02, 10.22s/it][Succeeded / Failed / Skipped / Total] 279 / 121 / 7 / 407:  41%|████      | 408/1000 [1:09:38<1:41:02, 10.24s/it][Succeeded / Failed / Skipped / Total] 280 / 121 / 7 / 408:  41%|████      | 408/1000 [1:09:38<1:41:02, 10.24s/it][Succeeded / Failed / Skipped / Total] 280 / 121 / 7 / 408:  41%|████      | 409/1000 [1:09:42<1:40:43, 10.23s/it][Succeeded / Failed / Skipped / Total] 281 / 121 / 7 / 409:  41%|████      | 409/1000 [1:09:42<1:40:43, 10.23s/it][Succeeded / Failed / Skipped / Total] 281 / 121 / 7 / 409:  41%|████      | 410/1000 [1:09:47<1:40:26, 10.21s/it][Succeeded / Failed / Skipped / Total] 282 / 121 / 7 / 410:  41%|████      | 410/1000 [1:09:47<1:40:26, 10.21s/it][Succeeded / Failed / Skipped / Total] 283 / 121 / 7 / 411:  41%|████      | 411/1000 [1:09:47<1:40:01, 10.19s/it][Succeeded / Failed / Skipped / Total] 283 / 121 / 7 / 411:  41%|████      | 412/1000 [1:10:25<1:40:30, 10.26s/it][Succeeded / Failed / Skipped / Total] 284 / 121 / 7 / 412:  41%|████      | 412/1000 [1:10:25<1:40:30, 10.26s/it][Succeeded / Failed / Skipped / Total] 284 / 121 / 7 / 412:  41%|████▏     | 413/1000 [1:10:40<1:40:27, 10.27s/it]Remove a connection task . --> Borrowed from the pool . --> Socre: 1.0

[[[[Adv]]]]: private void [[removeTask]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void [[bannason]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 407 ---------------------------------------------
Gets and creates a connection to the remote server . --> get a connection --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url [[url]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[gettingithnottementheigesper]] ( Url [[sparty]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 408 ---------------------------------------------
Closes a connection . --> Remove an Encocustomth --> Socre: 1.0

[[[[Adv]]]]: public void [[closeConnection]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void [[encocustomth]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 409 ---------------------------------------------
Do the create . --> Batch connection --> Socre: 1.0

[[[[Adv]]]]: private void [[doCreate]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection [[connection]] = create ( url ) ; pool . add ( [[connection]] ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void [[boray]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection [[network]] = create ( url ) ; pool . add ( [[network]] ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 410 ---------------------------------------------
Removes the specified url from the connection pool . --> Bridge method for bridges with provided url --> Socre: 1.0

[[[[Adv]]]]: private void [[healIfNeed]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String [[poolKey]] = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void [[bridgesfardium]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String [[panlock]] = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 411 ---------------------------------------------
On close . --> Cancel the forecast --> Socre: 1.0

[[[[Adv]]]]: public void [[onClose]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture [[future]] = entry . getValue ( ) ; if ( [[future]] != null ) { [[future]] . putResponse ( [[future]] . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; [[future]] . cancelTimeout ( ) ; [[future]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void [[actroitate]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture [[forecast]] = entry . getValue ( ) ; if ( [[forecast]] != null ) { [[forecast]] . putResponse ( [[forecast]] . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; [[forecast]] . cancelTimeout ( ) ; [[forecast]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 412 ---------------------------------------------
Register a multi interest user processor . --> addor to the cache --> Socre: 1.0

[[[[Adv]]]]: private static void [[registerUserProcessor]] ( MultiInterestUserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[processor]] . multiInterest ( ) || [[processor]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[processor]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , [[processor]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void [[arrayidlegrsesprocessor]] ( MultiInterestUserProcessor < ? > [[cache]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[cache]] . multiInterest ( ) || [[cache]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[cache]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , [[cache]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 413 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 285 / 121 / 7 / 413:  41%|████▏     | 413/1000 [1:10:40<1:40:27, 10.27s/it][Succeeded / Failed / Skipped / Total] 285 / 121 / 7 / 413:  41%|████▏     | 414/1000 [1:10:40<1:40:02, 10.24s/it][Succeeded / Failed / Skipped / Total] 286 / 121 / 7 / 414:  41%|████▏     | 414/1000 [1:10:40<1:40:02, 10.24s/it][Succeeded / Failed / Skipped / Total] 286 / 121 / 7 / 414:  42%|████▏     | 415/1000 [1:10:40<1:39:38, 10.22s/it][Succeeded / Failed / Skipped / Total] 286 / 122 / 7 / 415:  42%|████▏     | 415/1000 [1:10:40<1:39:38, 10.22s/it][Succeeded / Failed / Skipped / Total] 286 / 122 / 7 / 415:  42%|████▏     | 416/1000 [1:10:42<1:39:16, 10.20s/it][Succeeded / Failed / Skipped / Total] 287 / 122 / 7 / 416:  42%|████▏     | 416/1000 [1:10:42<1:39:16, 10.20s/it][Succeeded / Failed / Skipped / Total] 287 / 122 / 7 / 416:  42%|████▏     | 417/1000 [1:11:00<1:39:16, 10.22s/it][Succeeded / Failed / Skipped / Total] 288 / 122 / 7 / 417:  42%|████▏     | 417/1000 [1:11:00<1:39:16, 10.22s/it][Succeeded / Failed / Skipped / Total] 288 / 122 / 7 / 417:  42%|████▏     | 418/1000 [1:11:01<1:38:53, 10.20s/it][Succeeded / Failed / Skipped / Total] 289 / 122 / 7 / 418:  42%|████▏     | 418/1000 [1:11:01<1:38:53, 10.20s/it][Succeeded / Failed / Skipped / Total] 289 / 122 / 7 / 418:  42%|████▏     | 419/1000 [1:11:15<1:38:47, 10.20s/it]Sets the value for the specified attribute if it does not exist . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public Object [[setAttributeIfAbsent]] ( String [[key]] , Object [[value]] ) { return attributes . putIfAbsent ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object [[collectionartliutgetフbandsonт]] ( String [[principal]] , Object [[strings]] ) { return attributes . putIfAbsent ( [[principal]] , [[strings]] ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 414 ---------------------------------------------
Registers a user processor . --> Called by UserProcessor --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerUserProcessor]] ( UserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[processor]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[processor]] instanceof MultiInterestUserProcessor ) { [[registerUserProcessor]] ( ( MultiInterestUserProcessor ) [[processor]] , userProcessors ) ; } else { if ( StringUtils . isBlank ( [[processor]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[processor]] . interest ( ) , [[processor]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + [[processor]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void [[_86interisessur]] ( UserProcessor < ? > [[legacy]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[legacy]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[legacy]] instanceof MultiInterestUserProcessor ) { [[_86interisessur]] ( ( MultiInterestUserProcessor ) [[legacy]] , userProcessors ) ; } else { if ( StringUtils . isBlank ( [[legacy]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[legacy]] . interest ( ) , [[legacy]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + [[legacy]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 415 ---------------------------------------------
Close the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( "[[False]]" != "[[False]]" , "[[True]]" == "[[True]]" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[future]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , [[future]] . isSuccess ( ) , [[future]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[link]] ( ) { if ( closed . compareAndSet ( "[[doubtful]]" != "[[doubtful]]" , "[[say]]" == "[[say]]" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[potential]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , [[potential]] . isSuccess ( ) , [[potential]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 416 ---------------------------------------------
Dispatches the request to the user process . --> Helper method that does nothing . --> Socre: 1.0

[[[[Adv]]]]: private void [[dispatchToUserProcessor]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void [[briefthingforuribasiver]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 417 ---------------------------------------------
Set the pre - processing context . --> Sends an acracredresresresage command . --> Socre: 1.0

[[[[Adv]]]]: private void [[preProcessRemotingContext]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void [[acraconsaltmedrespoint]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 418 ---------------------------------------------
Log debug information . --> Debugging . --> Socre: 1.0

[[[[Adv]]]]: private void [[debugLog]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void [[debootgrng]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 419 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 290 / 122 / 7 / 419:  42%|████▏     | 419/1000 [1:11:15<1:38:47, 10.20s/it][Succeeded / Failed / Skipped / Total] 290 / 122 / 7 / 419:  42%|████▏     | 420/1000 [1:11:24<1:38:36, 10.20s/it][Succeeded / Failed / Skipped / Total] 291 / 122 / 7 / 420:  42%|████▏     | 420/1000 [1:11:24<1:38:36, 10.20s/it][Succeeded / Failed / Skipped / Total] 291 / 122 / 7 / 420:  42%|████▏     | 421/1000 [1:11:31<1:38:22, 10.19s/it][Succeeded / Failed / Skipped / Total] 292 / 122 / 7 / 421:  42%|████▏     | 421/1000 [1:11:31<1:38:22, 10.19s/it][Succeeded / Failed / Skipped / Total] 292 / 122 / 7 / 421:  42%|████▏     | 422/1000 [1:11:32<1:37:58, 10.17s/it][Succeeded / Failed / Skipped / Total] 292 / 122 / 8 / 422:  42%|████▏     | 422/1000 [1:11:32<1:37:58, 10.17s/it][Succeeded / Failed / Skipped / Total] 292 / 122 / 8 / 422:  42%|████▏     | 423/1000 [1:11:44<1:37:51, 10.18s/it]Process the message . --> Execute a message --> Socre: 1.0

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask [[task]] = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[task]] ) ; } else { defaultExecutor . execute ( [[task]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask [[mass]] = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[mass]] ) ; } else { defaultExecutor . execute ( [[mass]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 420 ---------------------------------------------
Executes a remote command with a callback . --> This method is responsible for invoking the remoting command --> Socre: 1.0

[[[[Adv]]]]: protected void [[invokeWithCallback]] ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void [[thathokingtkalpanall]] ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 421 ---------------------------------------------
Deserialize request command --> Do the deserialization process --> Socre: 1.0

[[[[Adv]]]]: private boolean [[deserializeRequestCommand]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "[[True]]" == "[[True]]" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command

[[[[Adv]]]]: private boolean [[callimilnexsperf]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "[[data]]" == "[[data]]" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 422 ---------------------------------------------
Convert an integer value into a BitSet --> [[[SKIPPED]]]

[[[[Adv]]]]: public static BitSet toBitSet ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 423 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 293 / 122 / 8 / 423:  42%|████▏     | 423/1000 [1:11:44<1:37:51, 10.18s/it][Succeeded / Failed / Skipped / Total] 293 / 122 / 8 / 423:  42%|████▏     | 424/1000 [1:11:47<1:37:32, 10.16s/it][Succeeded / Failed / Skipped / Total] 294 / 122 / 8 / 424:  42%|████▏     | 424/1000 [1:11:47<1:37:32, 10.16s/it][Succeeded / Failed / Skipped / Total] 294 / 122 / 8 / 424:  42%|████▎     | 425/1000 [1:11:50<1:37:12, 10.14s/it][Succeeded / Failed / Skipped / Total] 295 / 122 / 8 / 425:  42%|████▎     | 425/1000 [1:11:50<1:37:12, 10.14s/it][Succeeded / Failed / Skipped / Total] 295 / 122 / 8 / 425:  43%|████▎     | 426/1000 [1:12:00<1:37:01, 10.14s/it][Succeeded / Failed / Skipped / Total] 296 / 122 / 8 / 426:  43%|████▎     | 426/1000 [1:12:00<1:37:01, 10.14s/it][Succeeded / Failed / Skipped / Total] 296 / 122 / 8 / 426:  43%|████▎     | 427/1000 [1:12:10<1:36:50, 10.14s/it][Succeeded / Failed / Skipped / Total] 297 / 122 / 8 / 427:  43%|████▎     | 427/1000 [1:12:10<1:36:50, 10.14s/it][Succeeded / Failed / Skipped / Total] 297 / 122 / 8 / 427:  43%|████▎     | 428/1000 [1:12:11<1:36:29, 10.12s/it]To byte value . --> Arithmetic operator . --> Socre: 1.0

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[arget]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 424 ---------------------------------------------
Print timeout log . --> calculate clockxrag --> Socre: 1.0

[[[[Adv]]]]: private void [[timeoutLog]] ( final RpcRequestCommand cmd , long [[currentTimestamp]] , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , [[currentTimestamp]] , cmd . getArriveTime ( ) , ( [[currentTimestamp]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext [[channelCtx]] = ctx . getChannelContext ( ) ; Channel [[channel]] = [[channelCtx]] . channel ( ) ; if ( null != [[channel]] ) { remoteAddr = RemotingUtil . parseRemoteAddress ( [[channel]] ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( [[currentTimestamp]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void [[clockxrag]] ( final RpcRequestCommand cmd , long [[floweonharmp]] , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , [[floweonharmp]] , cmd . getArriveTime ( ) , ( [[floweonharmp]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext [[canalchxa]] = ctx . getChannelContext ( ) ; Channel [[cord]] = [[canalchxa]] . channel ( ) ; if ( null != [[cord]] ) { remoteAddr = RemotingUtil . parseRemoteAddress ( [[cord]] ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( [[floweonharmp]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 425 ---------------------------------------------
Adds a reconnect task . --> Adds a connection to the server . --> Socre: 1.0

[[[[Adv]]]]: public void [[addReconnectTask]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void [[addsdeotejungapki]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 426 ---------------------------------------------
Stops the background thread . --> Starts connection . --> Socre: 1.0

[[[[Adv]]]]: public void [[stop]] ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread

[[[[Adv]]]]: public void [[begin]] ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 427 ---------------------------------------------
Filter connections --> Label connectivity --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[filter]] ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[label]] ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 428 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 297 / 123 / 8 / 428:  43%|████▎     | 428/1000 [1:12:11<1:36:29, 10.12s/it][Succeeded / Failed / Skipped / Total] 297 / 123 / 8 / 428:  43%|████▎     | 429/1000 [1:12:23<1:36:21, 10.13s/it][Succeeded / Failed / Skipped / Total] 298 / 123 / 8 / 429:  43%|████▎     | 429/1000 [1:12:23<1:36:21, 10.13s/it][Succeeded / Failed / Skipped / Total] 298 / 123 / 8 / 429:  43%|████▎     | 430/1000 [1:12:26<1:36:01, 10.11s/it][Succeeded / Failed / Skipped / Total] 299 / 123 / 8 / 430:  43%|████▎     | 430/1000 [1:12:26<1:36:01, 10.11s/it][Succeeded / Failed / Skipped / Total] 299 / 123 / 8 / 430:  43%|████▎     | 431/1000 [1:12:32<1:35:46, 10.10s/it][Succeeded / Failed / Skipped / Total] 300 / 123 / 8 / 431:  43%|████▎     | 431/1000 [1:12:32<1:35:46, 10.10s/it][Succeeded / Failed / Skipped / Total] 300 / 123 / 8 / 431:  43%|████▎     | 432/1000 [1:12:48<1:35:44, 10.11s/it]This method is called when a command is received . --> [[[FAILED]]]

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand [[request]] ) { try { conn . getChannel ( ) . writeAndFlush ( [[request]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand [[point]] ) { try { conn . getChannel ( ) . writeAndFlush ( [[point]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 429 ---------------------------------------------
Convert request to remoting command . --> Derived classes can override this method --> Socre: 1.0

[[[[Adv]]]]: protected RemotingCommand [[toRemotingCommand]] ( Object [[request]] , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( [[request]] ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand [[mademacer8rands]] ( Object [[port]] , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( [[port]] ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 430 ---------------------------------------------
This method is used to monitor the active connections --> At the given map of connection pools . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[monitor]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off

[[[[Adv]]]]: @ Override public void [[at]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 431 ---------------------------------------------
Gets a boolean property . --> Call boolean . --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[getBool]] ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property

[[[[Adv]]]]: public static boolean [[callbuon]] ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 432 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 301 / 123 / 8 / 432:  43%|████▎     | 432/1000 [1:12:48<1:35:44, 10.11s/it][Succeeded / Failed / Skipped / Total] 301 / 123 / 8 / 432:  43%|████▎     | 433/1000 [1:12:52<1:35:25, 10.10s/it][Succeeded / Failed / Skipped / Total] 302 / 123 / 8 / 433:  43%|████▎     | 433/1000 [1:12:52<1:35:25, 10.10s/it][Succeeded / Failed / Skipped / Total] 303 / 123 / 8 / 434:  43%|████▎     | 434/1000 [1:12:52<1:35:02, 10.07s/it][Succeeded / Failed / Skipped / Total] 303 / 123 / 8 / 434:  44%|████▎     | 435/1000 [1:12:52<1:34:39, 10.05s/it][Succeeded / Failed / Skipped / Total] 303 / 123 / 9 / 435:  44%|████▎     | 435/1000 [1:12:52<1:34:39, 10.05s/it][Succeeded / Failed / Skipped / Total] 304 / 123 / 9 / 436:  44%|████▎     | 436/1000 [1:13:14<1:34:44, 10.08s/it][Succeeded / Failed / Skipped / Total] 304 / 123 / 9 / 436:  44%|████▎     | 437/1000 [1:13:17<1:34:24, 10.06s/it][Succeeded / Failed / Skipped / Total] 305 / 123 / 9 / 437:  44%|████▎     | 437/1000 [1:13:17<1:34:24, 10.06s/it][Succeeded / Failed / Skipped / Total] 305 / 123 / 9 / 437:  44%|████▍     | 438/1000 [1:13:20<1:34:06, 10.05s/it][Succeeded / Failed / Skipped / Total] 305 / 124 / 9 / 438:  44%|████▍     | 438/1000 [1:13:20<1:34:06, 10.05s/it][Succeeded / Failed / Skipped / Total] 305 / 124 / 9 / 438:  44%|████▍     | 439/1000 [1:13:21<1:33:45, 10.03s/it][Succeeded / Failed / Skipped / Total] 306 / 124 / 9 / 439:  44%|████▍     | 439/1000 [1:13:21<1:33:45, 10.03s/it][Succeeded / Failed / Skipped / Total] 306 / 124 / 9 / 439:  44%|████▍     | 440/1000 [1:13:31<1:33:35, 10.03s/it]Returns whether or not request timeout . --> Action exme measure . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isRequestTimeout]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean [[actionexdevmeur]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 433 ---------------------------------------------
Close new connections --> Common method to check if a hasScal passlike pass is done --> Socre: 1.0

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection [[lastSelectConnect]] , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != [[lastSelectConnect]] ) { if ( [[lastSelectConnect]] . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( [[lastSelectConnect]] ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( [[lastSelectConnect]] . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( [[lastSelectConnect]] ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( [[lastSelectConnect]] . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[commonfortejilpasslikepeverse]] ( Connection [[hasscalecingvanvewt]] , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != [[hasscalecingvanvewt]] ) { if ( [[hasscalecingvanvewt]] . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( [[hasscalecingvanvewt]] ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( [[hasscalecingvanvewt]] . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( [[hasscalecingvanvewt]] ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( [[hasscalecingvanvewt]] . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 434 ---------------------------------------------
Log an info log . --> Prints out addresses --> Socre: 1.0

[[[[Adv]]]]: private void [[infoLog]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void [[arearo]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 435 ---------------------------------------------
Returns the value for the given key . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . context . get ( key ) != null ? ( T ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 436 ---------------------------------------------
Resolves a response from a remote address . --> Fix rpc endpoint exception --> Socre: 1.0

[[[[Adv]]]]: public static Object [[resolveResponseObject]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object [[fixrspurcheappbe]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 437 ---------------------------------------------
Returns a random connection from the list of connections . --> Searches the list of connections in the list of connections . --> Socre: 1.0

[[[[Adv]]]]: private Connection [[randomGet]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection [[averageray]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 438 ---------------------------------------------
Gets a user processor . --> [[[FAILED]]]

[[[[Adv]]]]: public UserProcessor < ? > [[getUserProcessor]] ( String [[className]] ) { return StringUtils . isBlank ( [[className]] ) ? null : this . userProcessors . get ( [[className]] ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > [[examplethreadsurbasec]] ( String [[groupboundary]] ) { return StringUtils . isBlank ( [[groupboundary]] ) ? null : this . userProcessors . get ( [[groupboundary]] ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 439 ---------------------------------------------
Get a property . --> Returns all the properties for a given principal . --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String [[key]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[key]] ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[allproffinction]] ( String [[principal]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[principal]] ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 440 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 307 / 124 / 9 / 440:  44%|████▍     | 440/1000 [1:13:31<1:33:35, 10.03s/it][Succeeded / Failed / Skipped / Total] 307 / 124 / 9 / 440:  44%|████▍     | 441/1000 [1:13:48<1:33:33, 10.04s/it][Succeeded / Failed / Skipped / Total] 308 / 124 / 9 / 441:  44%|████▍     | 441/1000 [1:13:48<1:33:33, 10.04s/it][Succeeded / Failed / Skipped / Total] 308 / 124 / 9 / 441:  44%|████▍     | 442/1000 [1:13:54<1:33:18, 10.03s/it][Succeeded / Failed / Skipped / Total] 309 / 124 / 9 / 442:  44%|████▍     | 442/1000 [1:13:54<1:33:18, 10.03s/it][Succeeded / Failed / Skipped / Total] 309 / 124 / 9 / 442:  44%|████▍     | 443/1000 [1:14:08<1:33:13, 10.04s/it][Succeeded / Failed / Skipped / Total] 310 / 124 / 9 / 443:  44%|████▍     | 443/1000 [1:14:08<1:33:13, 10.04s/it][Succeeded / Failed / Skipped / Total] 310 / 124 / 9 / 443:  44%|████▍     | 444/1000 [1:14:09<1:32:51, 10.02s/it][Succeeded / Failed / Skipped / Total] 311 / 124 / 9 / 444:  44%|████▍     | 444/1000 [1:14:09<1:32:51, 10.02s/it][Succeeded / Failed / Skipped / Total] 311 / 124 / 9 / 444:  44%|████▍     | 445/1000 [1:14:28<1:32:53, 10.04s/it][Succeeded / Failed / Skipped / Total] 312 / 124 / 9 / 445:  44%|████▍     | 445/1000 [1:14:28<1:32:53, 10.04s/it][Succeeded / Failed / Skipped / Total] 312 / 124 / 9 / 445:  45%|████▍     | 446/1000 [1:14:43<1:32:49, 10.05s/it][Succeeded / Failed / Skipped / Total] 312 / 125 / 9 / 446:  45%|████▍     | 446/1000 [1:14:43<1:32:49, 10.05s/it][Succeeded / Failed / Skipped / Total] 312 / 125 / 9 / 446:  45%|████▍     | 447/1000 [1:14:45<1:32:29, 10.03s/it]Deserializes the response command . --> Deserialize responses from responseCommandCommand --> Socre: 1.0

[[[[Adv]]]]: private static Object [[toResponseObject]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) responseCommand ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object [[acfulosseoabvoking]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) responseCommand ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 441 ---------------------------------------------
Converts a responseCommand to an Throwable . --> Deal with an exception --> Socre: 1.0

[[[[Adv]]]]: private static Throwable [[toThrowable]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object [[ex]] = resp . getResponseObject ( ) ; if ( [[ex]] != null && [[ex]] instanceof Throwable ) { return ( Throwable ) [[ex]] ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable [[doqueachimate]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object [[fan]] = resp . getResponseObject ( ) ; if ( [[fan]] != null && [[fan]] instanceof Throwable ) { return ( Throwable ) [[fan]] ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 442 ---------------------------------------------
Print connection trace log --> Utility method for debugging . --> Socre: 1.0

[[[[Adv]]]]: public static void [[printConnectionTraceLog]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void [[argumenthannedcesofvalod]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 443 ---------------------------------------------
Creates a new event loop group . --> Creates new EventLoopGroup --> Socre: 1.0

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int nThreads , ThreadFactory [[threadFactory]] ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , [[threadFactory]] ) : new NioEventLoopGroup ( nThreads , [[threadFactory]] ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int nThreads , ThreadFactory [[cowoud]] ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , [[cowoud]] ) : new NioEventLoopGroup ( nThreads , [[cowoud]] ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 444 ---------------------------------------------
Convert a Throwable to RpcServerException . --> Helper method to convert exceptions to RpcServerException --> Socre: 1.0

[[[[Adv]]]]: private RpcServerException [[createServerException]] ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException [[e]] = new RpcServerException ( formattedErrMsg ) ; [[e]] . setStackTrace ( t . getStackTrace ( ) ) ; return [[e]] ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException [[eselvangesoint]] ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException [[counter]] = new RpcServerException ( formattedErrMsg ) ; [[counter]] . setStackTrace ( t . getStackTrace ( ) ) ; return [[counter]] ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 445 ---------------------------------------------
Print error message --> Get comparison planer string --> Socre: 1.0

[[[[Adv]]]]: private static String [[detailErrMsg]] ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String [[comparisonplaneragangard]] ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 446 ---------------------------------------------
Retrieves the remote address of a channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress [[remote]] = [[channel]] . remoteAddress ( ) ; return doParse ( [[remote]] != null ? [[remote]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[kaisorrampointruddrossed]] ( final Channel [[route]] ) { if ( null == [[route]] ) { return StringUtils . EMPTY ; } final SocketAddress [[se]] = [[route]] . remoteAddress ( ) ; return doParse ( [[se]] != null ? [[se]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 447 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 313 / 125 / 9 / 447:  45%|████▍     | 447/1000 [1:14:45<1:32:29, 10.03s/it][Succeeded / Failed / Skipped / Total] 313 / 125 / 9 / 447:  45%|████▍     | 448/1000 [1:14:56<1:32:19, 10.04s/it][Succeeded / Failed / Skipped / Total] 313 / 126 / 9 / 448:  45%|████▍     | 448/1000 [1:14:56<1:32:19, 10.04s/it][Succeeded / Failed / Skipped / Total] 313 / 126 / 9 / 448:  45%|████▍     | 449/1000 [1:15:01<1:32:04, 10.03s/it][Succeeded / Failed / Skipped / Total] 314 / 126 / 9 / 449:  45%|████▍     | 449/1000 [1:15:01<1:32:04, 10.03s/it][Succeeded / Failed / Skipped / Total] 314 / 126 / 9 / 449:  45%|████▌     | 450/1000 [1:15:02<1:31:42, 10.01s/it][Succeeded / Failed / Skipped / Total] 315 / 126 / 9 / 450:  45%|████▌     | 450/1000 [1:15:02<1:31:42, 10.01s/it][Succeeded / Failed / Skipped / Total] 315 / 126 / 9 / 450:  45%|████▌     | 451/1000 [1:15:20<1:31:42, 10.02s/it][Succeeded / Failed / Skipped / Total] 316 / 126 / 9 / 451:  45%|████▌     | 451/1000 [1:15:20<1:31:42, 10.02s/it][Succeeded / Failed / Skipped / Total] 316 / 126 / 9 / 451:  45%|████▌     | 452/1000 [1:15:21<1:31:21, 10.00s/it][Succeeded / Failed / Skipped / Total] 316 / 127 / 9 / 452:  45%|████▌     | 452/1000 [1:15:21<1:31:21, 10.00s/it][Succeeded / Failed / Skipped / Total] 316 / 127 / 9 / 452:  45%|████▌     | 453/1000 [1:15:28<1:31:08, 10.00s/it][Succeeded / Failed / Skipped / Total] 317 / 127 / 9 / 453:  45%|████▌     | 453/1000 [1:15:28<1:31:08, 10.00s/it][Succeeded / Failed / Skipped / Total] 317 / 127 / 9 / 453:  45%|████▌     | 454/1000 [1:15:34<1:30:53,  9.99s/it][Succeeded / Failed / Skipped / Total] 318 / 127 / 9 / 454:  45%|████▌     | 454/1000 [1:15:34<1:30:53,  9.99s/it][Succeeded / Failed / Skipped / Total] 318 / 127 / 9 / 454:  46%|████▌     | 455/1000 [1:15:49<1:30:49, 10.00s/it][Succeeded / Failed / Skipped / Total] 319 / 127 / 9 / 455:  46%|████▌     | 455/1000 [1:15:49<1:30:49, 10.00s/it][Succeeded / Failed / Skipped / Total] 319 / 127 / 9 / 455:  46%|████▌     | 456/1000 [1:16:05<1:30:46, 10.01s/it]Parses the remote address of the channel . --> Determine random address --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[dieteefrandit]] ( final Channel [[platform]] ) { if ( null == [[platform]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[platform]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
Parses the local address of a channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[channel]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[clseoradslikesm]] ( final Channel [[port]] ) { if ( null == [[port]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[port]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 449 ---------------------------------------------
Get the remote hostname of the channel . --> ziserechecheo --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[ziserecheodcosnethouse]] ( final Channel [[access]] ) { if ( null == [[access]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[access]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 450 ---------------------------------------------
Get the local IP address of the channel . --> Retrieve parlayepple --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseLocalIP]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String [[parlayepple]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 451 ---------------------------------------------
Returns the local port of the given channel . --> Get zerostprent --> Socre: 1.0

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress [[local]] = ( InetSocketAddress ) channel . localAddress ( ) ; if ( [[local]] != null ) { return [[local]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[zserostprent]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress [[com]] = ( InetSocketAddress ) channel . localAddress ( ) ; if ( [[com]] != null ) { return [[com]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 452 ---------------------------------------------
Gets the remote port from the channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[kaisengramotoft]] ( final Channel [[side]] ) { if ( null == [[side]] ) { return - 1 ; } final InetSocketAddress [[command]] = ( InetSocketAddress ) [[side]] . remoteAddress ( ) ; if ( [[command]] != null ) { return [[command]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 453 ---------------------------------------------
Add a connection --> Adds an author . --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean [[res]] = this . conns . addIfAbsent ( connection ) ; if ( [[res]] ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void [[author]] ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean [[back]] = this . conns . addIfAbsent ( connection ) ; if ( [[back]] ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 454 ---------------------------------------------
Gets the current connection . --> Returns the first band . --> Socre: 1.0

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > [[snapshot]] = new ArrayList < Connection > ( this . conns ) ; if ( [[snapshot]] . size ( ) > 0 ) { return this . strategy . select ( [[snapshot]] ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > [[bandslot]] = new ArrayList < Connection > ( this . conns ) ; if ( [[bandslot]] . size ( ) > 0 ) { return this . strategy . select ( [[bandslot]] ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 455 ---------------------------------------------
Get custom serializer for a class --> getCustomSerializer --> Socre: 1.0

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String className ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( className ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[getscenumeryoid]] ( String className ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( className ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 456 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 320 / 127 / 9 / 456:  46%|████▌     | 456/1000 [1:16:05<1:30:46, 10.01s/it][Succeeded / Failed / Skipped / Total] 320 / 127 / 9 / 456:  46%|████▌     | 457/1000 [1:16:14<1:30:35, 10.01s/it][Succeeded / Failed / Skipped / Total] 321 / 127 / 9 / 457:  46%|████▌     | 457/1000 [1:16:14<1:30:35, 10.01s/it][Succeeded / Failed / Skipped / Total] 321 / 127 / 9 / 457:  46%|████▌     | 458/1000 [1:16:21<1:30:21, 10.00s/it][Succeeded / Failed / Skipped / Total] 322 / 127 / 9 / 458:  46%|████▌     | 458/1000 [1:16:21<1:30:21, 10.00s/it][Succeeded / Failed / Skipped / Total] 322 / 127 / 9 / 458:  46%|████▌     | 459/1000 [1:16:30<1:30:10, 10.00s/it][Succeeded / Failed / Skipped / Total] 323 / 127 / 9 / 459:  46%|████▌     | 459/1000 [1:16:30<1:30:10, 10.00s/it][Succeeded / Failed / Skipped / Total] 323 / 127 / 9 / 459:  46%|████▌     | 460/1000 [1:16:31<1:29:49,  9.98s/it][Succeeded / Failed / Skipped / Total] 324 / 127 / 9 / 460:  46%|████▌     | 460/1000 [1:16:31<1:29:49,  9.98s/it][Succeeded / Failed / Skipped / Total] 324 / 127 / 9 / 460:  46%|████▌     | 461/1000 [1:16:46<1:29:45,  9.99s/it][Succeeded / Failed / Skipped / Total] 325 / 127 / 9 / 461:  46%|████▌     | 461/1000 [1:16:46<1:29:45,  9.99s/it][Succeeded / Failed / Skipped / Total] 325 / 127 / 9 / 461:  46%|████▌     | 462/1000 [1:16:46<1:29:24,  9.97s/it][Succeeded / Failed / Skipped / Total] 325 / 127 / 10 / 462:  46%|████▌     | 462/1000 [1:16:46<1:29:24,  9.97s/it][Succeeded / Failed / Skipped / Total] 325 / 127 / 10 / 462:  46%|████▋     | 463/1000 [1:16:49<1:29:06,  9.96s/it]Remove a connection and close it . --> Remove boundary . --> Socre: 1.0

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[connection]] ) { if ( null == [[connection]] ) { return ; } boolean [[res]] = this . conns . remove ( [[connection]] ) ; if ( [[res]] ) { [[connection]] . decreaseRef ( ) ; } if ( [[connection]] . noRef ( ) ) { [[connection]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[boundary]] ) { if ( null == [[boundary]] ) { return ; } boolean [[back]] = this . conns . remove ( [[boundary]] ) ; if ( [[back]] ) { [[boundary]] . decreaseRef ( ) ; } if ( [[boundary]] . noRef ( ) ) { [[boundary]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 457 ---------------------------------------------
Parse an address to a host . --> from interfaceAddress --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseSocketAddressToHostIp]] ( SocketAddress socketAddress ) { final InetSocketAddress [[addrs]] = ( InetSocketAddress ) socketAddress ; if ( [[addrs]] != null ) { InetAddress [[addr]] = [[addrs]] . getAddress ( ) ; if ( null != [[addr]] ) { return [[addr]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String [[farfsockandhadclassedadstance]] ( SocketAddress socketAddress ) { final InetSocketAddress [[plyр]] = ( InetSocketAddress ) socketAddress ; if ( [[plyр]] != null ) { InetAddress [[extrarc]] = [[plyр]] . getAddress ( ) ; if ( null != [[extrarc]] ) { return [[extrarc]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 458 ---------------------------------------------
Register a custom serializer for a class . --> Call CustomSerializer --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String [[className]] , CustomSerializer serializer ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[className]] , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[className]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[callreaionhortodette]] ( String [[casemen]] , CustomSerializer serializer ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[casemen]] , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[casemen]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 459 ---------------------------------------------
Start the connection monitor . --> Starts the connection monitor . --> Socre: 1.0

[[[[Adv]]]]: public void start ( ) { long [[initialDelay]] = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , [[initialDelay]] , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task

[[[[Adv]]]]: public void start ( ) { long [[afterdesance]] = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , [[afterdesance]] , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 460 ---------------------------------------------
Get the custom serializer for the given command code . --> Checks if a device has been deleted --> Socre: 1.0

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode [[code]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[code]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[hasdelteacupielator]] ( CommandCode [[driver]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[driver]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 461 ---------------------------------------------
Initialize write buffer water mark . --> Method setter for Herty . --> Socre: 1.0

[[[[Adv]]]]: private void [[initWriteBufferWaterMark]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void [[hisgentryamanfkiss]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 462 ---------------------------------------------
try to batch --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 463 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 326 / 127 / 10 / 463:  46%|████▋     | 463/1000 [1:16:49<1:29:06,  9.96s/it][Succeeded / Failed / Skipped / Total] 326 / 127 / 10 / 463:  46%|████▋     | 464/1000 [1:16:50<1:28:46,  9.94s/it][Succeeded / Failed / Skipped / Total] 326 / 128 / 10 / 464:  46%|████▋     | 464/1000 [1:16:50<1:28:46,  9.94s/it][Succeeded / Failed / Skipped / Total] 326 / 128 / 10 / 464:  46%|████▋     | 465/1000 [1:17:01<1:28:37,  9.94s/it][Succeeded / Failed / Skipped / Total] 327 / 128 / 10 / 465:  46%|████▋     | 465/1000 [1:17:01<1:28:37,  9.94s/it][Succeeded / Failed / Skipped / Total] 327 / 128 / 10 / 465:  47%|████▋     | 466/1000 [1:17:10<1:28:26,  9.94s/it][Succeeded / Failed / Skipped / Total] 328 / 128 / 10 / 466:  47%|████▋     | 466/1000 [1:17:10<1:28:26,  9.94s/it][Succeeded / Failed / Skipped / Total] 328 / 128 / 10 / 466:  47%|████▋     | 467/1000 [1:17:13<1:28:08,  9.92s/it][Succeeded / Failed / Skipped / Total] 329 / 128 / 10 / 467:  47%|████▋     | 467/1000 [1:17:13<1:28:08,  9.92s/it][Succeeded / Failed / Skipped / Total] 329 / 128 / 10 / 467:  47%|████▋     | 468/1000 [1:17:14<1:27:48,  9.90s/it][Succeeded / Failed / Skipped / Total] 330 / 128 / 10 / 468:  47%|████▋     | 468/1000 [1:17:14<1:27:48,  9.90s/it][Succeeded / Failed / Skipped / Total] 330 / 128 / 10 / 468:  47%|████▋     | 469/1000 [1:17:31<1:27:46,  9.92s/it][Succeeded / Failed / Skipped / Total] 331 / 128 / 10 / 469:  47%|████▋     | 469/1000 [1:17:31<1:27:46,  9.92s/it][Succeeded / Failed / Skipped / Total] 331 / 128 / 10 / 469:  47%|████▋     | 470/1000 [1:17:34<1:27:28,  9.90s/it]Returns the frame for the given opcode . --> Returns the framing data for the given opcodes . --> Socre: 1.0

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[opcode]] ) { if ( [[opcode]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[opcode]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[aircodes]] ) { if ( [[aircodes]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[aircodes]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 464 ---------------------------------------------
Registers a custom serializer for a command code . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode [[code]] , CustomSerializer serializer ) { CustomSerializer [[prevSerializer]] = commandCustomSerializer . putIfAbsent ( [[code]] , serializer ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[code]] + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[assemblyconfieldirealator]] ( CommandCode [[school]] , CustomSerializer serializer ) { CustomSerializer [[vonsleilium]] = commandCustomSerializer . putIfAbsent ( [[school]] , serializer ) ; if ( [[vonsleilium]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[school]] + ", the custom serializer is: " + [[vonsleilium]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 465 ---------------------------------------------
Checks if the remote address is connected to the remote address . --> Checks if the destination is translated --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isConnected]] ( String [[remoteAddr]] ) { Url url = this . rpcRemoting . addressParser . parse ( [[remoteAddr]] ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[arelated]] ( String [[destinationodtr]] ) { Url url = this . rpcRemoting . addressParser . parse ( [[destinationodtr]] ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 466 ---------------------------------------------
Validate UTF8 . --> Called when a close - frame is received . --> Socre: 1.0

[[[[Adv]]]]: private void [[validateUtf8]] ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void [[authenticstntwrff]] ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 467 ---------------------------------------------
Update the reason payload . --> Add audit data . --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[auditpaylaosoad]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 468 ---------------------------------------------
Sets the status code . --> Perform a book pass . --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int [[code]] ) { this . code = [[code]] ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[bookpass]] ( int [[mod]] ) { this . code = [[mod]] ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 469 ---------------------------------------------
Generate final key . --> Calculates the 9arlock . --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[do9arlock]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 470 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 332 / 128 / 10 / 470:  47%|████▋     | 470/1000 [1:17:34<1:27:28,  9.90s/it][Succeeded / Failed / Skipped / Total] 332 / 128 / 10 / 470:  47%|████▋     | 471/1000 [1:17:49<1:27:24,  9.91s/it][Succeeded / Failed / Skipped / Total] 333 / 128 / 10 / 471:  47%|████▋     | 471/1000 [1:17:49<1:27:24,  9.91s/it][Succeeded / Failed / Skipped / Total] 333 / 128 / 10 / 471:  47%|████▋     | 472/1000 [1:17:51<1:27:06,  9.90s/it][Succeeded / Failed / Skipped / Total] 334 / 128 / 10 / 472:  47%|████▋     | 472/1000 [1:17:51<1:27:06,  9.90s/it][Succeeded / Failed / Skipped / Total] 334 / 128 / 10 / 472:  47%|████▋     | 473/1000 [1:17:56<1:26:50,  9.89s/it][Succeeded / Failed / Skipped / Total] 334 / 129 / 10 / 473:  47%|████▋     | 473/1000 [1:17:56<1:26:50,  9.89s/it][Succeeded / Failed / Skipped / Total] 334 / 129 / 10 / 473:  47%|████▋     | 474/1000 [1:18:06<1:26:40,  9.89s/it][Succeeded / Failed / Skipped / Total] 335 / 129 / 10 / 474:  47%|████▋     | 474/1000 [1:18:06<1:26:40,  9.89s/it][Succeeded / Failed / Skipped / Total] 335 / 129 / 10 / 474:  48%|████▊     | 475/1000 [1:18:08<1:26:21,  9.87s/it][Succeeded / Failed / Skipped / Total] 336 / 129 / 10 / 475:  48%|████▊     | 475/1000 [1:18:08<1:26:21,  9.87s/it][Succeeded / Failed / Skipped / Total] 336 / 129 / 10 / 475:  48%|████▊     | 476/1000 [1:18:17<1:26:11,  9.87s/it]Translates a single frame length limit . --> Buchingweebergebenen . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[buchingwealdrewelythollck]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 471 ---------------------------------------------
Processes continuous and non - FIN state . --> documentation inherited from Stream --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameContinuousAndNonFin]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void [[creativeflowvestenwaseerialput]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 472 ---------------------------------------------
Process frame binary . --> For livebyred . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[forlivebyred]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 473 ---------------------------------------------
Checks if a given protocol is acceptable . --> [[[FAILED]]]

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String [[requestedProtocol]] ) { for ( IProtocol [[knownProtocol]] : knownProtocols ) { if ( [[knownProtocol]] . acceptProvidedProtocol ( [[requestedProtocol]] ) ) { protocol = [[knownProtocol]] ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[holdsbreathelovideotingall]] ( String [[citedprotoscel]] ) { for ( IProtocol [[samepispoc]] : knownProtocols ) { if ( [[samepispoc]] . acceptProvidedProtocol ( [[citedprotoscel]] ) ) { protocol = [[samepispoc]] ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 474 ---------------------------------------------
Process frame text . --> documentation inherited from WebSocket --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameText]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void [[classgroundcanvas]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 475 ---------------------------------------------
Log runtime exception . --> Dispatches websocket message . --> Socre: 1.0

[[[[Adv]]]]: private void [[logRuntimeException]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void [[adenlikeenerply]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 476 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 337 / 129 / 10 / 476:  48%|████▊     | 476/1000 [1:18:17<1:26:11,  9.87s/it][Succeeded / Failed / Skipped / Total] 337 / 129 / 10 / 476:  48%|████▊     | 477/1000 [1:18:21<1:25:55,  9.86s/it][Succeeded / Failed / Skipped / Total] 338 / 129 / 10 / 477:  48%|████▊     | 477/1000 [1:18:21<1:25:55,  9.86s/it][Succeeded / Failed / Skipped / Total] 338 / 129 / 10 / 477:  48%|████▊     | 478/1000 [1:18:23<1:25:36,  9.84s/it][Succeeded / Failed / Skipped / Total] 339 / 129 / 10 / 478:  48%|████▊     | 478/1000 [1:18:23<1:25:36,  9.84s/it][Succeeded / Failed / Skipped / Total] 339 / 129 / 10 / 478:  48%|████▊     | 479/1000 [1:18:24<1:25:16,  9.82s/it][Succeeded / Failed / Skipped / Total] 340 / 129 / 10 / 479:  48%|████▊     | 479/1000 [1:18:24<1:25:16,  9.82s/it][Succeeded / Failed / Skipped / Total] 340 / 129 / 10 / 479:  48%|████▊     | 480/1000 [1:18:41<1:25:15,  9.84s/it][Succeeded / Failed / Skipped / Total] 341 / 129 / 10 / 480:  48%|████▊     | 480/1000 [1:18:41<1:25:15,  9.84s/it][Succeeded / Failed / Skipped / Total] 341 / 129 / 10 / 480:  48%|████▊     | 481/1000 [1:18:43<1:24:57,  9.82s/it][Succeeded / Failed / Skipped / Total] 342 / 129 / 10 / 481:  48%|████▊     | 481/1000 [1:18:43<1:24:57,  9.82s/it][Succeeded / Failed / Skipped / Total] 342 / 129 / 10 / 481:  48%|████▊     | 482/1000 [1:18:46<1:24:39,  9.81s/it]Handles a continuous frame . --> of playtoInt --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[ofplaytoint]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 477 ---------------------------------------------
Translate single frame size . --> Adapting longpackog s packgesort . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckPacketSize]] ( int maxpacketsize , int [[realpacketsize]] ) throws IncompleteException { if ( maxpacketsize < [[realpacketsize]] ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( [[realpacketsize]] ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void [[adaptpingligenocogetsporteesell]] ( int maxpacketsize , int [[dreamiverrasit]] ) throws IncompleteException { if ( maxpacketsize < [[dreamiverrasit]] ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( [[dreamiverrasit]] ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 478 ---------------------------------------------
Process a close frame . --> also used by WebSocketImpl --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameClosing]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void [[bookacttlusing]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 479 ---------------------------------------------
Process a frame is not completed . --> Handle extraneous frames . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[handletextraswal]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 480 ---------------------------------------------
Translate handshake http server . --> Do a delenamex . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpServer]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder [[delenstaakexclasssery]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 481 ---------------------------------------------
Returns the size of the byte buffers in this buffer . --> returns buybor data --> Socre: 1.0

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[buyborartluferscsix]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 482 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 343 / 129 / 10 / 482:  48%|████▊     | 482/1000 [1:18:46<1:24:39,  9.81s/it][Succeeded / Failed / Skipped / Total] 343 / 129 / 10 / 482:  48%|████▊     | 483/1000 [1:19:00<1:24:34,  9.81s/it][Succeeded / Failed / Skipped / Total] 344 / 129 / 10 / 483:  48%|████▊     | 483/1000 [1:19:00<1:24:34,  9.81s/it][Succeeded / Failed / Skipped / Total] 344 / 129 / 10 / 483:  48%|████▊     | 484/1000 [1:19:02<1:24:15,  9.80s/it][Succeeded / Failed / Skipped / Total] 345 / 129 / 10 / 484:  48%|████▊     | 484/1000 [1:19:02<1:24:15,  9.80s/it][Succeeded / Failed / Skipped / Total] 345 / 129 / 10 / 484:  48%|████▊     | 485/1000 [1:19:02<1:23:55,  9.78s/it][Succeeded / Failed / Skipped / Total] 346 / 129 / 10 / 485:  48%|████▊     | 485/1000 [1:19:02<1:23:55,  9.78s/it][Succeeded / Failed / Skipped / Total] 346 / 129 / 10 / 485:  49%|████▊     | 486/1000 [1:19:05<1:23:38,  9.76s/it][Succeeded / Failed / Skipped / Total] 347 / 129 / 10 / 486:  49%|████▊     | 486/1000 [1:19:05<1:23:38,  9.76s/it][Succeeded / Failed / Skipped / Total] 347 / 129 / 10 / 486:  49%|████▊     | 487/1000 [1:19:05<1:23:18,  9.74s/it][Succeeded / Failed / Skipped / Total] 347 / 129 / 11 / 487:  49%|████▊     | 487/1000 [1:19:05<1:23:18,  9.74s/it][Succeeded / Failed / Skipped / Total] 347 / 129 / 11 / 487:  49%|████▉     | 488/1000 [1:19:05<1:22:59,  9.73s/it][Succeeded / Failed / Skipped / Total] 347 / 129 / 12 / 488:  49%|████▉     | 488/1000 [1:19:05<1:22:59,  9.73s/it][Succeeded / Failed / Skipped / Total] 347 / 129 / 12 / 488:  49%|████▉     | 489/1000 [1:19:19<1:22:53,  9.73s/it][Succeeded / Failed / Skipped / Total] 348 / 129 / 12 / 489:  49%|████▉     | 489/1000 [1:19:19<1:22:53,  9.73s/it][Succeeded / Failed / Skipped / Total] 348 / 129 / 12 / 489:  49%|████▉     | 490/1000 [1:19:28<1:22:43,  9.73s/it]Get payload from ByteBufferList --> For internal use only --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { resultingByteBuffer . put ( buffer ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[lepanhladthxbeyneduforrecord]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { resultingByteBuffer . put ( buffer ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 483 ---------------------------------------------
Check buffer limit . --> Add payload to payload list . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[addlierhesart]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 484 ---------------------------------------------
Closes the connection and closes the connection . --> Sends a closed xnoty exception . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToWrongHandshake]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void [[closedxnotythernowyoutamp]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 485 ---------------------------------------------
Decode handshake data . --> Decodes a handshake message . --> Socre: 1.0

[[[[Adv]]]]: public void [[decode]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void [[candim]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 486 ---------------------------------------------
Translate handshake http client . --> Enenkeyhspends an ensykeyHspendELIPHolder . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpClient]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder [[enunsykeyhspendelip]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 487 ---------------------------------------------
Resets the connection . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 488 ---------------------------------------------
Start read thread --> [[[SKIPPED]]]

[[[[Adv]]]]: public void connect ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 489 ---------------------------------------------
Close connection . --> called when closed --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[closedinnymentlikeantfeactuieeproriorp]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 490 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 349 / 129 / 12 / 490:  49%|████▉     | 490/1000 [1:19:28<1:22:43,  9.73s/it][Succeeded / Failed / Skipped / Total] 349 / 129 / 12 / 490:  49%|████▉     | 491/1000 [1:19:37<1:22:32,  9.73s/it][Succeeded / Failed / Skipped / Total] 350 / 129 / 12 / 491:  49%|████▉     | 491/1000 [1:19:37<1:22:32,  9.73s/it][Succeeded / Failed / Skipped / Total] 350 / 129 / 12 / 491:  49%|████▉     | 492/1000 [1:19:55<1:22:31,  9.75s/it][Succeeded / Failed / Skipped / Total] 351 / 129 / 12 / 492:  49%|████▉     | 492/1000 [1:19:55<1:22:31,  9.75s/it][Succeeded / Failed / Skipped / Total] 351 / 129 / 12 / 492:  49%|████▉     | 493/1000 [1:19:58<1:22:14,  9.73s/it][Succeeded / Failed / Skipped / Total] 351 / 130 / 12 / 493:  49%|████▉     | 493/1000 [1:19:58<1:22:14,  9.73s/it][Succeeded / Failed / Skipped / Total] 351 / 130 / 12 / 493:  49%|████▉     | 494/1000 [1:20:02<1:21:59,  9.72s/it][Succeeded / Failed / Skipped / Total] 352 / 130 / 12 / 494:  49%|████▉     | 494/1000 [1:20:02<1:21:59,  9.72s/it][Succeeded / Failed / Skipped / Total] 352 / 130 / 12 / 494:  50%|████▉     | 495/1000 [1:20:14<1:21:52,  9.73s/it][Succeeded / Failed / Skipped / Total] 353 / 130 / 12 / 495:  50%|████▉     | 495/1000 [1:20:14<1:21:52,  9.73s/it][Succeeded / Failed / Skipped / Total] 353 / 130 / 12 / 495:  50%|████▉     | 496/1000 [1:20:29<1:21:47,  9.74s/it]Send data to a web socket . --> Controls a flow --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[send]] ( String [[text]] ) { if ( [[text]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( [[text]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[flow]] ( String [[flow]] ) { if ( [[flow]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[flow]] ( draft . createFrames ( [[flow]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 491 ---------------------------------------------
Generates HTTP response for a given error . --> documentation inherited from Client - WebSocket Upgrade --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[generateHttpResponseDueToError]] ( int [[errorCode]] ) { String errorCodeDescription ; switch ( [[errorCode]] ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer [[draftmpttxponcdalluiwrator]] ( int [[errorsclass]] ) { String errorCodeDescription ; switch ( [[errorsclass]] ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 492 ---------------------------------------------
Stops the connection lost timer . --> This method is used to prevent unijacency . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[preventunijacmaletyper]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 493 ---------------------------------------------
Get the port . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getPort]] ( ) { int [[port]] = uri . getPort ( ) ; if ( [[port]] == - 1 ) { String [[scheme]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[scheme]] ) ; } } return [[port]] ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[zipif]] ( ) { int [[tail]] = uri . getPort ( ) ; if ( [[tail]] == - 1 ) { String [[system]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[system]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[system]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[system]] ) ; } } return [[tail]] ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 494 ---------------------------------------------
Sets the connection lost timeout . --> zsynchronized . --> Socre: 1.0

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int [[connectionLostTimeout]] ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( [[connectionLostTimeout]] ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[zconjatzloussiモk]] ( int [[framerasckleomotter]] ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( [[framerasckleomotter]] ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 495 ---------------------------------------------
Start the connection lost timer . --> Boot once . --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[bootoncemingweidper]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 496 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 354 / 130 / 12 / 496:  50%|████▉     | 496/1000 [1:20:29<1:21:47,  9.74s/it][Succeeded / Failed / Skipped / Total] 354 / 130 / 12 / 496:  50%|████▉     | 497/1000 [1:20:33<1:21:31,  9.73s/it][Succeeded / Failed / Skipped / Total] 355 / 130 / 12 / 497:  50%|████▉     | 497/1000 [1:20:33<1:21:31,  9.73s/it][Succeeded / Failed / Skipped / Total] 355 / 130 / 12 / 497:  50%|████▉     | 498/1000 [1:20:48<1:21:27,  9.74s/it][Succeeded / Failed / Skipped / Total] 356 / 130 / 12 / 498:  50%|████▉     | 498/1000 [1:20:48<1:21:27,  9.74s/it][Succeeded / Failed / Skipped / Total] 356 / 130 / 12 / 498:  50%|████▉     | 499/1000 [1:20:49<1:21:08,  9.72s/it][Succeeded / Failed / Skipped / Total] 357 / 130 / 12 / 499:  50%|████▉     | 499/1000 [1:20:49<1:21:08,  9.72s/it][Succeeded / Failed / Skipped / Total] 357 / 130 / 12 / 499:  50%|█████     | 500/1000 [1:20:55<1:20:55,  9.71s/it][Succeeded / Failed / Skipped / Total] 357 / 131 / 12 / 500:  50%|█████     | 500/1000 [1:20:55<1:20:55,  9.71s/it][Succeeded / Failed / Skipped / Total] 357 / 131 / 12 / 500:  50%|█████     | 501/1000 [1:21:05<1:20:45,  9.71s/it]Execute a connection lost connection . --> For testing purposes only . --> Socre: 1.0

[[[[Adv]]]]: private void [[executeConnectionLostDetection]] ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void [[businessenrucedteaydufao]] ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 497 ---------------------------------------------
Cancel the connection lost checker . --> Shutdown stormresser . --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[stormreacetzrasssiber]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 498 ---------------------------------------------
Sends the complete handshake . --> Request framesulck message . --> Socre: 1.0

[[[[Adv]]]]: private void [[sendHandshake]] ( ) throws InvalidHandshakeException { String [[path]] ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) [[path]] = "/" ; else [[path]] = part1 ; if ( part2 != null ) [[path]] += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( [[path]] ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void [[askframesulck]] ( ) throws InvalidHandshakeException { String [[wire]] ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) [[wire]] = "/" ; else [[wire]] = part1 ; if ( part2 != null ) [[wire]] += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( [[wire]] ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 499 ---------------------------------------------
This method is called when web socket handshake is received . --> we re okay for the handshake --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[onWebsocketHandshakeReceivedAsServer]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[andweksheardreedprintattersperfderesser]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 500 ---------------------------------------------
Restart a timer of connections lost . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[restartConnectionLostTimer]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket [[conn]] : connections ) { executeConnectionLostDetection ( [[conn]] , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void [[jamtraonedingwuutimen]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket [[cinm]] : connections ) { executeConnectionLostDetection ( [[cinm]] , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 501 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 358 / 131 / 12 / 501:  50%|█████     | 501/1000 [1:21:05<1:20:45,  9.71s/it][Succeeded / Failed / Skipped / Total] 358 / 131 / 12 / 501:  50%|█████     | 502/1000 [1:21:05<1:20:27,  9.69s/it][Succeeded / Failed / Skipped / Total] 358 / 132 / 12 / 502:  50%|█████     | 502/1000 [1:21:05<1:20:27,  9.69s/it][Succeeded / Failed / Skipped / Total] 358 / 132 / 12 / 502:  50%|█████     | 503/1000 [1:21:15<1:20:17,  9.69s/it][Succeeded / Failed / Skipped / Total] 359 / 132 / 12 / 503:  50%|█████     | 503/1000 [1:21:15<1:20:17,  9.69s/it][Succeeded / Failed / Skipped / Total] 359 / 132 / 12 / 503:  50%|█████     | 504/1000 [1:21:20<1:20:03,  9.68s/it][Succeeded / Failed / Skipped / Total] 360 / 132 / 12 / 504:  50%|█████     | 504/1000 [1:21:20<1:20:03,  9.68s/it][Succeeded / Failed / Skipped / Total] 360 / 132 / 12 / 504:  50%|█████     | 505/1000 [1:21:27<1:19:50,  9.68s/it][Succeeded / Failed / Skipped / Total] 361 / 132 / 12 / 505:  50%|█████     | 505/1000 [1:21:27<1:19:50,  9.68s/it][Succeeded / Failed / Skipped / Total] 361 / 132 / 12 / 505:  51%|█████     | 506/1000 [1:21:27<1:19:31,  9.66s/it][Succeeded / Failed / Skipped / Total] 361 / 132 / 13 / 506:  51%|█████     | 506/1000 [1:21:27<1:19:31,  9.66s/it][Succeeded / Failed / Skipped / Total] 361 / 132 / 13 / 506:  51%|█████     | 507/1000 [1:21:27<1:19:12,  9.64s/it][Succeeded / Failed / Skipped / Total] 361 / 132 / 14 / 507:  51%|█████     | 507/1000 [1:21:27<1:19:12,  9.64s/it][Succeeded / Failed / Skipped / Total] 361 / 132 / 14 / 507:  51%|█████     | 508/1000 [1:21:28<1:18:54,  9.62s/it]Stop the connection . --> stop --> Socre: 1.0

[[[[Adv]]]]: public void stop ( int [[timeout]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void stop ( int [[putt]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 502 ---------------------------------------------
Sends a ping frame . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[onWebsocketPing]] ( WebSocket [[conn]] , Framedata f ) { [[conn]] . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void [[antnoatsoxtimeion]] ( WebSocket [[kono]] , Framedata f ) { [[kono]] . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 503 ---------------------------------------------
Perform additional read . --> Waits for socket to be queued . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAdditionalRead]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void [[classearhowrowuid]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 504 ---------------------------------------------
Returns the port . --> get zippostost --> Socre: 1.0

[[[[Adv]]]]: public int [[getPort]] ( ) { int [[port]] = getAddress ( ) . getPort ( ) ; if ( [[port]] == 0 && server != null ) { [[port]] = server . socket ( ) . getLocalPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[zippost]] ( ) { int [[coast]] = getAddress ( ) . getPort ( ) ; if ( [[coast]] == 0 && server != null ) { [[coast]] = server . socket ( ) . getLocalPort ( ) ; } return [[coast]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 505 ---------------------------------------------
Do the next accept . --> Read and wrap the connection . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAccept]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation

[[[[Adv]]]]: private void [[andincrap]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 506 ---------------------------------------------
Do a single thread . --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 507 ---------------------------------------------
Shut down the web socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 508 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 362 / 132 / 14 / 508:  51%|█████     | 508/1000 [1:21:28<1:18:54,  9.62s/it][Succeeded / Failed / Skipped / Total] 362 / 132 / 14 / 508:  51%|█████     | 509/1000 [1:21:33<1:18:40,  9.61s/it][Succeeded / Failed / Skipped / Total] 363 / 132 / 14 / 509:  51%|█████     | 509/1000 [1:21:33<1:18:40,  9.61s/it][Succeeded / Failed / Skipped / Total] 363 / 132 / 14 / 509:  51%|█████     | 510/1000 [1:21:41<1:18:29,  9.61s/it][Succeeded / Failed / Skipped / Total] 364 / 132 / 14 / 510:  51%|█████     | 510/1000 [1:21:41<1:18:29,  9.61s/it][Succeeded / Failed / Skipped / Total] 364 / 132 / 14 / 510:  51%|█████     | 511/1000 [1:21:46<1:18:15,  9.60s/it][Succeeded / Failed / Skipped / Total] 365 / 132 / 14 / 511:  51%|█████     | 511/1000 [1:21:46<1:18:15,  9.60s/it][Succeeded / Failed / Skipped / Total] 365 / 132 / 14 / 511:  51%|█████     | 512/1000 [1:21:46<1:17:56,  9.58s/it][Succeeded / Failed / Skipped / Total] 365 / 132 / 15 / 512:  51%|█████     | 512/1000 [1:21:46<1:17:56,  9.58s/it][Succeeded / Failed / Skipped / Total] 365 / 132 / 15 / 512:  51%|█████▏    | 513/1000 [1:22:01<1:17:51,  9.59s/it][Succeeded / Failed / Skipped / Total] 366 / 132 / 15 / 513:  51%|█████▏    | 513/1000 [1:22:01<1:17:51,  9.59s/it][Succeeded / Failed / Skipped / Total] 366 / 132 / 15 / 513:  51%|█████▏    | 514/1000 [1:22:02<1:17:34,  9.58s/it]Perform a read . --> Controls the connection to the peer --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doRead]] ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean [[controlnoraf]] ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 509 ---------------------------------------------
Handle the write --> Try to read asynchronously --> Socre: 1.0

[[[[Adv]]]]: private void [[doWrite]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation

[[[[Adv]]]]: private void [[asnow]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 510 ---------------------------------------------
Sets up the selector and server thread . --> Try to connect to a web socket . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doSetupSelectorAndServerThread]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean [[deaniapeleftoffverptestad]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 511 ---------------------------------------------
Broadcasts the given data to all connected clients . --> Ban the given data . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[broadcast]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void [[ban]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[ban]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 512 ---------------------------------------------
Fill frames . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 513 ---------------------------------------------
Broadcast the given data to all clients . --> Call dacoader . --> Socre: 1.0

[[[[Adv]]]]: private void [[doBroadcast]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void [[dacoadplay]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 514 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 366 / 133 / 15 / 514:  51%|█████▏    | 514/1000 [1:22:02<1:17:34,  9.58s/it][Succeeded / Failed / Skipped / Total] 366 / 133 / 15 / 514:  52%|█████▏    | 515/1000 [1:22:03<1:17:16,  9.56s/it][Succeeded / Failed / Skipped / Total] 367 / 133 / 15 / 515:  52%|█████▏    | 515/1000 [1:22:03<1:17:16,  9.56s/it][Succeeded / Failed / Skipped / Total] 367 / 133 / 15 / 515:  52%|█████▏    | 516/1000 [1:22:05<1:17:00,  9.55s/it][Succeeded / Failed / Skipped / Total] 368 / 133 / 15 / 516:  52%|█████▏    | 516/1000 [1:22:05<1:17:00,  9.55s/it][Succeeded / Failed / Skipped / Total] 368 / 133 / 15 / 516:  52%|█████▏    | 517/1000 [1:22:15<1:16:51,  9.55s/it][Succeeded / Failed / Skipped / Total] 368 / 134 / 15 / 517:  52%|█████▏    | 517/1000 [1:22:15<1:16:51,  9.55s/it][Succeeded / Failed / Skipped / Total] 368 / 134 / 15 / 517:  52%|█████▏    | 518/1000 [1:22:19<1:16:36,  9.54s/it][Succeeded / Failed / Skipped / Total] 369 / 134 / 15 / 518:  52%|█████▏    | 518/1000 [1:22:19<1:16:36,  9.54s/it][Succeeded / Failed / Skipped / Total] 369 / 134 / 15 / 518:  52%|█████▏    | 519/1000 [1:22:33<1:16:30,  9.54s/it][Succeeded / Failed / Skipped / Total] 370 / 134 / 15 / 519:  52%|█████▏    | 519/1000 [1:22:33<1:16:30,  9.54s/it][Succeeded / Failed / Skipped / Total] 370 / 134 / 15 / 519:  52%|█████▏    | 520/1000 [1:22:34<1:16:13,  9.53s/it][Succeeded / Failed / Skipped / Total] 371 / 134 / 15 / 520:  52%|█████▏    | 520/1000 [1:22:34<1:16:13,  9.53s/it][Succeeded / Failed / Skipped / Total] 371 / 134 / 15 / 520:  52%|█████▏    | 521/1000 [1:22:48<1:16:08,  9.54s/it][Succeeded / Failed / Skipped / Total] 371 / 135 / 15 / 521:  52%|█████▏    | 521/1000 [1:22:48<1:16:08,  9.54s/it][Succeeded / Failed / Skipped / Total] 371 / 135 / 15 / 521:  52%|█████▏    | 522/1000 [1:22:53<1:15:54,  9.53s/it][Succeeded / Failed / Skipped / Total] 372 / 135 / 15 / 522:  52%|█████▏    | 522/1000 [1:22:53<1:15:54,  9.53s/it][Succeeded / Failed / Skipped / Total] 372 / 135 / 15 / 522:  52%|█████▏    | 523/1000 [1:23:09<1:15:51,  9.54s/it][Succeeded / Failed / Skipped / Total] 372 / 136 / 15 / 523:  52%|█████▏    | 523/1000 [1:23:09<1:15:51,  9.54s/it][Succeeded / Failed / Skipped / Total] 372 / 136 / 15 / 523:  52%|█████▏    | 524/1000 [1:23:30<1:15:51,  9.56s/it]Starts the API . --> [[[FAILED]]]

[[[[Adv]]]]: public JPAApi start ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi start ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 515 ---------------------------------------------
Transfer from source to dest . --> Transfers a byte buffer into dest . --> Socre: 1.0

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer [[source]] , ByteBuffer dest ) { if ( [[source]] == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = [[source]] . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; [[source]] . limit ( limit ) ; dest . put ( [[source]] ) ; return limit ; } else { dest . put ( [[source]] ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer [[main]] , ByteBuffer dest ) { if ( [[main]] == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = [[main]] . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; [[main]] . limit ( limit ) ; dest . put ( [[main]] ) ; return limit ; } else { dest . put ( [[main]] ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 516 ---------------------------------------------
Broadcasts a given text to all connected clients . --> Broadcast messenger . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( String [[text]] , Collection < WebSocket > clients ) { if ( [[text]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[text]] , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void [[messenger]] ( String [[book]] , Collection < WebSocket > clients ) { if ( [[book]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[book]] , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 517 ---------------------------------------------
Returns the socket associated with the connection . --> [[[FAILED]]]

[[[[Adv]]]]: private Socket [[getSocket]] ( WebSocket conn ) { WebSocketImpl [[impl]] = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) [[impl]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket [[losagett]] ( WebSocket conn ) { WebSocketImpl [[addlus]] = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) [[addlus]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 518 ---------------------------------------------
Adds a transaction to the pool . --> Traverse through under multipliers --> Socre: 1.0

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > block ) { [[withTransaction]] ( em -> { block . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[undermultiplennojor]] ( Consumer < EntityManager > block ) { [[undermultiplennojor]] ( em -> { block . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 519 ---------------------------------------------
Wraps the given arguments to a List . --> also used in testing --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[wrapArgsToListIfNeeded]] ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[bookmarttatlinepicheint]] ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 520 ---------------------------------------------
Convert the given arguments to a Scala buffer . --> template method --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[canvas原hsteaplfiflow]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 521 ---------------------------------------------
Get the EntityManager for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager em ( String [[name]] ) { EntityManagerFactory [[emf]] = emfs . get ( [[name]] ) ; if ( [[emf]] == null ) { return null ; } return [[emf]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager em ( String [[named]] ) { EntityManagerFactory [[overф]] = emfs . get ( [[named]] ) ; if ( [[overф]] == null ) { return null ; } return [[overф]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 522 ---------------------------------------------
Gets the internationalized message . --> Call function with arguments --> Socre: 1.0

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang lang , String key , Object ... args ) { Seq < Object > [[scalaArgs]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( key , [[scalaArgs]] , lang ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String [[call]] ( play . api . i18n . Lang lang , String key , Object ... args ) { Seq < Object > [[portablemargens]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( key , [[portablemargens]] , lang ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 523 ---------------------------------------------
Checks if a key is defined in the map . --> [[[FAILED]]]

[[[[Adv]]]]: public Boolean [[isDefinedAt]] ( play . api . i18n . Lang [[lang]] , String [[key]] ) { return messages . isDefinedAt ( [[key]] , [[lang]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean [[idiedant]] ( play . api . i18n . Lang [[text]] , String [[major]] ) { return messages . isDefinedAt ( [[major]] , [[text]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 524 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 373 / 136 / 15 / 524:  52%|█████▏    | 524/1000 [1:23:30<1:15:51,  9.56s/it][Succeeded / Failed / Skipped / Total] 373 / 136 / 15 / 524:  52%|█████▎    | 525/1000 [1:23:37<1:15:39,  9.56s/it][Succeeded / Failed / Skipped / Total] 374 / 136 / 15 / 525:  52%|█████▎    | 525/1000 [1:23:37<1:15:39,  9.56s/it][Succeeded / Failed / Skipped / Total] 374 / 136 / 15 / 525:  53%|█████▎    | 526/1000 [1:23:43<1:15:26,  9.55s/it][Succeeded / Failed / Skipped / Total] 375 / 136 / 15 / 526:  53%|█████▎    | 526/1000 [1:23:43<1:15:26,  9.55s/it][Succeeded / Failed / Skipped / Total] 375 / 136 / 15 / 526:  53%|█████▎    | 527/1000 [1:23:43<1:15:09,  9.53s/it][Succeeded / Failed / Skipped / Total] 375 / 137 / 15 / 527:  53%|█████▎    | 527/1000 [1:23:43<1:15:09,  9.53s/it][Succeeded / Failed / Skipped / Total] 375 / 137 / 15 / 527:  53%|█████▎    | 528/1000 [1:23:44<1:14:51,  9.52s/it][Succeeded / Failed / Skipped / Total] 375 / 137 / 16 / 528:  53%|█████▎    | 528/1000 [1:23:44<1:14:51,  9.52s/it][Succeeded / Failed / Skipped / Total] 375 / 137 / 16 / 528:  53%|█████▎    | 529/1000 [1:23:48<1:14:36,  9.51s/it][Succeeded / Failed / Skipped / Total] 376 / 137 / 16 / 529:  53%|█████▎    | 529/1000 [1:23:48<1:14:36,  9.51s/it][Succeeded / Failed / Skipped / Total] 376 / 137 / 16 / 529:  53%|█████▎    | 530/1000 [1:23:54<1:14:24,  9.50s/it][Succeeded / Failed / Skipped / Total] 377 / 137 / 16 / 530:  53%|█████▎    | 530/1000 [1:23:54<1:14:24,  9.50s/it][Succeeded / Failed / Skipped / Total] 377 / 137 / 16 / 530:  53%|█████▎    | 531/1000 [1:24:01<1:14:12,  9.49s/it][Succeeded / Failed / Skipped / Total] 378 / 137 / 16 / 531:  53%|█████▎    | 531/1000 [1:24:01<1:14:12,  9.49s/it][Succeeded / Failed / Skipped / Total] 378 / 137 / 16 / 531:  53%|█████▎    | 532/1000 [1:24:02<1:13:55,  9.48s/it][Succeeded / Failed / Skipped / Total] 379 / 137 / 16 / 532:  53%|█████▎    | 532/1000 [1:24:02<1:13:55,  9.48s/it][Succeeded / Failed / Skipped / Total] 379 / 137 / 16 / 532:  53%|█████▎    | 533/1000 [1:24:06<1:13:41,  9.47s/it][Succeeded / Failed / Skipped / Total] 380 / 137 / 16 / 533:  53%|█████▎    | 533/1000 [1:24:06<1:13:41,  9.47s/it][Succeeded / Failed / Skipped / Total] 380 / 137 / 16 / 533:  53%|█████▎    | 534/1000 [1:24:11<1:13:28,  9.46s/it][Succeeded / Failed / Skipped / Total] 381 / 137 / 16 / 534:  53%|█████▎    | 534/1000 [1:24:11<1:13:28,  9.46s/it][Succeeded / Failed / Skipped / Total] 381 / 137 / 16 / 534:  54%|█████▎    | 535/1000 [1:24:12<1:13:11,  9.44s/it][Succeeded / Failed / Skipped / Total] 381 / 137 / 17 / 535:  54%|█████▎    | 535/1000 [1:24:12<1:13:11,  9.44s/it][Succeeded / Failed / Skipped / Total] 381 / 137 / 17 / 535:  54%|█████▎    | 536/1000 [1:24:12<1:12:54,  9.43s/it][Succeeded / Failed / Skipped / Total] 381 / 137 / 18 / 536:  54%|█████▎    | 536/1000 [1:24:12<1:12:54,  9.43s/it][Succeeded / Failed / Skipped / Total] 381 / 137 / 18 / 536:  54%|█████▎    | 537/1000 [1:24:14<1:12:37,  9.41s/it]Gets the translation . --> Gets translation from keys to translation --> Socre: 1.0

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang lang , List < String > keys , Object ... [[args]] ) { Buffer < String > [[keyArgs]] = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( [[args]] ) ; return messages . apply ( [[keyArgs]] . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String [[bring]] ( play . api . i18n . Lang lang , List < String > keys , Object ... [[fortws]] ) { Buffer < String > [[mapharrs]] = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( [[fortws]] ) ; return messages . apply ( [[mapharrs]] . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 525 ---------------------------------------------
Returns the preferred message for this request . -->  offered by Message --> Socre: 1.0

[[[[Adv]]]]: public Messages [[preferred]] ( Http . RequestHeader [[request]] ) { play . api . i18n . Messages msgs = messages . preferred ( [[request]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages [[offered]] ( Http . RequestHeader [[demand]] ) { play . api . i18n . Messages msgs = messages . preferred ( [[demand]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 526 ---------------------------------------------
Set the language in the given result . --> Takilo --> Socre: 1.0

[[[[Adv]]]]: public Result [[setLang]] ( Result [[result]] , Lang lang ) { return messages . setLang ( [[result]] . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result [[takilo]] ( Result [[report]] , Lang lang ) { return messages . setLang ( [[report]] . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 527 ---------------------------------------------
Returns the preferred message for the given languages . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Collection < Lang > candidates ) { Seq < Lang > [[cs]] = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) [[cs]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages [[offered]] ( Collection < Lang > candidates ) { Seq < Lang > [[es]] = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) [[es]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 528 ---------------------------------------------
Specifies the REQUESTE --> [[[SKIPPED]]]

[[[[Adv]]]]: public final Self REPLACEME0 ( play . api . inject . Binding < ? > ... REPLACEME0 ) { return REPLACEME0 ( Guiceable . bindings ( REPLACEME0 ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 529 ---------------------------------------------
Sets the bindings for the given modules . --> Construct a new instance of this class --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . bindings ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self [[couplinga]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . bindings ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 530 ---------------------------------------------
Define the Guice binding . --> Creates a new Guice --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( play . api . inject . Module ... modules ) { return [[bindings]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self [[closurech]] ( play . api . inject . Module ... modules ) { return [[closurech]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 531 ---------------------------------------------
Specifies the class overrides from given modules . --> Overrides by the given module --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . overrides ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self [[bydownproducts]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . overrides ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 532 ---------------------------------------------
Specifies the module overrides . --> Don t forget! --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Module ... modules ) { return [[overrides]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self [[forgatements]] ( play . api . inject . Module ... modules ) { return [[forgatements]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 533 ---------------------------------------------
Specifies the Guice . --> Wrapper around the Guice --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Binding < ? > ... bindings ) { return [[overrides]] ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self [[aroundoldse]] ( play . api . inject . Binding < ? > ... bindings ) { return [[aroundoldse]] ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 534 ---------------------------------------------
Disable modules for the given modules . --> load the load --> Socre: 1.0

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[иload]] ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 535 ---------------------------------------------
Static factory method . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static < A , B > Tuple < A , B > Tuple ( A a , B b ) { return new Tuple < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 536 ---------------------------------------------
Factory method . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static < A , B , C , D , E > Tuple5 < A , B , C , D , E > Tuple5 ( A a , B b , C c , D d , E e ) { return new Tuple5 < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 537 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 381 / 138 / 18 / 537:  54%|█████▎    | 537/1000 [1:24:14<1:12:37,  9.41s/it][Succeeded / Failed / Skipped / Total] 381 / 138 / 18 / 537:  54%|█████▍    | 538/1000 [1:24:16<1:12:21,  9.40s/it][Succeeded / Failed / Skipped / Total] 382 / 138 / 18 / 538:  54%|█████▍    | 538/1000 [1:24:16<1:12:21,  9.40s/it][Succeeded / Failed / Skipped / Total] 382 / 138 / 18 / 538:  54%|█████▍    | 539/1000 [1:24:31<1:12:17,  9.41s/it][Succeeded / Failed / Skipped / Total] 383 / 138 / 18 / 539:  54%|█████▍    | 539/1000 [1:24:31<1:12:17,  9.41s/it][Succeeded / Failed / Skipped / Total] 383 / 138 / 18 / 539:  54%|█████▍    | 540/1000 [1:24:42<1:12:09,  9.41s/it][Succeeded / Failed / Skipped / Total] 384 / 138 / 18 / 540:  54%|█████▍    | 540/1000 [1:24:42<1:12:09,  9.41s/it][Succeeded / Failed / Skipped / Total] 384 / 138 / 18 / 540:  54%|█████▍    | 541/1000 [1:25:01<1:12:08,  9.43s/it][Succeeded / Failed / Skipped / Total] 384 / 139 / 18 / 541:  54%|█████▍    | 541/1000 [1:25:01<1:12:08,  9.43s/it][Succeeded / Failed / Skipped / Total] 384 / 139 / 18 / 541:  54%|█████▍    | 542/1000 [1:25:14<1:12:01,  9.44s/it][Succeeded / Failed / Skipped / Total] 384 / 140 / 18 / 542:  54%|█████▍    | 542/1000 [1:25:14<1:12:01,  9.44s/it][Succeeded / Failed / Skipped / Total] 384 / 140 / 18 / 542:  54%|█████▍    | 543/1000 [1:25:19<1:11:48,  9.43s/it][Succeeded / Failed / Skipped / Total] 385 / 140 / 18 / 543:  54%|█████▍    | 543/1000 [1:25:19<1:11:48,  9.43s/it][Succeeded / Failed / Skipped / Total] 385 / 140 / 18 / 543:  54%|█████▍    | 544/1000 [1:25:24<1:11:35,  9.42s/it][Succeeded / Failed / Skipped / Total] 386 / 140 / 18 / 544:  54%|█████▍    | 544/1000 [1:25:24<1:11:35,  9.42s/it][Succeeded / Failed / Skipped / Total] 386 / 140 / 18 / 544:  55%|█████▍    | 545/1000 [1:25:31<1:11:24,  9.42s/it][Succeeded / Failed / Skipped / Total] 387 / 140 / 18 / 545:  55%|█████▍    | 545/1000 [1:25:31<1:11:24,  9.42s/it][Succeeded / Failed / Skipped / Total] 387 / 140 / 18 / 545:  55%|█████▍    | 546/1000 [1:25:34<1:11:09,  9.40s/it][Succeeded / Failed / Skipped / Total] 387 / 141 / 18 / 546:  55%|█████▍    | 546/1000 [1:25:34<1:11:09,  9.40s/it][Succeeded / Failed / Skipped / Total] 387 / 141 / 18 / 546:  55%|█████▍    | 547/1000 [1:25:43<1:10:59,  9.40s/it]Creates a binding for binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[extension]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 538 ---------------------------------------------
from interface Request --> from interface --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < Result > call ( Request [[req]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > call ( Request [[counterq]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 539 ---------------------------------------------
Convert execution context to Executor --> else return null --> Socre: 1.0

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext ec ) { ExecutionContext prepared = ec . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[eaxinecaus]] ( ExecutionContext ec ) { ExecutionContext prepared = ec . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 540 ---------------------------------------------
Searches for an existing file . --> else return null --> Socre: 1.0

[[[[Adv]]]]: public Optional < File > [[getExistingFile]] ( String [[relativePath]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[relativePath]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > [[calljecteofforlier]] ( String [[chapur]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[chapur]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 541 ---------------------------------------------
Creates a new JPAConfig instance . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String name , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig [[into]] ( String name , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 542 ---------------------------------------------
Converts String into ByteString --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > string ( String [[callbackName]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > string ( String [[breakcrossa]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[breakcrossa]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 543 ---------------------------------------------
Gets flow from json --> Inject light on lighton --> Socre: 1.0

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > json ( String [[callbackName]] ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > json ( String [[lightonname]] ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( [[lightonname]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 544 ---------------------------------------------
Creates a JPAConfig . --> configure command --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig [[of]] ( String n1 , String u1 , String [[n2]] , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( [[n2]] , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig [[command]] ( String n1 , String u1 , String [[нa]] , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( [[нa]] , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 545 ---------------------------------------------
Creates a new instance of the given constraint validator class . --> create a new instance of the OnstraintValidator --> Socre: 1.0

[[[[Adv]]]]: private < [[T]] extends ConstraintValidator < ? , ? > > [[T]] newInstance ( Class < [[T]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < [[т]] extends ConstraintValidator < ? , ? > > [[т]] newInstance ( Class < [[т]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 546 ---------------------------------------------
Adds a constraint validator . --> [[[FAILED]]]

[[[[Adv]]]]: public < T [[extends]] ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T [[classes]] ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 547 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 387 / 142 / 18 / 547:  55%|█████▍    | 547/1000 [1:25:43<1:10:59,  9.40s/it][Succeeded / Failed / Skipped / Total] 387 / 142 / 18 / 547:  55%|█████▍    | 548/1000 [1:26:02<1:10:58,  9.42s/it][Succeeded / Failed / Skipped / Total] 388 / 142 / 18 / 548:  55%|█████▍    | 548/1000 [1:26:02<1:10:58,  9.42s/it][Succeeded / Failed / Skipped / Total] 388 / 142 / 18 / 548:  55%|█████▍    | 549/1000 [1:26:21<1:10:56,  9.44s/it][Succeeded / Failed / Skipped / Total] 389 / 142 / 18 / 549:  55%|█████▍    | 549/1000 [1:26:21<1:10:56,  9.44s/it][Succeeded / Failed / Skipped / Total] 389 / 142 / 18 / 549:  55%|█████▌    | 550/1000 [1:26:24<1:10:41,  9.43s/it][Succeeded / Failed / Skipped / Total] 390 / 142 / 18 / 550:  55%|█████▌    | 550/1000 [1:26:24<1:10:41,  9.43s/it][Succeeded / Failed / Skipped / Total] 390 / 142 / 18 / 550:  55%|█████▌    | 551/1000 [1:26:24<1:10:24,  9.41s/it][Succeeded / Failed / Skipped / Total] 390 / 143 / 18 / 551:  55%|█████▌    | 551/1000 [1:26:24<1:10:24,  9.41s/it][Succeeded / Failed / Skipped / Total] 390 / 143 / 18 / 551:  55%|█████▌    | 552/1000 [1:26:38<1:10:19,  9.42s/it][Succeeded / Failed / Skipped / Total] 391 / 143 / 18 / 552:  55%|█████▌    | 552/1000 [1:26:38<1:10:19,  9.42s/it][Succeeded / Failed / Skipped / Total] 391 / 143 / 18 / 552:  55%|█████▌    | 553/1000 [1:26:41<1:10:04,  9.41s/it]Build javaconfig . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig from ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig from ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 548 ---------------------------------------------
Called when an error occurs . --> Callback for albumcularallegements --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onClientError]] ( RequestHeader [[request]] , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( [[request]] , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( [[request]] , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( [[request]] , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( [[request]] , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[albumcularallembleur]] ( RequestHeader [[petition]] , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( [[petition]] , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( [[petition]] , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( [[petition]] , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( [[petition]] , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 549 ---------------------------------------------
Handle a bad request . --> This method should be overridden --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader [[request]] , String [[message]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[request]] . method ( ) , [[request]] . uri ( ) , [[message]] , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[antidingpregues]] ( RequestHeader [[command]] , String [[clip]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[command]] . method ( ) , [[command]] . uri ( ) , [[clip]] , [[command]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 550 ---------------------------------------------
Handles not found request . --> Communicate with dev2d --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onNotFound]] ( RequestHeader request , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > [[dev2оds]] ( RequestHeader request , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 551 ---------------------------------------------
Handle unauthorized action . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onForbidden ( RequestHeader [[request]] , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > onForbidden ( RequestHeader [[point]] , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[point]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 552 ---------------------------------------------
Logs an error . --> Log internal error --> Socre: 1.0

[[[[Adv]]]]: protected void logServerError ( RequestHeader [[request]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[request]] . method ( ) , [[request]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void logServerError ( RequestHeader [[api]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[api]] . method ( ) , [[api]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 553 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 392 / 143 / 18 / 553:  55%|█████▌    | 553/1000 [1:26:41<1:10:04,  9.41s/it][Succeeded / Failed / Skipped / Total] 392 / 143 / 18 / 553:  55%|█████▌    | 554/1000 [1:26:43<1:09:49,  9.39s/it][Succeeded / Failed / Skipped / Total] 392 / 144 / 18 / 554:  55%|█████▌    | 554/1000 [1:26:43<1:09:49,  9.39s/it][Succeeded / Failed / Skipped / Total] 392 / 144 / 18 / 554:  56%|█████▌    | 555/1000 [1:26:59<1:09:45,  9.40s/it][Succeeded / Failed / Skipped / Total] 393 / 144 / 18 / 555:  56%|█████▌    | 555/1000 [1:26:59<1:09:45,  9.40s/it][Succeeded / Failed / Skipped / Total] 393 / 144 / 18 / 555:  56%|█████▌    | 556/1000 [1:27:03<1:09:31,  9.39s/it][Succeeded / Failed / Skipped / Total] 394 / 144 / 18 / 556:  56%|█████▌    | 556/1000 [1:27:03<1:09:31,  9.39s/it][Succeeded / Failed / Skipped / Total] 394 / 144 / 18 / 556:  56%|█████▌    | 557/1000 [1:27:04<1:09:14,  9.38s/it][Succeeded / Failed / Skipped / Total] 394 / 145 / 18 / 557:  56%|█████▌    | 557/1000 [1:27:04<1:09:14,  9.38s/it][Succeeded / Failed / Skipped / Total] 394 / 145 / 18 / 557:  56%|█████▌    | 558/1000 [1:27:16<1:09:07,  9.38s/it][Succeeded / Failed / Skipped / Total] 395 / 145 / 18 / 558:  56%|█████▌    | 558/1000 [1:27:16<1:09:07,  9.38s/it][Succeeded / Failed / Skipped / Total] 395 / 145 / 18 / 558:  56%|█████▌    | 559/1000 [1:27:17<1:08:51,  9.37s/it]Handles a server error . --> This method is used to get the result from the NODO --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onServerError]] ( RequestHeader request , Throwable exception ) { try { UsefulException usefulException = throwableToUsefulException ( exception ) ; logServerError ( request , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , usefulException ) ; default : return onDevServerError ( request , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[nanarеrsel]] ( RequestHeader request , Throwable exception ) { try { UsefulException usefulException = throwableToUsefulException ( exception ) ; logServerError ( request , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , usefulException ) ; default : return onDevServerError ( request , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 554 ---------------------------------------------
Gets the matching method . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[gottenmactlinggivingcedeilreflectionhydi]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 555 ---------------------------------------------
Callback for when devServer error occurs . --> region unmardisplayview --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onDevServerError]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > [[unmardisplayviewрrn]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 556 ---------------------------------------------
Sends an error . --> Extracts the extended result data --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onProdServerError]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > [[extratrodimurzonerrр]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 557 ---------------------------------------------
Convert a throwable to a useful exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[throwingprotoncrolluncision]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 558 ---------------------------------------------
Creates a BuildDocHandler from the given resources . --> Methode permettant dirs --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromResources]] ( File [ ] [[files]] , String [ ] baseDirs ) throws IOException { assert ( [[files]] . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ [[files]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < [[files]] . length ; i ++ ) { File file = [[files]] [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler [[6emurced]] ( File [ ] [[records]] , String [ ] baseDirs ) throws IOException { assert ( [[records]] . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ [[records]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < [[records]] . length ; i ++ ) { File file = [[records]] [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 559 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 396 / 145 / 18 / 559:  56%|█████▌    | 559/1000 [1:27:17<1:08:51,  9.37s/it][Succeeded / Failed / Skipped / Total] 396 / 145 / 18 / 559:  56%|█████▌    | 560/1000 [1:27:23<1:08:39,  9.36s/it][Succeeded / Failed / Skipped / Total] 397 / 145 / 18 / 560:  56%|█████▌    | 560/1000 [1:27:23<1:08:39,  9.36s/it][Succeeded / Failed / Skipped / Total] 397 / 145 / 18 / 560:  56%|█████▌    | 561/1000 [1:27:37<1:08:33,  9.37s/it][Succeeded / Failed / Skipped / Total] 398 / 145 / 18 / 561:  56%|█████▌    | 561/1000 [1:27:37<1:08:33,  9.37s/it][Succeeded / Failed / Skipped / Total] 398 / 145 / 18 / 561:  56%|█████▌    | 562/1000 [1:27:43<1:08:22,  9.37s/it][Succeeded / Failed / Skipped / Total] 399 / 145 / 18 / 562:  56%|█████▌    | 562/1000 [1:27:43<1:08:22,  9.37s/it][Succeeded / Failed / Skipped / Total] 399 / 145 / 18 / 562:  56%|█████▋    | 563/1000 [1:27:53<1:08:13,  9.37s/it][Succeeded / Failed / Skipped / Total] 400 / 145 / 18 / 563:  56%|█████▋    | 563/1000 [1:27:53<1:08:13,  9.37s/it][Succeeded / Failed / Skipped / Total] 400 / 145 / 18 / 563:  56%|█████▋    | 564/1000 [1:28:04<1:08:04,  9.37s/it][Succeeded / Failed / Skipped / Total] 401 / 145 / 18 / 564:  56%|█████▋    | 564/1000 [1:28:04<1:08:04,  9.37s/it][Succeeded / Failed / Skipped / Total] 401 / 145 / 18 / 564:  56%|█████▋    | 565/1000 [1:28:16<1:07:57,  9.37s/it][Succeeded / Failed / Skipped / Total] 402 / 145 / 18 / 565:  56%|█████▋    | 565/1000 [1:28:16<1:07:57,  9.37s/it][Succeeded / Failed / Skipped / Total] 402 / 145 / 18 / 565:  57%|█████▋    | 566/1000 [1:28:19<1:07:43,  9.36s/it][Succeeded / Failed / Skipped / Total] 402 / 146 / 18 / 566:  57%|█████▋    | 566/1000 [1:28:19<1:07:43,  9.36s/it][Succeeded / Failed / Skipped / Total] 402 / 146 / 18 / 566:  57%|█████▋    | 567/1000 [1:28:30<1:07:35,  9.37s/it][Succeeded / Failed / Skipped / Total] 403 / 146 / 18 / 567:  57%|█████▋    | 567/1000 [1:28:30<1:07:35,  9.37s/it][Succeeded / Failed / Skipped / Total] 403 / 146 / 18 / 567:  57%|█████▋    | 568/1000 [1:28:38<1:07:24,  9.36s/it]Creates a JawrHandler from a directory and a jar file . --> Localidudust . --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base ) { return [[fromDirectoryAndJar]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[localidudurδly]] ( File directory , JarFile jarFile , String base ) { return [[localidudurδly]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 560 ---------------------------------------------
Create a DocHandler based on a directory and a jar file . --> region FileRepository --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[atingdimrredrchandonner]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 561 ---------------------------------------------
Consumes the data . --> Completes this stream with a given matcher --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[rusheded]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 562 ---------------------------------------------
Creates a documentation handler from a directory . --> can be used in testing --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File [[directory]] ) { FileRepository [[repo]] = new FilesystemRepository ( [[directory]] ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[ckidileioriate]] ( File [[cabinet]] ) { FileRepository [[rpω]] = new FilesystemRepository ( [[cabinet]] ) ; return new DocumentationHandler ( [[rpω]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 563 ---------------------------------------------
Create an HttpEntity from content . --> simpletime handling --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromContent]] ( Content content , String charset ) { String [[body]] ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity [[simpletimehenting]] ( Content content , String charset ) { String [[being]] ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 564 ---------------------------------------------
Creates a chunked entity . --> Creates an HttpEntity --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[slabred]] ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 565 ---------------------------------------------
Create a Result instance with the given status code and content . --> Color response --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , JsonNode [[content]] ) { return [[status]] ( [[status]] , [[content]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result [[color]] ( int status , JsonNode [[cm]] ) { return [[color]] ( [[color]] , [[cm]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 566 ---------------------------------------------
Create a documentation handler from a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromJar ( JarFile [[jarFile]] , String base ) { FileRepository repo = new JarRepository ( [[jarFile]] , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler fromJar ( JarFile [[furufell]] , String base ) { FileRepository repo = new JarRepository ( [[furufell]] , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 567 ---------------------------------------------
Create an HttpEntity from a string . --> Creates a flow -red response for a domain andstation --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String [[content]] , String [[charset]] ) { return new Strict ( ByteString . fromString ( [[content]] , [[charset]] ) , Optional . of ( "text/plain; charset=" + [[charset]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[flowsidered]] ( String [[domain]] , String [[andstation]] ) { return new Strict ( ByteString . fromString ( [[domain]] , [[andstation]] ) , Optional . of ( "text/plain; charset=" + [[andstation]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 568 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 404 / 146 / 18 / 568:  57%|█████▋    | 568/1000 [1:28:38<1:07:24,  9.36s/it][Succeeded / Failed / Skipped / Total] 404 / 146 / 18 / 568:  57%|█████▋    | 569/1000 [1:28:38<1:07:08,  9.35s/it][Succeeded / Failed / Skipped / Total] 404 / 146 / 19 / 569:  57%|█████▋    | 569/1000 [1:28:38<1:07:08,  9.35s/it][Succeeded / Failed / Skipped / Total] 404 / 146 / 19 / 569:  57%|█████▋    | 570/1000 [1:28:42<1:06:55,  9.34s/it][Succeeded / Failed / Skipped / Total] 405 / 146 / 19 / 570:  57%|█████▋    | 570/1000 [1:28:42<1:06:55,  9.34s/it][Succeeded / Failed / Skipped / Total] 405 / 146 / 19 / 570:  57%|█████▋    | 571/1000 [1:28:57<1:06:49,  9.35s/it][Succeeded / Failed / Skipped / Total] 405 / 147 / 19 / 571:  57%|█████▋    | 571/1000 [1:28:57<1:06:49,  9.35s/it][Succeeded / Failed / Skipped / Total] 405 / 147 / 19 / 571:  57%|█████▋    | 572/1000 [1:28:57<1:06:34,  9.33s/it][Succeeded / Failed / Skipped / Total] 405 / 148 / 19 / 572:  57%|█████▋    | 572/1000 [1:28:57<1:06:34,  9.33s/it][Succeeded / Failed / Skipped / Total] 405 / 148 / 19 / 572:  57%|█████▋    | 573/1000 [1:29:03<1:06:21,  9.32s/it][Succeeded / Failed / Skipped / Total] 405 / 149 / 19 / 573:  57%|█████▋    | 573/1000 [1:29:03<1:06:21,  9.32s/it][Succeeded / Failed / Skipped / Total] 405 / 149 / 19 / 573:  57%|█████▋    | 574/1000 [1:29:13<1:06:13,  9.33s/it][Succeeded / Failed / Skipped / Total] 405 / 150 / 19 / 574:  57%|█████▋    | 574/1000 [1:29:13<1:06:13,  9.33s/it][Succeeded / Failed / Skipped / Total] 405 / 150 / 19 / 574:  57%|█████▊    | 575/1000 [1:29:18<1:06:00,  9.32s/it][Succeeded / Failed / Skipped / Total] 406 / 150 / 19 / 575:  57%|█████▊    | 575/1000 [1:29:18<1:06:00,  9.32s/it][Succeeded / Failed / Skipped / Total] 406 / 150 / 19 / 575:  58%|█████▊    | 576/1000 [1:29:20<1:05:46,  9.31s/it][Succeeded / Failed / Skipped / Total] 407 / 150 / 19 / 576:  58%|█████▊    | 576/1000 [1:29:20<1:05:46,  9.31s/it][Succeeded / Failed / Skipped / Total] 407 / 150 / 19 / 576:  58%|█████▊    | 577/1000 [1:29:30<1:05:37,  9.31s/it][Succeeded / Failed / Skipped / Total] 408 / 150 / 19 / 577:  58%|█████▊    | 577/1000 [1:29:30<1:05:37,  9.31s/it][Succeeded / Failed / Skipped / Total] 408 / 150 / 19 / 577:  58%|█████▊    | 578/1000 [1:29:36<1:05:25,  9.30s/it][Succeeded / Failed / Skipped / Total] 409 / 150 / 19 / 578:  58%|█████▊    | 578/1000 [1:29:36<1:05:25,  9.30s/it][Succeeded / Failed / Skipped / Total] 409 / 150 / 19 / 578:  58%|█████▊    | 579/1000 [1:29:49<1:05:18,  9.31s/it][Succeeded / Failed / Skipped / Total] 409 / 151 / 19 / 579:  58%|█████▊    | 579/1000 [1:29:49<1:05:18,  9.31s/it][Succeeded / Failed / Skipped / Total] 409 / 151 / 19 / 579:  58%|█████▊    | 580/1000 [1:29:51<1:05:04,  9.30s/it]Sends an input stream to the response . --> HTTP response body with HTTP status code --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int status , InputStream content , long [[contentLength]] ) { return status ( status ) . sendInputStream ( content , [[contentLength]] ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result status ( int status , InputStream content , long [[articleliedur]] ) { return status ( status ) . sendInputStream ( content , [[articleliedur]] ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 569 ---------------------------------------------
Return user by id --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 570 ---------------------------------------------
Sends a JSON response with the given status code . --> Obtains the status of the platform --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int [[status]] , JsonNode [[content]] , JsonEncoding [[encoding]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( [[content]] , [[encoding]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result status ( int [[no]] , JsonNode [[profile]] , JsonEncoding [[architecture]] ) { if ( [[profile]] == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( [[profile]] , [[architecture]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 571 ---------------------------------------------
Returns a unique call . --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[local]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 572 ---------------------------------------------
Creates a result with the given status code . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int status , byte [ ] content ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[status]] , new HttpEntity . Strict ( ByteString . fromArray ( content ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result [[creation]] ( int status , byte [ ] content ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[creation]] , new HttpEntity . Strict ( ByteString . fromArray ( content ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 573 ---------------------------------------------
Selects the preferred language . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > candidates ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( candidates ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[primary]] ( Collection < Lang > candidates ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( candidates ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 574 ---------------------------------------------
Returns a result with the given status code . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int status , File content ) { return [[status]] ( [[status]] , content , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[mission]] ( int status , File content ) { return [[mission]] ( [[mission]] , content , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 575 ---------------------------------------------
Returns the absolute URL for the given request . --> is essential? --> Socre: 1.0

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request request ) { return [[absoluteURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[essentialuroli]] ( Http . Request request ) { return [[essentialuroli]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 576 ---------------------------------------------
Returns the web socket URL for the given request . --> Returns the destination address for the request --> Socre: 1.0

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request request ) { return [[webSocketURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[destinationlecinrunlan]] ( Http . Request request ) { return [[destinationlecinrunlan]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 577 ---------------------------------------------
Creates a call with the given fragment . --> List thadmce --> Socre: 1.0

[[[[Adv]]]]: public Call [[withFragment]] ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call [[listthadmce]] ( String [[chunk]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[chunk]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 578 ---------------------------------------------
Creates a new server instance . --> Start serving requests --> Socre: 1.0

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode mode , int port , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( port ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[setrc]] ( Mode mode , int port , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( port ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 579 ---------------------------------------------
Returns a connection function that executes the given connection . --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[block]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[connection]] ) { try { return [[block]] . call ( [[connection]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[side]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[area]] ) { try { return [[side]] . call ( [[area]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
[Succeeded / Failed / Skipped / Total] 410 / 151 / 19 / 580:  58%|█████▊    | 580/1000 [1:29:51<1:05:04,  9.30s/it][Succeeded / Failed / Skipped / Total] 410 / 151 / 19 / 580:  58%|█████▊    | 581/1000 [1:29:55<1:04:50,  9.29s/it][Succeeded / Failed / Skipped / Total] 411 / 151 / 19 / 581:  58%|█████▊    | 581/1000 [1:29:55<1:04:50,  9.29s/it][Succeeded / Failed / Skipped / Total] 411 / 151 / 19 / 581:  58%|█████▊    | 582/1000 [1:30:08<1:04:44,  9.29s/it][Succeeded / Failed / Skipped / Total] 412 / 151 / 19 / 582:  58%|█████▊    | 582/1000 [1:30:08<1:04:44,  9.29s/it][Succeeded / Failed / Skipped / Total] 412 / 151 / 19 / 582:  58%|█████▊    | 583/1000 [1:30:12<1:04:31,  9.28s/it][Succeeded / Failed / Skipped / Total] 412 / 152 / 19 / 583:  58%|█████▊    | 583/1000 [1:30:12<1:04:31,  9.28s/it][Succeeded / Failed / Skipped / Total] 412 / 152 / 19 / 583:  58%|█████▊    | 584/1000 [1:30:24<1:04:23,  9.29s/it][Succeeded / Failed / Skipped / Total] 412 / 153 / 19 / 584:  58%|█████▊    | 584/1000 [1:30:24<1:04:23,  9.29s/it][Succeeded / Failed / Skipped / Total] 412 / 153 / 19 / 584:  58%|█████▊    | 585/1000 [1:30:25<1:04:09,  9.28s/it][Succeeded / Failed / Skipped / Total] 413 / 153 / 19 / 585:  58%|█████▊    | 585/1000 [1:30:25<1:04:09,  9.28s/it][Succeeded / Failed / Skipped / Total] 413 / 153 / 19 / 585:  59%|█████▊    | 586/1000 [1:30:44<1:04:06,  9.29s/it][Succeeded / Failed / Skipped / Total] 414 / 153 / 19 / 586:  59%|█████▊    | 586/1000 [1:30:44<1:04:06,  9.29s/it][Succeeded / Failed / Skipped / Total] 414 / 153 / 19 / 586:  59%|█████▊    | 587/1000 [1:30:46<1:03:51,  9.28s/it][Succeeded / Failed / Skipped / Total] 415 / 153 / 19 / 587:  59%|█████▊    | 587/1000 [1:30:46<1:03:51,  9.28s/it][Succeeded / Failed / Skipped / Total] 415 / 153 / 19 / 587:  59%|█████▉    | 588/1000 [1:30:50<1:03:38,  9.27s/it]--------------------------------------------- Result 580 ---------------------------------------------
Converts a JsonNode to a Java object . --> Creates an instance from json . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[a2]] > [[a2]] fromJson ( JsonNode json , Class < [[a2]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 581 ---------------------------------------------
Convert an object to json . --> Return the value of a field --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[fstersut]] ( final Object [[field]] ) { try { return mapper ( ) . valueToTree ( [[field]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 582 ---------------------------------------------
Parse an input stream . --> Parse input stream --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode parse ( java . io . InputStream [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode parse ( java . io . InputStream [[sar5]] ) { try { return mapper ( ) . readTree ( [[sar5]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 583 ---------------------------------------------
Returns a function that returns a connection runnable . --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectionFunction]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { block . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[networkfunst]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { block . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 584 ---------------------------------------------
Parses a string into a JsonNode . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( String [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[ganerate]] ( String [[jec]] ) { try { return mapper ( ) . readTree ( [[jec]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 585 ---------------------------------------------
Returns the canonical form of the given URL . --> Return dakota --> Socre: 1.0

[[[[Adv]]]]: public static String [[canonical]] ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > [[canonical]] = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[canonical]] . empty ( ) && [[canonical]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[canonical]] . push ( comp ) ; else [[canonical]] . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[canonical]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String [[dakota]] ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > [[dakota]] = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[dakota]] . empty ( ) && [[dakota]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[dakota]] . push ( comp ) ; else [[dakota]] . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[dakota]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 586 ---------------------------------------------
Simplified method for timeout . --> Massend by amount of time --> Socre: 1.0

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[timeout]] ( final CompletionStage < A > stage , final long amount , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[massend]] ( final CompletionStage < A > stage , final long amount , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 587 ---------------------------------------------
Returns a list of displayable constraints . --> Get all graphicanerelay dimensions --> Socre: 1.0

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > [[constraints]] ) { return [[constraints]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[graphicsanerelaydimd]] ( Set < ConstraintDescriptor < ? > > [[constrained]] ) { return [[constrained]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[graphicsanerelaydimd]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
[Succeeded / Failed / Skipped / Total] 415 / 154 / 19 / 588:  59%|█████▉    | 588/1000 [1:30:50<1:03:38,  9.27s/it][Succeeded / Failed / Skipped / Total] 415 / 154 / 19 / 588:  59%|█████▉    | 589/1000 [1:30:56<1:03:27,  9.26s/it][Succeeded / Failed / Skipped / Total] 416 / 154 / 19 / 589:  59%|█████▉    | 589/1000 [1:30:56<1:03:27,  9.26s/it][Succeeded / Failed / Skipped / Total] 416 / 154 / 19 / 589:  59%|█████▉    | 590/1000 [1:31:04<1:03:17,  9.26s/it][Succeeded / Failed / Skipped / Total] 417 / 154 / 19 / 590:  59%|█████▉    | 590/1000 [1:31:04<1:03:17,  9.26s/it][Succeeded / Failed / Skipped / Total] 417 / 154 / 19 / 590:  59%|█████▉    | 591/1000 [1:31:22<1:03:14,  9.28s/it][Succeeded / Failed / Skipped / Total] 418 / 154 / 19 / 591:  59%|█████▉    | 591/1000 [1:31:22<1:03:14,  9.28s/it][Succeeded / Failed / Skipped / Total] 418 / 154 / 19 / 591:  59%|█████▉    | 592/1000 [1:31:30<1:03:04,  9.27s/it][Succeeded / Failed / Skipped / Total] 418 / 155 / 19 / 592:  59%|█████▉    | 592/1000 [1:31:30<1:03:04,  9.27s/it][Succeeded / Failed / Skipped / Total] 418 / 155 / 19 / 592:  59%|█████▉    | 593/1000 [1:31:35<1:02:51,  9.27s/it][Succeeded / Failed / Skipped / Total] 419 / 155 / 19 / 593:  59%|█████▉    | 593/1000 [1:31:35<1:02:51,  9.27s/it][Succeeded / Failed / Skipped / Total] 419 / 155 / 19 / 593:  59%|█████▉    | 594/1000 [1:31:47<1:02:44,  9.27s/it][Succeeded / Failed / Skipped / Total] 420 / 155 / 19 / 594:  59%|█████▉    | 594/1000 [1:31:47<1:02:44,  9.27s/it][Succeeded / Failed / Skipped / Total] 420 / 155 / 19 / 594:  60%|█████▉    | 595/1000 [1:31:57<1:02:35,  9.27s/it][Succeeded / Failed / Skipped / Total] 420 / 156 / 19 / 595:  60%|█████▉    | 595/1000 [1:31:57<1:02:35,  9.27s/it][Succeeded / Failed / Skipped / Total] 420 / 156 / 19 / 595:  60%|█████▉    | 596/1000 [1:32:04<1:02:24,  9.27s/it][Succeeded / Failed / Skipped / Total] 421 / 156 / 19 / 596:  60%|█████▉    | 596/1000 [1:32:04<1:02:24,  9.27s/it][Succeeded / Failed / Skipped / Total] 421 / 156 / 19 / 596:  60%|█████▉    | 597/1000 [1:32:06<1:02:10,  9.26s/it][Succeeded / Failed / Skipped / Total] 421 / 157 / 19 / 597:  60%|█████▉    | 597/1000 [1:32:06<1:02:10,  9.26s/it][Succeeded / Failed / Skipped / Total] 421 / 157 / 19 / 597:  60%|█████▉    | 598/1000 [1:32:11<1:01:58,  9.25s/it]--------------------------------------------- Result 588 ---------------------------------------------
Relative path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String relative ( String [[startPath]] , String targetPath ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String relative ( String [[centerspace]] , String targetPath ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 589 ---------------------------------------------
Creates a tuple of displayable constraints . --> Extract displayableConstraint from ConstraintDescriptor --> Socre: 1.0

[[[[Adv]]]]: public static Tuple < String , List < Object > > displayableConstraint ( ConstraintDescriptor < ? > [[constraint]] ) { final Display [[displayAnnotation]] = [[constraint]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[displayAnnotation]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[displayAnnotation]] . attributes ( ) ) . map ( attr -> [[constraint]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > displayableConstraint ( ConstraintDescriptor < ? > [[congo]] ) { final Display [[delannourde]] = [[congo]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[delannourde]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[delannourde]] . attributes ( ) ) . map ( attr -> [[congo]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 590 ---------------------------------------------
Parse cron expression . --> Obtains the substrings of the current date --> Socre: 1.0

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String cron ) { try { return new CronExpression ( cron ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[subesthetteexillimo]] ( String cron ) { try { return new CronExpression ( cron ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 591 ---------------------------------------------
Calculate the next interval --> Returns MCConicararid for given cron pattern --> Socre: 1.0

[[[[Adv]]]]: public static long [[cronInterval]] ( String cron , Date [[date]] ) { try { return new CronExpression ( cron ) . getNextInterval ( [[date]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long [[mcconicarid]] ( String cron , Date [[period]] ) { try { return new CronExpression ( cron ) . getNextInterval ( [[period]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 592 ---------------------------------------------
Configures the Guice application with the given context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context [[context]] ) { return initialBuilder . in ( [[context]] . environment ( ) ) . loadConfig ( [[context]] . initialConfig ( ) ) . overrides ( overrides ( [[context]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[base]] ( ApplicationLoader . Context [[venue]] ) { return initialBuilder . in ( [[venue]] . environment ( ) ) . loadConfig ( [[venue]] . initialConfig ( ) ) . overrides ( overrides ( [[venue]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 593 ---------------------------------------------
Render a todo --> Determines the todo for the given command --> Socre: 1.0

[[[[Adv]]]]: public static Result TODO ( Request [[request]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[request]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result TODO ( Request [[command]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[command]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 594 ---------------------------------------------
Store a value in session --> Store object in forward context --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[session]] ( String key , String value ) { [[session]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void [[forward]] ( String key , String value ) { [[forward]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 595 ---------------------------------------------
Returns a BindingKey for the given instance . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[generalized]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 596 ---------------------------------------------
Creates an ahc client . --> createahcClient --> Socre: 1.0

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig [[config]] , AhcHttpCache [[cache]] , Materializer [[materializer]] ) { final StandaloneAhcWSClient [[client]] = StandaloneAhcWSClient . create ( [[config]] , [[cache]] , [[materializer]] ) ; return new AhcWSClient ( [[client]] , [[materializer]] ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig [[machineفge]] , AhcHttpCache [[contention]] , Materializer [[nalreader]] ) { final StandaloneAhcWSClient [[connection]] = StandaloneAhcWSClient . create ( [[machineفge]] , [[contention]] , [[nalreader]] ) ; return new AhcWSClient ( [[connection]] , [[nalreader]] ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 597 ---------------------------------------------
Returns a binding key with the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[extend]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 598 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 422 / 157 / 19 / 598:  60%|█████▉    | 598/1000 [1:32:11<1:01:58,  9.25s/it][Succeeded / Failed / Skipped / Total] 422 / 157 / 19 / 598:  60%|█████▉    | 599/1000 [1:32:15<1:01:45,  9.24s/it][Succeeded / Failed / Skipped / Total] 423 / 157 / 19 / 599:  60%|█████▉    | 599/1000 [1:32:15<1:01:45,  9.24s/it][Succeeded / Failed / Skipped / Total] 423 / 157 / 19 / 599:  60%|██████    | 600/1000 [1:32:19<1:01:33,  9.23s/it][Succeeded / Failed / Skipped / Total] 424 / 157 / 19 / 600:  60%|██████    | 600/1000 [1:32:19<1:01:33,  9.23s/it][Succeeded / Failed / Skipped / Total] 424 / 157 / 19 / 600:  60%|██████    | 601/1000 [1:32:23<1:01:20,  9.22s/it][Succeeded / Failed / Skipped / Total] 424 / 158 / 19 / 601:  60%|██████    | 601/1000 [1:32:23<1:01:20,  9.22s/it][Succeeded / Failed / Skipped / Total] 424 / 158 / 19 / 601:  60%|██████    | 602/1000 [1:32:32<1:01:10,  9.22s/it][Succeeded / Failed / Skipped / Total] 425 / 158 / 19 / 602:  60%|██████    | 602/1000 [1:32:32<1:01:10,  9.22s/it][Succeeded / Failed / Skipped / Total] 425 / 158 / 19 / 602:  60%|██████    | 603/1000 [1:32:38<1:00:59,  9.22s/it][Succeeded / Failed / Skipped / Total] 425 / 159 / 19 / 603:  60%|██████    | 603/1000 [1:32:38<1:00:59,  9.22s/it][Succeeded / Failed / Skipped / Total] 425 / 159 / 19 / 603:  60%|██████    | 604/1000 [1:32:40<1:00:45,  9.21s/it][Succeeded / Failed / Skipped / Total] 426 / 159 / 19 / 604:  60%|██████    | 604/1000 [1:32:40<1:00:45,  9.21s/it][Succeeded / Failed / Skipped / Total] 426 / 159 / 19 / 604:  60%|██████    | 605/1000 [1:32:41<1:00:31,  9.19s/it][Succeeded / Failed / Skipped / Total] 427 / 159 / 19 / 605:  60%|██████    | 605/1000 [1:32:41<1:00:31,  9.19s/it][Succeeded / Failed / Skipped / Total] 427 / 159 / 19 / 605:  61%|██████    | 606/1000 [1:33:02<1:00:29,  9.21s/it][Succeeded / Failed / Skipped / Total] 428 / 159 / 19 / 606:  61%|██████    | 606/1000 [1:33:02<1:00:29,  9.21s/it][Succeeded / Failed / Skipped / Total] 428 / 159 / 19 / 606:  61%|██████    | 607/1000 [1:33:11<1:00:20,  9.21s/it]Determine if two classes are assignable . --> Compute iasgnoability --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean [[autoboxing]] ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "[[False]]" != "[[False]]" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[isAssignable]] ( classArray [ i ] , toClassArray [ i ] , [[autoboxing]] ) == "[[False]]" != "[[False]]" ) { return "[[False]]" != "[[False]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[iasidegnoability]] ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean [[openrolize]] ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "[[authentic]]" != "[[authentic]]" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[iasidegnoability]] ( classArray [ i ] , toClassArray [ i ] , [[openrolize]] ) == "[[authentic]]" != "[[authentic]]" ) { return "[[authentic]]" != "[[authentic]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 599 ---------------------------------------------
Converts this object to a Java binding . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final Class < ? extends T > implementation ) { return underlying . to ( implementation ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > [[under]] ( final Class < ? extends T > implementation ) { return underlying . to ( implementation ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 600 ---------------------------------------------
Sends a value to flash . --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void flash ( String [[key]] , String [[value]] ) { flash ( ) . put ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void flash ( String [[book]] , String [[student]] ) { flash ( ) . put ( [[book]] , [[student]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 601 ---------------------------------------------
Converts this binding to a Java Binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[open]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 602 ---------------------------------------------
Converts this binding to a Java Binding . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > [[provider]] ) { return underlying . to ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[s]] ( final Provider < ? extends T > [[benefactor]] ) { return underlying . to ( [[benefactor]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 603 ---------------------------------------------
Converts this binding to the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[g]] ( final BindingKey < ? extends T > [[d]] ) { return underlying . to ( [[d]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 604 ---------------------------------------------
Returns the available language --> Returns a list of available languages --> Socre: 1.0

[[[[Adv]]]]: public static List < Lang > availables ( Application app ) { play . api . i18n . Langs [[langs]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( [[langs]] . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > availables ( Application app ) { play . api . i18n . Langs [[apsman]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( [[apsman]] . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 605 ---------------------------------------------
Converts this binding to a Java type . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > [[toProvider]] ( final Class < P > provider ) { return underlying . toProvider ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > [[sovera]] ( final Class < P > provider ) { return underlying . toProvider ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 606 ---------------------------------------------
Returns the preferred language for the given application . --> get mobile language --> Socre: 1.0

[[[[Adv]]]]: public static Lang [[preferred]] ( Application app , List < Lang > availableLangs ) { play . api . i18n . Langs [[langs]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( [[langs]] . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[mobile]] ( Application app , List < Lang > availableLangs ) { play . api . i18n . Langs [[hunch]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( [[hunch]] . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 607 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 428 / 160 / 19 / 607:  61%|██████    | 607/1000 [1:33:11<1:00:20,  9.21s/it][Succeeded / Failed / Skipped / Total] 428 / 160 / 19 / 607:  61%|██████    | 608/1000 [1:33:18<1:00:09,  9.21s/it][Succeeded / Failed / Skipped / Total] 429 / 160 / 19 / 608:  61%|██████    | 608/1000 [1:33:18<1:00:09,  9.21s/it][Succeeded / Failed / Skipped / Total] 429 / 160 / 19 / 608:  61%|██████    | 609/1000 [1:33:21<59:56,  9.20s/it]  [Succeeded / Failed / Skipped / Total] 430 / 160 / 19 / 609:  61%|██████    | 609/1000 [1:33:21<59:56,  9.20s/it][Succeeded / Failed / Skipped / Total] 430 / 160 / 19 / 609:  61%|██████    | 610/1000 [1:33:31<59:47,  9.20s/it][Succeeded / Failed / Skipped / Total] 431 / 160 / 19 / 610:  61%|██████    | 610/1000 [1:33:31<59:47,  9.20s/it][Succeeded / Failed / Skipped / Total] 431 / 160 / 19 / 610:  61%|██████    | 611/1000 [1:33:33<59:34,  9.19s/it][Succeeded / Failed / Skipped / Total] 432 / 160 / 19 / 611:  61%|██████    | 611/1000 [1:33:33<59:34,  9.19s/it][Succeeded / Failed / Skipped / Total] 432 / 160 / 19 / 611:  61%|██████    | 612/1000 [1:33:35<59:20,  9.18s/it][Succeeded / Failed / Skipped / Total] 433 / 160 / 19 / 612:  61%|██████    | 612/1000 [1:33:35<59:20,  9.18s/it][Succeeded / Failed / Skipped / Total] 433 / 160 / 19 / 612:  61%|██████▏   | 613/1000 [1:33:46<59:12,  9.18s/it][Succeeded / Failed / Skipped / Total] 433 / 161 / 19 / 613:  61%|██████▏   | 613/1000 [1:33:46<59:12,  9.18s/it][Succeeded / Failed / Skipped / Total] 433 / 161 / 19 / 613:  61%|██████▏   | 614/1000 [1:33:57<59:04,  9.18s/it][Succeeded / Failed / Skipped / Total] 433 / 162 / 19 / 614:  61%|██████▏   | 614/1000 [1:33:57<59:04,  9.18s/it][Succeeded / Failed / Skipped / Total] 433 / 162 / 19 / 614:  62%|██████▏   | 615/1000 [1:34:02<58:52,  9.18s/it][Succeeded / Failed / Skipped / Total] 434 / 162 / 19 / 615:  62%|██████▏   | 615/1000 [1:34:02<58:52,  9.18s/it][Succeeded / Failed / Skipped / Total] 434 / 162 / 19 / 615:  62%|██████▏   | 616/1000 [1:34:05<58:39,  9.17s/it][Succeeded / Failed / Skipped / Total] 435 / 162 / 19 / 616:  62%|██████▏   | 616/1000 [1:34:05<58:39,  9.17s/it][Succeeded / Failed / Skipped / Total] 435 / 162 / 19 / 616:  62%|██████▏   | 617/1000 [1:34:27<58:38,  9.19s/it]Creates a reader from a map of Evolutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader fromMap ( Map < String , List < Evolution > > [[evolutions]] ) { return new SimpleEvolutionsReader ( [[evolutions]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . [[adaptationes]] . EvolutionsReader fromMap ( Map < String , List < Evolution > > [[adaptationes]] ) { return new SimpleEvolutionsReader ( [[adaptationes]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 608 ---------------------------------------------
Deletes all executions of a database . --> Re - migrate a list of databases --> Socre: 1.0

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database [[database]] , boolean autocommit , String schema ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( [[database]] . asScala ( ) , schema ) ; evolutions . evolve ( evolutions . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[restroommmletolda]] ( Database [[list]] , boolean autocommit , String schema ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( [[list]] . asScala ( ) , schema ) ; evolutions . evolve ( evolutions . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 609 ---------------------------------------------
Attaches a configuration loader to the Guice . --> Load environment variables --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[withConfigLoader]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[andonsfrladaster]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 610 ---------------------------------------------
Attaches a module loader to the Guice --> Define defasvoles client --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[withModuleLoader]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[defmasvolesclienter]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 611 ---------------------------------------------
Creates an instance of Evolutions reader --> Birchessrewrewrap --> Socre: 1.0

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[forDefault]] ( Evolution ... [[evolutions]] ) { Map < String , List < Evolution > > [[map]] = new HashMap < String , List < Evolution > > ( ) ; [[map]] . put ( "default" , Arrays . asList ( [[evolutions]] ) ) ; return fromMap ( [[map]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . [[accessions]] . EvolutionsReader [[birchessrew]] ( Evolution ... [[accessions]] ) { Map < String , List < Evolution > > [[park]] = new HashMap < String , List < Evolution > > ( ) ; [[park]] . put ( "default" , Arrays . asList ( [[accessions]] ) ) ; return fromMap ( [[park]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 612 ---------------------------------------------
Load the given modules . --> need to be overridden --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( com . google . inject . Module ... modules ) { return [[load]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[burden]] ( com . google . inject . Module ... modules ) { return [[burden]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 613 ---------------------------------------------
Configure the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[host]] ( GuiceableModule ... [[missions]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[missions]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 614 ---------------------------------------------
Loads the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... [[modules]] ) { return load ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... [[classes]] ) { return load ( Guiceable . [[classes]] ( [[classes]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 615 ---------------------------------------------
Load the Guice with the given bindings . --> Add some brises --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[load]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder [[task]] ( play . api . inject . Binding < ? > ... [[brises]] ) { return [[task]] ( Guiceable . [[brises]] ( [[brises]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 616 ---------------------------------------------
Creates a new Guice application builder . --> This method is used to build the modern server --> Socre: 1.0

[[[[Adv]]]]: protected GuiceApplicationBuilder [[newBuilder]] ( play . api . inject . guice . GuiceApplicationBuilder [[builder]] ) { return new GuiceApplicationBuilder ( [[builder]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder [[modernrepbuildser]] ( play . api . inject . guice . GuiceApplicationBuilder [[shop]] ) { return new GuiceApplicationBuilder ( [[shop]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 617 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 436 / 162 / 19 / 617:  62%|██████▏   | 617/1000 [1:34:27<58:38,  9.19s/it][Succeeded / Failed / Skipped / Total] 436 / 162 / 19 / 617:  62%|██████▏   | 618/1000 [1:34:33<58:26,  9.18s/it][Succeeded / Failed / Skipped / Total] 436 / 163 / 19 / 618:  62%|██████▏   | 618/1000 [1:34:33<58:26,  9.18s/it][Succeeded / Failed / Skipped / Total] 436 / 163 / 19 / 618:  62%|██████▏   | 619/1000 [1:34:46<58:20,  9.19s/it][Succeeded / Failed / Skipped / Total] 437 / 163 / 19 / 619:  62%|██████▏   | 619/1000 [1:34:46<58:20,  9.19s/it][Succeeded / Failed / Skipped / Total] 437 / 163 / 19 / 619:  62%|██████▏   | 620/1000 [1:35:12<58:21,  9.21s/it][Succeeded / Failed / Skipped / Total] 437 / 164 / 19 / 620:  62%|██████▏   | 620/1000 [1:35:12<58:21,  9.21s/it][Succeeded / Failed / Skipped / Total] 437 / 164 / 19 / 620:  62%|██████▏   | 621/1000 [1:35:14<58:07,  9.20s/it][Succeeded / Failed / Skipped / Total] 438 / 164 / 19 / 621:  62%|██████▏   | 621/1000 [1:35:14<58:07,  9.20s/it][Succeeded / Failed / Skipped / Total] 438 / 164 / 19 / 621:  62%|██████▏   | 622/1000 [1:35:16<57:54,  9.19s/it][Succeeded / Failed / Skipped / Total] 439 / 164 / 19 / 622:  62%|██████▏   | 622/1000 [1:35:16<57:54,  9.19s/it][Succeeded / Failed / Skipped / Total] 439 / 164 / 19 / 622:  62%|██████▏   | 623/1000 [1:35:35<57:50,  9.21s/it]Gets the current entity manager stack . --> Asgaper for current thread --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[emStack]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[asgaper]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 618 ---------------------------------------------
Encode a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; encode ( buf , [[cookie]] ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie [[cookies]] ) { if ( [[cookies]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; encode ( buf , [[cookies]] ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 619 ---------------------------------------------
Gets the entity manager to use . --> Enqueues entity manager to entity manager --> Socre: 1.0

[[[[Adv]]]]: public EntityManager [[em]] ( ) { Deque < EntityManager > [[ems]] = this . emStack ( "True" == "True" ) ; if ( [[ems]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[ems]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager [[en]] ( ) { Deque < EntityManager > [[eyebrow]] = this . emStack ( "True" == "True" ) ; if ( [[eyebrow]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[eyebrow]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 620 ---------------------------------------------
Pushes or pops an entity manager to the stack . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[resistnumrpre]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 621 ---------------------------------------------
Provides a flow using a splitter . --> Collects supportperators --> Socre: 1.0

[[[[Adv]]]]: public static < [[In]] , FlowIn , Out > Flow < [[In]] , Out , ? > [[bypassWith]] ( Function < [[In]] , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > flow ) { return [[bypassWith]] ( Flow . < [[In]] > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < [[inside]] , FlowIn , Out > Flow < [[inside]] , Out , ? > [[supportper]] ( Function < [[inside]] , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > flow ) { return [[supportper]] ( Flow . < [[inside]] > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 622 ---------------------------------------------
Disconnects the specified flow using the specified splitter . --> Mirrorec model --> Socre: 1.0

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[bypassWith]] ( Flow < In , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > [[mergeStrategy]] , Flow < FlowIn , Out , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[mirrorec]] ( Flow < In , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > [[amalgamationesaltg]] , Flow < FlowIn , Out , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 623 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 440 / 164 / 19 / 623:  62%|██████▏   | 623/1000 [1:35:35<57:50,  9.21s/it][Succeeded / Failed / Skipped / Total] 440 / 164 / 19 / 623:  62%|██████▏   | 624/1000 [1:35:36<57:36,  9.19s/it][Succeeded / Failed / Skipped / Total] 440 / 165 / 19 / 624:  62%|██████▏   | 624/1000 [1:35:36<57:36,  9.19s/it][Succeeded / Failed / Skipped / Total] 440 / 165 / 19 / 624:  62%|██████▎   | 625/1000 [1:35:36<57:22,  9.18s/it][Succeeded / Failed / Skipped / Total] 441 / 165 / 19 / 625:  62%|██████▎   | 625/1000 [1:35:36<57:22,  9.18s/it][Succeeded / Failed / Skipped / Total] 441 / 165 / 19 / 625:  63%|██████▎   | 626/1000 [1:35:51<57:16,  9.19s/it][Succeeded / Failed / Skipped / Total] 442 / 165 / 19 / 626:  63%|██████▎   | 626/1000 [1:35:51<57:16,  9.19s/it][Succeeded / Failed / Skipped / Total] 442 / 165 / 19 / 626:  63%|██████▎   | 627/1000 [1:35:53<57:03,  9.18s/it][Succeeded / Failed / Skipped / Total] 443 / 165 / 19 / 627:  63%|██████▎   | 627/1000 [1:35:53<57:03,  9.18s/it][Succeeded / Failed / Skipped / Total] 443 / 165 / 19 / 627:  63%|██████▎   | 628/1000 [1:35:55<56:49,  9.16s/it][Succeeded / Failed / Skipped / Total] 444 / 165 / 19 / 628:  63%|██████▎   | 628/1000 [1:35:55<56:49,  9.16s/it][Succeeded / Failed / Skipped / Total] 444 / 165 / 19 / 628:  63%|██████▎   | 629/1000 [1:36:03<56:39,  9.16s/it][Succeeded / Failed / Skipped / Total] 445 / 165 / 19 / 629:  63%|██████▎   | 629/1000 [1:36:03<56:39,  9.16s/it][Succeeded / Failed / Skipped / Total] 445 / 165 / 19 / 629:  63%|██████▎   | 630/1000 [1:36:06<56:26,  9.15s/it]Creates a flow from an actor ref . --> flows from actorRef to another --> Socre: 1.0

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > actorRef ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy [[overflowStrategy]] , ActorRefFactory [[factory]] , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , [[overflowStrategy]] , [[factory]] , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > actorRef ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy [[enpatientferdentject]] , ActorRefFactory [[barn]] , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , [[enpatientferdentject]] , [[barn]] , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 624 ---------------------------------------------
Fills the form with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public Form < T > [[fill]] ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > [[reserve]] ( T [[attribute]] ) { if ( [[attribute]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[attribute]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 625 ---------------------------------------------
Returns a list of errors that are not empty . --> Returns the globalverrinsystem --> Socre: 1.0

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[globalverrinsystems]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 626 ---------------------------------------------
Returns the value for the given key . --> Matches a key . --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[match]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 627 ---------------------------------------------
Fills the form with the given value . --> Fluent API --> Socre: 1.0

[[[[Adv]]]]: public DynamicForm [[fill]] ( Map < String , Object > value ) { Form < Dynamic > form = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm [[write]] ( Map < String , Object > value ) { Form < Dynamic > form = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 628 ---------------------------------------------
Get the errors as JSON . --> Generate Gesagaesh2 response --> Socre: 1.0

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[gesagaesh2]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 629 ---------------------------------------------
Convert error arguments to an unmodifiable list . --> returns null if there is none --> Socre: 1.0

[[[[Adv]]]]: private List < Object > [[convertErrorArguments]] ( Object [ ] arguments ) { if ( arguments == null ) { return Collections . emptyList ( ) ; } List < Object > [[converted]] = Arrays . stream ( arguments ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[converted]] ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > [[relationwarresagparats]] ( Object [ ] arguments ) { if ( arguments == null ) { return Collections . emptyList ( ) ; } List < Object > [[pointer]] = Arrays . stream ( arguments ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[pointer]] ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 630 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 446 / 165 / 19 / 630:  63%|██████▎   | 630/1000 [1:36:06<56:26,  9.15s/it][Succeeded / Failed / Skipped / Total] 446 / 165 / 19 / 630:  63%|██████▎   | 631/1000 [1:36:07<56:12,  9.14s/it][Succeeded / Failed / Skipped / Total] 447 / 165 / 19 / 631:  63%|██████▎   | 631/1000 [1:36:07<56:12,  9.14s/it][Succeeded / Failed / Skipped / Total] 447 / 165 / 19 / 631:  63%|██████▎   | 632/1000 [1:36:09<55:59,  9.13s/it][Succeeded / Failed / Skipped / Total] 448 / 165 / 19 / 632:  63%|██████▎   | 632/1000 [1:36:09<55:59,  9.13s/it][Succeeded / Failed / Skipped / Total] 448 / 165 / 19 / 632:  63%|██████▎   | 633/1000 [1:36:14<55:47,  9.12s/it][Succeeded / Failed / Skipped / Total] 448 / 166 / 19 / 633:  63%|██████▎   | 633/1000 [1:36:14<55:47,  9.12s/it][Succeeded / Failed / Skipped / Total] 448 / 166 / 19 / 633:  63%|██████▎   | 634/1000 [1:36:16<55:34,  9.11s/it][Succeeded / Failed / Skipped / Total] 448 / 167 / 19 / 634:  63%|██████▎   | 634/1000 [1:36:16<55:34,  9.11s/it][Succeeded / Failed / Skipped / Total] 448 / 167 / 19 / 634:  64%|██████▎   | 635/1000 [1:36:24<55:24,  9.11s/it][Succeeded / Failed / Skipped / Total] 449 / 167 / 19 / 635:  64%|██████▎   | 635/1000 [1:36:24<55:24,  9.11s/it][Succeeded / Failed / Skipped / Total] 449 / 167 / 19 / 635:  64%|██████▎   | 636/1000 [1:36:46<55:22,  9.13s/it][Succeeded / Failed / Skipped / Total] 450 / 167 / 19 / 636:  64%|██████▎   | 636/1000 [1:36:46<55:22,  9.13s/it][Succeeded / Failed / Skipped / Total] 450 / 167 / 19 / 636:  64%|██████▎   | 637/1000 [1:37:00<55:16,  9.14s/it][Succeeded / Failed / Skipped / Total] 451 / 167 / 19 / 637:  64%|██████▎   | 637/1000 [1:37:00<55:16,  9.14s/it][Succeeded / Failed / Skipped / Total] 451 / 167 / 19 / 637:  64%|██████▍   | 638/1000 [1:37:09<55:07,  9.14s/it]Print object . --> Print a child --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[child]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[child]] . class ) ) { return conversion . convert ( t , [[child]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 631 ---------------------------------------------
Parse text to given class --> converts a ring to a rse --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[т]] > [[т]] parse ( String text , Class < [[т]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 632 ---------------------------------------------
Converts a text value into an object . --> Convert the given text to an art representation . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[art]] > [[art]] parse ( Field field , String text ) { return ( [[art]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 633 ---------------------------------------------
Gets the type descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[canvas]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 634 ---------------------------------------------
Print a value . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[language]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[language]] . class ) ) ) { return ( [[language]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[language]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[language]] . class ) ) { return conversion . convert ( t , [[language]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 635 ---------------------------------------------
Registers converter for optional string types . --> Add baseit library . --> Socre: 1.0

[[[[Adv]]]]: private Formatters [[registerOptional]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters [[baseitredl]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 636 ---------------------------------------------
Encodes the given cookie into a string . --> Creates or returns an Ophancode --> Socre: 1.0

[[[[Adv]]]]: public String [[encode]] ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = [[cookie]] . name ( ) ; final String value = [[cookie]] . value ( ) != null ? [[cookie]] . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( [[cookie]] . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( [[cookie]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , [[cookie]] . maxAge ( ) ) ; Date expires = [[cookie]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String [[orphancode]] ( Cookie [[crew]] ) { if ( [[crew]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = [[crew]] . name ( ) ; final String value = [[crew]] . value ( ) != null ? [[crew]] . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( [[crew]] . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( [[crew]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , [[crew]] . maxAge ( ) ) ; Date expires = [[crew]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 637 ---------------------------------------------
Returns a list of nodes that match the specified node . --> Get a list of Podes from a path --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String path , Object [[node]] ) { return [[selectNodes]] ( path , [[node]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[askpodes]] ( String path , Object [[network]] ) { return [[askpodes]] ( path , [[network]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 638 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 451 / 168 / 19 / 638:  64%|██████▍   | 638/1000 [1:37:09<55:07,  9.14s/it][Succeeded / Failed / Skipped / Total] 451 / 168 / 19 / 638:  64%|██████▍   | 639/1000 [1:37:23<55:01,  9.15s/it][Succeeded / Failed / Skipped / Total] 451 / 169 / 19 / 639:  64%|██████▍   | 639/1000 [1:37:23<55:01,  9.15s/it][Succeeded / Failed / Skipped / Total] 451 / 169 / 19 / 639:  64%|██████▍   | 640/1000 [1:37:24<54:47,  9.13s/it][Succeeded / Failed / Skipped / Total] 451 / 169 / 20 / 640:  64%|██████▍   | 640/1000 [1:37:24<54:47,  9.13s/it][Succeeded / Failed / Skipped / Total] 451 / 169 / 20 / 640:  64%|██████▍   | 641/1000 [1:37:30<54:36,  9.13s/it][Succeeded / Failed / Skipped / Total] 451 / 170 / 20 / 641:  64%|██████▍   | 641/1000 [1:37:30<54:36,  9.13s/it][Succeeded / Failed / Skipped / Total] 451 / 170 / 20 / 641:  64%|██████▍   | 642/1000 [1:37:37<54:26,  9.12s/it][Succeeded / Failed / Skipped / Total] 452 / 170 / 20 / 642:  64%|██████▍   | 642/1000 [1:37:37<54:26,  9.12s/it][Succeeded / Failed / Skipped / Total] 452 / 170 / 20 / 642:  64%|██████▍   | 643/1000 [1:37:44<54:16,  9.12s/it][Succeeded / Failed / Skipped / Total] 452 / 171 / 20 / 643:  64%|██████▍   | 643/1000 [1:37:45<54:16,  9.12s/it][Succeeded / Failed / Skipped / Total] 452 / 171 / 20 / 643:  64%|██████▍   | 644/1000 [1:37:57<54:09,  9.13s/it][Succeeded / Failed / Skipped / Total] 453 / 171 / 20 / 644:  64%|██████▍   | 644/1000 [1:37:57<54:09,  9.13s/it][Succeeded / Failed / Skipped / Total] 453 / 171 / 20 / 644:  64%|██████▍   | 645/1000 [1:38:20<54:07,  9.15s/it]Register a formatter for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[Formatters]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > [[caniers]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 639 ---------------------------------------------
Convert a Java List to a Seq . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[forpkim]] ( java . util . List < T > [[collections]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[collections]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 640 ---------------------------------------------
JacksonAcceptor --> [[[SKIPPED]]]

[[[[Adv]]]]: public static < In , Out > MappedWebSocketAcceptor < In , Out > json ( Class < In > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 641 ---------------------------------------------
Convert an array to a Seq . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[congec]] ( T [ ] [[compute]] ) { return [[congec]] ( java . util . Arrays . asList ( [[compute]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 642 ---------------------------------------------
Accepts an incoming flow . --> Accepts web socket and returns result --> Socre: 1.0

[[[[Adv]]]]: private static < In , Out > WebSocket acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new WebSocket ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader [[request]] ) { return f . apply ( [[request]] ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > WebSocket acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new WebSocket ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader [[drop]] ) { return f . apply ( [[drop]] ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 643 ---------------------------------------------
Converts an array into a sequence . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... [[array]] ) { return toSeq ( [[array]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[multiarsfs]] ( T ... [[operation]] ) { return toSeq ( [[operation]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 644 ---------------------------------------------
Utility method to set an accessible object . --> Checks if an object is an accessible object --> Socre: 1.0

[[[[Adv]]]]: static boolean [[setAccessibleWorkaround]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean [[boxintersessportworksband]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 645 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 454 / 171 / 20 / 645:  64%|██████▍   | 645/1000 [1:38:20<54:07,  9.15s/it][Succeeded / Failed / Skipped / Total] 454 / 171 / 20 / 645:  65%|██████▍   | 646/1000 [1:38:27<53:57,  9.14s/it][Succeeded / Failed / Skipped / Total] 455 / 171 / 20 / 646:  65%|██████▍   | 646/1000 [1:38:27<53:57,  9.14s/it][Succeeded / Failed / Skipped / Total] 455 / 171 / 20 / 646:  65%|██████▍   | 647/1000 [1:38:36<53:48,  9.14s/it][Succeeded / Failed / Skipped / Total] 456 / 171 / 20 / 647:  65%|██████▍   | 647/1000 [1:38:36<53:48,  9.14s/it][Succeeded / Failed / Skipped / Total] 456 / 171 / 20 / 647:  65%|██████▍   | 648/1000 [1:38:38<53:35,  9.13s/it][Succeeded / Failed / Skipped / Total] 457 / 171 / 20 / 648:  65%|██████▍   | 648/1000 [1:38:38<53:35,  9.13s/it][Succeeded / Failed / Skipped / Total] 457 / 171 / 20 / 648:  65%|██████▍   | 649/1000 [1:38:55<53:30,  9.15s/it][Succeeded / Failed / Skipped / Total] 458 / 171 / 20 / 649:  65%|██████▍   | 649/1000 [1:38:55<53:30,  9.15s/it][Succeeded / Failed / Skipped / Total] 458 / 171 / 20 / 649:  65%|██████▌   | 650/1000 [1:39:16<53:27,  9.16s/it]Register a converter . --> Register a new converter for a given class --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[Formatters]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[types]] = new HashSet <> ( ) ; [[types]] . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return [[types]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[types]] = new HashSet <> ( ) ; [[types]] . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return [[types]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[ceramictos]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[collections]] = new HashSet <> ( ) ; [[collections]] . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return [[collections]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[collections]] = new HashSet <> ( ) ; [[collections]] . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return [[collections]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 646 ---------------------------------------------
Get the promotion cost between two classes . --> Get promotion cost --> Socre: 1.0

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > srcClass , final Class < ? > destClass ) { float [[cost]] = 0.0f ; Class < ? > [[cls]] = srcClass ; if ( ! [[cls]] . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > srcClass , final Class < ? > destClass ) { float [[r]] = 0.0f ; Class < ? > [[lang]] = srcClass ; if ( ! [[lang]] . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 647 ---------------------------------------------
Gets message for a given key -->  internationalized version --> Socre: 1.0

[[[[Adv]]]]: public String at ( String [[key]] , Object ... args ) { return messagesApi . get ( lang , [[key]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String at ( String [[jack]] , Object ... args ) { return messagesApi . get ( lang , [[jack]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 648 ---------------------------------------------
Gets a message for a message . --> Gets a translation for a list of messages --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[en]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 649 ---------------------------------------------
Creates a database from the given parameters . --> Creates afiou --> Socre: 1.0

[[[[Adv]]]]: public static Database [[createFrom]] ( String driver , String url , Map < String , ? extends Object > config ) { return [[createFrom]] ( "default" , driver , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[createsfiou]] ( String driver , String url , Map < String , ? extends Object > config ) { return [[createsfiou]] ( "default" , driver , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 650 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 458 / 172 / 20 / 650:  65%|██████▌   | 650/1000 [1:39:16<53:27,  9.16s/it][Succeeded / Failed / Skipped / Total] 458 / 172 / 20 / 650:  65%|██████▌   | 651/1000 [1:39:23<53:16,  9.16s/it][Succeeded / Failed / Skipped / Total] 459 / 172 / 20 / 651:  65%|██████▌   | 651/1000 [1:39:23<53:16,  9.16s/it][Succeeded / Failed / Skipped / Total] 459 / 172 / 20 / 651:  65%|██████▌   | 652/1000 [1:39:45<53:14,  9.18s/it][Succeeded / Failed / Skipped / Total] 460 / 172 / 20 / 652:  65%|██████▌   | 652/1000 [1:39:45<53:14,  9.18s/it][Succeeded / Failed / Skipped / Total] 460 / 172 / 20 / 652:  65%|██████▌   | 653/1000 [1:40:01<53:09,  9.19s/it][Succeeded / Failed / Skipped / Total] 461 / 172 / 20 / 653:  65%|██████▌   | 653/1000 [1:40:01<53:09,  9.19s/it][Succeeded / Failed / Skipped / Total] 461 / 172 / 20 / 653:  65%|██████▌   | 654/1000 [1:40:10<52:59,  9.19s/it][Succeeded / Failed / Skipped / Total] 462 / 172 / 20 / 654:  65%|██████▌   | 654/1000 [1:40:10<52:59,  9.19s/it][Succeeded / Failed / Skipped / Total] 462 / 172 / 20 / 654:  66%|██████▌   | 655/1000 [1:40:10<52:45,  9.18s/it][Succeeded / Failed / Skipped / Total] 462 / 172 / 21 / 655:  66%|██████▌   | 655/1000 [1:40:10<52:45,  9.18s/it][Succeeded / Failed / Skipped / Total] 462 / 172 / 21 / 655:  66%|██████▌   | 656/1000 [1:40:16<52:35,  9.17s/it][Succeeded / Failed / Skipped / Total] 463 / 172 / 21 / 656:  66%|██████▌   | 656/1000 [1:40:16<52:35,  9.17s/it][Succeeded / Failed / Skipped / Total] 463 / 172 / 21 / 656:  66%|██████▌   | 657/1000 [1:40:24<52:25,  9.17s/it]Create a parallel Sorter . --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter [[create]] ( Object [ ] arrays ) { Generator [[gen]] = new Generator ( ) ; [[gen]] . setArrays ( arrays ) ; return [[gen]] . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter [[creates]] ( Object [ ] arrays ) { Generator [[fred]] = new Generator ( ) ; [[fred]] . setArrays ( arrays ) ; return [[fred]] . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 651 ---------------------------------------------
Get the total transformation cost . --> better? --> Socre: 1.0

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] srcArgs , final Executable [[executable]] ) { final Class < ? > [ ] destArgs = [[executable]] . getParameterTypes ( ) ; final boolean isVarArgs = [[executable]] . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[buylanprsticespassctсτ]] ( final Class < ? > [ ] srcArgs , final Executable [[accesssppace]] ) { final Class < ? > [ ] destArgs = [[accesssppace]] . getParameterTypes ( ) ; final boolean isVarArgs = [[accesssppace]] . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 652 ---------------------------------------------
Invokes the method . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public Object invoke ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo [[fci]] = fastClassInfo ; return [[fci]] . f1 . invoke ( [[fci]] . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object invoke ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo [[ilᵢ]] = fastClassInfo ; return [[ilᵢ]] . f1 . invoke ( [[ilᵢ]] . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 653 ---------------------------------------------
Cast a number to type --> generate a binary value between two types --> Socre: 1.0

[[[[Adv]]]]: public void [[cast_numeric]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void [[basewallnomeral]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[basewallnomeral]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[basewallnomeral]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[basewallnomeral]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 654 ---------------------------------------------
Load an argument . --> load classbridge --> Socre: 1.0

[[[[Adv]]]]: public void [[load_arg]] ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void [[classbridgeelin]] ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 655 ---------------------------------------------
 emit a field instruction . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 656 ---------------------------------------------
Appends a zero or null value to the stack . --> bootstrap instructions --> Socre: 1.0

[[[[Adv]]]]: public void [[zero_or_null]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[fatherbootlycsign]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 657 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 463 / 173 / 21 / 657:  66%|██████▌   | 657/1000 [1:40:24<52:25,  9.17s/it][Succeeded / Failed / Skipped / Total] 463 / 173 / 21 / 657:  66%|██████▌   | 658/1000 [1:40:29<52:13,  9.16s/it][Succeeded / Failed / Skipped / Total] 464 / 173 / 21 / 658:  66%|██████▌   | 658/1000 [1:40:29<52:13,  9.16s/it][Succeeded / Failed / Skipped / Total] 464 / 173 / 21 / 658:  66%|██████▌   | 659/1000 [1:40:30<52:00,  9.15s/it][Succeeded / Failed / Skipped / Total] 465 / 173 / 21 / 659:  66%|██████▌   | 659/1000 [1:40:30<52:00,  9.15s/it][Succeeded / Failed / Skipped / Total] 465 / 173 / 21 / 659:  66%|██████▌   | 660/1000 [1:40:36<51:49,  9.15s/it][Succeeded / Failed / Skipped / Total] 466 / 173 / 21 / 660:  66%|██████▌   | 660/1000 [1:40:36<51:49,  9.15s/it][Succeeded / Failed / Skipped / Total] 466 / 173 / 21 / 660:  66%|██████▌   | 661/1000 [1:40:47<51:41,  9.15s/it][Succeeded / Failed / Skipped / Total] 467 / 173 / 21 / 661:  66%|██████▌   | 661/1000 [1:40:47<51:41,  9.15s/it][Succeeded / Failed / Skipped / Total] 467 / 173 / 21 / 661:  66%|██████▌   | 662/1000 [1:40:58<51:33,  9.15s/it][Succeeded / Failed / Skipped / Total] 468 / 173 / 21 / 662:  66%|██████▌   | 662/1000 [1:40:58<51:33,  9.15s/it][Succeeded / Failed / Skipped / Total] 468 / 173 / 21 / 662:  66%|██████▋   | 663/1000 [1:41:33<51:37,  9.19s/it][Succeeded / Failed / Skipped / Total] 469 / 173 / 21 / 663:  66%|██████▋   | 663/1000 [1:41:33<51:37,  9.19s/it][Succeeded / Failed / Skipped / Total] 469 / 173 / 21 / 663:  66%|██████▋   | 664/1000 [1:41:33<51:23,  9.18s/it]Performs a quick sort . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[quickSort]] ( int [[index]] , int lo , int [[hi]] , Comparator [[cmp]] ) { chooseComparer ( [[index]] , [[cmp]] ) ; super . quickSort ( lo , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void [[slowunie]] ( int [[och]] , int lo , int [[to]] , Comparator [[2q]] ) { chooseComparer ( [[och]] , [[2q]] ) ; super . quickSort ( lo , [[to]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 658 ---------------------------------------------
Computes the cost of object transformation . --> Compute catchdeverse --> Socre: 1.0

[[[[Adv]]]]: private static float [[getObjectTransformationCost]] ( Class < ? > srcClass , final Class < ? > [[destClass]] ) { if ( [[destClass]] . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , [[destClass]] ) ; } float cost = 0.0f ; while ( srcClass != null && ! [[destClass]] . equals ( srcClass ) ) { if ( [[destClass]] . isInterface ( ) && ClassUtils . isAssignable ( srcClass , [[destClass]] ) ) { * If [[the]] destination [[class]] is null, we've traveled all the way up to * [[an]] Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float [[catchdeversearrcreedscatti]] ( Class < ? > srcClass , final Class < ? > [[desnicws]] ) { if ( [[desnicws]] . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , [[desnicws]] ) ; } float cost = 0.0f ; while ( srcClass != null && ! [[desnicws]] . equals ( srcClass ) ) { if ( [[desnicws]] . isInterface ( ) && ClassUtils . isAssignable ( srcClass , [[desnicws]] ) ) { * If [[i]] destination [[collection]] is null, we've traveled all the way up to * [[your]] Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 659 ---------------------------------------------
Merge sort operation . --> Sorts by index and hi --> Socre: 1.0

[[[[Adv]]]]: public void [[mergeSort]] ( int index , int [[lo]] , int hi , Comparator [[cmp]] ) { chooseComparer ( index , [[cmp]] ) ; super . mergeSort ( [[lo]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[blendedspertp]] ( int index , int [[hold]] , int hi , Comparator [[rmп]] ) { chooseComparer ( index , [[rmп]] ) ; super . mergeSort ( [[hold]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 660 ---------------------------------------------
Unbox or null . --> unbox or zbox --> Socre: 1.0

[[[[Adv]]]]: public void unbox_or_zero ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label [[nonNull]] = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( [[nonNull]] ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( [[nonNull]] ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void unbox_or_zero ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label [[のunit]] = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( [[のunit]] ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( [[のunit]] ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 661 ---------------------------------------------
null is null --> Compares two nulls --> Socre: 1.0

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label [[nonNull]] = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( [[nonNull]] ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( [[nonNull]] ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label [[notnumr]] = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( [[notnumr]] ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( [[notnumr]] ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 662 ---------------------------------------------
Extract methods from superclass and interfaces . --> assign methods --> Socre: 0.9999999999820136

[[[[Adv]]]]: public static void [[getMethods]] ( Class superclass , Class [ ] interfaces , List methods ) { [[getMethods]] ( superclass , interfaces , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void [[calldevhordates]] ( Class superclass , Class [ ] interfaces , List methods ) { [[calldevhordates]] ( superclass , interfaces , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 663 ---------------------------------------------
Sets the superclass . --> setVumbpercore --> Socre: 1.0

[[[[Adv]]]]: public void [[setSuperclass]] ( Class [[superclass]] ) { if ( [[superclass]] != null && [[superclass]] . equals ( Object . class ) ) { [[superclass]] = null ; } this . superclass = [[superclass]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[vsumbpercore]] ( Class [[getther]] ) { if ( [[getther]] != null && [[getther]] . equals ( Object . class ) ) { [[getther]] = null ; } this . superclass = [[getther]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 664 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 469 / 173 / 22 / 664:  66%|██████▋   | 664/1000 [1:41:33<51:23,  9.18s/it][Succeeded / Failed / Skipped / Total] 469 / 173 / 22 / 664:  66%|██████▋   | 665/1000 [1:41:50<51:18,  9.19s/it][Succeeded / Failed / Skipped / Total] 469 / 174 / 22 / 665:  66%|██████▋   | 665/1000 [1:41:50<51:18,  9.19s/it][Succeeded / Failed / Skipped / Total] 469 / 174 / 22 / 665:  67%|██████▋   | 666/1000 [1:42:02<51:10,  9.19s/it][Succeeded / Failed / Skipped / Total] 469 / 175 / 22 / 666:  67%|██████▋   | 666/1000 [1:42:02<51:10,  9.19s/it][Succeeded / Failed / Skipped / Total] 469 / 175 / 22 / 666:  67%|██████▋   | 667/1000 [1:42:06<50:58,  9.19s/it][Succeeded / Failed / Skipped / Total] 469 / 176 / 22 / 667:  67%|██████▋   | 667/1000 [1:42:06<50:58,  9.19s/it][Succeeded / Failed / Skipped / Total] 469 / 176 / 22 / 667:  67%|██████▋   | 668/1000 [1:42:06<50:45,  9.17s/it][Succeeded / Failed / Skipped / Total] 469 / 176 / 23 / 668:  67%|██████▋   | 668/1000 [1:42:06<50:45,  9.17s/it][Succeeded / Failed / Skipped / Total] 469 / 176 / 23 / 668:  67%|██████▋   | 669/1000 [1:42:17<50:36,  9.17s/it][Succeeded / Failed / Skipped / Total] 470 / 176 / 23 / 669:  67%|██████▋   | 669/1000 [1:42:17<50:36,  9.17s/it][Succeeded / Failed / Skipped / Total] 470 / 176 / 23 / 669:  67%|██████▋   | 670/1000 [1:42:21<50:24,  9.17s/it][Succeeded / Failed / Skipped / Total] 471 / 176 / 23 / 670:  67%|██████▋   | 670/1000 [1:42:21<50:24,  9.17s/it][Succeeded / Failed / Skipped / Total] 471 / 176 / 23 / 670:  67%|██████▋   | 671/1000 [1:42:32<50:16,  9.17s/it]Get field . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 665 ---------------------------------------------
Filter constructors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[filterConstructors]] ( Class sc , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( sc , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void [[canvasensridncies]] ( Class sc , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( sc , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 666 ---------------------------------------------
Adds method . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]] ( Method [[method]] ) { [[add]] ( ReflectUtils . getSignature ( [[method]] ) , ReflectUtils . getExceptionTypes ( [[method]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[added]] ( Method [[system]] ) { [[added]] ( ReflectUtils . getSignature ( [[system]] ) , ReflectUtils . getExceptionTypes ( [[system]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 667 ---------------------------------------------
Finds all bridge methods . --> [[[FAILED]]]

[[[[Adv]]]]: public Map [[resolveAll]] ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map [[herl]] ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 668 ---------------------------------------------
Finds all methods with the given names and descriptors . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 669 ---------------------------------------------
Returns the cardinality . --> Return the cardinality of the value --> Socre: 1.0

[[[[Adv]]]]: public int cardinality ( ) { int w = value ; int [[c]] = 0 ; while ( w != 0 ) { [[c]] += T [ w & 255 ] ; w >>= 8 ; } return [[c]] ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int cardinality ( ) { int w = value ; int [[system]] = 0 ; while ( w != 0 ) { [[system]] += T [ w & 255 ] ; w >>= 8 ; } return [[system]] ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 670 ---------------------------------------------
Process an array . --> Crafts a bridge fragment --> Socre: 1.0

[[[[Adv]]]]: public static void [[process_array]] ( CodeEmitter e , Type type , ProcessArrayCallback [[callback]] ) { Type [[componentType]] = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( [[componentType]] ) ; [[callback]] . processElement ( [[componentType]] ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void [[craftbridgeassembly]] ( CodeEmitter e , Type type , ProcessArrayCallback [[rallyt]] ) { Type [[bodyname]] = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( [[bodyname]] ) ; [[rallyt]] . processElement ( [[bodyname]] ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
[Succeeded / Failed / Skipped / Total] 472 / 176 / 23 / 671:  67%|██████▋   | 671/1000 [1:42:32<50:16,  9.17s/it][Succeeded / Failed / Skipped / Total] 472 / 176 / 23 / 671:  67%|██████▋   | 672/1000 [1:42:47<50:10,  9.18s/it][Succeeded / Failed / Skipped / Total] 472 / 177 / 23 / 672:  67%|██████▋   | 672/1000 [1:42:47<50:10,  9.18s/it][Succeeded / Failed / Skipped / Total] 472 / 177 / 23 / 672:  67%|██████▋   | 673/1000 [1:42:50<49:57,  9.17s/it][Succeeded / Failed / Skipped / Total] 473 / 177 / 23 / 673:  67%|██████▋   | 673/1000 [1:42:50<49:57,  9.17s/it][Succeeded / Failed / Skipped / Total] 473 / 177 / 23 / 673:  67%|██████▋   | 674/1000 [1:42:57<49:48,  9.17s/it][Succeeded / Failed / Skipped / Total] 474 / 177 / 23 / 674:  67%|██████▋   | 674/1000 [1:42:57<49:48,  9.17s/it][Succeeded / Failed / Skipped / Total] 474 / 177 / 23 / 674:  68%|██████▊   | 675/1000 [1:43:04<49:37,  9.16s/it][Succeeded / Failed / Skipped / Total] 475 / 177 / 23 / 675:  68%|██████▊   | 675/1000 [1:43:04<49:37,  9.16s/it][Succeeded / Failed / Skipped / Total] 475 / 177 / 23 / 675:  68%|██████▊   | 676/1000 [1:43:13<49:28,  9.16s/it][Succeeded / Failed / Skipped / Total] 475 / 178 / 23 / 676:  68%|██████▊   | 676/1000 [1:43:13<49:28,  9.16s/it][Succeeded / Failed / Skipped / Total] 475 / 178 / 23 / 676:  68%|██████▊   | 677/1000 [1:43:19<49:17,  9.16s/it][Succeeded / Failed / Skipped / Total] 475 / 179 / 23 / 677:  68%|██████▊   | 677/1000 [1:43:19<49:17,  9.16s/it][Succeeded / Failed / Skipped / Total] 475 / 179 / 23 / 677:  68%|██████▊   | 678/1000 [1:43:24<49:06,  9.15s/it][Succeeded / Failed / Skipped / Total] 475 / 180 / 23 / 678:  68%|██████▊   | 678/1000 [1:43:24<49:06,  9.15s/it][Succeeded / Failed / Skipped / Total] 475 / 180 / 23 / 678:  68%|██████▊   | 679/1000 [1:43:32<48:57,  9.15s/it][Succeeded / Failed / Skipped / Total] 475 / 181 / 23 / 679:  68%|██████▊   | 679/1000 [1:43:32<48:57,  9.15s/it][Succeeded / Failed / Skipped / Total] 475 / 181 / 23 / 679:  68%|██████▊   | 680/1000 [1:43:40<48:47,  9.15s/it][Succeeded / Failed / Skipped / Total] 475 / 182 / 23 / 680:  68%|██████▊   | 680/1000 [1:43:40<48:47,  9.15s/it][Succeeded / Failed / Skipped / Total] 475 / 182 / 23 / 680:  68%|██████▊   | 681/1000 [1:43:48<48:37,  9.15s/it][Succeeded / Failed / Skipped / Total] 476 / 182 / 23 / 681:  68%|██████▊   | 681/1000 [1:43:48<48:37,  9.15s/it][Succeeded / Failed / Skipped / Total] 476 / 182 / 23 / 681:  68%|██████▊   | 682/1000 [1:43:53<48:26,  9.14s/it][Succeeded / Failed / Skipped / Total] 476 / 183 / 23 / 682:  68%|██████▊   | 682/1000 [1:43:53<48:26,  9.14s/it][Succeeded / Failed / Skipped / Total] 476 / 183 / 23 / 682:  68%|██████▊   | 683/1000 [1:43:55<48:13,  9.13s/it]--------------------------------------------- Result 671 ---------------------------------------------
Reads a string from a file . --> get the contents of a file --> Socre: 1.0

[[[[Adv]]]]: public static String [[readString]] ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[deltane]] ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 672 ---------------------------------------------
Resolves a base path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path resolve ( final Path base , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return base . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path resolve ( final Path base , String [[leader]] ) { if ( StringUtil . startsWithChar ( [[leader]] , File . separatorChar ) ) { [[leader]] = [[leader]] . substring ( 1 ) ; } return base . resolve ( [[leader]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 673 ---------------------------------------------
Create HttpRequest . --> Create an HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest create ( final String method , final String [[destination]] ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest create ( final String method , final String [[departure]] ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( [[departure]] ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 674 ---------------------------------------------
Sets the naming policy . -->  adjectives to lemma --> Socre: 1.0

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy [[namingPolicy]] ) { if ( [[namingPolicy]] == null ) [[namingPolicy]] = DefaultNamingPolicy . INSTANCE ; this . [[namingPolicy]] = [[namingPolicy]] ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[generalworldgپiciis]] ( NamingPolicy [[monikerliptyry]] ) { if ( [[monikerliptyry]] == null ) [[monikerliptyry]] = DefaultNamingPolicy . INSTANCE ; this . [[globalpedicallyys]] = [[monikerliptyry]] ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 675 ---------------------------------------------
Sets the Http request host . --> Set the route for the client --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[host]] ( final String [[host]] ) { this . [[host]] = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[route]] ( final String [[client]] ) { this . [[invite]] = [[route]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[route]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 676 ---------------------------------------------
Makes a CONNECT request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[ask]] ( final String [[value]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[value]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 677 ---------------------------------------------
Start building a GET request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[open]] ( final String [[client]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[client]] ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 678 ---------------------------------------------
Start a POST request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[prefix]] ( final String [[country]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[country]] ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 679 ---------------------------------------------
Makes a PUT request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[site]] ( final String [[client]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[client]] ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 680 ---------------------------------------------
Makes a PATCH request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[zone]] ( final String [[host]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[host]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 681 ---------------------------------------------
Makes a TRACE request . --> Specifies the transport to HTTP transport --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[transport]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 682 ---------------------------------------------
Makes a HEAD request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[pad]] ( final String [[end]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[end]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 683 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 476 / 184 / 23 / 683:  68%|██████▊   | 683/1000 [1:43:55<48:13,  9.13s/it][Succeeded / Failed / Skipped / Total] 476 / 184 / 23 / 683:  68%|██████▊   | 684/1000 [1:44:04<48:05,  9.13s/it][Succeeded / Failed / Skipped / Total] 476 / 185 / 23 / 684:  68%|██████▊   | 684/1000 [1:44:04<48:05,  9.13s/it][Succeeded / Failed / Skipped / Total] 476 / 185 / 23 / 684:  68%|██████▊   | 685/1000 [1:44:12<47:55,  9.13s/it][Succeeded / Failed / Skipped / Total] 477 / 185 / 23 / 685:  68%|██████▊   | 685/1000 [1:44:12<47:55,  9.13s/it][Succeeded / Failed / Skipped / Total] 477 / 185 / 23 / 685:  69%|██████▊   | 686/1000 [1:44:12<47:42,  9.11s/it][Succeeded / Failed / Skipped / Total] 478 / 185 / 23 / 686:  69%|██████▊   | 686/1000 [1:44:12<47:42,  9.11s/it][Succeeded / Failed / Skipped / Total] 478 / 185 / 23 / 686:  69%|██████▊   | 687/1000 [1:44:18<47:31,  9.11s/it][Succeeded / Failed / Skipped / Total] 479 / 185 / 23 / 687:  69%|██████▊   | 687/1000 [1:44:18<47:31,  9.11s/it][Succeeded / Failed / Skipped / Total] 479 / 185 / 23 / 687:  69%|██████▉   | 688/1000 [1:44:27<47:22,  9.11s/it][Succeeded / Failed / Skipped / Total] 480 / 185 / 23 / 688:  69%|██████▉   | 688/1000 [1:44:27<47:22,  9.11s/it][Succeeded / Failed / Skipped / Total] 480 / 185 / 23 / 688:  69%|██████▉   | 689/1000 [1:44:28<47:09,  9.10s/it][Succeeded / Failed / Skipped / Total] 481 / 185 / 23 / 689:  69%|██████▉   | 689/1000 [1:44:28<47:09,  9.10s/it][Succeeded / Failed / Skipped / Total] 481 / 185 / 23 / 689:  69%|██████▉   | 690/1000 [1:44:35<46:59,  9.09s/it][Succeeded / Failed / Skipped / Total] 482 / 185 / 23 / 690:  69%|██████▉   | 690/1000 [1:44:35<46:59,  9.09s/it][Succeeded / Failed / Skipped / Total] 482 / 185 / 23 / 690:  69%|██████▉   | 691/1000 [1:44:41<46:49,  9.09s/it][Succeeded / Failed / Skipped / Total] 483 / 185 / 23 / 691:  69%|██████▉   | 691/1000 [1:44:41<46:49,  9.09s/it][Succeeded / Failed / Skipped / Total] 483 / 185 / 23 / 691:  69%|██████▉   | 692/1000 [1:44:45<46:37,  9.08s/it]Makes a DELETE request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[digitalease]] ( final String [[segment]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[segment]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 684 ---------------------------------------------
Start a OPTIONS request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[access]] ( final String [[country]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[country]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 685 ---------------------------------------------
Set the request path . --> Perform journey journey --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[path]] ( String [[path]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[journey]] ( String [[cloth]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 686 ---------------------------------------------
Set the replacement cookies . --> Set Cookie header --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[REPLACEME0]] ( final Cookie ... [[REPLACEME0]] ) { if ( [[REPLACEME0]] . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie cookie : [[REPLACEME0]] ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { cookieString . append ( "; " ) ; } first = "False" != "False" ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest [[dlmyther]] ( final Cookie ... [[dlmyther]] ) { if ( [[dlmyther]] . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie cookie : [[dlmyther]] ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { cookieString . append ( "; " ) ; } first = "False" != "False" ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 687 ---------------------------------------------
Set the query parameters . --> Add query to HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > [[entry]] : queryMap . entrySet ( ) ) { query . add ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > [[article]] : queryMap . entrySet ( ) ) { query . add ( [[article]] . getKey ( ) , [[article]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 688 ---------------------------------------------
Gets the query string . --> Build webdress request --> Socre: 1.0

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[webdiress]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 689 ---------------------------------------------
Set the query string . --> Specifies the search CORS --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[queryString]] ( final String queryString , final boolean decode ) { this . query = HttpUtil . parseQuery ( [[queryString]] , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest [[searchcors]] ( final String queryString , final boolean decode ) { this . query = HttpUtil . parseQuery ( [[searchcors]] , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 690 ---------------------------------------------
Returns the host url . --> This method is used to create the Ausrtp header --> Socre: 1.0

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[ausrtk]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 691 ---------------------------------------------
Set basic authentication . --> Convenience method for setting username and password --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[generalnorhrenniker]] ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 692 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 484 / 185 / 23 / 692:  69%|██████▉   | 692/1000 [1:44:45<46:37,  9.08s/it][Succeeded / Failed / Skipped / Total] 484 / 185 / 23 / 692:  69%|██████▉   | 693/1000 [1:44:48<46:25,  9.07s/it][Succeeded / Failed / Skipped / Total] 485 / 185 / 23 / 693:  69%|██████▉   | 693/1000 [1:44:48<46:25,  9.07s/it][Succeeded / Failed / Skipped / Total] 485 / 185 / 23 / 693:  69%|██████▉   | 694/1000 [1:44:53<46:14,  9.07s/it][Succeeded / Failed / Skipped / Total] 485 / 186 / 23 / 694:  69%|██████▉   | 694/1000 [1:44:53<46:14,  9.07s/it][Succeeded / Failed / Skipped / Total] 485 / 186 / 23 / 694:  70%|██████▉   | 695/1000 [1:45:14<46:11,  9.09s/it][Succeeded / Failed / Skipped / Total] 486 / 186 / 23 / 695:  70%|██████▉   | 695/1000 [1:45:14<46:11,  9.09s/it][Succeeded / Failed / Skipped / Total] 486 / 186 / 23 / 695:  70%|██████▉   | 696/1000 [1:45:22<46:01,  9.08s/it][Succeeded / Failed / Skipped / Total] 487 / 186 / 23 / 696:  70%|██████▉   | 696/1000 [1:45:22<46:01,  9.08s/it][Succeeded / Failed / Skipped / Total] 487 / 186 / 23 / 696:  70%|██████▉   | 697/1000 [1:45:23<45:48,  9.07s/it][Succeeded / Failed / Skipped / Total] 488 / 186 / 23 / 697:  70%|██████▉   | 697/1000 [1:45:23<45:48,  9.07s/it][Succeeded / Failed / Skipped / Total] 488 / 186 / 23 / 697:  70%|██████▉   | 698/1000 [1:45:33<45:40,  9.07s/it][Succeeded / Failed / Skipped / Total] 489 / 186 / 23 / 698:  70%|██████▉   | 698/1000 [1:45:33<45:40,  9.07s/it][Succeeded / Failed / Skipped / Total] 489 / 186 / 23 / 698:  70%|██████▉   | 699/1000 [1:45:34<45:27,  9.06s/it][Succeeded / Failed / Skipped / Total] 490 / 186 / 23 / 699:  70%|██████▉   | 699/1000 [1:45:34<45:27,  9.06s/it][Succeeded / Failed / Skipped / Total] 490 / 186 / 23 / 699:  70%|███████   | 700/1000 [1:45:41<45:17,  9.06s/it][Succeeded / Failed / Skipped / Total] 491 / 186 / 23 / 700:  70%|███████   | 700/1000 [1:45:41<45:17,  9.06s/it][Succeeded / Failed / Skipped / Total] 491 / 186 / 23 / 700:  70%|███████   | 701/1000 [1:45:42<45:05,  9.05s/it]Sets the host header . --> Overwrites the HTTP request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[ajendosse]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 693 ---------------------------------------------
Write buffer . --> This method is overridden by subclasses to allow subclasses to override --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Buffer [[buffer]] ( final boolean fullRequest ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer [[container]] ( final boolean fullRequest ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 694 ---------------------------------------------
Send and receive response . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[R]] > [[R]] sendAndReceive ( final Function < HttpResponse , [[R]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < [[category]] > [[category]] sendAndReceive ( final Function < HttpResponse , [[category]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 695 ---------------------------------------------
Collect all action interceptors . --> generate pass - gracefully --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[gatheredpassclassointetcusifions]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 696 ---------------------------------------------
Add query parameter . --> Add a database parameter --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[query]] ( final String [[name1]] , final Object [[value1]] , final Object ... parameters ) { [[query]] ( [[name1]] , [[value1]] == null ? null : [[value1]] . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String [[name]] = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; [[query]] . add ( [[name]] , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest [[database]] ( final String [[descriptionplate]] , final Object [[listpe]] , final Object ... parameters ) { [[database]] ( [[descriptionplate]] , [[listpe]] == null ? null : [[listpe]] . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String [[top]] = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; [[database]] . add ( [[top]] , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 697 ---------------------------------------------
Remove ranges from start and end . --> adds amal polygon --> Socre: 1.0

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler firstHandler , final Label [[start]] , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[removeRange]] ( firstHandler . nextHandler , [[start]] , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = [[start]] . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[addmalε]] ( final Handler firstHandler , final Label [[field]] , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[addmalε]] ( firstHandler . nextHandler , [[field]] , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = [[field]] . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 698 ---------------------------------------------
Collects the action filters . --> Add filter to action order --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > filterValues = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( filterValues ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[designocrewkithingsti]] ( ) { final Collection < ? extends ActionFilter > filterValues = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( filterValues ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 699 ---------------------------------------------
Returns the length of the exception table . --> don t do anything? --> Socre: 1.0

[[[[Adv]]]]: static int [[getExceptionTableLength]] ( final Handler [[firstHandler]] ) { int length = 0 ; Handler handler = [[firstHandler]] ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int [[behastraalgardvoid]] ( final Handler [[byeslar]] ) { int length = 0 ; Handler handler = [[byeslar]] ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 700 ---------------------------------------------
Collect the action results . --> Performs a preplover oplover --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[preploveroesholtson]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 701 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 492 / 186 / 23 / 701:  70%|███████   | 701/1000 [1:45:42<45:05,  9.05s/it][Succeeded / Failed / Skipped / Total] 492 / 186 / 23 / 701:  70%|███████   | 702/1000 [1:45:52<44:56,  9.05s/it][Succeeded / Failed / Skipped / Total] 493 / 186 / 23 / 702:  70%|███████   | 702/1000 [1:45:52<44:56,  9.05s/it][Succeeded / Failed / Skipped / Total] 493 / 186 / 23 / 702:  70%|███████   | 703/1000 [1:45:58<44:46,  9.04s/it][Succeeded / Failed / Skipped / Total] 494 / 186 / 23 / 703:  70%|███████   | 703/1000 [1:45:58<44:46,  9.04s/it][Succeeded / Failed / Skipped / Total] 494 / 186 / 23 / 703:  70%|███████   | 704/1000 [1:46:01<44:34,  9.04s/it][Succeeded / Failed / Skipped / Total] 494 / 187 / 23 / 704:  70%|███████   | 704/1000 [1:46:01<44:34,  9.04s/it][Succeeded / Failed / Skipped / Total] 494 / 187 / 23 / 704:  70%|███████   | 705/1000 [1:46:06<44:24,  9.03s/it][Succeeded / Failed / Skipped / Total] 494 / 188 / 23 / 705:  70%|███████   | 705/1000 [1:46:06<44:24,  9.03s/it][Succeeded / Failed / Skipped / Total] 494 / 188 / 23 / 705:  71%|███████   | 706/1000 [1:46:09<44:12,  9.02s/it][Succeeded / Failed / Skipped / Total] 495 / 188 / 23 / 706:  71%|███████   | 706/1000 [1:46:09<44:12,  9.02s/it][Succeeded / Failed / Skipped / Total] 495 / 188 / 23 / 706:  71%|███████   | 707/1000 [1:46:15<44:02,  9.02s/it][Succeeded / Failed / Skipped / Total] 496 / 188 / 23 / 707:  71%|███████   | 707/1000 [1:46:15<44:02,  9.02s/it][Succeeded / Failed / Skipped / Total] 496 / 188 / 23 / 707:  71%|███████   | 708/1000 [1:46:25<43:53,  9.02s/it][Succeeded / Failed / Skipped / Total] 497 / 188 / 23 / 708:  71%|███████   | 708/1000 [1:46:25<43:53,  9.02s/it][Succeeded / Failed / Skipped / Total] 497 / 188 / 23 / 708:  71%|███████   | 709/1000 [1:46:44<43:48,  9.03s/it][Succeeded / Failed / Skipped / Total] 498 / 188 / 23 / 709:  71%|███████   | 709/1000 [1:46:44<43:48,  9.03s/it][Succeeded / Failed / Skipped / Total] 498 / 188 / 23 / 709:  71%|███████   | 710/1000 [1:46:58<43:41,  9.04s/it][Succeeded / Failed / Skipped / Total] 499 / 188 / 23 / 710:  71%|███████   | 710/1000 [1:46:58<43:41,  9.04s/it][Succeeded / Failed / Skipped / Total] 499 / 188 / 23 / 710:  71%|███████   | 711/1000 [1:47:08<43:33,  9.04s/it]Collects the list of action runtimes . --> This method should only be invoked once --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[addpassricruneaed]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 702 ---------------------------------------------
Sets a simple property . --> Rstup updater --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[rstumuptopcartz]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 703 ---------------------------------------------
Extract the reference from a property name --> also used in tests --> Socre: 1.0

[[[[Adv]]]]: @ Override public String extractThisReference ( final String [[propertyName]] ) { int ndx = StringUtil . indexOfChars ( [[propertyName]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[propertyName]] ; } return [[propertyName]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String extractThisReference ( final String [[estatebase]] ) { int ndx = StringUtil . indexOfChars ( [[estatebase]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[estatebase]] ; } return [[estatebase]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 704 ---------------------------------------------
Returns a PrintWriter . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[datalar]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 705 ---------------------------------------------
Gets the property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty [[beanProperty]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } else { try { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[collection]] > [[collection]] getProperty ( final Object bean , final String name ) { BeanProperty [[cornprepalten]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[cornprepalten]] ) ; return ( [[collection]] ) getIndexProperty ( [[cornprepalten]] ) ; } else { try { resolveNestedProperties ( [[cornprepalten]] ) ; return ( [[collection]] ) getIndexProperty ( [[cornprepalten]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 706 ---------------------------------------------
Sets an object reference . --> delegate to the box --> Socre: 1.0

[[[[Adv]]]]: public void [[setObjectReference]] ( final String name , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , object ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[boxdeimmediateupve]] ( final String name , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , object ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 707 ---------------------------------------------
Lookup object reference . --> Get windowabline --> Socre: 1.0

[[[[Adv]]]]: public Object [[lookupObject]] ( final String ref ) { Object value = getObjectReference ( ref ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[pickwindowabline]] ( final String ref ) { Object value = getObjectReference ( ref ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 708 ---------------------------------------------
Gets object reference . --> Determines if the requested date is needed or not --> Socre: 1.0

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String [[name]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[name]] ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[wantacactivedeversion]] ( final String [[date]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[date]] ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 709 ---------------------------------------------
Get the entity descriptor for a table reference . --> Lookup and triinsion --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[getTableDescriptor]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[tableRef]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor [[andtriinsclion]] ( final String [[chartrenk]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[chartrenk]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 710 ---------------------------------------------
Get table alias --> Get displaydev map --> Socre: 1.0

[[[[Adv]]]]: public String [[getTableAlias]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[tableRef]] ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[drawdevalap]] ( final String [[cubetefi]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[cubetefi]] ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 711 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 500 / 188 / 23 / 711:  71%|███████   | 711/1000 [1:47:08<43:33,  9.04s/it][Succeeded / Failed / Skipped / Total] 500 / 188 / 23 / 711:  71%|███████   | 712/1000 [1:47:11<43:21,  9.03s/it][Succeeded / Failed / Skipped / Total] 501 / 188 / 23 / 712:  71%|███████   | 712/1000 [1:47:11<43:21,  9.03s/it][Succeeded / Failed / Skipped / Total] 501 / 188 / 23 / 712:  71%|███████▏  | 713/1000 [1:47:32<43:17,  9.05s/it][Succeeded / Failed / Skipped / Total] 501 / 189 / 23 / 713:  71%|███████▏  | 713/1000 [1:47:32<43:17,  9.05s/it][Succeeded / Failed / Skipped / Total] 501 / 189 / 23 / 713:  71%|███████▏  | 714/1000 [1:47:34<43:05,  9.04s/it][Succeeded / Failed / Skipped / Total] 502 / 189 / 23 / 714:  71%|███████▏  | 714/1000 [1:47:34<43:05,  9.04s/it][Succeeded / Failed / Skipped / Total] 502 / 189 / 23 / 714:  72%|███████▏  | 715/1000 [1:47:43<42:56,  9.04s/it][Succeeded / Failed / Skipped / Total] 503 / 189 / 23 / 715:  72%|███████▏  | 715/1000 [1:47:43<42:56,  9.04s/it][Succeeded / Failed / Skipped / Total] 503 / 189 / 23 / 715:  72%|███████▏  | 716/1000 [1:47:47<42:45,  9.03s/it][Succeeded / Failed / Skipped / Total] 504 / 189 / 23 / 716:  72%|███████▏  | 716/1000 [1:47:47<42:45,  9.03s/it][Succeeded / Failed / Skipped / Total] 504 / 189 / 23 / 716:  72%|███████▏  | 717/1000 [1:47:55<42:35,  9.03s/it]Find the table descriptor by column reference . --> Readdascriptctor for gdascript --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String [[columnRef]] ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[ded]] = entry . getValue ( ) . desc ; if ( [[ded]] . findByPropertyName ( [[columnRef]] ) != null ) { return [[ded]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[readterdascriptctorforgrpcreb]] ( final String [[citationtherf]] ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[dateum]] = entry . getValue ( ) . desc ; if ( [[dateum]] . findByPropertyName ( [[citationtherf]] ) != null ) { return [[dateum]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 712 ---------------------------------------------
Register a table reference . --> Adds a bitcrop view to the database --> Socre: 1.0

[[[[Adv]]]]: public void [[registerTableReference]] ( final String tableReference , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[t]] = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( tableReference , [[t]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[bitcropveflow]] ( final String tableReference , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[collection]] = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( tableReference , [[collection]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 713 ---------------------------------------------
Registers a hint . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[doswerta]] ( final String [[notice]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[notice]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 714 ---------------------------------------------
Lookup a table reference by its name . --> else return null --> Socre: 1.0

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String tableRef ) { DbEntityDescriptor [[ded]] = getTableDescriptor ( tableRef ) ; if ( [[ded]] == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + tableRef ) ; } return [[ded]] ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[beeadagecondf]] ( final String tableRef ) { DbEntityDescriptor [[ledge]] = getTableDescriptor ( tableRef ) ; if ( [[ledge]] == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + tableRef ) ; } return [[ledge]] ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 715 ---------------------------------------------
Serializes the given value onto the stack . --> This method should only be called once --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean [[serialize]] ( final JsonContext [[jsonContext]] , final T value ) { if ( [[jsonContext]] . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean [[priorize]] ( final JsonContext [[jerscoty]] , final T value ) { if ( [[jerscoty]] . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 716 ---------------------------------------------
Inject attributes . --> Perform HiInjectionartaut --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectAttributes]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > [[attributeNames]] = servletRequest . getAttributeNames ( ) ; while ( [[attributeNames]] . hasMoreElements ( ) ) { final String attrName = [[attributeNames]] . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void [[hiinjectionartriautitures]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > [[awardanad]] = servletRequest . getAttributeNames ( ) ; while ( [[awardanad]] . hasMoreElements ( ) ) { final String attrName = [[awardanad]] . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 717 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 505 / 189 / 23 / 717:  72%|███████▏  | 717/1000 [1:47:55<42:35,  9.03s/it][Succeeded / Failed / Skipped / Total] 505 / 189 / 23 / 717:  72%|███████▏  | 718/1000 [1:48:38<42:40,  9.08s/it][Succeeded / Failed / Skipped / Total] 506 / 189 / 23 / 718:  72%|███████▏  | 718/1000 [1:48:38<42:40,  9.08s/it][Succeeded / Failed / Skipped / Total] 506 / 189 / 23 / 718:  72%|███████▏  | 719/1000 [1:48:41<42:28,  9.07s/it][Succeeded / Failed / Skipped / Total] 507 / 189 / 23 / 719:  72%|███████▏  | 719/1000 [1:48:41<42:28,  9.07s/it][Succeeded / Failed / Skipped / Total] 507 / 189 / 23 / 719:  72%|███████▏  | 720/1000 [1:48:44<42:17,  9.06s/it]Inject request parameters into the target targets . --> Extracts all data from the Servlet --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[exvillepargrapherс]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 718 ---------------------------------------------
Convert a property name to a column name . --> Reconstructs a list term from a listterm --> Socre: 1.0

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String [[propertyName]] ) { StringBuilder [[tableName]] = new StringBuilder ( [[propertyName]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[propertyName]] , separatorChar ) ; [[tableName]] . append ( convertedTableName ) ; } else { [[tableName]] . append ( [[propertyName]] ) ; } if ( ! changeCase ) { return [[tableName]] . toString ( ) ; } return uppercase ? toUppercase ( [[tableName]] ) . toString ( ) : toLowercase ( [[tableName]] ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[rebuildtoppentellplateteconimnorine]] ( final String [[listterm]] ) { StringBuilder [[articlena]] = new StringBuilder ( [[listterm]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[listterm]] , separatorChar ) ; [[articlena]] . append ( convertedTableName ) ; } else { [[articlena]] . append ( [[listterm]] ) ; } if ( ! changeCase ) { return [[articlena]] . toString ( ) ; } return uppercase ? toUppercase ( [[articlena]] ) . toString ( ) : toLowercase ( [[articlena]] ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 719 ---------------------------------------------
Convert column name to property name . --> Parse a page of pagescope --> Socre: 1.0

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String [[columnName]] ) { StringBuilder propertyName = new StringBuilder ( [[columnName]] . length ( ) ) ; int len = [[columnName]] . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < len ; i ++ ) { char c = [[columnName]] . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "[[True]]" == "[[True]]" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return [[columnName]] ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[chilymniptntudirayplay]] ( final String [[pagescope]] ) { StringBuilder propertyName = new StringBuilder ( [[pagescope]] . length ( ) ) ; int len = [[pagescope]] . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < len ; i ++ ) { char c = [[pagescope]] . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "[[honest]]" == "[[honest]]" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return [[pagescope]] ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 720 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 508 / 189 / 23 / 720:  72%|███████▏  | 720/1000 [1:48:45<42:17,  9.06s/it][Succeeded / Failed / Skipped / Total] 508 / 189 / 23 / 720:  72%|███████▏  | 721/1000 [1:48:45<42:05,  9.05s/it][Succeeded / Failed / Skipped / Total] 509 / 189 / 23 / 721:  72%|███████▏  | 721/1000 [1:48:45<42:05,  9.05s/it][Succeeded / Failed / Skipped / Total] 509 / 189 / 23 / 721:  72%|███████▏  | 722/1000 [1:48:56<41:56,  9.05s/it][Succeeded / Failed / Skipped / Total] 509 / 190 / 23 / 722:  72%|███████▏  | 722/1000 [1:48:56<41:56,  9.05s/it][Succeeded / Failed / Skipped / Total] 510 / 190 / 23 / 723:  72%|███████▏  | 723/1000 [1:48:56<41:44,  9.04s/it][Succeeded / Failed / Skipped / Total] 510 / 190 / 23 / 723:  72%|███████▏  | 724/1000 [1:49:03<41:34,  9.04s/it][Succeeded / Failed / Skipped / Total] 510 / 191 / 23 / 724:  72%|███████▏  | 724/1000 [1:49:03<41:34,  9.04s/it][Succeeded / Failed / Skipped / Total] 510 / 192 / 23 / 725:  72%|███████▎  | 725/1000 [1:49:18<41:27,  9.05s/it][Succeeded / Failed / Skipped / Total] 510 / 192 / 23 / 725:  73%|███████▎  | 726/1000 [1:49:22<41:16,  9.04s/it][Succeeded / Failed / Skipped / Total] 511 / 192 / 23 / 726:  73%|███████▎  | 726/1000 [1:49:22<41:16,  9.04s/it][Succeeded / Failed / Skipped / Total] 511 / 192 / 23 / 726:  73%|███████▎  | 727/1000 [1:49:32<41:08,  9.04s/it]Inject uploaded files . --> Methode permettant difetches for sip --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper [[multipartRequest]] = ( MultipartRequestWrapper ) servletRequest ; if ( ! [[multipartRequest]] . isMultipart ( ) ) { return ; } final Enumeration < String > [[paramNames]] = [[multipartRequest]] . getFileParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { final String paramName = [[paramNames]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = [[multipartRequest]] . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[kiicerpwordskides]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper [[parapetureports]] = ( MultipartRequestWrapper ) servletRequest ; if ( ! [[parapetureports]] . isMultipart ( ) ) { return ; } final Enumeration < String > [[apuguideships]] = [[parapetureports]] . getFileParameterNames ( ) ; while ( [[apuguideships]] . hasMoreElements ( ) ) { final String paramName = [[apuguideships]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = [[parapetureports]] . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 721 ---------------------------------------------
Apply to column name . --> Draw a DOCTonine --> Socre: 1.0

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String [[columnName]] ) { String [[propertyName]] = convertColumnNameToPropertyName ( [[columnName]] ) ; return convertPropertyNameToColumnName ( [[propertyName]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[drawdoiticnumnemine]] ( final String [[matrixrank]] ) { String [[addresst]] = convertColumnNameToPropertyName ( [[matrixrank]] ) ; return convertPropertyNameToColumnName ( [[addresst]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 722 ---------------------------------------------
Prepare get value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[ε]] > [[ε]] prepareGetValue ( final T t , final Class < [[ε]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[ε]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 723 ---------------------------------------------
Store object . --> Carg validation --> Socre: 1.0

[[[[Adv]]]]: public void [[storeValue]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void [[cargotrf]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 724 ---------------------------------------------
Creates a new instance of the specified class . --> [[[FAILED]]]

[[[[Adv]]]]: protected < R [[extends]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R [[extensions]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 725 ---------------------------------------------
Get all wrappers . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[bitlan]] ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 726 ---------------------------------------------
Gets the path part of the file . --> Turn a filename into a string --> Socre: 1.0

[[[[Adv]]]]: private static String [[doGetPath]] ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int endIndex = index + separatorAdd ; if ( prefix >= filename . length ( ) || index < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[dashingnet]] ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int endIndex = index + separatorAdd ; if ( prefix >= filename . length ( ) || index < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 727 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 512 / 192 / 23 / 727:  73%|███████▎  | 727/1000 [1:49:32<41:08,  9.04s/it][Succeeded / Failed / Skipped / Total] 512 / 192 / 23 / 727:  73%|███████▎  | 728/1000 [1:49:32<40:55,  9.03s/it][Succeeded / Failed / Skipped / Total] 512 / 192 / 24 / 728:  73%|███████▎  | 728/1000 [1:49:32<40:55,  9.03s/it][Succeeded / Failed / Skipped / Total] 512 / 192 / 24 / 728:  73%|███████▎  | 729/1000 [1:49:41<40:46,  9.03s/it][Succeeded / Failed / Skipped / Total] 512 / 193 / 24 / 729:  73%|███████▎  | 729/1000 [1:49:41<40:46,  9.03s/it][Succeeded / Failed / Skipped / Total] 512 / 193 / 24 / 729:  73%|███████▎  | 730/1000 [1:49:49<40:37,  9.03s/it][Succeeded / Failed / Skipped / Total] 512 / 194 / 24 / 730:  73%|███████▎  | 730/1000 [1:49:49<40:37,  9.03s/it][Succeeded / Failed / Skipped / Total] 512 / 194 / 24 / 730:  73%|███████▎  | 731/1000 [1:49:56<40:27,  9.02s/it][Succeeded / Failed / Skipped / Total] 513 / 194 / 24 / 731:  73%|███████▎  | 731/1000 [1:49:56<40:27,  9.02s/it][Succeeded / Failed / Skipped / Total] 513 / 194 / 24 / 731:  73%|███████▎  | 732/1000 [1:50:08<40:19,  9.03s/it][Succeeded / Failed / Skipped / Total] 514 / 194 / 24 / 732:  73%|███████▎  | 732/1000 [1:50:08<40:19,  9.03s/it][Succeeded / Failed / Skipped / Total] 514 / 194 / 24 / 732:  73%|███████▎  | 733/1000 [1:50:13<40:09,  9.02s/it][Succeeded / Failed / Skipped / Total] 515 / 194 / 24 / 733:  73%|███████▎  | 733/1000 [1:50:13<40:09,  9.02s/it][Succeeded / Failed / Skipped / Total] 515 / 194 / 24 / 733:  73%|███████▎  | 734/1000 [1:50:16<39:57,  9.01s/it]Converts path separators to system path . --> Taken from gallery --> Socre: 1.0

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[agasterytuytun]] ( final String [[gallery]] ) { if ( [[gallery]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[gallery]] ) ; } else { return separatorsToUnix ( [[gallery]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 728 ---------------------------------------------
Register a new component --> [[[SKIPPED]]]

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > madvocComponent ) { Objects . requireNonNull ( madvocComponent ) ; madvocComponents . add ( ClassConsumer . of ( madvocComponent ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 729 ---------------------------------------------
Sets an action config for this webapp . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A [[python]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 730 ---------------------------------------------
Resolves a wrapper . --> [[[FAILED]]]

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > wrapperClass ) { String [[wrapperClassName]] = wrapperClass . getName ( ) ; T [[wrapper]] = lookup ( [[wrapperClassName]] ) ; if ( [[wrapper]] == null ) { [[wrapper]] = createWrapper ( wrapperClass ) ; initializeWrapper ( [[wrapper]] ) ; wrappers . put ( [[wrapperClassName]] , [[wrapper]] ) ; } return [[wrapper]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > wrapperClass ) { String [[mountsidetellrum]] = wrapperClass . getName ( ) ; T [[clippr]] = lookup ( [[mountsidetellrum]] ) ; if ( [[clippr]] == null ) { [[clippr]] = createWrapper ( wrapperClass ) ; initializeWrapper ( [[clippr]] ) ; wrappers . put ( [[mountsidetellrum]] , [[clippr]] ) ; } return [[clippr]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 731 ---------------------------------------------
Starts the canvas . --> Called by the main thread --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[startup]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 732 ---------------------------------------------
Sets defaults . --> Register clientconvenience methods --> Socre: 1.0

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[clientconoldity]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 733 ---------------------------------------------
Relative path . --> get datagraph --> Socre: 1.0

[[[[Adv]]]]: public static String [[relativePath]] ( final String [[targetPath]] , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( [[targetPath]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[datagraph]] ( final String [[sourcelane]] , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( [[sourcelane]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 734 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 516 / 194 / 24 / 734:  73%|███████▎  | 734/1000 [1:50:16<39:57,  9.01s/it][Succeeded / Failed / Skipped / Total] 516 / 194 / 24 / 734:  74%|███████▎  | 735/1000 [1:50:26<39:49,  9.02s/it][Succeeded / Failed / Skipped / Total] 517 / 194 / 24 / 735:  74%|███████▎  | 735/1000 [1:50:26<39:49,  9.02s/it][Succeeded / Failed / Skipped / Total] 517 / 194 / 24 / 735:  74%|███████▎  | 736/1000 [1:50:38<39:41,  9.02s/it][Succeeded / Failed / Skipped / Total] 518 / 194 / 24 / 736:  74%|███████▎  | 736/1000 [1:50:38<39:41,  9.02s/it][Succeeded / Failed / Skipped / Total] 518 / 194 / 24 / 736:  74%|███████▎  | 737/1000 [1:50:43<39:30,  9.01s/it][Succeeded / Failed / Skipped / Total] 519 / 194 / 24 / 737:  74%|███████▎  | 737/1000 [1:50:43<39:30,  9.01s/it][Succeeded / Failed / Skipped / Total] 519 / 194 / 24 / 737:  74%|███████▍  | 738/1000 [1:50:44<39:18,  9.00s/it][Succeeded / Failed / Skipped / Total] 520 / 194 / 24 / 738:  74%|███████▍  | 738/1000 [1:50:44<39:18,  9.00s/it][Succeeded / Failed / Skipped / Total] 520 / 194 / 24 / 738:  74%|███████▍  | 739/1000 [1:50:55<39:10,  9.01s/it]Register madvoc components . --> Register the madvocatype --> Socre: 1.0

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[_madavicmcplatety]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 735 ---------------------------------------------
Excludes the specified jars . --> Excludes JAR files in the class scanner --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... [[excludedJars]] ) { for ( final String excludedJar : [[excludedJars]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... [[hetgeesh]] ) { for ( final String excludedJar : [[hetgeesh]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 736 ---------------------------------------------
Splits the given filename into parts . --> Return the intro --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[split]] ( final String filename ) { String prefix = getPrefix ( filename ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int [[lastSeparatorIndex]] = indexOfLastSeparator ( filename ) ; int [[lastExtensionIndex]] = indexOfExtension ( filename ) ; String path ; String [[baseName]] ; String [[extension]] ; if ( [[lastSeparatorIndex]] == - 1 ) { path = StringPool . EMPTY ; if ( [[lastExtensionIndex]] == - 1 ) { [[baseName]] = filename . substring ( prefix . length ( ) ) ; [[extension]] = StringPool . EMPTY ; } else { [[baseName]] = filename . substring ( prefix . length ( ) , [[lastExtensionIndex]] ) ; [[extension]] = filename . substring ( [[lastExtensionIndex]] + 1 ) ; } } else { path = filename . substring ( prefix . length ( ) , [[lastSeparatorIndex]] + 1 ) ; if ( [[lastExtensionIndex]] == - 1 ) { [[baseName]] = filename . substring ( prefix . length ( ) + path . length ( ) ) ; [[extension]] = StringPool . EMPTY ; } else { [[baseName]] = filename . substring ( prefix . length ( ) + path . length ( ) , [[lastExtensionIndex]] ) ; [[extension]] = filename . substring ( [[lastExtensionIndex]] + 1 ) ; } } return new String [ ] { prefix , path , [[baseName]] , [[extension]] } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] [[intro]] ( final String filename ) { String prefix = getPrefix ( filename ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int [[djexputriduc]] = indexOfLastSeparator ( filename ) ; int [[lastilspassinius]] = indexOfExtension ( filename ) ; String path ; String [[stringma]] ; String [[format]] ; if ( [[djexputriduc]] == - 1 ) { path = StringPool . EMPTY ; if ( [[lastilspassinius]] == - 1 ) { [[stringma]] = filename . substring ( prefix . length ( ) ) ; [[format]] = StringPool . EMPTY ; } else { [[stringma]] = filename . substring ( prefix . length ( ) , [[lastilspassinius]] ) ; [[format]] = filename . substring ( [[lastilspassinius]] + 1 ) ; } } else { path = filename . substring ( prefix . length ( ) , [[djexputriduc]] + 1 ) ; if ( [[lastilspassinius]] == - 1 ) { [[stringma]] = filename . substring ( prefix . length ( ) + path . length ( ) ) ; [[format]] = StringPool . EMPTY ; } else { [[stringma]] = filename . substring ( prefix . length ( ) + path . length ( ) , [[lastilspassinius]] ) ; [[format]] = filename . substring ( [[lastilspassinius]] + 1 ) ; } } return new String [ ] { prefix , path , [[stringma]] , [[format]] } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 737 ---------------------------------------------
Exclude entries . --> Exclude entries from the class scanner --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... excludedEntries ) { for ( final String [[excludedEntry]] : excludedEntries ) { rulesEntries . exclude ( [[excludedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... excludedEntries ) { for ( final String [[disasteregrit]] : excludedEntries ) { rulesEntries . exclude ( [[disasteregrit]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 738 ---------------------------------------------
Includes the specified jars . --> Include all the JAR files --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner includeJars ( final String ... [[includedJars]] ) { for ( final String [[includedJar]] : [[includedJars]] ) { rulesJars . include ( [[includedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner includeJars ( final String ... [[excludejaguarst]] ) { for ( final String [[theج]] : [[excludejaguarst]] ) { rulesJars . include ( [[theج]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 739 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 521 / 194 / 24 / 739:  74%|███████▍  | 739/1000 [1:50:55<39:10,  9.01s/it][Succeeded / Failed / Skipped / Total] 521 / 194 / 24 / 739:  74%|███████▍  | 740/1000 [1:51:06<39:02,  9.01s/it][Succeeded / Failed / Skipped / Total] 522 / 194 / 24 / 740:  74%|███████▍  | 740/1000 [1:51:06<39:02,  9.01s/it][Succeeded / Failed / Skipped / Total] 522 / 194 / 24 / 740:  74%|███████▍  | 741/1000 [1:51:29<38:58,  9.03s/it][Succeeded / Failed / Skipped / Total] 522 / 195 / 24 / 741:  74%|███████▍  | 741/1000 [1:51:29<38:58,  9.03s/it][Succeeded / Failed / Skipped / Total] 522 / 195 / 24 / 741:  74%|███████▍  | 742/1000 [1:51:32<38:47,  9.02s/it][Succeeded / Failed / Skipped / Total] 522 / 196 / 24 / 742:  74%|███████▍  | 742/1000 [1:51:32<38:47,  9.02s/it][Succeeded / Failed / Skipped / Total] 522 / 196 / 24 / 742:  74%|███████▍  | 743/1000 [1:51:39<38:37,  9.02s/it][Succeeded / Failed / Skipped / Total] 522 / 197 / 24 / 743:  74%|███████▍  | 743/1000 [1:51:39<38:37,  9.02s/it][Succeeded / Failed / Skipped / Total] 522 / 197 / 24 / 743:  74%|███████▍  | 744/1000 [1:51:44<38:27,  9.01s/it][Succeeded / Failed / Skipped / Total] 523 / 197 / 24 / 744:  74%|███████▍  | 744/1000 [1:51:44<38:27,  9.01s/it][Succeeded / Failed / Skipped / Total] 523 / 197 / 24 / 744:  74%|███████▍  | 745/1000 [1:51:47<38:15,  9.00s/it][Succeeded / Failed / Skipped / Total] 524 / 197 / 24 / 745:  74%|███████▍  | 745/1000 [1:51:47<38:15,  9.00s/it][Succeeded / Failed / Skipped / Total] 524 / 197 / 24 / 745:  75%|███████▍  | 746/1000 [1:51:58<38:07,  9.01s/it][Succeeded / Failed / Skipped / Total] 525 / 197 / 24 / 746:  75%|███████▍  | 746/1000 [1:51:58<38:07,  9.01s/it][Succeeded / Failed / Skipped / Total] 525 / 197 / 24 / 746:  75%|███████▍  | 747/1000 [1:52:20<38:02,  9.02s/it][Succeeded / Failed / Skipped / Total] 526 / 197 / 24 / 747:  75%|███████▍  | 747/1000 [1:52:20<38:02,  9.02s/it][Succeeded / Failed / Skipped / Total] 526 / 197 / 24 / 747:  75%|███████▍  | 748/1000 [1:52:25<37:52,  9.02s/it]Compute the signature of a type . --> AsrsFsharedWorker --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class type ) { final String name = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[asrsulfretworkspaceer]] ( final Class type ) { final String name = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 740 ---------------------------------------------
Includes specified entries . --> Custom class scanner --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[includeEntries]] ( final String ... includedEntries ) { for ( final String [[includedEntry]] : includedEntries ) { rulesEntries . include ( [[includedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner [[classerception]] ( final String ... includedEntries ) { for ( final String [[includingistvector]] : includedEntries ) { rulesEntries . include ( [[includingistvector]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 741 ---------------------------------------------
Scan class files . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner scan ( final String ... [[paths]] ) { for ( final String path : [[paths]] ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner scan ( final String ... [[routes]] ) { for ( final String path : [[routes]] ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 742 ---------------------------------------------
Starts the crawler . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[path]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[path]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[top]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[gate]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[gate]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 743 ---------------------------------------------
Get or initialize scope type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[parameter]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 744 ---------------------------------------------
Scans the classpath for classes . --> Performs a profile on the given trunk --> Socre: 1.0

[[[[Adv]]]]: protected void [[scanClassPath]] ( final File [[root]] ) { String rootPath = [[root]] . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "[[True]]" == "[[True]]" ) . searchPath ( rootPath ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , "[[True]]" == "[[True]]" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void [[profilechildpiece]] ( final File [[trunk]] ) { String rootPath = [[trunk]] . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "[[known]]" == "[[known]]" ) . searchPath ( rootPath ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , "[[known]]" == "[[known]]" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 745 ---------------------------------------------
Creates a new JtxTransaction --> add gravatable --> Socre: 1.0

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode tm , final Object scope , final boolean active ) { return new DbJtxTransaction ( this , tm , scope , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[addirtmasshaupt]] ( final JtxTransactionMode tm , final Object scope , final boolean active ) { return new DbJtxTransaction ( this , tm , scope , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 746 ---------------------------------------------
Gets the scope of the specified type . --> else return null --> Socre: 1.0

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > [[madvocScopeType]] ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( [[madvocScopeType]] ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > [[abوcacoface]] ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( [[abوcacoface]] ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 747 ---------------------------------------------
Creates a new madvocScope with the specified type . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > [[scopeType]] , final Consumer < MadvocScope > [[madvocScopeConsumer]] ) { final MadvocScope scope = getOrInitScope ( [[scopeType]] ) ; [[madvocScopeConsumer]] . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > [[gaugen]] , final Consumer < MadvocScope > [[mitivayscteanchaiρ]] ) { final MadvocScope scope = getOrInitScope ( [[gaugen]] ) ; [[mitivayscteanchaiρ]] . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
[Succeeded / Failed / Skipped / Total] 527 / 197 / 24 / 748:  75%|███████▍  | 748/1000 [1:52:25<37:52,  9.02s/it][Succeeded / Failed / Skipped / Total] 527 / 197 / 24 / 748:  75%|███████▍  | 749/1000 [1:52:37<37:44,  9.02s/it][Succeeded / Failed / Skipped / Total] 528 / 197 / 24 / 749:  75%|███████▍  | 749/1000 [1:52:37<37:44,  9.02s/it][Succeeded / Failed / Skipped / Total] 528 / 197 / 24 / 749:  75%|███████▌  | 750/1000 [1:53:02<37:40,  9.04s/it][Succeeded / Failed / Skipped / Total] 529 / 197 / 24 / 750:  75%|███████▌  | 750/1000 [1:53:02<37:40,  9.04s/it][Succeeded / Failed / Skipped / Total] 529 / 197 / 24 / 750:  75%|███████▌  | 751/1000 [1:53:07<37:30,  9.04s/it][Succeeded / Failed / Skipped / Total] 530 / 197 / 24 / 751:  75%|███████▌  | 751/1000 [1:53:07<37:30,  9.04s/it][Succeeded / Failed / Skipped / Total] 530 / 197 / 24 / 751:  75%|███████▌  | 752/1000 [1:53:11<37:19,  9.03s/it]--------------------------------------------- Result 748 ---------------------------------------------
Decodes a byte array . --> Decode bytes to bytes --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] decode ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int [[sndx]] = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - [[sndx]] + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] [[dest]] = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ [[sndx]] ++ ] ] << 18 | INV [ arr [ [[sndx]] ++ ] ] << 12 | INV [ arr [ [[sndx]] ++ ] ] << 6 | INV [ arr [ [[sndx]] ++ ] ] ; [[dest]] [ d ++ ] = ( byte ) ( i >> 16 ) ; [[dest]] [ d ++ ] = ( byte ) ( i >> 8 ) ; [[dest]] [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { [[sndx]] += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; [[sndx]] <= endx - pad ; j ++ ) { i |= INV [ arr [ [[sndx]] ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { [[dest]] [ d ++ ] = ( byte ) ( i >> r ) ; } } return [[dest]] ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] decode ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int [[inth]] = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - [[inth]] + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] [[commandi]] = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ [[inth]] ++ ] ] << 18 | INV [ arr [ [[inth]] ++ ] ] << 12 | INV [ arr [ [[inth]] ++ ] ] << 6 | INV [ arr [ [[inth]] ++ ] ] ; [[commandi]] [ d ++ ] = ( byte ) ( i >> 16 ) ; [[commandi]] [ d ++ ] = ( byte ) ( i >> 8 ) ; [[commandi]] [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { [[inth]] += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; [[inth]] <= endx - pad ; j ++ ) { i |= INV [ arr [ [[inth]] ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { [[commandi]] [ d ++ ] = ( byte ) ( i >> r ) ; } } return [[commandi]] ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 749 ---------------------------------------------
Generates a new CSRF token . --> avoiding nrlink nrlinkne --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[prepareCsrfToken]] ( final HttpSession session , final int [[timeToLive]] ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , [[timeToLive]] ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[avoidnsrlinkne]] ( final HttpSession session , final int [[momentとdvet]] ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , [[momentとdvet]] ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 750 ---------------------------------------------
Checks the size of a token set . --> Make sure we are still valid --> Socre: 1.0

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[tokenSet]] ) { if ( [[tokenSet]] . size ( ) < maxTokensPerSession ) { return ; } long [[validUntilMin]] = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = [[tokenSet]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < [[validUntilMin]] ) { [[validUntilMin]] = token . validUntil ; tokenToRemove = token ; } } if ( ( tokenToRemove != null ) && ( [[tokenSet]] . size ( ) >= maxTokensPerSession ) ) { [[tokenSet]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[bands]] ) { if ( [[bands]] . size ( ) < maxTokensPerSession ) { return ; } long [[remmetriltur]] = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = [[bands]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < [[remmetriltur]] ) { [[remmetriltur]] = token . validUntil ; tokenToRemove = token ; } } if ( ( tokenToRemove != null ) && ( [[bands]] . size ( ) >= maxTokensPerSession ) ) { [[bands]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 751 ---------------------------------------------
Creates a copy of the given object . --> Copy from supplier --> Socre: 1.0

[[[[Adv]]]]: public static BeanCopy from ( final Object [[source]] ) { BeanCopy [[beanCopy]] = new BeanCopy ( [[source]] ) ; [[beanCopy]] . isSourceMap = [[source]] instanceof Map ; return [[beanCopy]] ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy from ( final Object [[supplier]] ) { BeanCopy [[anhopath]] = new BeanCopy ( [[supplier]] ) ; [[anhopath]] . isSourceMap = [[supplier]] instanceof Map ; return [[anhopath]] ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 752 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 531 / 197 / 24 / 752:  75%|███████▌  | 752/1000 [1:53:11<37:19,  9.03s/it][Succeeded / Failed / Skipped / Total] 531 / 197 / 24 / 752:  75%|███████▌  | 753/1000 [1:53:28<37:13,  9.04s/it][Succeeded / Failed / Skipped / Total] 531 / 198 / 24 / 753:  75%|███████▌  | 753/1000 [1:53:28<37:13,  9.04s/it][Succeeded / Failed / Skipped / Total] 531 / 198 / 24 / 753:  75%|███████▌  | 754/1000 [1:53:38<37:04,  9.04s/it][Succeeded / Failed / Skipped / Total] 532 / 198 / 24 / 754:  75%|███████▌  | 754/1000 [1:53:38<37:04,  9.04s/it][Succeeded / Failed / Skipped / Total] 532 / 198 / 24 / 754:  76%|███████▌  | 755/1000 [1:53:44<36:54,  9.04s/it][Succeeded / Failed / Skipped / Total] 533 / 198 / 24 / 755:  76%|███████▌  | 755/1000 [1:53:44<36:54,  9.04s/it][Succeeded / Failed / Skipped / Total] 533 / 198 / 24 / 755:  76%|███████▌  | 756/1000 [1:53:45<36:42,  9.03s/it][Succeeded / Failed / Skipped / Total] 533 / 199 / 24 / 756:  76%|███████▌  | 756/1000 [1:53:45<36:42,  9.03s/it][Succeeded / Failed / Skipped / Total] 533 / 199 / 24 / 756:  76%|███████▌  | 757/1000 [1:53:56<36:34,  9.03s/it]Scan jar file . --> reuse the balliellfll --> Socre: 1.0

[[[[Adv]]]]: protected void [[scanJarFile]] ( final File [[file]] ) { final ZipFile [[zipFile]] ; try { [[zipFile]] = new ZipFile ( [[file]] ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + [[file]] . getName ( ) , ioex ) ; } return ; } final Enumeration entries = [[zipFile]] . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[zipFile]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[zipFile]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( [[zipFile]] ) ; throw rex ; } } } ZipUtil . close ( [[zipFile]] ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void [[bariellfll]] ( final File [[cabinet]] ) { final ZipFile [[warmفling]] ; try { [[warmفling]] = new ZipFile ( [[cabinet]] ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + [[cabinet]] . getName ( ) , ioex ) ; } return ; } final Enumeration entries = [[warmفling]] . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[warmفling]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[warmفling]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( [[warmفling]] ) ; throw rex ; } } } ZipUtil . close ( [[warmفling]] ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 753 ---------------------------------------------
Make a deep copy of this bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void copy ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void copy ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 754 ---------------------------------------------
Initialize this entity reference . --> Initializes the entity reference --> Socre: 1.0

[[[[Adv]]]]: @ Override public void init ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String [[tableReference]] = this . tableReference ; if ( [[tableReference]] == null ) { [[tableReference]] = tableAlias ; } if ( [[tableReference]] == null ) { [[tableReference]] = entityName ; } if ( [[tableReference]] == null ) { [[tableReference]] = ded . getEntityName ( ) ; } templateData . registerTableReference ( [[tableReference]] , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void init ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String [[treeesiver]] = this . tableReference ; if ( [[treeesiver]] == null ) { [[treeesiver]] = tableAlias ; } if ( [[treeesiver]] == null ) { [[treeesiver]] = entityName ; } if ( [[treeesiver]] == null ) { [[treeesiver]] = ded . getEntityName ( ) ; } templateData . registerTableReference ( [[treeesiver]] , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 755 ---------------------------------------------
Visit a property . --> Overriding super class methods --> Socre: 1.0

[[[[Adv]]]]: @ Override protected boolean [[visitProperty]] ( String [[name]] , final Object value ) { if ( isTargetMap ) { [[name]] = LEFT_SQ_BRACKET + [[name]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[name]] , value ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean [[selectrottry]] ( String [[access]] , final Object value ) { if ( isTargetMap ) { [[access]] = LEFT_SQ_BRACKET + [[access]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[access]] , value ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 756 ---------------------------------------------
Returns the scope of the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S [[scope]] = ( S ) scopes . get ( scopeType ) ; if ( [[scope]] == null ) { try { [[scope]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[scope]] ) ; scopes . put ( scopeType , [[scope]] ) ; } return [[scope]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S [[canvas]] = ( S ) scopes . get ( scopeType ) ; if ( [[canvas]] == null ) { try { [[canvas]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[canvas]] ) ; scopes . put ( scopeType , [[canvas]] ) ; } return [[canvas]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 757 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 534 / 199 / 24 / 757:  76%|███████▌  | 757/1000 [1:53:56<36:34,  9.03s/it][Succeeded / Failed / Skipped / Total] 534 / 199 / 24 / 757:  76%|███████▌  | 758/1000 [1:54:05<36:25,  9.03s/it][Succeeded / Failed / Skipped / Total] 535 / 199 / 24 / 758:  76%|███████▌  | 758/1000 [1:54:05<36:25,  9.03s/it][Succeeded / Failed / Skipped / Total] 535 / 199 / 24 / 758:  76%|███████▌  | 759/1000 [1:54:09<36:14,  9.02s/it][Succeeded / Failed / Skipped / Total] 536 / 199 / 24 / 759:  76%|███████▌  | 759/1000 [1:54:09<36:14,  9.02s/it][Succeeded / Failed / Skipped / Total] 536 / 199 / 24 / 759:  76%|███████▌  | 760/1000 [1:54:56<36:17,  9.07s/it][Succeeded / Failed / Skipped / Total] 537 / 199 / 24 / 760:  76%|███████▌  | 760/1000 [1:54:56<36:17,  9.07s/it][Succeeded / Failed / Skipped / Total] 537 / 199 / 24 / 760:  76%|███████▌  | 761/1000 [1:54:58<36:06,  9.07s/it]Register a proite bean . --> Generate BeanDefinition --> Socre: 1.0

[[[[Adv]]]]: public < T > BeanDefinition < T > [[registerPetiteBean]] ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > [[beaminaifcin]] ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 758 ---------------------------------------------
Remove bean from bean --> Generate blocann --> Socre: 1.0

[[[[Adv]]]]: public void [[removeBean]] ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[blockeann]] ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 759 ---------------------------------------------
Checks if the given value matches the given value . --> Drops a cookie from the session --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[checkCsrfToken]] ( final HttpSession session , final String [[tokenValue]] ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( [[tokenValue]] == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( [[tokenValue]] == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[tokenValue]] ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[dropnskawran]] ( final HttpSession session , final String [[unmalun]] ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( [[unmalun]] == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( [[unmalun]] == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[unmalun]] ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 760 ---------------------------------------------
Return an array of beans names for the given type . --> the list of beans --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class type ) { String [ ] beanNames = beanCollections . get ( type ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > [[list]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , type ) ) { String [[beanName]] = entry . getKey ( ) ; [[list]] . add ( [[beanName]] ) ; } } if ( [[list]] . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = [[list]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[formepadwasfortoop]] ( final Class type ) { String [ ] beanNames = beanCollections . get ( type ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > [[draw]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , type ) ) { String [[tomatoiver]] = entry . getKey ( ) ; [[draw]] . add ( [[tomatoiver]] ) ; } } if ( [[draw]] . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = [[draw]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 761 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 538 / 199 / 24 / 761:  76%|███████▌  | 761/1000 [1:54:58<36:06,  9.07s/it][Succeeded / Failed / Skipped / Total] 538 / 199 / 24 / 761:  76%|███████▌  | 762/1000 [1:55:05<35:56,  9.06s/it][Succeeded / Failed / Skipped / Total] 539 / 199 / 24 / 762:  76%|███████▌  | 762/1000 [1:55:05<35:56,  9.06s/it][Succeeded / Failed / Skipped / Total] 539 / 199 / 24 / 762:  76%|███████▋  | 763/1000 [1:55:44<35:57,  9.10s/it][Succeeded / Failed / Skipped / Total] 540 / 199 / 24 / 763:  76%|███████▋  | 763/1000 [1:55:44<35:57,  9.10s/it][Succeeded / Failed / Skipped / Total] 540 / 199 / 24 / 763:  76%|███████▋  | 764/1000 [1:56:23<35:57,  9.14s/it]Registers a new CtorCtorInjectionPoint . --> This method is used to instantiate a JatrainiWorker --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteCtorInjectionPoint]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor [[constructor]] = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } [[constructor]] = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { [[constructor]] = ctorDescriptor . getConstructor ( ) ; } } if ( [[constructor]] == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[constructor]] , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( [[constructor]] , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void [[jatrainiworkseventmentap]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor [[constructionure]] = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } [[constructionure]] = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { [[constructionure]] = ctorDescriptor . getConstructor ( ) ; } } if ( [[constructionure]] == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[constructionure]] , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( [[constructionure]] , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 762 ---------------------------------------------
Register a bean . --> Register a BeanDefinition --> Socre: 1.0

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition [[beanDefinition]] ) { beans . put ( name , [[beanDefinition]] ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class [[type]] = [[beanDefinition]] . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( [[type]] ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( [[type]] ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition [[anvefincade]] ) { beans . put ( name , [[anvefincade]] ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class [[definition]] = [[anvefincade]] . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( [[definition]] ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( [[definition]] ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 763 ---------------------------------------------
Registers a set injection point for the specified bean . --> register a property inquet --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String beanName , final String property ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint [[sip]] = new SetInjectionPoint ( propertyDescriptor ) ; [[beanDefinition]] . addSetInjectionPoint ( [[sip]] ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String beanName , final String property ) { BeanDefinition [[edفcular]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[edفcular]] . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + [[edفcular]] . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint [[spa]] = new SetInjectionPoint ( propertyDescriptor ) ; [[edفcular]] . addSetInjectionPoint ( [[spa]] ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 764 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 541 / 199 / 24 / 764:  76%|███████▋  | 764/1000 [1:56:23<35:57,  9.14s/it][Succeeded / Failed / Skipped / Total] 541 / 199 / 24 / 764:  76%|███████▋  | 765/1000 [1:56:35<35:49,  9.14s/it][Succeeded / Failed / Skipped / Total] 541 / 200 / 24 / 765:  76%|███████▋  | 765/1000 [1:56:35<35:49,  9.14s/it][Succeeded / Failed / Skipped / Total] 541 / 200 / 24 / 765:  77%|███████▋  | 766/1000 [1:56:57<35:43,  9.16s/it][Succeeded / Failed / Skipped / Total] 542 / 200 / 24 / 766:  77%|███████▋  | 766/1000 [1:56:57<35:43,  9.16s/it][Succeeded / Failed / Skipped / Total] 542 / 200 / 24 / 766:  77%|███████▋  | 767/1000 [1:57:15<35:37,  9.17s/it][Succeeded / Failed / Skipped / Total] 543 / 200 / 24 / 767:  77%|███████▋  | 767/1000 [1:57:15<35:37,  9.17s/it][Succeeded / Failed / Skipped / Total] 543 / 200 / 24 / 767:  77%|███████▋  | 768/1000 [1:57:32<35:30,  9.18s/it][Succeeded / Failed / Skipped / Total] 544 / 200 / 24 / 768:  77%|███████▋  | 768/1000 [1:57:32<35:30,  9.18s/it][Succeeded / Failed / Skipped / Total] 544 / 200 / 24 / 768:  77%|███████▋  | 769/1000 [1:57:52<35:24,  9.20s/it]Registers the specified destroy method names for the specified bean . --> Add destroyMethod points to a bean definition --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteDestroyMethods]] ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void [[databasepiientdiadmpodders]] ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 765 ---------------------------------------------
Registers a property injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetitePropertyInjectionPoint]] ( final String beanName , final String property , final String reference ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; PropertyDescriptor [[propertyDescriptor]] = [[cd]] . getPropertyDescriptor ( property , "[[True]]" == "[[True]]" ) ; if ( [[propertyDescriptor]] == null ) { throw new PetiteException ( "Property not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( [[propertyDescriptor]] , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( [[propertyDescriptor]] , ref ) ; [[beanDefinition]] . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void [[asbanddepafeaperquestsonbar]] ( final String beanName , final String property , final String reference ) { BeanDefinition [[beanhefinsion]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[md]] = ClassIntrospector . get ( ) . lookup ( [[beanhefinsion]] . type ) ; PropertyDescriptor [[familydosunder]] = [[md]] . getPropertyDescriptor ( property , "[[a]]" == "[[a]]" ) ; if ( [[familydosunder]] == null ) { throw new PetiteException ( "Property not found: " + [[beanhefinsion]] . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( [[familydosunder]] , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( [[familydosunder]] , ref ) ; [[beanhefinsion]] . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 766 ---------------------------------------------
Register a new Petite provider --> Register a new PetiteProvider --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor [[md]] = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( [[md]] == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , [[md]] . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor [[rd]] = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( [[rd]] == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , [[rd]] . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 767 ---------------------------------------------
Iterates over all beans of a given type . --> generate beanName --> Socre: 1.0

[[[[Adv]]]]: public void [[forEachBeanType]] ( final Class type , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , type ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void [[panhowpeturepic]] ( final Class type , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , type ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 768 ---------------------------------------------
Defines a set of parameters . --> Define a set of metrics --> Socre: 1.0

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[definitionacmetricwere]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 769 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 545 / 200 / 24 / 769:  77%|███████▋  | 769/1000 [1:57:52<35:24,  9.20s/it][Succeeded / Failed / Skipped / Total] 545 / 200 / 24 / 769:  77%|███████▋  | 770/1000 [1:57:59<35:14,  9.19s/it][Succeeded / Failed / Skipped / Total] 545 / 201 / 24 / 770:  77%|███████▋  | 770/1000 [1:57:59<35:14,  9.19s/it][Succeeded / Failed / Skipped / Total] 545 / 201 / 24 / 770:  77%|███████▋  | 771/1000 [1:58:18<35:08,  9.21s/it][Succeeded / Failed / Skipped / Total] 546 / 201 / 24 / 771:  77%|███████▋  | 771/1000 [1:58:18<35:08,  9.21s/it][Succeeded / Failed / Skipped / Total] 546 / 201 / 24 / 771:  77%|███████▋  | 772/1000 [1:58:29<34:59,  9.21s/it][Succeeded / Failed / Skipped / Total] 547 / 201 / 24 / 772:  77%|███████▋  | 772/1000 [1:58:29<34:59,  9.21s/it][Succeeded / Failed / Skipped / Total] 547 / 201 / 24 / 772:  77%|███████▋  | 773/1000 [1:58:37<34:50,  9.21s/it]Register a provider --> Register a new PetiteProvider --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final Class [[type]] , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( [[type]] ) ; MethodDescriptor [[md]] = [[cd]] . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( [[md]] == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition [[providerDefinition]] = new ProviderDefinition ( providerName , [[md]] . getMethod ( ) ) ; providers . put ( providerName , [[providerDefinition]] ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final Class [[group]] , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor [[rd]] = ClassIntrospector . get ( ) . lookup ( [[group]] ) ; MethodDescriptor [[db]] = [[rd]] . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( [[db]] == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition [[offeringsdednsters]] = new ProviderDefinition ( providerName , [[db]] . getMethod ( ) ) ; providers . put ( providerName , [[offeringsdednsters]] ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 770 ---------------------------------------------
Register a new method in the given bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteMethodInjectionPoint]] ( final String [[beanName]] , final String methodName , final Class [ ] arguments , final String [ ] [[references]] ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; Method [[method]] = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + [[beanDefinition]] . type . getName ( ) + ' ' + methodName ) ; } [[method]] = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { [[method]] = md . getMethod ( ) ; } } if ( [[method]] == null ) { throw new PetiteException ( "Method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[method]] , [[references]] ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( [[method]] , ref ) ; [[beanDefinition]] . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void [[iopedytesiticodavscriptinopoint]] ( final String [[flowergia]] , final String methodName , final Class [ ] arguments , final String [ ] [[matches]] ) { BeanDefinition [[rnvefenversion]] = lookupExistingBeanDefinition ( [[flowergia]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[rnvefenversion]] . type ) ; Method [[base]] = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + [[rnvefenversion]] . type . getName ( ) + ' ' + methodName ) ; } [[base]] = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { [[base]] = md . getMethod ( ) ; } } if ( [[base]] == null ) { throw new PetiteException ( "Method not found: " + [[rnvefenversion]] . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[base]] , [[matches]] ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( [[base]] , ref ) ; [[rnvefenversion]] . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 771 ---------------------------------------------
Pushes an integer onto the stack . --> Draw dildev instruction --> Socre: 1.0

[[[[Adv]]]]: public static void [[pushInt]] ( final MethodVisitor mv , final int value ) { if ( value <= 5 ) { mv . visitInsn ( ICONST_0 + value ) ; } else if ( value <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , value ) ; } else { mv . visitIntInsn ( SIPUSH , value ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void [[dildev]] ( final MethodVisitor mv , final int value ) { if ( value <= 5 ) { mv . visitInsn ( ICONST_0 + value ) ; } else if ( value <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , value ) ; } else { mv . visitIntInsn ( SIPUSH , value ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 772 ---------------------------------------------
Registers new init methods for a bean . --> Generates code to be used in codepermit for codepermit --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteInitMethods]] ( final String [[beanName]] , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int [[i]] ; for ( [[i]] = 0 ; [[i]] < initMethodNames . length ; [[i]] ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ [[i]] ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ [[i]] ] ) ; } initMethodPoints [ [[i]] ] = new InitMethodPoint ( md . getMethod ( ) , [[i]] , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void [[codeperclmitestektions]] ( final String [[hubnum]] , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[hubnum]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int [[a]] ; for ( [[a]] = 0 ; [[a]] < initMethodNames . length ; [[a]] ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ [[a]] ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ [[a]] ] ) ; } initMethodPoints [ [[a]] ] = new InitMethodPoint ( md . getMethod ( ) , [[a]] , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 773 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 548 / 201 / 24 / 773:  77%|███████▋  | 773/1000 [1:58:37<34:50,  9.21s/it][Succeeded / Failed / Skipped / Total] 548 / 201 / 24 / 773:  77%|███████▋  | 774/1000 [1:58:44<34:40,  9.20s/it][Succeeded / Failed / Skipped / Total] 548 / 202 / 24 / 774:  77%|███████▋  | 774/1000 [1:58:44<34:40,  9.20s/it][Succeeded / Failed / Skipped / Total] 548 / 202 / 24 / 774:  78%|███████▊  | 775/1000 [1:58:46<34:29,  9.20s/it][Succeeded / Failed / Skipped / Total] 549 / 202 / 24 / 775:  78%|███████▊  | 775/1000 [1:58:46<34:29,  9.20s/it][Succeeded / Failed / Skipped / Total] 549 / 202 / 24 / 775:  78%|███████▊  | 776/1000 [1:58:56<34:19,  9.20s/it][Succeeded / Failed / Skipped / Total] 550 / 202 / 24 / 776:  78%|███████▊  | 776/1000 [1:58:56<34:19,  9.20s/it][Succeeded / Failed / Skipped / Total] 550 / 202 / 24 / 776:  78%|███████▊  | 777/1000 [1:59:17<34:14,  9.21s/it][Succeeded / Failed / Skipped / Total] 551 / 202 / 24 / 777:  78%|███████▊  | 777/1000 [1:59:17<34:14,  9.21s/it][Succeeded / Failed / Skipped / Total] 551 / 202 / 24 / 777:  78%|███████▊  | 778/1000 [1:59:18<34:02,  9.20s/it][Succeeded / Failed / Skipped / Total] 552 / 202 / 24 / 778:  78%|███████▊  | 778/1000 [1:59:18<34:02,  9.20s/it][Succeeded / Failed / Skipped / Total] 552 / 202 / 24 / 778:  78%|███████▊  | 779/1000 [1:59:41<33:57,  9.22s/it][Succeeded / Failed / Skipped / Total] 553 / 202 / 24 / 779:  78%|███████▊  | 779/1000 [1:59:41<33:57,  9.22s/it][Succeeded / Failed / Skipped / Total] 553 / 202 / 24 / 779:  78%|███████▊  | 780/1000 [1:59:59<33:50,  9.23s/it][Succeeded / Failed / Skipped / Total] 553 / 203 / 24 / 780:  78%|███████▊  | 780/1000 [1:59:59<33:50,  9.23s/it][Succeeded / Failed / Skipped / Total] 553 / 203 / 24 / 780:  78%|███████▊  | 781/1000 [2:00:00<33:39,  9.22s/it]Check that the given index is valid . --> Check that the ragram is valid --> Socre: 1.0

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo methodInfo , final int [[argIndex]] ) { if ( ( [[argIndex]] < 1 ) || ( [[argIndex]] > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[argIndex]] ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo methodInfo , final int [[ragrammece]] ) { if ( ( [[ragrammece]] < 1 ) || ( [[ragrammece]] > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[ragrammece]] ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 774 ---------------------------------------------
Intercept the given action request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 775 ---------------------------------------------
Get advice field name . --> Getter for an attribute --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String name , final int index ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[attitudecountyid]] ( final String name , final int index ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 776 ---------------------------------------------
Generate advice method name . --> also used by methods --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String name , final int index ) { return ProxettaNames . methodPrefix + name + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[advisemadeordyime]] ( final String name , final int index ) { return ProxettaNames . methodPrefix + name + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 777 ---------------------------------------------
Load arguments for special method . --> needs to be synchronized --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= [[methodInfo]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[methodInfo]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[collectionsporwnkhgarɡets]] ( final MethodVisitor mv , final MethodInfo [[procedureninu]] ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= [[procedureninu]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[procedureninu]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 778 ---------------------------------------------
Loads the method arguments . --> Load aris day charger --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadStaticMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[mv]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void [[linuxcentisdaycharggator]] ( final MethodVisitor [[min]] , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[min]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 779 ---------------------------------------------
Store method argument . --> Launch a launchpath instruction --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[launchputhalradramcent]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 780 ---------------------------------------------
Load the arguments of the method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadVirtualMethodArguments]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] ) { for ( int [[i]] = 1 ; [[i]] <= [[methodInfo]] . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( mv , [[methodInfo]] , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void [[taskviotlamuidydradinetors]] ( final MethodVisitor mv , final MethodInfo [[methodonq]] ) { for ( int [[r]] = 1 ; [[r]] <= [[methodonq]] . getArgumentsCount ( ) ; [[r]] ++ ) { loadMethodArgument ( mv , [[methodonq]] , [[r]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 781 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 554 / 203 / 24 / 781:  78%|███████▊  | 781/1000 [2:00:00<33:39,  9.22s/it][Succeeded / Failed / Skipped / Total] 554 / 203 / 24 / 781:  78%|███████▊  | 782/1000 [2:00:22<33:33,  9.24s/it][Succeeded / Failed / Skipped / Total] 555 / 203 / 24 / 782:  78%|███████▊  | 782/1000 [2:00:22<33:33,  9.24s/it][Succeeded / Failed / Skipped / Total] 555 / 203 / 24 / 782:  78%|███████▊  | 783/1000 [2:00:38<33:26,  9.24s/it][Succeeded / Failed / Skipped / Total] 556 / 203 / 24 / 783:  78%|███████▊  | 783/1000 [2:00:38<33:26,  9.24s/it][Succeeded / Failed / Skipped / Total] 556 / 203 / 24 / 783:  78%|███████▊  | 784/1000 [2:00:43<33:15,  9.24s/it][Succeeded / Failed / Skipped / Total] 557 / 203 / 24 / 784:  78%|███████▊  | 784/1000 [2:00:43<33:15,  9.24s/it][Succeeded / Failed / Skipped / Total] 557 / 203 / 24 / 784:  78%|███████▊  | 785/1000 [2:00:52<33:06,  9.24s/it]Prepare return value . --> writes the result of the method --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareReturnValue]] ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void [[organisenutwrpurre]] ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 782 ---------------------------------------------
Create signature key . --> Draws a tippetable element --> Socre: 1.0

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[drawtichoeadsppotuestable]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 783 ---------------------------------------------
Load method argument . --> classload lload --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadMethodArgument]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[mv]] . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( DLOAD , offset ) ; break ; default : [[mv]] . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[classdayaddelrumant]] ( final MethodVisitor [[iii]] , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[iii]] . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : [[iii]] . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : [[iii]] . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : [[iii]] . visitVarInsn ( DLOAD , offset ) ; break ; default : [[iii]] . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 784 ---------------------------------------------
Store instruction into array . --> This method is used to build instructions --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeIntoArray]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void [[searchdevurallotive]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 785 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 558 / 203 / 24 / 785:  78%|███████▊  | 785/1000 [2:00:52<33:06,  9.24s/it][Succeeded / Failed / Skipped / Total] 558 / 203 / 24 / 785:  79%|███████▊  | 786/1000 [2:01:10<32:59,  9.25s/it][Succeeded / Failed / Skipped / Total] 559 / 203 / 24 / 786:  79%|███████▊  | 786/1000 [2:01:10<32:59,  9.25s/it][Succeeded / Failed / Skipped / Total] 559 / 203 / 24 / 786:  79%|███████▊  | 787/1000 [2:01:30<32:53,  9.26s/it][Succeeded / Failed / Skipped / Total] 559 / 204 / 24 / 787:  79%|███████▊  | 787/1000 [2:01:30<32:53,  9.26s/it][Succeeded / Failed / Skipped / Total] 559 / 204 / 24 / 787:  79%|███████▉  | 788/1000 [2:01:51<32:46,  9.28s/it][Succeeded / Failed / Skipped / Total] 560 / 204 / 24 / 788:  79%|███████▉  | 788/1000 [2:01:51<32:46,  9.28s/it][Succeeded / Failed / Skipped / Total] 560 / 204 / 24 / 788:  79%|███████▉  | 789/1000 [2:02:00<32:37,  9.28s/it][Succeeded / Failed / Skipped / Total] 561 / 204 / 24 / 789:  79%|███████▉  | 789/1000 [2:02:00<32:37,  9.28s/it][Succeeded / Failed / Skipped / Total] 561 / 204 / 24 / 789:  79%|███████▉  | 790/1000 [2:02:21<32:31,  9.29s/it][Succeeded / Failed / Skipped / Total] 562 / 204 / 24 / 790:  79%|███████▉  | 790/1000 [2:02:21<32:31,  9.29s/it][Succeeded / Failed / Skipped / Total] 562 / 204 / 24 / 790:  79%|███████▉  | 791/1000 [2:02:33<32:22,  9.30s/it]Generate new array --> Callurrammar --> Socre: 1.0

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor mv , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[componentType]] == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[componentType]] == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[componentType]] == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[componentType]] == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[componentType]] == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[componentType]] == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[componentType]] == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[componentType]] ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[callurram]] ( final MethodVisitor mv , final Class [[bodyimage]] ) { if ( [[bodyimage]] == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[bodyimage]] == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[bodyimage]] == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[bodyimage]] == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[bodyimage]] == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[bodyimage]] == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[bodyimage]] == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[bodyimage]] == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[bodyimage]] ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 786 ---------------------------------------------
Resolve the OAuth bearer token . --> Extract the Deliver from the request --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveAuthBearerToken]] ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String [[delawarereadreerateuceant]] ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 787 ---------------------------------------------
Resolves Java version . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int [[version]] ) { final int [[javaVersionNumber]] = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = [[javaVersionNumber]] - 8 + 52 ; return [[version]] > platformVersion ? [[version]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[bejivemissive]] ( final int [[now]] ) { final int [[jesumegenier]] = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = [[jesumegenier]] - 8 + 52 ; return [[now]] > platformVersion ? [[now]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 788 ---------------------------------------------
Extract the encoding from a content type --> Helper method to compute the adaptationHodling --> Socre: 1.0

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String [[contentType]] , String defaultEncoding ) { String [[encoding]] = [[extractEncoding]] ( [[contentType]] ) ; if ( [[encoding]] == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } [[encoding]] = defaultEncoding ; } return [[encoding]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[adaptationhsodling]] ( final String [[documentimate]] , String defaultEncoding ) { String [[compression]] = [[adaptationhsodling]] ( [[documentimate]] ) ; if ( [[compression]] == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } [[compression]] = defaultEncoding ; } return [[compression]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 789 ---------------------------------------------
Require authentication . --> Expects an error as an error --> Socre: 1.0

[[[[Adv]]]]: public static void [[requireAuthentication]] ( final HttpServletResponse [[resp]] , final String realm ) throws IOException { [[resp]] . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; [[resp]] . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void [[expectxtherunction]] ( final HttpServletResponse [[sп]] , final String realm ) throws IOException { [[sп]] . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; [[sп]] . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 790 ---------------------------------------------
Get all cookies from the request . --> Send cookie to request --> Socre: 1.0

[[[[Adv]]]]: public static Cookie [ ] [[getAllCookies]] ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] [[sendrunncookigens]] ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 791 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 563 / 204 / 24 / 791:  79%|███████▉  | 791/1000 [2:02:33<32:22,  9.30s/it][Succeeded / Failed / Skipped / Total] 563 / 204 / 24 / 791:  79%|███████▉  | 792/1000 [2:02:35<32:11,  9.29s/it][Succeeded / Failed / Skipped / Total] 564 / 204 / 24 / 792:  79%|███████▉  | 792/1000 [2:02:35<32:11,  9.29s/it][Succeeded / Failed / Skipped / Total] 564 / 204 / 24 / 792:  79%|███████▉  | 793/1000 [2:02:58<32:05,  9.30s/it][Succeeded / Failed / Skipped / Total] 565 / 204 / 24 / 793:  79%|███████▉  | 793/1000 [2:02:58<32:05,  9.30s/it][Succeeded / Failed / Skipped / Total] 565 / 204 / 24 / 793:  79%|███████▉  | 794/1000 [2:02:59<31:54,  9.29s/it][Succeeded / Failed / Skipped / Total] 565 / 205 / 24 / 794:  79%|███████▉  | 794/1000 [2:02:59<31:54,  9.29s/it][Succeeded / Failed / Skipped / Total] 565 / 205 / 24 / 794:  80%|███████▉  | 795/1000 [2:03:19<31:48,  9.31s/it][Succeeded / Failed / Skipped / Total] 566 / 205 / 24 / 795:  80%|███████▉  | 795/1000 [2:03:19<31:48,  9.31s/it][Succeeded / Failed / Skipped / Total] 566 / 205 / 24 / 795:  80%|███████▉  | 796/1000 [2:03:24<31:37,  9.30s/it][Succeeded / Failed / Skipped / Total] 567 / 205 / 24 / 796:  80%|███████▉  | 796/1000 [2:03:24<31:37,  9.30s/it][Succeeded / Failed / Skipped / Total] 567 / 205 / 24 / 796:  80%|███████▉  | 797/1000 [2:03:36<31:29,  9.31s/it][Succeeded / Failed / Skipped / Total] 568 / 205 / 24 / 797:  80%|███████▉  | 797/1000 [2:03:36<31:29,  9.31s/it][Succeeded / Failed / Skipped / Total] 568 / 205 / 24 / 797:  80%|███████▉  | 798/1000 [2:03:40<31:18,  9.30s/it]Prepares a file with the given mime type . --> Sends a fault to the browser --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse [[response]] , final File [[file]] , final String mimeType ) { if ( ! [[file]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[file]] ) ; } if ( [[file]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[file]] ) ; } prepareResponse ( [[response]] , [[file]] . getAbsolutePath ( ) , mimeType , ( int ) [[file]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[forwardtherault]] ( final HttpServletResponse [[back]] , final File [[park]] , final String mimeType ) { if ( ! [[park]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[park]] ) ; } if ( [[park]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[park]] ) ; } prepareResponse ( [[back]] , [[park]] . getAbsolutePath ( ) , mimeType , ( int ) [[park]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 792 ---------------------------------------------
Prepares the response with the mime type and file size . --> Set the content type of the file --> Socre: 1.0

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse response , final String fileName , String [[mimeType]] , final int [[fileSize]] ) { if ( ( [[mimeType]] == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; [[mimeType]] = MimeTypes . getMimeType ( extension ) ; } if ( [[mimeType]] != null ) { response . setContentType ( [[mimeType]] ) ; } if ( [[fileSize]] >= 0 ) { response . setContentLength ( [[fileSize]] ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse response , final String fileName , String [[streetmesove]] , final int [[recise]] ) { if ( ( [[streetmesove]] == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; [[streetmesove]] = MimeTypes . getMimeType ( extension ) ; } if ( [[streetmesove]] != null ) { response . setContentType ( [[streetmesove]] ) ; } if ( [[recise]] >= 0 ) { response . setContentLength ( [[recise]] ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 793 ---------------------------------------------
Read request body from a reader --> also used in tests --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest [[request]] ) throws IOException { BufferedReader buff = [[request]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[overestainformfiubremds]] ( final HttpServletRequest [[petition]] ) throws IOException { BufferedReader buff = [[petition]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 794 ---------------------------------------------
Checks if flags are empty . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isEmptyFlags]] ( Flags flags ) { if ( flags == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "[[False]]" != "[[False]]" ; } String [ ] [[userFlags]] = flags . getUserFlags ( ) ; if ( [[userFlags]] != null && [[userFlags]] . length > 0 ) { return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean [[alsogepaapgalomp]] ( Flags flags ) { if ( flags == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "[[cow]]" != "[[cow]]" ; } String [ ] [[librelaaz]] = flags . getUserFlags ( ) ; if ( [[librelaaz]] != null && [[librelaaz]] . length > 0 ) { return "[[cow]]" != "[[cow]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 795 ---------------------------------------------
Stores the current context path in the servlet context . --> Fet thepromptext variable --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext servletContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[fetchpromantext]] ( final ServletContext servletContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 796 ---------------------------------------------
Stores the current context path in the request . --> Loadcredyana profile variable --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest [[request]] = ( HttpServletRequest ) pageContext . getRequest ( ) ; [[request]] . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext [[servletContext]] = pageContext . getServletContext ( ) ; [[servletContext]] . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[loadcarmyana]] ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest [[profile]] = ( HttpServletRequest ) pageContext . getRequest ( ) ; [[profile]] . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext [[priifflineovmal]] = pageContext . getServletContext ( ) ; [[priifflineovmal]] . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 797 ---------------------------------------------
Checks if a query parameter is a GET parameter . --> Retrieves a name from a servlet request --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest [[request]] , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = [[request]] . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[frombrushcomtain]] ( final HttpServletRequest [[service]] , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = [[service]] . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 798 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 569 / 205 / 24 / 798:  80%|███████▉  | 798/1000 [2:03:40<31:18,  9.30s/it][Succeeded / Failed / Skipped / Total] 569 / 205 / 24 / 798:  80%|███████▉  | 799/1000 [2:03:46<31:08,  9.29s/it][Succeeded / Failed / Skipped / Total] 570 / 205 / 24 / 799:  80%|███████▉  | 799/1000 [2:03:46<31:08,  9.29s/it][Succeeded / Failed / Skipped / Total] 570 / 205 / 24 / 799:  80%|████████  | 800/1000 [2:03:59<30:59,  9.30s/it][Succeeded / Failed / Skipped / Total] 571 / 205 / 24 / 800:  80%|████████  | 800/1000 [2:03:59<30:59,  9.30s/it][Succeeded / Failed / Skipped / Total] 571 / 205 / 24 / 800:  80%|████████  | 801/1000 [2:04:02<30:48,  9.29s/it][Succeeded / Failed / Skipped / Total] 571 / 206 / 24 / 801:  80%|████████  | 801/1000 [2:04:02<30:48,  9.29s/it][Succeeded / Failed / Skipped / Total] 571 / 206 / 24 / 801:  80%|████████  | 802/1000 [2:04:11<30:39,  9.29s/it][Succeeded / Failed / Skipped / Total] 572 / 206 / 24 / 802:  80%|████████  | 802/1000 [2:04:11<30:39,  9.29s/it][Succeeded / Failed / Skipped / Total] 572 / 206 / 24 / 802:  80%|████████  | 803/1000 [2:04:25<30:31,  9.30s/it][Succeeded / Failed / Skipped / Total] 572 / 207 / 24 / 803:  80%|████████  | 803/1000 [2:04:25<30:31,  9.30s/it][Succeeded / Failed / Skipped / Total] 572 / 207 / 24 / 803:  80%|████████  | 804/1000 [2:04:31<30:21,  9.29s/it]Prepare parameters . --> but not null empty --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[prepareParameters]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] [[futureaeroquentt]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 799 ---------------------------------------------
Read request body from stream --> Countribt to a string --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromStream]] ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter [[charArrayWriter]] = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , [[charArrayWriter]] ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return [[charArrayWriter]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[countribounddepreceshow]] ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter [[colorperionmill]] = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , [[colorperionmill]] ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return [[colorperionmill]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 800 ---------------------------------------------
Renders the body to a String . --> get deltable --> Socre: 1.0

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment body ) throws JspException { char [ ] result = renderBody ( body ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[deltablegettryp]] ( final JspFragment body ) throws JspException { char [ ] result = renderBody ( body ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 801 ---------------------------------------------
Invokes the given body . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment body ) throws JspException { if ( body == null ) { return ; } try { body . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[bestagebas]] ( final JspFragment body ) throws JspException { if ( body == null ) { return ; } try { body . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 802 ---------------------------------------------
Copies request parameters to attributes . --> documentation inherited from father --> Socre: 1.0

[[[[Adv]]]]: public static void [[copyParamsToAttributes]] ( final HttpServletRequest [[servletRequest]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = [[servletRequest]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String paramName = ( String ) paramNames . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = [[servletRequest]] . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } [[servletRequest]] . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void [[replicaanomusformтrihudles]] ( final HttpServletRequest [[eravuslayereuve]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = [[eravuslayereuve]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String paramName = ( String ) paramNames . nextElement ( ) ; if ( [[eravuslayereuve]] . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = [[eravuslayereuve]] . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } [[eravuslayereuve]] . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 803 ---------------------------------------------
Renders the body of a HTML fragment . --> [[[FAILED]]]

[[[[Adv]]]]: public static char [ ] [[renderBody]] ( final JspFragment body ) throws JspException { FastCharArrayWriter [[writer]] = new FastCharArrayWriter ( ) ; invokeBody ( body , [[writer]] ) ; return [[writer]] . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] [[baser]] ( final JspFragment body ) throws JspException { FastCharArrayWriter [[writes]] = new FastCharArrayWriter ( ) ; invokeBody ( body , [[writes]] ) ; return [[writes]] . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 804 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 573 / 207 / 24 / 804:  80%|████████  | 804/1000 [2:04:31<30:21,  9.29s/it][Succeeded / Failed / Skipped / Total] 573 / 207 / 24 / 804:  80%|████████  | 805/1000 [2:04:36<30:11,  9.29s/it][Succeeded / Failed / Skipped / Total] 573 / 208 / 24 / 805:  80%|████████  | 805/1000 [2:04:36<30:11,  9.29s/it][Succeeded / Failed / Skipped / Total] 573 / 208 / 24 / 805:  81%|████████  | 806/1000 [2:04:36<29:59,  9.28s/it][Succeeded / Failed / Skipped / Total] 574 / 208 / 24 / 806:  81%|████████  | 806/1000 [2:04:36<29:59,  9.28s/it][Succeeded / Failed / Skipped / Total] 574 / 208 / 24 / 806:  81%|████████  | 807/1000 [2:04:43<29:49,  9.27s/it][Succeeded / Failed / Skipped / Total] 575 / 208 / 24 / 807:  81%|████████  | 807/1000 [2:04:43<29:49,  9.27s/it][Succeeded / Failed / Skipped / Total] 575 / 208 / 24 / 807:  81%|████████  | 808/1000 [2:04:55<29:41,  9.28s/it][Succeeded / Failed / Skipped / Total] 576 / 208 / 24 / 808:  81%|████████  | 808/1000 [2:04:55<29:41,  9.28s/it][Succeeded / Failed / Skipped / Total] 576 / 208 / 24 / 808:  81%|████████  | 809/1000 [2:05:03<29:31,  9.27s/it][Succeeded / Failed / Skipped / Total] 577 / 208 / 24 / 809:  81%|████████  | 809/1000 [2:05:03<29:31,  9.27s/it][Succeeded / Failed / Skipped / Total] 577 / 208 / 24 / 809:  81%|████████  | 810/1000 [2:05:07<29:21,  9.27s/it][Succeeded / Failed / Skipped / Total] 578 / 208 / 24 / 810:  81%|████████  | 810/1000 [2:05:07<29:21,  9.27s/it][Succeeded / Failed / Skipped / Total] 578 / 208 / 24 / 810:  81%|████████  | 811/1000 [2:05:21<29:12,  9.27s/it][Succeeded / Failed / Skipped / Total] 579 / 208 / 24 / 811:  81%|████████  | 811/1000 [2:05:21<29:12,  9.27s/it][Succeeded / Failed / Skipped / Total] 579 / 208 / 24 / 811:  81%|████████  | 812/1000 [2:05:26<29:02,  9.27s/it][Succeeded / Failed / Skipped / Total] 580 / 208 / 24 / 812:  81%|████████  | 812/1000 [2:05:26<29:02,  9.27s/it][Succeeded / Failed / Skipped / Total] 580 / 208 / 24 / 812:  81%|████████▏ | 813/1000 [2:05:39<28:54,  9.27s/it]Creates new bean instance . --> Get the custom dtor for bean creation --> Socre: 1.0

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[customdoeucnseapp]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 805 ---------------------------------------------
Call the destroy methods --> [[[FAILED]]]

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint [[destroyMethodPoint]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[destroyMethodPoint]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[destroyMethodPoint]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[buydersaparedampass]] ( ) { for ( final DestroyMethodPoint [[reviewrettodroposh]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[reviewrettodroposh]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[reviewrettodroposh]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 806 ---------------------------------------------
Invoke init methods --> Invoke all confelitents good method --> Socre: 1.0

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint [[initMethod]] : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != [[initMethod]] . invocationStrategy ) { continue ; } try { [[initMethod]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[initMethod]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[confeliotentsgoodes]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint [[iscatcitosder]] : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != [[iscatcitosder]] . invocationStrategy ) { continue ; } try { [[iscatcitosder]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[iscatcitosder]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 807 ---------------------------------------------
Inject parameters . --> Inject atviewes --> Socre: 1.0

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[atviewenoces]] ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 808 ---------------------------------------------
Put a new entry into the props . --> Add a profile entry . --> Socre: 1.0

[[[[Adv]]]]: protected void [[put]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void [[add]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 809 ---------------------------------------------
Put a base property . --> Demonstrates how to draw a test --> Socre: 1.0

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[drawteststplextly]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 810 ---------------------------------------------
Rewrite the given action path . --> assigns the artgraph to the artfile --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[rewrite]] ( final HttpServletRequest servletRequest , final String [[actionPath]] , final String httpMethod ) { return [[actionPath]] ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[sideram]] ( final HttpServletRequest servletRequest , final String [[artgraph]] , final String httpMethod ) { return [[artgraph]] ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 811 ---------------------------------------------
Get profile from profile --> get propsut for peltier --> Socre: 1.0

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[besuretiputforpeltier]] ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 812 ---------------------------------------------
Resolve macros . --> answer the answer --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveMacros]] ( String value , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[answermahrac]] ( String value , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 813 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 581 / 208 / 24 / 813:  81%|████████▏ | 813/1000 [2:05:39<28:54,  9.27s/it][Succeeded / Failed / Skipped / Total] 581 / 208 / 24 / 813:  81%|████████▏ | 814/1000 [2:05:42<28:43,  9.27s/it][Succeeded / Failed / Skipped / Total] 582 / 208 / 24 / 814:  81%|████████▏ | 814/1000 [2:05:42<28:43,  9.27s/it][Succeeded / Failed / Skipped / Total] 582 / 208 / 24 / 814:  82%|████████▏ | 815/1000 [2:05:43<28:32,  9.26s/it][Succeeded / Failed / Skipped / Total] 583 / 208 / 24 / 815:  82%|████████▏ | 815/1000 [2:05:43<28:32,  9.26s/it][Succeeded / Failed / Skipped / Total] 583 / 208 / 24 / 815:  82%|████████▏ | 816/1000 [2:05:53<28:23,  9.26s/it][Succeeded / Failed / Skipped / Total] 584 / 208 / 24 / 816:  82%|████████▏ | 816/1000 [2:05:53<28:23,  9.26s/it][Succeeded / Failed / Skipped / Total] 584 / 208 / 24 / 816:  82%|████████▏ | 817/1000 [2:06:00<28:13,  9.25s/it][Succeeded / Failed / Skipped / Total] 585 / 208 / 24 / 817:  82%|████████▏ | 817/1000 [2:06:00<28:13,  9.25s/it][Succeeded / Failed / Skipped / Total] 585 / 208 / 24 / 817:  82%|████████▏ | 818/1000 [2:06:20<28:06,  9.27s/it][Succeeded / Failed / Skipped / Total] 586 / 208 / 24 / 818:  82%|████████▏ | 818/1000 [2:06:20<28:06,  9.27s/it][Succeeded / Failed / Skipped / Total] 586 / 208 / 24 / 818:  82%|████████▏ | 819/1000 [2:06:37<27:58,  9.28s/it][Succeeded / Failed / Skipped / Total] 587 / 208 / 24 / 819:  82%|████████▏ | 819/1000 [2:06:37<27:58,  9.28s/it][Succeeded / Failed / Skipped / Total] 587 / 208 / 24 / 819:  82%|████████▏ | 820/1000 [2:06:38<27:48,  9.27s/it][Succeeded / Failed / Skipped / Total] 588 / 208 / 24 / 820:  82%|████████▏ | 820/1000 [2:06:38<27:48,  9.27s/it][Succeeded / Failed / Skipped / Total] 588 / 208 / 24 / 820:  82%|████████▏ | 821/1000 [2:06:50<27:39,  9.27s/it]Extract profiles . --> Extract shape from shape --> Socre: 1.0

[[[[Adv]]]]: public Map extract ( Map [[target]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[target]] == null ) { [[target]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map extract ( Map [[shape]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[shape]] == null ) { [[shape]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 814 ---------------------------------------------
Writes a 32 - bit word from an array of bytes . --> buffers four bytes from data --> Socre: 1.0

[[[[Adv]]]]: private static int [[streamtoword]] ( byte [ ] data , int [ ] offp ) { int i ; int word = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int [[buffertroold]] ( byte [ ] data , int [ ] offp ) { int i ; int word = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 815 ---------------------------------------------
Adds a header . --> Added headervar --> Socre: 1.0

[[[[Adv]]]]: public void [[addHeader]] ( final String name , final String value ) { List < String > [[valuesList]] = super . getAll ( name ) ; if ( [[valuesList]] . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; [[valuesList]] . add ( value ) ; super . addAll ( name , [[valuesList]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void [[addedheadervar]] ( final String name , final String value ) { List < String > [[keysrock]] = super . getAll ( name ) ; if ( [[keysrock]] . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; [[keysrock]] . add ( value ) ; super . addAll ( name , [[keysrock]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 816 ---------------------------------------------
Put profile . --> package - private for testing --> Socre: 1.0

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String value , final String [[profile]] , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( [[profile]] , k -> new HashMap <> ( ) ) ; put ( [[profile]] , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[projectcomфleseverwarance]] ( final String key , final String value , final String [[code]] , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( [[code]] , k -> new HashMap <> ( ) ) ; put ( [[code]] , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 817 ---------------------------------------------
Copies all characters . --> Reads the next octet --> Socre: 1.0

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[backwardac]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 818 ---------------------------------------------
Copies bytes from the input stream to the output stream . --> copied from InputStream --> Socre: 1.0

[[[[Adv]]]]: public int [[copyMax]] ( final OutputStream [[out]] , final int maxBytes ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[out]] . write ( b ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int [[copypy]] ( final OutputStream [[back]] , final int maxBytes ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[back]] . write ( b ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 819 ---------------------------------------------
Resolves the action configuration . --> handler for gexec execution --> Socre: 1.0

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > annotationType ; if ( annotationValues == null ) { annotationType = Action . class ; } else { annotationType = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[managegrexecutionairفgged]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > annotationType ; if ( annotationValues == null ) { annotationType = Action . class ; } else { annotationType = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 820 ---------------------------------------------
Checks if a plaintext hashed password . --> returns true if the input has been read --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[checkpw]] ( String [[plaintext]] , String hashed ) { byte [ ] [[hashed_bytes]] ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[plaintext]] , hashed ) ; [[hashed_bytes]] = hashed . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( [[hashed_bytes]] . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= [[hashed_bytes]] [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean [[readingfs]] ( String [[beler]] , String hashed ) { byte [ ] [[fetchtedrowvalues]] ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[beler]] , hashed ) ; [[fetchtedrowvalues]] = hashed . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( [[fetchtedrowvalues]] . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= [[fetchtedrowvalues]] [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 821 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 589 / 208 / 24 / 821:  82%|████████▏ | 821/1000 [2:06:50<27:39,  9.27s/it][Succeeded / Failed / Skipped / Total] 589 / 208 / 24 / 821:  82%|████████▏ | 822/1000 [2:06:56<27:29,  9.27s/it][Succeeded / Failed / Skipped / Total] 590 / 208 / 24 / 822:  82%|████████▏ | 822/1000 [2:06:56<27:29,  9.27s/it][Succeeded / Failed / Skipped / Total] 590 / 208 / 24 / 822:  82%|████████▏ | 823/1000 [2:07:07<27:20,  9.27s/it][Succeeded / Failed / Skipped / Total] 591 / 208 / 24 / 823:  82%|████████▏ | 823/1000 [2:07:07<27:20,  9.27s/it][Succeeded / Failed / Skipped / Total] 591 / 208 / 24 / 823:  82%|████████▏ | 824/1000 [2:07:25<27:12,  9.28s/it][Succeeded / Failed / Skipped / Total] 592 / 208 / 24 / 824:  82%|████████▏ | 824/1000 [2:07:25<27:12,  9.28s/it][Succeeded / Failed / Skipped / Total] 592 / 208 / 24 / 824:  82%|████████▎ | 825/1000 [2:07:39<27:04,  9.28s/it][Succeeded / Failed / Skipped / Total] 593 / 208 / 24 / 825:  82%|████████▎ | 825/1000 [2:07:39<27:04,  9.28s/it][Succeeded / Failed / Skipped / Total] 593 / 208 / 24 / 825:  83%|████████▎ | 826/1000 [2:07:42<26:54,  9.28s/it][Succeeded / Failed / Skipped / Total] 594 / 208 / 24 / 826:  83%|████████▎ | 826/1000 [2:07:42<26:54,  9.28s/it][Succeeded / Failed / Skipped / Total] 594 / 208 / 24 / 826:  83%|████████▎ | 827/1000 [2:07:43<26:43,  9.27s/it][Succeeded / Failed / Skipped / Total] 594 / 208 / 25 / 827:  83%|████████▎ | 827/1000 [2:07:43<26:43,  9.27s/it][Succeeded / Failed / Skipped / Total] 594 / 208 / 25 / 827:  83%|████████▎ | 828/1000 [2:08:01<26:35,  9.28s/it][Succeeded / Failed / Skipped / Total] 594 / 209 / 25 / 828:  83%|████████▎ | 828/1000 [2:08:01<26:35,  9.28s/it][Succeeded / Failed / Skipped / Total] 594 / 209 / 25 / 828:  83%|████████▎ | 829/1000 [2:08:13<26:26,  9.28s/it][Succeeded / Failed / Skipped / Total] 594 / 210 / 25 / 829:  83%|████████▎ | 829/1000 [2:08:13<26:26,  9.28s/it][Succeeded / Failed / Skipped / Total] 594 / 210 / 25 / 829:  83%|████████▎ | 830/1000 [2:08:19<26:16,  9.28s/it]Parse action runtime . --> Resolves the dase --> Socre: 1.0

[[[[Adv]]]]: public ActionRuntime [[parse]] ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues [[annotationValues]] = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig [[actionConfig]] = resolveActionConfig ( [[annotationValues]] ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime [[dase]] ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues [[accentorysisdimgues]] = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig [[performancedejuga]] = resolveActionConfig ( [[accentorysisdimgues]] ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 822 ---------------------------------------------
Detect and register method alias . --> Register devinfronthere --> Socre: 1.0

[[[[Adv]]]]: protected void [[detectAndRegisterAlias]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void [[devinfrontheiversorsas]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 823 ---------------------------------------------
Read action filters . --> Validate filteredBy --> Socre: 1.0

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[readActionFilters]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[validectionedfrban]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 824 ---------------------------------------------
Read method action path . --> exporter --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[selectlineoe田tivtracker]] ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 825 ---------------------------------------------
Read an action interceptor . --> Count trustworaredByAnnotation --> Socre: 1.0

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[readActionInterceptors]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] [[result]] = null ; InterceptedBy [[interceptedBy]] = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( [[interceptedBy]] != null ) { [[result]] = [[interceptedBy]] . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[countostiveworkelucptared]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] [[judgment]] = null ; InterceptedBy [[dedy]] = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( [[dedy]] != null ) { [[judgment]] = [[dedy]] . value ( ) ; if ( [[judgment]] . length == 0 ) { [[judgment]] = null ; } } return [[judgment]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 826 ---------------------------------------------
Get method alias . --> Extracts the oiregacids from annotationValues --> Socre: 1.0

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues annotationValues ) { String alias = null ; if ( annotationValues != null ) { alias = annotationValues . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[multiregetocacids]] ( final ActionAnnotationValues annotationValues ) { String alias = null ; if ( annotationValues != null ) { alias = annotationValues . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 827 ---------------------------------------------
Set the response headers . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 828 ---------------------------------------------
Read package action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[controlweavevrivr]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 829 ---------------------------------------------
Apply proxy advice to given target class . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] applyAdvice ( final Class < [[T]] > targetClass ) { Class [[adviceClass]] = cache . get ( targetClass ) ; if ( [[adviceClass]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < [[т]] > [[т]] applyAdvice ( final Class < [[т]] > targetClass ) { Class [[expertlist]] = cache . get ( targetClass ) ; if ( [[expertlist]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 830 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 595 / 210 / 25 / 830:  83%|████████▎ | 830/1000 [2:08:19<26:16,  9.28s/it][Succeeded / Failed / Skipped / Total] 595 / 210 / 25 / 830:  83%|████████▎ | 831/1000 [2:08:26<26:07,  9.27s/it][Succeeded / Failed / Skipped / Total] 595 / 211 / 25 / 831:  83%|████████▎ | 831/1000 [2:08:26<26:07,  9.27s/it][Succeeded / Failed / Skipped / Total] 595 / 211 / 25 / 831:  83%|████████▎ | 832/1000 [2:08:38<25:58,  9.28s/it][Succeeded / Failed / Skipped / Total] 596 / 211 / 25 / 832:  83%|████████▎ | 832/1000 [2:08:38<25:58,  9.28s/it][Succeeded / Failed / Skipped / Total] 596 / 211 / 25 / 832:  83%|████████▎ | 833/1000 [2:08:47<25:49,  9.28s/it][Succeeded / Failed / Skipped / Total] 597 / 211 / 25 / 833:  83%|████████▎ | 833/1000 [2:08:47<25:49,  9.28s/it][Succeeded / Failed / Skipped / Total] 597 / 211 / 25 / 833:  83%|████████▎ | 834/1000 [2:08:51<25:38,  9.27s/it][Succeeded / Failed / Skipped / Total] 598 / 211 / 25 / 834:  83%|████████▎ | 834/1000 [2:08:51<25:38,  9.27s/it][Succeeded / Failed / Skipped / Total] 598 / 211 / 25 / 834:  84%|████████▎ | 835/1000 [2:09:05<25:30,  9.28s/it][Succeeded / Failed / Skipped / Total] 599 / 211 / 25 / 835:  84%|████████▎ | 835/1000 [2:09:05<25:30,  9.28s/it][Succeeded / Failed / Skipped / Total] 599 / 211 / 25 / 835:  84%|████████▎ | 836/1000 [2:09:08<25:20,  9.27s/it][Succeeded / Failed / Skipped / Total] 600 / 211 / 25 / 836:  84%|████████▎ | 836/1000 [2:09:08<25:20,  9.27s/it][Succeeded / Failed / Skipped / Total] 600 / 211 / 25 / 836:  84%|████████▎ | 837/1000 [2:09:28<25:12,  9.28s/it][Succeeded / Failed / Skipped / Total] 601 / 211 / 25 / 837:  84%|████████▎ | 837/1000 [2:09:28<25:12,  9.28s/it][Succeeded / Failed / Skipped / Total] 601 / 211 / 25 / 837:  84%|████████▍ | 838/1000 [2:09:42<25:04,  9.29s/it][Succeeded / Failed / Skipped / Total] 602 / 211 / 25 / 838:  84%|████████▍ | 838/1000 [2:09:42<25:04,  9.29s/it][Succeeded / Failed / Skipped / Total] 602 / 211 / 25 / 838:  84%|████████▍ | 839/1000 [2:09:49<24:54,  9.28s/it]Inject target into proxy --> Convenience wrapper for testing --> Socre: 1.0

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object proxy , final Object target ) { Class proxyClass = proxy . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[withplaysantivointompoloxie]] ( final Object proxy , final Object target ) { Class proxyClass = proxy . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 831 ---------------------------------------------
Hashes a password using the given password . --> [[[FAILED]]]

[[[[Adv]]]]: public static String hashpw ( String password , String [[salt]] ) { BCrypt B ; String real_salt ; byte [ ] [[passwordb]] , saltb , hashed ; char minor = ( char ) 0 ; int rounds , [[off]] ; StringBuffer rs = new StringBuffer ( ) ; if ( [[salt]] . charAt ( 0 ) != ' ' || [[salt]] . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( [[salt]] . charAt ( 2 ) == ' ' ) { [[off]] = 3 ; } else { minor = [[salt]] . charAt ( 2 ) ; if ( minor != ' ' || [[salt]] . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } [[off]] = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String hashpw ( String password , String [[nana]] ) { BCrypt B ; String real_salt ; byte [ ] [[0c]] , saltb , hashed ; char minor = ( char ) 0 ; int rounds , [[die]] ; StringBuffer rs = new StringBuffer ( ) ; if ( [[nana]] . charAt ( 0 ) != ' ' || [[nana]] . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( [[nana]] . charAt ( 2 ) == ' ' ) { [[die]] = 3 ; } else { minor = [[nana]] . charAt ( 2 ) ; if ( minor != ' ' || [[nana]] . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } [[die]] = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 832 ---------------------------------------------
Resolves the real name of a given json name . --> get analysis resme --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( jsonIndex == - 1 ) { return jsonName ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[analysisresme]] ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( jsonIndex == - 1 ) { return jsonName ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 833 ---------------------------------------------
Resolve json name . --> If realName is not found return jsonName --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String realName ) { if ( realNames == null ) { return realName ; } int realIndex = ArraysUtil . indexOf ( realNames , realName ) ; if ( realIndex == - 1 ) { return realName ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[beiwoutx]] ( final String realName ) { if ( realNames == null ) { return realName ; } int realIndex = ArraysUtil . indexOf ( realNames , realName ) ; if ( realIndex == - 1 ) { return realName ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 834 ---------------------------------------------
Visits an annotation . --> factory method for fallover - class --> Socre: 1.0

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String [[descriptor]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[descriptor]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[fallennaographicnction]] ( final String [[dclassir]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[dclassir]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 835 ---------------------------------------------
Find type data . --> Extract the TypeData for ptmanask --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[findSubclassTypeData]] ( final Class type ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( type . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData [[ptmanpassitlattype]] ( final Class type ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( type . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 836 ---------------------------------------------
Lookup the TypeData for the given type . --> Lookup TypeData --> Socre: 1.0

[[[[Adv]]]]: public TypeData [[lookupTypeData]] ( final Class [[type]] ) { TypeData typeData = typeDataMap . get ( [[type]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[type]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData [[looknetorsati]] ( final Class [[image]] ) { TypeData typeData = typeDataMap . get ( [[image]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[image]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[image]] ) ; typeDataMap . put ( [[image]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 837 ---------------------------------------------
Looks up the TypeData for the given type . --> Lookup TypeData for a class --> Socre: 1.0

[[[[Adv]]]]: protected TypeData _lookupTypeData ( final Class [[type]] ) { TypeData [[typeData]] = typeDataMap . get ( [[type]] ) ; if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , [[typeData]] ) ; } return [[typeData]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData _lookupTypeData ( final Class [[a]] ) { TypeData [[biditte]] = typeDataMap . get ( [[a]] ) ; if ( [[biditte]] == null ) { [[biditte]] = scanClassForAnnotations ( [[a]] ) ; typeDataMap . put ( [[a]] , [[biditte]] ) ; } return [[biditte]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 838 ---------------------------------------------
Resolves a name for a given type . --> get gajingdate date --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final Class type , final String name ) { TypeData [[typeData]] = lookupTypeData ( type ) ; return [[typeData]] . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String [[gajmoningdate]] ( final Class type , final String name ) { TypeData [[typinge]] = lookupTypeData ( type ) ; return [[typinge]] . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
[Succeeded / Failed / Skipped / Total] 603 / 211 / 25 / 839:  84%|████████▍ | 839/1000 [2:09:49<24:54,  9.28s/it][Succeeded / Failed / Skipped / Total] 603 / 211 / 25 / 839:  84%|████████▍ | 840/1000 [2:10:01<24:46,  9.29s/it][Succeeded / Failed / Skipped / Total] 604 / 211 / 25 / 840:  84%|████████▍ | 840/1000 [2:10:01<24:46,  9.29s/it][Succeeded / Failed / Skipped / Total] 604 / 211 / 25 / 840:  84%|████████▍ | 841/1000 [2:10:13<24:37,  9.29s/it][Succeeded / Failed / Skipped / Total] 605 / 211 / 25 / 841:  84%|████████▍ | 841/1000 [2:10:13<24:37,  9.29s/it][Succeeded / Failed / Skipped / Total] 605 / 211 / 25 / 841:  84%|████████▍ | 842/1000 [2:10:20<24:27,  9.29s/it][Succeeded / Failed / Skipped / Total] 606 / 211 / 25 / 842:  84%|████████▍ | 842/1000 [2:10:20<24:27,  9.29s/it][Succeeded / Failed / Skipped / Total] 606 / 211 / 25 / 842:  84%|████████▍ | 843/1000 [2:10:20<24:16,  9.28s/it][Succeeded / Failed / Skipped / Total] 607 / 211 / 25 / 843:  84%|████████▍ | 843/1000 [2:10:20<24:16,  9.28s/it][Succeeded / Failed / Skipped / Total] 607 / 211 / 25 / 843:  84%|████████▍ | 844/1000 [2:10:42<24:09,  9.29s/it][Succeeded / Failed / Skipped / Total] 608 / 211 / 25 / 844:  84%|████████▍ | 844/1000 [2:10:42<24:09,  9.29s/it][Succeeded / Failed / Skipped / Total] 608 / 211 / 25 / 844:  84%|████████▍ | 845/1000 [2:11:17<24:05,  9.32s/it][Succeeded / Failed / Skipped / Total] 609 / 211 / 25 / 845:  84%|████████▍ | 845/1000 [2:11:17<24:05,  9.32s/it][Succeeded / Failed / Skipped / Total] 609 / 211 / 25 / 845:  85%|████████▍ | 846/1000 [2:11:26<23:55,  9.32s/it][Succeeded / Failed / Skipped / Total] 609 / 212 / 25 / 846:  85%|████████▍ | 846/1000 [2:11:26<23:55,  9.32s/it][Succeeded / Failed / Skipped / Total] 609 / 212 / 25 / 846:  85%|████████▍ | 847/1000 [2:11:30<23:45,  9.32s/it]--------------------------------------------- Result 839 ---------------------------------------------
Returns the file content . --> This method is used to encode OpenForlets --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[openforletsheartonт]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 840 ---------------------------------------------
Copy the bootstrap methods . --> generate heaputures --> Socre: 1.0

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[geagehaputothots]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 841 ---------------------------------------------
Resolve the real name . --> Get the address of a particular type --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class type , final String jsonName ) { TypeData [[typeData]] = lookupTypeData ( type ) ; return [[typeData]] . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[addresslandpark]] ( final Class type , final String jsonName ) { TypeData [[bitace]] = lookupTypeData ( type ) ; return [[bitace]] . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 842 ---------------------------------------------
Create action runtime . --> create ActionRuntime --> Socre: 1.0

[[[[Adv]]]]: public ActionRuntime [[createActionRuntime]] ( final ActionHandler actionHandler , final Class [[actionClass]] , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , [[actionClass]] , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( [[actionClass]] ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime [[andificionsnerx]] ( final ActionHandler actionHandler , final Class [[unionour]] , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , [[unionour]] , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( [[unionour]] ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 843 ---------------------------------------------
Puts constant pool . --> Append complexeapable --> Socre: 1.0

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[complexeaparaepable]] ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 844 ---------------------------------------------
Put the bootstrap method flag . --> Add code to error --> Socre: 1.0

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector [[output]] ) { if ( bootstrapMethods != null ) { [[output]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[callbitterapopathors]] ( final ByteVector [[error]] ) { if ( bootstrapMethods != null ) { [[error]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 845 ---------------------------------------------
Adds a constant method reference . --> factory method reference --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantMethodref]] ( final String [[owner]] , final String name , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , [[owner]] , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[fxuicedetiteebotretl]] ( final String [[inventor]] , final String name , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , [[inventor]] , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 846 ---------------------------------------------
Adds a constant field ref . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantFieldref]] ( final String [[owner]] , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , [[owner]] , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[drawbenodontivuerupven]] ( final String [[ind]] , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , [[ind]] , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 847 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 609 / 213 / 25 / 847:  85%|████████▍ | 847/1000 [2:11:30<23:45,  9.32s/it][Succeeded / Failed / Skipped / Total] 609 / 213 / 25 / 847:  85%|████████▍ | 848/1000 [2:11:54<23:38,  9.33s/it][Succeeded / Failed / Skipped / Total] 610 / 213 / 25 / 848:  85%|████████▍ | 848/1000 [2:11:54<23:38,  9.33s/it][Succeeded / Failed / Skipped / Total] 610 / 213 / 25 / 848:  85%|████████▍ | 849/1000 [2:12:17<23:31,  9.35s/it][Succeeded / Failed / Skipped / Total] 611 / 213 / 25 / 849:  85%|████████▍ | 849/1000 [2:12:17<23:31,  9.35s/it][Succeeded / Failed / Skipped / Total] 611 / 213 / 25 / 849:  85%|████████▌ | 850/1000 [2:12:29<23:22,  9.35s/it][Succeeded / Failed / Skipped / Total] 611 / 214 / 25 / 850:  85%|████████▌ | 850/1000 [2:12:29<23:22,  9.35s/it][Succeeded / Failed / Skipped / Total] 611 / 214 / 25 / 850:  85%|████████▌ | 851/1000 [2:12:36<23:13,  9.35s/it][Succeeded / Failed / Skipped / Total] 612 / 214 / 25 / 851:  85%|████████▌ | 851/1000 [2:12:36<23:13,  9.35s/it][Succeeded / Failed / Skipped / Total] 612 / 214 / 25 / 851:  85%|████████▌ | 852/1000 [2:12:50<23:04,  9.35s/it][Succeeded / Failed / Skipped / Total] 612 / 215 / 25 / 852:  85%|████████▌ | 852/1000 [2:12:50<23:04,  9.35s/it][Succeeded / Failed / Skipped / Total] 612 / 215 / 25 / 852:  85%|████████▌ | 853/1000 [2:13:09<22:56,  9.37s/it][Succeeded / Failed / Skipped / Total] 613 / 215 / 25 / 853:  85%|████████▌ | 853/1000 [2:13:09<22:56,  9.37s/it][Succeeded / Failed / Skipped / Total] 613 / 215 / 25 / 853:  85%|████████▌ | 854/1000 [2:13:38<22:50,  9.39s/it]Sets the major version and constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int [[majorVersion]] , final String [[className]] ) { this . majorVersion = [[majorVersion]] ; this . className = [[className]] ; return addConstantClass ( [[className]] ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[classhajoorvreandstheim]] ( final int [[sectorject]] , final String [[labelhand]] ) { this . majorVersion = [[sectorject]] ; this . className = [[labelhand]] ; return addConstantClass ( [[labelhand]] ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 848 ---------------------------------------------
Adds a reference to the constant pool . --> object - like --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int index , final int tag , final String owner , final String [[name]] , final String descriptor ) { add ( new Entry ( index , tag , owner , [[name]] , descriptor , 0 , hash ( tag , owner , [[name]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[objecteanstratchpeferinurse]] ( final int index , final int tag , final String owner , final String [[a]] , final String descriptor ) { add ( new Entry ( index , tag , owner , [[a]] , descriptor , 0 , hash ( tag , owner , [[a]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 849 ---------------------------------------------
Adds a constant to the constant pool . --> appemangnint --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int [[index]] , final int tag , final int [[value]] ) { add ( new Entry ( [[index]] , tag , [[value]] , hash ( tag , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[appemangnintedarredleunt]] ( final int [[engine]] , final int tag , final int [[flag]] ) { add ( new Entry ( [[engine]] , tag , [[flag]] , hash ( tag , [[flag]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 850 ---------------------------------------------
Adds a constant reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry [[addConstantMemberReference]] ( final int tag , final String owner , final String name , final String descriptor ) { int [[hashCode]] = hash ( tag , owner , name , descriptor ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == [[hashCode]] && [[entry]] . owner . equals ( owner ) && [[entry]] . name . equals ( name ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry [[plylikenantagomfulredve]] ( final int tag , final String owner , final String name , final String descriptor ) { int [[dastag]] = hash ( tag , owner , name , descriptor ) ; Entry [[exit]] = get ( [[dastag]] ) ; while ( [[exit]] != null ) { if ( [[exit]] . tag == tag && [[exit]] . hashCode == [[dastag]] && [[exit]] . owner . equals ( owner ) && [[exit]] . name . equals ( name ) && [[exit]] . value . equals ( descriptor ) ) { return [[exit]] ; } [[exit]] = [[exit]] . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , [[dastag]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 851 ---------------------------------------------
Adds a long or double constant . --> add an entry --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantLongOrDouble]] ( final int index , final int tag , final long value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[ifemanrilableartluiver]] ( final int index , final int tag , final long value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 852 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantIntegerOrFloat]] ( final int [[tag]] , final int value ) { int hashCode = hash ( [[tag]] , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( [[tag]] ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[enengnaanuedretpag]] ( final int [[book]] , final int value ) { int hashCode = hash ( [[book]] , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[book]] && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( [[book]] ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , [[book]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 853 ---------------------------------------------
Adds a constant name and type to the symbol table . --> addenitier --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int index , final String name , final String [[descriptor]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , name , [[descriptor]] , hash ( tag , name , [[descriptor]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[addingenanitierandalplay]] ( final int index , final String name , final String [[readoliser]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , name , [[readoliser]] , hash ( tag , name , [[readoliser]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 854 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 613 / 216 / 25 / 854:  85%|████████▌ | 854/1000 [2:13:38<22:50,  9.39s/it][Succeeded / Failed / Skipped / Total] 613 / 216 / 25 / 854:  86%|████████▌ | 855/1000 [2:13:51<22:42,  9.39s/it][Succeeded / Failed / Skipped / Total] 613 / 217 / 25 / 855:  86%|████████▌ | 855/1000 [2:13:51<22:42,  9.39s/it][Succeeded / Failed / Skipped / Total] 613 / 217 / 25 / 855:  86%|████████▌ | 856/1000 [2:14:01<22:32,  9.39s/it][Succeeded / Failed / Skipped / Total] 614 / 217 / 25 / 856:  86%|████████▌ | 856/1000 [2:14:01<22:32,  9.39s/it][Succeeded / Failed / Skipped / Total] 614 / 217 / 25 / 856:  86%|████████▌ | 857/1000 [2:14:07<22:22,  9.39s/it][Succeeded / Failed / Skipped / Total] 614 / 218 / 25 / 857:  86%|████████▌ | 857/1000 [2:14:07<22:22,  9.39s/it][Succeeded / Failed / Skipped / Total] 614 / 218 / 25 / 857:  86%|████████▌ | 858/1000 [2:14:08<22:12,  9.38s/it][Succeeded / Failed / Skipped / Total] 614 / 219 / 25 / 858:  86%|████████▌ | 858/1000 [2:14:08<22:12,  9.38s/it][Succeeded / Failed / Skipped / Total] 614 / 219 / 25 / 858:  86%|████████▌ | 859/1000 [2:14:11<22:01,  9.37s/it][Succeeded / Failed / Skipped / Total] 615 / 219 / 25 / 859:  86%|████████▌ | 859/1000 [2:14:11<22:01,  9.37s/it][Succeeded / Failed / Skipped / Total] 615 / 219 / 25 / 859:  86%|████████▌ | 860/1000 [2:14:45<21:56,  9.40s/it]Adds a long or double constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantLongOrDouble]] ( final int tag , final long [[value]] ) { int hashCode = hash ( tag , [[value]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == [[value]] ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( [[value]] ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[importcominguenactjectwithlotor]] ( final int tag , final long [[length]] ) { int hashCode = hash ( tag , [[length]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == [[length]] ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( [[length]] ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , [[length]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 855 ---------------------------------------------
Adds a UTF8 constant . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int [[index]] , final String value ) { add ( new Entry ( [[index]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[altedsultridclass]] ( final int [[export]] , final String value ) { add ( new Entry ( [[export]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 856 ---------------------------------------------
Add a constant method handle . --> Method handleHandlers --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[withhowgnatherchoidhandл]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 857 ---------------------------------------------
Adds a named constant . --> [[[FAILED]]]

[[[[Adv]]]]: int addConstantNameAndType ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[hashCode]] = hash ( tag , name , descriptor ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[hashCode]] && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int addConstantNameAndType ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[ashplane]] = hash ( tag , name , descriptor ) ; Entry entry = get ( [[ashplane]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[ashplane]] && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , [[ashplane]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 858 ---------------------------------------------
Adds a UTF8 constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: int addConstantUtf8 ( final String value ) { int [[hashCode]] = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == Symbol . CONSTANT_UTF8_TAG && [[entry]] . hashCode == [[hashCode]] && [[entry]] . value . equals ( value ) ) { return [[entry]] . index ; } [[entry]] = [[entry]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int addConstantUtf8 ( final String value ) { int [[coinplate]] = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry [[x]] = get ( [[coinplate]] ) ; while ( [[x]] != null ) { if ( [[x]] . tag == Symbol . CONSTANT_UTF8_TAG && [[x]] . hashCode == [[coinplate]] && [[x]] . value . equals ( value ) ) { return [[x]] . index ; } [[x]] = [[x]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , [[coinplate]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 859 ---------------------------------------------
Adds a constant method handle . --> add answer --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantMethodHandle]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[answereaaxsamattousiklean]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 860 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 616 / 219 / 25 / 860:  86%|████████▌ | 860/1000 [2:14:45<21:56,  9.40s/it][Succeeded / Failed / Skipped / Total] 616 / 219 / 25 / 860:  86%|████████▌ | 861/1000 [2:15:39<21:54,  9.45s/it][Succeeded / Failed / Skipped / Total] 617 / 219 / 25 / 861:  86%|████████▌ | 861/1000 [2:15:39<21:54,  9.45s/it][Succeeded / Failed / Skipped / Total] 617 / 219 / 25 / 861:  86%|████████▌ | 862/1000 [2:15:56<21:45,  9.46s/it][Succeeded / Failed / Skipped / Total] 617 / 220 / 25 / 862:  86%|████████▌ | 862/1000 [2:15:56<21:45,  9.46s/it][Succeeded / Failed / Skipped / Total] 617 / 220 / 25 / 862:  86%|████████▋ | 863/1000 [2:16:05<21:36,  9.46s/it][Succeeded / Failed / Skipped / Total] 617 / 221 / 25 / 863:  86%|████████▋ | 863/1000 [2:16:05<21:36,  9.46s/it][Succeeded / Failed / Skipped / Total] 617 / 221 / 25 / 863:  86%|████████▋ | 864/1000 [2:16:12<21:26,  9.46s/it][Succeeded / Failed / Skipped / Total] 617 / 222 / 25 / 864:  86%|████████▋ | 864/1000 [2:16:12<21:26,  9.46s/it][Succeeded / Failed / Skipped / Total] 617 / 222 / 25 / 864:  86%|████████▋ | 865/1000 [2:16:35<21:19,  9.48s/it]Add a static invoke dynamic method . --> static factory methods --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantInvokeDynamic]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[bootstrapMethod]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , [[bootstrapMethod]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[uteaitannitrakelneval]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[habitstreompeboid]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , [[habitstreompeboid]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 861 ---------------------------------------------
Add a static constant . --> specialed for testing --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantDynamic]] ( final String name , final String descriptor , final Handle [[bootstrapMethodHandle]] , final Object ... bootstrapMethodArguments ) { Symbol [[bootstrapMethod]] = addBootstrapMethod ( [[bootstrapMethodHandle]] , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , [[bootstrapMethod]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[additionsarshtzedunlent]] ( final String name , final String descriptor , final Handle [[treadthalмshoostifullet]] , final Object ... bootstrapMethodArguments ) { Symbol [[shoestroapadt]] = addBootstrapMethod ( [[treadthalмshoostifullet]] , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , [[shoestroapadt]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 862 ---------------------------------------------
Adds or invoke dynamic reference . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int [[tag]] , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( [[tag]] , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( [[tag]] , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int [[hat]] , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( [[hat]] , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[hat]] && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( [[hat]] , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[hat]] , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 863 ---------------------------------------------
Adds a static constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantUtf8Reference ( final int tag , final String [[value]] ) { int hashCode = hash ( tag , [[value]] ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . value . equals ( [[value]] ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put12 ( tag , addConstantUtf8 ( [[value]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantUtf8Reference ( final int tag , final String [[j]] ) { int hashCode = hash ( tag , [[j]] ) ; Entry [[export]] = get ( hashCode ) ; while ( [[export]] != null ) { if ( [[export]] . tag == tag && [[export]] . hashCode == hashCode && [[export]] . value . equals ( [[j]] ) ) { return [[export]] ; } [[export]] = [[export]] . next ; } constantPool . put12 ( tag , addConstantUtf8 ( [[j]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[j]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 864 ---------------------------------------------
Add dynamic or invoke dynamic reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantDynamicOrInvokeDynamicReference ( final int [[tag]] , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int [[hashCode]] = hash ( [[tag]] , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , [[tag]] , null , name , descriptor , bootstrapMethodIndex , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantDynamicOrInvokeDynamicReference ( final int [[emblem]] , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int [[signgage]] = hash ( [[emblem]] , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , [[emblem]] , null , name , descriptor , bootstrapMethodIndex , [[signgage]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 865 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 618 / 222 / 25 / 865:  86%|████████▋ | 865/1000 [2:16:35<21:19,  9.48s/it][Succeeded / Failed / Skipped / Total] 618 / 222 / 25 / 865:  87%|████████▋ | 866/1000 [2:16:40<21:08,  9.47s/it][Succeeded / Failed / Skipped / Total] 618 / 223 / 25 / 866:  87%|████████▋ | 866/1000 [2:16:40<21:08,  9.47s/it][Succeeded / Failed / Skipped / Total] 618 / 223 / 25 / 866:  87%|████████▋ | 867/1000 [2:16:49<20:59,  9.47s/it][Succeeded / Failed / Skipped / Total] 619 / 223 / 25 / 867:  87%|████████▋ | 867/1000 [2:16:49<20:59,  9.47s/it][Succeeded / Failed / Skipped / Total] 619 / 223 / 25 / 867:  87%|████████▋ | 868/1000 [2:17:04<20:50,  9.48s/it][Succeeded / Failed / Skipped / Total] 619 / 224 / 25 / 868:  87%|████████▋ | 868/1000 [2:17:04<20:50,  9.48s/it][Succeeded / Failed / Skipped / Total] 619 / 224 / 25 / 868:  87%|████████▋ | 869/1000 [2:17:08<20:40,  9.47s/it][Succeeded / Failed / Skipped / Total] 619 / 225 / 25 / 869:  87%|████████▋ | 869/1000 [2:17:08<20:40,  9.47s/it][Succeeded / Failed / Skipped / Total] 619 / 225 / 25 / 869:  87%|████████▋ | 870/1000 [2:17:45<20:35,  9.50s/it][Succeeded / Failed / Skipped / Total] 619 / 226 / 25 / 870:  87%|████████▋ | 870/1000 [2:17:45<20:35,  9.50s/it][Succeeded / Failed / Skipped / Total] 619 / 226 / 25 / 870:  87%|████████▋ | 871/1000 [2:17:46<20:24,  9.49s/it][Succeeded / Failed / Skipped / Total] 619 / 227 / 25 / 871:  87%|████████▋ | 871/1000 [2:17:46<20:24,  9.49s/it][Succeeded / Failed / Skipped / Total] 619 / 227 / 25 / 871:  87%|████████▋ | 872/1000 [2:18:05<20:16,  9.50s/it][Succeeded / Failed / Skipped / Total] 620 / 227 / 25 / 872:  87%|████████▋ | 872/1000 [2:18:05<20:16,  9.50s/it][Succeeded / Failed / Skipped / Total] 620 / 227 / 25 / 872:  87%|████████▋ | 873/1000 [2:18:17<20:07,  9.50s/it]Add a merged type . --> addfiledgege --> Socre: 1.0

[[[[Adv]]]]: int [[addMergedType]] ( final int typeTableIndex1 , final int [[typeTableIndex2]] ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int [[addedfiledge]] ( final int typeTableIndex1 , final int [[formatthingdedendgen]] ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 866 ---------------------------------------------
Adds a reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int index , final int [[tag]] , final String value ) { add ( new Entry ( index , [[tag]] , value , hash ( [[tag]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[end1paruncd13antrice]] ( final int index , final int [[ring]] , final String value ) { add ( new Entry ( index , [[ring]] , value , hash ( [[ring]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 867 ---------------------------------------------
Compute a hash for a name . --> Gets a tally from a name --> Socre: 1.0

[[[[Adv]]]]: private int [[hash]] ( final String name ) { int [[h]] = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } [[h]] = 31 * [[h]] + c ; } if ( [[h]] > 0 ) { return [[h]] ; } if ( [[h]] == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - [[h]] ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[tally]] ( final String name ) { int [[chest]] = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } [[chest]] = 31 * [[chest]] + c ; } if ( [[chest]] > 0 ) { return [[chest]] ; } if ( [[chest]] == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - [[chest]] ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 868 ---------------------------------------------
Add bootstrap method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle [[bootstrapMethodHandle]] , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[idfreearelomrthount]] ( final Handle [[tagdrapetapooden]] , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 869 ---------------------------------------------
Removes all entries from the multimap . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[covert]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 870 ---------------------------------------------
Returns an iterator over the elements in the map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > iterator ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > [[next]] ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > [[next]] = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return [[next]] ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > iterator ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > [[soon]] ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > [[soon]] = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return [[soon]] ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 871 ---------------------------------------------
Returns all the entries in this map . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > [[all]] = new LinkedList <> ( ) ; MapEntry < V > [[e]] = head . after ; while ( [[e]] != head ) { [[all]] . add ( [[e]] ) ; [[e]] = [[e]] . after ; } return [[all]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[archives]] ( ) { List < Map . Entry < String , V > > [[any]] = new LinkedList <> ( ) ; MapEntry < V > [[ε]] = head . after ; while ( [[ε]] != head ) { [[any]] . add ( [[ε]] ) ; [[ε]] = [[ε]] . after ; } return [[any]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 872 ---------------------------------------------
Visits an annotation . --> Visits the latindm mapping --> Socre: 1.0

[[[[Adv]]]]: @ Override public AnnotationVisitor [[visitAnnotation]] ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor [[latindmappingtorium]] ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 873 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 620 / 228 / 25 / 873:  87%|████████▋ | 873/1000 [2:18:17<20:07,  9.50s/it][Succeeded / Failed / Skipped / Total] 620 / 228 / 25 / 873:  87%|████████▋ | 874/1000 [2:18:19<19:56,  9.50s/it][Succeeded / Failed / Skipped / Total] 621 / 228 / 25 / 874:  87%|████████▋ | 874/1000 [2:18:19<19:56,  9.50s/it][Succeeded / Failed / Skipped / Total] 621 / 228 / 25 / 874:  88%|████████▊ | 875/1000 [2:18:21<19:45,  9.49s/it][Succeeded / Failed / Skipped / Total] 622 / 228 / 25 / 875:  88%|████████▊ | 875/1000 [2:18:21<19:45,  9.49s/it][Succeeded / Failed / Skipped / Total] 622 / 228 / 25 / 875:  88%|████████▊ | 876/1000 [2:18:25<19:35,  9.48s/it][Succeeded / Failed / Skipped / Total] 623 / 228 / 25 / 876:  88%|████████▊ | 876/1000 [2:18:25<19:35,  9.48s/it][Succeeded / Failed / Skipped / Total] 623 / 228 / 25 / 876:  88%|████████▊ | 877/1000 [2:18:28<19:25,  9.47s/it][Succeeded / Failed / Skipped / Total] 624 / 228 / 25 / 877:  88%|████████▊ | 877/1000 [2:18:28<19:25,  9.47s/it][Succeeded / Failed / Skipped / Total] 624 / 228 / 25 / 877:  88%|████████▊ | 878/1000 [2:18:36<19:15,  9.47s/it][Succeeded / Failed / Skipped / Total] 625 / 228 / 25 / 878:  88%|████████▊ | 878/1000 [2:18:36<19:15,  9.47s/it][Succeeded / Failed / Skipped / Total] 625 / 228 / 25 / 878:  88%|████████▊ | 879/1000 [2:18:48<19:06,  9.48s/it][Succeeded / Failed / Skipped / Total] 625 / 229 / 25 / 879:  88%|████████▊ | 879/1000 [2:18:48<19:06,  9.48s/it][Succeeded / Failed / Skipped / Total] 625 / 229 / 25 / 879:  88%|████████▊ | 880/1000 [2:18:48<18:55,  9.46s/it][Succeeded / Failed / Skipped / Total] 626 / 229 / 25 / 880:  88%|████████▊ | 880/1000 [2:18:48<18:55,  9.46s/it][Succeeded / Failed / Skipped / Total] 626 / 229 / 25 / 880:  88%|████████▊ | 881/1000 [2:18:50<18:45,  9.46s/it]Returns all values for the specified name . --> [[[FAILED]]]

[[[[Adv]]]]: public List < V > [[getAll]] ( final String [[name]] ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( [[name]] ) ; int i = index ( h ) ; MapEntry < V > [[e]] = entries [ i ] ; while ( [[e]] != null ) { if ( [[e]] . hash == h && eq ( [[name]] , [[e]] . key ) ) { values . addFirst ( [[e]] . getValue ( ) ) ; } [[e]] = [[e]] . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[topland]] ( final String [[address]] ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( [[address]] ) ; int i = index ( h ) ; MapEntry < V > [[g]] = entries [ i ] ; while ( [[g]] != null ) { if ( [[g]] . hash == h && eq ( [[address]] , [[g]] . key ) ) { values . addFirst ( [[g]] . getValue ( ) ) ; } [[g]] = [[g]] . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 874 ---------------------------------------------
Create the end of the chain . --> Visit endpoints --> Socre: 1.0

[[[[Adv]]]]: @ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[p]] = 0 ; [[p]] < tmd . proxyData . length ; [[p]] ++ ) { tmd . selectCurrentProxy ( [[p]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[date]] = 0 ; [[date]] < tmd . proxyData . length ; [[date]] ++ ) { tmd . selectCurrentProxy ( [[date]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 875 ---------------------------------------------
Appends a portion of a CharSequence to the buffer . --> append a syllable --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer append ( final CharSequence [[csq]] , final int start , final int end ) { for ( int [[i]] = start ; [[i]] < end ; [[i]] ++ ) { append ( [[csq]] . charAt ( [[i]] ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer append ( final CharSequence [[lsق]] , final int start , final int end ) { for ( int [[you]] = start ; [[you]] < end ; [[you]] ++ ) { append ( [[lsق]] . charAt ( [[you]] ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 876 ---------------------------------------------
Grows the buffer s capacity if necessary . --> If ngucsi is nach to ngucsi --> Socre: 1.0

[[[[Adv]]]]: private void [[grow]] ( final int [[minCapacity]] ) { final int [[oldCapacity]] = buffer . length ; int newCapacity = [[oldCapacity]] << 1 ; if ( newCapacity - [[minCapacity]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[fall]] ( final int [[nangpucsi]] ) { final int [[oldspopstaly]] = buffer . length ; int newCapacity = [[oldspopstaly]] << 1 ; if ( newCapacity - [[nangpucsi]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 877 ---------------------------------------------
Create the start chain delegate . --> Schedules the challenge - chcant --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[createdchallcandeepats_schedule]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 878 ---------------------------------------------
Create the first chain delegate . --> Generate artfile instructions --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[artputdotgranceacting8site]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 879 ---------------------------------------------
Adds a new field to the path . --> [[[FAILED]]]

[[[[Adv]]]]: public Path [[push]] ( final CharSequence [[field]] ) { _push ( [[field]] ) ; if ( altPath != null ) { altPath . push ( [[field]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[pressed]] ( final CharSequence [[bracket]] ) { _push ( [[bracket]] ) ; if ( altPath != null ) { altPath . push ( [[bracket]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 880 ---------------------------------------------
Configure the servlet context . --> package private for testing --> Socre: 1.0

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[cansibareseرperlaroctext]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 881 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 627 / 229 / 25 / 881:  88%|████████▊ | 881/1000 [2:18:50<18:45,  9.46s/it][Succeeded / Failed / Skipped / Total] 627 / 229 / 25 / 881:  88%|████████▊ | 882/1000 [2:18:53<18:34,  9.45s/it][Succeeded / Failed / Skipped / Total] 628 / 229 / 25 / 882:  88%|████████▊ | 882/1000 [2:18:53<18:34,  9.45s/it][Succeeded / Failed / Skipped / Total] 628 / 229 / 25 / 882:  88%|████████▊ | 883/1000 [2:19:08<18:26,  9.45s/it][Succeeded / Failed / Skipped / Total] 629 / 229 / 25 / 883:  88%|████████▊ | 883/1000 [2:19:08<18:26,  9.45s/it][Succeeded / Failed / Skipped / Total] 629 / 229 / 25 / 883:  88%|████████▊ | 884/1000 [2:19:24<18:17,  9.46s/it][Succeeded / Failed / Skipped / Total] 630 / 229 / 25 / 884:  88%|████████▊ | 884/1000 [2:19:24<18:17,  9.46s/it][Succeeded / Failed / Skipped / Total] 630 / 229 / 25 / 884:  88%|████████▊ | 885/1000 [2:19:29<18:07,  9.46s/it][Succeeded / Failed / Skipped / Total] 631 / 229 / 25 / 885:  88%|████████▊ | 885/1000 [2:19:29<18:07,  9.46s/it][Succeeded / Failed / Skipped / Total] 631 / 229 / 25 / 885:  89%|████████▊ | 886/1000 [2:19:39<17:58,  9.46s/it][Succeeded / Failed / Skipped / Total] 632 / 229 / 25 / 886:  89%|████████▊ | 886/1000 [2:19:39<17:58,  9.46s/it][Succeeded / Failed / Skipped / Total] 632 / 229 / 25 / 886:  89%|████████▊ | 887/1000 [2:20:01<17:50,  9.47s/it][Succeeded / Failed / Skipped / Total] 633 / 229 / 25 / 887:  89%|████████▊ | 887/1000 [2:20:01<17:50,  9.47s/it][Succeeded / Failed / Skipped / Total] 633 / 229 / 25 / 887:  89%|████████▉ | 888/1000 [2:20:04<17:40,  9.46s/it]Parse a string . --> tresst trail --> Socre: 1.0

[[[[Adv]]]]: public static Path [[parse]] ( final String [[path]] ) { return [[path]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[path]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path [[tresst]] ( final String [[trail]] ) { return [[trail]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[trail]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 882 ---------------------------------------------
Execute the method --> Execute the chaincode --> Socre: 1.0

[[[[Adv]]]]: public Object execute ( ) { String [[methodName]] = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , [[methodName]] , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object execute ( ) { String [[deform]] = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , [[deform]] , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 883 ---------------------------------------------
Converts jtxTransactionMode to DbTransactionMode . --> create dbudisogon --> Socre: 1.0

[[[[Adv]]]]: public static DbTransactionMode [[convertToDbMode]] ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode [[qtudisogon]] ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 884 ---------------------------------------------
Reads the property from the source object . --> Obtains the number of times a getter --> Socre: 1.0

[[[[Adv]]]]: private Object [[readProperty]] ( final Object source , final PropertyDescriptor [[propertyDescriptor]] ) { Getter getter = [[propertyDescriptor]] . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[countturfetri]] ( final Object source , final PropertyDescriptor [[gemresertu]] ) { Getter getter = [[gemresertu]] . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 885 ---------------------------------------------
Copies all entries from the given map into this map . --> todo copy --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[pushnot]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 886 ---------------------------------------------
Appends the given buffer to this buffer . --> Return applicationlist --> Socre: 1.0

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer buffer ) { if ( buffer . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[applicationlist]] ( final Buffer buffer ) { if ( buffer . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 887 ---------------------------------------------
Write this list to an output stream . -->  love life cycle --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream [[out]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; [[out]] . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[out]] ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void [[lovefor]] ( final OutputStream [[end]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; [[end]] . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[end]] ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 888 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 634 / 229 / 25 / 888:  89%|████████▉ | 888/1000 [2:20:04<17:40,  9.46s/it][Succeeded / Failed / Skipped / Total] 634 / 229 / 25 / 888:  89%|████████▉ | 889/1000 [2:20:16<17:30,  9.47s/it][Succeeded / Failed / Skipped / Total] 634 / 230 / 25 / 889:  89%|████████▉ | 889/1000 [2:20:16<17:30,  9.47s/it][Succeeded / Failed / Skipped / Total] 634 / 230 / 25 / 889:  89%|████████▉ | 890/1000 [2:20:17<17:20,  9.46s/it][Succeeded / Failed / Skipped / Total] 635 / 230 / 25 / 890:  89%|████████▉ | 890/1000 [2:20:17<17:20,  9.46s/it][Succeeded / Failed / Skipped / Total] 635 / 230 / 25 / 890:  89%|████████▉ | 891/1000 [2:20:38<17:12,  9.47s/it][Succeeded / Failed / Skipped / Total] 635 / 231 / 25 / 891:  89%|████████▉ | 891/1000 [2:20:38<17:12,  9.47s/it][Succeeded / Failed / Skipped / Total] 635 / 231 / 25 / 891:  89%|████████▉ | 892/1000 [2:20:45<17:02,  9.47s/it][Succeeded / Failed / Skipped / Total] 635 / 232 / 25 / 892:  89%|████████▉ | 892/1000 [2:20:45<17:02,  9.47s/it][Succeeded / Failed / Skipped / Total] 635 / 232 / 25 / 892:  89%|████████▉ | 893/1000 [2:20:45<16:51,  9.46s/it][Succeeded / Failed / Skipped / Total] 636 / 232 / 25 / 893:  89%|████████▉ | 893/1000 [2:20:45<16:51,  9.46s/it][Succeeded / Failed / Skipped / Total] 636 / 232 / 25 / 893:  89%|████████▉ | 894/1000 [2:20:58<16:42,  9.46s/it][Succeeded / Failed / Skipped / Total] 637 / 232 / 25 / 894:  89%|████████▉ | 894/1000 [2:20:58<16:42,  9.46s/it][Succeeded / Failed / Skipped / Total] 637 / 232 / 25 / 894:  90%|████████▉ | 895/1000 [2:21:03<16:32,  9.46s/it]Write this list to the specified writer . --> Perform apple appending --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final Writer writer ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream [[inputStream]] = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( [[inputStream]] , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( [[inputStream]] ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void [[poettime]] ( final Writer writer ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream [[applesdev]] = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( [[applesdev]] , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( [[applesdev]] ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 889 ---------------------------------------------
Gets the FieldDescriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { allFields [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { allFields [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 890 ---------------------------------------------
Creates a bean definition for registration . --> Create a BeanDefinition for the proxy --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[name]] , Class < T > [[type]] , final Scope scope , final WiringMode [[wiringMode]] , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[originalType]] = [[type]] ; final ProxettaFactory [[builder]] = proxetta . proxy ( ) ; [[builder]] . setTarget ( [[type]] ) ; [[type]] = [[builder]] . define ( ) ; return new ProxettaBeanDefinition ( [[name]] , [[type]] , scope , [[wiringMode]] , [[originalType]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( [[name]] , [[type]] , scope , [[wiringMode]] , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[death]] , Class < T > [[view]] , final Scope scope , final WiringMode [[roofkodel]] , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[alternativefect]] = [[view]] ; final ProxettaFactory [[carpenter]] = proxetta . proxy ( ) ; [[carpenter]] . setTarget ( [[view]] ) ; [[view]] = [[carpenter]] . define ( ) ; return new ProxettaBeanDefinition ( [[death]] , [[view]] , scope , [[roofkodel]] , [[alternativefect]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( [[death]] , [[view]] , scope , [[roofkodel]] , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 891 ---------------------------------------------
Write this response to an output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream out , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[holdt]] ( final OutputStream out , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 892 ---------------------------------------------
Get a string value for a given key . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getString]] ( final String [[key]] ) { CharSequence [[cs]] = ( CharSequence ) map . get ( [[key]] ) ; return [[cs]] == null ? null : [[cs]] . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[findsfuld]] ( final String [[cabinet]] ) { CharSequence [[canvas]] = ( CharSequence ) map . get ( [[cabinet]] ) ; return [[canvas]] == null ? null : [[canvas]] . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 893 ---------------------------------------------
Returns the integer value for the given key . --> Bookout event --> Socre: 1.0

[[[[Adv]]]]: public Integer [[getInteger]] ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Integer ) { return ( Integer ) [[number]] ; } return [[number]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer [[bookoutvent]] ( final String key ) { Number [[c]] = ( Number ) map . get ( key ) ; if ( [[c]] == null ) { return null ; } if ( [[c]] instanceof Integer ) { return ( Integer ) [[c]] ; } return [[c]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 894 ---------------------------------------------
Gets a long value . --> Get number from question --> Socre: 1.0

[[[[Adv]]]]: public Long [[getLong]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long [[buyl]] ( final String [[ask]] ) { Number number = ( Number ) map . get ( [[ask]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 895 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 637 / 233 / 25 / 895:  90%|████████▉ | 895/1000 [2:21:03<16:32,  9.46s/it][Succeeded / Failed / Skipped / Total] 637 / 233 / 25 / 895:  90%|████████▉ | 896/1000 [2:21:18<16:24,  9.46s/it][Succeeded / Failed / Skipped / Total] 637 / 234 / 25 / 896:  90%|████████▉ | 896/1000 [2:21:18<16:24,  9.46s/it][Succeeded / Failed / Skipped / Total] 637 / 234 / 25 / 896:  90%|████████▉ | 897/1000 [2:21:22<16:14,  9.46s/it][Succeeded / Failed / Skipped / Total] 638 / 234 / 25 / 897:  90%|████████▉ | 897/1000 [2:21:22<16:14,  9.46s/it][Succeeded / Failed / Skipped / Total] 638 / 234 / 25 / 897:  90%|████████▉ | 898/1000 [2:21:27<16:04,  9.45s/it][Succeeded / Failed / Skipped / Total] 638 / 235 / 25 / 898:  90%|████████▉ | 898/1000 [2:21:27<16:04,  9.45s/it][Succeeded / Failed / Skipped / Total] 638 / 235 / 25 / 898:  90%|████████▉ | 899/1000 [2:21:39<15:54,  9.45s/it][Succeeded / Failed / Skipped / Total] 639 / 235 / 25 / 899:  90%|████████▉ | 899/1000 [2:21:39<15:54,  9.45s/it][Succeeded / Failed / Skipped / Total] 639 / 235 / 25 / 899:  90%|█████████ | 900/1000 [2:21:41<15:44,  9.45s/it][Succeeded / Failed / Skipped / Total] 640 / 235 / 25 / 900:  90%|█████████ | 900/1000 [2:21:41<15:44,  9.45s/it][Succeeded / Failed / Skipped / Total] 640 / 235 / 25 / 900:  90%|█████████ | 901/1000 [2:21:42<15:34,  9.44s/it][Succeeded / Failed / Skipped / Total] 640 / 236 / 25 / 901:  90%|█████████ | 901/1000 [2:21:42<15:34,  9.44s/it][Succeeded / Failed / Skipped / Total] 640 / 236 / 25 / 901:  90%|█████████ | 902/1000 [2:21:43<15:23,  9.43s/it][Succeeded / Failed / Skipped / Total] 641 / 236 / 25 / 902:  90%|█████████ | 902/1000 [2:21:43<15:23,  9.43s/it][Succeeded / Failed / Skipped / Total] 641 / 236 / 25 / 902:  90%|█████████ | 903/1000 [2:21:57<15:14,  9.43s/it][Succeeded / Failed / Skipped / Total] 642 / 236 / 25 / 903:  90%|█████████ | 903/1000 [2:21:57<15:14,  9.43s/it][Succeeded / Failed / Skipped / Total] 642 / 236 / 25 / 903:  90%|█████████ | 904/1000 [2:21:57<15:04,  9.42s/it]Get a property value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T getValue ( final String key ) { T [[val]] = ( T ) map . get ( key ) ; if ( [[val]] instanceof Map ) { return ( T ) new JsonObject ( ( Map ) [[val]] ) ; } if ( [[val]] instanceof List ) { return ( T ) new JsonArray ( ( List ) [[val]] ) ; } return [[val]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T getValue ( final String key ) { T [[name]] = ( T ) map . get ( key ) ; if ( [[name]] instanceof Map ) { return ( T ) new JsonObject ( ( Map ) [[name]] ) ; } if ( [[name]] instanceof List ) { return ( T ) new JsonArray ( ( List ) [[name]] ) ; } return [[name]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 896 ---------------------------------------------
Returns the Double value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Double [[getDouble]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double [[zipangry]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 897 ---------------------------------------------
Sets the mail folder . --> Connect the personaller --> Socre: 1.0

[[[[Adv]]]]: public void [[useFolder]] ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void [[personallovner]] ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 898 ---------------------------------------------
Get float value . --> [[[FAILED]]]

[[[[Adv]]]]: public Float [[getFloat]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[receivegrours]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 899 ---------------------------------------------
Receive messages . --> Fetch filtered messages --> Socre: 1.0

[[[[Adv]]]]: ReceivedEmail [ ] [[receiveMessages]] ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] [[filterveskaders]] ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 900 ---------------------------------------------
Updates the flags for the given mailbox . --> Sets EDiteselas --> Socre: 1.0

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[editeselmeas]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 901 ---------------------------------------------
Add a new string value . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonObject [[put]] ( final String key , final String value ) { Objects . requireNonNull ( key ) ; map . put ( key , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject [[fore]] ( final String key , final String value ) { Objects . requireNonNull ( key ) ; map . put ( key , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 902 ---------------------------------------------
Close folder if already opened . --> Close relcastters --> Socre: 1.0

[[[[Adv]]]]: protected void [[closeFolderIfOpened]] ( final Folder folder ) { if ( folder != null ) { try { folder . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void [[relcastattercyclewncut]] ( final Folder folder ) { if ( folder != null ) { try { folder . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 903 ---------------------------------------------
Create alias for target . -->  exploit this method --> Socre: 1.0

[[[[Adv]]]]: protected String [[alias]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[exploit]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
[Succeeded / Failed / Skipped / Total] 642 / 236 / 26 / 904:  90%|█████████ | 904/1000 [2:21:57<15:04,  9.42s/it][Succeeded / Failed / Skipped / Total] 642 / 236 / 26 / 904:  90%|█████████ | 905/1000 [2:22:02<14:54,  9.42s/it][Succeeded / Failed / Skipped / Total] 643 / 236 / 26 / 905:  90%|█████████ | 905/1000 [2:22:02<14:54,  9.42s/it][Succeeded / Failed / Skipped / Total] 643 / 236 / 26 / 905:  91%|█████████ | 906/1000 [2:22:24<14:46,  9.43s/it][Succeeded / Failed / Skipped / Total] 644 / 236 / 26 / 906:  91%|█████████ | 906/1000 [2:22:24<14:46,  9.43s/it][Succeeded / Failed / Skipped / Total] 644 / 236 / 26 / 906:  91%|█████████ | 907/1000 [2:22:28<14:36,  9.42s/it][Succeeded / Failed / Skipped / Total] 645 / 236 / 26 / 907:  91%|█████████ | 907/1000 [2:22:28<14:36,  9.42s/it][Succeeded / Failed / Skipped / Total] 645 / 236 / 26 / 907:  91%|█████████ | 908/1000 [2:22:35<14:26,  9.42s/it][Succeeded / Failed / Skipped / Total] 646 / 236 / 26 / 908:  91%|█████████ | 908/1000 [2:22:35<14:26,  9.42s/it][Succeeded / Failed / Skipped / Total] 646 / 236 / 26 / 908:  91%|█████████ | 909/1000 [2:22:38<14:16,  9.42s/it][Succeeded / Failed / Skipped / Total] 647 / 236 / 26 / 909:  91%|█████████ | 909/1000 [2:22:38<14:16,  9.42s/it][Succeeded / Failed / Skipped / Total] 647 / 236 / 26 / 909:  91%|█████████ | 910/1000 [2:22:46<14:07,  9.41s/it][Succeeded / Failed / Skipped / Total] 648 / 236 / 26 / 910:  91%|█████████ | 910/1000 [2:22:46<14:07,  9.41s/it][Succeeded / Failed / Skipped / Total] 648 / 236 / 26 / 910:  91%|█████████ | 911/1000 [2:22:50<13:57,  9.41s/it][Succeeded / Failed / Skipped / Total] 649 / 236 / 26 / 911:  91%|█████████ | 911/1000 [2:22:50<13:57,  9.41s/it][Succeeded / Failed / Skipped / Total] 649 / 236 / 26 / 911:  91%|█████████ | 912/1000 [2:22:55<13:47,  9.40s/it][Succeeded / Failed / Skipped / Total] 650 / 236 / 26 / 912:  91%|█████████ | 912/1000 [2:22:55<13:47,  9.40s/it][Succeeded / Failed / Skipped / Total] 650 / 236 / 26 / 912:  91%|█████████▏| 913/1000 [2:23:05<13:38,  9.40s/it]--------------------------------------------- Result 904 ---------------------------------------------
Sets the raw data . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RawData as ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . mimeType = mimeOrExtension ; } else { this . mimeType = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 905 ---------------------------------------------
Add a new violation --> Add newicolotation --> Socre: 1.0

[[[[Adv]]]]: protected void [[addViolation]] ( final String name , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[addingicolot]] ( final String name , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 906 ---------------------------------------------
Returns the named parameter . --> Query the name of a team up to a teamup --> Socre: 1.0

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String [[name]] ) { DbQueryNamedParameter [[p]] = rootNP ; while ( [[p]] != null ) { if ( [[p]] . equalsName ( [[name]] ) ) { return [[p]] ; } [[p]] = [[p]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[teamup2013davalamed]] ( final String [[a]] ) { DbQueryNamedParameter [[п]] = rootNP ; while ( [[п]] != null ) { if ( [[п]] . equalsName ( [[a]] ) ) { return [[п]] ; } [[п]] = [[п]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 907 ---------------------------------------------
Validates the action . --> javact rollback --> Socre: 1.0

[[[[Adv]]]]: protected boolean [[validateAction]] ( final String ... [[profiles]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[profiles]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > [[violations]] = vtor . getViolations ( ) ; return [[violations]] == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean [[jiactrollator]] ( final String ... [[panels]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[panels]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > [[behaviors]] = vtor . getViolations ( ) ; return [[behaviors]] == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 908 ---------------------------------------------
Sets the target object . --> Setsturflict to be used for testing --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream [[target]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[target]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[setsturflict]] ( final InputStream [[mission]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[mission]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 909 ---------------------------------------------
Sets the download file . --> Makes an image downloadable as a string --> Socre: 1.0

[[[[Adv]]]]: public RawData downloadableAs ( final String [[downloadFileName]] ) { this . [[downloadFileName]] = [[downloadFileName]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[downloadFileName]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData downloadableAs ( final String [[drawفlinemic]] ) { this . [[buyamelemes]] = [[drawفlinemic]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[drawفlinemic]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 910 ---------------------------------------------
Sets the target class --> Wrap ptgar --> Socre: 1.0

[[[[Adv]]]]: public T [[setTarget]] ( final Class target ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( target ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + target . getName ( ) ) ; } targetClass = target ; targetClassName = target . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + target . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[ptgarwig]] ( final Class target ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( target ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + target . getName ( ) ) ; } targetClass = target ; targetClassName = target . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + target . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 911 ---------------------------------------------
Processes the input stream . --> Mission --> Socre: 1.0

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[mission]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 912 ---------------------------------------------
Sets the target . --> Atomical parser --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final String [[targetName]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[targetName]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[targetName]] ) ; } targetClassName = [[targetName]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[targetName]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[atarlike]] ( final String [[bullettip]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[bullettip]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[bullettip]] ) ; } targetClassName = [[bullettip]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[bullettip]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 913 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 650 / 237 / 26 / 913:  91%|█████████▏| 913/1000 [2:23:05<13:38,  9.40s/it][Succeeded / Failed / Skipped / Total] 650 / 237 / 26 / 913:  91%|█████████▏| 914/1000 [2:23:08<13:28,  9.40s/it][Succeeded / Failed / Skipped / Total] 651 / 237 / 26 / 914:  91%|█████████▏| 914/1000 [2:23:08<13:28,  9.40s/it][Succeeded / Failed / Skipped / Total] 651 / 237 / 26 / 914:  92%|█████████▏| 915/1000 [2:23:23<13:19,  9.40s/it][Succeeded / Failed / Skipped / Total] 652 / 237 / 26 / 915:  92%|█████████▏| 915/1000 [2:23:23<13:19,  9.40s/it][Succeeded / Failed / Skipped / Total] 652 / 237 / 26 / 915:  92%|█████████▏| 916/1000 [2:23:30<13:09,  9.40s/it][Succeeded / Failed / Skipped / Total] 652 / 238 / 26 / 916:  92%|█████████▏| 916/1000 [2:23:30<13:09,  9.40s/it][Succeeded / Failed / Skipped / Total] 652 / 238 / 26 / 916:  92%|█████████▏| 917/1000 [2:23:32<12:59,  9.39s/it][Succeeded / Failed / Skipped / Total] 653 / 238 / 26 / 917:  92%|█████████▏| 917/1000 [2:23:32<12:59,  9.39s/it][Succeeded / Failed / Skipped / Total] 653 / 238 / 26 / 917:  92%|█████████▏| 918/1000 [2:23:48<12:50,  9.40s/it][Succeeded / Failed / Skipped / Total] 654 / 238 / 26 / 918:  92%|█████████▏| 918/1000 [2:23:48<12:50,  9.40s/it][Succeeded / Failed / Skipped / Total] 654 / 238 / 26 / 918:  92%|█████████▏| 919/1000 [2:23:51<12:40,  9.39s/it][Succeeded / Failed / Skipped / Total] 655 / 238 / 26 / 919:  92%|█████████▏| 919/1000 [2:23:51<12:40,  9.39s/it][Succeeded / Failed / Skipped / Total] 655 / 238 / 26 / 919:  92%|█████████▏| 920/1000 [2:23:52<12:30,  9.38s/it][Succeeded / Failed / Skipped / Total] 656 / 238 / 26 / 920:  92%|█████████▏| 920/1000 [2:23:52<12:30,  9.38s/it][Succeeded / Failed / Skipped / Total] 656 / 238 / 26 / 920:  92%|█████████▏| 921/1000 [2:24:04<12:21,  9.39s/it]Create proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public byte [ ] [[create]] ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] [[engineer]] ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 914 ---------------------------------------------
Creates a new instance of this class . --> Methode permete --> Socre: 1.0

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[dictionarymestead]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 915 ---------------------------------------------
Create the class . --> Do the actual implementation --> Socre: 1.0

[[[[Adv]]]]: public Class [[define]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader [[classLoader]] = proxetta . getClassLoader ( ) ; if ( [[classLoader]] == null ) { [[classLoader]] = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( [[classLoader]] == null ) && ( targetClass != null ) ) { [[classLoader]] = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , [[classLoader]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class [[consider]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader [[docfule]] = proxetta . getClassLoader ( ) ; if ( [[docfule]] == null ) { [[docfule]] = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( [[docfule]] == null ) && ( targetClass != null ) ) { [[docfule]] = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , [[docfule]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 916 ---------------------------------------------
Set the recipient address . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[to]] ( final EmailAddress to ) { this . [[to]] = ArraysUtil . append ( this . [[to]] , [[to]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T [[say]] ( final EmailAddress to ) { this . [[up]] = ArraysUtil . append ( this . [[up]] , [[say]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 917 ---------------------------------------------
Sets the from address . --> Set a mail message --> Socre: 1.0

[[[[Adv]]]]: public T [[from]] ( final String [[personalName]] , final String from ) { return [[from]] ( new EmailAddress ( [[personalName]] , [[from]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T [[message]] ( final String [[selfty]] , final String from ) { return [[message]] ( new EmailAddress ( [[selfty]] , [[message]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 918 ---------------------------------------------
Sets the cc addresses . --> closes the EmailAddress --> Socre: 1.0

[[[[Adv]]]]: public T cc ( final EmailAddress ... [[ccs]] ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( [[ccs]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T cc ( final EmailAddress ... [[hiveс]] ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( [[hiveс]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 919 ---------------------------------------------
Sets the REPLACEME0 address . --> Sets the REPLACEME --> Socre: 1.0

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[wirelo]] = ArraysUtil . join ( this . [[wirelo]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 920 ---------------------------------------------
Add a to recipient . --> Sets a T --> Socre: 1.0

[[[[Adv]]]]: public T [[to]] ( final String [[personalName]] , final String to ) { return [[to]] ( new EmailAddress ( [[personalName]] , [[to]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T [[ta]] ( final String [[selfterm]] , final String to ) { return [[ta]] ( new EmailAddress ( [[selfterm]] , [[ta]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 921 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 657 / 238 / 26 / 921:  92%|█████████▏| 921/1000 [2:24:04<12:21,  9.39s/it][Succeeded / Failed / Skipped / Total] 657 / 238 / 26 / 921:  92%|█████████▏| 922/1000 [2:24:26<12:13,  9.40s/it][Succeeded / Failed / Skipped / Total] 658 / 238 / 26 / 922:  92%|█████████▏| 922/1000 [2:24:26<12:13,  9.40s/it][Succeeded / Failed / Skipped / Total] 658 / 238 / 26 / 922:  92%|█████████▏| 923/1000 [2:24:31<12:03,  9.39s/it][Succeeded / Failed / Skipped / Total] 659 / 238 / 26 / 923:  92%|█████████▏| 923/1000 [2:24:31<12:03,  9.39s/it][Succeeded / Failed / Skipped / Total] 659 / 238 / 26 / 923:  92%|█████████▏| 924/1000 [2:24:32<11:53,  9.39s/it][Succeeded / Failed / Skipped / Total] 660 / 238 / 26 / 924:  92%|█████████▏| 924/1000 [2:24:32<11:53,  9.39s/it][Succeeded / Failed / Skipped / Total] 660 / 238 / 26 / 924:  92%|█████████▎| 925/1000 [2:24:57<11:45,  9.40s/it][Succeeded / Failed / Skipped / Total] 661 / 238 / 26 / 925:  92%|█████████▎| 925/1000 [2:24:57<11:45,  9.40s/it][Succeeded / Failed / Skipped / Total] 661 / 238 / 26 / 925:  93%|█████████▎| 926/1000 [2:25:04<11:35,  9.40s/it][Succeeded / Failed / Skipped / Total] 662 / 238 / 26 / 926:  93%|█████████▎| 926/1000 [2:25:04<11:35,  9.40s/it][Succeeded / Failed / Skipped / Total] 662 / 238 / 26 / 926:  93%|█████████▎| 927/1000 [2:25:15<11:26,  9.40s/it][Succeeded / Failed / Skipped / Total] 663 / 238 / 26 / 927:  93%|█████████▎| 927/1000 [2:25:15<11:26,  9.40s/it][Succeeded / Failed / Skipped / Total] 663 / 238 / 26 / 927:  93%|█████████▎| 928/1000 [2:25:16<11:16,  9.39s/it][Succeeded / Failed / Skipped / Total] 663 / 239 / 26 / 928:  93%|█████████▎| 928/1000 [2:25:16<11:16,  9.39s/it][Succeeded / Failed / Skipped / Total] 663 / 239 / 26 / 928:  93%|█████████▎| 929/1000 [2:25:36<11:07,  9.40s/it]Dumps proxy class in debug folder . --> archive tags --> Socre: 1.0

[[[[Adv]]]]: protected void [[dumpClassInDebugFolder]] ( final byte [ ] [[bytes]] ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , [[bytes]] ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void [[archivemindfrreworfoldk]] ( final byte [ ] [[tags]] ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , [[tags]] ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 922 ---------------------------------------------
Create a text message with the specified text and encoding . --> Add htgassass to Htgassist --> Socre: 1.0

[[[[Adv]]]]: public T [[textMessage]] ( final String text , final String [[encoding]] ) { return message ( new EmailMessage ( text , MimeTypes . MIME_TEXT_PLAIN , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[htgasssaver]] ( final String text , final String [[encoded]] ) { return message ( new EmailMessage ( text , MimeTypes . MIME_TEXT_PLAIN , [[encoded]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 923 ---------------------------------------------
Create a new email message with the specified encoding . --> Set an imagegassist with an imagegass argument --> Socre: 1.0

[[[[Adv]]]]: public T [[htmlMessage]] ( final String html , final String [[encoding]] ) { return message ( new EmailMessage ( html , MimeTypes . MIME_TEXT_HTML , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[imagegassargs]] ( final String html , final String [[coupling]] ) { return message ( new EmailMessage ( html , MimeTypes . MIME_TEXT_HTML , [[coupling]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 924 ---------------------------------------------
Sets a header . --> Convenience method for adding a list of files --> Socre: 1.0

[[[[Adv]]]]: public T [[header]] ( final String [[name]] , final String [[value]] ) { headers . put ( [[name]] , [[value]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[bundle]] ( final String [[book]] , final String [[list]] ) { headers . put ( [[book]] , [[list]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 925 ---------------------------------------------
Returns the integer value for the specified name . --> Get a long value from the name --> Socre: 1.0

[[[[Adv]]]]: public static long [[getInt]] ( final String name , final int defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long [[hotr]] ( final String name , final int defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 926 ---------------------------------------------
Gets a boolean value . --> Determines whether or not a date with a given default value --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[getBoolean]] ( final String name , final boolean defaultValue ) { String [[value]] = get ( name ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; switch ( [[value]] ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean [[wantboardotedd]] ( final String name , final boolean defaultValue ) { String [[date]] = get ( name ) ; if ( [[date]] == null ) { return defaultValue ; } [[date]] = [[date]] . trim ( ) . toLowerCase ( ) ; switch ( [[date]] ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 927 ---------------------------------------------
Serialize a key value . --> Helper method to extend the given json context --> Socre: 1.0

[[[[Adv]]]]: protected int [[serializeKeyValue]] ( final JsonContext jsonContext , final Path currentPath , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int [[anieextimet]] ( final JsonContext jsonContext , final Path currentPath , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 928 ---------------------------------------------
Returns the formal parameters for this method . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[gettingesehowpasomeralst]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 929 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 663 / 240 / 26 / 929:  93%|█████████▎| 929/1000 [2:25:36<11:07,  9.40s/it][Succeeded / Failed / Skipped / Total] 663 / 240 / 26 / 929:  93%|█████████▎| 930/1000 [2:25:55<10:59,  9.41s/it][Succeeded / Failed / Skipped / Total] 664 / 240 / 26 / 930:  93%|█████████▎| 930/1000 [2:25:55<10:59,  9.41s/it][Succeeded / Failed / Skipped / Total] 664 / 240 / 26 / 930:  93%|█████████▎| 931/1000 [2:26:01<10:49,  9.41s/it][Succeeded / Failed / Skipped / Total] 665 / 240 / 26 / 931:  93%|█████████▎| 931/1000 [2:26:01<10:49,  9.41s/it][Succeeded / Failed / Skipped / Total] 665 / 240 / 26 / 931:  93%|█████████▎| 932/1000 [2:26:08<10:39,  9.41s/it][Succeeded / Failed / Skipped / Total] 666 / 240 / 26 / 932:  93%|█████████▎| 932/1000 [2:26:08<10:39,  9.41s/it][Succeeded / Failed / Skipped / Total] 666 / 240 / 26 / 932:  93%|█████████▎| 933/1000 [2:26:24<10:30,  9.41s/it][Succeeded / Failed / Skipped / Total] 667 / 240 / 26 / 933:  93%|█████████▎| 933/1000 [2:26:24<10:30,  9.41s/it][Succeeded / Failed / Skipped / Total] 667 / 240 / 26 / 933:  93%|█████████▎| 934/1000 [2:26:42<10:22,  9.42s/it][Succeeded / Failed / Skipped / Total] 668 / 240 / 26 / 934:  93%|█████████▎| 934/1000 [2:26:42<10:22,  9.42s/it][Succeeded / Failed / Skipped / Total] 668 / 240 / 26 / 934:  94%|█████████▎| 935/1000 [2:26:44<10:12,  9.42s/it][Succeeded / Failed / Skipped / Total] 669 / 240 / 26 / 935:  94%|█████████▎| 935/1000 [2:26:44<10:12,  9.42s/it][Succeeded / Failed / Skipped / Total] 669 / 240 / 26 / 935:  94%|█████████▎| 936/1000 [2:27:00<10:03,  9.42s/it][Succeeded / Failed / Skipped / Total] 670 / 240 / 26 / 936:  94%|█████████▎| 936/1000 [2:27:00<10:03,  9.42s/it][Succeeded / Failed / Skipped / Total] 670 / 240 / 26 / 936:  94%|█████████▎| 937/1000 [2:27:02<09:53,  9.42s/it]Get the value of a system property . --> [[[FAILED]]]

[[[[Adv]]]]: public static String get ( final String [[name]] , final String [[defaultValue]] ) { Objects . requireNonNull ( [[name]] ) ; String value = null ; try { if ( System . getSecurityManager ( ) == null ) { value = System . getProperty ( [[name]] ) ; } else { value = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[name]] ) ) ; } } catch ( Exception ignore ) { } if ( value == null ) { return [[defaultValue]] ; } return value ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String get ( final String [[design]] , final String [[adjustvilele]] ) { Objects . requireNonNull ( [[design]] ) ; String value = null ; try { if ( System . getSecurityManager ( ) == null ) { value = System . getProperty ( [[design]] ) ; } else { value = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[design]] ) ) ; } } catch ( Exception ignore ) { } if ( value == null ) { return [[adjustvilele]] ; } return value ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 930 ---------------------------------------------
Returns the long value for the specified name . --> Get the line value for the given name --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLong]] ( final String name , final long [[defaultValue]] ) { String value = get ( name ) ; if ( value == null ) { return [[defaultValue]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[countline]] ( final String name , final long [[fallvidu]] ) { String value = get ( name ) ; if ( value == null ) { return [[fallvidu]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return [[fallvidu]] ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 931 ---------------------------------------------
Lookup alias for given alias . --> Get line separator style --> Socre: 1.0

[[[[Adv]]]]: protected String [[lookupAlias]] ( final String alias ) { String [[value]] = actionsManager . lookupPathAlias ( alias ) ; if ( [[value]] == null ) { ActionRuntime cfg = actionsManager . lookup ( alias ) ; if ( cfg != null ) { [[value]] = cfg . getActionPath ( ) ; } } return [[value]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String [[lineatoranang]] ( final String alias ) { String [[style]] = actionsManager . lookupPathAlias ( alias ) ; if ( [[style]] == null ) { ActionRuntime cfg = actionsManager . lookup ( alias ) ; if ( cfg != null ) { [[style]] = cfg . getActionPath ( ) ; } } return [[style]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 932 ---------------------------------------------
Resolves a result path . --> Resolve a value --> Socre: 1.0

[[[[Adv]]]]: public ResultPath resolveResultPath ( String path , String value ) { boolean [[absolutePath]] = "[[False]]" != "[[False]]" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath resolveResultPath ( String path , String value ) { boolean [[operatorit]] = "[[empty]]" != "[[empty]]" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 933 ---------------------------------------------
Returns the last index of a slash . --> return - 1 if not found --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < str . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[basedeneakversesfanted]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < str . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 934 ---------------------------------------------
Returns the index of the first dot after the dot . --> get intersection of string --> Socre: 1.0

[[[[Adv]]]]: public static int [[indexOfDotAfterSlash]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int [[intersectioneletacttrtri]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 935 ---------------------------------------------
Resolve alias . --> creates a Maestrano Maestrano String --> Socre: 1.0

[[[[Adv]]]]: protected String [[resolveAlias]] ( final String value ) { final StringBuilder [[result]] = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String [[forgeaeson]] ( final String value ) { final StringBuilder [[data]] = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 936 ---------------------------------------------
Resolves a result path with the given value . --> answer answer value --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String [[path]] , final String value ) { final ResultPath resultPath = resolveResultPath ( [[path]] , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[answerarsourdevtirov]] ( final String [[band]] , final String value ) { final ResultPath resultPath = resolveResultPath ( [[band]] , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 937 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 670 / 241 / 26 / 937:  94%|█████████▎| 937/1000 [2:27:02<09:53,  9.42s/it][Succeeded / Failed / Skipped / Total] 670 / 241 / 26 / 937:  94%|█████████▍| 938/1000 [2:27:05<09:43,  9.41s/it][Succeeded / Failed / Skipped / Total] 671 / 241 / 26 / 938:  94%|█████████▍| 938/1000 [2:27:05<09:43,  9.41s/it][Succeeded / Failed / Skipped / Total] 671 / 241 / 26 / 938:  94%|█████████▍| 939/1000 [2:27:19<09:34,  9.41s/it][Succeeded / Failed / Skipped / Total] 672 / 241 / 26 / 939:  94%|█████████▍| 939/1000 [2:27:19<09:34,  9.41s/it][Succeeded / Failed / Skipped / Total] 672 / 241 / 26 / 939:  94%|█████████▍| 940/1000 [2:27:20<09:24,  9.40s/it][Succeeded / Failed / Skipped / Total] 673 / 241 / 26 / 940:  94%|█████████▍| 940/1000 [2:27:20<09:24,  9.40s/it][Succeeded / Failed / Skipped / Total] 673 / 241 / 26 / 940:  94%|█████████▍| 941/1000 [2:27:20<09:14,  9.39s/it][Succeeded / Failed / Skipped / Total] 673 / 241 / 27 / 941:  94%|█████████▍| 941/1000 [2:27:20<09:14,  9.39s/it][Succeeded / Failed / Skipped / Total] 673 / 241 / 27 / 941:  94%|█████████▍| 942/1000 [2:27:23<09:04,  9.39s/it][Succeeded / Failed / Skipped / Total] 674 / 241 / 27 / 942:  94%|█████████▍| 942/1000 [2:27:23<09:04,  9.39s/it][Succeeded / Failed / Skipped / Total] 674 / 241 / 27 / 942:  94%|█████████▍| 943/1000 [2:27:38<08:55,  9.39s/it][Succeeded / Failed / Skipped / Total] 675 / 241 / 27 / 943:  94%|█████████▍| 943/1000 [2:27:38<08:55,  9.39s/it][Succeeded / Failed / Skipped / Total] 675 / 241 / 27 / 943:  94%|█████████▍| 944/1000 [2:27:43<08:45,  9.39s/it][Succeeded / Failed / Skipped / Total] 676 / 241 / 27 / 944:  94%|█████████▍| 944/1000 [2:27:43<08:45,  9.39s/it][Succeeded / Failed / Skipped / Total] 676 / 241 / 27 / 944:  94%|█████████▍| 945/1000 [2:27:44<08:35,  9.38s/it][Succeeded / Failed / Skipped / Total] 677 / 241 / 27 / 945:  94%|█████████▍| 945/1000 [2:27:44<08:35,  9.38s/it][Succeeded / Failed / Skipped / Total] 677 / 241 / 27 / 945:  95%|█████████▍| 946/1000 [2:28:00<08:26,  9.39s/it][Succeeded / Failed / Skipped / Total] 678 / 241 / 27 / 946:  95%|█████████▍| 946/1000 [2:28:00<08:26,  9.39s/it][Succeeded / Failed / Skipped / Total] 678 / 241 / 27 / 946:  95%|█████████▍| 947/1000 [2:28:13<08:17,  9.39s/it]Gets the last index after a slash . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String str ) { int [[slashNdx]] = str . lastIndexOf ( ' ' ) ; [[slashNdx]] ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[norankerojectdavlikerasact]] ( final String str ) { int [[davdinplay]] = str . lastIndexOf ( ' ' ) ; [[davdinplay]] ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[davdinplay]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 938 ---------------------------------------------
Returns the last letter of the name . --> Checks if the name is alphanumeric --> Socre: 1.0

[[[[Adv]]]]: public static String [[stripLastCamelWord]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String [[amealtaratelliwork]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 939 ---------------------------------------------
Resolve schema name . --> Methode permettant d obtenir la classe --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > [[type]] , final String defaultSchemaName ) { String schemaName = null ; final DbTable dbTable = [[type]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[rumlikemaramic]] ( final Class < ? > [[compose]] , final String defaultSchemaName ) { String schemaName = null ; final DbTable dbTable = [[compose]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 940 ---------------------------------------------
Initializes this sketch with a key . --> Initializes this weight --> Socre: 1.0

[[[[Adv]]]]: public void init ( final long [ ] [[key]] , final long [ ] tweak ) { final int newNw = [[key]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void init ( final long [ ] [[power]] , final long [ ] tweak ) { final int newNw = [[power]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 941 ---------------------------------------------
KeySchedule --> [[[SKIPPED]]]

[[[[Adv]]]]: private void keySchedule ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 942 ---------------------------------------------
Mix rotation . --> Removes rotations from j --> Socre: 1.0

[[[[Adv]]]]: private void [[mix]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void [[clean]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 943 ---------------------------------------------
Performs a demix . --> emix y = d --> Socre: 1.0

[[[[Adv]]]]: private void demix ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long [[rotr]] = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void demix ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long [[batrow]] = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 944 ---------------------------------------------
Initializes this block with a key message . --> Initialize with keyMessage --> Socre: 1.0

[[[[Adv]]]]: public void init ( final String keyMessage , final long tweak1 , final long tweak2 ) { long [ ] [[tweak]] = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; init ( bytesToLongs ( key ) , [[tweak]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void init ( final String keyMessage , final long tweak1 , final long tweak2 ) { long [ ] [[hookwedк]] = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; init ( bytesToLongs ( key ) , [[hookwedк]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 945 ---------------------------------------------
Encrypt a block . --> Encrypt the content at the given offset --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[encryptBlock]] ( final byte [ ] content , final int offset ) { long [ ] contentBlock = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] [[andvelipathaus]] ( final byte [ ] content , final int offset ) { long [ ] contentBlock = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 946 ---------------------------------------------
Convert a byte array to a long array . --> Used for testing --> Socre: 1.0

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[bitsetmaloperations]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 947 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 679 / 241 / 27 / 947:  95%|█████████▍| 947/1000 [2:28:13<08:17,  9.39s/it][Succeeded / Failed / Skipped / Total] 680 / 241 / 27 / 948:  95%|█████████▍| 948/1000 [2:28:13<08:07,  9.38s/it][Succeeded / Failed / Skipped / Total] 680 / 241 / 27 / 948:  95%|█████████▍| 949/1000 [2:28:13<07:57,  9.37s/it][Succeeded / Failed / Skipped / Total] 680 / 241 / 28 / 949:  95%|█████████▍| 949/1000 [2:28:13<07:57,  9.37s/it][Succeeded / Failed / Skipped / Total] 681 / 241 / 28 / 950:  95%|█████████▌| 950/1000 [2:28:19<07:48,  9.37s/it][Succeeded / Failed / Skipped / Total] 681 / 241 / 28 / 950:  95%|█████████▌| 951/1000 [2:29:08<07:41,  9.41s/it][Succeeded / Failed / Skipped / Total] 682 / 241 / 28 / 951:  95%|█████████▌| 951/1000 [2:29:08<07:41,  9.41s/it][Succeeded / Failed / Skipped / Total] 682 / 241 / 28 / 951:  95%|█████████▌| 952/1000 [2:29:10<07:31,  9.40s/it][Succeeded / Failed / Skipped / Total] 683 / 241 / 28 / 952:  95%|█████████▌| 952/1000 [2:29:10<07:31,  9.40s/it][Succeeded / Failed / Skipped / Total] 683 / 241 / 28 / 952:  95%|█████████▌| 953/1000 [2:29:16<07:21,  9.40s/it][Succeeded / Failed / Skipped / Total] 684 / 241 / 28 / 953:  95%|█████████▌| 953/1000 [2:29:16<07:21,  9.40s/it][Succeeded / Failed / Skipped / Total] 684 / 241 / 28 / 953:  95%|█████████▌| 954/1000 [2:29:17<07:11,  9.39s/it]Returns the path of this method . --> Get the appearance of the target --> Socre: 1.0

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String [[methodName]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[methodName]] ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[career]] ( ) { if ( methref != null ) { final String [[campaignman]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[campaignman]] ; } return [[career]] ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 948 ---------------------------------------------
Removes any bounding characters from the string . --> Removes any bounding box --> Socre: 1.0

[[[[Adv]]]]: private static String removeAnyBounding ( final char s , final char [[e]] , final String [[str]] ) { if ( [[str]] == null || [[str]] . length ( ) < 2 ) { return [[str]] ; } if ( [[str]] . startsWith ( String . valueOf ( s ) ) && [[str]] . endsWith ( String . valueOf ( [[e]] ) ) ) { return [[str]] . substring ( 1 , [[str]] . length ( ) - 1 ) ; } return [[str]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String removeAnyBounding ( final char s , final char [[d]] , final String [[ater]] ) { if ( [[ater]] == null || [[ater]] . length ( ) < 2 ) { return [[ater]] ; } if ( [[ater]] . startsWith ( String . valueOf ( s ) ) && [[ater]] . endsWith ( String . valueOf ( [[d]] ) ) ) { return [[ater]] . substring ( 1 , [[ater]] . length ( ) - 1 ) ; } return [[ater]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 949 ---------------------------------------------
Ungzip a file --> [[[SKIPPED]]]

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 950 ---------------------------------------------
Zipped file --> Gets jawr --> Socre: 1.0

[[[[Adv]]]]: public static File [[zlib]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File [[jawlam]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 951 ---------------------------------------------
Unzip a zip file into a directory --> Generate asty template --> Socre: 1.0

[[[[Adv]]]]: public static void [[unzip]] ( final String [[zipFile]] , final String destDir , final String ... patterns ) throws IOException { [[unzip]] ( new File ( [[zipFile]] ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void [[astypl]] ( final String [[flyedst]] , final String destDir , final String ... patterns ) throws IOException { [[astypl]] ( new File ( [[flyedst]] ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 952 ---------------------------------------------
List a zip file . --> Returns an unmodifiable list of all the entries in the folder --> Socre: 1.0

[[[[Adv]]]]: public static List < String > [[listZip]] ( final File [[zipFile]] ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[zipFile]] ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; entries . add ( entryName ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > [[documenteippet]] ( final File [[clouddfbox]] ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[clouddfbox]] ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; entries . add ( entryName ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 953 ---------------------------------------------
Resolve column descriptors . --> minimalColumnDescriptions --> Socre: 1.0

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[resolveColumnDescriptors]] ( final DbEntityDescriptor [[dbEntityDescriptor]] , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[dilundimntditurs]] ( final DbEntityDescriptor [[dampacctresþctor]] , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 954 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 685 / 241 / 28 / 954:  95%|█████████▌| 954/1000 [2:29:17<07:11,  9.39s/it][Succeeded / Failed / Skipped / Total] 685 / 241 / 28 / 954:  96%|█████████▌| 955/1000 [2:29:27<07:02,  9.39s/it][Succeeded / Failed / Skipped / Total] 686 / 241 / 28 / 955:  96%|█████████▌| 955/1000 [2:29:27<07:02,  9.39s/it][Succeeded / Failed / Skipped / Total] 686 / 241 / 28 / 955:  96%|█████████▌| 956/1000 [2:29:42<06:53,  9.40s/it][Succeeded / Failed / Skipped / Total] 687 / 241 / 28 / 956:  96%|█████████▌| 956/1000 [2:29:42<06:53,  9.40s/it][Succeeded / Failed / Skipped / Total] 687 / 241 / 28 / 956:  96%|█████████▌| 957/1000 [2:29:52<06:44,  9.40s/it][Succeeded / Failed / Skipped / Total] 688 / 241 / 28 / 957:  96%|█████████▌| 957/1000 [2:29:52<06:44,  9.40s/it][Succeeded / Failed / Skipped / Total] 688 / 241 / 28 / 957:  96%|█████████▌| 958/1000 [2:29:53<06:34,  9.39s/it][Succeeded / Failed / Skipped / Total] 689 / 241 / 28 / 958:  96%|█████████▌| 958/1000 [2:29:53<06:34,  9.39s/it][Succeeded / Failed / Skipped / Total] 689 / 241 / 28 / 958:  96%|█████████▌| 959/1000 [2:30:13<06:25,  9.40s/it][Succeeded / Failed / Skipped / Total] 689 / 242 / 28 / 959:  96%|█████████▌| 959/1000 [2:30:13<06:25,  9.40s/it][Succeeded / Failed / Skipped / Total] 689 / 242 / 28 / 959:  96%|█████████▌| 960/1000 [2:30:30<06:16,  9.41s/it]Gzip a file --> Rzipped files --> Socre: 1.0

[[[[Adv]]]]: public static File [[gzip]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; String gzipName = [[file]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File [[rzaper]] ( final File [[files]] ) throws IOException { if ( [[files]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[files]] ) ; String gzipName = [[files]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 955 ---------------------------------------------
Adds a file to a ZIP output stream . --> Copied from FileOutputStream --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[prefixthorciper]] ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 956 ---------------------------------------------
Adds content to a ZIP output stream . --> undo anttxt entry --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry [[zipEntry]] = new ZipEntry ( path ) ; [[zipEntry]] . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { [[zipEntry]] . setComment ( comment ) ; } zos . putNextEntry ( [[zipEntry]] ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void [[undoanttiph]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry [[limentsw]] = new ZipEntry ( path ) ; [[limentsw]] . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { [[limentsw]] . setComment ( comment ) ; } zos . putNextEntry ( [[limentsw]] ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 957 ---------------------------------------------
Returns the property descriptor for the given name . --> Get the PropertyDescriptor for the given name --> Socre: 1.0

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String [[name]] , final boolean [[declared]] ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( [[name]] ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( [[declared]] ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String [[top]] , final boolean [[declare]] ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( [[top]] ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( [[declare]] ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 958 ---------------------------------------------
Returns the FieldDescriptor for the given name . --> Return the FieldDescriptor for the given major and true --> Socre: 1.0

[[[[Adv]]]]: public FieldDescriptor getFieldDescriptor ( final String [[name]] , final boolean declared ) { final FieldDescriptor [[fieldDescriptor]] = getFields ( ) . getFieldDescriptor ( [[name]] ) ; if ( [[fieldDescriptor]] != null ) { if ( ! [[fieldDescriptor]] . matchDeclared ( declared ) ) { return null ; } } return [[fieldDescriptor]] ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor getFieldDescriptor ( final String [[major]] , final boolean declared ) { final FieldDescriptor [[classdospositionoris]] = getFields ( ) . getFieldDescriptor ( [[major]] ) ; if ( [[classdospositionoris]] != null ) { if ( ! [[classdospositionoris]] . matchDeclared ( declared ) ) { return null ; } } return [[classdospositionoris]] ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 959 ---------------------------------------------
Sets the bundle name for this request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest [[request]] , final String [[bundleName]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[bundleName]] ) ; } [[request]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[bundleName]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[albumrefgingonader]] ( final ServletRequest [[rest]] , final String [[schemeterm]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[schemeterm]] ) ; } [[rest]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[schemeterm]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 960 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 690 / 242 / 28 / 960:  96%|█████████▌| 960/1000 [2:30:30<06:16,  9.41s/it][Succeeded / Failed / Skipped / Total] 690 / 242 / 28 / 960:  96%|█████████▌| 961/1000 [2:30:42<06:06,  9.41s/it][Succeeded / Failed / Skipped / Total] 690 / 243 / 28 / 961:  96%|█████████▌| 961/1000 [2:30:42<06:06,  9.41s/it][Succeeded / Failed / Skipped / Total] 690 / 243 / 28 / 961:  96%|█████████▌| 962/1000 [2:30:42<05:57,  9.40s/it][Succeeded / Failed / Skipped / Total] 690 / 244 / 28 / 962:  96%|█████████▌| 962/1000 [2:30:42<05:57,  9.40s/it][Succeeded / Failed / Skipped / Total] 690 / 244 / 28 / 962:  96%|█████████▋| 963/1000 [2:30:44<05:47,  9.39s/it][Succeeded / Failed / Skipped / Total] 690 / 245 / 28 / 963:  96%|█████████▋| 963/1000 [2:30:44<05:47,  9.39s/it][Succeeded / Failed / Skipped / Total] 690 / 245 / 28 / 963:  96%|█████████▋| 964/1000 [2:30:50<05:37,  9.39s/it][Succeeded / Failed / Skipped / Total] 691 / 245 / 28 / 964:  96%|█████████▋| 964/1000 [2:30:50<05:37,  9.39s/it][Succeeded / Failed / Skipped / Total] 691 / 245 / 28 / 964:  96%|█████████▋| 965/1000 [2:31:06<05:28,  9.40s/it][Succeeded / Failed / Skipped / Total] 692 / 245 / 28 / 965:  96%|█████████▋| 965/1000 [2:31:06<05:28,  9.40s/it][Succeeded / Failed / Skipped / Total] 692 / 245 / 28 / 965:  97%|█████████▋| 966/1000 [2:31:09<05:19,  9.39s/it][Succeeded / Failed / Skipped / Total] 693 / 245 / 28 / 966:  97%|█████████▋| 966/1000 [2:31:09<05:19,  9.39s/it][Succeeded / Failed / Skipped / Total] 693 / 245 / 28 / 966:  97%|█████████▋| 967/1000 [2:31:26<05:10,  9.40s/it][Succeeded / Failed / Skipped / Total] 694 / 245 / 28 / 967:  97%|█████████▋| 967/1000 [2:31:26<05:10,  9.40s/it][Succeeded / Failed / Skipped / Total] 694 / 245 / 28 / 967:  97%|█████████▋| 968/1000 [2:31:38<05:00,  9.40s/it]Filter parameters for a bean name . --> Return beanaraveth parameter --> Socre: 1.0

[[[[Adv]]]]: public String [ ] [[filterParametersForBeanName]] ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > [[entry]] : params . entrySet ( ) ) { String key = [[entry]] . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] [[beanaraveththwegnamic]] ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > [[access]] : params . entrySet ( ) ) { String key = [[access]] . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 961 ---------------------------------------------
Gets the session locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession session ) { Locale [[locale]] = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[locale]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[locale]] ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[hasofferporccie]] ( final HttpSession session ) { Locale [[gured]] = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[gured]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[gured]] ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 962 ---------------------------------------------
Adds profile . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... [[profiles]] ) { if ( [[profiles]] == null ) { return this ; } for ( String [[profile]] : [[profiles]] ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[silhouette]] ( final String ... [[designs]] ) { if ( [[designs]] == null ) { return this ; } for ( String [[silhouette]] : [[designs]] ) { addProfiles ( [[silhouette]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 963 ---------------------------------------------
Sets the session locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession session , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale [[locale]] = Locale . forLanguageTag ( localeCode ) ; session . setAttribute ( SESSION_LOCALE_ATTR , [[locale]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[gotenedarofocialre]] ( final HttpSession session , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale [[metropolitanve]] = Locale . forLanguageTag ( localeCode ) ; session . setAttribute ( SESSION_LOCALE_ATTR , [[metropolitanve]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 964 ---------------------------------------------
Read a long from the given buffer at the given offset . --> Find thetelllmetl for the given offset --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] buf , final int offset ) { return ( ( long ) buf [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[findtelllinlemetf]] ( final byte [ ] buf , final int offset ) { return ( ( long ) buf [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 965 ---------------------------------------------
Returns the bytecode offset for a type annotation . --> Call typegetter for typeAnnotation --> Socre: 1.0

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[calltypennourttevantuorysfend]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 966 ---------------------------------------------
Read element values . --> Controlpelturue --> Socre: 1.0

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[controlpelturexues]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 967 ---------------------------------------------
Reads a label . --> Get device devval h --> Socre: 1.0

[[[[Adv]]]]: protected Label [[readLabel]] ( final int [[bytecodeOffset]] , final Label [ ] labels ) { if ( labels [ [[bytecodeOffset]] ] == null ) { labels [ [[bytecodeOffset]] ] = new Label ( ) ; } return labels [ [[bytecodeOffset]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label [[devvalh]] ( final int [[cyclebootbacksets]] , final Label [ ] labels ) { if ( labels [ [[cyclebootbacksets]] ] == null ) { labels [ [[cyclebootbacksets]] ] = new Label ( ) ; } return labels [ [[cyclebootbacksets]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 968 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 695 / 245 / 28 / 968:  97%|█████████▋| 968/1000 [2:31:38<05:00,  9.40s/it][Succeeded / Failed / Skipped / Total] 695 / 245 / 28 / 968:  97%|█████████▋| 969/1000 [2:32:00<04:51,  9.41s/it][Succeeded / Failed / Skipped / Total] 696 / 245 / 28 / 969:  97%|█████████▋| 969/1000 [2:32:00<04:51,  9.41s/it][Succeeded / Failed / Skipped / Total] 696 / 245 / 28 / 969:  97%|█████████▋| 970/1000 [2:32:01<04:42,  9.40s/it][Succeeded / Failed / Skipped / Total] 697 / 245 / 28 / 970:  97%|█████████▋| 970/1000 [2:32:01<04:42,  9.40s/it][Succeeded / Failed / Skipped / Total] 697 / 245 / 28 / 970:  97%|█████████▋| 971/1000 [2:32:04<04:32,  9.40s/it][Succeeded / Failed / Skipped / Total] 698 / 245 / 28 / 971:  97%|█████████▋| 971/1000 [2:32:04<04:32,  9.40s/it][Succeeded / Failed / Skipped / Total] 698 / 245 / 28 / 971:  97%|█████████▋| 972/1000 [2:32:33<04:23,  9.42s/it][Succeeded / Failed / Skipped / Total] 699 / 245 / 28 / 972:  97%|█████████▋| 972/1000 [2:32:33<04:23,  9.42s/it][Succeeded / Failed / Skipped / Total] 699 / 245 / 28 / 972:  97%|█████████▋| 973/1000 [2:32:43<04:14,  9.42s/it]Read the verification type information . --> used for testing --> Socre: 1.0

[[[[Adv]]]]: private int readVerificationTypeInfo ( final int [[verificationTypeInfoOffset]] , final Object [ ] [[frame]] , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = [[verificationTypeInfoOffset]] ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : [[frame]] [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : [[frame]] [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : [[frame]] [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : [[frame]] [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : [[frame]] [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : [[frame]] [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : [[frame]] [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : [[frame]] [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : [[frame]] [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int readVerificationTypeInfo ( final int [[ailalylinioupter]] , final Object [ ] [[fest]] , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = [[ailalylinioupter]] ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : [[fest]] [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : [[fest]] [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : [[fest]] [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : [[fest]] [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : [[fest]] [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : [[fest]] [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : [[fest]] [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : [[fest]] [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : [[fest]] [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 969 ---------------------------------------------
Reads a stream into a byte array . --> Starts jstick --> Socre: 1.0

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream inputStream , final boolean [[close]] ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] [[data]] = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( [[data]] , 0 , [[data]] . length ) ) != - 1 ) { outputStream . write ( [[data]] , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( [[close]] ) { inputStream . [[close]] ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[jstick]] ( final InputStream inputStream , final boolean [[cl]] ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] [[performance]] = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( [[performance]] , 0 , [[performance]] . length ) ) != - 1 ) { outputStream . write ( [[performance]] , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( [[cl]] ) { inputStream . [[cl]] ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 970 ---------------------------------------------
Returns the first CtorDescriptor that matches the given arguments . --> returns a CtorDescriptor --> Socre: 1.0

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... [[args]] ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != [[args]] . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != [[args]] [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... [[adagin]] ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != [[adagin]] . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != [[adagin]] [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 971 ---------------------------------------------
Get all constructors for this class . --> creates the ctor descriptors --> Socre: 1.0

[[[[Adv]]]]: protected CtorDescriptor [ ] [[inspectConstructors]] ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor [[ctor]] = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( [[ctor]] ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] [[gatherofdsmeers]] ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor [[ccon]] = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( [[ccon]] ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 972 ---------------------------------------------
Read bootstrap methods attribute . --> retrieves buyputadnamne --> Socre: 1.0

[[[[Adv]]]]: private int [ ] [[readBootstrapMethodsAttribute]] ( final int maxStringLength ) { char [ ] [[charBuffer]] = new char [ maxStringLength ] ; int [[currentAttributeOffset]] = getFirstAttributeOffset ( ) ; int [ ] [[currentBootstrapMethodOffsets]] = null ; for ( int i = readUnsignedShort ( [[currentAttributeOffset]] - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] [[buyputadappaossetvibated]] ( final int maxStringLength ) { char [ ] [[storenotgre]] = new char [ maxStringLength ] ; int [[backatijotesfp]] = getFirstAttributeOffset ( ) ; int [ ] [[commandmontadachenekactoffsrts]] = null ; for ( int i = readUnsignedShort ( [[backatijotesfp]] - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 973 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 699 / 246 / 28 / 973:  97%|█████████▋| 973/1000 [2:32:43<04:14,  9.42s/it][Succeeded / Failed / Skipped / Total] 699 / 246 / 28 / 973:  97%|█████████▋| 974/1000 [2:32:47<04:04,  9.41s/it][Succeeded / Failed / Skipped / Total] 700 / 246 / 28 / 974:  97%|█████████▋| 974/1000 [2:32:47<04:04,  9.41s/it][Succeeded / Failed / Skipped / Total] 700 / 246 / 28 / 974:  98%|█████████▊| 975/1000 [2:33:02<03:55,  9.42s/it][Succeeded / Failed / Skipped / Total] 701 / 246 / 28 / 975:  98%|█████████▊| 975/1000 [2:33:02<03:55,  9.42s/it][Succeeded / Failed / Skipped / Total] 701 / 246 / 28 / 975:  98%|█████████▊| 976/1000 [2:33:03<03:45,  9.41s/it][Succeeded / Failed / Skipped / Total] 702 / 246 / 28 / 976:  98%|█████████▊| 976/1000 [2:33:03<03:45,  9.41s/it][Succeeded / Failed / Skipped / Total] 702 / 246 / 28 / 976:  98%|█████████▊| 977/1000 [2:33:03<03:36,  9.40s/it][Succeeded / Failed / Skipped / Total] 703 / 246 / 28 / 977:  98%|█████████▊| 977/1000 [2:33:03<03:36,  9.40s/it][Succeeded / Failed / Skipped / Total] 703 / 246 / 28 / 977:  98%|█████████▊| 978/1000 [2:33:09<03:26,  9.40s/it][Succeeded / Failed / Skipped / Total] 704 / 246 / 28 / 978:  98%|█████████▊| 978/1000 [2:33:09<03:26,  9.40s/it][Succeeded / Failed / Skipped / Total] 704 / 246 / 28 / 978:  98%|█████████▊| 979/1000 [2:33:38<03:17,  9.42s/it][Succeeded / Failed / Skipped / Total] 705 / 246 / 28 / 979:  98%|█████████▊| 979/1000 [2:33:38<03:17,  9.42s/it][Succeeded / Failed / Skipped / Total] 705 / 246 / 28 / 979:  98%|█████████▊| 980/1000 [2:33:38<03:08,  9.41s/it][Succeeded / Failed / Skipped / Total] 706 / 246 / 28 / 980:  98%|█████████▊| 980/1000 [2:33:38<03:08,  9.41s/it][Succeeded / Failed / Skipped / Total] 706 / 246 / 28 / 980:  98%|█████████▊| 981/1000 [2:33:44<02:58,  9.40s/it][Succeeded / Failed / Skipped / Total] 706 / 247 / 28 / 981:  98%|█████████▊| 981/1000 [2:33:44<02:58,  9.40s/it][Succeeded / Failed / Skipped / Total] 706 / 247 / 28 / 981:  98%|█████████▊| 982/1000 [2:33:47<02:49,  9.40s/it][Succeeded / Failed / Skipped / Total] 707 / 247 / 28 / 982:  98%|█████████▊| 982/1000 [2:33:47<02:49,  9.40s/it][Succeeded / Failed / Skipped / Total] 707 / 247 / 28 / 982:  98%|█████████▊| 983/1000 [2:33:54<02:39,  9.39s/it]Gets the request map . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { return ( Map < String , TransientBeanData > ) [[servletRequest]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[casecheguesnepace]] ( final HttpServletRequest [[privolistveports]] ) { return ( Map < String , TransientBeanData > ) [[privolistveports]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 974 ---------------------------------------------
Creates the request map . --> addrement trittree --> Socre: 1.0

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[createRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { Map < String , TransientBeanData > [[map]] = new HashMap <> ( ) ; [[servletRequest]] . setAttribute ( ATTR_NAME , [[map]] ) ; return [[map]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[addremrentthaft]] ( final HttpServletRequest [[ierileydeworld]] ) { Map < String , TransientBeanData > [[cross]] = new HashMap <> ( ) ; [[ierileydeworld]] . setAttribute ( ATTR_NAME , [[cross]] ) ; return [[cross]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 975 ---------------------------------------------
Registers a file consumer . --> Adds a listener to the list of files . --> Socre: 1.0

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[volumecasverset]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[volumecasverset]] ) ; } else { consumers . add ( [[volumecasverset]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 976 ---------------------------------------------
Initializes the filter . --> This method is called when the application is air --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig [[filterConfig]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[air]] ( final FilterConfig [[purposecofusb]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 977 ---------------------------------------------
Add search path . --> Add elcap to searchPath --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI searchPath ) { File file ; try { file = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[elcap]] ( final URI searchPath ) { File file ; try { file = new File ( [[elcap]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[elcap]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 978 ---------------------------------------------
Convert array to array . --> used for testing --> Socre: 1.0

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object [[value]] ) { final Class [[valueComponentType]] = [[value]] . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( [[valueComponentType]] . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( [[value]] , [[valueComponentType]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[windowwarputtverrick]] ( final Object [[string]] ) { final Class [[deviceimpolementwy]] = [[string]] . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( [[deviceimpolementwy]] . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( [[string]] , [[deviceimpolementwy]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 979 ---------------------------------------------
Adds the given path . --> Creates an odd form --> Socre: 1.0

[[[[Adv]]]]: protected void [[addPath]] ( final File [[path]] ) { if ( ! [[path]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[path]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void [[oddform]] ( final File [[gallery]] ) { if ( ! [[gallery]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[gallery]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 980 ---------------------------------------------
Add search path . --> Add searchdev to searchdev --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL searchPath ) { File [[file]] = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( [[file]] == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[pursuitdev]] ( final URL searchPath ) { File [[folder]] = FileUtil . toContainerFile ( [[pursuitdev]] ) ; if ( [[folder]] == null ) { throw new FindFileException ( "URL error: " + [[pursuitdev]] ) ; } addPath ( [[folder]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 981 ---------------------------------------------
Exclude patterns . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[exclude]] ( final String ... [[patterns]] ) { for ( String pattern : [[patterns]] ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile [[absence]] ( final String ... [[classes]] ) { for ( String pattern : [[classes]] ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 982 ---------------------------------------------
Adds the given patterns . --> Use custom rules --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[include]] ( final String ... [[patterns]] ) { for ( String [[pattern]] : [[patterns]] ) { rules . include ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile [[treat]] ( final String ... [[objects]] ) { for ( String [[custom]] : [[objects]] ) { rules . include ( [[custom]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 983 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 708 / 247 / 28 / 983:  98%|█████████▊| 983/1000 [2:33:54<02:39,  9.39s/it][Succeeded / Failed / Skipped / Total] 708 / 247 / 28 / 983:  98%|█████████▊| 984/1000 [2:34:03<02:30,  9.39s/it][Succeeded / Failed / Skipped / Total] 708 / 248 / 28 / 984:  98%|█████████▊| 984/1000 [2:34:03<02:30,  9.39s/it][Succeeded / Failed / Skipped / Total] 708 / 248 / 28 / 984:  98%|█████████▊| 985/1000 [2:34:23<02:21,  9.40s/it][Succeeded / Failed / Skipped / Total] 708 / 249 / 28 / 985:  98%|█████████▊| 985/1000 [2:34:23<02:21,  9.40s/it][Succeeded / Failed / Skipped / Total] 708 / 249 / 28 / 985:  99%|█████████▊| 986/1000 [2:34:27<02:11,  9.40s/it][Succeeded / Failed / Skipped / Total] 708 / 250 / 28 / 986:  99%|█████████▊| 986/1000 [2:34:27<02:11,  9.40s/it][Succeeded / Failed / Skipped / Total] 708 / 250 / 28 / 986:  99%|█████████▊| 987/1000 [2:34:38<02:02,  9.40s/it][Succeeded / Failed / Skipped / Total] 709 / 250 / 28 / 987:  99%|█████████▊| 987/1000 [2:34:38<02:02,  9.40s/it][Succeeded / Failed / Skipped / Total] 709 / 250 / 28 / 987:  99%|█████████▉| 988/1000 [2:34:42<01:52,  9.39s/it][Succeeded / Failed / Skipped / Total] 710 / 250 / 28 / 988:  99%|█████████▉| 988/1000 [2:34:42<01:52,  9.39s/it][Succeeded / Failed / Skipped / Total] 710 / 250 / 28 / 988:  99%|█████████▉| 989/1000 [2:34:45<01:43,  9.39s/it][Succeeded / Failed / Skipped / Total] 711 / 250 / 28 / 989:  99%|█████████▉| 989/1000 [2:34:45<01:43,  9.39s/it][Succeeded / Failed / Skipped / Total] 711 / 250 / 28 / 989:  99%|█████████▉| 990/1000 [2:35:16<01:34,  9.41s/it]Initialization process . --> Initialize the system --> Socre: 1.0

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > [[iterator]] = pathList . iterator ( ) ; while ( [[iterator]] . hasNext ( ) ) { File file = [[iterator]] . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; [[iterator]] . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > [[emuratron]] = pathList . iterator ( ) ; while ( [[emuratron]] . hasNext ( ) ) { File file = [[emuratron]] . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; [[emuratron]] . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 984 ---------------------------------------------
Iterates over the available files . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[itsidac]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 985 ---------------------------------------------
Returns the output writer . --> [[[FAILED]]]

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[checklined]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 986 ---------------------------------------------
Find all files . --> [[[FAILED]]]

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > [[allFiles]] = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { [[allFiles]] . add ( file ) ; } return [[allFiles]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[classner]] ( ) { List < File > [[classpfd]] = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { [[classpfd]] . add ( file ) ; } return [[classpfd]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 987 ---------------------------------------------
Determine bean wiring . --> define a new WiringMode --> Socre: 1.0

[[[[Adv]]]]: public WiringMode [[resolveBeanWiringMode]] ( final Class [[type]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[type]] ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode [[ªbiguirowdover]] ( final Class [[area]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[area]] ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 988 ---------------------------------------------
Returns the output stream . --> documentation inherited from interface OutputStream --> Socre: 1.0

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[superappplymit]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 989 ---------------------------------------------
Returns the binary representation of this type . --> Get intormatter version --> Socre: 1.0

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[intormaster]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
[Succeeded / Failed / Skipped / Total] 711 / 251 / 28 / 990:  99%|█████████▉| 990/1000 [2:35:16<01:34,  9.41s/it][Succeeded / Failed / Skipped / Total] 711 / 251 / 28 / 990:  99%|█████████▉| 991/1000 [2:35:28<01:24,  9.41s/it][Succeeded / Failed / Skipped / Total] 712 / 251 / 28 / 991:  99%|█████████▉| 991/1000 [2:35:28<01:24,  9.41s/it][Succeeded / Failed / Skipped / Total] 712 / 251 / 28 / 991:  99%|█████████▉| 992/1000 [2:35:29<01:15,  9.40s/it][Succeeded / Failed / Skipped / Total] 713 / 251 / 28 / 992:  99%|█████████▉| 992/1000 [2:35:29<01:15,  9.40s/it][Succeeded / Failed / Skipped / Total] 713 / 251 / 28 / 992:  99%|█████████▉| 993/1000 [2:35:46<01:05,  9.41s/it][Succeeded / Failed / Skipped / Total] 713 / 252 / 28 / 993:  99%|█████████▉| 993/1000 [2:35:46<01:05,  9.41s/it][Succeeded / Failed / Skipped / Total] 713 / 252 / 28 / 993:  99%|█████████▉| 994/1000 [2:35:47<00:56,  9.40s/it][Succeeded / Failed / Skipped / Total] 713 / 253 / 28 / 994:  99%|█████████▉| 994/1000 [2:35:47<00:56,  9.40s/it][Succeeded / Failed / Skipped / Total] 713 / 253 / 28 / 994: 100%|█████████▉| 995/1000 [2:35:56<00:47,  9.40s/it][Succeeded / Failed / Skipped / Total] 713 / 254 / 28 / 995: 100%|█████████▉| 995/1000 [2:35:56<00:47,  9.40s/it][Succeeded / Failed / Skipped / Total] 713 / 254 / 28 / 995: 100%|█████████▉| 996/1000 [2:36:04<00:37,  9.40s/it]--------------------------------------------- Result 990 ---------------------------------------------
Resolves the bean name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class type , final boolean [[useLongTypeName]] ) { PetiteBean [[petiteBean]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String [[name]] = null ; if ( [[petiteBean]] != null ) { [[name]] = [[petiteBean]] . value ( ) . trim ( ) ; } if ( ( [[name]] == null ) || ( [[name]] . length ( ) == 0 ) ) { if ( [[useLongTypeName]] ) { [[name]] = type . getName ( ) ; } else { [[name]] = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return [[name]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[interineacle]] ( final Class type , final boolean [[shoricodenum]] ) { PetiteBean [[frenchaane]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String [[id]] = null ; if ( [[frenchaane]] != null ) { [[id]] = [[frenchaane]] . value ( ) . trim ( ) ; } if ( ( [[id]] == null ) || ( [[id]] . length ( ) == 0 ) ) { if ( [[shoricodenum]] ) { [[id]] = type . getName ( ) ; } else { [[id]] = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return [[id]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 991 ---------------------------------------------
Gets the method descriptor . --> constructor for catchopgings --> Socre: 1.0

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Type returnType , final Type ... argumentTypes ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; returnType . appendDescriptor ( [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String [[catchopgouldnshedry]] ( final Type returnType , final Type ... argumentTypes ) { StringBuilder [[anddonktρ]] = new StringBuilder ( ) ; [[anddonktρ]] . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( [[anddonktρ]] ) ; } [[anddonktρ]] . append ( ' ' ) ; returnType . appendDescriptor ( [[anddonktρ]] ) ; return [[anddonktρ]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 992 ---------------------------------------------
Gets the descriptor for a constructor . --> Creates a Cocideringconceptrecoer --> Socre: 1.0

[[[[Adv]]]]: public static String [[getConstructorDescriptor]] ( final Constructor < ? > constructor ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] [[parameters]] = constructor . getParameterTypes ( ) ; for ( Class < ? > [[parameter]] : [[parameters]] ) { appendDescriptor ( [[parameter]] , [[stringBuilder]] ) ; } return [[stringBuilder]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String [[aocsideringconceptrecoer]] ( final Constructor < ? > constructor ) { StringBuilder [[displayfilleling]] = new StringBuilder ( ) ; [[displayfilleling]] . append ( ' ' ) ; Class < ? > [ ] [[canvas]] = constructor . getParameterTypes ( ) ; for ( Class < ? > [[client]] : [[canvas]] ) { appendDescriptor ( [[client]] , [[displayfilleling]] ) ; } return [[displayfilleling]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 993 ---------------------------------------------
Append the descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder [[stringBuilder]] ) { if ( sort == OBJECT ) { [[stringBuilder]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[stringBuilder]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[stringBuilder]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[addjectvesplayser]] ( final StringBuilder [[cpuwlra]] ) { if ( sort == OBJECT ) { [[cpuwlra]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[cpuwlra]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[cpuwlra]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 994 ---------------------------------------------
Gets the size of the object . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[generalite]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 995 ---------------------------------------------
Gets the descriptor of a method . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method method ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[winintyldhretora]] ( final Method method ) { StringBuilder [[amektр]] = new StringBuilder ( ) ; [[amektр]] . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[amektр]] ) ; } [[amektр]] . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , [[amektр]] ) ; return [[amektр]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 996 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 714 / 254 / 28 / 996: 100%|█████████▉| 996/1000 [2:36:04<00:37,  9.40s/it][Succeeded / Failed / Skipped / Total] 714 / 254 / 28 / 996: 100%|█████████▉| 997/1000 [2:36:06<00:28,  9.39s/it][Succeeded / Failed / Skipped / Total] 715 / 254 / 28 / 997: 100%|█████████▉| 997/1000 [2:36:06<00:28,  9.39s/it][Succeeded / Failed / Skipped / Total] 715 / 254 / 28 / 997: 100%|█████████▉| 998/1000 [2:36:26<00:18,  9.41s/it][Succeeded / Failed / Skipped / Total] 716 / 254 / 28 / 998: 100%|█████████▉| 998/1000 [2:36:26<00:18,  9.41s/it][Succeeded / Failed / Skipped / Total] 716 / 254 / 28 / 998: 100%|█████████▉| 999/1000 [2:36:58<00:09,  9.43s/it][Succeeded / Failed / Skipped / Total] 716 / 255 / 28 / 999: 100%|█████████▉| 999/1000 [2:36:58<00:09,  9.43s/it][Succeeded / Failed / Skipped / Total] 716 / 255 / 28 / 999: 100%|██████████| 1000/1000 [2:37:12<00:00,  9.43s/it][Succeeded / Failed / Skipped / Total] 716 / 256 / 28 / 1000: 100%|██████████| 1000/1000 [2:37:12<00:00,  9.43s/it]/data2/cg/CodeAttack/models/graphcodebert_models.py:912: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  ../torch/csrc/utils/tensor_new.cpp:201.)
  code_attn_mask = torch.tensor(code_attn_mask).to(model_device)
/data2/cg/CodeAttack/models/graphcodebert_models.py:1152: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  prevK = bestScoresId // numWords
Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  unk
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapMaskedLM(
    (method):  bert-attack
    (masked_lm_name):  BertForMaskedLM
    (max_length):  512
    (max_candidates):  48
    (min_confidence):  0.0005
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

/data2/cg/CodeAttack/models/graphcodebert_models.py:912: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  ../torch/csrc/utils/tensor_new.cpp:201.)
  code_attn_mask = torch.tensor(code_attn_mask).to(model_device)
/data2/cg/CodeAttack/models/graphcodebert_models.py:1152: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  prevK = bestScoresId // numWords
/data2/cg/CodeAttack/models/graphcodebert_models.py:912: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  ../torch/csrc/utils/tensor_new.cpp:201.)
  code_attn_mask = torch.tensor(code_attn_mask).to(model_device)
/data2/cg/CodeAttack/models/graphcodebert_models.py:1152: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  prevK = bestScoresId // numWords
/data2/cg/CodeAttack/models/graphcodebert_models.py:912: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  ../torch/csrc/utils/tensor_new.cpp:201.)
  code_attn_mask = torch.tensor(code_attn_mask).to(model_device)
/data2/cg/CodeAttack/models/graphcodebert_models.py:1152: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  prevK = bestScoresId // numWords
[Succeeded / Failed / Skipped / Total] 716 / 256 / 28 / 1000: 100%|██████████| 1000/1000 [2:37:14<00:00,  9.43s/it]Mark this transaction as rollback only . --> plan for rollback --> Socre: 1.0

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[planrelk2let]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 997 ---------------------------------------------
Helper method to commit or rollback if the transaction is active --> Common logic for rollover --> Socre: 1.0

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[dicecreweup]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .
--------------------------------------------- Result 998 ---------------------------------------------
Gets the number of arguments and returns the number of arguments . --> Put Prrigicert --> Socre: 1.0

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String [[methodDescriptor]] ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[putrigrencyantdirenhesm]] ( final String [[publictherceptionctor]] ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 999 ---------------------------------------------
Request a resource for the transaction --> [[[FAILED]]]

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E [[resource]] = lookupResource ( resourceType ) ; if ( [[resource]] == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; [[resource]] = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , [[resource]] ) ) ; } return [[resource]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E [[mission]] = lookupResource ( resourceType ) ; if ( [[mission]] == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; [[mission]] = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , [[mission]] ) ) ; } return [[mission]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .
--------------------------------------------- Result 1000 ---------------------------------------------
Rollback all resources --> [[[FAILED]]]

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean [[wasForced]] ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( [[wasForced]] ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean [[andbeno]] ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( [[andbeno]] ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 716    |
| Number of failed attacks:     | 256    |
| Number of skipped attacks:    | 28     |
| Original accuracy:            | 97.2%  |
| Accuracy under attack:        | 25.6%  |
| Attack success rate:          | 73.66% |
| Average perturbed word %:     | 51.48% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 97.07  |
| Original BLEU-4:              | 18.32  |
| Perturbed BLEU-4:             | 1.79   |
+-------------------------------+--------+

